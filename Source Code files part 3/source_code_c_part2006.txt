ECTORY=manifests
XP_MANIFEST_NAME=x86__npdb_template_no-public-key_12.4.56.0_x-ww_ebc51910.manifest
XP_MANIFEST_PATH=manifests\x86__npdb_template_no-public-key_12.4.56.0_x-ww_ebc51910.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__npdb_template_no-public-key_12.4.56.0_x-ww_ebc51910.cat
XP_CATALOG_PATH=manifests\x86__npdb_template_no-public-key_12.4.56.0_x-ww_ebc51910.cat
XP_PAYLOAD_PATH=x86__npdb_template_no-public-key_12.4.56.0_x-ww_ebc51910
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_npdb_template,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\postrelease\uodb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	IF EXIST ddl robocopy ddl $(_NT386TREE)\msi\esp\database\postrelease\uodb\ddl /R:0 /NP /NJH /NJS /XO /XX /XF /E
	cmd.exe /V:ON /C $(INETROOT)\public\ext\xonline-ext\ManifestEdit\ManifestEdit.exe -m:$(INETROOT)\private\sql\upgrade\uodb\manifest.xml -o:$(_NT386TREE)\msi\esp\database\postrelease\uodb\manifest.xml -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).1 -dropdir:DropFromManifest -scriptsdir:ddl\scripts
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\avatardb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__avatardb_1_none_12.4.56.0_none_8994bb4967b64f92
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_avatardb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.manifest
XP_MANIFEST_PATH=manifests\x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.cat
XP_CATALOG_PATH=manifests\x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.cat
XP_PAYLOAD_PATH=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_avatardb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\avatardb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\avatardb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\avatardb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__avatardb_1_none_12.4.56.0_none_8994bb4967b64f92
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_avatardb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.manifest
XP_MANIFEST_PATH=manifests\x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.cat
XP_CATALOG_PATH=manifests\x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e.cat
XP_PAYLOAD_PATH=x86__avatardb_1_no-public-key_12.4.56.0_x-ww_a5cb2b9e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_avatardb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\BIMetadataDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\BIMetadataDB -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
    
    type deployment_bvtnet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\BIMetadataDB\deployment_bvtnet.xml
    type deployment_corenet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\BIMetadataDB\deployment_corenet.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\eventsdb -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
    type deployment_bvtnet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\eventsdb\deployment_bvtnet.xml
    type deployment_corenet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\eventsdb\deployment_corenet.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__eventsdb_4_none_12.4.56.0_none_f72dbe573203b337
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_eventsdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.manifest
XP_MANIFEST_PATH=manifests\x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.cat
XP_CATALOG_PATH=manifests\x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.cat
XP_PAYLOAD_PATH=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_eventsdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__eventsdb_4_none_12.4.56.0_none_f72dbe573203b337
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_eventsdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.manifest
XP_MANIFEST_PATH=manifests\x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.cat
XP_CATALOG_PATH=manifests\x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1.cat
XP_PAYLOAD_PATH=x86__eventsdb_4_no-public-key_12.4.56.0_x-ww_9eef59c1
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_eventsdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsysdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\eventsysdb
    type deployment_bvtnet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\eventsysdb\deployment_bvtnet.xml
    type deployment_corenet.xml | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\xdb\prodbase\eventsysdb\deployment_corenet.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsysdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__eventsysdb_4_none_12.4.56.0_none_4c91eb0717a7b265
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_eventsysdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.manifest
XP_MANIFEST_PATH=manifests\x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.cat
XP_CATALOG_PATH=manifests\x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.cat
XP_PAYLOAD_PATH=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_eventsysdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\eventsysdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__eventsysdb_4_none_12.4.56.0_none_4c91eb0717a7b265
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_eventsysdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.manifest
XP_MANIFEST_PATH=manifests\x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.cat
XP_CATALOG_PATH=manifests\x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb.cat
XP_PAYLOAD_PATH=x86__eventsysdb_4_no-public-key_12.4.56.0_x-ww_c2f0fcfb
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_eventsysdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\genealogy\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd genealogy prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\genealogy\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__genealogy_1_none_12.4.56.0_none_a2e1fc2eb757d550
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_genealogy_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.manifest
XP_MANIFEST_PATH=manifests\x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.cat
XP_CATALOG_PATH=manifests\x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.cat
XP_PAYLOAD_PATH=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_genealogy_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\genealogy\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__genealogy_1_none_12.4.56.0_none_a2e1fc2eb757d550
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_genealogy_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.manifest
XP_MANIFEST_PATH=manifests\x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.cat
XP_CATALOG_PATH=manifests\x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a.cat
XP_PAYLOAD_PATH=x86__genealogy_1_no-public-key_12.4.56.0_x-ww_ecb2da4a
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_genealogy_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\msgdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\msgdb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\msgdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__msgdb_4_none_12.4.56.0_none_fe2f0b1f308550bb
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_msgdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.manifest
XP_MANIFEST_PATH=manifests\x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.cat
XP_CATALOG_PATH=manifests\x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.cat
XP_PAYLOAD_PATH=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_msgdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\msgdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__msgdb_4_none_12.4.56.0_none_fe2f0b1f308550bb
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_msgdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.manifest
XP_MANIFEST_PATH=manifests\x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.cat
XP_CATALOG_PATH=manifests\x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b.cat
XP_PAYLOAD_PATH=x86__msgdb_4_no-public-key_12.4.56.0_x-ww_3b4a1c2b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_msgdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\npdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd npdb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\npdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__npdb_1_none_12.4.56.0_none_f02b7f4d321cc703
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_npdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_MANIFEST_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_CATALOG_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_PAYLOAD_PATH=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_npdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\npdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__npdb_1_none_12.4.56.0_none_f02b7f4d321cc703
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_npdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_MANIFEST_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_CATALOG_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_PAYLOAD_PATH=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_npdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\QueryDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd querydb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\QueryDB\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__querydb_2_none_12.4.56.0_none_9dc74f64f9e14b16
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_querydb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_MANIFEST_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_CATALOG_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_PAYLOAD_PATH=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_querydb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\QueryDB\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__querydb_2_none_12.4.56.0_none_9dc74f64f9e14b16
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_querydb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_MANIFEST_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_CATALOG_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_PAYLOAD_PATH=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_querydb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\RawCatalogDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd RawCatalogDB prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportarchivedb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\reportarchivedb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportrealtimedb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\reportrealtimedb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\reportssisdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_1_none_12.4.56.0_none_e88bc2cfec25716d
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.cat
XP_PAYLOAD_PATH=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_1_none_12.4.56.0_none_e88bc2cfec25716d
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023.cat
XP_PAYLOAD_PATH=x86__reportssisdb_1_no-public-key_12.4.56.0_x-ww_d4c58023
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb_2\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\reportssisdb_2
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb_2\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_2_0_none_12.4.56.0_none_a4fd933e4eb9e83f
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_2_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_PAYLOAD_PATH=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_2_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisdb_2\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_2_0_none_12.4.56.0_none_a4fd933e4eb9e83f
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_2_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_PAYLOAD_PATH=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_2_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisuodb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\reportssisuodb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisuodb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisuodb_2_none_12.4.56.0_none_a990d3209aa37696
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisuodb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.cat
XP_CATALOG_PATH=manifests\x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.cat
XP_PAYLOAD_PATH=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisuodb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\reportssisuodb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisuodb_2_none_12.4.56.0_none_a990d3209aa37696
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisuodb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.cat
XP_CATALOG_PATH=manifests\x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e.cat
XP_PAYLOAD_PATH=x86__reportssisuodb_2_no-public-key_12.4.56.0_x-ww_3a2c8f5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisuodb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secdb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secdb_0_none_12.4.56.0_none_5b530163f114a717
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secdb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_MANIFEST_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_CATALOG_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_PAYLOAD_PATH=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secdb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secdb_0_none_12.4.56.0_none_5b530163f114a717
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secdb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_MANIFEST_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_CATALOG_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_PAYLOAD_PATH=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secdb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secmachinehistory\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secmachinehistory prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secmachinehistory\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secmachinehistory_0_none_12.4.56.0_none_f8abcd315b6adcc6
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secmachinehistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_MANIFEST_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_CATALOG_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_PAYLOAD_PATH=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secmachinehistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secmachinehistory\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secmachinehistory_0_none_12.4.56.0_none_f8abcd315b6adcc6
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secmachinehistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_MANIFEST_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_CATALOG_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_PAYLOAD_PATH=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secmachinehistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secuserhistory\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secuserhistory prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secuserhistory\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secuserhistory_0_none_12.4.56.0_none_a19c7d9387e85a84
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secuserhistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_MANIFEST_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_CATALOG_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_PAYLOAD_PATH=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secuserhistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\secuserhistory\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secuserhistory_0_none_12.4.56.0_none_a19c7d9387e85a84
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secuserhistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_MANIFEST_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_CATALOG_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_PAYLOAD_PATH=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secuserhistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storage\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storage_2_none_12.4.56.0_none_4e1cdf81d5cd1195
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storage_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.manifest
XP_MANIFEST_PATH=manifests\x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.cat
XP_CATALOG_PATH=manifests\x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.cat
XP_PAYLOAD_PATH=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storage_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storage\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\storedb  -a:StoreDB
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\titledb  -a:titledb
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\tuserdb  -a:tuserdb
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\tteamdb  -a:tteamdb
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\msgdb    -a:msgdb
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\prodbase\avatardb -a:AvatarDB

    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/MsgDB/g"    > $(_NT386TREE)\msi\esp\database\prodbase\msgdb\%h && \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/StoreDB/g"  > $(_NT386TREE)\msi\esp\database\prodbase\storedb\%h && \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/TitleDB/g"  > $(_NT386TREE)\msi\esp\database\prodbase\titledb\%h && \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/TTeamDB/g"  > $(_NT386TREE)\msi\esp\database\prodbase\tteamdb\%h && \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/TUserDB/g"  > $(_NT386TREE)\msi\esp\database\prodbase\tuserdb\%h && \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/;s/\<\<WSTAPPNAME\>\>/AvatarDB/g" > $(_NT386TREE)\msi\esp\database\prodbase\avatardb\%h \
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storage\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storage_2_none_12.4.56.0_none_4e1cdf81d5cd1195
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storage_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.manifest
XP_MANIFEST_PATH=manifests\x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.cat
XP_CATALOG_PATH=manifests\x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25.cat
XP_PAYLOAD_PATH=x86__storage_2_no-public-key_12.4.56.0_x-ww_c8c42e25
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storage_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storedb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\storedb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storedb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storedb_2_none_12.4.56.0_none_f2e66d5c3c6a53a9
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storedb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.manifest
XP_MANIFEST_PATH=manifests\x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.cat
XP_CATALOG_PATH=manifests\x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.cat
XP_PAYLOAD_PATH=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storedb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\storedb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storedb_2_none_12.4.56.0_none_f2e66d5c3c6a53a9
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storedb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.manifest
XP_MANIFEST_PATH=manifests\x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.cat
XP_CATALOG_PATH=manifests\x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769.cat
XP_PAYLOAD_PATH=x86__storedb_2_no-public-key_12.4.56.0_x-ww_1325a769
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storedb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\testdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\prodbase\testdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\titledb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__titledb_4_none_12.4.56.0_none_a243698965708eae
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_titledb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.manifest
XP_MANIFEST_PATH=manifests\x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.cat
XP_CATALOG_PATH=manifests\x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.cat
XP_PAYLOAD_PATH=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_titledb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\titledb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\titledb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\titledb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__titledb_4_none_12.4.56.0_none_a243698965708eae
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_titledb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.manifest
XP_MANIFEST_PATH=manifests\x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.cat
XP_CATALOG_PATH=manifests\x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2.cat
XP_PAYLOAD_PATH=x86__titledb_4_no-public-key_12.4.56.0_x-ww_2916c6c2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_titledb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\toolsdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd toolsdb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\toolsdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__toolsdb_1_none_12.4.56.0_none_6f202abab9e6f668
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_toolsdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.manifest
XP_MANIFEST_PATH=manifests\x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.cat
XP_CATALOG_PATH=manifests\x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.cat
XP_PAYLOAD_PATH=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_toolsdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\toolsdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__toolsdb_1_none_12.4.56.0_none_6f202abab9e6f668
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_toolsdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.manifest
XP_MANIFEST_PATH=manifests\x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.cat
XP_CATALOG_PATH=manifests\x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2.cat
XP_PAYLOAD_PATH=x86__toolsdb_1_no-public-key_12.4.56.0_x-ww_e67d7ac2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_toolsdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tteamdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__tteamdb_4_none_12.4.56.0_none_fcf67003fa438ab5
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_tteamdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.manifest
XP_MANIFEST_PATH=manifests\x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.cat
XP_CATALOG_PATH=manifests\x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.cat
XP_PAYLOAD_PATH=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_tteamdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tteamdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\tteamdb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tteamdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__tteamdb_4_none_12.4.56.0_none_fcf67003fa438ab5
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_tteamdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.manifest
XP_MANIFEST_PATH=manifests\x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.cat
XP_CATALOG_PATH=manifests\x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b.cat
XP_PAYLOAD_PATH=x86__tteamdb_4_no-public-key_12.4.56.0_x-ww_18e3ce3b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_tteamdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tuserdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    for %h in (deployment_*.xml) do  \
          type %h | perl -pe "s/\<\<BUILDNUMBER\>\>/%_BLDVERMAJOR%.%_BLDVERMINOR%.%_BLDNUMMAJOR%.%_BLDNUMMINOR%/"    > $(_NT386TREE)\msi\esp\database\prodbase\tuserdb\%h
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tuserdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__tuserdb_1_none_12.4.56.0_none_8d04f0aae0961c3c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_tuserdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.manifest
XP_MANIFEST_PATH=manifests\x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.cat
XP_CATALOG_PATH=manifests\x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.cat
XP_PAYLOAD_PATH=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_tuserdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\tuserdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__tuserdb_1_none_12.4.56.0_none_8d04f0aae0961c3c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_tuserdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.manifest
XP_MANIFEST_PATH=manifests\x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.cat
XP_CATALOG_PATH=manifests\x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586.cat
XP_PAYLOAD_PATH=x86__tuserdb_1_no-public-key_12.4.56.0_x-ww_0f463586
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_tuserdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\uodb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd uodb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\uodb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__uodb_0_none_12.4.56.0_none_4ea5c745e889a39c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_uodb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_MANIFEST_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_CATALOG_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_PAYLOAD_PATH=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_uodb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\uodb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__uodb_0_none_12.4.56.0_none_4ea5c745e889a39c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_uodb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_MANIFEST_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_CATALOG_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_PAYLOAD_PATH=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_uodb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\webdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd webdb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\webdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__webdb_4_none_12.4.56.0_none_00409cd05760cee8
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_webdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.manifest
XP_MANIFEST_PATH=manifests\x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.cat
XP_CATALOG_PATH=manifests\x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.cat
XP_PAYLOAD_PATH=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_webdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\webdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__webdb_4_none_12.4.56.0_none_00409cd05760cee8
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_webdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.manifest
XP_MANIFEST_PATH=manifests\x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.cat
XP_CATALOG_PATH=manifests\x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e.cat
XP_PAYLOAD_PATH=x86__webdb_4_no-public-key_12.4.56.0_x-ww_607d273e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_webdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmconfigdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefileLite.cmd /database wsmconfigdb /deployment prodbase /version $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) /root msi\deployment\lsmonitor\database
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmconfigdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_wsmconfig_db_none_12.4.56.0_none_f38b9a82969a2428
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsmconfig_db
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.manifest
XP_MANIFEST_PATH=manifests\x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.cat
XP_CATALOG_PATH=manifests\x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.cat
XP_PAYLOAD_PATH=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsmconfig_db,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmconfigdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_wsmconfig_db_none_12.4.56.0_none_f38b9a82969a2428
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsmconfig_db
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.manifest
XP_MANIFEST_PATH=manifests\x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.cat
XP_CATALOG_PATH=manifests\x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640.cat
XP_PAYLOAD_PATH=x86_wsmconfig_db_no-public-key_12.4.56.0_x-ww_75569640
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsmconfig_db,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmcontroldb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefileLite.cmd /database wsmcontroldb /deployment prodbase /version $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) /root msi\deployment\lsmonitor\database
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmcontroldb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_wsm_control_db_none_12.4.56.0_none_0650155ac47e00da
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsm_control_db
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.manifest
XP_MANIFEST_PATH=manifests\x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.cat
XP_CATALOG_PATH=manifests\x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.cat
XP_PAYLOAD_PATH=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsm_control_db,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\wsmcontroldb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_wsm_control_db_none_12.4.56.0_none_0650155ac47e00da
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsm_control_db
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.manifest
XP_MANIFEST_PATH=manifests\x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.cat
XP_CATALOG_PATH=manifests\x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024.cat
XP_PAYLOAD_PATH=x86_wsm_control_db_no-public-key_12.4.56.0_x-ww_8c644024
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsm_control_db,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xblmetadb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd xblmetadb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xblmetadb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xblmetadb_0_none_12.4.56.0_none_fdbcd1d03c543597
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xblmetadb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.manifest
XP_MANIFEST_PATH=manifests\x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.cat
XP_CATALOG_PATH=manifests\x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.cat
XP_PAYLOAD_PATH=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xblmetadb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xblmetadb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xblmetadb_0_none_12.4.56.0_none_fdbcd1d03c543597
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xblmetadb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.manifest
XP_MANIFEST_PATH=manifests\x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.cat
XP_CATALOG_PATH=manifests\x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad.cat
XP_PAYLOAD_PATH=x86__xblmetadb_0_no-public-key_12.4.56.0_x-ww_694a44ad
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xblmetadb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xblnpdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    copy $(BASEDIR)\private\sql\prodbase\npdb\manifest.xml $(BASEDIR)\private\sql\prodbase\xblnpdb\manifest.xml
    cscript /e:jscript $(BASEDIR)\build\scripts\SetManifestName.js $(BASEDIR)\private\sql\prodbase\xblnpdb\manifest.xml xblnpdb

	xcopy /s /v $(BASEDIR)\private\sql\prodbase\npdb\ddl\* $(BASEDIR)\private\sql\prodbase\xblnpdb\ddl\*
	xcopy /s /v $(BASEDIR)\private\sql\prodbase\npdb\dml\* $(BASEDIR)\private\sql\prodbase\xblnpdb\dml\*

	FOR /R %%L IN (npdb.list) DO IF EXIST %%L RENAME %%L xblnpdb.list
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd xblnpdb prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
    
	xcopy $(BASEDIR)\private\sql\prodbase\xblnpdb\deployment_*.xml $(_NT386TREE)\msi\esp\database\prodbase\xblnpdb\
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xmatch\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd xmatch prodbase $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xmatch\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xmatch_0_none_12.4.56.0_none_4a1c2872106c9db5
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xmatch_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.manifest
XP_MANIFEST_PATH=manifests\x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.cat
XP_CATALOG_PATH=manifests\x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.cat
XP_PAYLOAD_PATH=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xmatch_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\prodbase\xmatch\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xmatch_0_none_12.4.56.0_none_4a1c2872106c9db5
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xmatch_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.manifest
XP_MANIFEST_PATH=manifests\x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.cat
XP_CATALOG_PATH=manifests\x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733.cat
XP_PAYLOAD_PATH=x86__xmatch_0_no-public-key_12.4.56.0_x-ww_5cf44733
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xmatch_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\genealogy\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd genealogy upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\genealogy\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__genealogy_none_12.4.56.0_none_c898dfd0482c1d1a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_genealogy
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.manifest
XP_MANIFEST_PATH=manifests\x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.cat
XP_CATALOG_PATH=manifests\x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.cat
XP_PAYLOAD_PATH=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_genealogy,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\genealogy\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__genealogy_none_12.4.56.0_none_c898dfd0482c1d1a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_genealogy
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.manifest
XP_MANIFEST_PATH=manifests\x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.cat
XP_CATALOG_PATH=manifests\x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8.cat
XP_PAYLOAD_PATH=x86__genealogy_no-public-key_12.4.56.0_x-ww_472fccb8
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_genealogy,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\npdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd npdb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\npdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__npdb_1_none_12.4.56.0_none_f02b7f4d321cc703
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_npdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_MANIFEST_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_CATALOG_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_PAYLOAD_PATH=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_npdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\QueryDB\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__querydb_2_none_12.4.56.0_none_9dc74f64f9e14b16
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_querydb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_MANIFEST_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_CATALOG_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_PAYLOAD_PATH=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_querydb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\QueryDB\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__querydb_2_none_12.4.56.0_none_9dc74f64f9e14b16
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_querydb_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_MANIFEST_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_CATALOG_PATH=manifests\x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0.cat
XP_PAYLOAD_PATH=x86__querydb_2_no-public-key_12.4.56.0_x-ww_73a404b0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_querydb_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\npdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__npdb_1_none_12.4.56.0_none_f02b7f4d321cc703
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_npdb_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_MANIFEST_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_CATALOG_PATH=manifests\x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27.cat
XP_PAYLOAD_PATH=x86__npdb_1_no-public-key_12.4.56.0_x-ww_9a971e27
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_npdb_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\QueryDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd querydb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\RawCatalogDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd RawCatalogDB upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
   cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd RawCatalogDB upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) qfeA
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd reportssisdb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_4_none_12.4.56.0_none_e88bc881ec2568e2
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.cat
XP_PAYLOAD_PATH=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_4_none_12.4.56.0_none_e88bc881ec2568e2
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6.cat
XP_PAYLOAD_PATH=x86__reportssisdb_4_no-public-key_12.4.56.0_x-ww_d63faea6
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB_2\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_2_0_none_12.4.56.0_none_a4fd933e4eb9e83f
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_2_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_PAYLOAD_PATH=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_2_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB_2\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisdb_2_0_none_12.4.56.0_none_a4fd933e4eb9e83f
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisdb_2_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_CATALOG_PATH=manifests\x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5.cat
XP_PAYLOAD_PATH=x86__reportssisdb_2_0_no-public-key_12.4.56.0_x-ww_9cbdd7b5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisdb_2_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISDB_2\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd reportssisdb_2 upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISUODB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd reportssisuodb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISUODB\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisuodb_3_none_12.4.56.0_none_a991d36a9aa28fed
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisuodb_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.cat
XP_CATALOG_PATH=manifests\x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.cat
XP_PAYLOAD_PATH=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisuodb_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\ReportSSISUODB\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__reportssisuodb_3_none_12.4.56.0_none_a991d36a9aa28fed
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_reportssisuodb_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.manifest
XP_MANIFEST_PATH=manifests\x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.cat
XP_CATALOG_PATH=manifests\x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf.cat
XP_PAYLOAD_PATH=x86__reportssisuodb_3_no-public-key_12.4.56.0_x-ww_3aaa9edf
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_reportssisuodb_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secdb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secdb_0_none_12.4.56.0_none_5b530163f114a717
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secdb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_MANIFEST_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_CATALOG_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_PAYLOAD_PATH=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secdb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secdb_0_none_12.4.56.0_none_5b530163f114a717
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secdb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_MANIFEST_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_CATALOG_PATH=manifests\x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7.cat
XP_PAYLOAD_PATH=x86__secdb_0_no-public-key_12.4.56.0_x-ww_e848dfb7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secdb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secmachinehistory\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secmachinehistory_0_none_12.4.56.0_none_f8abcd315b6adcc6
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secmachinehistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_MANIFEST_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_CATALOG_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_PAYLOAD_PATH=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secmachinehistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secmachinehistory\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secmachinehistory_0_none_12.4.56.0_none_f8abcd315b6adcc6
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secmachinehistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_MANIFEST_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_CATALOG_PATH=manifests\x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86.cat
XP_PAYLOAD_PATH=x86__secmachinehistory_0_no-public-key_12.4.56.0_x-ww_497d5e86
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secmachinehistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secuserhistory\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secuserhistory_0_none_12.4.56.0_none_a19c7d9387e85a84
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secuserhistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_MANIFEST_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_CATALOG_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_PAYLOAD_PATH=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secuserhistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secuserhistory\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__secuserhistory_0_none_12.4.56.0_none_a19c7d9387e85a84
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_secuserhistory_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_MANIFEST_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_CATALOG_PATH=manifests\x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e.cat
XP_PAYLOAD_PATH=x86__secuserhistory_0_no-public-key_12.4.56.0_x-ww_959f509e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_secuserhistory_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secmachinehistory\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
            cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secmachinehistory upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\secuserhistory\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
        cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd secuserhistory upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\storage\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\storedb  -a:StoreDB  -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\titledb  -a:titledb  -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\tuserdb  -a:tuserdb  -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\tteamdb  -a:tteamdb  -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\msgdb    -a:msgdb    -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\avatardb -a:AvatarDB -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\storage\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storage_1_none_12.4.56.0_none_4e1cf649d5ccf7f4
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storage_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.manifest
XP_MANIFEST_PATH=manifests\x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.cat
XP_CATALOG_PATH=manifests\x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.cat
XP_PAYLOAD_PATH=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storage_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\storage\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__storage_1_none_12.4.56.0_none_4e1cf649d5ccf7f4
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_storage_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.manifest
XP_MANIFEST_PATH=manifests\x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.cat
XP_CATALOG_PATH=manifests\x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4.cat
XP_PAYLOAD_PATH=x86__storage_1_no-public-key_12.4.56.0_x-ww_c8461ea4
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_storage_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\testdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\upgrade\testdb -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\testdb\add_table\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\upgrade\testdb\add_table -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\testdb\upgrade_failure\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\xdb\upgrade\testdb -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\uodb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd uodb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\uodb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__uodb_0_none_12.4.56.0_none_4ea5c745e889a39c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_uodb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_MANIFEST_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_CATALOG_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_PAYLOAD_PATH=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_uodb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\uodb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__uodb_0_none_12.4.56.0_none_4ea5c745e889a39c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_uodb_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_MANIFEST_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_CATALOG_PATH=manifests\x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e.cat
XP_PAYLOAD_PATH=x86__uodb_0_no-public-key_12.4.56.0_x-ww_3969fc5e
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_uodb_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\webdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd webdb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\webdb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__webdb_3_none_12.4.56.0_none_00409cf45760ce97
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_webdb_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.manifest
XP_MANIFEST_PATH=manifests\x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.cat
XP_CATALOG_PATH=manifests\x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.cat
XP_PAYLOAD_PATH=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_webdb_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\webdb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__webdb_3_none_12.4.56.0_none_00409cf45760ce97
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_webdb_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.manifest
XP_MANIFEST_PATH=manifests\x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.cat
XP_CATALOG_PATH=manifests\x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd.cat
XP_PAYLOAD_PATH=x86__webdb_3_no-public-key_12.4.56.0_x-ww_5fff17bd
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_webdb_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\XBLMetaDB\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xblmetadb_4_none_12.4.56.0_none_fdbcd1403c5436db
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xblmetadb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.manifest
XP_MANIFEST_PATH=manifests\x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.cat
XP_CATALOG_PATH=manifests\x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.cat
XP_PAYLOAD_PATH=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xblmetadb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\XBLMetaDB\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xblmetadb_4_none_12.4.56.0_none_fdbcd1403c5436db
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xblmetadb_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.manifest
XP_MANIFEST_PATH=manifests\x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.cat
XP_CATALOG_PATH=manifests\x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1.cat
XP_PAYLOAD_PATH=x86__xblmetadb_4_no-public-key_12.4.56.0_x-ww_6b4282b1
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xblmetadb_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\XBLMetaDB\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
	cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd xblmetadb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\xmatch\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xmatch_3_none_12.4.56.0_none_4a1f29501069e9ba
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xmatch_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.manifest
XP_MANIFEST_PATH=manifests\x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.cat
XP_CATALOG_PATH=manifests\x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.cat
XP_PAYLOAD_PATH=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xmatch_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\xmatch\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    $(BASEDIR)\public\ext\xonline-ext\manicopy\manicopy.exe -m:manifest.xml -d:$(_NT386TREE)\msi\esp\database\upgrade\xmatch -v:$(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR) -u
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\xblnpdb\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

SQLTARGET:
    copy $(BASEDIR)\private\sql\upgrade\npdb\manifest.xml $(BASEDIR)\private\sql\upgrade\xblnpdb\manifest.xml
    cscript /e:jscript $(BASEDIR)\build\scripts\SetManifestName.js $(BASEDIR)\private\sql\upgrade\xblnpdb\manifest.xml xblnpdb
    
    xcopy /s /v $(BASEDIR)\private\sql\upgrade\npdb\ddl\* $(BASEDIR)\private\sql\upgrade\xblnpdb\ddl\*
    xcopy /s /v $(BASEDIR)\private\sql\upgrade\npdb\dml\* $(BASEDIR)\private\sql\upgrade\xblnpdb\dml\*
	
	if exist dml\data\npdb.list move /Y dml\data\npdb.list dml\data\xblnpdb.list
    cmd.exe /V:ON /C $(INETROOT)\build\scripts\SqlMakefile.cmd xblnpdb upgrade $(_NT386TREE) $(_BLDVERMAJOR).$(_BLDVERMINOR).$(_BLDNUMMAJOR).$(_BLDNUMMINOR)

    xcopy $(BASEDIR)\private\sql\upgrade\xblnpdb\dml\data\load_static_data.cmd $(_NT386TREE)\msi\esp\database\upgrade\xblnpdb\dml\data
    xcopy $(BASEDIR)\private\sql\upgrade\xblnpdb\dml\data\*.dat $(_NT386TREE)\msi\esp\database\upgrade\xblnpdb\dml\data
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\sql\upgrade\xmatch\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__xmatch_3_none_12.4.56.0_none_4a1f29501069e9ba
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_xmatch_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.manifest
XP_MANIFEST_PATH=manifests\x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.cat
XP_CATALOG_PATH=manifests\x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6.cat
XP_PAYLOAD_PATH=x86__xmatch_3_no-public-key_12.4.56.0_x-ww_5e6e75b6
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_xmatch_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__common_4_none_12.4.56.0_none_2759e4a443f69403
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_common_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.manifest
XP_MANIFEST_PATH=manifests\x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.cat
XP_CATALOG_PATH=manifests\x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.cat
XP_PAYLOAD_PATH=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_common_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\ActTestBase.cs ===
// Copyright  Microsoft Corporation. 
//
// Application Center Test (ACT) managed test module base class
// 
// Setup and usage notes:
//
//
// 1. create a class that inherits from ActTestBase, implementing the 
//    ExecuteTest and SerivceId methods.   ExecuteTest is called repatedly 
//    on each thread; it can make one or more PostXrlRequest calls, each of which 
//    counts as a 'request' in the RPS tally.    set _runError = true to stop the test. 
//    ServiceId should simply return the service ide used in the xrl request headers.  
//
// 2. register the compiled assembly using .net's regasm.exe utility, specifying the /codebase parameter, i.e. 
//      regasm myacttest.dll /codebase
//    for .net security reasons, this step must be done each time the assembly is recompiled. 
//
// 3. Here is the ACT test script sample with calls to the test module:
//
// Dim ActTest, rc 
// Set ActTest = CreateObject("ActTest.CreateAccount")
// rc = ActTest.StartTest(Test, "slamb0", 80)
// if (Not rc) then Test.StopTest()
// 
// (replace "ActTest.CreateAccount" with the namespace.class of your own module)
//
// 4. you can debug your managed code modules under VS.NET debugger - attach debugger to ACTBroker.exe process. 
//
// 5. Test module reports errors into ACT trace log via Test.Trace (or just Trace from w/in the test module)
//
// 6. the developer edition of ACT is installed with VS.NET.  you can install the enterprise edition from 
//    \\Smxfiles\builds\ACT\en\0527\x86\FRE.ent\CDImage.  However, you must first uninstall ACT that came with VS.NET.
//    the enteriprise edition allows for bandwidth throttling and controlling multiple clients.
//



using System;
using System.IO;
using System.Diagnostics;
using System.Collections;
using System.Text;
using System.Threading;
using System.Globalization;
using ActApplicationLIB;
using ATS;
using xonline.common.service;
using xonline.common.mgmt;


namespace ActTest
{
	public abstract class ActTestBase
	{
		
        //
        // ExecuteTest
        //  
        //      Called repeatedly from each ACT thread.    this should run one or
        //      more tests via the PostXrlRequest method.
        //
        public abstract void ExecuteTest();
        
        // 
        // ServiceId
        // 
        //      Should return the serivce ID to be specified in the XRL headers
        //      of the request. 
        //
        public abstract int ServiceId { get; }
        
        //
        // Init
        //
        //      Called once per thread at the start of each test. 
        //      return false if the test should abort. 
        //
        public virtual bool Init( ATS.Test test, string server, int port )
        {
            XomLoggingControl.Init();
            
            _runError = false;
            
            _test = test;
            _server = server;
            _port = port;
            
            
            _conn = test.CreateConnection(server, port, false);
            if (_conn == null)      
            {
                Trace("Error: Unable to create connection to: " + server);
                test.StopTest();
                return false;
            }
            
            return true;
        }

        //
        // StartTest
        //
        //      Called by the ACT script to initiate the test.  Doesn't return
        //      until the test is complete. 
        //
        public virtual bool StartTest( ATS.Test test, string server, int port )
		{
            try
            {
    
                if (!Init(test, server, port))
                {
                    return false;
                }
                
    			while (true) 
    			{
    				if(_runError)	// in case of error we just wait for termination from ACT
    				{
    					test.StopTest();
    					return false;
    				}
    
                    ExecuteTest();
    
    			}
            }
            catch(Exception e)
            {
                Trace("Error: " + e.ToString());
                test.StopTest();
                return false;
            }
			
		}
        
        
        
        
        // 
        // PostXrlRequest
        //  
        //      Posts an http request using the headers specified in the XRL spec. 
        //      returns the hresult as specified in the X-Err header of the response.
        //
        public virtual uint PostXrlRequest(string xrl, byte[] postBuf, out byte[] respBuf)
        {
            ATS.Request req;
            ATS.Response resp;
            ATS.Headers headers;
            ATS.Header header;
            uint hr = HResult.E_FAIL;
            string postStr;
            
            respBuf = null;
            
            req = _test.CreateRequest();
            
            headers = req.Headers;
            headers.RemoveAll();
            
            headers.Add( "Host", "(automatic)");                                                            
            headers.Add( "Content-Type", "xon/" + ServiceId.ToString());
            headers.Add( "User-Agent", ServiceId.ToString() + "/" + _majorVer + "." + _minorVer + "." + _build);
            headers.Add( "Content-Length", "(automatic)");
            
            
            req.Verb = "POST";
            req.EncodeBody = false;
            req.HTTPVersion  = "HTTP/1.1";
            req.Path = xrl;
                                                                                                                
            if (postBuf != null)
            {
                postStr = GetString(postBuf);
                req.Body = postStr;
            }            

            if (!_conn.IsOpen)
            {
                _conn.Close();
                _conn = _test.CreateConnection(_server, _port, false);
    
                if (_conn == null)
                {
                    Trace("Error: Unable to create connection to: " + _server);
                    _runError = true;
                    return HResult.E_FAIL;
                }
            }
            

            
            resp = _conn.Send(req);
            if (resp != null)
            {
                object cp_acp = "RAW_UTF16";
                
                resp.set_CodePage(cp_acp);
                respBuf = GetBytes(resp.Body);
                
                hr = HResult.S_OK;
                
                headers = resp.Headers;
                header = headers["X-Err"];
                if (header != null)
                {
                    try
                    {
                        hr = HResult.Parse(header.Value);
                    }
                    catch(Exception e)
                    {
                        Trace("Error: unable to parse return code from " + xrl + " (" + header.Value + "): " + e.ToString());
                        hr = 0x8007042A;                 // ERROR_SERVICE_SPECIFIC_ERROR
                    }
                    
                }
                else
                {
                    if (resp.ResultCode != "200")
                    {
                        Trace("Error: " + xrl + " returned unexpected result code " + resp.ResultCode + " with no X-Err");
                        hr = 0x8007042A;                 // ERROR_SERVICE_SPECIFIC_ERROR
                    }
                }
                
                _test.IncrementGlobalIndex(1, 1);
                
            }
            else
            {
                Trace("Error: invalid request or host not found: server:" + _server + " xrl:" + xrl);
                _test.IncrementGlobalIndex(1, 1);
                _test.IncrementGlobalIndex(2, 1);                    
            }
            
            return hr;
        
        }
        
        //
        // Trace
        //
        //      Write a message to the ACT trace log
        //
        public virtual void Trace(string str)
        {
            object cp = 1252;
            _test.Trace(str, ref cp);
        }
        
        
        //
        // Verify
        //
        //      Checks for success of the given hresult, 
        //      logs an erorr and increments the error count if
        //      it's a failure hr.
        //
        public virtual void Verify(uint hr)
        {
            if (HResult.Failed(hr))
            {
                Trace("Error: hr " + hr.ToString("x") + " returned!");
                IncrementErrorCount();    
            }
        }
        
        
        //
        // IncrementErrorCount
        //
        //      Increments the number of "HTTP Errors" by one. 
        //
        public void IncrementErrorCount()
        {
            _test.IncrementGlobalIndex(2, 1);                    
        }


        //
        // UACSServer
        // 
        //      Server to talk with when creating accounts
        //
        public string UACSServer
        {
            get { return _xuacsServer; }
            set { _xuacsServer = value; } 
        }


        //
        // UACSPort
        // 
        //      Port to talk with when creating accounts
        //
        public int UACSPort
        {
            get { return _xuacsPort; }
            set { _xuacsPort = value; } 
        }


        //
        // CreateAccount
        // 
        //      Creates a new user account, returning the puid.
        //      Typically called during a test's Init method.
        //
        public ulong CreateAccount()
        {
                ulong puid;
            
            lock(typeof(ActTestBase))
            {
                
                if (_xuacsServer == "")
                {
                    Trace("UACSServer property must be set to create users!");
                    return 0;
                }
                
                if (_test == null)
                {
                    Trace("Must call ActTestBase.Init() before calling CreateAccount!");
                    return 0;
                }
                
                CreateAccount acct = new CreateAccount();
                acct.Init(_test, _xuacsServer, _xuacsPort);
                
                puid = acct.CreateUser();
                
                if (puid == 0)
                {
                    Trace("Failed to create a user!");
                    return 0;
                }
            }
            
            
            return puid;
        }
    


        
        
        /////////////////////
        //
        // internal stuff
        //
        
		protected static bool  _runError    = false;         

        ATS.Connection _conn     = null;
        ATS.Test       _test     = null;
        
        string _server = "";
        int _port = 80;
        
        string _xuacsServer = "";
        int _xuacsPort = 80;
        
        int _majorVer = 0;
        int _minorVer = 10;
        int _build = 4625;

                
        private unsafe String GetString(byte[] bytes) 
        {
            byte[] uniBytes = bytes;
            
            if (bytes == null)
            {
                throw new ArgumentNullException("bytes");
            }
                
            
            if ((bytes.Length & 1) != 0)
            {
                // odd # of bytes, need to grow by one
                uniBytes = new byte[bytes.Length + 1];
                bytes.CopyTo(uniBytes, 0);
            }

            fixed(byte* pBytes = uniBytes)
            {
                return new String((sbyte*) pBytes, 0, uniBytes.Length);
            }
        }

        private byte[] GetBytes(string str) 
        {
            byte[] bytes;
            UnicodeEncoding enc = new UnicodeEncoding();
            
            bytes = enc.GetBytes(str);
            return bytes;
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\xrlobject.cs ===
using System;
using System.Web;
using System.IO;
using System.Text;
using System.Reflection;
using System.Collections;
using System.Collections.Specialized;
using System.Diagnostics;
using xonline.common.service;

using xonline.common.mgmt;


namespace xonline.common.service 
{
    [AttributeUsage(AttributeTargets.Field)]
    public class XRLLayoutAttribute : Attribute
    {
        
        private uint _order;
        private int _wireSize = -1;
        private int _wireSizeOfField = -1;
        private FieldInfo _field = null;
        private object _instance = null;
        private byte[] _bytes = null;
        private bool _explicitWireSize = true;
        private UTF8Encoding _enc;
        private long _max = 0;
        private long _min = 0;
        private bool _maxSet = false;
        private bool _minSet = false;
        

        public XRLLayoutAttribute(uint order)
        {
            _order = order;
        }

        public uint Order
        {
            get { return _order; }
            set { _order = value; }
        }

        public int WireSizeOfField
        {
            get { return _wireSizeOfField; }
            set { _wireSizeOfField = value; }
        }

        public int WireSize
        {
            get 
            { 
                if (_wireSize == -1)
                {
                    _wireSize = CalcTypeWireSize();
                    _explicitWireSize = false;
                }
                return _wireSize; 
            }
            
            set { _wireSize = value; }
        }
        
        
        public long Max
        {
            get { return _max; }
            set { _maxSet = true; _max = value; }
        }

        public long Min
        {
            get { return _min; }
            set { _minSet = true; _min = value; }
        }

        public bool MaxSet
        {
            get { return _maxSet; }
        }

        public bool MinSet
        {
            get { return _minSet; }
        }

        
        public FieldInfo Field
        {
            get { return _field; }
            set { _field = value; }
        }

        public UTF8Encoding ContentEncoding
        {
            get { return _enc; }
            set { _enc = value; }
        }
        public object Instance
        {
            get { return _instance; }
            set { _instance = value; }
        }



        public void Reset()
        {
            _bytes = null;
            if (_explicitWireSize == false)
            {
                _wireSize = -1;
            }
        }

        private int CalcTypeWireSize()
        {
            Debug.Assert(_instance != null);
            Debug.Assert(_field != null);
            int size = 0;
                
            object val = _field.GetValue(_instance);

            if (val is int || val is uint)
            {
                size = 4;
            }
            else if (val is long || val is ulong)
            {
                size = 8;
            }
            else if (val is short || val is ushort)
            {
                size = 2;
            }
            else if (val is string)
            {
                if (_bytes == null)
                {
                    _bytes = _enc.GetBytes((string)val);
                }
                size = _bytes.Length;
            }
            else if (val is DateTime)
            {
                size = 8;
            }
            else if (val is byte)
            {
                size = 1;
            }
            else if (val is byte[])
            {
                size = ((byte[])val).Length;
            }
            /* @@ slamb -- removed, as we shouldn't be using these.  19434
            else if (val is char) 
            {
                if (_bytes == null)
                {
                    _bytes = _enc.GetBytes(new char[] { (char)val });
                }
                size = _bytes.Length;
            }
            else if (val is char[]) 
            {
                if (_bytes == null)
                {
                    _bytes = _enc.GetBytes((char[])val);
                }
                size = _bytes.Length;
            }
            */
            else if (val == null)
            {
                size = 0;
            }
            else
            {
                Debug.Assert(false, "Unknown type " + _field.FieldType);
            }

            return size;

        }
        
        private void CheckRange(long val)
        {
            if ((_maxSet && val > _max) || (_minSet && val < _min))
            {
                throw new XRLException(HResult.XONLINE_E_INVALID_REQUEST, XEvent.Id.TEST_CODE_4, "Value " + val + " out of range for field " + _field.Name);
            }
        }
        
        
        public void ReadFromRequest(BinaryReader reader)
        {
            Debug.Assert(_instance != null);
            Debug.Assert(_field != null);
            
            if (_wireSize != 0)
            {
                if (_field.FieldType == typeof(int))
                {
                    int val = reader.ReadInt32();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(uint))
                {
                    uint val = reader.ReadUInt32();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(long))
                {
                    long val = reader.ReadInt64();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(ulong))
                {
                    Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for ulong types!");
                    _field.SetValue(_instance, reader.ReadUInt64());
                }
                else if (_field.FieldType == typeof(short))
                {
                    short val = reader.ReadInt16();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(ushort))
                {
                    ushort val = reader.ReadUInt16();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(string))
                {
                    string val;
                    Debug.Assert(_wireSize != -1);
                    val = _enc.GetString(reader.ReadBytes(_wireSize));
                    CheckRange(val.Length);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(DateTime))
                {
                    long lval = reader.ReadInt64();
                    Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for date types!");
                    DateTime dt = DateTime.FromFileTime(lval).ToUniversalTime();
                    _field.SetValue(_instance, dt);
                }
                else if (_field.FieldType == typeof(byte))
                {
                    byte val = reader.ReadByte();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(byte[]))
                {
                    Debug.Assert(_wireSize > 0, "WireSize is required for reading byte[]!");
                    Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for byte[] types!");
                    _field.SetValue(_instance, reader.ReadBytes(_wireSize));
                }
                /* @@ slamb -- removed, as we shouldn't be using these.  19434
                else if (_field.FieldType == typeof(char))
                {
                    char val = reader.ReadChar();
                    CheckRange(val);
                    _field.SetValue(_instance, val);
                }
                else if (_field.FieldType == typeof(char[]))
                {
                    Debug.Assert(_wireSize > 0, "WireSize is required for reading char[]!");
                    Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for char[] types!");
                    _field.SetValue(_instance, reader.ReadChars(_wireSize));
                }
                */
                else
                {
                    Debug.Assert(false, "Unsupported field type: " + _field.FieldType);
                }
            }

            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.ReadFromRequest: ... " + _field.Name + " {" + _field.FieldType.ToString() + "} == <" + _field.GetValue(_instance) + ">" );
        }


        public void ReadFromQueryString(NameValueCollection qs)
        {
            Debug.Assert(_instance != null);
            Debug.Assert(_field != null);

            string val = qs[_field.Name];

            if (val == null)
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_WARNING, "XRLObject.ReadFromQueryString: ... Couldn't find " + _field.Name + " in QueryString.  Skipping." );
                return;
            }
                        
            _field.SetValue(_instance, Convert.ChangeType(val, _field.FieldType));
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.ReadFromQueryString: ... " + _field.Name + " {" + _field.FieldType.ToString() + "} == <" + _field.GetValue(_instance) + ">" );
        }


        public void WriteToResponse(BinaryWriter writer)
        {
            int count;
            object val;

            Debug.Assert(_instance != null);
            Debug.Assert(_field != null);
            
            val     = _field.GetValue(_instance);
            count   = CalcTypeWireSize();
            
            
            if (_bytes != null)
            {
                if (count > _wireSize && _wireSize > 0)
                {
                    Xom.Trace(XomAreaName.xrltrace, LogLevel.L_WARNING, "XRLUtil.WriteToResponse:  TRUNCATING value!  encoded length: " + count + " WireSize: " + _wireSize );
                    count = _wireSize;
                }

                writer.Write(_bytes, 0, count);
            }
            else if (_field.FieldType == typeof(int))
            {
                CheckRange((int)val);
                writer.Write((int)val);
            }
            else if (_field.FieldType == typeof(uint))
            {
                CheckRange((uint)val);
                writer.Write((uint)val);
            }
            else if (_field.FieldType == typeof(long))
            {
                CheckRange((long)val);
                writer.Write((long)val);
            }
            else if (_field.FieldType == typeof(ulong))
            {
                Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for ulong types!");
                writer.Write((ulong)val);
            }
            else if (_field.FieldType == typeof(short))
            {
                CheckRange((short)val);
                writer.Write((short)val);
            }
            else if (_field.FieldType == typeof(ushort))
            {
                CheckRange((ushort)val);
                writer.Write((ushort)val);
            }
            else if (_field.FieldType == typeof(DateTime))
            {
                Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for DateTime types!");
                DateTime dt = (DateTime)val;
                long lval = dt.ToLocalTime().ToFileTime();
                writer.Write(lval);
                count = 8;
            }
            else if (_field.FieldType == typeof(byte))
            {
                CheckRange((byte)val);
                writer.Write((byte)val);
                count = 1;
            }
            else if (_field.FieldType == typeof(byte[]))
            {
                Debug.Assert(!_maxSet && !_minSet, "Max / Min not valid for byte[] types!");
                count = ((byte[])val).Length;
                if (count > _wireSize && _wireSize > 0)
                {
                    // force the smaller size by copying to a new array
                    Xom.Trace(XomAreaName.xrltrace, LogLevel.L_WARNING, "XRLUtil.WriteToResponse: TRUNCATING string!  encoded length: " + count + " WireSize: " + _wireSize );
                    count = _wireSize;
                }
                
                writer.Write((byte[])val, 0, count);
                
            }
            //else if (_field.FieldType == null)
            else if (val == null)
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.WriteToResponse:  SKIPPING null value " + _field.Name );
                count = 0;
            }
            else
            {
                Debug.Assert(false, "Unsupported type: " + _field.FieldType);
            }

            Debug.Assert(_wireSize == -1 || _wireSize >= count, "WireSize=" + _wireSize + ", too small to send " + _field.FieldType + "!");

            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.WriteToResponse: ... " + _field.Name + " {" + _field.FieldType.ToString() + "} == <" + val + ">" );
            
            if (count < _wireSize)
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.WriteToResponse: ... padding of " + (_wireSize - count) + " bytes." );
                byte[] padding = new byte[_wireSize - count];
                writer.Write(padding);
            }

        }

    }

    
        
    public class XRLObject
    {
            
        //-----------------------------------------------------
        // ReadFromRequest
        //
        public virtual void ReadFromRequest(HttpRequest req)
        {
            BinaryReader reader = new BinaryReader(req.InputStream);
            Debug.Assert(req.ContentEncoding is UTF8Encoding, "Unexpected encoding type!");
            
            ReadFromRequest(reader, (UTF8Encoding)req.ContentEncoding, req.ContentLength, req.QueryString);
        }
        
        public virtual void ReadFromRequest(BinaryReader reader, UTF8Encoding enc, long len, NameValueCollection queryString)
        {
            Type t = this.GetType();
            FieldInfo[] fields;
            XRLLayoutAttribute[] layouts;
            XRLLayoutAttribute layout;
            int fieldCount = 0;
            
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.ReadFromRequest: Reading " + t.ToString() + " from post buffer..." );
#if DEBUG
            if (len == 0 && queryString != null && queryString.Count != 0)
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_WARNING, "XRLObject.ReadFromRequest: Post buffer empty!  Reading " + t.ToString() + " from QUERY STRING..." );
            }
#endif

            fields = t.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
            
            layouts = GetSortedLayouts(fields, enc, out fieldCount);
            
            Debug.Assert(fieldCount <= layouts.Length);

            for (int i = 0; i < fieldCount; i++)
            {
                layout = layouts[i];
                Debug.Assert(layout != null);
                
#if DEBUG
                if (len == 0 && queryString != null && queryString.Count != 0)
                {
                    layout.ReadFromQueryString(queryString);
                    continue;
                }
#endif

                layout.ReadFromRequest(reader);

                if (layout.WireSizeOfField != -1)
                {
                    Debug.Assert(layout.WireSizeOfField > layout.Order, "XRLLayoutAttribute.WireSizeOfField must be > than XRLLayoutAttribute.Order!");
                    Debug.Assert(layout.WireSizeOfField < fieldCount, "XRLLayoutAttribute out of range!");
                    
#if DEBUG
                    Debug.Assert(layout.MaxSet == true, "No Max set for field " + layout.Field.Name +"!   Potential buffer overrrun!!");
#endif

                    layouts[layout.WireSizeOfField].WireSize = Convert.ToInt32(layout.Field.GetValue(this));
                }
            }
        }
    
    
        //-----------------------------------------------------
        // WriteToResponse
        // 
        //      this overrideable implementation uses reflection
        //      to find any instance fields, and writes 
        //      most common types to the response stream in the 
        //      order of declaration.
        //
        //      - strings are sent in UTF8.
        //      - DateTime is sent as a SYSTEMTIME struct as 
        //      defined by windows.h(?)
        // 
        public virtual void WriteToResponse(HttpResponse resp)
        {
            BinaryWriter writer = new BinaryWriter(resp.OutputStream);
            Debug.Assert(resp.ContentEncoding is UTF8Encoding, "Unexpected encoding type!");
            WriteToResponse(writer, (UTF8Encoding)resp.ContentEncoding);
        }
        
        public virtual void WriteToResponse(BinaryWriter writer, UTF8Encoding enc)
        {
            Type t = this.GetType();
            FieldInfo[] fields;
            XRLLayoutAttribute[] layouts;
            XRLLayoutAttribute layout;
            int fieldCount = 0;
            
            fields = t.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLObject.WriteToResponse: Writing " + t.ToString() + " to response..." );
            
            layouts = GetSortedLayouts(fields, enc, out fieldCount);
            Debug.Assert(fieldCount <= layouts.Length);

            for (int i = 0; i < fieldCount; i++)
            {
                layout = layouts[i];
                Debug.Assert(layout != null);

                if (layout.WireSizeOfField != -1)
                {
                    Debug.Assert(layout.WireSizeOfField > layout.Order, "XRLLayoutAttribute.WireSizeOfField must be > than XRLLayoutAttribute.Order!");
                    Debug.Assert(layout.WireSizeOfField < fieldCount, "XRLLayoutAttribute out of range!");

                    layout.Field.SetValue(this, Convert.ChangeType(layouts[layout.WireSizeOfField].WireSize, layout.Field.FieldType));
                }
                
                layout.WriteToResponse(writer);
            }
        }

        private XRLLayoutAttribute[] GetSortedLayouts(FieldInfo[] fields, UTF8Encoding enc, out int count)
        {
            XRLLayoutAttribute[] layouts;
            XRLLayoutAttribute layout;
            Type layoutType = typeof(XRLLayoutAttribute);

            count = 0;
            layouts = new XRLLayoutAttribute[fields.Length];

            for (int i = 0; i < fields.Length; i++)
            {
                object[] attribs = fields[i].GetCustomAttributes(layoutType, false);

                if (attribs.Length > 0)
                {
                    Debug.Assert(attribs.Length == 1, "More than one XRLLayoutAttributes defined for field " + fields[i].Name);

                    layout = (XRLLayoutAttribute)attribs[0];
                    Debug.Assert(layout.Order >= 0 && layout.Order < fields.Length, "XRLLayoutAttribute.Order for " + fields[i].Name + " out of range!");
                    
                    layout.Reset();
                    layout.Field = fields[i];
                    layout.Instance = this;
                    layout.ContentEncoding = enc;

                    layouts[layout.Order] = layout;
                    count++;
                }
            }


            return layouts;
            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__common_4_none_12.4.56.0_none_2759e4a443f69403
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_common_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.manifest
XP_MANIFEST_PATH=manifests\x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.cat
XP_CATALOG_PATH=manifests\x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75.cat
XP_PAYLOAD_PATH=x86__common_4_no-public-key_12.4.56.0_x-ww_e448aa75
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_common_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\CreateAccount.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

using xonline.common.service;

namespace ActTest
{
	public class CreateAccount : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        CreateOwnerAccountRequest _req;
        CreateOwnerAccountResponse _resp;

        public CreateAccount()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _req = new CreateOwnerAccountRequest();
            _resp = new CreateOwnerAccountResponse();
        }
        
        public override void ExecuteTest()
        {
            CreateUser();
        }
        
        public ulong CreateUser()
        {
            byte[] respBuf = null;
            uint hr;
            BinaryReader reader;

            _req.machinePuid = 0x0009000000000001;
            _req.titleId = XOn.DASH_TITLE_ID;
            _req.birthdate = new DateTime(1989, 1, 1);
            _req.msSpam = 0;
            _req.partnerSpam = 1;
            _req.countryId = 103;
            _req.languageId = 1;
            _req.cardTypeId = 0;
            _req.cardExpiration = new DateTime(2004, 1, 1);
            _req.gamertag = "ACT" + Crypto.GetRandomString(7);
            _req.firstName = "CreateAccount";
            _req.lastName = "test";
            _req.street1 = "1 testme way";
            _req.city = "redmond";
            _req.state = "WA";
            _req.postalCode = "98052";
            _req.phonePrefix = "425";
            _req.phoneNumber = "882-8080";
            _req.cardHolder = "CreateAccount Test";
            //_req.cardNumber = GenerateCCNumber();
            _req.cardNumber = "4111111111111111";
            _req.email = "CreateAccont@acttest.com";
            _req.activationCode = "1111111111111111111111111";

            _stream.SetLength(0);
            _req.WriteToResponse(_writer, _enc);
            
            hr = PostXrlRequest("/xuacs/CreateOwnerAcct.ashx", _stream.ToArray(), out respBuf);
            if (HResult.Failed(hr))
            {
                Trace("Error: CreateUser failed!  " + hr.ToString("x"));
                return 0;
            }
            
            reader = new BinaryReader(new MemoryStream(respBuf));
            _resp.ReadFromRequest(reader, _enc, respBuf.Length, null);
            
            return _resp.Puid;                        
        }
        
        public override int ServiceId
        {
            get { return (int)XOService.User_Account; }
        }
        
        public string GenerateCCNumber()
        {
            int n;
            int pos;        // left->right 0-based char position
            int sum;        // checksum
            StringBuilder strB = new StringBuilder(16);
            Random rand = new Random();
        
            strB.Append("4");
            sum = 8;
    
            for (pos= 1; pos < 15; pos++)
            {
                n = rand.Next(10);
    
                strB.Append(n);
                
                if (pos % 2 == 0) n *= 2;
                if (n >= 10) n -= 9;
    
                sum += n;
            }
    
    
            int check = 10 - (sum % 10);
            if (check == 10) check = 0;
            strB.Append(check);
    
            return strB.ToString();
        }
    }
    
    public class CreateOwnerAccountRequest : XRLObject
    {
        public ulong machinePuid;
        
        public uint titleId;
        public DateTime birthdate;
        
        public byte msSpam;
        public byte partnerSpam;
        
        public byte countryId;
        public ushort languageId;
        
        public byte cardTypeId;
        public DateTime cardExpiration;
        
        public ushort gamertagLen;
        public string gamertag;

        public ushort firstNameLen;
        public string firstName;
        public ushort lastNameLen;
        public string lastName;
        public ushort street1Len;
        public string street1;
        public ushort street2Len;
        public string street2;
        public ushort street3Len;
        public string street3;
        public ushort cityLen;
        public string city;
        public ushort stateLen;
        public string state;
        public ushort postalCodeLen;
        public string postalCode;

        public ushort phonePrefixLen;
        public string phonePrefix;
        public ushort phoneNumberLen;
        public string phoneNumber;
        public ushort phoneExtensionLen;
        public string phoneExtension;

        public ushort cardHolderLen;
        public string cardHolder;
        public ushort cardNumberLen;
        public string cardNumber;
        
        public ushort emailLen;
        public string email;
        public ushort bankCodeLen;
        public string bankCode;
        public ushort branchCodeLen;
        public string branchCode;
        public ushort checkDigitsLen;
        public string checkDigits;

        public ushort activationCodeLen;
        public string activationCode;
    } 

    public class CreateOwnerAccountResponse : XRLObject
    {
        public ulong Puid;

        public byte[] Key;

        public string Domain;
        
        public string Realm;
    }

    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\common\xrlutilold.cs ===
using System;
using System.Net;
using System.IO;
using System.Web;
using System.Text;
using System.Reflection;
using System.Globalization;
using System.Diagnostics;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;


namespace xonline.common.service 
{
    public class XRLUtilOld
    {
        //-----------------------------------------------------
        // SetXRLResponse
        //      
        //      Sets up the response header and (optionally) 
        //      the body in accordace with the XRL spec. 
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, uint hr, XRLObject data)
        {
            XRLUtil.SetXRLResponse(resp, svc, hr);

            if (data != null)
            {
                data.WriteToResponse(resp);
            }
        }

        //-----------------------------------------------------
        // SetXRLResponse
        //      
        //      Sets up the response header and (optionally) 
        //      the body in accordace with the XRL spec. 
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, uint titleId, uint hr, XRLObject data)
        {
            XRLUtil.SetXRLResponse(resp, svc, titleId, hr);

            if (data != null)
            {
                data.WriteToResponse(resp);
            }
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //      
        //      Same thing as above, but marshalls XRLOjbects
        //      automatically.
        //      
        //
        public static uint PostXrlRequest( XOService service, string path, XRLObject postOb, ref XRLObject respOb )
        {
            uint hr;
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            byte[] respData;
            
            postOb.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            writer.Flush();
            hr = XRLUtil.PostXrlRequest(service, path, -1, SGInfo.ToBase64String(), stream.ToArray(), null, out respData);
            
            if (respOb != null && respData != null && respData.Length != 0)
            {
                BinaryReader reader = new BinaryReader(new MemoryStream(respData));
                respOb.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respData.Length, null);
            }
            
            return hr;
        }
        
        //-----------------------------------------------------
        // PostXrlRequest
        //      
        //      no reponse object version
        //      
        //
        public static uint PostXrlRequest( XOService service, string path, XRLObject postOb )
        {
            uint hr;
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            byte[] respData;
            
            postOb.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            writer.Flush();
            hr = XRLUtil.PostXrlRequest(service, path, -1, SGInfo.ToBase64String(), stream.ToArray(), null, out respData);

            return hr;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_acttest.xbos_none_12.4.56.0_none_036967b19ad3cb7b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=acttest.xbos
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.manifest
XP_MANIFEST_PATH=manifests\msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.cat
XP_CATALOG_PATH=manifests\msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.cat
XP_PAYLOAD_PATH=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=acttest.xbos,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\OfferingEnumerate.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

using XBOX.Online.Accounts;
using xonline.common.service;

namespace ActTest
{
	public class OfferingEnumerate : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        EnumerateRequest _req;
        ulong _puid;
        
        
        public OfferingEnumerate()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _req = new EnumerateRequest();
            _puid = 0;
        }
        
        

        public override bool Init( ATS.Test test, string server, int port )
        {
            base.Init(test, server, port);
            
            _puid = CreateAccount();
            
            if (_puid == 0)
            {
                Trace("Failed to create a user!  aborting test.");
                return false;
            }
            
            Trace("Running test using puid " + _puid.ToString("x"));
            return true;
        }
        
        public override void ExecuteTest()
        {
            byte[] respBuf = null;
                        
            _req.qwUserPUID = (long)_puid;
            _req.dwTitleId = -65268;
            _req.cbClientBuffer = 1024;
            _req.dwRating = 0;
            _req.ftLastChangedDate = new DateTime(2001, 11, 15);
            _req.dwOfferingType = 0xffffffff;
            _req.dwBitFilter = 0xffffffff;
            _req.dwDescriptionIndex = 0;
            _req.wStartingIndex = 0;
            _req.wMaxResults = 20;
            
            
            _stream.SetLength(0);
            _req.WriteToResponse(_writer, _enc);
            
            Verify(PostXrlRequest("/xbos/OfferingEnumerate.ashx", _stream.ToArray(), out respBuf));
        }
        
        
        public override int ServiceId
        {
            get { return (int)XOService.Billing_Offering; }
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_acttest.xbos_none_12.4.56.0_none_036967b19ad3cb7b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=acttest.xbos
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.manifest
XP_MANIFEST_PATH=manifests\msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.cat
XP_CATALOG_PATH=manifests\msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b.cat
XP_PAYLOAD_PATH=msil_acttest.xbos_no-public-key_12.4.56.0_x-ww_e587565b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=acttest.xbos,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\VerifyNickname.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

using XBOX.Online.Accounts;
using xonline.common.service;

namespace ActTest
{
	public class VerifyNickname : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        VerifyNicknameRequest _req;
        
        

        public VerifyNickname()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _req = new VerifyNicknameRequest();
        }
        
        public override void ExecuteTest()
        {
            byte[] respBuf = null;
            uint hr;
                        
            _req.Name = Crypto.GetRandomString(10);            
            
            
            _stream.SetLength(0);
            _req.WriteToResponse(_writer, _enc);
            
            hr = PostXrlRequest("/xbos/VerifyNickname.ashx", _stream.ToArray(), out respBuf);
            if (hr != HResult.S_OK && hr != HResult.XONLINE_E_OFFERING_NAME_TAKEN)
            {
                Trace("Error: hr " + hr.ToString("x") + " returned for name " + _req.Name + "!");
                IncrementErrorCount();    
            }
        }
        
        
        public override int ServiceId
        {
            get { return (int)XOService.Billing_Offering; }
        }
        
    
    
    }
    
    class VerifyNicknameRequest : XRLObject
    {
        public short NameLen                =0;		
        public string Name                  ="";		
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\ContentAvailable.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

using XBOX.Online.Accounts;
using xonline.common.service;

namespace ActTest
{
	public class ContentAvailable : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        ContentAvailableRequest _req;
        
        
        public ContentAvailable()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _req = new ContentAvailableRequest();
        }
        
        
        public override void ExecuteTest()
        {
            byte[] respBuf = null;
            
            _req.titleId = 0xFFFF010C;
            _req.esrbRating = 0;
            _req.bitFilter = 0xffffffff;
            _req.lastChangeDate = DateTime.Now;
            _req.countryId = 103;
            
            _stream.SetLength(0);
            _req.WriteToResponse(_writer, _enc);
            
            Verify(PostXrlRequest("/xbos/ContentAvailable.ashx", _stream.ToArray(), out respBuf));
        }
        
        
        public override int ServiceId
        {
            get { return (int)XOService.Billing_Offering; }
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xbos\protocol.cs ===
using System;
using xonline.common.service;

namespace XBOX.Online.Accounts
{
    //
    // VerifyNickname
    //
    class VerifyNicknameRequest : XRLObject
    {
        public short NameLen                =0;		
        public string Name                  ="";		
    }

    // 
    // enumerate
    //
    class EnumerateRequest : XRLObject
    {
        public long        qwUserPUID             =0;
        public int         dwTitleId              =0;
        public int         cbClientBuffer         =0;
        public int         dwRating               =0;
        public DateTime   ftLastChangedDate      =DateTime.Now;
        public uint        dwOfferingType         =0;
        public uint        dwBitFilter            =0;
        public int         dwDescriptionIndex     =0;
        public ushort      wStartingIndex         =0;
        public ushort      wMaxResults            =0;                     
    }        

    class EnumRecord : XRLObject
    {
        public short  cbRecordSize = 0;
        public short  iRecordIndex = 0;
        public ulong  offeringId = 0;
        public int    dwOfferingType = 0;
        public int    dwBitFlags = 0;
        public int    cbPackageSize = 0;
        public int    cbInstallSize = 0;
        public DateTime ftActivationDate = DateTime.Now;
        public int    dwRating = 0;
        public short  fOfferingFlags  = 0;
        public int    cbTitleSpecificData       = 1;
        public int    pbTitleSpecificDataOffset = RECORD_LEN;
        public byte[] rgbEnumBlob = null;
        
        const int RECORD_LEN            = 50;
    }

    class EnumHeader : XRLObject
    {
        public short    cRecords = 0;
        public short    fFlags = 0;
        public DateTime ftLastChangedDate = DateTime.Now;
    }
    
    
    // 
    // details
    //
    class DetailsRequest : XRLObject
    {
        public long       qwUserPUID             =0;   
        public ulong      qwMachineId            =0;    
        public uint       dwTitleId              =0;    
        public ulong      qwOfferId              =0;
        public int        dwDescriptionIndex     =0;
        public short      sLanguageId            =0;
    }
    
    class DetailsResponse : XRLObject
    {
        public uint   cInstances                 =0;
        public uint   dwWholePart                =0;
        public byte   bFractionalPart           =0;
        public byte   bCurrencyFormat           =0;
        public string rgwchISOCode              ="";
        public uint   dwOfferingDetails         =0;
        public uint   dwSizeOfBlob              = 0;
        public byte[] rgbDetailsBlob            =null;

    }
        
        
    //
    // referral 
    //
    class ReferralRequest : XRLObject
    {
        public ulong  qwMachineID = 0;	// Machine ID
        public ulong  qwUserPUID0 = 0;	// PUID 0
        public ulong  qwUserPUID1 = 0;	// PUID 1
        public ulong  qwUserPUID2 = 0;	// PUID 2
        public ulong  qwUserPUID3 = 0;	// PUID 3
        public uint   dwTitleId = 0;	// Title ID
        public ulong  qwOfferingId = 0;	// Offer for the referral
        public uint   dwRating = 0;		// Client rating
    }
    
    // this struct must mirror the ones declared in the client code!
    //
    class ContentAvailableRequest : XRLObject
    {
        public uint titleId =0;		
        
        public int esrbRating =0;		
        
        public uint bitFilter =0;		
        
        public DateTime lastChangeDate = DateTime.Now;
        
        public byte countryId = 0;
    }
    
        class PurchaseRequest : XRLObject
        {
            public ulong  qwUserPUID     =0;    // user we're talking about here
            
            public ulong  qwMachineId    =0;    // the machine account
            
            public uint  dwTitleId       =0;    // title ID
            
            public ulong OfferingId      =0;    // the offer!
        }
    

 }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_uacs.act_none_12.4.56.0_none_fb4d686856ddd93b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=uacs.act
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.manifest
XP_MANIFEST_PATH=manifests\msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.cat
XP_CATALOG_PATH=manifests\msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.cat
XP_PAYLOAD_PATH=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=uacs.act,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\listen\precomp.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	xnqparse.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_uacs.act_none_12.4.56.0_none_fb4d686856ddd93b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=uacs.act
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.manifest
XP_MANIFEST_PATH=manifests\msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.cat
XP_CATALOG_PATH=manifests\msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23.cat
XP_PAYLOAD_PATH=msil_uacs.act_no-public-key_12.4.56.0_x-ww_9ccb9d23
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=uacs.act,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\PaymentInfo.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

//using xonline.common.protocol;
// using xonline.server.mgmt.soap;
using xonline.common.mgmt;
using xonline.common.service;


namespace ActTest
{
	public class PaymentInfo : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        GetPaymentInfoRequest _reqGet;
        GetPaymentInfoResponse _respGet;
        SetPaymentInfoRequest _reqSet;
        int _n;
        
        

        public PaymentInfo()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _reqGet = new GetPaymentInfoRequest();
            _respGet = new GetPaymentInfoResponse();
            _reqSet = new SetPaymentInfoRequest();
            _n = 1;
        }


        public override bool Init( ATS.Test test, string server, int port )
        {
            base.Init(test, server, port);
            
            Random rand = new Random();
            
            _reqGet.accountPin = new byte[] { 1, 1, 1, 1 };
            
            for (int i = 0; i < 100; i++)
            {
                _reqGet.userPuid = CreateAccount();
                
                if(_reqGet.userPuid != 0)
                {
                    break;
                }
                
                Thread.Sleep(rand.Next(1000)+1);
            }
                
            if (_reqGet.userPuid == 0)
            {
                Trace("Failed to create a user!  aborting test.");
                return false;
            }
            
            Trace("Running test using puid " + _reqGet.userPuid.ToString("x"));
            return true;
        }
        
        
        
        public override void ExecuteTest()
        {
            byte[] respBuf = null;
            byte[] respBuf2 = null;
            BinaryReader reader;
            GetPaymentInfoResponse respGet;
            uint hr;

            
            _stream.SetLength(0);
            _reqGet.WriteToResponse(_writer, _enc);
            
            hr = PostXrlRequest("/xuacs/GetPaymentInfo.ashx", _stream.ToArray(), out respBuf);
            if (HResult.Failed(hr))
            {
                Trace("Error: GetPaymentInfo returned " + hr.ToString("x") + "!");
                IncrementErrorCount();
                
                return;
            }                
                
            
            reader = new BinaryReader(new MemoryStream(respBuf));
            respGet = new GetPaymentInfoResponse();
            
            respGet.ReadFromRequest(reader, _enc, respBuf.Length, null);
            
            _reqSet.accountPin = _reqGet.accountPin;
            _reqSet.userPuid = _reqGet.userPuid;
            _reqSet.countryId = respGet.countryId;
            _reqSet.cardTypeId = respGet.cardTypeId;
            _reqSet.cardExpiration = respGet.cardExpiration;
            _reqSet.msSpam = respGet.msSpam;
            _reqSet.partnerSpam = respGet.partnerSpam;
            _reqSet.firstName = respGet.firstName;
            _reqSet.lastName = respGet.lastName;
            _reqSet.street1 = _n.ToString() + " testme way";
            _reqSet.street2 = respGet.street2;
            _reqSet.street3 = respGet.street3;
            _reqSet.city = respGet.city;
            _reqSet.state = respGet.state;
            _reqSet.postalCode = respGet.postalCode;
            _reqSet.phonePrefix = respGet.phonePrefix;
            _reqSet.phoneExtension = respGet.phoneExtension;
            _reqSet.phoneNumber = respGet.phoneNumber;
            _reqSet.cardHolder = respGet.cardHolder;
            _reqSet.cardNumber = respGet.cardNumber;
            _reqSet.email = respGet.email;
            _reqSet.bankCode = respGet.bankCode;
            _reqSet.branchCode = respGet.branchCode;
            _reqSet.checkDigits = respGet.checkDigits;
            
            
            _stream.SetLength(0);
            _writer.Seek(0, SeekOrigin.Begin);
            _reqSet.WriteToResponse(_writer, _enc);
            
            Verify(PostXrlRequest("/xuacs/SetPaymentInfo.ashx", _stream.ToArray(), out respBuf2));
            
            if (++_n > 9) _n = 1;
            
        }
        
        
        public override int ServiceId
        {
            get { return (int)XOService.User_Account; }
        }
        
    
    
    }


    public class GetPaymentInfoRequest : XRLObject
    {
        public ulong userPuid;
        
        public byte[] accountPin;
     }

    public class GetPaymentInfoResponse : XRLObject
    {
        public byte countryId;
        public byte cardTypeId;
        public DateTime cardExpiration;

        public byte msSpam;
        public byte partnerSpam;

        public ushort firstNameLen;
        public string firstName;
        public ushort lastNameLen;
        public string lastName;
        public ushort street1Len;
        public string street1;
        public ushort street2Len;
        public string street2;
        public ushort street3Len;
        public string street3;
        public ushort cityLen;
        public string city;
        public ushort stateLen;
        public string state;
        public ushort postalCodeLen;
        public string postalCode;

        public ushort phonePrefixLen;
        public string phonePrefix;
        public ushort phoneNumberLen;
        public string phoneNumber;
        public ushort phoneExtensionLen;
        public string phoneExtension;

        public ushort cardHolderLen;
        public string cardHolder;
        public ushort cardNumberLen;
        public string cardNumber;
        
        public ushort emailLen;
        public string email;
        public ushort bankCodeLen;
        public string bankCode;
        public ushort branchCodeLen;
        public string branchCode;
        public ushort checkDigitsLen;
        public string checkDigits;
        
    }

    public class SetPaymentInfoRequest : XRLObject
    {
        public ulong userPuid;
        
        public byte[] accountPin;
 
        public byte countryId;
        public byte cardTypeId;
        public DateTime cardExpiration;

        public byte msSpam;
        public byte partnerSpam;
        
        public ushort firstNameLen;
        public string firstName;
        public ushort lastNameLen;
        public string lastName;
        public ushort street1Len;
        public string street1;
        public ushort street2Len;
        public string street2;
        public ushort street3Len;
        public string street3;
        public ushort cityLen;
        public string city;
        public ushort stateLen;
        public string state;
        public ushort postalCodeLen;
        public string postalCode;

        public ushort phonePrefixLen;
        public string phonePrefix;
        public ushort phoneNumberLen;
        public string phoneNumber;
        public ushort phoneExtensionLen;
        public string phoneExtension;

        public ushort cardHolderLen;
        public string cardHolder;
        public ushort cardNumberLen;
        public string cardNumber;
        
        public ushort emailLen;
        public string email;
        public ushort bankCodeLen;
        public string bankCode;
        public ushort branchCodeLen;
        public string branchCode;
        public ushort checkDigitsLen;
        public string checkDigits;

     } 



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\send\precomp.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	xnqparse.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\listen\alertlisten.cpp ===
// UDPListen.cpp : Defines the entry point for the console application.
//

#include "precomp.h"

int __cdecl main(int argc, char* argv[])
{
    if (argc < 3)
    {
        printf("UDPListen Addr Port");
        return 0;
    }

    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    // Translate the input address
    HOSTENT *pHE = NULL;
    in_addr inaddrHost;
    
    pHE = gethostbyname( argv[1] );
    memcpy( &inaddrHost, pHE->h_addr, pHE->h_length );

    // Create an address to bind to
    sockaddr_in sa;
    sockaddr_in saFrom;
    SOCKET s;
    char rgbRecv[XONLINE_MAX_ALERT_SIZE];
    char *pbWork;
    WCHAR *pwszData;
    int iFromLen;
    int iRet;
    XONLINE_ALERT *pAlert;
    int i;

    sa.sin_family = AF_INET;
    sa.sin_port = htons( atoi(argv[2]) );
    sa.sin_addr = inaddrHost;

    s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

    bind(s, (sockaddr *) &sa, sizeof(sa));

    for (;;)
    {
        iFromLen = sizeof(saFrom);
        iRet = recvfrom(s, rgbRecv, XONLINE_MAX_ALERT_SIZE, 0, (sockaddr *) &saFrom, &iFromLen);
       
        if (iRet >= sizeof(XONLINE_ALERT))
        {
            pAlert = (XONLINE_ALERT *) rgbRecv;
            pbWork = rgbRecv + sizeof(XONLINE_ALERT);

            printf("--==Alert Received==--\n");

            switch (pAlert->wType )
            {
            case XONLINE_ALERT_TYPE_TITLE_CUSTOM:
                printf("Type=XONLINE_ALERT_TYPE_TITLE_CUSTOM\n");
                break;
            case XONLINE_ALERT_TYPE_FRIEND_REQUEST:
                printf("Type=XONLINE_ALERT_TYPE_FRIEND_REQUEST\n");
                break;
            case XONLINE_ALERT_TYPE_GAME_INVITE:
                printf("Type=XONLINE_ALERT_TYPE_GAME_INVITE\n");
                break;
            case XONLINE_ALERT_TYPE_TEAM_RECRUIT:
                printf("Type=XONLINE_ALERT_TYPE_TEAM_RECRUIT\n");
                break;
            case XONLINE_ALERT_TYPE_COMP_REMINDER:
                printf("Type=XONLINE_ALERT_TYPE_COMP_REMINDER\n");
                break;
            case XONLINE_ALERT_TYPE_COMP_REQUEST:
                printf("Type=XONLINE_ALERT_TYPE_COMP_REQUEST\n");
                break;
            case XONLINE_ALERT_TYPE_LIVE_MESSAGE:
                printf("Type=XONLINE_ALERT_TYPE_LIVE_MESSAGE\n");
                break;
            case XONLINE_ALERT_TYPE_LOGON:
                printf("Type=XONLINE_ALERT_TYPE_LOGON\n");
                break;
            default:
                printf("Type=%d\n", (DWORD)pAlert->wType);
            }
            
            printf("Len=%d, TitleID=%d, Flags=%d, Recipients=%d\n", iRet, pAlert->dwTitleID, pAlert->wFlags, pAlert->wRecipients);

            if (iRet >= (int) (sizeof(XONLINE_ALERT) + (pAlert->wRecipients * sizeof(QWORD) * 2)) )
            { 
                for (i=0; i<pAlert->wRecipients; i++)
                {
                    printf("Recipient %d: WebID=%I64d, UserID=%I64d\n", i, *((QWORD*)pbWork), *((QWORD*)(pbWork + sizeof (QWORD))));
                    pbWork += sizeof (QWORD) * 2;
                }
            }
            else
            {
                printf("****ERROR %d bytes too small to fit recipients list****\n", iRet);
            }

            if (0 == pAlert->cchData)
            {
                printf("No additional data");            
            }
            else if (iRet > (int) (sizeof(XONLINE_ALERT) + (pAlert->wRecipients * sizeof(QWORD) * 2) + (pAlert->cchData * sizeof(WCHAR)) ))
            {
                printf("Data=");
                
                pwszData = (WCHAR *)((char *)rgbRecv + sizeof(XONLINE_ALERT) + (pAlert->wRecipients * sizeof(QWORD) * 2));
                
                for (i=0; i<pAlert->cchData; i++)
                {
                    printf("%C", *pwszData);
                    pwszData++;
                }
                printf("\n");
            }
            else
            {
                printf("****ERROR %d bytes too small to fit data indicated****\n", iRet);
            }
            

            if (0 == pAlert->cbSender)
            {
                printf("Sender UserID=%d, Name=No gamertag\n", pAlert->qwSenderUserID);            
            }
            else if (iRet == (int) (sizeof(XONLINE_ALERT) + (pAlert->wRecipients * sizeof(QWORD) * 2) + (pAlert->cchData * sizeof(WCHAR)) + pAlert->cbSender))
            {
                printf("Sender UserID=%d, Name=", pAlert->qwSenderUserID);
                
                pbWork = (char *)((char *)rgbRecv +  sizeof(XONLINE_ALERT) + (pAlert->wRecipients * sizeof(QWORD) * 2) + (pAlert->cchData * sizeof(WCHAR)) );
                
                for (i=0; i<pAlert->cbSender; i++)
                {
                    printf("%c", *pbWork);
                    pbWork++;
                }
                printf("\n");
            }
            else
            {
                printf("****ERROR %d bytes too small to fit gamertag indicated****\n", iRet);
            }
            
        }
        else if (iRet > 0)
        {
            printf("****ERROR %d bytes too small for an alert structure****\n", iRet);
        }
    }

    WSACleanup();
	
	return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\send\precomp.h ===
#ifndef _PRECOMP_H_
#define _PRECOMP_H_

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <process.h>

#define INCL_WINSOCK_API_TYPEDEFS 1
#include <winsock2.h>
#include <wsockntp.h>

#include <wmsstd.h>
#include <xonlinep.h>

#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x)/sizeof(x[0]))
#endif


#endif // #ifndef _XCSSERVER_PRECOMP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\listen\precomp.h ===
#ifndef _PRECOMP_H_
#define _PRECOMP_H_

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <process.h>

#define INCL_WINSOCK_API_TYPEDEFS 1
#include <winsock2.h>
#include <wsockntp.h>

#include <wmsstd.h>
#include <xonlinep.h>

#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x)/sizeof(x[0]))
#endif


#endif // #ifndef _XCSSERVER_PRECOMP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\act\xuacs\ReserveName.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ActApplicationLIB;
using ATS;

using xonline.common.mgmt;
using xonline.common.service;

namespace ActTest
{
	public class ReserveName : ActTestBase
	{
        UTF8Encoding _enc;
        MemoryStream _stream;
        BinaryWriter _writer;
        ReserveNameRequest _req;
        ReserveNameResponseHead _respHead;
        ReserveNameResponseItem _respItem;
        
        

        public ReserveName()
        {
            _enc = new UTF8Encoding();
            _stream = new MemoryStream();
            _writer = new BinaryWriter(_stream);
            _req = new ReserveNameRequest();
            _respHead = new ReserveNameResponseHead();
            _respItem = new ReserveNameResponseItem();
        }
        
        public override void ExecuteTest()
        {
            byte[] respBuf = null;
            byte[] respBuf2 = null;
            uint hr;
            BinaryReader reader;
            
            _req.MachineId = 0x0009000000000001;
            _req.CountryId = 103;
            _req.MaxAltNames = 5;
            _req.GamerName = "fuckingPerf";
            
            _stream.SetLength(0);
            _req.WriteToResponse(_writer, _enc);
            
            hr = PostXrlRequest("/xuacs/ReserveName.ashx", _stream.ToArray(), out respBuf);
            if (hr != HResult.XONLINE_S_ACCOUNTS_NAME_TAKEN)
            {
                Trace("Error: foul name returned " + hr.ToString("x") + "!");
                IncrementErrorCount();
                
                return;
            }
            
            reader = new BinaryReader(new MemoryStream(respBuf));
            
            _respHead.ReadFromRequest(reader, _enc, respBuf.Length, null);
            if (_respHead.NameCount < 5)
            {
                Trace("Error: foul name returned less than 5 alt names!");
                return;
            }
            
            for (int i = 0; i < _respHead.NameCount; i++)
            {
                _respItem.ReadFromRequest(reader, _enc, respBuf.Length, null);
                _req.GamerName = _respItem.GamerName;
                
                _stream.SetLength(0);
                _req.WriteToResponse(_writer, _enc);
                
                Verify(PostXrlRequest("/xuacs/ReserveName.ashx", _stream.ToArray(), out respBuf2));
            }
            
        }
        
        
        public override int ServiceId
        {
            get { return (int)XOService.User_Account; }
        }
        
    
    
    }

    public class ReserveNameRequest : XRLObject
    {
        public ulong MachineId     = 0;
        
        public byte CountryId    = 0;
        
        public ushort MaxAltNames  = 0;

        public ushort cbGamerName  = 0;

        public string GamerName    = "";
    }

    public class ReserveNameResponseHead : XRLObject
    {
        public ushort NameCount     = 0;
    }

    public class ReserveNameResponseItem : XRLObject
    {
        public ushort cbGamerName  = 0;

        public string GamerName    = "";
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\send\alertsend.cpp ===
// UDPSend.cpp : Defines the entry point for the console application.
//

#include "precomp.h"

int __cdecl main(int argc, char* argv[])
{
	if (argc < 3)
    {
        printf("AlertSend File Addr Port");
        return 0;
    }

    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    // Translate the input address
    HOSTENT *pHE = NULL;
    in_addr inaddrHost;
    
    pHE = gethostbyname( argv[2] );
    memcpy( &inaddrHost, pHE->h_addr, pHE->h_length );

    // Create an address to send to
    sockaddr_in sa;
    SOCKET s;
    FILE *hfile = NULL;
    char rgbSend[XONLINE_MAX_ALERT_SIZE];
    char rgbGamerTag[XONLINE_GAMERTAG_SIZE];
    char rgbData[256];
    char *pbWork = NULL;
    DWORD *pdwSend = NULL;
    int i;
    int iRet;
    XONLINE_ALERT *pAlert = (XONLINE_ALERT *) rgbSend;
    QWORD *pqwRecipients;

    memset(&sa, 0, sizeof(sockaddr_in));
    sa.sin_family = AF_INET;
    sa.sin_port = htons( atoi(argv[3]) );
    sa.sin_addr = inaddrHost;

    s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

    hfile = fopen(argv[1], "rt");

    if (hfile == NULL)
    {
        printf("Error opening file %s\n", argv[1]);
        return 0;
    }

    while (!feof(hfile))
    {
        pAlert = (XONLINE_ALERT *) rgbSend;
        pbWork = rgbSend + sizeof(XONLINE_ALERT);
        memset(pAlert, 0, sizeof(XONLINE_ALERT));
        memset(rgbGamerTag, 0, sizeof(rgbGamerTag));

        iRet = fscanf(
            hfile,
            "%ld %hd \"%256[^\"]\" \"%16[^\"]\"", 
            &(pAlert->dwTitleID),
            &(pAlert->wType),
            rgbData,
            rgbGamerTag);

        if ((iRet == 0) || (iRet == EOF)) 
        {
            break;
        }

        pqwRecipients = (QWORD *) pbWork;

        rgbData[255] = '\0';
        rgbGamerTag[XONLINE_GAMERTAG_SIZE - 1] = '\0';
        
        for(i = 0; ; i++)
        {
            *pqwRecipients = 0;
            *(pqwRecipients + 1) = 0;
            
            fscanf(
                hfile,
				" {%I64d, %I64d}",
                pqwRecipients,
                pqwRecipients + 1
                );

            if (*pqwRecipients == 0) 
            {
                break;
            }

            pqwRecipients += 2;
        }

        pAlert->wRecipients = (WORD) i;
        pbWork += sizeof(QWORD) * 2 * pAlert->wRecipients;

        // Add data if any
        pAlert->cchData = strlen(rgbData);
        pAlert->cchData = MultiByteToWideChar(CP_ACP, 0, rgbData, pAlert->cchData, (WCHAR *)pbWork, pAlert->cchData);
        
        pbWork += pAlert->cchData * sizeof(WCHAR);

        pAlert->cbSender = strlen(rgbGamerTag);
        strncpy((char *)pbWork, rgbGamerTag, pAlert->cbSender);

        pbWork += pAlert->cbSender;
        
        sendto(s, rgbSend, pbWork - rgbSend, 0, (sockaddr *) &sa, sizeof(sa));

        printf("sending %d bytes\n", pbWork - rgbSend);
    }

    fclose(hfile);

    WSACleanup();
	
	return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\Send2\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by app.rc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\Send2\Send2.cpp ===
// This is the main project file for VC++ application project 
// generated using an Application Wizard.

#include "stdafx.h"

#using <mscorlib.dll>

using namespace System;

int _tmain()
{
    // TODO: Please replace the sample code below with your own.
    Console::WriteLine(S"Hello World!");
	return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\Send2\stdafx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
// Send2.pch will be the pre-compiled header
// stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\Send2\stdafx.h ===
// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#include <iostream>
#include <tchar.h>

// TODO: reference additional headers your program requires here
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\alerts\Send2\AssemblyInfo.cpp ===
#include "stdafx.h"

#using <mscorlib.dll>

using namespace System::Reflection;
using namespace System::Runtime::CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly:AssemblyTitleAttribute("")];
[assembly:AssemblyDescriptionAttribute("")];
[assembly:AssemblyConfigurationAttribute("")];
[assembly:AssemblyCompanyAttribute("")];
[assembly:AssemblyProductAttribute("")];
[assembly:AssemblyCopyrightAttribute("")];
[assembly:AssemblyTrademarkAttribute("")];
[assembly:AssemblyCultureAttribute("")];		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the value or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly:AssemblyVersionAttribute("1.0.*")];

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//        When specifying the KeyFile, the location of the KeyFile should be
//        relative to the project directory.
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly:AssemblyDelaySignAttribute(false)];
[assembly:AssemblyKeyFileAttribute("")];
[assembly:AssemblyKeyNameAttribute("")];
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\AddPaymentInstrument.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for AddPaymentInstrument.
	/// </summary>
	public class AddPaymentInstrument : RequestHandler
	{
		XmlParser	accountInfo=new XmlParser();

		protected void UpdateUser(User u)
		{
			string billingInfo;
			billingInfo=Parser.GetNode("bstrPaymentInstrumentInfoXML");
			accountInfo.Load(billingInfo);

			u.AccountHolderName=accountInfo.GetNode("myns:PaymentInstrumentInfo/myns:CreditCardInfo/myns:AccountHolderName");
			u.ExpirationDate=accountInfo.GetNode("myns:PaymentInstrumentInfo/myns:CreditCardInfo/myns:ExpirationDate");
		}

		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
				throw new EmulatorException(UserNotFoundHresult);

			UpdateUser(u);
			u.Dump();
			
			SB.Append(
				"<SOAPSDK1:AddPaymentInstrumentResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrPaymentInstrumentId>"+GeneratePuid()+"</pbstrPaymentInstrumentId><pbstrRequiredPaperWorkURL></pbstrRequiredPaperWorkURL></SOAPSDK1:AddPaymentInstrumentResponse>"
				);
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\AddRoleAssignment.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for AddRoleAssignment.
	/// </summary>
	public class AddRoleAssignment : RequestHandler
	{
		XmlParser	accountInfo=new XmlParser();

		protected void UpdateUser(User u)
		{
			string xml;
			xml=Parser.GetNode("bstrRoleAssignmentXML");
			accountInfo.Load(xml);

			u.GamerTag=accountInfo.GetNode("myns:RoleAssignment/myns:PMN");
		}

		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
				throw new EmulatorException(UserNotFoundHresult);

			UpdateUser(u);
			Global.AddToCache(u);
			u.Dump();
			
			SB.Append(
"<SOAPSDK1:AddRoleAssignmentResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML></SOAPSDK1:AddRoleAssignmentResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\CancelSubscription.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for CancelSubscription.
	/// </summary>
	public class CancelSubscription:RequestHandler
	{
		protected override void Process(byte[] input)
		{
			Parser.Load(ConvertInputToString(input));
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);	// This will throw if the user is not found

			Callback.CBDeprovision prov=new Callback.CBDeprovision();
			prov.puid=id;
//			RM04B4DEDF8BAAEA
//			RM04B4DEDF8AAAEA
			string lowpart=GetSubscriptionId().Substring(0,11);
			prov.svcInstanceId=lowpart+"BAAEA";
			prov.guid="0d1ec2f9-cf9c-431f-b841-74fa34833901";
			Global.Xcbk.AddToQueue(prov);


			SB.Append(
"<SOAPSDK1:CancelSubscriptionResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;"+
"/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML>"+
"<pbstrAmountChargedXML>&lt;AmountCharged xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;Gross&gt;0&lt;/Gross&gt;&lt;Charge&gt;0&lt;/Charge&gt;&lt;Locale&gt;en-US&lt;/Locale&gt;"+
"&lt;Currency&gt;USD&lt;/Currency&gt;&lt;TaxSet/&gt;&lt;/AmountCharged&gt;</pbstrAmountChargedXML><pbstrSubscriptionStatusInfoXML>&lt;SubscriptionStatusInfo xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;"+
"&lt;SubscriptionStatus&gt;EXPIRED&lt;/SubscriptionStatus&gt;&lt;ViolationSet&gt;&lt;/ViolationSet&gt;&lt;/SubscriptionStatusInfo&gt;</pbstrSubscriptionStatusInfoXML><plRemovedServiceInstanceCount>1</plRemovedServiceInstanceCount><pbstrRemovedServiceInstanceSetXML>&lt"+
";ServiceInstanceSet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;ServiceInstance&gt;&lt;ServiceComponentId&gt;76805FA5-7C7F-48A5-ADC1-F9DD6219143B&lt;/ServiceComponentId&gt;&lt;ServiceInstanceId&gt;oq8RAAAAAAABAAIA&lt;"+
"/ServiceInstanceId&gt;&lt;/ServiceInstance&gt;&lt;/ServiceInstanceSet&gt;</pbstrRemovedServiceInstanceSetXML></SOAPSDK1:CancelSubscriptionResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\EmulatorErrorHandler.cs ===
using System;

namespace BillingEmulatorV2
{
	public class EmulatorErrorHandler : RequestHandler
	{
		public EmulatorErrorHandler()
		{
		}

		protected override void Process(byte[] input)
		{
			throw new SimulateSPSException(0xBADF000D);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\Callback.cs ===
using System;
using System.Collections;
using System.Threading;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for Callback.
	/// </summary>
	public class Callback
	{
		#region Callback records
		abstract public class CBRecord
		{
			public DateTime	EnqueueTime;
			public SvcProviderWrapper xcbk;
			public abstract void Go();
		}

		public class CBProvision : CBRecord
		{
			public long puid;
			public string svcInstanceId;
			public string guid;

			public override void Go()
			{
				System.Threading.Thread.Sleep(200);
				xcbk.ProvisionService(puid,guid,svcInstanceId);
				TimeSpan s=DateTime.Now-EnqueueTime;
//				Global.WriteLine("  Completed provision : "+svcInstanceId+", "+guid+", user "+puid+" in "+s.TotalMilliseconds+" msecs"); 
			}
		}

		public class CBDeprovision : CBRecord
		{
			public long puid;
			public string svcInstanceId;
			public string guid;

			public override void Go()
			{
				System.Threading.Thread.Sleep(200);
				xcbk.DeprovisionService(puid,guid,svcInstanceId);
				TimeSpan s=DateTime.Now-EnqueueTime;
//				Global.WriteLine("Completed deprovision : "+svcInstanceId+", "+guid+", user "+puid+" in "+s.TotalMilliseconds+" msecs"); 
			}
		}
		#endregion

		#region Dequeuer
		class CallbackDequeuer : ThreadBase
		{
			public int ThreadId=0;
			Callback parent;
			SvcProviderWrapper xcbk=new SvcProviderWrapper();

			public CallbackDequeuer(Callback Parent)
			{
				parent=Parent;
			}

			protected override void ThreadBody()
			{
				Global.WriteLine("Callback thread started");
				try
				{
					while(true)
					{
						try
						{
							InnerLoop();
						}
						catch(Exception e)
						{
							Global.WriteLine("Callback thread exception");
							Global.WriteLine(e.ToString());
						}
					}
				}
				finally
				{
					Global.WriteLine("Callback thread exitted");
				}
			}
			
			void InnerLoop()
			{
				CBRecord rec;
				while(true)
				{
					parent.waitMutex.WaitOne();
//					Global.WriteLine(ThreadId+" Deque thread woken up!");
					while(true)
					{
						lock (parent.CallbackQueue)
						{
							if (parent.CallbackQueue.Count==0)
							{
//								Global.WriteLine(ThreadId+" No callbacks, waiting... ");
								break;
							}

							rec=parent.CallbackQueue.Dequeue() as CBRecord;
							rec.xcbk=this.xcbk;
						}
						rec.Go();
					}
				}
			}
		}
		#endregion

		// These should really be friends
		public Queue	CallbackQueue=new Queue(64);
		public AutoResetEvent	waitMutex=new AutoResetEvent(false);
		Thread	callbackThread;

		public int QueueLength
		{
			get
			{
				// I don't care if we're off by 1 here, I don't want to lock
				return CallbackQueue.Count;
			}
		}

		public void Go()
		{
			callbackThread=new Thread(new ThreadStart(ExecLoop));
			callbackThread.Start();
		}
		

		public void AddToQueue(CBRecord record)
		{
			record.EnqueueTime=DateTime.Now;
			lock(CallbackQueue)
			{	
				CallbackQueue.Enqueue(record);
			}
			waitMutex.Set();
		}

		void ExecLoop()
		{
			CallbackDequeuer []deq=new CallbackDequeuer[4];
			for (int i=0; i<deq.Length; i++)
			{
				deq[i]=new CallbackDequeuer(this);
				deq[i].ThreadId=i;
				deq[i].Go();
			}
		}

		public Callback()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\CreateAccount.cs ===
using System;

/*
<SOAPSDK1:CreateAccountResponse xmlns:SOAPSDK1="http://tempuri.org/message/">
<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrAccountId>Px0EAAAAAAAAAAAA</pbstrAccountId>
<pbstrPaymentInstrumentId>Px0EAAAAAAABAACA</pbstrPaymentInstrumentId><pbstrDate>3</pbstrDate><bstrRequiredPaperWorkURL></bstrRequiredPaperWorkURL></SOAPSDK1:CreateAccountResponse>
*/ 

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for CreateAccount.
	/// </summary>
	public class CreateAccount : RequestHandler
	{
		XmlParser	accountInfo=new XmlParser();

		protected void ExtractUserInfo()
		{
			string billingInfo;
			billingInfo=Parser.GetNode("bstrAccountInfoXML");
			accountInfo.Load(billingInfo);

			User u=new User();

			u.SetRequester(	Convert.ToInt32(Parser.GetNode("lRequesterIdHigh")),
							Convert.ToInt32(Parser.GetNode("lRequesterIdLow")));

			u.GamerTag=Parser.GetNode("bstrPPMemberName");

			if (Global.PassThroughMode==PassThroughModes.EmulateRMUsers &&
				!u.GamerTag.StartsWith("RM"))
			{
				if (Global.DumpUserInfo)
				{
					Global.WriteLine("Invoking passthrough handler on user "+u.GamerTag);
					Global.FileFlush();
				}
				// this is a non-RMxxxxx user, and we're NOT supposed to emulate those
				// this exception will invoke the passthrough mechanism
				throw new UserNotFoundException();
			}

			// String the .Owner
			int ownerIndex=u.GamerTag.IndexOf(".Owner");
			if (ownerIndex!=-1)
				u.GamerTag=u.GamerTag.Substring(0,ownerIndex);

			u.State=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:State");
			u.PostalCode=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:PostalCode");
			u.Street1=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street1");
			u.Street2=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street2");
			u.Street3=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street3");
			u.City=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:City");
			u.CountryCode=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:CountryCode");

			u.PhonePrefix=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhonePrefix");
			u.PhoneNumber=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhoneNumber");
			u.PhoneExtension=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhoneExtension");

			u.FirstName=accountInfo.GetNode("myns:AccountInfo/myns:FirstName");
			u.LastName=accountInfo.GetNode("myns:AccountInfo/myns:LastName");

			u.Currency=accountInfo.GetNode("myns:AccountInfo/myns:Currency");
			u.Locale=accountInfo.GetNode("myns:AccountInfo/myns:Locale");

			u.CurrentBoid="70BD2684-080F-4B18-8744-B983CB300A26";
			u.RenewalBoid="AC47CD5A-99B5-4C0D-AA58-1E80E59BE88C";
			
			u.LastFour="1111";
			u.ExpirationDate="102006";
			u.AccountHolderName="Bob";

			u.Dump();

			Global.AddToCache(u);
		}

		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			ExtractUserInfo();
			
			SB.Append(
"<SOAPSDK1:CreateAccountResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML>"+
"<pbstrAccountId>"+GeneratePuid()+"</pbstrAccountId>"+
"<pbstrPaymentInstrumentId>"+GeneratePuid()+"</pbstrPaymentInstrumentId>"+
"<pbstrDate>3</pbstrDate><bstrRequiredPaperWorkURL></bstrRequiredPaperWorkURL></SOAPSDK1:CreateAccountResponse>"
				);
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\GetAccountInfo.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for GetAccountInfo.
	/// </summary>
	public class GetAccountInfo : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));

			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
			{
				Global.WriteLine(id.ToString());
				throw new EmulatorException(UserNotFoundHresult);
			}
			u.Dump();

			SB.Append(

"<SOAPSDK1:GetAccountInfoResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/"+
"ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/"+
"DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/"+
"ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrAccountInfoXML>&lt;AccountInfo xmlns="+
"&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;AccountId&gt;QR0EAAAAAAAAAAAA&lt;/"+
"AccountId&gt;&lt;AccountStatusInfo&gt;&lt;AccountStatus&gt;ACTIVE&lt;/AccountStatus&gt;&lt;ViolationSet&gt;&lt;/"+
"ViolationSet&gt;&lt;/AccountStatusInfo&gt;&lt;AccountCreationDate&gt;2003-07-03T23:22:49&lt;/"+
"AccountCreationDate&gt;&lt;AccountHistoryDate&gt;2003-07-03T23:22:49&lt;/AccountHistoryDate&gt;&lt;AccountSource&gt;SPS 2.5"+
"&lt;/AccountSource&gt;&lt;LegacyAccountId&gt;&lt;/LegacyAccountId&gt;&lt;AnniversaryDate&gt;3&lt;/"+
"AnniversaryDate&gt;&lt;CustomerType&gt;PERSONAL&lt;/CustomerType&gt;&lt;DefaultAddressId&gt;QR0EAAAAAAABAACg&lt;/"+
"DefaultAddressId&gt;&lt;CorporateIdentity&gt;1010&lt;/CorporateIdentity&gt;&lt;FriendlyName&gt;XBOX Live&lt;/"+
"FriendlyName&gt;&lt;FirstName&gt;"+u.FirstName+"&lt;/FirstName&gt;&lt;FirstNamePronunciation&gt;&lt;/"+
"FirstNamePronunciation&gt;&lt;LastName&gt;"+u.LastName+"&lt;/LastName&gt;&lt;LastNamePronunciation&gt;&lt;/"+
"LastNamePronunciation&gt;&lt;Email&gt;xboxstress@winisp.net&lt;/Email&gt;&lt;CompanyName&gt;&lt;/"+
"CompanyName&gt;&lt;CompanyNamePronunciation&gt;&lt;/CompanyNamePronunciation&gt;&lt;Locale&gt;"+u.Locale+"&lt;/"+
"Locale&gt;&lt;HCI&gt;NO&lt;/HCI&gt;&lt;HCIValid&gt;NO&lt;/HCIValid&gt;&lt;Currency&gt;"+u.Currency+"&lt;/"+
"Currency&gt;&lt;PhoneSet&gt;&lt;Phone&gt;&lt;PhoneType&gt;PRIMARY&lt;/PhoneType&gt;&lt;PhonePrefix&gt;"+u.PhonePrefix+"&lt;/"+
"PhonePrefix&gt;&lt;PhoneNumber&gt;"+u.PhoneNumber+"&lt;/PhoneNumber&gt;&lt;PhoneExtension&gt;"+u.PhoneExtension+"&lt;/"+
"PhoneExtension&gt;&lt;CountryCode&gt;"+u.CountryCode+"&lt;/CountryCode&gt;&lt;/Phone&gt;&lt;/"+
"PhoneSet&gt;&lt;AddressInfoSet&gt;&lt;AddressInfo&gt;&lt;AddressId&gt;QR0EAAAAAAABAACg&lt;/"+
"AddressId&gt;&lt;FriendlyName&gt;XBOX Live&lt;/FriendlyName&gt;&lt;Street1&gt;"+u.Street1+"&lt;/Street1&gt;&lt;Street2&gt;"+
u.Street2+"&lt;/Street2&gt;&lt;Street3&gt;"+u.Street3+"&lt;/Street3&gt;&lt;City&gt;"+u.City+"&lt;/City&gt;&lt;District&gt;&lt;/"+
"District&gt;&lt;State&gt;"+ u.State +"&lt;/State&gt;&lt;CountryCode&gt;"+u.CountryCode+"&lt;/CountryCode&gt;&lt;PostalCode&gt;"+u.PostalCode+"&lt;/"+
"PostalCode&gt;&lt;/AddressInfo&gt;&lt;/AddressInfoSet&gt;&lt;TaxExemptionInfoSet&gt;&lt;/TaxExemptionInfoSet&gt;&lt;/"+
"AccountInfo&gt;</pbstrAccountInfoXML></SOAPSDK1:GetAccountInfoResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\ConvertSubscription.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for ConvertSubscription.
	/// </summary>
	public class ConvertSubscription : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));

			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
				throw new EmulatorException(UserNotFoundHresult);

			u.CurrentBoid=Parser.GetNode("bstrOfferingGUID");
			Global.AddToCache(u);
			u.Dump();

			SB.Append(

"<SOAPSDK1:ConvertSubscriptionResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrAmountChargedXML>&lt;AmountCharged xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;Gross&gt;0&lt;/Gross&gt;&lt;Charge&gt;0&lt;/Charge&gt;&lt;Locale&gt;en-US&lt;/Locale&gt;&lt;Currency&gt;USD&lt;/Currency&gt;&lt;TaxSet/&gt;&lt;/AmountCharged&gt;</pbstrAmountChargedXML><plAddedServiceInstanceSetCount>0</plAddedServiceInstanceSetCount><pbstrAddedServiceInstanceSet>&lt;ServiceInstanceSet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;/ServiceInstanceSet&gt;</pbstrAddedServiceInstanceSet><plRemovedServiceInstanceSetCount>0</plRemovedServiceInstanceSetCount><pbstrRemoveServiceInstanceSet>&lt;ServiceInstanceSet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;/ServiceInstanceSet&gt;</pbstrRemoveServiceInstanceSet></SOAPSDK1:ConvertSubscriptionResponse>"

				);
			
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\GetPaymentInstrument.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for GetPaymentInstrument.
	/// </summary>
	public class GetPaymentInstruments : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));

			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
				throw new EmulatorException(UserNotFoundHresult);
			u.Dump();

			SB.Append(

"<SOAPSDK1:GetPaymentInstrumentsResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/"+
"ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/"+
"DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/"+
"ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><plPaymentInstrumentInfoCount>1</plPaymentInstrumentInfoCount><pbstrPaymentInstrumentInfoSetXML>&lt;PaymentInstrumentInfoSet xmlns="+
"&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;PaymentInstrumentInfo&gt;&lt;PaymentInstrumentId&gt;QR0EAAAAAAABAACA&lt;/PaymentInstrumentId&gt;&lt;PaymentInstrumentStatus&gt;GOOD&lt;/PaymentInstrumentStatus&gt;&lt;PaymentInstrumentType&gt;CREDITCARD&lt;/PaymentInstrumentType&gt;&lt;FriendlyName&gt;XBOX Live&lt;/FriendlyName&gt;"+
"&lt;CreditCardInfo&gt;&lt;AccountHolderName&gt;"+u.AccountHolderName+"&lt;/AccountHolderName&gt;&lt;AccountNumberLastFour&gt;"+
u.LastFour+"&lt;/AccountNumberLastFour&gt;&lt;CardType&gt;VISA&lt;/CardType&gt;&lt;ExpirationDate&gt;"+
u.ExpirationDate+"&lt;/ExpirationDate&gt;&lt;/CreditCardInfo&gt;&lt;"+
"Phone&gt;&lt;PhoneType&gt;PRIMARY&lt;/PhoneType&gt;&lt;PhonePrefix&gt;"+u.PhonePrefix+"&lt;/"+
"PhonePrefix&gt;&lt;PhoneNumber&gt;"+u.PhoneNumber+"&lt;/PhoneNumber&gt;&lt;PhoneExtension&gt;"+u.PhoneExtension+"&lt;/"+
"PhoneExtension&gt;&lt;CountryCode&gt;"+u.CountryCode+"&lt;/CountryCode&gt;&lt;/Phone&gt;&lt;"+
"AddressInfo&gt;&lt;AddressId&gt;QR0EAAAAAAABAACg&lt;/"+
"AddressId&gt;&lt;FriendlyName&gt;XBOX Live&lt;/FriendlyName&gt;&lt;Street1&gt;"+u.Street1+"&lt;/Street1&gt;&lt;Street2&gt;"+
u.Street2+"&lt;/Street2&gt;&lt;Street3&gt;"+u.Street3+"&lt;/Street3&gt;&lt;City&gt;"+u.City+"&lt;/City&gt;&lt;District&gt;&lt;/"+
"District&gt;&lt;State&gt;"+ u.State +"&lt;/State&gt;&lt;CountryCode&gt;"+u.CountryCode+"&lt;/CountryCode&gt;&lt;PostalCode&gt;"+u.PostalCode+"&lt;/"+
"PostalCode&gt;&lt;/AddressInfo&gt;"+
"&lt;/PaymentInstrumentInfo&gt;&lt;/PaymentInstrumentInfoSet&gt;</pbstrPaymentInstrumentInfoSetXML></SOAPSDK1:GetPaymentInstrumentsResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\GetSubscriptions.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for GetSubscriptions.
	/// </summary>
	public class GetSubscriptions : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));

			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			u.Dump();

			SB.Append(
"<SOAPSDK1:GetSubscriptionsResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML>"+
"<plSubscriptionInfoCount>1</plSubscriptionInfoCount><pbstrSubscriptionInfoSetXML>"+
"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-16&quot;?&gt;&lt;SubscriptionInfoSet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;"+
"&lt;SubscriptionInfo&gt;&lt;SubscriptionId&gt;mSMEAAAAAAAAAAEA&lt;/SubscriptionId&gt;&lt;AnniversaryDate&gt;10&lt;"+
"/AnniversaryDate&gt;&lt;OfferingGUID&gt;"+u.CurrentBoid+
"&lt;/OfferingGUID&gt;&lt;SubscriptionDescription&gt;Xbox Live Service (12 mths, US)&lt;/SubscriptionDescription&gt;"+
"&lt;SubscriptionPriceDescription&gt;Basic Subscription|Xbox Live service|$0|plus applicable taxes||&lt;/SubscriptionPriceDescription&gt;&lt;InternalSubscriptionDescription&gt;XBX-10049 Xbox Live Service (12 mths, US)&lt;/InternalSubscriptionDescription&gt;&lt;FriendlyName&gt;RMBe0u1o3223e1o&lt;/FriendlyName&gt;&lt;ShippingAddressId&gt;"+
"mSMEAAAAAAABAACg&lt;/ShippingAddressId&gt;&lt;SubscriptionStatusInfo&gt;&lt;SubscriptionStatus&gt;"+
"ENABLED&lt;/SubscriptionStatus&gt;&lt;ViolationSet&gt;&lt;/ViolationSet&gt;&lt;/SubscriptionStatusInfo&gt;&lt;PurchaseDate&gt;2003-07-10&lt;/PurchaseDate&gt;&lt;ActivationDate&gt;2003-07-10&lt;/ActivationDate&gt;&lt;EndDate&gt;2004-07-10&lt;/EndDate&gt;&lt;RenewalGracePeriod&gt;60&lt;/RenewalGracePeriod&gt;"+
"&lt;RenewOfferingId&gt;"+u.RenewalBoid+"&lt;/RenewOfferingId&gt;&lt;PaymentInstrumentId&gt;mSMEAAAAAAABAACA&lt;/PaymentInstrumentId&gt;&lt;HasTermCommit&gt;FALSE&lt;/HasTermCommit&gt;&lt;TermCommitStartDate&gt;2003-07-10&lt;/TermCommitStartDate&gt;&lt;TermCommitDescription&gt;Xbox Live Service (12 mths, US)&lt;/TermCommitDescription&gt;&lt;TermCommitPriceDescription&gt;Basic Subscription|Xbox Live service|$0|plus applicable taxes||&lt;/TermCommitPriceDescription&gt;&lt;TermCommitCyclesRemaining&gt;0&lt;/TermCommitCyclesRemaining&gt;&lt;ServiceInstanceSet&gt;&lt;ServiceInstance&gt;"+
"&lt;ServiceInstanceId&gt;"+u.CurrentSvcInstId+"&lt;/ServiceInstanceId&gt;"+
"&lt;ServiceComponentId&gt;BBBE8103-BB3C-40CD-96BD-A37A7CA73314&lt;/ServiceComponentId&gt;&lt;ServiceComponentName&gt;Xbox Live Basic Service&lt;/ServiceComponentName&gt;&lt;ProvisioningStatus&gt;NOT PROVISIONED&lt;/ProvisioningStatus&gt;&lt;ProvisioningErrorCode&gt;&lt;/ProvisioningErrorCode&gt;&lt;/ServiceInstance&gt;&lt;/ServiceInstanceSet&gt;&lt;SubscriptionCoBrand&gt;MSFT&lt;/SubscriptionCoBrand&gt;&lt;/SubscriptionInfo&gt;&lt;/SubscriptionInfoSet&gt;"+
"</pbstrSubscriptionInfoSetXML></SOAPSDK1:GetSubscriptionsResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\ProvisionServices.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for ProvisionServices.
	/// </summary>
	public class ProvisionServices : RequestHandler
	{
		XmlParser	accountInfo=new XmlParser();

		protected override void Process(byte[] input)
		{
			Parser.Load(ConvertInputToString(input));
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);	// This will throw if the user is not found

			string s=Parser.GetNode("bstrServiceInstanceSetXML");
			accountInfo.Load(s);

			Callback.CBProvision prov=new Callback.CBProvision();
			prov.puid=id;
			prov.svcInstanceId=accountInfo.GetNode("myns:ServiceInstanceSet/myns:ServiceInstance/myns:ServiceInstanceId");
			prov.guid=accountInfo.GetNode("myns:ServiceInstanceSet/myns:ServiceInstance/myns:ServiceComponentId");
			Global.Xcbk.AddToQueue(prov);

			SB.Append(
"<SOAPSDK1:ProvisionServicesResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML></SOAPSDK1:ProvisionServicesResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\PurchaseOffering.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for PurchaseOffering.
	/// </summary>
	public class PurchaseOffering : RequestHandler
	{
		protected override void Process(byte[] input)
		{
			Parser.Load(ConvertInputToString(input));
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);	// This will throw if the user is not found

			u.CurrentBoid=Parser.GetNode("bstrOfferingGUID");
			u.Dump();
			Global.AddToCache(u);

			SB.Append(
"<SOAPSDK1:PurchaseOfferingResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML>"+
"<pbstrSubscriptionId>"+GeneratePuid()+"</pbstrSubscriptionId>"+
"<pbstrAmountChargedXML>&lt;AmountCharged xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;Gross&gt;0&lt;/Gross&gt;&lt;Charge&gt;0&lt;/Charge&gt;&lt;Locale&gt;en-US&lt;/Locale&gt;&lt;Currency&gt;USD&lt;/Currency&gt;&lt;TaxSet&gt;&lt;Tax&gt;&lt;TaxType&gt;STATE&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;STATE2&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;COUNTRY&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;CITY&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;CITY2&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;COUNTY&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;COUNTY2&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;DISTRICT&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;Tax&gt;&lt;TaxType&gt;TERRITORY&lt;/TaxType&gt;&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&lt;Exempt&gt;FALSE&lt;/Exempt&gt;&lt;/Tax&gt;&lt;/TaxSet&gt;&lt;/AmountCharged&gt;</pbstrAmountChargedXML><plAddedServiceInstanceCount>1</plAddedServiceInstanceCount><pbstrAddedServiceInstanceSetXML>&lt;ServiceInstanceSet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;ServiceInstance&gt;&lt;"+
"ServiceComponentId&gt;"+GetOfferingGuid()+"&lt;/ServiceComponentId&gt;&lt;ServiceInstanceId&gt;"+GeneratePuid()+"&lt;/ServiceInstanceId&gt;&lt;/ServiceInstance&gt;&lt;/ServiceInstanceSet&gt;</pbstrAddedServiceInstanceSetXML></SOAPSDK1:PurchaseOfferingResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\PassthroughHandler.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for PassthroughHandler.
	/// </summary>
	public class PassthroughHandler : RequestHandler
	{
		protected override void Process(byte[] input)
		{
			// We don't really need this function
		}


		public override byte []GetResp(byte []input)
		{
			byte []res=SPS.Send(input);
			StatusCode=SPS.StatusCode;
			return res;
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\Global.cs ===
using System;
using System.Text;
using System.IO;
using System.Collections;
using System.Web.Caching;

namespace BillingEmulatorV2
{
	public enum PassThroughModes {	NoPassthrough=0,
									PassGetKeyOnly=1,
									EmulateRMUsers=2,
									PassAlways=3}

	/// <summary>
	/// Summary description for Global.
	/// </summary>
	public class Global
	{
		static public bool	DumpUserInfo=false;
		static public PassThroughModes	PassThroughMode=PassThroughModes.PassAlways;//PassThroughModes.NoPassthrough;
		static public bool	LogTraffic=false;
		static public Callback		Xcbk=new Callback();

		static User			defaultUser=null;
		static Cache		userCache=null;
		static string		fileName=@"C:\AnonUser\LogFile.txt";
		static FileStream	logFile;
		static UTF8Encoding	encoder=new UTF8Encoding(false,false);

		static Global()
		{
			FileOpen();

			Xcbk.Go();
			defaultUser=new User();
			defaultUser.City="Carnation";
			defaultUser.CountryCode="US";
			defaultUser.Currency="USD";
			defaultUser.CurrentBoid="";
			defaultUser.CurrentSvcInstId="";
			defaultUser.District="";
			defaultUser.ExpirationDate="102006";
			defaultUser.FirstName="Relja";
			defaultUser.GamerTag="invictus";
			defaultUser.Key="2613691917346190";
			defaultUser.LastFour="1111";
			defaultUser.LastName="Markovic";
			defaultUser.Locale="EN-US";
			defaultUser.NextSvcInstId="";
			defaultUser.PhoneExtension="";
			defaultUser.PhoneNumber="5555555";
			defaultUser.PhonePrefix="425";
			defaultUser.PostalCode="98014";
			defaultUser.RenewalBoid="";
			defaultUser.RequesterHigh=0;
			defaultUser.RequesterId=0;
			defaultUser.RequesterLow=0;
			defaultUser.State="WA";
			defaultUser.Street1="Vlajkoviceva 6";
			defaultUser.Street2="11000 Beograd";
			defaultUser.Street3="";
			defaultUser.AccountHolderName="Bob";
			defaultUser.CurrentBoid="c0226c7a-cd04-4e36-a92b-5bd7c6a0a442";
			defaultUser.RenewalBoid="AC47CD5A-99B5-4C0D-AA58-1E80E59BE88C";
			
			LogTraffic = GetConfigBool("emu.LogTraffic", false);
			DumpUserInfo = GetConfigBool("emu.DumpUserInfo", false);

			// config passthrough mode
			string strPassthrough = GetConfigString("emu.PassThroughMode", "NoPassthrough");
			if(strPassthrough == "NoPassthrough")
				PassThroughMode = PassThroughModes.NoPassthrough;
			else if(strPassthrough == "PassGetKeyOnly")
				PassThroughMode = PassThroughModes.PassGetKeyOnly;
			else if(strPassthrough == "EmulateRMUsers")
				PassThroughMode = PassThroughModes.EmulateRMUsers;
			else if(strPassthrough == "PassAlways")
				PassThroughMode = PassThroughModes.PassAlways;


		}

		#region Cache Handling
		static public int GetUserCount()
		{
			if (userCache==null)
				return 0;
			return userCache.Count;
		}

		static public void SetCache(Cache pCache)
		{
			userCache=pCache;
		}

		static public void AddToCache(User u)
		{
			lock(userCache)
			{
				userCache.Insert(u.Key, u, null, Cache.NoAbsoluteExpiration, TimeSpan.FromMinutes(15));
			}
		}

		static public User GetFromCache(long id)
		{
			string key=Convert.ToString(id,10);
			User ret;
			lock(userCache)
			{
				ret=userCache.Get(key) as User;
			}
			if (Global.PassThroughMode>PassThroughModes.PassGetKeyOnly)
				throw new UserNotFoundException();
			if (ret==null)
				return defaultUser;
			return ret;    
		}

		/// <summary>
		/// Used only by the web front end, so it's ok to not throw UserNotFound
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		static public User GetFromCache(string userName)
		{
			if (userCache==null)
				return null;

			string uLower=userName.ToLower();

			IDictionaryEnumerator en=userCache.GetEnumerator();
			
			while (en.MoveNext())
			{
				User u=en.Value as User;
				if (u==null)
					continue;
				if (u.GamerTag.ToLower()==uLower)
					return u;
			}

			return null;
		}

		static public User[] GetUsers()
		{
			if (userCache==null)
				return null;

			User []users=new User[userCache.Count];

			IDictionaryEnumerator en=userCache.GetEnumerator();
			int i=0;
			while (en.MoveNext())
			{
				User u=en.Value as User;
				WriteLine(en.Value.ToString());
				if (u==null)
					continue;
				users[i]=u;
				i++;
			}
			FileFlush();
			return users;
		}

		#endregion

		#region File IO

		static public void FileOpen()
		{
			logFile=File.Open(fileName,FileMode.Append,FileAccess.Write,FileShare.ReadWrite);
		}

		static public void FileFlush()
		{
			logFile.Flush();
		}

		static public void FileClose()
		{
			logFile.Close();
		}

		static public void WriteLine(string s)
		{
			WriteString(s+"\r\n");
		}

		static public void WriteString(string s)
		{
			lock (encoder)
			{
				WriteBinary(encoder.GetBytes(s));
			}
		}

		static public void WriteBinary(byte []buf)
		{
			logFile.Write(buf,0,buf.Length);
		}
		#endregion
		
		static bool GetConfigBool(string name, bool defaultValue)
		{
			try
			{
				string strValue = System.Configuration.ConfigurationSettings.AppSettings[name];
				if(strValue == null || strValue.Length == 0)
					return defaultValue;
				else
					return Boolean.Parse(strValue);
			}
			catch(Exception)
			{
				WriteLine("Failed to parse config setting: " + name + " as boolean");
			}
			
			
			return defaultValue;
		}

		static string GetConfigString(string name, string defaultValue)
		{ 
			try
			{
				string strValue = System.Configuration.ConfigurationSettings.AppSettings[name];
				if(strValue == null || strValue.Length == 0)
					return defaultValue;
				else 
					return strValue;
			}
			catch(Exception)
			{
				WriteLine("Failed to retrieve config setting: " + name);
			}
			
			return defaultValue;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\Handler.cs ===
using System;
using System.Diagnostics;
using System.Reflection;
using System.IO;
using System.Web;
using System.Web.Caching;
using System.Text;
using System.Runtime.InteropServices;
using System.Collections;
using System.Net;

namespace BillingEmulatorV2
{
	class ReqHandlerType
	{
		public string	Action;
		public Type		HandlerType;
		
		/// <summary>
		/// Constructs a new handler type, and adds it to the specified hash. Uses action as the key
		/// </summary>
		static public void AddToHashtable(Hashtable hash, string action, Type handler)
		{
			ReqHandlerType foo=new ReqHandlerType();
			foo.Action=action;
			foo.HandlerType=handler;
			hash.Add(action,foo);
		}

		public RequestHandler Construct()
		{
			ConstructorInfo ci=HandlerType.GetConstructor(System.Type.EmptyTypes);
			Debug.Assert(ci!=null);
			object o=ci.Invoke(null);
			Debug.Assert(o!=null);
			RequestHandler ret=o as RequestHandler;
			Debug.Assert(ret!=null);
			return ret;
		}
	}

	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Handler : IHttpHandler
	{
		static Hashtable			handlers;

		static Handler()
		{
			// Initialize handlers
			handlers=new Hashtable();

			ReqHandlerType.AddToHashtable(handlers, "GetKey", typeof(GetKey));
			ReqHandlerType.AddToHashtable(handlers, "CreateAccount", typeof(CreateAccount));
			ReqHandlerType.AddToHashtable(handlers, "PurchaseOffering", typeof(PurchaseOffering));
			ReqHandlerType.AddToHashtable(handlers, "ProvisionServices", typeof(ProvisionServices));
			ReqHandlerType.AddToHashtable(handlers, "GetAccountInfo", typeof(GetAccountInfo));
			ReqHandlerType.AddToHashtable(handlers, "GetPaymentInstruments", typeof(GetPaymentInstruments));
			ReqHandlerType.AddToHashtable(handlers, "UpdateAccountInfo", typeof(UpdateAccountInfo));
			ReqHandlerType.AddToHashtable(handlers, "AddPaymentInstrument", typeof(AddPaymentInstrument));
			ReqHandlerType.AddToHashtable(handlers, "SwitchPaymentInstruments", typeof(SwitchPaymentInstruments));
			ReqHandlerType.AddToHashtable(handlers, "RemovePaymentInstrument", typeof(RemovePaymentInstrument));
			ReqHandlerType.AddToHashtable(handlers, "GetSubscriptions", typeof(GetSubscriptions));
			ReqHandlerType.AddToHashtable(handlers, "ConvertSubscription", typeof(ConvertSubscription));
			ReqHandlerType.AddToHashtable(handlers, "AddRoleAssignment", typeof(AddRoleAssignment));
			ReqHandlerType.AddToHashtable(handlers, "CancelSubscription", typeof(CancelSubscription));

		}

		public Handler()
		{
		}

		#region IHttpHandler Members

		public void ProcessRequest(HttpContext context)
		{
			SpeakerToAnimals sa=new SpeakerToAnimals();
			byte []reqData=context.Request.BinaryRead(context.Request.TotalBytes);
			Global.SetCache(context.Cache);
			string action = "NOSOAPACTION";
			int secondSlash=context.Request.RawUrl.IndexOf('?',1); 
			if (secondSlash!=-1)
			{
				sa.Query=context.Request.RawUrl.Substring(secondSlash+1);
			}

			try
			{
				sa.Headers=new WebHeaderCollection();
				foreach (string key in context.Request.Headers.AllKeys)
				{
					if (key=="Host")
						continue;
					if (key=="Content-Length")
						continue;
					if (key=="Connection")
						continue;
					if (key=="Expect")
						continue;
					if (key=="SOAPAction")
						action = context.Request.Headers[key];

					sa.Headers.Add(key,context.Request.Headers[key]);
				}
				
				int lastDot=action.LastIndexOf(".");
				if (lastDot!=-1)
					action=action.Substring(lastDot+1,action.Length-lastDot-2);

				if (Global.LogTraffic)
				{
					Global.WriteLine("\n------------- Emu -> SPS: --------------------------");
					Global.WriteLine(DateTime.Now.ToString()+" ["+action.PadRight(18)+"]");
					
					foreach(string key in context.Request.Headers.AllKeys)
					{
						Global.WriteLine("  " + key + " == " + context.Request.Headers[key]);
					}

					Global.WriteBinary(reqData);
					Global.WriteString("\n");
				}

				RequestHandler handler=FindHandler(action, sa);

				byte []resp;
				try
				{
					resp=handler.GetResp(reqData);
				}
				catch(UserNotFoundException)
				{
					handler=new PassthroughHandler();
					handler.SPS=sa;
					resp=handler.GetResp(reqData);
				}


//				No need to reead out the content type from SPS, we already know 
//				what it is
//				context.Response.ContentType=sa.RespHeaders["Content-Type"];
				context.Response.ContentType="text/xml; charset=\"UTF-8\"";
				context.Response.StatusCode=handler.StatusCode;

				context.Response.BinaryWrite(resp);
				if (Global.LogTraffic)
				{
					Global.WriteLine("\n------------- Emu <- SPS: --------------------------");
					Global.WriteLine(DateTime.Now.ToString()+" ["+handler.Name.PadRight(18)+"] StatusCode: " + context.Response.StatusCode);
					Global.WriteBinary(resp);
					Global.WriteString("\n");
				}
			}
			catch(Exception e)
			{
				Global.WriteLine(e.ToString());
				throw e;
			}
			finally
			{
				Global.FileFlush();
			}
		}

		~Handler()
		{
			Global.FileClose();
		}

		RequestHandler FindHandler(string action, SpeakerToAnimals sa)
		{
			RequestHandler rh=null;
			ReqHandlerType ht=null;
			
			// If we're not forcing passthrough, try to find a handler to handle this type
			// of traffic.
			if (Global.PassThroughMode < PassThroughModes.PassAlways)
			{
				ht=handlers[action] as ReqHandlerType;

				if (action == "GetKey" && Global.PassThroughMode==PassThroughModes.PassGetKeyOnly)
				{
					// In this mode we pass GetKey only. If the handler is the GetKey handler, pass through
					Global.WriteLine("Overriding GetKey, returning a passthrough handler");
					rh = new PassthroughHandler();
				}

				// we don't want to pass through but we don't have an appropriate handler
				if(ht == null)
				{
					rh = new EmulatorErrorHandler();
				}
			}
			else 
			{
				// we're in passalways mode
				rh = new PassthroughHandler();
			}
			if(ht != null)
			{
				rh=ht.Construct();
			}
			
			if(rh != null)
			{
				rh.SPS=sa;
				rh.Parent=this;
			}

			return rh;
		}

		public bool IsReusable
		{
			get
			{
				// TODO:  Add Handler.IsReusable getter implementation
				return true;
			}
		}

		#endregion

	}



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\getkey.cs ===
using System;

//
// <?xml version="1.0" encoding="UTF-8" standalone="no"?>
// <SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
// <SOAP-ENV:Body><SOAPSDK1:GetKeyResponse xmlns:SOAPSDK1="http://tempuri.org/message/">
// <pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;XONTEBILLSPS02&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrKeyXml>&lt;KeySet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;Key&gt;&lt;Type&gt;PUBLIC&lt;/Type&gt;&lt;Version&gt;03100301&lt;/Version&gt;&lt;Data&gt;0x300033003100300030003300300031005500940000000602000000a40000525341310004000001000100c7452cac19148927e994ea5d90305746ef32b894760c6c730ec2264bf9fd881fe51370859eecda7b3432e60ee44ca60aa7cb7aa4959b7a0f8dc45fbe02355c081bbd82a19bf4b21d9012dab26b2677469b83c162df05efe2beb6f30afe67bf416e8f9c613ca790230f35ba8b9a8104cea8372bb88f7f08b6dbb36bec353a72d8&lt;/Data&gt;&lt;/Key&gt;&lt;/KeySet&gt;</pbstrKeyXml>
// </SOAPSDK1:GetKeyResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>
//
namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for GetKey.
	/// </summary>
	public class GetKey : RequestHandler
	{
		public GetKey()
		{
			
		}

		protected override void Process(byte[] input)
		{
			SB.Append("<SOAPSDK1:GetKeyResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;XONTEBILLSPS02&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrKeyXml>&lt;KeySet xmlns=&quot;urn:schemas-microsoft-com:billing-data&quot;&gt;&lt;Key&gt;&lt;Type&gt;PUBLIC&lt;/Type&gt;&lt;Version&gt;03100301&lt;/Version&gt;&lt;Data&gt;0x300033003100300030003300300031005500940000000602000000a40000525341310004000001000100c7452cac19148927e994ea5d90305746ef32b894760c6c730ec2264bf9fd881fe51370859eecda7b3432e60ee44ca60aa7cb7aa4959b7a0f8dc45fbe02355c081bbd82a19bf4b21d9012dab26b2677469b83c162df05efe2beb6f30afe67bf416e8f9c613ca790230f35ba8b9a8104cea8372bb88f7f08b6dbb36bec353a72d8&lt;/Data&gt;&lt;/Key&gt;&lt;/KeySet&gt;</pbstrKeyXml>"+
"</SOAPSDK1:GetKeyResponse>");
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\SvcProviderWrapper.cs ===
using System;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;
using BillingEmulatorV2.Xcbk;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for SvcProviderWrapper.
	/// </summary>
	public class SvcProviderWrapper 
	{
		class MyCertPolicy : ICertificatePolicy
		{
			public bool CheckValidationResult(ServicePoint sp, X509Certificate cert, WebRequest request, int problem)
			{
				Console.WriteLine("The problem is = "+problem.ToString("X"));
				return true;
			}
		}
		static MyCertPolicy CP=new MyCertPolicy();

		Xcbk.ISvcProvider Prov=new Xcbk.ISvcProvider();
		Xcbk.ISvcProvider Prov2=new Xcbk.ISvcProvider();

		public static int ConcurrentCalls=0;
		public int errorCode=-1;
		public int responseClass=-1;
		public int expectedTransaction=-1;
		public int expectedStatus=-1;

		static protected Regex RegexXCBKReturn1=new Regex(@"<ResponseInfo><ErrorCode/><ResponseClass>(?<responseClass>(.)+)</ResponseClass><ResponseMessage/></ResponseInfo>");
		static protected Regex RegexXCBKReturn2=new Regex(@"<ResponseInfo><ErrorCode>(?<errorCode>(.)+)</ErrorCode><ResponseClass>(?<responseClass>(.)+)</ResponseClass><ResponseMessage/></ResponseInfo>");
		
		static public void Initialize()
		{
			ServicePointManager.CertificatePolicy=new MyCertPolicy();
		}

		public bool CheckProvisioningStatus(string serviceId)
		{
			string s1=Prov.CheckProvisioningStatus(0,0,serviceId);
			ParseReturn(s1);
			return (errorCode==0) && (responseClass==0);
		}

		public bool ValidateProvisioningData(string serviceId,string details)
		{
			string response;
			string s1=Prov.ValidateProvisioningData(0,0,serviceId,details,out response);
			// For some reason VPD returns data through response instead of s1
			ParseReturn(response);
			return (errorCode==0) && (responseClass==0);
		}

		public void ParseReturn(string str)
		{
			Match match;
			match=RegexXCBKReturn1.Match(str);
			if (match.Length!=0)
			{
				errorCode=0;
				responseClass=Int32.Parse(match.Groups["responseClass"].Value);
			}
			match=RegexXCBKReturn2.Match(str);
			if (match.Length!=0)
			{
				errorCode=Int32.Parse(match.Groups["errorCode"].Value);
				responseClass=Int32.Parse(match.Groups["responseClass"].Value);
			}
		}


		public bool ProvisionService(long puid, string guid, string instanceId)
		{
			System.Threading.Interlocked.Increment(ref ConcurrentCalls);
			int puidlo=(int) (puid & 0xFFFFFFFF);
			int puidhi=(int) (puid >> 32);
			string s1=Prov.ProvisionService(puidhi,puidlo,guid,instanceId,"Friendly","","<AlreadyProvisioned>1</AlreadyProvisioned>");
			ParseReturn(s1);
			System.Threading.Interlocked.Decrement(ref ConcurrentCalls);
			return (errorCode==0) && (responseClass==0);
		}

		public bool DeprovisionService(int puidhi, int puidlo, string offerId, string instanceId)
		{
			string s1=Prov.DeprovisionService(puidhi,puidlo,offerId,instanceId);
			ParseReturn(s1);
			return (errorCode==0) && (responseClass==0);
		}

		public bool DeprovisionService(long puid, string offerId, string instanceId)
		{
			int puidlo=(int) (puid & 0xFFFFFFFF);
			int puidhi=(int) (puid >> 32);
			string s1=Prov.DeprovisionService(puidhi,puidlo,offerId,instanceId);
			ParseReturn(s1);
			return (errorCode==0) && (responseClass==0);
		}

		public SvcProviderWrapper()
		{
			ServicePointManager.DefaultConnectionLimit=22;
			ServicePointManager.CertificatePolicy=CP;
			
//			Prov.Url="https://"+Server+"/xcbk/sprov.asmx";
			Prov.Credentials=new NetworkCredential("test\\spsp_xbox_sp","4RtmmKw5sHcBgrFxrvA8Gc3vz4c");
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\RequestHandler.cs ===
using System;
using System.Text;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for RequestHandler.
	/// </summary>
	public abstract class RequestHandler
	{
		protected const int				UserNotFoundHresult=0x8000001;

		public SpeakerToAnimals	SPS;
		public Handler			Parent;		// used for writestrings, etc.
		protected StringBuilder SB=new StringBuilder();
		protected Random		RandGen=new Random();
		protected XmlParser		Parser=new XmlParser();
		public string			Name;
		public int				StatusCode=200;

		protected string GenerateString(int length)
		{
			int i,k;
			StringBuilder Name=new StringBuilder();
			long now=System.DateTime.Now.Ticks;
			//	Add some time dependent chatacters
			for (i=Name.Length; i<length; i++)
			{
				k=RandGen.Next(16);
				if (k<10)
					Name.Append((char) ('0'+k));
				else
					Name.Append((char) ('A'+k-10));
			}
			return Name.ToString();
		}

		protected string GeneratePuid()
		{
//          "Cy0AAAAAAAABAAEA"
//			"EO8DAAAAAAABAAEA"
//			 0123456789012345
			return "RM"+GenerateString(8)+"ABAAEA";
		}

		virtual public byte[] GetResp(byte []input)
		{
			SB.Append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><SOAP-ENV:Envelope SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP-ENV:Body>");
			try
			{
				Process(input);
			}
			catch(EmulatorException e)
			{
				FailWithErrorcode(e.hResultCode);
				Global.WriteLine("Can't find user!");
				Global.WriteLine(e.StackTrace);
			}
			catch(SimulateSPSException e)
			{
				SB.Append(e.GetXRLResponse());
			}
			SB.Append("</SOAP-ENV:Body></SOAP-ENV:Envelope>");

			UTF8Encoding encoder=new UTF8Encoding(false,false);
			return encoder.GetBytes(SB.ToString());
		}

		abstract protected void Process(byte []input);

		protected string ConvertInputToString(byte []input)
		{
			UTF8Encoding encoder=new UTF8Encoding(false,false);
			return encoder.GetString(input);
		}

		protected string GetOfferingGuid()
		{
			return Parser.GetNode("bstrOfferingGUID");
		}

		protected string GetSubscriptionId()
		{
			return Parser.GetNode("bstrSubscriptionId");
		}

		protected long GetRequesterId()
		{
			long hi=Convert.ToInt32(Parser.GetNode("lRequesterIdHigh"));
			long lo=Convert.ToInt32(Parser.GetNode("lRequesterIdLow"));
			return (hi<<32) + lo;
		}

		void FailWithErrorcode(int hResult)
		{
			SB.Append(
"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x"+Convert.ToString(hResult,16)+"&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;An emulator error!&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML>"
					   );
		}

		public RequestHandler()
		{
			Name=GetType().Name;
		}
	}

	/// <summary>
	/// Fatal errors that probably shouldn't be returned to the end user
	/// </summary>
	public class EmulatorException : ApplicationException
	{
		public int hResultCode;
		
		public EmulatorException(int hResult)
		{
			this.hResultCode=hResult;
		}
	}

	/// <summary>
	/// Thrown by the cache system if the user has not been found AND we're running in
	/// PassNonRMUsers mode. Request handler will pick this exception up and forward the request
	/// to SPS
	/// </summary>
	public class UserNotFoundException : ApplicationException
	{
	}

	public class SimulateSPSException:System.Exception
	{
		new public uint HResult=0;
		public string ErrorMessage="Undefined";

		public SimulateSPSException(uint hResult)
		{
			HResult=hResult;
		}

		public string GetXRLResponse()
		{
			return 
				"<SOAP-ENV:Fault><faultcode>SOAP-ENV:Server</faultcode><faultstring>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x"+
				HResult.ToString("X")+"&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;"+
				ErrorMessage+"&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x"+
				HResult.ToString("X")+"&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[&lt;Error name=&quot;ValidatePI&quot; code=&quot;30000&quot; ReturnValue=&quot;30000&quot;&gt;&lt;Description&gt;&lt;ErrorText&gt;Stored procedure returned-30000 Server:XONTEBILLSPS001 DB:PaymentAuth&lt;/ErrorText&gt;&lt;Command&gt;{ ?="+
				"This is an error faked by the emulator}&lt;/Command&gt;&lt;P&gt;Stored procedure returned-30000 Server:XONTEBILLSPS001 DB:PaymentAuth&lt;/P&gt;&lt;/Description&gt;&lt;/Error&gt;]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;XONTEBILLSPS001&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</faultstring><faultactor>https://xontebillsps001.xontie.ssd.extest.microsoft.com/bdk2/bdk.WSDL</faultactor>"+
				"</SOAP-ENV:Fault>";
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\SwitchPaymentInstruments.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for SwitchPaymentInstruments.
	/// </summary>
	public class SwitchPaymentInstruments : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);	// This will throw if the user is not found

			SB.Append(
"<SOAPSDK1:SwitchPaymentInstrumentsResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrAmountChargedXML>&lt;AmountCharged&gt;&lt;Gross&gt;0.00&lt;/Gross&gt;&lt;Currency&gt;USD&lt;/Currency&gt;&lt;Locale&gt;en-US&lt;/Locale&gt;&lt;/AmountCharged&gt;"+
"</pbstrAmountChargedXML></SOAPSDK1:SwitchPaymentInstrumentsResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\RemovePaymentInstrument.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for RemovePaymentInstrument.
	/// </summary>
	public class RemovePaymentInstrument : RequestHandler
	{
		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);	// This will throw if the user is not found
			
#if false
			SB.Append(
			"<SOAPSDK1:RemovePaymentInstrumentResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\">"+
			"<pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x80042765&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;Payment instrument has outstanding balance.&lt;/ErrorMessage&gt;"+
			"&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x80042765&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;"+
			"&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML></SOAPSDK1:RemovePaymentInstrumentResponse>"
			);
#else

			SB.Append(
			"<SOAPSDK1:RemovePaymentInstrumentResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML></SOAPSDK1:RemovePaymentInstrumentResponse>"
			);
#endif
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\ThreadBase.cs ===
using System;
using System.Threading;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for ThreadBase.
	/// </summary>
	public abstract class ThreadBase
	{
		protected abstract void ThreadBody();
		public Thread TaskThread=null;

		public void Go()
		{
            TaskThread=new Thread(new ThreadStart(ThreadBody));
			TaskThread.Start();
		}

		public bool IsAlive
		{
			get
			{
				if (TaskThread==null)
					return false;
				return TaskThread.IsAlive;
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\SpeakerToAnimals.cs ===
using System;
using System.Net;
using System.IO;
using System.Net.Sockets;
using System.Web;
using System.Collections.Specialized;


namespace BillingEmulatorV2
{
	/// <summary>
	/// Handles Xbox - SPS communications
	/// </summary>
	public class SpeakerToAnimals
	{
		string password="";
		string user="";
		string server="";
		string domain="";

		public WebHeaderCollection	Headers;
		public WebHeaderCollection	RespHeaders;
		public int					StatusCode=200;
		public string				Query=String.Empty;

		static NetworkCredential cachedCredentials;

		public SpeakerToAnimals()
		{
			server = System.Configuration.ConfigurationSettings.AppSettings["sps.SoapEndpoint"];
			user = System.Configuration.ConfigurationSettings.AppSettings["sps.UserName"];
			password = System.Configuration.ConfigurationSettings.AppSettings["sps.Password"];
			domain = System.Configuration.ConfigurationSettings.AppSettings["sps.Domain"];
			if(domain != null && domain.Length > 0)
				cachedCredentials=new NetworkCredential(user,password,domain);
			else
				cachedCredentials=new NetworkCredential(user,password);
			
			Global.WriteLine("Authenticating to SPS with credentials: user: "  + user + ", password: " + password + ", domain: " + domain == null ? "" : domain);
		}

		public byte[] Send(byte []data)
		{
/*
			HttpWebRequest wr=WebRequest.Create(server+"?"+Query);
			wr.Headers=Headers;
			wr.Credentials=cachedCredentials;
			wr.Method="POST";
*/
			byte []respData;
			try
			{
				WebClient wc=new WebClient();
				wc.Credentials=cachedCredentials;
				wc.Headers=Headers;
				if (Query!=null && Query.Length>0)
					respData=wc.UploadData(server+"?"+Query, "POST", data);
				else
					respData=wc.UploadData(server, "POST", data);
				RespHeaders=wc.ResponseHeaders;
			}
			catch (WebException we)
			{
				if (we.Response!=null)
				{
					RespHeaders=we.Response.Headers;
					Stream s=we.Response.GetResponseStream();

					respData=new byte[we.Response.ContentLength];
					s.Read(respData,0,respData.Length);
					s.Close();
				}
				else
				{
					Global.WriteString(we.ToString());
					respData=new byte[0];
				}

				StatusCode=500;
			}
			return respData;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\UpdateAccountInfo.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for UpdateAccountInfo.
	/// </summary>
	public class UpdateAccountInfo : RequestHandler
	{
		XmlParser	accountInfo=new XmlParser();

		protected void UpdateUser(User u)
		{
			string billingInfo;
			billingInfo=Parser.GetNode("bstrAccountInfoXML");
			accountInfo.Load(billingInfo);

			u.State=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:State");
			u.PostalCode=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:PostalCode");
			u.Street1=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street1");
			u.Street2=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street2");
			u.Street3=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:Street3");
			u.City=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:City");
			u.CountryCode=accountInfo.GetNode("myns:AccountInfo/myns:AddressInfoSet/myns:AddressInfo/myns:CountryCode");

			u.PhonePrefix=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhonePrefix");
			u.PhoneNumber=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhoneNumber");
			u.PhoneExtension=accountInfo.GetNode("myns:AccountInfo/myns:PhoneSet/myns:Phone/myns:PhoneExtension");

			u.FirstName=accountInfo.GetNode("myns:AccountInfo/myns:FirstName");
			u.LastName=accountInfo.GetNode("myns:AccountInfo/myns:LastName");

			u.Currency=accountInfo.GetNode("myns:AccountInfo/myns:Currency");
			u.Locale=accountInfo.GetNode("myns:AccountInfo/myns:Locale");
		}

		protected override void Process(byte []input)
		{
			Parser.Load(ConvertInputToString(input));
			
			long id=GetRequesterId();
			User u=Global.GetFromCache(id);
			if (u==null)
				throw new EmulatorException(UserNotFoundHresult);

			UpdateUser(u);
			Global.AddToCache(u);
			u.Dump();
			
			SB.Append(
"<SOAPSDK1:UpdateAccountInfoResponse xmlns:SOAPSDK1=\"http://tempuri.org/message/\"><pbstrErrorXML>&lt;ErrorPackage&gt;&lt;ErrorHResult&gt;0x0&lt;/ErrorHResult&gt;&lt;ErrorMessage&gt;&lt;/ErrorMessage&gt;&lt;ErrorDebugInfo&gt;&lt;DebugInfo&gt;0x0&lt;/DebugInfo&gt;&lt;DebugInfo&gt;&lt;![CDATA[]]&gt;&lt;/DebugInfo&gt;&lt;ComputerName&gt;SPS25TIECORP1&lt;/ComputerName&gt;&lt;/ErrorDebugInfo&gt;&lt;/ErrorPackage&gt;</pbstrErrorXML><pbstrRequiredPaperWorkURL></pbstrRequiredPaperWorkURL></SOAPSDK1:UpdateAccountInfoResponse>"
				);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\DataClass.cs ===
using System;
using System.Collections;
using System.Text;
using System.Xml;

using Catalog;
using Catalog.Verifier;

namespace Catalog
{
    public abstract class DataObject
    {
        public XmlElement XmlDocRoot;
        public XmlNamespaceManager XmlNmsMgr;

        public virtual XmlNodeList GetNodeListbyTagName(string tagName)
        {
            return XmlDocRoot.GetElementsByTagName(tagName, XmlNmsMgr.LookupNamespace(XmlDocRoot.Prefix));
        }

        // in offer instance, there are countryCode, requiredUserTypeId, startDate/endDate, and pointsPrice. This should be the order when searching through all offer instances
        // so you will have scenarios, countryCode the same but requiredUserTypeId is different, countryCode and requireUserTypeId are the same but startDate/endDate is different
        // countryCode (required), userType (optional) and Bookmark (optional) are input parameters. The order of userType and Bookmark is not important. We will just pick one.
        public bool SearchTagInXml(string tag, ArrayList valList, string xPath, ref string outValue, ref string outputMessage)
        {
            // for startDate and endDate, it is not simply equal but in the range. So we have special processing.
            string[] tags = tag.Split(new char[] { '|' });
            //even if one value is present in the nodelist corresponding to the tag the bValPresent flag is set.
            bool bValPresent = false;
            tag = tags[0];
            if (string.IsNullOrEmpty(tag) && tags.Length > 1)
                tag = tags[1];

            DateTime startDate = DateTime.MinValue;
            DateTime endDate = DateTime.MaxValue;
            DateTime now;

            //get the list of nodes that will be used for comparison
            XmlNodeList nodeList;
            if (!string.IsNullOrEmpty(xPath))
            {
                tag = string.Format(xPath, tag);
                nodeList = XmlDocRoot.SelectNodes(tag, XmlNmsMgr);
            }
            else
            {
                nodeList = GetNodeListbyTagName(tag);
            }

            if (nodeList.Count == 0){
                if (tag.Equals("startDate") || tag.Equals("endDate") || tag.Equals("startDateTime")|| tag.Equals("endDateTime"))
                {
                    bValPresent = true;
                    outputMessage += String.Format("FilterMatch: {0} tag does not present, no need to check this", tag);
                    outputMessage += "\r\n";
                }
                else 
                {
                    outputMessage += String.Format("FILTERMISMATCH: In the MediaData {0} tag returned {1} nodes", tag, nodeList.Count);
                    outputMessage += "\r\n";
                    return false;
                }
            }
            //obtain the corresponding value from the hashtable which will compared against the nodelist values.
            string[] vals = (string[])valList.ToArray(typeof(string));

            
            foreach (string val in vals)
            {
                foreach (XmlNode node in nodeList)
                {
                    // special process for startDate and endDate
                    if (tags.Length > 1)
                    {
                        if (string.IsNullOrEmpty(tags[1]))  // no endDate
                        {
                            try
                            {
                                startDate = Convert.ToDateTime(node.InnerText);
                            }
                            catch {
                                startDate = DateTime.MinValue;
                            }
                        }
                        else   // have both startDate and endDate
                        {
                            if (string.IsNullOrEmpty(tags[0])) {//no startDate
                                try
                                {
                                    endDate = Convert.ToDateTime(node.InnerText);
                                }
                                catch {
                                    endDate = DateTime.MaxValue;
                                }
                            }
                            else
                            {
                                startDate = Convert.ToDateTime(node.InnerText);
                                if(!DataSource.IsEMSData(this.XmlDocRoot))
                                    endDate = Convert.ToDateTime(node.SelectSingleNode("../g:" + tags[1], XmlNmsMgr).InnerText);
                                else {
                                    endDate = Convert.ToDateTime(node.SelectSingleNode("../pf:" + tags[1], XmlNmsMgr).InnerText);
                                }
                            }

                        }

                        now = Convert.ToDateTime(val);
                        if (startDate <= now && endDate > now)
                        {
                            outValue = val;
                            bValPresent = true;
                            outputMessage += String.Format("FilterMatch: {0} tag contained the value: {1}, and fell in the DateTime range: {2} - {3}", tag, val, startDate, endDate);
                            outputMessage += "\r\n";
                        }
                    }
                    // all other normal cases
                    else
                    {
                        if(tag.Contains("titleSort")){
                            if ((node.InnerText.ToLower())[0]==(val.ToLower())[0])
                            {
                                bValPresent = true;
                                outputMessage += String.Format("FilterMatch: {0} tag contained the following value: {1}", tag, val);
                                outputMessage += "\r\n";
                                break;
                            }                           
                        }
                        else
                        if (node.InnerText == val)
                        {
                            outValue = val;
                            bValPresent = true;
                            outputMessage += String.Format("FilterMatch: {0} tag contained the following value: {1}", tag, val);
                            outputMessage += "\r\n";
                        }
                    }
                }
            }
            if (!bValPresent)
            {
                outputMessage += String.Format("FILTERMISMATCH: {0} tag did not have the required value(s):", tag);
                foreach (string val in vals)
                {
                    outputMessage += val + ", ";
                }
                outputMessage += "\n";
                return false;
            }

            return true;
        }

        public virtual bool SearchCurrentMedia(Hashtable filterValues, out string outputMessage)
        {
            outputMessage = "";
            string outValue = string.Empty;
            string tag;
            ArrayList valList;
            bool mediaPresented=false;
            bool editorial=false;
//            bool FindVideOffers = false;
            int offerFilterLevel = 0;

            string xPath = string.Empty;


            if(filterValues.ContainsKey("MediaPresented")) mediaPresented = true;
            
            // the array holds the offer instances tags in the correct order
            DictionaryEntry[] offerInstancesTags = new DictionaryEntry[10];

            //enumerate through the table & verify if the value matches with the tags present in XmlDocRoot
            foreach (DictionaryEntry de in filterValues)
            {
                if (((string)de.Key).Equals("lcid"))
                {
                    continue;
                }

                if (((string)de.Key).Equals("offerFilterLevel1"))
                {
                    offerFilterLevel = 1;
                    continue;
                }

                /*if (((string)de.Key).Equals("FindVideOffers"))
                {
                    FindVideOffers = true;
                    continue;
                }
                */


                if (((string)de.Key).Equals("OfferEditorial"))
                {
                    editorial = true;
                    continue;
                }
                if (de.Key == null || de.Value == null)
                    continue;

                tag = (string)de.Key;
                valList = (ArrayList)de.Value;
                


                /*
                  [0]countryCode";
                   [1]requiredUserTypeId";
                   [2]startDate|endDate";
                 */
                // get the offer instance tags into the DictionaryEntry array
                if (tag.IndexOf('[') == 0 && tag.IndexOf(']') == 2)
                {
                    int index = Convert.ToInt32(tag.Substring(1, 1));
                    offerInstancesTags[index] = de;
                    continue;
                }

                xPath = null;

                if(tag.Equals("titleSort")){
                    MediaObject mo = (MediaObject)this;
                    if (mo.DataType == MediaDataTypeEnum.VideoData || mo.DataType == MediaDataTypeEnum.GameData)
                    {
                        string lcid = (string)((ArrayList)filterValues["lcid"])[0];
                        xPath = String.Format(".//pf:mediaLocale[pf:lcid='{0}']", lcid);
                        xPath +=  "/pf:{0}";
                    }

                    /*if (mo.DataType == MediaDataTypeEnum.GameData)
                    {
                        string lcid = (string)((ArrayList)filterValues["lcid"])[0];
                        xPath = String.Format(".//g:mediaLocaleInfo[g:lcid='{0}']", lcid);
                        xPath +=  "/g:{0}";
                    }*/
                }              

                // search all the other tags
                if (!SearchTagInXml(tag, valList, xPath, ref outValue, ref outputMessage))
                    return false;
            }

            OfferObject o=null;
            if (this is OfferObject)
            {
                o = (OfferObject)this;
            }
            else {
                return true;
            }
            // now process OfferInstance related tag in offerInstanceTags[]
            //go through the tags in the the DictionaryEntry array in that special order
            
            if (!DataSource.IsEMSData(o.XmlDocRoot))
            {
                int iPath = 0;
                string xPathHeader = "//g:offerInstance/g:{0}";

                for (int i = 0; i < offerInstancesTags.Length; i++)
                {
                    if (offerInstancesTags[i].Key != null && offerInstancesTags[i].Value != null)
                    {
                        tag = (string)offerInstancesTags[i].Key;
                        valList = (ArrayList)offerInstancesTags[i].Value;
                        tag = tag.Substring(3);   // remove the '[0|1|3]'

                        if (iPath == 0) //country code
                        {
                            xPath = xPathHeader;
                            if (!SearchTagInXml(tag, valList, xPath, ref outValue, ref outputMessage))
                                return false;
                            xPath = "[../g:" + tag + "='" + outValue + "']";
                        }
                        else
                        {
                            xPath = xPathHeader + xPath;
                            if (!SearchTagInXml(tag, valList, xPath, ref outValue, ref outputMessage))
                                return false;
                            xPath = xPath.Substring(xPath.IndexOf('['));
                            xPath = xPath.Substring(0, xPath.Length - 1);
                            xPath = xPath + " and ../g:" + tag + "='" + outValue + "']";
                        }

                        iPath++;
                    }
                }
                return true;
            }
            else { 
                    //search for country code and start /end day and get the offer instance, then get usertype and then do video offer fileter
                bool found = false;
                int filternumber = 0;
                foreach( DictionaryEntry de in o.OfferMediaInstanceTbl) {
                    string offerInstance = (string)de.Key;
                    int iPath = 0;
                    filternumber = 0;


                    for (int i = 0; i < offerInstancesTags.Length; i++)
                    {
                        if (offerInstancesTags[i].Key != null && offerInstancesTags[i].Value != null)
                        {
                            filternumber++;
                            tag = (string)offerInstancesTags[i].Key;
                            valList = (ArrayList)offerInstancesTags[i].Value;
                            tag = tag.Substring(3);   // remove the '[0|1|3]'

                            string xPathHeader = ".//pf:OfferInstance" + "[pf:offerInstanceId='"+offerInstance.ToString()+"']"+ "/pf:{0}";
                            if (iPath == 0) //userTypeId
                            {
                                xPath = ".//pf:{0}[../pf:offerInstanceId='" + offerInstance.ToString() + "']";
                                if (!SearchTagInXml(tag, valList, xPath, ref outValue, ref outputMessage))
                                {                                   
                                    break;
                                }                                
                            }
                            else
                            {
                                xPath = ".//pf:OfferInstance" + "[pf:offerInstanceId='" + offerInstance.ToString() + "']" + "/pf:{0}";
                           
                                if (!SearchTagInXml(tag, valList, xPath, ref outValue, ref outputMessage))
                                {                                
                                    break;
                                }
                            }

                            iPath++;
                            }                            
                        }
                        //found matched offerinstance and then updated the visibility of mediainstance
                        if (iPath == filternumber)
                        {
                          //Check visibility here.
                           xPath = ".//pf:OfferInstanceProviderTerm" + "[pf:offerInstanceId='" + offerInstance.ToString() + "']" + "/pf:visibilityStatusId";

                           XmlNodeList ndlist = XmlDocRoot.SelectNodes(xPath, XmlNmsMgr);
                           //v:visibilityStatusId for the offer
                           int visibilityStatusId = int.Parse(ndlist[0].InnerText);
                           
                            
                            xPath = ".//pf:OfferInstance" + "[pf:offerInstanceId='" + offerInstance.ToString() + "']" + "/pf:visibilityLevelId";
                            ndlist = XmlDocRoot.SelectNodes(xPath, XmlNmsMgr);
                            int visibilityLevelId = int.Parse(ndlist[0].InnerText);

                           if (editorial) {
                               if (visibilityStatusId >= 2 && visibilityStatusId <= 3) found = true;
                           }

                           /*if (mediaPresented && !editorial)
                           {
                               if (v >= 3 && v <= 4) found = true;
                           }*/

                           if (offerFilterLevel == 1 && visibilityStatusId == 4)
                           {
                               outputMessage += "\tvisibilityStatusId =4 (withdrawn offer)";
                               if (mediaPresented)
                               {
                                   outputMessage += "mediaId is Presented and set found offer equal to true";                               
                                   found = true;
                               }
                               else found = false; //not show withdrawn
                           }

                           if (!editorial)
                           {
                               if (visibilityStatusId == 3) found = true;
                           }

                           // Assume no offerId is presented here. 
                           if (offerFilterLevel !=1 && visibilityLevelId == 3 )
                           {
                               outputMessage += "\tvisibilityLevelId =3 (Never Enumberate";
                               found = false;
                           }


                           //founded one offerInstance satisfied the search criterion. 
                           Hashtable mediaInstanceTbl = (Hashtable)de.Value;
                           ArrayList keys = new ArrayList(mediaInstanceTbl.Keys);
                           foreach (Object key in keys)
                           {   //mediaInstance can be viewed
                                if ((int)mediaInstanceTbl[key] == 0 && found) mediaInstanceTbl[key] = 1;
                           }                                                           
                        }                      
                    }//loop for all offerinstances
                    if(found)
                        return true;
                }           
                return false;
            }
    }

    public class VideoObject : MediaObject
    {
        public ArrayList VideoInstanceList;//Element of CatVerify.VideoMediaInstance, only vidoe and movie have. This table is filled when loading 
        //the test data and be used to generated the list passed to verification. 
        public VideoObject ParentMedia;
        public ArrayList ChildList;
        public int TotalSeasonOffers;
        public int TotalSeriesOffer;
        public int VideoOfferCount;
        public int numSeasons;
        public int numEpisodes;

        public void ClearOfferCount() {

            TotalSeasonOffers = 0;
            TotalSeriesOffer = 0;
            VideoOfferCount = 0;
        }

        public void UpdateOfferCount(int totalOfferCount, Hashtable offerTbl, Hashtable processedOffers, Hashtable MediaObjectTable)
        {
            int videoCount=0;
            int seasonCount=0;
            int directOfferCount = 0;
            ClearOfferCount();
            if (totalOfferCount == 0) return;

            foreach (OfferObject oObj in (ArrayList)offerTbl[this.MediaId]) 
                if ((int)processedOffers[oObj] == 1)
                {
                    if (oObj.MediaMetaDataId != this.MediaId)
                    {
                    
                        if (this.MediaType == 8) seasonCount++;
                        if (this.MediaType == 9) videoCount++;
                        if (this.MediaType == 10)
                           if(((MediaObject)MediaObjectTable[oObj.MediaMetaDataId]).MediaType == 8)
                               directOfferCount++;//this is for the case when episode in season but has directly related to series.                           else 
                           else   
                                seasonCount++;
                        
                    }
                    else
                    {
                        directOfferCount++;
                    }
                }                
            


            switch (this.MediaType) { 
                case 8:
                case 4:
                    TotalSeriesOffer = 0;
                    TotalSeasonOffers = seasonCount;//# of offers associated with the season this episo is in, season pass
                    VideoOfferCount = directOfferCount;
                    break;
                case 2:
                    TotalSeasonOffers = 0;
                    TotalSeriesOffer = 0;
                    VideoOfferCount = directOfferCount;
                    return;
                case 9:
                    TotalSeriesOffer = 0;
                    TotalSeasonOffers = directOfferCount;//# of offers associated with the season, season pass
                    VideoOfferCount = videoCount;//# of offer associated with episodes in this season
                    break;
                case 10:
                    TotalSeriesOffer = 0;
                    TotalSeasonOffers = seasonCount;//# of offers associated with the seasons in this series
                    VideoOfferCount = directOfferCount;//## of offer associated with episodes in this series
                    break;
            }              
        }


        //seriese return season :6
        //season return episode : 8
        //serie return episode:7
        //return string of Id
       public  ArrayList GetChildMedia(int relatedType)
        {
            int childMType;
            if (MediaType == 10)
            {
                if (relatedType == 6) childMType = 9;
                else if (relatedType == 7) childMType = 8;
                else return null;
            }
            else
            {
                if (MediaType == 9 && relatedType == 8)
                    childMType = 8;
                else return null;

            }

            ArrayList lst = new ArrayList();

            foreach (MediaObject id in ChildList)
            {
                if (id.MediaType == childMType)
                {
                    if (!lst.Contains(id.MediaId.ToString().ToUpper()))
                        lst.Add(id.MediaId.ToString().ToUpper());
                }
            }
            return lst;
        }
           
        public void GetInstances()
        {

            XmlNode root = this.XmlDocRoot;
            VideoInstanceList = null;


            MediaObject mobj = (MediaObject)this;

            XmlNodeList lst = mobj.GetNodeListbyTagName("VideoInstance");
            if (lst != null)
            {
                VideoInstanceList = new ArrayList();
            }

            foreach (XmlNode nd in lst)
            {
                string instanceId = nd.SelectSingleNode("pf:videoMediaInstanceId", this.XmlNmsMgr).InnerText;
                VideoInstanceList.Add(new CatVerify.VideoMediaInstance((XmlElement)nd, instanceId));
            }
        }
        //call when only detail view level >3
        public void FilteronVideoInstance(Hashtable OfferTable, bool filteronVideo) {
           
            if (OutputTbl == null)
            {
                OutputTbl = new Hashtable();
            }
            ArrayList selectedIds = new ArrayList();

            if (VideoInstanceList == null) return;

            int index = -1;

            for (int i = 0; i < VideoInstanceList.Count; i++)
                selectedIds.Add(i);

            //looking at offertable[meidaId][offerinstance][mediainstance]!=1, remvoe the index by
            if (filteronVideo)
            {
                ArrayList offerList = (ArrayList)OfferTable[MediaId];
                foreach (OfferObject oObj in offerList)
                {

                    Hashtable oiTbl = oObj.OfferMediaInstanceTbl;


                    foreach (DictionaryEntry oInstanceDe in oiTbl)
                    {
                        Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;
                        index = 0;
                        foreach (CatVerify.VideoMediaInstance mInstance in VideoInstanceList)
                        {
                            if ((int)mediaIntanceTbl[mInstance.videoInstanceId] != 1)
                                selectedIds.Remove(index);
                            index++;
                        }
                    }
                }
            }

            OutputTbl.Add("videoinstances", selectedIds);
        }
    }

    public class MediaObject : DataObject
    {
        public int  MediaType;
        public MediaDataTypeEnum DataType;
        public Guid MediaId;
        public int TotalOfferCount;
        public string OrderString;
        public Hashtable OutputTbl;
        public Hashtable RelatedMediaTbl;
        public ArrayList ImageList; //Elemnet is type of CatVerify.Image
        public int [] Categories;
        public int [] ratingIds;
        public ArrayList ContentInstanceList;
        public ArrayList previewVideoInstance;
        
        /*public MediaObject GetRelatedMedia(int mediaType, Hashtable tbl) {

            foreach (DictionaryEntry de in RelatedMediaTbl)
            {
                if ((int)de.Value == mediaType)
                    return tbl[(Guid)de.Key];
            }
        } */
        public void GetImages(Hashtable mediaTbl)
        {
            if (this.RelatedMediaTbl == null) return;
            XmlNode root = this.XmlDocRoot;
            ImageList = null;

            foreach (DictionaryEntry de in this.RelatedMediaTbl)
            {
                Guid imageId = (Guid)de.Key;
                ArrayList relations = (ArrayList)de.Value;
                
                foreach (int relatedType in relations)
                if (relatedType == 15 || relatedType == 22)
                {
                    if (mediaTbl[imageId] == null) continue;
                    if (ImageList == null) ImageList = new ArrayList();
                    int mediaInstanceCount = ((MediaObject)mediaTbl[imageId]).GetNodesByXpath(".//pf:imageMediaInstanceId").Count;
                    XmlNodeList ndList = ((MediaObject)mediaTbl[imageId]).GetNodesByXpath(".//pf:MediaLocale//pf:lcid");
                    //string[] lcid = DataSource.GetStringArray(ndList);
                    for(int mi = 0; mi<mediaInstanceCount; mi++)
                        ImageList.Add(new CatVerify.Image(imageId, (MediaObject)mediaTbl[imageId], mi, relatedType));                   
                }
            }

            if (ImageList == null) return;
            string[] nameArr = new string[ImageList.Count];
             for (int i = 0; i < ImageList.Count; i++) {
                nameArr[i] = ((CatVerify.Image)(ImageList[i])).imageMediaId;
             }

             Array imgarr =  ImageList.ToArray(typeof(CatVerify.Image));
            Array.Sort(nameArr, imgarr);
            ImageList.Clear();
            ImageList.AddRange(imgarr);
        }


        public ArrayList  GetRelatedMedia(int mType)
        {
            if (this.RelatedMediaTbl == null) return null;
            ArrayList relatedList = new ArrayList();
            foreach (DictionaryEntry de in this.RelatedMediaTbl)
            {
                Guid relatedId = (Guid)de.Key;
                ArrayList relations = (ArrayList)de.Value;

                foreach (int relatedType in relations)
                    if (relatedType == mType)
                    {
                        relatedList.Add(relatedId.ToString());                        
                    }
            }
            return relatedList;
        }        


        public void FilterOnImages(ref Hashtable imgFilter)
        {
            if (OutputTbl == null) {
                OutputTbl = new Hashtable();
            }
            ArrayList selectedIds = new ArrayList();

            if (ImageList == null) return;
            
            
            int index = -1;
            ArrayList filter;

            for (int i = 0; i < ImageList.Count; i++)
                selectedIds.Add(i);

            foreach (CatVerify.Image img in ImageList) {
                index++;
                if (imgFilter["ImageTypeIds"] != null) {
                    filter = (ArrayList)imgFilter["ImageTypeIds"];
                    if (!filter.Contains(img.imageMediaType))
                    {
                        selectedIds.Remove(index);
                        continue;
                    }
                }

                if (imgFilter["ImageFormats"] != null)
                {
                    filter = (ArrayList)imgFilter["ImageFormats"];
                    if (!filter.Contains(img.format))
                    {
                        selectedIds.Remove(index);
                        continue;
                    }
                }

                if (imgFilter["ImageSizes"] != null)
                {
                    filter = (ArrayList)imgFilter["ImageSizes"];
                    if (!filter.Contains(img.size))
                    {
                        selectedIds.Remove(index);
                        continue;
                    }
                }
            }

            OutputTbl.Add("images", selectedIds);
            if (imgFilter.ContainsKey("ImageTypesId")) imgFilter.Remove("ImageTypesId");
            if (imgFilter.ContainsKey("ImageTypesId")) imgFilter.Remove("ImageFormats");
            if (imgFilter.ContainsKey("ImageTypesId")) imgFilter.Remove("ImageSize");
        }


        public XmlNode GetNodeByXpath(string xPath)
        {            
            return XmlDocRoot.SelectSingleNode(xPath, XmlNmsMgr);
        }

        public XmlNodeList GetNodesByXpath(string xPath)
        {
            return XmlDocRoot.SelectNodes(xPath, XmlNmsMgr);
        }

        public bool HasPreviewImage()
        {
            XmlNodeList list = XmlDocRoot.SelectNodes(".//pf:PreviewMediaInstance[pf:previewMediaInstanceTypeId='14']", XmlNmsMgr);
            if (list.Count != 0) return true;
            else return false;
        }


        public bool VerifyVisibility(Hashtable filterValues, bool mIdPresented)
        {
            try
            {
                if (!DataSource.IsVideoMedia(MediaType)) return true;

                int v = int.Parse(GetNodeListbyTagName("visibilityStatusId")[0].InnerText);


                if (filterValues.ContainsKey("OfferFilterLevel"))
                { //FindVideo
                    int offerFilterLevel =int.Parse((string)((ArrayList)filterValues["OfferFilterLevel"])[0]);
                    if (mIdPresented && v == 4 && offerFilterLevel == 1) return true;
                    //Editorial and mediaIds and offerFilterView = 1
                    if (filterValues.ContainsKey("MediaEditorial"))
                    {
                        if (v >= 2 && v <= 3) return true;
                    }

                    if (v == 3) return true;
                }
                else
                { //FindVideoOffer                

                    if (filterValues.ContainsKey("MediaEditorial"))
                    {
                        if (v >= 2 && v <= 3) return true;
                    }

                    else
                    {
                        if (v == 3) return true;
                    }
                }

            }catch{
                return false;
            }
            return false;
        }


        public bool VerifyMediaType(ArrayList mTypeList, ref string outputMessage)
        {
            if (mTypeList == null)
            {
                outputMessage += "FilterMatch: No MediaTypes present in the input filters \r\n";
                return true;
            }
            string[] mTypes = (string[])mTypeList.ToArray(typeof(string));
            foreach (string mType in mTypes)
            {
                if (this.MediaType == Convert.ToInt32(mType))
                {
                    outputMessage += String.Format("FilterMatch: The mediaId belongs to the following mediaType- {0} present in the filters \r\n", mType);
                    return true;
                }
            }
            outputMessage += String.Format("FILTERMISMATCH: Media belongs to the mediaType {0} which is NOT present in the filters", this.MediaType.ToString());
            return false;
        }

        public bool VerifyCategories(ArrayList categoryList, ref string outputMessage)
        {
            if (categoryList == null)
            {
                outputMessage += "FilterMatch: No MediaTypes present in the input filters \r\n";
                return true;
            }

            if (Categories == null) {
                if (DataType == MediaDataTypeEnum.VideoData || DataType == MediaDataTypeEnum.GameData)
                {
                    Categories = DataSource.GetIntArray("categoryId", XmlDocRoot);
                }
                else {
                    Categories = DataSource.GetIntArray("g:category", XmlDocRoot);
                }
            }
            
            if (Categories == null)  {
                outputMessage += "FILTERMISMATCH: No Category is presented for the media \r\n";
                return false;
            }
            foreach (int cat in Categories)
            {
                if (categoryList.Contains(cat.ToString()))
                {
                    outputMessage += String.Format("FilterMatch: The catId {0} present in the filters \r\n", cat);
                    return true;
                }
            }
            outputMessage += String.Format("FILTERMISMATCH: Category Filter failed");
            return false;
        }

    }

    public enum MediaDataTypeEnum
    {
        ImageData,
        GameData,
        VideoData,
        PodcastsData
    };

    public class GameTitleClass : MediaObject
    {
        public ArrayList AssociatedDownloadList;

        public void AddDownload(GameContentClass download) {

            if (AssociatedDownloadList == null) {

                AssociatedDownloadList = new ArrayList();
            }

            AssociatedDownloadList.Add(download);

        }
        
        
        public void GetInstances()
        {

            XmlNode root = this.XmlDocRoot;
            ContentInstanceList = null;


            MediaObject mobj = (MediaObject)this;

            XmlNodeList lst = mobj.GetNodeListbyTagName("gameContentInstance");

            //Assume g:gameContentInstance node only have 1 mediainstance under it.
            if (lst != null)
            {
                ContentInstanceList = new ArrayList();
            }

            foreach (XmlElement nd in lst)
            {
                string instanceId = nd.SelectSingleNode(".//pf:mediaInstanceId", this.XmlNmsMgr).InnerText;
                ContentInstanceList.Add(new CatVerify.GameMediaInstance((XmlElement)nd, instanceId, this.MediaId.ToString()));
            }
        }


        public void UpdateOfferCount(Hashtable offerTbl, Hashtable processedOffers)
        {
            ArrayList offersFound = new ArrayList();
            foreach (DictionaryEntry entry in processedOffers)
            {
                OfferObject oObj = (OfferObject)entry.Key;
                if ((int)entry.Value == 1 && !offersFound.Contains(oObj.OfferId))
                    offersFound.Add(oObj.OfferId);                
            }

            TotalOfferCount = offersFound.Count;
        }

        //call when only detail view level >3
        public void FilteronContentnstance(Hashtable OfferTable, bool filteronOffer)
        {

            if (OutputTbl == null)
            {
                OutputTbl = new Hashtable();
            }
            ArrayList selectedIds = new ArrayList();

            if (ContentInstanceList == null) return;

            int index;

            for (int i = 0; i < ContentInstanceList.Count; i++)
                selectedIds.Add(i);

            //looking at offertable[meidaId][offerinstance][mediainstance]!=1, remvoe the index by
            if (filteronOffer)
            {
                ArrayList offerList = (ArrayList)OfferTable[MediaId];
                foreach (OfferObject oObj in offerList)
                {

                    Hashtable oiTbl = oObj.OfferMediaInstanceTbl;

                    index = 0;
                    foreach (DictionaryEntry oInstanceDe in oiTbl)
                    {
                        Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;
                        
                        //foreach (CatVerify.GameMediaInstance mInstance in ContentInstanceList)
                        int k = index;
                        while (k < ContentInstanceList.Count){
                            CatVerify.GameMediaInstance mInstance = (CatVerify.GameMediaInstance)ContentInstanceList[k];
                            if (mediaIntanceTbl[mInstance.instanceId]!=null) {
                                if((int)mediaIntanceTbl[mInstance.instanceId] != 1)
                                    selectedIds.Remove(index);
                                index++;
                            }
                            k++;
                        }
                    }
                }
            }

            OutputTbl.Add("contentinstances", selectedIds);
        }
    }


    public class GameContentClass : MediaObject
    {
        public Guid TitleMediaId;
        private MediaObject titleMediaObject;


        public MediaObject TitleMediaObject
        {
            get
            {
                return titleMediaObject;
            }
            set
            {
                titleMediaObject = value;                
            }
        }

        public void SetRatingValues(){
            if (ratingIds == null && titleMediaObject != null)
            {
                if (titleMediaObject.ratingIds == null) {
                    titleMediaObject.ratingIds = DataSource.GetIntArray("ratingValueId", titleMediaObject.XmlDocRoot);
                }
                ratingIds = titleMediaObject.ratingIds;
            }
        }


        public void GetInstances()
        {

            XmlNode root = this.XmlDocRoot;
            ContentInstanceList = null;


            MediaObject mobj = (MediaObject)this;

            XmlNodeList lst = mobj.GetNodeListbyTagName("GameContentInstance");

            //Assume g:gameContentInstance node only have 1 mediainstance under it.
            if (lst != null)
            {
                ContentInstanceList = new ArrayList();
            }

            foreach (XmlElement nd in lst)
            {
                string instanceId = nd.SelectSingleNode(".//pf:gameContentInstanceId", this.XmlNmsMgr).InnerText;
                ContentInstanceList.Add(new CatVerify.GameMediaInstance((XmlElement)nd, instanceId, this.MediaId.ToString()));
            }
        }


        //call when only detail view level >3
        public void FilteronContentnstance(Hashtable OfferTable, bool filteronOffer)
        {

            if (OutputTbl == null)
            {
                OutputTbl = new Hashtable();
            }
            ArrayList selectedIds = new ArrayList();

            if (ContentInstanceList == null) return;

            int index = -1;


            //looking at offertable[meidaId][offerinstance][mediainstance]!=1, remvoe the index by
            if (filteronOffer)
            {
                ArrayList offerList = (ArrayList)OfferTable[MediaId];
                foreach (OfferObject oObj in offerList)
                {

                    Hashtable oiTbl = oObj.OfferMediaInstanceTbl;


                    foreach (DictionaryEntry oInstanceDe in oiTbl)
                    {
                        Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;
                        index = 0;
                        foreach (CatVerify.GameMediaInstance mInstance in ContentInstanceList)
                        {
                            if (mediaIntanceTbl[mInstance.instanceId]!=null && (int)mediaIntanceTbl[mInstance.instanceId] == 1)
                                selectedIds.Add(index);
                            index++;
                        }
                    }
                }
            }
            else
                for (int i = 0; i < ContentInstanceList.Count; i++)
                    selectedIds.Add(i);

            OutputTbl.Add("contentinstances", selectedIds);
        }


        public void UpdateOfferCount(Hashtable offerTbl, Hashtable processedOffers)
        {

            /*foreach (OfferObject oObj in (ArrayList)offerTbl[this.MediaId])
                if ((int)processedOffers[oObj] == 1)
                {
                    TotalOfferCount++;
                    this.TitleMediaObject.TotalOfferCount++;
                }       */
            ArrayList offersFound = new ArrayList();
            foreach (DictionaryEntry entry in processedOffers)
            {
                OfferObject oObj = (OfferObject)entry.Key;
                if ((int)entry.Value == 1 && !offersFound.Contains(oObj.OfferId))
                    offersFound.Add(oObj.OfferId);
            }

            TotalOfferCount = offersFound.Count;
        }
    }


    public class VideoDataClass : MediaObject
    {
    }
    public class PodcastClass : MediaObject
    {
        
    }

    public class OfferObject : DataObject
    {
        public Guid OfferId;
        public Guid MediaMetaDataId;
        public Hashtable OfferMediaInstanceTbl;//OfferMediaInstanceTbl[OfferInstanceId(string)][mediainstanceId]=1,-1,0

        public XmlNode GetNodeByXpath(string xpath)
        {
            return XmlDocRoot.SelectSingleNode(xpath, XmlNmsMgr);
        }

        public XmlNodeList GetNodesByXpath(string xpath)
        {
            return XmlDocRoot.SelectNodes(xpath, XmlNmsMgr);
        }

        public void ClearOfferMediaInstanceTbl(){
            foreach(DictionaryEntry de in OfferMediaInstanceTbl){
               string offerInstance = (string)de.Key;
               Hashtable mediaInstanceTbl = (Hashtable)de.Value;

               ArrayList keys = new ArrayList(mediaInstanceTbl.Keys);
               foreach ( Object key  in keys)
               {
                   mediaInstanceTbl[key] = 0;
                }
            }        
        }
    }


    public class OfferMediaObject
    {
        public MediaObject MediaObj;
        public OfferObject OfferObj;
        public Guid OfferId;
        public Hashtable OutputTbl;

        public void FilteronOfferInstance(Hashtable OfferTable)
        {

            if (OutputTbl == null)
            {
                OutputTbl = new Hashtable();
            }
  

            Hashtable oiTbl = OfferObj.OfferMediaInstanceTbl;
                    
            foreach (DictionaryEntry oInstanceDe in oiTbl)
            {
                  Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;

                  foreach (DictionaryEntry mInstanceDe in mediaIntanceTbl)
                  {
                    if ((int)mInstanceDe.Value >=1)
                     {
                         HashHelper<string, object>.AddEntry(OutputTbl, "offerInstances", new CatVerify.OfferInstance((string)oInstanceDe.Key, OfferObj));                         
                         break;
                      }                               
                  }
             }
            /*public string videoInstanceId;
            int isAcquirable;
            int isAdSupported;
            string videoDefinition;
            string videoEncoding;
            string aspectRatio;
            string resolution;
            ArrayList fileList;*/

             if (MediaObj.DataType == MediaDataTypeEnum.VideoData )
             {
                 foreach (DictionaryEntry oInstanceDe in oiTbl)
                 {
                     Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;

                     foreach (CatVerify.VideoMediaInstance mInstance in (((VideoObject)MediaObj)).VideoInstanceList)
                     {

                         if ((int)mediaIntanceTbl[mInstance.videoInstanceId] == 1)
                         {
                             
                             HashHelper<string, object>.AddEntry(OutputTbl, "mediainstances", new CatVerify.MediaInstance(mInstance, OfferObj, MediaObj.MediaId.ToString().ToUpper()));
                             //OutputTbl.Add("mediaInstances", new CatVerify.MediaInstance(mInstance, OfferObj));
                         }
                     }
                 }
             }

             if (MediaObj.DataType == MediaDataTypeEnum.GameData) {
                 foreach (DictionaryEntry oInstanceDe in oiTbl)
                 {
                     Hashtable mediaIntanceTbl = (Hashtable)oInstanceDe.Value;

                     foreach (CatVerify.GameMediaInstance mInstance in MediaObj.ContentInstanceList)
                     {

                         if (mediaIntanceTbl[mInstance.instanceId]!=null && (int)mediaIntanceTbl[mInstance.instanceId] == 1)
                         {
                             mInstance.UpdateOfferPart(OfferObj, MediaObj.MediaId.ToString().ToUpper());
                             HashHelper<string, object>.AddEntry(OutputTbl, "contentinstances", mInstance);
                             //OutputTbl.Add("mediaInstances", new CatVerify.MediaInstance(mInstance, OfferObj));
                         }
                     }
                 }             
             }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\WebInterface.cs ===
using System;
using System.Web.Services;

namespace BillingEmulatorV2
{
	public struct StatusResponse
	{
		public int	CachedUsers;
		public PassThroughModes	PassThroughMode;
		public bool LogTraffic;
		public bool	DumpUsers;
		public int	QueueLength;
		public string Message;
	}

	/// <summary>
	/// Summary description for WebInterface.
	/// </summary>
	[WebService(Description="Web service interface to the emulator controls")]
	public class WebInterface : System.Web.Services.WebService
	{
		static public int IDontWantToDie=0;

		[WebMethod(Description="Get the status of the emulator")]
		public StatusResponse GetStatus()
		{
			StatusResponse sr=new StatusResponse();
			sr.Message="Hello world";
			sr.CachedUsers=Global.GetUserCount();
			sr.PassThroughMode=Global.PassThroughMode;
			sr.DumpUsers=Global.DumpUserInfo;
			sr.LogTraffic=Global.LogTraffic;
			sr.QueueLength=Global.Xcbk.QueueLength;
			IDontWantToDie++;
			return sr;
		}

		[WebMethod(Description="Get cached user information by user name")]
		public User GetUserInfo(string userName)
		{
			return Global.GetFromCache(userName);
		}

		[WebMethod(Description="Get a listing of all cached users")]
		public User[] GetUsers()
		{
			return Global.GetUsers();
		}

		[WebMethod(Description="Set the pass through mode of the emulator")]
		public PassThroughModes	SetPassthroughMode(PassThroughModes PassThroughMode)
		{
			Global.PassThroughMode=PassThroughMode;
			return Global.PassThroughMode;
		}

		[WebMethod(Description="Toggle the logging of traffic")]
		public bool LogTraffic(bool LogTraffic)
		{
			Global.LogTraffic=LogTraffic;
			return Global.LogTraffic;
		}

		[WebMethod(Description="Toggle the dumping of user information")]
		public bool DumpUserInfo(bool DumpUserInfo)
		{
			Global.DumpUserInfo=DumpUserInfo;
			return Global.DumpUserInfo;
		}

		[WebMethod(Description="Delete the log file used for logging")]
		public void DeleteOutputFile()
		{
			Global.FileClose();
			System.Threading.Thread.Sleep(3000);
			Global.FileOpen();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\User.cs ===
using System;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for User.
	/// </summary>
	public class User
	{
		public string	FirstName;
		public string	LastName;
		public string	LastFour;
		public string	ExpirationDate;
		public string	PhonePrefix;
		public string	PhoneNumber;
		public string	PhoneExtension;
		public string	CountryCode;
		public string	Street1;
		public string	Street2;
		public string	Street3;
		public string	City;
		public string	District;
		public string	State;
		public string	PostalCode;
		public string	Locale;
		public string	Currency;
		public string	GamerTag;

		public string	AccountHolderName;
		public int		RequesterLow;
		public int		RequesterHigh;
		public long		RequesterId;

		public string	CurrentBoid;	// (offeringGuid) Guid, as in 5BABFDD3-4151-41C3-B674-14302BCCC128
		public string	RenewalBoid;

		public string	CurrentSvcInstId;
		public string	NextSvcInstId;

		public string	Key;			// just a text version of RequesterId

		public void		SetRequester(int hi, int lo)
		{
			RequesterHigh=hi;
			RequesterLow=lo;
			RequesterId=hi;
			RequesterId<<=32;
			RequesterId+=lo;
			Key=Convert.ToString(RequesterId,10);
		}

		public void		Dump()
		{
			if (!Global.DumpUserInfo)
				return;

			Global.WriteLine("GamerTag         : "+GamerTag);
			Global.WriteLine("Key              : "+Key);
			Global.WriteLine("Requester Hi     : "+RequesterHigh);
			Global.WriteLine("Requester Low    : "+RequesterLow);
			Global.WriteLine("Requester        : "+RequesterId);
			Global.WriteLine("Street1          : "+Street1);
			Global.WriteLine("Street2          : "+Street2);
			Global.WriteLine("Street3          : "+Street3);
			Global.WriteLine("Postal           : "+PostalCode);
			Global.WriteLine("PhoneNumber      : "+PhoneNumber);
			Global.WriteLine("Locale/Cur       : "+Locale+" / "+Currency);
			Global.WriteLine("Current sub boid : "+CurrentBoid);
			Global.WriteLine("Current svc inst : "+CurrentSvcInstId);
			Global.WriteLine("Renew sub boid   : "+RenewalBoid);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\DataTableClass.cs ===
using System;
using System.Collections;
using System.Text;

namespace Catalog.DynamicOutput
{
    public abstract class DataTableClass
    {
        //Hashtable to maintain all the media meta-data objects with Media ID as the key
        public Hashtable DataObjectMainTable = new Hashtable();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\XmlParser.cs ===
using System;
using System.Xml;

namespace BillingEmulatorV2
{
	/// <summary>
	/// Summary description for XmlParser.
	/// </summary>
	public class XmlParser
	{
		XmlDocument			doc=new XmlDocument();
		XmlNamespaceManager nm;
		XmlNode				requestRoot;

		public void Load(string quasiXml)
		{
			doc.LoadXml(quasiXml);

			nm = new XmlNamespaceManager(doc.NameTable);
			nm.AddNamespace("soap", "http://schemas.xmlsoap.org/soap/envelope/");
			nm.AddNamespace("q1", "http://tempuri.org/message/");
			nm.AddNamespace("myns", "urn:schemas-microsoft-com:billing-data");

			requestRoot=doc.SelectSingleNode("/soap:Envelope/soap:Body",nm);
			if (requestRoot!=null)
				requestRoot=requestRoot.ChildNodes[0];
			if (requestRoot==null)
				requestRoot=doc;
		}

		public string GetNode(string path)
		{
			XmlNode node=requestRoot.SelectSingleNode(path, nm);

			if (node==null)
				return String.Empty;
			return node.InnerText;
		}

		public string GetName()
		{
			return GetNode("/soap:Envelope/soap:Body/q1:PurchaseOffering/bstrSubscriptionName");
		}

		public string AsXml()
		{
			return requestRoot.InnerXml;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\MediaOfferTableManager.cs ===
using System;
using System.Collections.Generic;
using System.Collections;
using System.Xml;
using System.Text;
using Catalog.Verifier;



namespace Catalog.DynamicOutput
{
    public enum StoreTypeEnum
    {
        GameData,
        VideoData
    };
    public enum XmlFileType
    {
        MediaMetaData,
        OfferData,
        EMSCatalogData,
        UNKNOWNData
    };
    public class MediaOfferTableManager
    {
        public MediaTableClass MediaTable;
        public OfferTableClass OfferTable;
        public string TableGenerationMessages;

        public MediaOfferTableManager()
        {
            MediaTable = new MediaTableClass();
            OfferTable = new OfferTableClass();
            TableGenerationMessages = null;
            OfferTable.MediaObjectTable = MediaTable.DataObjectMainTable;
        }

        public void AddTableGenerationMessage(string val)
        {
            if (TableGenerationMessages == null)
                TableGenerationMessages = "";
            TableGenerationMessages += "[WRN]" + val + "\r\n";
        }

        public XmlFileType GetFileType(string fileName, XmlElement xElm)
        {
            if (xElm.Name.Equals("EMSCatalog")) return XmlFileType.EMSCatalogData;
            if (fileName.Contains("offer"))
                return XmlFileType.OfferData;
            if (xElm.Name.Contains("GameData") || xElm.Name.Equals("PodCast"))
                return XmlFileType.MediaMetaData;
            else return XmlFileType.UNKNOWNData;
        }

        public void LoadFiles(string xmlFilePath, out string msg)
        {
            System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(xmlFilePath);
            if (di == null)
                throw new System.IO.DirectoryNotFoundException();
            System.IO.FileInfo[] files = di.GetFiles("*.xml");
            string[] fileNames = new string[files.Length];
            int i = 0;
            foreach (System.IO.FileInfo file in files)
            {
                fileNames[i] = file.FullName;
                i++;
            }
            ArrayList xmlFiles = ArrayList.Adapter(fileNames);
            GenerateTable(xmlFiles);
            msg = TableGenerationMessages;
        }
        
        //
        String [] ComplexObjects = new String [] {
          "VideoSeason.xsd.Data",
          "VideoSeries.xsd.Data",
          "Video.xsd.Data",
          "Image.xsd.Data",   
          "Offer.xsd.Data",
          "ArcadeGameFullVersion",//has content
          "ArcadeGameTrialVersion",//has content
          "GenericConsumableContent",
          "XboxGame", //xbox1 game, no content
          "GenericGameContent",
          "ThemePack",
          "PicturePack",
          "GameTitle",//360 game, no content
           "GameDemo"//has content

         };
        void AddObjectsFromEmsSchema(XmlElement root) {
            //XmlNode emsRoot = root.SelectNodes("/", CatVerify.EmsnsManager)[0].LastChild;

            //NameTable nt = new NameTable();
            //XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);

            // Add prefix/namespace pairs to the XmlNamespaceManager.
            //nsmgr.AddNamespace("", emsRoot.NamespaceURI); //Adds a default namespace.

                foreach (string complexObjTag in ComplexObjects)
                {
                    try {
                        XmlNodeList list = root.SelectNodes("//pf:" + complexObjTag, CatVerify.EmsnsManager);

                        foreach (XmlNode nd in list)
                        {
                           
                            XmlElement element = (XmlElement)nd;
                            if (!complexObjTag.Contains("Offer"))
                                MediaTable.AddMediaObject(element);
                            else
                                OfferTable.AddOfferObject(element);
                        }
                    }
                    catch (Exception ex)
                    {
                            AddTableGenerationMessage(string.Format("complexObjTag: {0} threw the following exception {1} at {2}" , complexObjTag , ex.Message, ex.StackTrace));
                            continue;
                     }
                }     
       }


        public void GenerateTable(ArrayList xmlFiles)
        {
            //iterate through all the xmlfiles provided and load them into the hash table.
            foreach (string xmlFile in xmlFiles)
            {
                XmlElement docElem = null;



               // if (!xmlFile.Contains("esp_video_TVVideoSeries.xml")) continue;
                //based on filename to check the file Type                
                try
                {
                    AddTableGenerationMessage("Load File:" + xmlFile );
                    
                    docElem = RecoverFromXml.RetrieveDocumentRootNode(xmlFile);
                }
                catch (Exception ex)
                {
                    AddTableGenerationMessage(string.Format("File: {0} threw the following exception {1}" + xmlFile + ex.Message));
                    continue;
                }

                XmlFileType fileType = GetFileType(xmlFile, docElem);

                if (fileType == XmlFileType.UNKNOWNData) continue;

                if (fileType == XmlFileType.EMSCatalogData)
                {
                    AddObjectsFromEmsSchema(docElem);
                    continue;
                }
                
                if (fileType == XmlFileType.MediaMetaData)
                {
                    MediaTable.AddMediaObject(docElem);
                }
/*
                else
                {
                    OfferTable.AddOfferObject(docElem);
                }*/
            }

            //after everthing is loaded, 
            //update offer table for indirected relationship: like series which also has offer
            //process video related
            /*SeriesToSeason:6
            SeriesToEpisode:7
            SeasonToEpisode:8*/


            ////proecess season related, season first, src is season, parent is series
            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject srcObj = (MediaObject)mediaDe.Value;
                if (srcObj.RelatedMediaTbl == null) continue;
                foreach (DictionaryEntry relatedDe in srcObj.RelatedMediaTbl)
                {
                    if (srcObj.MediaType != 9 /*season*/) continue;
                    foreach (int relatedType in (ArrayList)relatedDe.Value)
                    {

                        if (relatedType == 6)
                        {
                            Guid relatedId = (Guid)relatedDe.Key;
                            //copy season offers to series
                            OfferTable.CopyOffersList(srcObj.MediaId, relatedId);
                            VideoObject relatedObj = (VideoObject)MediaTable.DataObjectMainTable[relatedId];
                            ((VideoObject)srcObj).ParentMedia = relatedObj;
                            if (relatedObj.ChildList == null) relatedObj.ChildList = new ArrayList();
                            if(relatedObj.ChildList.Contains(srcObj))
                                relatedObj.ChildList.Add(srcObj);
                        }
                    }
                }
            }


            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject srcObj = (MediaObject)mediaDe.Value;

                if (srcObj is VideoObject) {
                    VideoObject vo = (VideoObject)srcObj;
                    if (vo.VideoInstanceList != null && vo.VideoInstanceList.Count > 0) {
                        foreach (CatVerify.VideoMediaInstance instance in vo.VideoInstanceList)
                        {
                            if (instance.isPreview==1) {
                                foreach (string id in instance.relatedMediaList)
                                    if (MediaTable.DataObjectMainTable[new Guid(id)] != null)
                                    {
                                        if (((MediaObject)MediaTable.DataObjectMainTable[new Guid(id)]).previewVideoInstance == null) {
                                            ((MediaObject)MediaTable.DataObjectMainTable[new Guid(id)]).previewVideoInstance = new ArrayList();
                                        }
                                        ((MediaObject)MediaTable.DataObjectMainTable[new Guid(id)]).previewVideoInstance.Add(instance);
                                    }
                            }
                        }
                    }
                }


                if (srcObj.RelatedMediaTbl == null) continue;
                foreach (DictionaryEntry relatedDe in srcObj.RelatedMediaTbl)
                {
                    if (srcObj.MediaType != 9 /*season*/) continue;
                    foreach (int relatedType in (ArrayList)relatedDe.Value)
                    {

                        if (relatedType == 6)
                        {
                            Guid relatedId = (Guid)relatedDe.Key;
                            //copy season offers to series
                            OfferTable.CopyOffersList(srcObj.MediaId, relatedId);
                            VideoObject relatedObj = (VideoObject)MediaTable.DataObjectMainTable[relatedId];
                            ((VideoObject)srcObj).ParentMedia = relatedObj;
                            if (relatedObj.ChildList == null) relatedObj.ChildList = new ArrayList();
                            if(!relatedObj.ChildList.Contains(srcObj))
                                relatedObj.ChildList.Add(srcObj);
                        }
                    }
                }
            }
            //process episode, src is episode, parent is season or series
            //episode should aslo have the offer count for season.
            //season and series should have the offer count for episodes.
            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject srcObj = (MediaObject)mediaDe.Value;
                if (srcObj.MediaType != 8/*Episode*/) continue;
                if (srcObj.RelatedMediaTbl == null) continue;
                foreach (DictionaryEntry relatedDe in srcObj.RelatedMediaTbl)
                {
                    foreach (int relatedType in (ArrayList)relatedDe.Value)
                    {
                        if (relatedType == 7 || relatedType == 8)
                        {
                            Guid relatedId = (Guid)relatedDe.Key;
                            //copy episode offer to season and series
                            OfferTable.CopyOffersList(srcObj.MediaId, relatedId);
                            //episode should aslo have the offer count for season.
                            if(relatedType == 8) //episode to season
                                OfferTable.CopyOffersList(relatedId, srcObj.MediaId);
                            //src is episode, relatedId is season or series
                            VideoObject relatedObj = (VideoObject)MediaTable.DataObjectMainTable[relatedId];
                            //src.parent is relatedmedia
                            VideoObject srcVideoObj = (VideoObject)srcObj;
                            //season alway as direct parenet if there is series also related to the media
                            if (srcVideoObj.ParentMedia == null || srcVideoObj.ParentMedia.MediaType == 10) {
                                srcVideoObj.ParentMedia = relatedObj;
                            }

                            if (relatedObj.ChildList == null) relatedObj.ChildList = new ArrayList();
                            if(!relatedObj.ChildList.Contains(srcObj))
                                relatedObj.ChildList.Add(srcObj);
                        }
                    }
                }
            }

            //populate category and media relationship here
            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject mediaObj = (MediaObject)mediaDe.Value;

                if (mediaObj.MediaId == new Guid("00010000-0001-0001-0000-0000000C1005"))
                    mediaObj = (MediaObject)mediaDe.Value;

                if (mediaObj.DataType == MediaDataTypeEnum.GameData) {

                        if (mediaObj is GameContentClass)
                        {
                            GameContentClass obj = (GameContentClass) mediaObj;
                            
                            if (obj.TitleMediaObject == null)
                            {
                                obj.TitleMediaObject = (MediaObject)MediaTable.DataObjectMainTable[obj.TitleMediaId];
                            }


                            ((GameTitleClass)obj.TitleMediaObject).AddDownload(obj);
                            //get rating from title media
                            obj.SetRatingValues();
                            //get category from titel media
                            obj.Categories = DataSource.GetIntArray("categoryId", obj.TitleMediaObject.XmlDocRoot);
                            
                        }                        
                }
            }

            //populate category and media relationship here
            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject mediaObj = (MediaObject)mediaDe.Value;
                

                if (mediaObj.DataType == MediaDataTypeEnum.GameData)
                {
                    
                    if (mediaObj is GameTitleClass)
                        if (((GameTitleClass)mediaObj).AssociatedDownloadList != null)
                        {
                            if (mediaObj.MediaId == new Guid("00010000-0023-0001-0000-0000000C2000"))
                            {

                                foreach (GameContentClass download in ((GameTitleClass)mediaObj).AssociatedDownloadList)
                                    OfferTable.CopyOffersList(download.MediaId, mediaObj.MediaId);
                            }
                            else
                                foreach (GameContentClass download in ((GameTitleClass)mediaObj).AssociatedDownloadList)
                                    OfferTable.CopyOffersList(download.MediaId, mediaObj.MediaId);

                        }
                }
            }
                      
            //Add image list
            foreach (DictionaryEntry mediaDe in MediaTable.DataObjectMainTable)
            {
                MediaObject mObj = (MediaObject)mediaDe.Value;
                mObj.GetImages(MediaTable.DataObjectMainTable);
            }


            //Populate the media objects with TotalOfferCount in the media table 
            IDictionaryEnumerator mTableEnumerator = MediaTable.DataObjectMainTable.GetEnumerator();

            while (mTableEnumerator.MoveNext())
            {
                if (OfferTable.DataObjectMainTable.ContainsKey(mTableEnumerator.Key))
                    ((MediaObject)mTableEnumerator.Value).TotalOfferCount = OfferTable.GetOfferCount((System.Guid)mTableEnumerator.Key);
                else
                    ((MediaObject)mTableEnumerator.Value).TotalOfferCount = 0;
            }
        }

        public MediaObject GetMediaObject(Guid mediaId) {
            return (MediaObject) MediaTable.DataObjectMainTable[mediaId];
        }

        public ArrayList ReturnExpectedOutput(Hashtable TestCaseValues, out int totalItems)
        {
            Message msg;
            return ReturnExpectedOutput(TestCaseValues, out totalItems, out msg,  false);
        }

        //Basic search where the Find Query input is provided in xml tag format corresponding input string.
        public ArrayList ReturnExpectedOutput(Hashtable TestCaseValues, out int totalItems, out Message msg, bool isOfferApi)
        {
            Hashtable absentMediaSearchTags = new Hashtable();            
            Hashtable absentOfferSearchTags = new Hashtable();
            msg = new Message();
            ArrayList mediaList = MediaTable.GetExpectedMediaList(TestCaseValues, ref absentMediaSearchTags, msg);
            ArrayList newList = new ArrayList();
            totalItems = 0;

            //Clear OUtputTbl and then do image filter
            foreach (MediaObject m in mediaList) {
                m.OutputTbl = null;
                m.FilterOnImages(ref absentMediaSearchTags);                
                if(m.previewVideoInstance!=null && (m.previewVideoInstance.Count>0)) {
                    m.OutputTbl.Add("previewvideoinstances",m.previewVideoInstance);
                }
            }

            //if catalog query api expects media list
            if (!isOfferApi)
            {
                newList = OfferTable.GetExpectedMediaList(TestCaseValues, mediaList, ref absentOfferSearchTags, ref totalItems, msg, MediaTable );        
            }
            // the query api expects offerlist
            else
            {
                ArrayList tmpList = new ArrayList();
                tmpList = OfferTable.GetExpectedOfferList(TestCaseValues, mediaList, ref absentOfferSearchTags, ref totalItems, msg);
                //build arraylist of OfferMediaObject
                if (tmpList == null) return newList;
                IEnumerator tmpEnum = tmpList.GetEnumerator();
                while (tmpEnum.MoveNext())
                {
                    OfferMediaObject omObj = new OfferMediaObject();
                    omObj.OfferObj = (OfferObject) tmpEnum.Current;
                    omObj.OfferId = omObj.OfferObj.OfferId;
                    omObj.MediaObj = (MediaObject) MediaTable.DataObjectMainTable[omObj.OfferObj.MediaMetaDataId];
                    newList.Add(omObj);
                    //copy output from mediaobject
                    if (omObj.MediaObj.OutputTbl != null) {
                        omObj.OutputTbl = omObj.MediaObj.OutputTbl;
                    }
                }
            }

            //update for preview video 



            
            return newList;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\BillingEmulatorV2\Web References\Xcbk\Reference.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace BillingEmulatorV2.Xcbk {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ISvcProviderSoap", Namespace="urn:schemas-xbox-com:billing-data")]
    public class ISvcProvider : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ISvcProvider() {
            //this.Url = "https://192.168.86.201/xcbk/sprov.asmx";
			this.Url = "https://10.20.1.1:13000/xcbk/sprov.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/ProvisionService", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string ProvisionService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, string bstrServiceInstanceFriendlyName, string bstrBaseServiceInstanceId, string bstrDetails) {
            object[] results = this.Invoke("ProvisionService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId,
                        bstrServiceInstanceFriendlyName,
                        bstrBaseServiceInstanceId,
                        bstrDetails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProvisionService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, string bstrServiceInstanceFriendlyName, string bstrBaseServiceInstanceId, string bstrDetails, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ProvisionService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId,
                        bstrServiceInstanceFriendlyName,
                        bstrBaseServiceInstanceId,
                        bstrDetails}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndProvisionService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/DeprovisionService", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string DeprovisionService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId) {
            object[] results = this.Invoke("DeprovisionService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeprovisionService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeprovisionService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeprovisionService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/EnableService", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string EnableService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId) {
            object[] results = this.Invoke("EnableService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnableService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/DisableService", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string DisableService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, string bstrDetails) {
            object[] results = this.Invoke("DisableService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId,
                        bstrDetails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableService(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrServiceInstanceId, string bstrDetails, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableService", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrServiceInstanceId,
                        bstrDetails}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDisableService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/ValidateProvisioningData", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDetailsResponse")]
        public string ValidateProvisioningData(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrDetails, out string pbstrResponseXML) {
            object[] results = this.Invoke("ValidateProvisioningData", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrDetails});
            pbstrResponseXML = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateProvisioningData(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, string bstrDetails, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateProvisioningData", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId,
                        bstrDetails}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndValidateProvisioningData(System.IAsyncResult asyncResult, out string pbstrResponseXML) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrResponseXML = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/CheckProvisioningStatus", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string CheckProvisioningStatus(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId) {
            object[] results = this.Invoke("CheckProvisioningStatus", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckProvisioningStatus(int lPUIDHigh, int lPUIDLow, string bstrServiceComponentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckProvisioningStatus", new object[] {
                        lPUIDHigh,
                        lPUIDLow,
                        bstrServiceComponentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckProvisioningStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\RecoverFromXml.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Reflection;
using System.IO;

namespace Catalog.DynamicOutput
{
    public class RecoverFromXml
    {       
        public static XmlElement RetrieveDocumentRootNode(string xmlFile)
        {
            XmlDocument xmlDoc = new XmlDocument();
            if (!File.Exists(xmlFile))
            {
                throw new FileNotFoundException("File Not Found", xmlFile);
            }            
            xmlDoc.Load(xmlFile);
            return xmlDoc.DocumentElement;
        }
       
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\InjectionFiles\Program.cs ===
using System;
using System.Collections;
using System.Text;
using System.IO;

namespace InjectionFiles
{
    class Program

    {
        public struct Image
        {
            string url;
            int width;
            int height;
            string format;

            public Image(int w, int h)
            {
                url = "test";
                width = w;
                height = h;
                format = "test";
            }            
        }
        static void Main()
        {
            ArrayList contentList, gameList, offerList, demoList;

            Image a = new Image(1, 2);
            Image b = new Image(1, 2);
            object c = a;
            object d = b;
            if(c.Equals(d)) ;

            contentList = new ArrayList();
            gameList = new ArrayList();
            offerList = new ArrayList();
            demoList = new ArrayList();

            string path = Directory.GetCurrentDirectory();

            string [] fileNames = Directory.GetFiles(path);

            foreach (string fileStrName in fileNames) {
                string fileStr = fileStrName.ToLower();               
                if (fileStr.Contains(".offer."))
                {
                    offerList.Add(fileStrName);
                    continue;
                }


                if (fileStr.Contains(".game.") || fileStr.Contains(".360game.")                    
                    || fileStr.Contains(".arcade.")
                    || fileStr.Contains(".xbox1game.")
                    )
                {
                    gameList.Add(fileStrName);
                    continue;
                }
                
                if (fileStr.Contains(".360demo.")                    
                    || fileStr.Contains(".arcadedemo.")                 
                    )

                {
                    demoList.Add(fileStrName);
                    continue;
                }

                if (fileStr.Contains(".360theme.") || fileStr.Contains(".content.") || fileStr.Contains(".gametile.")) contentList.Add(fileStrName);
            }
            gameList.AddRange(demoList);
            gameList.AddRange(contentList);
            gameList.AddRange(offerList);
            TextWriter textWriter = new StreamWriter("propall.cmd");

            foreach (string s in gameList) {
                textWriter.WriteLine("gameprop.exe " + s);
            }
            textWriter.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\MediaTableClass.cs ===
using System;
using System.Collections;
using System.Text;
using System.Xml;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Data;

using Catalog;
using Catalog.Verifier;

namespace Catalog.DynamicOutput
{    
    public class MediaTableClass : DataTableClass
    {

        private ArrayList SortMedia( string locale, ref Hashtable absentTags, ArrayList mediaList)
        {
            ArrayList retList = new ArrayList();
            if (absentTags["OrderBy"] != null)
            {
                MediaObject[] mObjs = (MediaObject[])mediaList.ToArray(typeof(MediaObject));
                bool bSorted = false;
                switch ((OrderMediaBy) Enum.Parse( typeof(OrderMediaBy) , ((ArrayList)absentTags["OrderBy"])[0].ToString() ) )
                { 
                    case OrderMediaBy.Name:
                        {
                            //create a string array of names for the locale passed
                            string[] nameArr = new string[mObjs.Length];
                            for (int i = 0; i < mObjs.Length; i++)
                            {
                                switch (mObjs[i].DataType)
                                {
                                    case MediaDataTypeEnum.PodcastsData:
                                        nameArr[i] = mObjs[i].GetNodeByXpath("//titleSort").InnerText;
                                        break;
                                    //case MediaDataTypeEnum.GameData:                                        
                                        //nameArr[i] = mObjs[i].GetNodeByXpath(String.Format("//g:mediaInfo/g:mediaLocaleInfo[g:lcid='{0}']/g:titleSort", locale)).InnerText;
                                      //  break;
                                    case MediaDataTypeEnum.VideoData:
                                    case MediaDataTypeEnum.GameData:                                        
                                        //int lcidmap = int.Parse(mObjs[i].GetNodeByXpath(String.Format("//pf:MediaLocaleMap[pf:lcid='{0}']/pf:lcidMap", locale)));
                                        try
                                        {
                                            nameArr[i] = mObjs[i].GetNodeByXpath(String.Format(".//pf:MediaLocale[pf:lcid='{0}']/pf:title", locale)).InnerText;
                                        }
                                        catch
                                        {
                                            nameArr[i] = "";
                                        }
                                        break;
                                }
                                
                                    
                                mObjs[i].OrderString = nameArr[i].ToString();
                            }
                            Array.Sort(nameArr, mObjs);
                            bSorted = true;
                            break;
                        }
                    case OrderMediaBy.ReleaseDate:
                        {
                            DateTime[] releaseDate = new DateTime[mObjs.Length];
                            for (int i = 0; i < mObjs.Length; i++)
                            {
                                if (mObjs[i].DataType == MediaDataTypeEnum.PodcastsData)
                                    releaseDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(String.Format(".//visibilityDate")).InnerText);
                                else 
                                    //if(mObjs[i].DataType == MediaDataTypeEnum.VideoData)
                                        releaseDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(String.Format(".//pf:originalReleaseDate")).InnerText);
                                    //else
                                    //    releaseDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(String.Format("//g:mediaInfo/g:displayOriginalReleaseDate", locale)).InnerText);
                                mObjs[i].OrderString = releaseDate[i].ToLongDateString();
                            }
                            Array.Sort(releaseDate, mObjs);
                            bSorted = true;
                            break;
                        }
                    case OrderMediaBy.AvailabilityDate:
                        {
                            DateTime[] availabilityDate = new DateTime[mObjs.Length];
                            for (int i = 0; i < mObjs.Length; i++)
                            {
                                if (mObjs[i].DataType == MediaDataTypeEnum.PodcastsData)
                                    availabilityDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(".//visibilityDate").InnerText);
                                else
                                //if (mObjs[i].DataType == MediaDataTypeEnum.VideoData)
                                    availabilityDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(".//pf:visibilityDate").InnerText);
                                //else
                                  //  availabilityDate[i] = Convert.ToDateTime(mObjs[i].GetNodeByXpath(String.Format("//g:mediaInfo/g:visibilityDate", locale)).InnerText);
                                mObjs[i].OrderString = availabilityDate[i].ToLongDateString();
                            }
                            Array.Sort(availabilityDate, mObjs);
                            bSorted = true;
                            break;
                        }

                    case OrderMediaBy.DownloadCount:
                        UInt32[] downloadCount = new UInt32[mObjs.Length];
                        for (int i = 0; i < mObjs.Length; i++)
                        {
                            if (mObjs[i].DataType == MediaDataTypeEnum.PodcastsData)
                                downloadCount[i] = Convert.ToUInt32(mObjs[i].GetNodeByXpath(".//downloadCount").InnerText);
                            mObjs[i].OrderString = downloadCount[i].ToString();
                        }
                        Array.Sort(downloadCount, mObjs);
                        bSorted = true;
                        break;

                    case OrderMediaBy.SortOrder:
                        UInt32[] sortOrderCount = new UInt32[mObjs.Length];
                        for (int i = 0; i < mObjs.Length; i++)
                        {
                            if (mObjs[i].DataType == MediaDataTypeEnum.PodcastsData)
                                sortOrderCount[i] = Convert.ToUInt32(mObjs[i].GetNodeByXpath("//sortOrder").InnerText);
                            mObjs[i].OrderString = sortOrderCount[i].ToString();
                        }
                        Array.Sort(sortOrderCount, mObjs);
                        bSorted = true;
                        break;
                }
                if ((OrderDirection)Enum.Parse(typeof(OrderDirection), ((ArrayList)absentTags["OrderDirection"])[0].ToString()) == OrderDirection.Descending)
                    Array.Reverse(mObjs);

                if (bSorted)
                {
                    absentTags.Remove("OrderBy");
                    absentTags.Remove("OrderDirection");
                }
                retList = ArrayList.Adapter(mObjs);
            }
            else
                retList = mediaList;
            return retList;
        }


/*
         public enum MediaTypeEnum
    {
        Xbox360Game = 1,
        Movie = 2,
        TVShow = 3,
        MusicVideo = 4,
        ArcadeDemo = 5,
        ViralVideo = 7,
        TVEpisode = 8,
        TVSeason = 9,
        TVSeries = 10,
        VideoPreview = 11,
        Poster = 12,
        Podcast = 13,
        Image = 14,
        BoxArt = 15,
        ArtistPicture = 16,
        ScreenShot = 17,
        InGameContent = 18,
        GameDemo = 19,
        Xbox360Theme = 20,
        Xbox1Game = 21,
        GamerTile = 22,
        ArcadeGame = 23,
        InGameConsumable = 24,
        Track = 25,
        Album = 26,
        AlbumDisc = 27,
        AlbumArt = 28,
        Music = 29,
        GameVideo = 30,
        BackgroundArt = 31,
        Playlist = 32,

    };*/
        public void AddMediaObject(XmlElement docNode)
        {                
             
            MediaObject mObject;

            if (DataSource.IsEMSData(docNode))
            {
                int mediaType = int.Parse(docNode.GetElementsByTagName("mediaTypeId")[0].InnerText);

                switch ((Catalog.MediaTypeEnum)mediaType)
                {
                    case Catalog.MediaTypeEnum.Movie:
                    case Catalog.MediaTypeEnum.TVEpisode:
                    case Catalog.MediaTypeEnum.TVSeason:
                    case Catalog.MediaTypeEnum.TVSeries:
                    case Catalog.MediaTypeEnum.MusicVideo:
                    case Catalog.MediaTypeEnum.GamePackVideo:
                        VideoObject vObject = new VideoObject();
                        mObject = (MediaObject)vObject;
                        break;
                    case Catalog.MediaTypeEnum.GameDemo:
                    case Catalog.MediaTypeEnum.GamerTile:
                    case Catalog.MediaTypeEnum.InGameContent:
                    case Catalog.MediaTypeEnum.InGameConsumable:                    
                    case Catalog.MediaTypeEnum.Xbox360Theme:                    
                    case Catalog.MediaTypeEnum.ArcadeDemo:

                        GameContentClass gameContentObj = new GameContentClass();
                        mObject = (MediaObject) gameContentObj;                                        
                        break;
                    case MediaTypeEnum.Xbox360Game:
                    case Catalog.MediaTypeEnum.ArcadeGame:
                    case Catalog.MediaTypeEnum.Xbox1Game:
                        GameTitleClass gameTitleObj = new  GameTitleClass();
                         mObject = (MediaObject)gameTitleObj;
                        break;
                    default: 
                        mObject = new MediaObject();
                        break;
                }
            
                                  
                mObject.XmlDocRoot = docNode;
                mObject.XmlNmsMgr = new XmlNamespaceManager(new NameTable());

                mObject.XmlNmsMgr.AddNamespace("pf", docNode.NamespaceURI);
                mObject.XmlNmsMgr.AddNamespace(docNode.Prefix, docNode.NamespaceURI);
                //Obtain the media data type - video or game?  

                //obtain the mediaid to be used as the key to the hashtable.
                XmlNodeList mediaId = mObject.GetNodeListbyTagName("mediaId");
                mObject.MediaId = new Guid(mediaId[0].InnerText);
                
                mObject.MediaType = int.Parse(docNode.GetElementsByTagName("mediaTypeId")[0].InnerText);
                XmlNodeList relationList = docNode.GetElementsByTagName("MediaRelationship");

                if (mObject.MediaId == new Guid("00010000-0018-0001-0000-0000000C2000"))
                    relationList = docNode.GetElementsByTagName("MediaRelationship");
                                
                //Add to relatedMediaTbl list: Id and relationType
                foreach(XmlNode nd in relationList) {                                  
                    if (mObject.RelatedMediaTbl == null) mObject.RelatedMediaTbl = new Hashtable();
                    Guid relatedId = new Guid((nd.SelectSingleNode("pf:relatedMediaId", CatVerify.EmsnsManager)).InnerText);
                    Guid mId = new Guid((nd.SelectSingleNode("pf:mediaId", CatVerify.EmsnsManager)).InnerText);
                    int relationType = int.Parse((nd.SelectSingleNode("pf:mediaRelationshipTypeId", CatVerify.EmsnsManager)).InnerText);

                    HashHelper<Guid, int>.AddEntry(mObject.RelatedMediaTbl, (relatedId == mObject.MediaId) ? mId : relatedId
                        , relationType);                                     
                    //mObject.RelatedMediaTbl.Add(relatedId, relationType);
                }

                if (mObject is VideoObject) {
                    mObject.DataType = MediaDataTypeEnum.VideoData;                
                    ((VideoObject)mObject).GetInstances();
                }

                if (mObject is GameContentClass) {
                       GameContentClass contentObj = (GameContentClass) mObject;
                       mObject.DataType = MediaDataTypeEnum.GameData;
                       ((GameContentClass)mObject).GetInstances();
                       foreach (DictionaryEntry de in mObject.RelatedMediaTbl)
                       {
                           Guid gId = (Guid)de.Key;
                           if (((ArrayList)de.Value).Contains(2)) {
                               contentObj.TitleMediaId = gId;
                               break;
                           }

                       }                      
                }

                if (mObject is GameTitleClass) {
                    ((GameTitleClass)mObject).GetInstances();
                    mObject.DataType = MediaDataTypeEnum.GameData;
                       
                }                
            }
            else
            {

                mObject = new MediaObject();  
                mObject.XmlDocRoot = docNode;
                mObject.XmlNmsMgr = new XmlNamespaceManager(new NameTable());

                mObject.XmlNmsMgr.AddNamespace("pf", docNode.NamespaceURI);
                mObject.XmlNmsMgr.AddNamespace(docNode.Prefix, docNode.NamespaceURI);
                //Obtain the media data type - video or game?  

                //obtain the mediaid to be used as the key to the hashtable.
                XmlNodeList mediaId = mObject.GetNodeListbyTagName("mediaId");
                mObject.MediaId = new Guid(mediaId[0].InnerText);
                if (mObject.XmlDocRoot.LocalName == "PodCast")
                {
                    mObject.DataType = MediaDataTypeEnum.PodcastsData;
                    mObject.MediaType = 13;
                }
                else
                {
                    mObject.DataType = (MediaDataTypeEnum)Enum.Parse(typeof(MediaDataTypeEnum), mObject.XmlDocRoot.LocalName, true);
                    //Obtain MediaType
                    mObject.MediaType = int.Parse(mObject.GetNodeListbyTagName("mediaTypeId")[0].InnerText);
                }
            }

            DataObjectMainTable.Add(mObject.MediaId, mObject);
            

        }


        public ArrayList GetExpectedMediaList(Hashtable filterValues, ref Hashtable absentTags, Message msg)
        {
            //if (filterValues.ContainsKey("MediaPresented"))
            //    filterValues.Remove("MediaPresented");

            if (filterValues["Bookmark"] == null || ((ArrayList)filterValues["Bookmark"])[0].ToString() == "null") {
                ArrayList list = new ArrayList();
                list.Add(DateTime.Today.ToString());
                filterValues["Bookmark"] = list;
            }
            //build a new filterValue hashtable mapping the testcase input file tags to Game/Video schema tags
            IDictionaryEnumerator filterEnumerator = filterValues.GetEnumerator();
            Hashtable newFilterValues = new Hashtable(); //holds the tags whose values cannot be determined from media metadata xml
            while (filterEnumerator.MoveNext())
            {
                if (filterEnumerator.Value == null)
                    continue;
                string newTag = TagMapping((string)filterEnumerator.Key);

                int mediaTypeFilter = int.Parse((string)(((ArrayList)filterValues["MediaTypes"])[0]));

                //Game Podcast only
                //if (newTag.Equals("categoryId") && !DataSource.IsVideoMedia(mediaTypeFilter)) newTag = "category";
                if (newTag.Equals("ratingValueId") && mediaTypeFilter == 13) newTag = "ratingValue";

                if (newTag != "")
                {
                    ArrayList tmpList = (ArrayList) filterEnumerator.Value;
                    string[] value = (string[])tmpList.ToArray(typeof(string));
                    string[] newValue = ValueMapping(newTag, value);
                    newFilterValues.Add(newTag, ArrayList.Adapter(newValue));
                }
                else
                {
                    //Add the tags whose values cannot be determined from media metadata xml
                    absentTags.Add(filterEnumerator.Key, filterEnumerator.Value);
                }
            }


            //if the search query has specific mediaIds then only 
            //use them in the hashtable for further search.
            ArrayList retMediaIdList = new ArrayList();
            ArrayList mTypeList = (ArrayList)filterValues["MediaTypes"];
            ArrayList categoryList = (ArrayList)filterValues["CategoryIds"];
            
            if(filterValues.ContainsKey("MediaIds") && filterValues["MediaIds"] != null)
            {
                string[] mediaIdArr;
                
                ArrayList tmpList = (ArrayList)filterValues["MediaIds"];
                //Add MediaPresented for visibility
                newFilterValues.Add("MediaPresented", null);
                if (filterValues.ContainsKey("Relations") && filterValues["Relations"] != null)
                {
                    ArrayList relatedIdArr = new ArrayList();
                    foreach (string idStr in tmpList) {
                        MediaObject m = (MediaObject)DataObjectMainTable[new Guid(idStr)];
                        foreach (string relation in (ArrayList)filterValues["Relations"]) {
                            if (m != null && m is VideoObject)
                            {
                                ArrayList childIds = ((VideoObject)m).GetChildMedia(int.Parse(relation));
                                if (childIds != null) relatedIdArr.AddRange(childIds.ToArray(typeof(string)));
                            }
                            else
                                if (m != null && m is GameTitleClass)
                                    foreach (GameContentClass content in ((GameTitleClass)m).AssociatedDownloadList)
                                        relatedIdArr.Add(content.MediaId.ToString());

                                else
                                {
                                    relatedIdArr = m.GetRelatedMedia(int.Parse(relation));

                                }
                        }
                    }
                    mediaIdArr = (string[])relatedIdArr.ToArray(typeof(string));
                }
                else
                    mediaIdArr = (string[])tmpList.ToArray(typeof(string));

                foreach (string valStr in mediaIdArr)
                {
                    if (valStr.ToLower().Equals("null")) continue; 
                    Guid val = new Guid(valStr);
                    if (DataObjectMainTable.ContainsKey(val))
                    {
                        string srchMessage = "";                        
                        MediaObject mObj = (MediaObject)DataObjectMainTable[val];
                        bool bFiltersPresent = false;

                        bool bMediaTypePresent = mObj.VerifyMediaType(mTypeList, ref srchMessage);

                        bool bVerifyCategories = mObj.VerifyCategories(categoryList, ref srchMessage);
                        //VerifyVisibility always return true for game now
                        bool bMediaVisbility = mObj.VerifyVisibility(filterValues, true);
                        if (!bMediaVisbility)
                            msg.AddInfo("@@@@@@@  " + mObj.MediaId + "failed pass media visibility");
                        if (bMediaTypePresent && bMediaVisbility && bVerifyCategories)
                        {
                            //The search is different when mediatype is gamecontent or 360Game
                            switch (mObj.MediaType)
                            {
                                case 1:  // 1 (360Game)
                                case 23: //acade game
                                case 21://xbox1 game
                                //case 19://360GameDemo
                                //case 5: //260ArcadeDemo
                                case 13: //podcast
                                case 2:  //movies
                                case 3:  //TV show
                                case 4:  //Muscvideo
                                case 7:  //Viral Video
                                case 8:  //TV Episode
                                case 9:  //TV Season
                                case 10: //TV Series
                                    {
                                        bFiltersPresent = mObj.SearchCurrentMedia(newFilterValues, out srchMessage);
                                        break;
                                    }
                                default:
                                    {
                                        
                                        bFiltersPresent = (mObj as GameContentClass).SearchCurrentMedia(newFilterValues, out srchMessage);
                                        break;
                                    }
                            }
                        }
                        
                        
                        //Only some of the search input filters are tested here. Data type there has been decision.
                        if (!bMediaTypePresent || !bFiltersPresent || !bMediaVisbility || !bVerifyCategories)
                            msg.AddInfo(string.Format("MediaID {0} does NOT match the filters \n{1}", val ,srchMessage));
                        else
                        {
                            retMediaIdList.Add(mObj);
                            msg.AddInfo(string.Format("Media {0} satisfies the filters \n{1}", val, srchMessage));
                        }
                    }
                    else
                        msg.AddInfo(string.Format("The following MediaID {0} is not present in the Local Media Table", val));
                }
            }
            //If the search query does not have specific mediaIds then traverse through the locally built MediaTable &
            //verify if the each of the media objects satisfy the criteria.
            else
            {
                //enumerator to move over the MediaObjects list
                IDictionaryEnumerator mainTableEnumerator = DataObjectMainTable.GetEnumerator();
                while (mainTableEnumerator.MoveNext())
                {
                    string srchMessage="";
                    bool bFiltersPresent = false;
                    MediaObject mObj = (MediaObject)mainTableEnumerator.Value;
                    //The search is different when mediatype is gamecontent or 360Game

                    bool bMediaTypePresent = mObj.VerifyMediaType(mTypeList, ref srchMessage);
                    bool bMediaVisbility = mObj.VerifyVisibility(filterValues, false);

                    bool bVerifyCategories = mObj.VerifyCategories(categoryList, ref srchMessage);

                    if (!bMediaVisbility)
                        msg.AddInfo("@@@@@@@  "+ mObj.MediaId+"failed pass media visibility");
                    if (bMediaTypePresent && bMediaVisbility && bVerifyCategories)
                    {

                        switch (mObj.MediaType)
                        {
                            case 1:  // 1 (360Game)
                            case 23: //acade game
                            case 21://xbox1 game
                            //case 19://demo
                            //case 5: //demo
                            case 13: //podcast
                            case 2:  //movies
                            case 3:  //TV show
                            case 4:  //Muscvideo
                            case 7:  //Viral Video
                            case 8:  //TV Episode
                            case 9:  //TV Season
                            case 10: //TV Series
                                {
                                    bFiltersPresent = mObj.SearchCurrentMedia(newFilterValues, out srchMessage);
                                    break;
                                }
                            default:
                                {                                    
                                    bFiltersPresent = (mObj as GameContentClass).SearchCurrentMedia(newFilterValues, out srchMessage);
                                    break;
                                }
                        }
                    }
                   
                    //Only some of the search input filters are tested here. Data type there has been decision.
                    if (!bMediaTypePresent || !bFiltersPresent || !bMediaVisbility || !bVerifyCategories)
                        msg.AddInfo(string.Format("MediaID {0} does NOT match the filters \n{1}", mainTableEnumerator.Key, srchMessage));
                    else
                    {
                        retMediaIdList.Add(mObj);
                        msg.AddInfo(string.Format("Media {0} satisfies the filters \n{1}", mainTableEnumerator.Key, srchMessage));
                    }
                }
            }

            string[] lcid;
            if (newFilterValues["lcid"] == null)
                lcid = null;
            else 
             lcid = (string[])((ArrayList)newFilterValues["lcid"]).ToArray(typeof(string));

            //filter on image here:


            return SortMedia(lcid ==null? null:lcid[0],ref absentTags,retMediaIdList);            
        }

        public string[] ValueMapping(string tag, string[] value)
        {
            switch (tag)
            {
                case "lcid":
                    return new string[] { Catalog.LocaleLcidMap.GetLcid(value[0]).ToString() };
            }
            return value;
        }

        public string TagMapping(string tag)
        {
            //mediaId, Data & mediaType are member variable of MediaObjects hence no point going to the xml.
            //The following tags are used to lookup in media xml files.
            switch (tag)
            {
                case "Locale":
                    return "lcid";
                case "TitleId":
                    return "liveTitleId";
                //case "CategoryIds":
                //    return "categoryId";
                    //else return "category";  broke game and podcast
                case "RatingIds":
                    return "ratingValueId";
                    //else return "ratingValue"; broke game and podcast
                case "Bookmark":
                    return "visibilityDate|";                
                case "PodcastType":
                    return "podcastType";
                case "CollectionId":
                    return "collectionId";
                case "MediaUrls":
                    return "rssUrl";
                case "TitleFilters"://used with lcid
                    return "titleSort";
                case "StartDate":
                    return "startDate|";
                case "EndDate":
                    return "|endDate";
               
            }
            return "";
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\OfferTableClass.cs ===
using System;
using System.Collections;
using System.Text;
using System.Xml;

using Catalog;
using Catalog.Verifier;

namespace Catalog.DynamicOutput
{

    public class OfferTableClass : DataTableClass
    {
        public Hashtable MediaObjectTable;


        private string TagMapping(string tag)
        {
            //mediaId, Data & mediaType are member variable of MediaObjects hence no point going to the xml.
            // offerId and store are at offer level. 
            // requiredUserTypeId, countryCode and startDate|endDate are at offer instance level
            // And store and countryCode are required input parameters. So the special ones are requiredUserTypeId and startDate|endDate

            switch (tag)
            {
                case "OfferIds":
                    return "offerId";
                case "Store":
                    return "storeId";
                //return "store";
                case "LegalLocale":
                    return "[1]countryCode";
                case "UserTypes":
                    return "[0]userTypeId";
                case "Bookmark":
                    return "[2]startDateTime|endDateTime";
                case "OfferEditorial":
                    return "OfferEditorial";
                case "MediaPresented":
                    return "MediaPresented";
                case "OfferPresented":
                    return "OfferPresented";
            }
           /* if (true)
            {
                switch (tag)
                {
                    case "OfferIds":
                        return "offerId";
                    case "Store":
                        return "storeId";
                    //return "store";
                    case "LegalLocale":
                        return "[1]countryCode";
                    case "UserTypes":
                        return "[0]userTypeId";
                    case "Bookmark":
                        return "[2]startDateTime|endDateTime";
                }
            }
            else {
                switch (tag)
                {
                    case "OfferIds":
                        return "offerId";
                    case "Store":
                        return "store";
                    //return "store";
                    case "LegalLocale":
                        return "[0]countryCode";
                    case "UserTypes":
                        return "[1]requiredUserTypeId";
                    case "Bookmark":
                        return "[2]startDate|endDate";
                }
            }*/
            return "";
        }

        private ArrayList PagingList(ArrayList retList, ref Hashtable absentTags)
        {
            ArrayList newRetList = retList;
            if (absentTags.ContainsKey("PageSize") && absentTags.ContainsKey("PageNum"))
            {
                if (absentTags["PageNum"] != null && absentTags["PageSize"] != null)
                {
                    newRetList = new ArrayList();
                    int pageNum = Convert.ToInt32(((ArrayList)absentTags["PageNum"])[0].ToString());
                    int pageSize = Convert.ToInt32(((ArrayList)absentTags["PageSize"])[0].ToString());
                    if (pageNum == 1)
                    {
                        if (pageSize >= retList.Count)
                            newRetList = retList;
                        else
                        {
                            for (int i = 0; i < pageSize; i++)
                                newRetList.Add(retList[i]);
                        }
                    }
                    else
                    {
                        int startIndex = (pageNum - 1) * pageSize;
                        if (startIndex >= retList.Count || startIndex < 0)
                            newRetList = null;
                        else
                        {
                            int endIndex = ((startIndex + pageSize) <= retList.Count) ? startIndex + pageSize : retList.Count;
                            for (int i = startIndex; i < endIndex; i++)
                                newRetList.Add(retList[i]);
                        }
                    }
                }
                absentTags.Remove("PageNum");
                absentTags.Remove("PageSize");             
            }           
            return newRetList;
        }

        private Hashtable GetNewFilterTable(Hashtable filterValues, out Hashtable newFilterValues)
        {
            //build a new filterValue hashtable mapping the testcase input file tags to Game/Video schema tags
            IDictionaryEnumerator filterEnumerator = filterValues.GetEnumerator();
            Hashtable absentTags = new Hashtable();
            newFilterValues = new Hashtable(); //holds the tags whose values cannot be determined from media metadata xml
            while (filterEnumerator.MoveNext())
            {
                string key =(string)filterEnumerator.Key;

                string newTag = TagMapping(key);
                if (newTag != "")
                {
                    string newVal;
                    if (newTag.Contains("countryCode"))
                    {
                        //extract country from from locale enUS
                        ArrayList tmpList = (ArrayList)filterEnumerator.Value;
                        string locale = (string)tmpList[0];
                        tmpList = null;
                        tmpList = new ArrayList();
                        //Get LCID from locale value
                        int lcid = Catalog.LocaleLcidMap.GetLcid(locale);
                        newVal = Catalog.LcidCountryCode.GetCountryCode(lcid);
                        tmpList.Add(newVal);
                        newFilterValues.Add(newTag, tmpList);
                    }
                    else
                        newFilterValues.Add(newTag, filterEnumerator.Value);
                }
                else
                {
                    //Add the tags whose values cannot be determined from media metadata xml
                    absentTags.Add(filterEnumerator.Key, filterEnumerator.Value);
                }
            }
            return absentTags;
        }

        private OfferFilterLevel GetOfferFilterLevel(ref Hashtable absentTags)
        {
            OfferFilterLevel retVal = OfferFilterLevel.All;
            if (absentTags.ContainsKey("OfferFilterLevel"))
            {
                if (absentTags["OfferFilterLevel"] != null)
                    retVal = ((OfferFilterLevel)Enum.Parse(typeof(OfferFilterLevel), ((ArrayList)absentTags["OfferFilterLevel"])[0].ToString()));
                absentTags.Remove("OfferFilterLevel");
            }
            return retVal;
        }

        public void AddOfferObject(XmlElement docNode)
        {
            OfferObject oObject = new OfferObject();
            oObject.XmlDocRoot = docNode;
            oObject.XmlNmsMgr = new XmlNamespaceManager(new NameTable());
            oObject.XmlNmsMgr.AddNamespace(docNode.Prefix, docNode.NamespaceURI);
            oObject.XmlNmsMgr.AddNamespace("pf", docNode.NamespaceURI);
            //Get OfferId from the offer xml
            XmlNodeList nodeList = oObject.GetNodeListbyTagName("offerId");
            oObject.OfferId = new Guid(nodeList[0].InnerText);
            //Get MediaMetadataId 
            string mediaIdTag;
            if (DataSource.IsEMSData(docNode))
            {
                mediaIdTag = "mediaId";
                //update OfferMediaInstanceTbl hashtable for this offer
                //Add OfferInstance
                //oObject.OfferMediaInstanceTbl[offerInstanceId] = Array of "mediaInstanceId", string 
                XmlNodeList list = oObject.GetNodesByXpath(".//pf:OfferInstance//pf:offerInstanceId");
                oObject.OfferMediaInstanceTbl = new Hashtable();
                foreach(XmlNode nd in list) {
                    string oInstanceId = nd.InnerText;
                    if (!oObject.OfferMediaInstanceTbl.ContainsKey(oInstanceId))
                    {
                        Hashtable mediaInstanceTbl = new Hashtable();
                        oObject.OfferMediaInstanceTbl.Add(oInstanceId, mediaInstanceTbl);
                        //Add MediaInstance
                        XmlNodeList providerTermIdList = oObject.GetNodesByXpath(
                            string.Format(".//pf:OfferInstanceProviderTerm/pf:providerTermId[../pf:offerInstanceId='{0}']",oInstanceId ));
                        foreach (XmlNode prvNd in providerTermIdList) {
                            string prvId = prvNd.InnerText;
                            XmlNodeList MediaInstanceList = oObject.GetNodesByXpath(
                            string.Format(".//pf:ProviderTermMediaInstance/pf:mediaInstanceId[../pf:providerTermId='{0}']",prvId));
                            foreach (XmlNode mInstanceIdNd in MediaInstanceList) {
                                mediaInstanceTbl.Add(mInstanceIdNd.InnerText, 0);
                            }
                        }
                    }
                }                
            }
            else { 
                mediaIdTag = "metadataMediaId";
            }
                            
            XmlNodeList mediaIdList = oObject.GetNodeListbyTagName(mediaIdTag);
            oObject.MediaMetaDataId = new Guid(mediaIdList[0].InnerText);
            
            AddEntrytoOfferTable(oObject.MediaMetaDataId, oObject);      
        }


        public void ClearOfferMediaInstanceTbl(ArrayList mediaList)
        {
            Hashtable processedTbl = new Hashtable();
            foreach(MediaObject mObj in mediaList) {
                ArrayList offerList = (ArrayList)DataObjectMainTable[mObj.MediaId];
                if (offerList == null) return;
                foreach(OfferObject offerObj in offerList) {
                    if(processedTbl.ContainsKey(offerObj)) continue;
                    else processedTbl.Add(offerObj, null);
                    offerObj.ClearOfferMediaInstanceTbl();
                }          
          }
        }
        public void AddEntrytoOfferTable(Guid mId, OfferObject oObject)
        {
            HashHelper<Guid, OfferObject>.AddEntry(DataObjectMainTable, mId, oObject);
                                     
            //If the table contains key, it indicates that the mediaId has other offers as well.
           /* if (DataObjectMainTable.ContainsKey(oObject.MediaMetaDataId))
            {
                ArrayList offerObjList = (ArrayList)DataObjectMainTable[oObject.MediaMetaDataId];
                if(!offerObjList.Contains(oObject))
                    offerObjList.Add(oObject);
            }
            //this is the first offer for this mediaId
            else
            {
                ArrayList tmpList = new ArrayList();
                tmpList.Add(oObject);
                DataObjectMainTable.Add(oObject.MediaMetaDataId, tmpList);
            }    */        
        }
        

        public void CopyOffersList(Guid srcMid, Guid destMid)
        {
            //If the table contains key, it indicates that the mediaId has other offers as well.
            if (DataObjectMainTable.ContainsKey(srcMid))
            {
                ArrayList offerObjList = (ArrayList)DataObjectMainTable[srcMid];
                foreach (OfferObject oObj in offerObjList)
                {
                    if(oObj.MediaMetaDataId == srcMid)
                        AddEntrytoOfferTable(destMid, oObj);
                }
            }           
        }         
        public int GetOfferCount(Guid mediaID)
        {
            return ((ArrayList)DataObjectMainTable[mediaID]).Count;
        }        

        public ArrayList GetExpectedMediaList(Hashtable filterValues, ArrayList initialExpectedMediaList, ref Hashtable absentTags, ref int totalItems, Message msg, MediaTableClass mTable)
        {            
            Hashtable newFilterValues;
            bool bOfferFiltersPresent = false;
            Hashtable processOffers = new Hashtable();
            ArrayList retMediaIdList = new ArrayList();
            absentTags = GetNewFilterTable(filterValues, out newFilterValues);

            if (filterValues["MediaIds"] != null) newFilterValues.Add("MediaPresented", null);
            OfferFilterLevel offerFilterLevel = GetOfferFilterLevel(ref absentTags);

            if (offerFilterLevel == OfferFilterLevel.All)
                newFilterValues.Add("offerFilterLevel1", null);

            ArrayList VideoFiltersValues=null;
            bool hasVideoFilters= false;
            if (absentTags.ContainsKey("VideoFilter")) {
                if (absentTags["VideoFilter"] != null)
                {
                    hasVideoFilters = true;
                    VideoFiltersValues = (ArrayList)absentTags["VideoFilter"];
                    absentTags.Remove("VideoFilter");
                }
            }


            
            //Clear the offermediainstanceTbl
            ClearOfferMediaInstanceTbl(initialExpectedMediaList);
            //enumerator to move over the OfferObjects list            
            IEnumerator initialListEnumerator = initialExpectedMediaList.GetEnumerator();
            while (initialListEnumerator.MoveNext())
            {
                string srchMessage;
                MediaObject currentMediaObj = (MediaObject) initialListEnumerator.Current;
                ArrayList tmpOfferList = (ArrayList)DataObjectMainTable[currentMediaObj.MediaId];
                msg.AddInfo(string.Format("--------------------Start Checking Offer List for Media: {0}----------------------------", currentMediaObj.MediaId));
                //if the mediaId has offers then make sure that remaining tags satisfy them

                if (tmpOfferList != null)
                {
                    int offerCounter = 0;
                    
                    foreach (OfferObject oObj in tmpOfferList)
                    {  
                        bool founded = false;

//                        if (oObj.MediaMetaDataId != currentMediaObj.MediaId) {
                            if (absentTags["OfferTargetMediaTypes"] != null)
                            {
                                if(((ArrayList)absentTags["OfferTargetMediaTypes"]).Contains(((MediaObject)mTable.DataObjectMainTable[oObj.MediaMetaDataId]).MediaType.ToString()))                                        
                                      msg.AddInfo("Has OfferTargetMediaTypes " +  " offerId : " + oObj.OfferId + "mediaID: "+ oObj.MediaMetaDataId);
                                else
                                {
                                    msg.AddInfo("Not a OfferTargetMediaTypes " + "Offer Id: " + oObj.OfferId + " MediaId: " + oObj.MediaMetaDataId + "skip");
                                    continue;
                                }
                            }   
//                        }

                        msg.AddInfo("Offer Id:" + oObj.OfferId);
                        if (!processOffers.ContainsKey(oObj))
                        {
                            processOffers.Add(oObj, 0);
                        }
                        //check to see if already processed 
                        if ((int)processOffers[oObj] == -1)
                        {
                            msg.AddInfo(string.Format("1.Mismatch offer: {0} already been filter out!!!", oObj.OfferId));
                            continue; //already being filtered out, move to next offer
                        }


                        if ((int)processOffers[oObj] == 0)
                        {
                            //do video filter here:OfferMediaInstanceTbl[offerInstance][mediaInstance]=-1 if failed passed
                            if (hasVideoFilters)
                            {
                                #region VideoFilters
                                string searchTag;
                                string xPath;

                                msg.AddInfo("2.Do VideoFilters:");
                                foreach (DictionaryEntry de in oObj.OfferMediaInstanceTbl)
                                {
                                    string offerInstance = (string)de.Key;
                                    Hashtable mediaInstanceTbl = (Hashtable)de.Value;
                                    ArrayList keys = new ArrayList(mediaInstanceTbl.Keys);

                                    foreach (Object key in keys)
                                    //foreach (DictionaryEntry de1 in mediaInstanceTbl) //loop all the mediainstances for the offer
                                    {
                                        string mediaInstance = (string)key;
                                        if (!((string)VideoFiltersValues[0]).Equals("10"))
                                        {
                                            searchTag = "pf:videoDefinitionId";
                                            xPath = "//{0}" + string.Format("[../pf:videoMediaInstanceId='{0}']", mediaInstance);
                                        }
                                        else
                                        {
                                            xPath = "//{0}" + string.Format("[../pf:MediaInstance='{0}']", mediaInstance);
                                            searchTag = "pf:isAdSupported";
                                        }
                                        string outValue = "";
                                        string tempmsg = "";
                                        if (currentMediaObj.SearchTagInXml(searchTag, VideoFiltersValues,
                                            xPath, ref outValue, ref tempmsg))
                                        {
                                            //mediaInstanceTbl[de1.Key] = 0;
                                            //set this true if only one mediainstance satisfy filter. 
                                            founded = true;
                                            //RetOfferMediaInstanceTbl.Add(oObj.OfferId, );
                                        }
                                        else
                                        {
                                            mediaInstanceTbl[key] = -1;// failed pass video fileter
                                        }
                                        msg.AddInfo(tempmsg);
                                    }
                                }
                                #endregion
                            }

                            if (hasVideoFilters)
                            {
                                if (!founded)
                                {
                                    msg.AddInfo(string.Format("2.Mismatch VideoFilter: for offerId {0} !!!", oObj.OfferId));
                                    processOffers[oObj] = -1;
                                    continue; //failed pass videofilter, move to next offer 
                                }
                            }
                            
                            bOfferFiltersPresent = oObj.SearchCurrentMedia(newFilterValues, out srchMessage);
                            if (bOfferFiltersPresent) 
                                processOffers[oObj] = 1;
                            else
                                processOffers[oObj] = -1;
                            msg.AddInfo(srchMessage);
                        }
                        else 
                            bOfferFiltersPresent = true;

                        if (bOfferFiltersPresent)
                        {
                            msg.AddInfo(string.Format("OfferId {0} match all offer filters, offerCounter+1 !!!", oObj.OfferId));
                            offerCounter++;                           
                        }
                        
                    }//finish loop all offers for a media

                    msg.AddInfo("------------------------Total Offer Count:"+offerCounter+"--------------------------------");
                    // update the TotalOfferCount for that mediaObject
                    currentMediaObj.TotalOfferCount = offerCounter;//this number include direct and indirect offer

                    if (offerFilterLevel == OfferFilterLevel.WithOffers && offerCounter > 0)                                       
                        retMediaIdList.Add(initialListEnumerator.Current);                   
                    else if (offerFilterLevel == OfferFilterLevel.All)
                            retMediaIdList.Add(initialListEnumerator.Current);

                    //updated offer count for video    
                    if (currentMediaObj is VideoObject)
                        {
                            VideoObject vOjb = (VideoObject)currentMediaObj;
                            vOjb.UpdateOfferCount(offerCounter, this.DataObjectMainTable, processOffers, MediaObjectTable);
                        }

                        if (currentMediaObj is GameTitleClass) ((GameTitleClass)currentMediaObj).UpdateOfferCount(this.DataObjectMainTable, processOffers);
                        if (currentMediaObj is GameContentClass) ((GameContentClass)currentMediaObj).UpdateOfferCount(this.DataObjectMainTable, processOffers);
                }
                //the mediaId has no offers loaded hence we cannot verify LegalLocale, UserTypes, Store etc.
                else if(offerFilterLevel == OfferFilterLevel.All)
                {
                    if (initialListEnumerator.Current is VideoObject) ((VideoObject)initialListEnumerator.Current).ClearOfferCount();
                    retMediaIdList.Add(initialListEnumerator.Current);
                }
            }
            totalItems = retMediaIdList.Count;
            msg.AddInfo("----------------------------Finish Offer check-----------------------------------------");
            //Perform paging
            return PagingList(retMediaIdList, ref absentTags);
        }

        public ArrayList GetExpectedOfferList(Hashtable filterValues, ArrayList initialExpectedMediaList, ref Hashtable absentTags, ref int totalItems, Message msg)
        {
            ArrayList retOfferList = new ArrayList();
            Hashtable newFilterValues;
            absentTags = GetNewFilterTable(filterValues, out newFilterValues);
            //newFilterValues.Add("FindVideOffers", null);
            ArrayList inputOfferList = (ArrayList)filterValues["OfferIds"];

            ClearOfferMediaInstanceTbl(initialExpectedMediaList);
            //enumerator to move over the OfferObjects list
            IEnumerator initialListEnumerator = initialExpectedMediaList.GetEnumerator();
            ArrayList offerList;
            while (initialListEnumerator.MoveNext())
            {
                string srchMessage;
                ArrayList tmpOfferList = (ArrayList)DataObjectMainTable[(initialListEnumerator.Current as MediaObject).MediaId];

                msg.AddInfo(string.Format("--------------------Start Checking Offer List for Media: {0}----------------------------", ((MediaObject)(initialListEnumerator.Current)).MediaId));
                offerList = new ArrayList();
                if (tmpOfferList == null || tmpOfferList.Count <= 0) continue;
                foreach (OfferObject oObj in tmpOfferList)
                {   //only process direct related offer
                    if (oObj.MediaMetaDataId != ((MediaObject)(initialListEnumerator.Current)).MediaId) continue;
                    if (inputOfferList != null)
                    {
                        if (!inputOfferList.Contains(oObj.OfferId.ToString().ToUpper()))
                        {                            
                            continue;
                        }
                    }
                    if (!offerList.Contains(oObj)) offerList.Add(oObj);

                }
                
                    //if the mediaId has offers then make sure that remaining tags satisfy them
                if (offerList.Count!=0)
                    {
                        foreach (OfferObject oObj in offerList)
                        {
                            
                            bool bOfferFiltersPresent = false;
                            msg.AddInfo(string.Format("\t\tStart Checking Offer {0}----------------------------", oObj.OfferId));
                
                            bOfferFiltersPresent = oObj.SearchCurrentMedia(newFilterValues, out srchMessage);
                            msg.AddInfo(srchMessage);
                            if (bOfferFiltersPresent)
                            {
                                if (!retOfferList.Contains(oObj))
                                    retOfferList.Add(oObj);
                            }
                        }
                    }
            }
            totalItems = retOfferList.Count;
            //Perform paging
            return PagingList(retOfferList, ref absentTags);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\DynamicOutput\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Lamot")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MS")]
[assembly: AssemblyProduct("Lamot")]
[assembly: AssemblyCopyright("Copyright © MS 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("10c1f00f-bf89-4f86-98b9-c4f574ea5414")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\TestCaseXmlParser\TestDriverProgram.cs ===
using System;
using System.Collections;
using System.Text;
using System.IO;

namespace Catalog.TestCaseXmlParser
{
    class TestDriverProgram
    {
        public static string[] elemNamesMediaInput = {"Locale", "LegalLocale", "Store", 
                                "PageSize", "PageNum", "DetailView",
                                "OfferFilterLevel", "MediaTypes", "CategoryIds",
                                "OrderMediaBy", "OrderDirection"};
        public static string[] elemNamesMediaOutput =                                
                                { "Error", "mediaId", "OrderedResults" };

        static void Main(string[] args)
        {
            //Currently there are two mechanism to have the test case xml file parsed and input data returned.
            //Mechanism 1> In this, the test case provides the input & output xml tags that need to be parsed
            //from a particular "testcase". A hashtable is returned with the keys for input tags as "Input"+elemname
            //and for output tags as "Output"+elemname. If the key distinguisher (Input/Output) is not required
            //and set the includeKeyDistinguisher to false. Also if the output values are not required pass a null
            //instead of a string array for the elemNamesMediaOutput & vice versa for input values.
            Hashtable valuesTab;
            ArrayList list;
            TestCaseParser testParser;
            try
            {
                testParser = new TestCaseParser("FindGamesTestCases.xml");
                testParser.GetTestCaseValues("1", elemNamesMediaInput, elemNamesMediaOutput, true, out valuesTab);
            }
            catch (FileNotFoundException ex)
            {
                //
                Console.WriteLine(ex.Message);
                return;
            }            
            
            IDictionaryEnumerator enumerator = valuesTab.GetEnumerator();
            while (enumerator.MoveNext())
            {
                ArrayList tmpList = new ArrayList();
                tmpList = (ArrayList)enumerator.Value;
                if (tmpList != null)
                {
                    //cast to a string array
                    string[] vals = (string[])tmpList.ToArray(typeof(string));
                    foreach (string val in vals)
                    {
                        string disMsg = enumerator.Key.ToString() + ": " + val;
                        Console.WriteLine("{0}", disMsg);
                    }
                }
            }

            //Mechanism 2. In this, the testcase number & type of testcase's childnode (currently they are InputNode & OutputNode)
            //that has to be parsed is sent as input. The values in the returned arraylist are indexed in the fashion available
            //in the input xml file.
            //The method returns an arraylist & an boolean array. The index to the boolean array tells whether the 'corresponding'
            //arraylist element is a string array or just a string value.
            bool[] isArray = testParser.GetTestCaseGrandChildList("2", TestCaseNodeTypes.InputNode, out list);
            IEnumerator enumerator2;
            enumerator2 = list.GetEnumerator();
            int i = 0;
            while (enumerator2.MoveNext())
            {
                if (isArray[i])
                {
                    string[] vals = (string[])enumerator2.Current;
                    foreach (string val in vals)
                    {                        
                        Console.WriteLine("{0}", val);
                    }
                }
                else
                {
                    string val = (string)enumerator2.Current;
                    Console.WriteLine("{0}", val);
                }
                i++;
            }
            Console.ReadKey(); 
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\TestCaseXmlParser\TestCaseParser.cs ===
using System;
using System.Collections;
using System.Text;
using System.Reflection;
using System.IO;
using System.Xml;

namespace Catalog.TestCaseXmlParser
{
    public enum TestCaseNodeTypes
    {
        InputNode,
        ExpectedOutputNode
    };

    public class TestCaseInfo
    {
        public string Name = string.Empty;
        public string Priority = "3";
        public Hashtable InputValues = null;
        public uint ErrorCode = 0;
        public bool OrderedResults = false;
        public uint TotalCount = 0;
        public Hashtable[] ExpectedItems = null; // null means the verify method will compare the Query results with from DyanmicOutput
                                                 // not null, but empty, means we are expecting no items returned
        public bool AddTestCaseForDyn = false;   // create an aditional test case for dynamicOutput, attribute
        public bool SkipVerify = false;          // if do verify, attribute
        
        public XmlNode OutputXml = null;         // the full xml output
        public string OfferTestDataFile = null;  // the test data offer file. it will be loaded for comparison of FindGameOffers

        public TestCaseInfo()
        {
            InputValues = new Hashtable();
        }

        public TestCaseInfo(string name, Hashtable inputValues, uint errorCode, bool ordered, uint totalCount, Hashtable[] expectedItems, bool addDynTest, bool skipVerify)
        {
            Name = name;
            InputValues = (Hashtable)inputValues.Clone();
            ErrorCode = errorCode;
            OrderedResults = ordered;
            TotalCount = totalCount;
            ExpectedItems = null;
            AddTestCaseForDyn = addDynTest;
            SkipVerify = skipVerify;
        }

        public TestCaseInfo(TestCaseInfo oldTest)
        {
            Name = oldTest.Name;
            InputValues = (Hashtable)oldTest.InputValues.Clone();
            ErrorCode = oldTest.ErrorCode;
            OrderedResults = oldTest.OrderedResults;
            TotalCount = oldTest.TotalCount;
            ExpectedItems = null;
            AddTestCaseForDyn = oldTest.AddTestCaseForDyn;
            SkipVerify = oldTest.SkipVerify;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    public class TestCaseParser
    {
        public XmlDocument xmlDoc;
        //Loads the xmlfile containing the TestCases
        public TestCaseParser(string xmlFileName)
        {
            xmlDoc = new XmlDocument();  
            if (File.Exists(xmlFileName))
                xmlDoc.Load(xmlFileName);
            else
                throw new FileNotFoundException();
        }

        public TestCaseInfo[] GetAllTestCases(string[] elemNamesInput)
        {
            string testName;
            ArrayList testCases = new ArrayList(10);
            ArrayList testNames = new ArrayList(10);

            foreach (XmlNode testCaseNode in xmlDoc.LastChild.ChildNodes)
            {
                // comment node
                if (testCaseNode.NodeType == XmlNodeType.Comment)
                    continue;

                // get one Test Case at a time
                TestCaseInfo testInfo = GetTestCaseInfo(testCaseNode, elemNamesInput);

                // check the unique of test case names
                testName = testInfo.Name;
                if (testNames.Contains(testName))
                    throw new Exception("Test case name already exists, name: " + testName + ", node: \n" + testCaseNode.OuterXml);

                testNames.Add(testName);
                testCases.Add(testInfo);

                // add an additional test for DynamicOutput
                if (testInfo.AddTestCaseForDyn)
                {
                    TestCaseInfo dynTest = new TestCaseInfo(testInfo);
                    dynTest.Name = dynTest.Name + "_DynOutput";
                    dynTest.ExpectedItems = null;

                    // check the unique of test case names
                    testName = dynTest.Name;
                    if (testNames.Contains(testName))
                        throw new Exception("Test case name already exists, name: " + testName + ", node: \n" + testCaseNode.OuterXml);

                    testNames.Add(testName);
                    testCases.Add(dynTest);
                }
            }

            return (TestCaseInfo[])testCases.ToArray(typeof(TestCaseInfo));
        }

        private TestCaseInfo GetTestCaseInfo(XmlNode node, string[] elemNames)
        {
            if (elemNames == null || elemNames.GetLength(0) == 0)
                throw new Exception("Element names cannot be null or empty.");
            if (node == null)
                throw new Exception("Xml node cannot be null or empty.");

            // get test case name
            XmlAttribute testNameAtrr = node.Attributes["Description"];
            if (testNameAtrr == null || string.IsNullOrEmpty(testNameAtrr.Value))
                throw new Exception("Description attribute is missing for node: \n" + node.OuterXml);

            TestCaseInfo testInfo = new TestCaseInfo();
            testInfo.Name = testNameAtrr.Value;

            try
            {
                XmlAttribute testPriorityAttr = node.Attributes["Priority"];
                if (testPriorityAttr != null)
                    testInfo.Priority = testPriorityAttr.Value;
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception was caught in TestCaseParser.cs: {0}", e.Message);
            }
            

            // all input values
            XmlElement inputNode = node["input"];
            XmlElement xmlElem;
            string[] elems = new string[elemNames.Length + 2];
            elemNames.CopyTo(elems, 2);
            elems[0] = "CustomQuery";
            elems[1] = "BypassXbanc";

            foreach (string elem in elems)
            {
                ArrayList tmpValList = new ArrayList();
                if ((xmlElem = inputNode[elem]) != null)
                {
                    if (xmlElem.HasChildNodes)
                    {
                        XmlNodeList childNodeList = xmlElem.ChildNodes;
                        for (int i = 0; i < childNodeList.Count; i++)
                        {
                            if (childNodeList[i].NodeType != XmlNodeType.Comment)
                                tmpValList.Add(childNodeList[i].InnerText);
                        }
                    }
                    else
                    {
                        tmpValList.Add(xmlElem.InnerText);
                    }
                    testInfo.InputValues[elem] = tmpValList;
                }
                else
                {
                    testInfo.InputValues[elem] = null;
                }
            }

            // expected outputs
            XmlElement outputNode = node["expectedOutput"];
            if (outputNode == null)
                return testInfo;

            // may need to add an additional dyn test
            string attr = outputNode.GetAttribute("addDynTest");
            if (!string.IsNullOrEmpty(attr) && int.Parse(attr) == 1)
                testInfo.AddTestCaseForDyn = true;

            attr = outputNode.GetAttribute("skipVerify");
            if (!string.IsNullOrEmpty(attr) && int.Parse(attr) == 1)
                testInfo.SkipVerify = true;

            if (outputNode["Error"] != null)
                testInfo.ErrorCode = Convert.ToUInt32(outputNode["Error"].InnerText, 16);

            if (outputNode["OrderedResults"] != null)
                testInfo.OrderedResults = Convert.ToBoolean(outputNode["OrderedResults"].InnerText);

            if (outputNode["TotalItemCount"] != null)
                testInfo.TotalCount = Convert.ToUInt32(outputNode["TotalItemCount"].InnerText);

            if (outputNode["Output"] != null)
            {
                testInfo.OutputXml = outputNode["Output"].Clone();
            }

            if (outputNode["OfferTestDataFile"] != null)
                testInfo.OfferTestDataFile = outputNode["OfferTestDataFile"].InnerText;

            testInfo.ExpectedItems = new Hashtable[] { };

            XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(xmlDoc.NameTable);
            xmlnsManager.AddNamespace("pf", xmlDoc.LastChild.NamespaceURI);

            XmlNodeList nodeList = outputNode.SelectNodes("pf:Item", xmlnsManager);
            if (nodeList == null)
                return testInfo;
            ArrayList tmpList = new ArrayList();

            // all entries under the Item node. make the Hashtable key all lower case
            foreach (XmlNode elem in nodeList)
            {
                Hashtable table = new Hashtable();
                foreach (XmlNode childNode in elem.ChildNodes)
                {
                    if (childNode.NodeType == XmlNodeType.Comment)
                        continue;
                    table[childNode.Name.ToLower()] = childNode.InnerText;
                }
                tmpList.Add(table);
            }
            testInfo.ExpectedItems = (Hashtable[])tmpList.ToArray(typeof(Hashtable));

            return testInfo;
        }

        //Get the Node associated with the current test case number from the xml file
        public XmlNode GetCurrentTestCaseNode(string testCaseNo)
        {
            bool foundNode = false;
            XmlNode currentTestCase = null;
            //find the right test case node based on the testcase number passed
            foreach (XmlNode testCaseNode in xmlDoc.LastChild.ChildNodes)
            {
                XmlAttributeCollection attrCol = testCaseNode.Attributes;
                foreach (XmlAttribute attr in attrCol)
                {
                    if (attr.Name == "Number" && attr.Value == testCaseNo)
                    {
                        currentTestCase = testCaseNode.Clone();
                        foundNode = true;
                        break;
                    }
                }
                if (foundNode)
                    break;
            }
            return currentTestCase;
        }

        //Get the specfic test case's input or expectedOutput node, bool inputNode = true returns inputNode else expectedOutputNode
        public XmlNode GetTestCaseChildNode(string testCaseNo, TestCaseNodeTypes nodeType)
        {
            XmlNode currentTestCase = GetCurrentTestCaseNode(testCaseNo);
            if (currentTestCase == null)
                throw new Exception("Current test case node: " + testCaseNo + "not found");
            XmlNode returnNode = null;
            switch(nodeType)
            {
                case TestCaseNodeTypes.InputNode:
                    {
                        returnNode = currentTestCase.FirstChild.Clone();
                        break;
                    }
                case TestCaseNodeTypes.ExpectedOutputNode:
                    {
                        returnNode = currentTestCase.LastChild.Clone();
                        break;
                    }
            }   
            return returnNode;
        }

        //This method will return an arraylist with the input or output values ordered as they are in the xmlfile
        //returns a bool array whose index indicates if the corresponding string in the arraylist is an array or not.
        public bool [] GetTestCaseGrandChildList(string testCaseNo, TestCaseNodeTypes nodeType, out ArrayList TestCaseNodeList)
        {
            XmlNode testCaseChildNode;
            try
            {
                testCaseChildNode = GetTestCaseChildNode(testCaseNo, nodeType);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            bool[] isArray = new bool[testCaseChildNode.ChildNodes.Count];
            XmlNode grandChildNode = testCaseChildNode.FirstChild;
            TestCaseNodeList = new ArrayList();
            int i = 0;
            do
            {
                if (grandChildNode.NodeType == XmlNodeType.Comment)
                    continue;
                //if the childnode has array of values to be passed
                else if (grandChildNode.HasChildNodes && grandChildNode.ChildNodes.Count > 1)
                {
                    XmlNodeList childNodeList = grandChildNode.ChildNodes;
                    string[] strarray = new string[childNodeList.Count];
                    for (int j = 0; j < childNodeList.Count; j++)
                    {                        
                         strarray[j] = childNodeList[j].InnerText;
                    }
                    TestCaseNodeList.Add(strarray);
                    isArray[i] = true;                    
                }
                else
                {
                    TestCaseNodeList.Add(grandChildNode.InnerText);
                    isArray[i] = false;
                }
                i++;
            }
            while ((grandChildNode = grandChildNode.NextSibling) != null);
            return isArray;
        }

        //This method takes in the test case number, input xml element tags, expectedoutput xml element tags & a hashtable
        //returns true if successful. Also returns the values in the hashtable with "Input"+inputxmlelement & "Output"+outputxmlelement
        //as the keys if includeKeyDistinguisher is true else just the element tags as the keys
        public bool GetTestCaseValues(string testCaseNo, string[] elemNamesInput, string[] elemNamesOutput, bool includeKeyDistinguisher, out Hashtable inputVals)
        {
            string key;
            XmlNode testCaseInput;
            XmlNode testCaseOutput;
            try
            {
                testCaseInput = GetTestCaseChildNode(testCaseNo, TestCaseNodeTypes.InputNode);
                testCaseOutput = GetTestCaseChildNode(testCaseNo, TestCaseNodeTypes.ExpectedOutputNode);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            inputVals = new Hashtable();
            //Traverse the elemNames array, obtain corresponding values and insert arraylist object in the hashtable     
            if (elemNamesInput != null)
            {
                foreach (string elem in elemNamesInput)
                {
                    if (includeKeyDistinguisher)
                        key = "Input" + elem;
                    else
                        key = elem;
                    ArrayList tmpValList = new ArrayList();

                    if (testCaseInput[elem, xmlDoc.LastChild.NamespaceURI] != null)
                    {
                        if (testCaseInput[elem, xmlDoc.LastChild.NamespaceURI].HasChildNodes && testCaseInput[elem, xmlDoc.LastChild.NamespaceURI].ChildNodes.Count > 1)
                        {
                            XmlNodeList childNodeList = testCaseInput[elem, xmlDoc.LastChild.NamespaceURI].ChildNodes;
                            for (int i = 0; i < childNodeList.Count; i++)
                            {
                                if(childNodeList[i].NodeType != XmlNodeType.Comment)
                                    tmpValList.Add(childNodeList[i].InnerText);
                            }
                        }
                        else
                        {
                            tmpValList.Add(testCaseInput[elem, xmlDoc.LastChild.NamespaceURI].InnerText);
                        }
                        //Add to the hashtable with the elem name as the key.
                        inputVals[key] = tmpValList;
                    }
                    else
                        inputVals[key] = null;
                }
            }
            if (elemNamesOutput != null)
            {
                foreach (string elem in elemNamesOutput)
                {
                    if (includeKeyDistinguisher)
                        key = "Output" + elem;
                    else
                        key = elem;
                    ArrayList tmpValList = new ArrayList();

                    NameTable nt = new NameTable();
                    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);

                    System.Xml.XmlNamespaceManager xmlnsManager = new System.Xml.XmlNamespaceManager(nt);
                    xmlnsManager.AddNamespace("pf", xmlDoc.LastChild.NamespaceURI);

                    XmlNodeList nList = testCaseOutput.SelectNodes("//pf:"+elem, xmlnsManager);//, xmlDoc.LastChild.NamespaceURI);
                    if (nList.Count == 0) inputVals[key] = null;
                    else
                    {   int j =1;
                        if(nList.Count ==1)
                        inputVals[key] = nList[0].InnerText;
                        else
                            foreach (XmlNode nd in nList)
                            {
                                inputVals[key+j.ToString()] = nd.OuterXml;
                                j++;
                            }
                    }
                   }
            }
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\GameSchema.cs ===
// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.1
// Schema file: GameSchema.xsd
// Creation Date: 12/3/2007 4:01:34 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace GameSchema
{

	public struct Declarations
	{
		public const string SchemaVersion = "http://www.microsoft.com/ems/game";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentOfferCollection : ArrayList
	{
		public GameSchema.GameContentOffer Add(GameSchema.GameContentOffer obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.GameContentOffer Add()
		{
			return Add(new GameSchema.GameContentOffer());
		}

		public void Insert(int index, GameSchema.GameContentOffer obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.GameContentOffer obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.GameContentOffer this[int index]
		{
			get { return (GameSchema.GameContentOffer) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentInstanceCollection : ArrayList
	{
		public GameSchema.GameContentInstance Add(GameSchema.GameContentInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.GameContentInstance Add()
		{
			return Add(new GameSchema.GameContentInstance());
		}

		public void Insert(int index, GameSchema.GameContentInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.GameContentInstance obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.GameContentInstance this[int index]
		{
			get { return (GameSchema.GameContentInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class LocaleMappingCollection : ArrayList
	{
		public GameSchema.LocaleMapping Add(GameSchema.LocaleMapping obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.LocaleMapping Add()
		{
			return Add(new GameSchema.LocaleMapping());
		}

		public void Insert(int index, GameSchema.LocaleMapping obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.LocaleMapping obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.LocaleMapping this[int index]
		{
			get { return (GameSchema.LocaleMapping) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class categoryCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaLocaleInfoCollection : ArrayList
	{
		public GameSchema.MediaLocaleInfo Add(GameSchema.MediaLocaleInfo obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.MediaLocaleInfo Add()
		{
			return Add(new GameSchema.MediaLocaleInfo());
		}

		public void Insert(int index, GameSchema.MediaLocaleInfo obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.MediaLocaleInfo obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.MediaLocaleInfo this[int index]
		{
			get { return (GameSchema.MediaLocaleInfo) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameLocaleInfoCollection : ArrayList
	{
		public GameSchema.GameLocaleInfo Add(GameSchema.GameLocaleInfo obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.GameLocaleInfo Add()
		{
			return Add(new GameSchema.GameLocaleInfo());
		}

		public void Insert(int index, GameSchema.GameLocaleInfo obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.GameLocaleInfo obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.GameLocaleInfo this[int index]
		{
			get { return (GameSchema.GameLocaleInfo) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameCollection : ArrayList
	{
		public GameSchema.Game Add(GameSchema.Game obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.Game Add()
		{
			return Add(new GameSchema.Game());
		}

		public void Insert(int index, GameSchema.Game obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.Game obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.Game this[int index]
		{
			get { return (GameSchema.Game) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentCollection : ArrayList
	{
		public GameSchema.GameContent Add(GameSchema.GameContent obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.GameContent Add()
		{
			return Add(new GameSchema.GameContent());
		}

		public void Insert(int index, GameSchema.GameContent obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.GameContent obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.GameContent this[int index]
		{
			get { return (GameSchema.GameContent) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ratingValueCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceCollection : ArrayList
	{
		public GameSchema.OfferInstance Add(GameSchema.OfferInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.OfferInstance Add()
		{
			return Add(new GameSchema.OfferInstance());
		}

		public void Insert(int index, GameSchema.OfferInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.OfferInstance obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.OfferInstance this[int index]
		{
			get { return (GameSchema.OfferInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaRelationshipCollection : ArrayList
	{
		public GameSchema.MediaRelationship Add(GameSchema.MediaRelationship obj)
		{
			base.Add(obj);
			return obj;
		}

		public GameSchema.MediaRelationship Add()
		{
			return Add(new GameSchema.MediaRelationship());
		}

		public void Insert(int index, GameSchema.MediaRelationship obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(GameSchema.MediaRelationship obj)
		{
			base.Remove(obj);
		}

		new public GameSchema.MediaRelationship this[int index]
		{
			get { return (GameSchema.MediaRelationship) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class storeCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ratingDescriptorCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlType(TypeName="MediaInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaInfo
	{

		[XmlElement(ElementName="mediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaId;
		
		[XmlIgnore]
		public string mediaId
		{ 
			get { return __mediaId; }
			set { __mediaId = value; }
		}

		[XmlElement(ElementName="mediaTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __mediaTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __mediaTypeIdSpecified;
		
		[XmlIgnore]
		public uint mediaTypeId
		{ 
			get { return __mediaTypeId; }
			set { __mediaTypeId = value; __mediaTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="providerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerId;
		
		[XmlIgnore]
		public string providerId
		{ 
			get { return __providerId; }
			set { __providerId = value; }
		}

		[XmlElement(ElementName="originalReleaseDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __originalReleaseDate;
		
		[XmlIgnore]
		public string originalReleaseDate
		{ 
			get { return __originalReleaseDate; }
			set { __originalReleaseDate = value; }
		}

		[XmlElement(ElementName="displayOriginalReleaseDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __displayOriginalReleaseDate;
		
		[XmlIgnore]
		public string displayOriginalReleaseDate
		{ 
			get { return __displayOriginalReleaseDate; }
			set { __displayOriginalReleaseDate = value; }
		}

		[XmlElement(ElementName="visibilityDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __visibilityDate;
		
		[XmlIgnore]
		public string visibilityDate
		{ 
			get { return __visibilityDate; }
			set { __visibilityDate = value; }
		}

		[XmlElement(Type=typeof(GameSchema.MediaLocaleInfo),ElementName="mediaLocaleInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public MediaLocaleInfoCollection __mediaLocaleInfoCollection;
		
		[XmlIgnore]
		public MediaLocaleInfoCollection mediaLocaleInfoCollection
		{
			get
			{
				if (__mediaLocaleInfoCollection == null) __mediaLocaleInfoCollection = new MediaLocaleInfoCollection();
				return __mediaLocaleInfoCollection;
			}
			set {__mediaLocaleInfoCollection = value;}
		}

		[XmlElement(Type=typeof(GameSchema.LocaleMapping),ElementName="mediaLocaleMapping",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public LocaleMappingCollection __mediaLocaleMappingCollection;
		
		[XmlIgnore]
		public LocaleMappingCollection mediaLocaleMappingCollection
		{
			get
			{
				if (__mediaLocaleMappingCollection == null) __mediaLocaleMappingCollection = new LocaleMappingCollection();
				return __mediaLocaleMappingCollection;
			}
			set {__mediaLocaleMappingCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="category",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public categoryCollection __categoryCollection;
		
		[XmlIgnore]
		public categoryCollection categoryCollection
		{
			get
			{
				if (__categoryCollection == null) __categoryCollection = new categoryCollection();
				return __categoryCollection;
			}
			set {__categoryCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="ratingValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ratingValueCollection __ratingValueCollection;
		
		[XmlIgnore]
		public ratingValueCollection ratingValueCollection
		{
			get
			{
				if (__ratingValueCollection == null) __ratingValueCollection = new ratingValueCollection();
				return __ratingValueCollection;
			}
			set {__ratingValueCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="ratingDescriptor",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ratingDescriptorCollection __ratingDescriptorCollection;
		
		[XmlIgnore]
		public ratingDescriptorCollection ratingDescriptorCollection
		{
			get
			{
				if (__ratingDescriptorCollection == null) __ratingDescriptorCollection = new ratingDescriptorCollection();
				return __ratingDescriptorCollection;
			}
			set {__ratingDescriptorCollection = value;}
		}

		[XmlElement(Type=typeof(GameSchema.MediaRelationship),ElementName="mediaRelationship",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public MediaRelationshipCollection __mediaRelationshipCollection;
		
		[XmlIgnore]
		public MediaRelationshipCollection mediaRelationshipCollection
		{
			get
			{
				if (__mediaRelationshipCollection == null) __mediaRelationshipCollection = new MediaRelationshipCollection();
				return __mediaRelationshipCollection;
			}
			set {__mediaRelationshipCollection = value;}
		}

		public MediaInfo()
		{
		}
	}


	[XmlType(TypeName="MediaLocaleInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaLocaleInfo
	{

		[XmlElement(ElementName="lcid",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcid;
		
		[XmlIgnore]
		public string lcid
		{ 
			get { return __lcid; }
			set { __lcid = value; }
		}

		[XmlElement(ElementName="title",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __title;
		
		[XmlIgnore]
		public string title
		{ 
			get { return __title; }
			set { __title = value; }
		}

		[XmlElement(ElementName="titleSort",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __titleSort;
		
		[XmlIgnore]
		public string titleSort
		{ 
			get { return __titleSort; }
			set { __titleSort = value; }
		}

		[XmlElement(ElementName="reducedTitle",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __reducedTitle;
		
		[XmlIgnore]
		public string reducedTitle
		{ 
			get { return __reducedTitle; }
			set { __reducedTitle = value; }
		}

		[XmlElement(ElementName="description",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __description;
		
		[XmlIgnore]
		public string description
		{ 
			get { return __description; }
			set { __description = value; }
		}

		[XmlElement(ElementName="reducedDescription",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __reducedDescription;
		
		[XmlIgnore]
		public string reducedDescription
		{ 
			get { return __reducedDescription; }
			set { __reducedDescription = value; }
		}

		public MediaLocaleInfo()
		{
		}
	}


	[XmlType(TypeName="MediaRelationship",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaRelationship
	{

		[XmlElement(ElementName="isFromToDirection",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isFromToDirection;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isFromToDirectionSpecified;
		
		[XmlIgnore]
		public bool isFromToDirection
		{ 
			get { return __isFromToDirection; }
			set { __isFromToDirection = value; __isFromToDirectionSpecified = true; }
		}

		[XmlElement(ElementName="relatedMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __relatedMediaId;
		
		[XmlIgnore]
		public string relatedMediaId
		{ 
			get { return __relatedMediaId; }
			set { __relatedMediaId = value; }
		}

		[XmlElement(ElementName="mediaRelationshipTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __mediaRelationshipTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __mediaRelationshipTypeIdSpecified;
		
		[XmlIgnore]
		public uint mediaRelationshipTypeId
		{ 
			get { return __mediaRelationshipTypeId; }
			set { __mediaRelationshipTypeId = value; __mediaRelationshipTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="sortOrder",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __sortOrder;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __sortOrderSpecified;
		
		[XmlIgnore]
		public uint sortOrder
		{ 
			get { return __sortOrder; }
			set { __sortOrder = value; __sortOrderSpecified = true; }
		}

		public MediaRelationship()
		{
		}
	}


	[XmlType(TypeName="Game",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Game
	{

		[XmlElement(Type=typeof(GameSchema.MediaInfo),ElementName="mediaInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.MediaInfo __mediaInfo;
		
		[XmlIgnore]
		public GameSchema.MediaInfo mediaInfo
		{
			get
			{
				if (__mediaInfo == null) __mediaInfo = new GameSchema.MediaInfo();		
				return __mediaInfo;
			}
			set {__mediaInfo = value;}
		}

		[XmlElement(ElementName="liveTitleId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __liveTitleId;
		
		[XmlIgnore]
		public string liveTitleId
		{ 
			get { return __liveTitleId; }
			set { __liveTitleId = value; }
		}

		[XmlElement(Type=typeof(GameSchema.GameLocaleInfo),ElementName="gameLocaleInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameLocaleInfoCollection __gameLocaleInfoCollection;
		
		[XmlIgnore]
		public GameLocaleInfoCollection gameLocaleInfoCollection
		{
			get
			{
				if (__gameLocaleInfoCollection == null) __gameLocaleInfoCollection = new GameLocaleInfoCollection();
				return __gameLocaleInfoCollection;
			}
			set {__gameLocaleInfoCollection = value;}
		}

		[XmlElement(Type=typeof(GameSchema.GameDownloadInfo),ElementName="gameDownloadInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.GameDownloadInfo __gameDownloadInfo;
		
		[XmlIgnore]
		public GameSchema.GameDownloadInfo gameDownloadInfo
		{
			get
			{
				if (__gameDownloadInfo == null) __gameDownloadInfo = new GameSchema.GameDownloadInfo();		
				return __gameDownloadInfo;
			}
			set {__gameDownloadInfo = value;}
		}

		public Game()
		{
		}
	}


	[XmlType(TypeName="GameDownloadInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameDownloadInfo
	{

		[XmlElement(ElementName="providerCategoryId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __providerCategoryId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __providerCategoryIdSpecified;
		
		[XmlIgnore]
		public uint providerCategoryId
		{ 
			get { return __providerCategoryId; }
			set { __providerCategoryId = value; __providerCategoryIdSpecified = true; }
		}

		[XmlElement(Type=typeof(GameSchema.GameContentInstance),ElementName="gameContentInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentInstanceCollection __gameContentInstanceCollection;
		
		[XmlIgnore]
		public GameContentInstanceCollection gameContentInstanceCollection
		{
			get
			{
				if (__gameContentInstanceCollection == null) __gameContentInstanceCollection = new GameContentInstanceCollection();
				return __gameContentInstanceCollection;
			}
			set {__gameContentInstanceCollection = value;}
		}

		public GameDownloadInfo()
		{
		}
	}


	[XmlType(TypeName="GameContent",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContent
	{

		[XmlElement(Type=typeof(GameSchema.MediaInfo),ElementName="mediaInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.MediaInfo __mediaInfo;
		
		[XmlIgnore]
		public GameSchema.MediaInfo mediaInfo
		{
			get
			{
				if (__mediaInfo == null) __mediaInfo = new GameSchema.MediaInfo();		
				return __mediaInfo;
			}
			set {__mediaInfo = value;}
		}

		[XmlElement(ElementName="gameMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameMediaId;
		
		[XmlIgnore]
		public string gameMediaId
		{ 
			get { return __gameMediaId; }
			set { __gameMediaId = value; }
		}

		[XmlElement(Type=typeof(GameSchema.GameDownloadInfo),ElementName="gameDownloadInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.GameDownloadInfo __gameDownloadInfo;
		
		[XmlIgnore]
		public GameSchema.GameDownloadInfo gameDownloadInfo
		{
			get
			{
				if (__gameDownloadInfo == null) __gameDownloadInfo = new GameSchema.GameDownloadInfo();		
				return __gameDownloadInfo;
			}
			set {__gameDownloadInfo = value;}
		}

		public GameContent()
		{
		}
	}


	[XmlType(TypeName="GameConsumable",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameConsumable
	{

		[XmlElement(ElementName="gameAssetMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameAssetMediaId;
		
		[XmlIgnore]
		public string gameAssetMediaId
		{ 
			get { return __gameAssetMediaId; }
			set { __gameAssetMediaId = value; }
		}

		[XmlElement(ElementName="gameMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameMediaId;
		
		[XmlIgnore]
		public string gameMediaId
		{ 
			get { return __gameMediaId; }
			set { __gameMediaId = value; }
		}

		[XmlElement(ElementName="liveTitleAssetId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __liveTitleAssetId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __liveTitleAssetIdSpecified;
		
		[XmlIgnore]
		public uint liveTitleAssetId
		{ 
			get { return __liveTitleAssetId; }
			set { __liveTitleAssetId = value; __liveTitleAssetIdSpecified = true; }
		}

		public GameConsumable()
		{
		}
	}


	[XmlType(TypeName="Offer",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Offer
	{

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(ElementName="metadataMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __metadataMediaId;
		
		[XmlIgnore]
		public string metadataMediaId
		{ 
			get { return __metadataMediaId; }
			set { __metadataMediaId = value; }
		}

		[XmlElement(Type=typeof(GameSchema.OfferInstance),ElementName="offerInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferInstanceCollection __offerInstanceCollection;
		
		[XmlIgnore]
		public OfferInstanceCollection offerInstanceCollection
		{
			get
			{
				if (__offerInstanceCollection == null) __offerInstanceCollection = new OfferInstanceCollection();
				return __offerInstanceCollection;
			}
			set {__offerInstanceCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="store",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public storeCollection __storeCollection;
		
		[XmlIgnore]
		public storeCollection storeCollection
		{
			get
			{
				if (__storeCollection == null) __storeCollection = new storeCollection();
				return __storeCollection;
			}
			set {__storeCollection = value;}
		}

		public Offer()
		{
		}
	}


	[XmlType(TypeName="OfferInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstance
	{

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="countryCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __countryCode;
		
		[XmlIgnore]
		public string countryCode
		{ 
			get { return __countryCode; }
			set { __countryCode = value; }
		}

		[XmlElement(ElementName="requiredUserTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __requiredUserTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __requiredUserTypeIdSpecified;
		
		[XmlIgnore]
		public uint requiredUserTypeId
		{ 
			get { return __requiredUserTypeId; }
			set { __requiredUserTypeId = value; __requiredUserTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="pointsPrice",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __pointsPrice;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __pointsPriceSpecified;
		
		[XmlIgnore]
		public uint pointsPrice
		{ 
			get { return __pointsPrice; }
			set { __pointsPrice = value; __pointsPriceSpecified = true; }
		}

		[XmlElement(ElementName="sku",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __sku;
		
		[XmlIgnore]
		public string sku
		{ 
			get { return __sku; }
			set { __sku = value; }
		}

		[XmlElement(ElementName="startDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __startDate;
		
		[XmlIgnore]
		public string startDate
		{ 
			get { return __startDate; }
			set { __startDate = value; }
		}

		[XmlElement(ElementName="endDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __endDate;
		
		[XmlIgnore]
		public string endDate
		{ 
			get { return __endDate; }
			set { __endDate = value; }
		}

		[XmlElement(ElementName="visibilityLevel",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __visibilityLevel;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __visibilityLevelSpecified;
		
		[XmlIgnore]
		public uint visibilityLevel
		{ 
			get { return __visibilityLevel; }
			set { __visibilityLevel = value; __visibilityLevelSpecified = true; }
		}

		public OfferInstance()
		{
		}
	}


	[XmlType(TypeName="GameContentOffer",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentOffer
	{

		[XmlElement(ElementName="friendlyName",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __friendlyName;
		
		[XmlIgnore]
		public string friendlyName
		{ 
			get { return __friendlyName; }
			set { __friendlyName = value; }
		}

		[XmlElement(Type=typeof(GameSchema.GameContentProviderTerms),ElementName="gameContentProviderTerms",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.GameContentProviderTerms __gameContentProviderTerms;
		
		[XmlIgnore]
		public GameSchema.GameContentProviderTerms gameContentProviderTerms
		{
			get
			{
				if (__gameContentProviderTerms == null) __gameContentProviderTerms = new GameSchema.GameContentProviderTerms();		
				return __gameContentProviderTerms;
			}
			set {__gameContentProviderTerms = value;}
		}

		[XmlElement(Type=typeof(GameSchema.Offer),ElementName="offer",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.Offer __offer;
		
		[XmlIgnore]
		public GameSchema.Offer offer
		{
			get
			{
				if (__offer == null) __offer = new GameSchema.Offer();		
				return __offer;
			}
			set {__offer = value;}
		}

		public GameContentOffer()
		{
		}
	}


	[XmlType(TypeName="GameContentProviderTerms",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentProviderTerms
	{

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="licenseTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __licenseTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __licenseTypeIdSpecified;
		
		[XmlIgnore]
		public uint licenseTypeId
		{ 
			get { return __licenseTypeId; }
			set { __licenseTypeId = value; __licenseTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="deliveryTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __deliveryTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __deliveryTypeIdSpecified;
		
		[XmlIgnore]
		public uint deliveryTypeId
		{ 
			get { return __deliveryTypeId; }
			set { __deliveryTypeId = value; __deliveryTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="publisherProviderId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __publisherProviderId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __publisherProviderIdSpecified;
		
		[XmlIgnore]
		public uint publisherProviderId
		{ 
			get { return __publisherProviderId; }
			set { __publisherProviderId = value; __publisherProviderIdSpecified = true; }
		}

		public GameContentProviderTerms()
		{
		}
	}


	[XmlType(TypeName="MediaInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaInstance
	{

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="isAcquirable",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAcquirable;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAcquirableSpecified;
		
		[XmlIgnore]
		public bool isAcquirable
		{ 
			get { return __isAcquirable; }
			set { __isAcquirable = value; __isAcquirableSpecified = true; }
		}

		[XmlElement(ElementName="isAdSupported",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAdSupported;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAdSupportedSpecified;
		
		[XmlIgnore]
		public bool isAdSupported
		{ 
			get { return __isAdSupported; }
			set { __isAdSupported = value; __isAdSupportedSpecified = true; }
		}

		public MediaInstance()
		{
		}
	}


	[XmlType(TypeName="GameContentInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentInstance
	{

		[XmlElement(Type=typeof(GameSchema.MediaInstance),ElementName="mediaInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameSchema.MediaInstance __mediaInstance;
		
		[XmlIgnore]
		public GameSchema.MediaInstance mediaInstance
		{
			get
			{
				if (__mediaInstance == null) __mediaInstance = new GameSchema.MediaInstance();		
				return __mediaInstance;
			}
			set {__mediaInstance = value;}
		}

		[XmlElement(ElementName="installSize",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __installSize;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __installSizeSpecified;
		
		[XmlIgnore]
		public uint installSize
		{ 
			get { return __installSize; }
			set { __installSize = value; __installSizeSpecified = true; }
		}

		[XmlElement(ElementName="packageSize",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __packageSize;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __packageSizeSpecified;
		
		[XmlIgnore]
		public uint packageSize
		{ 
			get { return __packageSize; }
			set { __packageSize = value; __packageSizeSpecified = true; }
		}

		[XmlElement(ElementName="encryptedSymKey",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __encryptedSymKey;
		
		[XmlIgnore]
		public string encryptedSymKey
		{ 
			get { return __encryptedSymKey; }
			set { __encryptedSymKey = value; }
		}

		[XmlElement(ElementName="encryptedPublicKey",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __encryptedPublicKey;
		
		[XmlIgnore]
		public string encryptedPublicKey
		{ 
			get { return __encryptedPublicKey; }
			set { __encryptedPublicKey = value; }
		}

		[XmlElement(ElementName="url",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __url;
		
		[XmlIgnore]
		public string url
		{ 
			get { return __url; }
			set { __url = value; }
		}

		[XmlElement(ElementName="liveContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __liveContentId;
		
		[XmlIgnore]
		public string liveContentId
		{ 
			get { return __liveContentId; }
			set { __liveContentId = value; }
		}

		public GameContentInstance()
		{
		}
	}


	[XmlType(TypeName="GameLocaleInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameLocaleInfo
	{

		[XmlElement(ElementName="lcid",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcid;
		
		[XmlIgnore]
		public string lcid
		{ 
			get { return __lcid; }
			set { __lcid = value; }
		}

		[XmlElement(ElementName="customGenre",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __customGenre;
		
		[XmlIgnore]
		public string customGenre
		{ 
			get { return __customGenre; }
			set { __customGenre = value; }
		}

		public GameLocaleInfo()
		{
		}
	}


	[XmlType(TypeName="LocaleMapping",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class LocaleMapping
	{

		[XmlElement(ElementName="lcidFrom",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcidFrom;
		
		[XmlIgnore]
		public string lcidFrom
		{ 
			get { return __lcidFrom; }
			set { __lcidFrom = value; }
		}

		[XmlElement(ElementName="lcidTo",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcidTo;
		
		[XmlIgnore]
		public string lcidTo
		{ 
			get { return __lcidTo; }
			set { __lcidTo = value; }
		}

		public LocaleMapping()
		{
		}
	}


	[XmlRoot(ElementName="GameData",Namespace=Declarations.SchemaVersion,IsNullable=false),Serializable]
	public class GameData
	{

		[XmlElement(Type=typeof(GameSchema.Game),ElementName="game",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameCollection __gameCollection;
		
		[XmlIgnore]
		public GameCollection gameCollection
		{
			get
			{
				if (__gameCollection == null) __gameCollection = new GameCollection();
				return __gameCollection;
			}
			set {__gameCollection = value;}
		}

		[XmlElement(Type=typeof(GameSchema.GameContent),ElementName="gameContent",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentCollection __gameContentCollection;
		
		[XmlIgnore]
		public GameContentCollection gameContentCollection
		{
			get
			{
				if (__gameContentCollection == null) __gameContentCollection = new GameContentCollection();
				return __gameContentCollection;
			}
			set {__gameContentCollection = value;}
		}

		[XmlElement(Type=typeof(GameSchema.GameContentOffer),ElementName="gameContentOffer",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentOfferCollection __gameContentOfferCollection;
		
		[XmlIgnore]
		public GameContentOfferCollection gameContentOfferCollection
		{
			get
			{
				if (__gameContentOfferCollection == null) __gameContentOfferCollection = new GameContentOfferCollection();
				return __gameContentOfferCollection;
			}
			set {__gameContentOfferCollection = value;}
		}

		public GameData()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\TestCaseXmlParser\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("TestCaseXmlParser")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MS")]
[assembly: AssemblyProduct("TestCaseXmlParser")]
[assembly: AssemblyCopyright("Copyright © MS 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("81ac83eb-2115-4abb-8b35-6388fe115416")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\CatLocale.cs ===
u s i n g   S y s t e m ; 
 
 u s i n g   S y s t e m . C o l l e c t i o n s . G e n e r i c ; 
 
 u s i n g   S y s t e m . T e x t ; 
 
 u s i n g   G a m e S c h e m a ; 
 
 
 
 n a m e s p a c e   T e s t D a t a G e n 
 
 { 
 
 
 
         c l a s s   C a t M e d i a L o c a l e : M e d i a L o c a l e I n f o   { 
 
                 p u b l i c   c o n s t   S t r i n g   E N G L I S H   =   " 1 0 3 3 " ; 
 
                 p u b l i c   c o n s t   S t r i n g   F R E N C H   =   " 1 0 3 6 " ; 
 
                 p u b l i c   c o n s t   S t r i n g   G E R M A N   =   " 1 0 3 1 " ; 
 
                 p u b l i c   c o n s t   S t r i n g   J a p a n e s e   =   " 1 0 4 1 " ; 
 
 
 
 
 
                 p u b l i c   M e d i a L o c a l e I n f o   C o n v e r t ( )   { 
 
                         M e d i a L o c a l e I n f o   m I n f o   =   n e w   M e d i a L o c a l e I n f o ( ) ; 
 
                         m I n f o . d e s c r i p t i o n   =   d e s c r i p t i o n ; 
 
                         m I n f o . l c i d   =   l c i d ; 
 
                         m I n f o . r e d u c e d D e s c r i p t i o n   =   r e d u c e d D e s c r i p t i o n ; 
 
                         m I n f o . r e d u c e d T i t l e   =   r e d u c e d T i t l e ; 
 
                         m I n f o . t i t l e   =   t i t l e ; 
 
                         m I n f o . t i t l e S o r t   =   t i t l e S o r t ; 
 
                         r e t u r n   m I n f o ; 
 
                 } 
 
                 p u b l i c   C a t M e d i a L o c a l e ( s t r i n g   t i t l e S t r i n g , s t r i n g   l c i d ) 
 
                 { 
 
                         / / t h i s . _ m e d i a I d   =   m e d i a . M e d i a I d ; 
 
                         t h i s . l c i d   =   l c i d ; 
 
 
 
                         t h i s . t i t l e   =   t i t l e S t r i n g ; 
 
                         t h i s . t i t l e S o r t   =   t h i s . t i t l e ; 
 
 
 
                         i f   ( t h i s . t i t l e . S t a r t s W i t h ( " T h e   " ) )   { 
 
                                 t h i s . t i t l e S o r t   =   t h i s . t i t l e . S u b s t r i n g ( 4 ) ; 
 
                                 
 
                                 s w i t c h   ( l c i d ) 
 
                                 { 
 
                                         c a s e   E N G L I S H :   t h i s . t i t l e   =   " T h e   "   +   t h i s . t i t l e S o r t ;   b r e a k ; 
 
 
 
                                         c a s e   F R E N C H : 
 
                                                 c h a r [ ]   c h a r s   =   { ' A ' ,   ' a ' ,   ' E ' ,   ' e ' ,   ' I ' ,   ' i ' ,   ' O ' ,   ' o ' ,   ' U ' ,   ' u ' ,   ' H ' ,   ' h '   } ; 
 
 
 
                                                 i f   ( t h i s . t i t l e S o r t . I n d e x O f A n y ( c h a r s )   = =   0 ) 
 
                                                         t h i s . t i t l e   =   " L ' "     +   t h i s . t i t l e S o r t ; 
 
                                                 e l s e 
 
                                                 { 
 
                                                         t h i s . t i t l e   =   " L e   "   +   t h i s . t i t l e S o r t ; 
 
                                                 } 
 
 
 
                                                 b r e a k ; 
 
 
 
                                         c a s e   G E R M A N :     t h i s . t i t l e   =   " D a s   "   +   t h i s . t i t l e S o r t ;   b r e a k ; 
 
 
 
                                 } 
 
                         } 
 
 
 
                         e l s e   i f   ( t h i s . t i t l e . S t a r t s W i t h ( " A   " ) )   { 
 
                                 t h i s . t i t l e S o r t   =   t h i s . t i t l e . S u b s t r i n g ( 2 ) ; 
 
                         } 
 
 
 
                         t h i s . t i t l e   =   F i x u p ( t h i s . t i t l e ) ; 
 
                         t h i s . t i t l e S o r t   =   F i x u p ( t h i s . t i t l e S o r t ) ; 
 
                         
 
 
 
                         i f   ( l c i d   = =   J a p a n e s e )   { 
 
                                 t h i s . t i t l e   =   " J0fW0Hr  "   +   t h i s . t i t l e S o r t ; 
 
                                 t h i s . t i t l e S o r t   =   t h i s . t i t l e ; 
 
                         } 
 
 
 
                         t h i s . r e d u c e d T i t l e   =   " R e d u c d e : "   +   t h i s . t i t l e ; 
 
                         G e n D e s c r i p t i o n ( ) ; 
 
 
 
                 } 
 
 
 
                 p r i v a t e   s t r i n g   F i x u p ( s t r i n g   s 1 )   { 
 
                         s t r i n g   s 2   =   s t r i n g . E m p t y ; 
 
                         i n t         i ; 
 
 
 
                         w h i l e   ( ( i   =   s 1 . I n d e x O f ( ' \ ' ' ) )   ! =   - 1 )   { 
 
                                 s 2   + =   s 1 . S u b s t r i n g ( 0 ,   i )   +   " ' ' " ; 
 
 
 
                                 i f   ( ( i   +   1 )   > =   s 1 . L e n g t h ) 
 
                                         s 1   =   s t r i n g . E m p t y ; 
 
                                 e l s e   { 
 
                                         s 1   =   s 1 . S u b s t r i n g ( i   +   1 ) ; 
 
                                 } 
 
                         } 
 
 
 
                         r e t u r n   s 2   + =   s 1 ; 
 
                 } 
 
 
 
                 p r i v a t e   v o i d   G e n D e s c r i p t i o n ( ) 
 
                 { 
 
                         
 
                         s t r i n g   d e s c r i p t i o n ; 
 
                         s t r i n g   r e d u c e d D e s c r i p t i o n ; 
 
 
 
                         s w i t c h   ( l c i d )   { 
 
                                 c a s e   E N G L I S H   : 
 
                                         d e s c r i p t i o n   =   t i t l e   +   "   i s   t h e   b e s t   g a m e   t h a t   w a s   e v e r   m a d e .   R e a l l y ,   i t   i s . " ; 
 
                                         r e d u c e d D e s c r i p t i o n   =   t i t l e   +   "   i s   w o n d e r f u l . " ; 
 
                                         b r e a k ; 
 
                                 c a s e   F R E N C H   : 
 
                                         d e s c r i p t i o n   =   t i t l e   +   "   e s t   l e   m e i l l e u r   g a m e   j a m a i s   f a i t .   V r a i m e n t ,   c ' e s t " ; 
 
                                         r e d u c e d D e s c r i p t i o n   =   t i t l e   +   "   e s t   m e r v e i l l e u x . " ; 
 
                                         b r e a k ; 
 
 
 
                                 c a s e   G E R M A N   : 
 
                                         d e s c r i p t i o n   =   t i t l e   +   "   i s t   d e r   b e s t e   j e   g e m a c h t e   g a m e .   W i r k l i c h   i s t   e s . " ; 
 
                                         r e d u c e d D e s c r i p t i o n   =   t i t l e   +   "   i s t   w u n d e r b a r " ; 
 
                                         b r e a k ; 
 
 
 
                                 c a s e   J a p a n e s e : 
 
                                         d e s c r i p t i o n   =   t i t l e   +   "   2k00[bR. " ; 
 
                                         r e d u c e d D e s c r i p t i o n   =   t i t l e   +   "   i s t   w u n d e r b a r " ; 
 
                                         b r e a k ; 
 
                                 d e f a u l t : 
 
                                         d e s c r i p t i o n   =   n u l l ; 
 
                                         r e d u c e d D e s c r i p t i o n   =   n u l l ; 
 
                                         b r e a k ; 
 
                         } 
 
 
 
                         t h i s . d e s c r i p t i o n   =   F i x u p ( d e s c r i p t i o n ) ; 
 
                         t h i s . r e d u c e d D e s c r i p t i o n   =   F i x u p ( r e d u c e d D e s c r i p t i o n ) ; 
 
                 }                 
 
         } 
 
 } 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\OfferSchema.cs ===
// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.1
// Schema file: offer.xsd
// Creation Date: 12/3/2007 4:14:12 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace OfferSchema
{
    
	public struct Declarations
	{
		public const string SchemaVersion = "";
	}

	[Serializable]
	public enum DatabaseOperation
	{
		[XmlEnum(Name="Add")] Add,
		[XmlEnum(Name="Update")] Update,
		[XmlEnum(Name="Delete")] Delete
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceUserTypeCollection : ArrayList
	{
		public OfferSchema.OfferInstanceUserType Add(OfferSchema.OfferInstanceUserType obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.OfferInstanceUserType Add()
		{
			return Add(new OfferSchema.OfferInstanceUserType());
		}

		public void Insert(int index, OfferSchema.OfferInstanceUserType obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.OfferInstanceUserType obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.OfferInstanceUserType this[int index]
		{
			get { return (OfferSchema.OfferInstanceUserType) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermMediaInstanceClientTypeCollection : ArrayList
	{
		public OfferSchema.ProviderTermMediaInstanceClientType Add(OfferSchema.ProviderTermMediaInstanceClientType obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.ProviderTermMediaInstanceClientType Add()
		{
			return Add(new OfferSchema.ProviderTermMediaInstanceClientType());
		}

		public void Insert(int index, OfferSchema.ProviderTermMediaInstanceClientType obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.ProviderTermMediaInstanceClientType obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.ProviderTermMediaInstanceClientType this[int index]
		{
			get { return (OfferSchema.ProviderTermMediaInstanceClientType) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermGameContentInstanceAssetCollection : ArrayList
	{
		public OfferSchema.ProviderTermGameContentInstanceAsset Add(OfferSchema.ProviderTermGameContentInstanceAsset obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.ProviderTermGameContentInstanceAsset Add()
		{
			return Add(new OfferSchema.ProviderTermGameContentInstanceAsset());
		}

		public void Insert(int index, OfferSchema.ProviderTermGameContentInstanceAsset obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.ProviderTermGameContentInstanceAsset obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.ProviderTermGameContentInstanceAsset this[int index]
		{
			get { return (OfferSchema.ProviderTermGameContentInstanceAsset) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferStoreCollection : ArrayList
	{
		public OfferSchema.OfferStore Add(OfferSchema.OfferStore obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.OfferStore Add()
		{
			return Add(new OfferSchema.OfferStore());
		}

		public void Insert(int index, OfferSchema.OfferStore obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.OfferStore obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.OfferStore this[int index]
		{
			get { return (OfferSchema.OfferStore) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceCollection : ArrayList
	{
		public OfferSchema.OfferInstance Add(OfferSchema.OfferInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.OfferInstance Add()
		{
			return Add(new OfferSchema.OfferInstance());
		}

		public void Insert(int index, OfferSchema.OfferInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.OfferInstance obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.OfferInstance this[int index]
		{
			get { return (OfferSchema.OfferInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class PromotionCollection : ArrayList
	{
		public OfferSchema.Promotion Add(OfferSchema.Promotion obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.Promotion Add()
		{
			return Add(new OfferSchema.Promotion());
		}

		public void Insert(int index, OfferSchema.Promotion obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.Promotion obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.Promotion this[int index]
		{
			get { return (OfferSchema.Promotion) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermMediaInstanceCollection : ArrayList
	{
		public OfferSchema.ProviderTermMediaInstance Add(OfferSchema.ProviderTermMediaInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.ProviderTermMediaInstance Add()
		{
			return Add(new OfferSchema.ProviderTermMediaInstance());
		}

		public void Insert(int index, OfferSchema.ProviderTermMediaInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.ProviderTermMediaInstance obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.ProviderTermMediaInstance this[int index]
		{
			get { return (OfferSchema.ProviderTermMediaInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermGameContentInstanceCollection : ArrayList
	{
		public OfferSchema.ProviderTermGameContentInstance Add(OfferSchema.ProviderTermGameContentInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.ProviderTermGameContentInstance Add()
		{
			return Add(new OfferSchema.ProviderTermGameContentInstance());
		}

		public void Insert(int index, OfferSchema.ProviderTermGameContentInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.ProviderTermGameContentInstance obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.ProviderTermGameContentInstance this[int index]
		{
			get { return (OfferSchema.ProviderTermGameContentInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermCollection : ArrayList
	{
		public OfferSchema.ProviderTerm Add(OfferSchema.ProviderTerm obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.ProviderTerm Add()
		{
			return Add(new OfferSchema.ProviderTerm());
		}

		public void Insert(int index, OfferSchema.ProviderTerm obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.ProviderTerm obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.ProviderTerm this[int index]
		{
			get { return (OfferSchema.ProviderTerm) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceProviderTermCollection : ArrayList
	{
		public OfferSchema.OfferInstanceProviderTerm Add(OfferSchema.OfferInstanceProviderTerm obj)
		{
			base.Add(obj);
			return obj;
		}

		public OfferSchema.OfferInstanceProviderTerm Add()
		{
			return Add(new OfferSchema.OfferInstanceProviderTerm());
		}

		public void Insert(int index, OfferSchema.OfferInstanceProviderTerm obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(OfferSchema.OfferInstanceProviderTerm obj)
		{
			base.Remove(obj);
		}

		new public OfferSchema.OfferInstanceProviderTerm this[int index]
		{
			get { return (OfferSchema.OfferInstanceProviderTerm) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlType(TypeName="Offer"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Offer
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(ElementName="mediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaId;
		
		[XmlIgnore]
		public string mediaId
		{ 
			get { return __mediaId; }
			set { __mediaId = value; }
		}

		[XmlElement(ElementName="name",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __name;
		
		[XmlIgnore]
		public string name
		{ 
			get { return __name; }
			set { __name = value; }
		}

		public Offer()
		{
		}
	}


	[XmlType(TypeName="OfferStore"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferStore
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(ElementName="storeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __storeId;
		
		[XmlIgnore]
		public string storeId
		{ 
			get { return __storeId; }
			set { __storeId = value; }
		}

		public OfferStore()
		{
		}
	}


	[XmlType(TypeName="OfferInstance"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstance
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(ElementName="sku",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __sku;
		
		[XmlIgnore]
		public string sku
		{ 
			get { return __sku; }
			set { __sku = value; }
		}

		[XmlElement(ElementName="pricingRuleId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __pricingRuleId;
		
		[XmlIgnore]
		public string pricingRuleId
		{ 
			get { return __pricingRuleId; }
			set { __pricingRuleId = value; }
		}

		[XmlElement(ElementName="pointsPrice",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __pointsPrice;
		
		[XmlIgnore]
		public string pointsPrice
		{ 
			get { return __pointsPrice; }
			set { __pointsPrice = value; }
		}

		[XmlElement(ElementName="priceRetail",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="decimal"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public decimal __priceRetail;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __priceRetailSpecified;
		
		[XmlIgnore]
		public decimal priceRetail
		{ 
			get { return __priceRetail; }
			set { __priceRetail = value; __priceRetailSpecified = true; }
		}

		[XmlElement(ElementName="priceRetailCurrencyCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __priceRetailCurrencyCode;
		
		[XmlIgnore]
		public string priceRetailCurrencyCode
		{ 
			get { return __priceRetailCurrencyCode; }
			set { __priceRetailCurrencyCode = value; }
		}

		[XmlElement(ElementName="startDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __startDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __startDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime startDateTime
		{ 
			get { return __startDateTime; }
			set { __startDateTime = value; __startDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime startDateTimeUtc
		{ 
			get { return __startDateTime.ToUniversalTime(); }
			set { __startDateTime = value.ToLocalTime(); __startDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="endDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __endDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __endDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime endDateTime
		{ 
			get { return __endDateTime; }
			set { __endDateTime = value; __endDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime endDateTimeUtc
		{ 
			get { return __endDateTime.ToUniversalTime(); }
			set { __endDateTime = value.ToLocalTime(); __endDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="countryCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __countryCode;
		
		[XmlIgnore]
		public string countryCode
		{ 
			get { return __countryCode; }
			set { __countryCode = value; }
		}

		[XmlElement(ElementName="visibilityLevelId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __visibilityLevelId;
		
		[XmlIgnore]
		public string visibilityLevelId
		{ 
			get { return __visibilityLevelId; }
			set { __visibilityLevelId = value; }
		}

		[XmlElement(ElementName="requiredUserTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __requiredUserTypeId;
		
		[XmlIgnore]
		public string requiredUserTypeId
		{ 
			get { return __requiredUserTypeId; }
			set { __requiredUserTypeId = value; }
		}

		public OfferInstance()
		{
			__startDateTime = DateTime.Now;
			__endDateTime = DateTime.Now;
		}
	}


	[XmlType(TypeName="Promotion"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Promotion
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="promotionId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __promotionId;
		
		[XmlIgnore]
		public string promotionId
		{ 
			get { return __promotionId; }
			set { __promotionId = value; }
		}

		[XmlElement(ElementName="name",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __name;
		
		[XmlIgnore]
		public string name
		{ 
			get { return __name; }
			set { __name = value; }
		}

		[XmlElement(ElementName="startDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __startDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __startDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime startDateTime
		{ 
			get { return __startDateTime; }
			set { __startDateTime = value; __startDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime startDateTimeUtc
		{ 
			get { return __startDateTime.ToUniversalTime(); }
			set { __startDateTime = value.ToLocalTime(); __startDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="endDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __endDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __endDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime endDateTime
		{ 
			get { return __endDateTime; }
			set { __endDateTime = value; __endDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime endDateTimeUtc
		{ 
			get { return __endDateTime.ToUniversalTime(); }
			set { __endDateTime = value.ToLocalTime(); __endDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="pointsPromotion",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __pointsPromotion;
		
		[XmlIgnore]
		public string pointsPromotion
		{ 
			get { return __pointsPromotion; }
			set { __pointsPromotion = value; }
		}

		[XmlElement(ElementName="pricePromotion",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="decimal"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public decimal __pricePromotion;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __pricePromotionSpecified;
		
		[XmlIgnore]
		public decimal pricePromotion
		{ 
			get { return __pricePromotion; }
			set { __pricePromotion = value; __pricePromotionSpecified = true; }
		}

		[XmlElement(ElementName="pricePromotionCurrencyCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __pricePromotionCurrencyCode;
		
		[XmlIgnore]
		public string pricePromotionCurrencyCode
		{ 
			get { return __pricePromotionCurrencyCode; }
			set { __pricePromotionCurrencyCode = value; }
		}

		[XmlElement(ElementName="priority",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __priority;
		
		[XmlIgnore]
		public string priority
		{ 
			get { return __priority; }
			set { __priority = value; }
		}

		public Promotion()
		{
			__startDateTime = DateTime.Now;
			__endDateTime = DateTime.Now;
		}
	}


	[XmlType(TypeName="ProviderTerm"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTerm
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaId;
		
		[XmlIgnore]
		public string mediaId
		{ 
			get { return __mediaId; }
			set { __mediaId = value; }
		}

		[XmlElement(ElementName="wholesalePrice",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="decimal"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public decimal __wholesalePrice;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __wholesalePriceSpecified;
		
		[XmlIgnore]
		public decimal wholesalePrice
		{ 
			get { return __wholesalePrice; }
			set { __wholesalePrice = value; __wholesalePriceSpecified = true; }
		}

		[XmlElement(ElementName="wholesalePriceCurrencyCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __wholesalePriceCurrencyCode;
		
		[XmlIgnore]
		public string wholesalePriceCurrencyCode
		{ 
			get { return __wholesalePriceCurrencyCode; }
			set { __wholesalePriceCurrencyCode = value; }
		}

		[XmlElement(ElementName="startDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __startDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __startDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime startDateTime
		{ 
			get { return __startDateTime; }
			set { __startDateTime = value; __startDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime startDateTimeUtc
		{ 
			get { return __startDateTime.ToUniversalTime(); }
			set { __startDateTime = value.ToLocalTime(); __startDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="endDateTime",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __endDateTime;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __endDateTimeSpecified;
		
		[XmlIgnore]
		public DateTime endDateTime
		{ 
			get { return __endDateTime; }
			set { __endDateTime = value; __endDateTimeSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime endDateTimeUtc
		{ 
			get { return __endDateTime.ToUniversalTime(); }
			set { __endDateTime = value.ToLocalTime(); __endDateTimeSpecified = true; }
		}

		[XmlElement(ElementName="countryCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __countryCode;
		
		[XmlIgnore]
		public string countryCode
		{ 
			get { return __countryCode; }
			set { __countryCode = value; }
		}

		[XmlElement(ElementName="licenserId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __licenserId;
		
		[XmlIgnore]
		public string licenserId
		{ 
			get { return __licenserId; }
			set { __licenserId = value; }
		}

		[XmlElement(ElementName="externalLicenserContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __externalLicenserContentId;
		
		[XmlIgnore]
		public string externalLicenserContentId
		{ 
			get { return __externalLicenserContentId; }
			set { __externalLicenserContentId = value; }
		}

		[XmlElement(ElementName="providerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerId;
		
		[XmlIgnore]
		public string providerId
		{ 
			get { return __providerId; }
			set { __providerId = value; }
		}

		[XmlElement(ElementName="externalProviderContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __externalProviderContentId;
		
		[XmlIgnore]
		public string externalProviderContentId
		{ 
			get { return __externalProviderContentId; }
			set { __externalProviderContentId = value; }
		}

		[XmlElement(ElementName="automaticallyGenerateOffer",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __automaticallyGenerateOffer;
		
		[XmlIgnore]
		public string automaticallyGenerateOffer
		{ 
			get { return __automaticallyGenerateOffer; }
			set { __automaticallyGenerateOffer = value; }
		}

		[XmlElement(ElementName="modifiedBy",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __modifiedBy;
		
		[XmlIgnore]
		public string modifiedBy
		{ 
			get { return __modifiedBy; }
			set { __modifiedBy = value; }
		}

		public ProviderTerm()
		{
			__startDateTime = DateTime.Now;
			__endDateTime = DateTime.Now;
		}
	}


	[XmlType(TypeName="ProviderTermGameContentInstance"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermGameContentInstance
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="licenseExtensionBits",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __licenseExtensionBits;
		
		[XmlIgnore]
		public string licenseExtensionBits
		{ 
			get { return __licenseExtensionBits; }
			set { __licenseExtensionBits = value; }
		}

		public ProviderTermGameContentInstance()
		{
		}
	}


	[XmlType(TypeName="ProviderTermGameContentInstanceAsset"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermGameContentInstanceAsset
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="assetId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __assetId;
		
		[XmlIgnore]
		public string assetId
		{ 
			get { return __assetId; }
			set { __assetId = value; }
		}

		[XmlElement(ElementName="quantity",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __quantity;
		
		[XmlIgnore]
		public string quantity
		{ 
			get { return __quantity; }
			set { __quantity = value; }
		}

		public ProviderTermGameContentInstanceAsset()
		{
		}
	}


	[XmlType(TypeName="ProviderTermMediaInstance"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermMediaInstance
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="licenserId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __licenserId;
		
		[XmlIgnore]
		public string licenserId
		{ 
			get { return __licenserId; }
			set { __licenserId = value; }
		}

		[XmlElement(ElementName="licenseTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __licenseTypeId;
		
		[XmlIgnore]
		public string licenseTypeId
		{ 
			get { return __licenseTypeId; }
			set { __licenseTypeId = value; }
		}

		[XmlElement(ElementName="expirationDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="dateTime"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DateTime __expirationDate;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __expirationDateSpecified;
		
		[XmlIgnore]
		public DateTime expirationDate
		{ 
			get { return __expirationDate; }
			set { __expirationDate = value; __expirationDateSpecified = true; }
		}
		
		[XmlIgnore]
		public DateTime expirationDateUtc
		{ 
			get { return __expirationDate.ToUniversalTime(); }
			set { __expirationDate = value.ToLocalTime(); __expirationDateSpecified = true; }
		}

		public ProviderTermMediaInstance()
		{
			__expirationDate = DateTime.Now;
		}
	}


	[XmlType(TypeName="ProviderTermMediaInstanceClientType"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ProviderTermMediaInstanceClientType
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="clientTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __clientTypeId;
		
		[XmlIgnore]
		public string clientTypeId
		{ 
			get { return __clientTypeId; }
			set { __clientTypeId = value; }
		}

		public ProviderTermMediaInstanceClientType()
		{
		}
	}


	[XmlType(TypeName="OfferInstanceProviderTerm"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceProviderTerm
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="visibilityStatusId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __visibilityStatusId;
		
		[XmlIgnore]
		public string visibilityStatusId
		{ 
			get { return __visibilityStatusId; }
			set { __visibilityStatusId = value; }
		}

		public OfferInstanceProviderTerm()
		{
		}
	}


	[XmlType(TypeName="OfferInstanceUserType"/*,Namespace=Declarations.SchemaVersion*/),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceUserType
	{

		[XmlAttribute(AttributeName="op")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.DatabaseOperation __op;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __opSpecified;
		
		[XmlIgnore]
		public OfferSchema.DatabaseOperation op
		{ 
			get { return __op; }
			set { __op = value; __opSpecified = true; }
		}

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="userTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="integer"/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __userTypeId;
		
		[XmlIgnore]
		public string userTypeId
		{ 
			get { return __userTypeId; }
			set { __userTypeId = value; }
		}

		public OfferInstanceUserType()
		{
		}
	}


	[XmlRoot(ElementName="Offer.xsd.Data"/*,Namespace=Declarations.SchemaVersion*/,IsNullable=false),Serializable]
	public class Data
	{

		[XmlElement(Type=typeof(OfferSchema.Offer),ElementName="Offer",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferSchema.Offer __Offer;
		
		[XmlIgnore]
		public OfferSchema.Offer Offer
		{
			get
			{
				if (__Offer == null) __Offer = new OfferSchema.Offer();		
				return __Offer;
			}
			set {__Offer = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.OfferStore),ElementName="OfferStore",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferStoreCollection __OfferStoreCollection;
		
		[XmlIgnore]
		public OfferStoreCollection OfferStoreCollection
		{
			get
			{
				if (__OfferStoreCollection == null) __OfferStoreCollection = new OfferStoreCollection();
				return __OfferStoreCollection;
			}
			set {__OfferStoreCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.OfferInstance),ElementName="OfferInstance",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferInstanceCollection __OfferInstanceCollection;
		
		[XmlIgnore]
		public OfferInstanceCollection OfferInstanceCollection
		{
			get
			{
				if (__OfferInstanceCollection == null) __OfferInstanceCollection = new OfferInstanceCollection();
				return __OfferInstanceCollection;
			}
			set {__OfferInstanceCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.Promotion),ElementName="Promotion",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public PromotionCollection __PromotionCollection;
		
		[XmlIgnore]
		public PromotionCollection PromotionCollection
		{
			get
			{
				if (__PromotionCollection == null) __PromotionCollection = new PromotionCollection();
				return __PromotionCollection;
			}
			set {__PromotionCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.ProviderTerm),ElementName="ProviderTerm",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ProviderTermCollection __ProviderTermCollection;
		
		[XmlIgnore]
		public ProviderTermCollection ProviderTermCollection
		{
			get
			{
				if (__ProviderTermCollection == null) __ProviderTermCollection = new ProviderTermCollection();
				return __ProviderTermCollection;
			}
			set {__ProviderTermCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.ProviderTermGameContentInstance),ElementName="ProviderTermGameContentInstance",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ProviderTermGameContentInstanceCollection __ProviderTermGameContentInstanceCollection;
		
		[XmlIgnore]
		public ProviderTermGameContentInstanceCollection ProviderTermGameContentInstanceCollection
		{
			get
			{
				if (__ProviderTermGameContentInstanceCollection == null) __ProviderTermGameContentInstanceCollection = new ProviderTermGameContentInstanceCollection();
				return __ProviderTermGameContentInstanceCollection;
			}
			set {__ProviderTermGameContentInstanceCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.ProviderTermGameContentInstanceAsset),ElementName="ProviderTermGameContentInstanceAsset",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ProviderTermGameContentInstanceAssetCollection __ProviderTermGameContentInstanceAssetCollection;
		
		[XmlIgnore]
		public ProviderTermGameContentInstanceAssetCollection ProviderTermGameContentInstanceAssetCollection
		{
			get
			{
				if (__ProviderTermGameContentInstanceAssetCollection == null) __ProviderTermGameContentInstanceAssetCollection = new ProviderTermGameContentInstanceAssetCollection();
				return __ProviderTermGameContentInstanceAssetCollection;
			}
			set {__ProviderTermGameContentInstanceAssetCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.ProviderTermMediaInstance),ElementName="ProviderTermMediaInstance",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ProviderTermMediaInstanceCollection __ProviderTermMediaInstanceCollection;
		
		[XmlIgnore]
		public ProviderTermMediaInstanceCollection ProviderTermMediaInstanceCollection
		{
			get
			{
				if (__ProviderTermMediaInstanceCollection == null) __ProviderTermMediaInstanceCollection = new ProviderTermMediaInstanceCollection();
				return __ProviderTermMediaInstanceCollection;
			}
			set {__ProviderTermMediaInstanceCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.ProviderTermMediaInstanceClientType),ElementName="ProviderTermMediaInstanceClientType",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ProviderTermMediaInstanceClientTypeCollection __ProviderTermMediaInstanceClientTypeCollection;
		
		[XmlIgnore]
		public ProviderTermMediaInstanceClientTypeCollection ProviderTermMediaInstanceClientTypeCollection
		{
			get
			{
				if (__ProviderTermMediaInstanceClientTypeCollection == null) __ProviderTermMediaInstanceClientTypeCollection = new ProviderTermMediaInstanceClientTypeCollection();
				return __ProviderTermMediaInstanceClientTypeCollection;
			}
			set {__ProviderTermMediaInstanceClientTypeCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.OfferInstanceProviderTerm),ElementName="OfferInstanceProviderTerm",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferInstanceProviderTermCollection __OfferInstanceProviderTermCollection;
		
		[XmlIgnore]
		public OfferInstanceProviderTermCollection OfferInstanceProviderTermCollection
		{
			get
			{
				if (__OfferInstanceProviderTermCollection == null) __OfferInstanceProviderTermCollection = new OfferInstanceProviderTermCollection();
				return __OfferInstanceProviderTermCollection;
			}
			set {__OfferInstanceProviderTermCollection = value;}
		}

		[XmlElement(Type=typeof(OfferSchema.OfferInstanceUserType),ElementName="OfferInstanceUserType",IsNullable=false,Form=XmlSchemaForm.Qualified/*,Namespace=Declarations.SchemaVersion*/)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferInstanceUserTypeCollection __OfferInstanceUserTypeCollection;
		
		[XmlIgnore]
		public OfferInstanceUserTypeCollection OfferInstanceUserTypeCollection
		{
			get
			{
				if (__OfferInstanceUserTypeCollection == null) __OfferInstanceUserTypeCollection = new OfferInstanceUserTypeCollection();
				return __OfferInstanceUserTypeCollection;
			}
			set {__OfferInstanceUserTypeCollection = value;}
		}

		public Data()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\TestDataGen.cs ===
using System;
using System.Xml;
using System.Collections;
using System.IO;
using System.Xml.Serialization;
using System.Text;
using TestDataSchema;
using GameSchema;
using System.Diagnostics;
using System.Text.RegularExpressions;

using OfferSchema;

namespace TestDataGen
{
    class Settings {
        public bool clearIds;
    }
    public class TestDataGen
    {
        
        static int Main(string[] args)
        {
            Settings setting = new Settings();
            string filename;
            if (args.Length == 0)
                filename = "sample2.xml";

            else
            {
                if (args.Length == 1)
                    filename = args[0];
                else
                    if (args.Length == 2)
                    {
                        switch (args[0])
                        {
                            case "-c": setting.clearIds = true;
                                break;
                            default:
                                Console.Out.WriteLine("usage: testdata <filename>");
                                return 1;
                        }
                        filename = args[1];
                    }
                    else
                    {

                        Console.Out.WriteLine("usage: testdata <filename>");
                        return 1;
                    }
            }

            TestData data = Read(filename);

            XmlGenerator xmlGenerator = new XmlGenerator(data, setting);
            xmlGenerator.Create();
            Write(filename, data);
            return 0;
        }


        static TestData Read(string filename)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(TestData));
            FileStream    fileStream = new FileStream(filename, FileMode.Open);
            TestData  data = (TestData)serializer.Deserialize(fileStream);            
            fileStream.Close();
            return data;
        }

        static void Write(string filename, TestData data)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(TestData));
            TextWriter    textWriter = new StreamWriter(filename);
            serializer.Serialize(textWriter, data);
            textWriter.Close();
        }      
      
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\TestDataSchema.cs ===
// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.1
// Schema file: sample.xsd
// Creation Date: 7/2/2007 5:10:20 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace TestDataSchema
{

	public struct Declarations
	{
		public const string SchemaVersion = "";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class RatingValueCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class CategoryCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class InTestGameCollection : ArrayList
	{
		public InTestGame Add(InTestGame obj)
		{
			base.Add(obj);
			return obj;
		}

		public InTestGame Add()
		{
			return Add(new InTestGame());
		}

		public void Insert(int index, InTestGame obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(InTestGame obj)
		{
			base.Remove(obj);
		}

		new public InTestGame this[int index]
		{
			get { return (InTestGame) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestContentInstanceCollection : ArrayList
	{
		public TestDataSchema.TestContentInstance Add(TestDataSchema.TestContentInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public TestDataSchema.TestContentInstance Add()
		{
			return Add(new TestDataSchema.TestContentInstance());
		}

		public void Insert(int index, TestDataSchema.TestContentInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(TestDataSchema.TestContentInstance obj)
		{
			base.Remove(obj);
		}

		new public TestDataSchema.TestContentInstance this[int index]
		{
			get { return (TestDataSchema.TestContentInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestGameCollection : ArrayList
	{
		public TestGame Add(TestGame obj)
		{
			base.Add(obj);
			return obj;
		}

		public TestGame Add()
		{
			return Add(new TestGame());
		}

		public void Insert(int index, TestGame obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(TestGame obj)
		{
			base.Remove(obj);
		}

		new public TestGame this[int index]
		{
			get { return (TestGame) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestOfferInstanceCollection : ArrayList
	{
		public TestOfferInstance Add(TestOfferInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public TestOfferInstance Add()
		{
			return Add(new TestOfferInstance());
		}

		public void Insert(int index, TestOfferInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(TestOfferInstance obj)
		{
			base.Remove(obj);
		}

		new public TestOfferInstance this[int index]
		{
			get { return (TestOfferInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestGameContentCollection : ArrayList
	{
		public TestGameContent Add(TestGameContent obj)
		{
			base.Add(obj);
			return obj;
		}

		public TestGameContent Add()
		{
			return Add(new TestGameContent());
		}

		public void Insert(int index, TestGameContent obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(TestGameContent obj)
		{
			base.Remove(obj);
		}

		new public TestGameContent this[int index]
		{
			get { return (TestGameContent) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestStoreCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlType(TypeName="TestContentInstance"),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestContentInstance
	{

		[XmlElement(ElementName="ContentInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __ContentInstanceId;
		
		[XmlIgnore]
		public string ContentInstanceId
		{ 
			get { return __ContentInstanceId; }
			set { __ContentInstanceId = value; }
		}

		[XmlElement(ElementName="liveContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __liveContentId;
		
		[XmlIgnore]
		public string liveContentId
		{ 
			get { return __liveContentId; }
			set { __liveContentId = value; }
		}

		[XmlElement(Type=typeof(TestGameContentoffer),ElementName="TestGameContentoffer",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestGameContentoffer __TestGameContentoffer;
		
		[XmlIgnore]
		public TestGameContentoffer TestGameContentoffer
		{
			get
			{
				if (__TestGameContentoffer == null) __TestGameContentoffer = new TestGameContentoffer();		
				return __TestGameContentoffer;
			}
			set {__TestGameContentoffer = value;}
		}

		public TestContentInstance()
		{
		}
	}


	[XmlType(TypeName="TestGameContentoffer"),Serializable]
	public class TestGameContentoffer
	{

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(Type=typeof(uint),ElementName="TestStore",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestStoreCollection __TestStoreCollection;
		
		[XmlIgnore]
		public TestStoreCollection TestStoreCollection
		{
			get
			{
				if (__TestStoreCollection == null) __TestStoreCollection = new TestStoreCollection();
				return __TestStoreCollection;
			}
			set {__TestStoreCollection = value;}
		}

		[XmlElement(Type=typeof(TestOfferInstance),ElementName="TestOfferInstance",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestOfferInstanceCollection __TestOfferInstanceCollection;
		
		[XmlIgnore]
		public TestOfferInstanceCollection TestOfferInstanceCollection
		{
			get
			{
				if (__TestOfferInstanceCollection == null) __TestOfferInstanceCollection = new TestOfferInstanceCollection();
				return __TestOfferInstanceCollection;
			}
			set {__TestOfferInstanceCollection = value;}
		}

		public TestGameContentoffer()
		{
		}
	}


	[XmlType(TypeName="TestOfferInstance"),Serializable]
	public class TestOfferInstance
	{

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="startDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __startDate;
		
		[XmlIgnore]
		public string startDate
		{ 
			get { return __startDate; }
			set { __startDate = value; }
		}

		[XmlElement(ElementName="endDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __endDate;
		
		[XmlIgnore]
		public string endDate
		{ 
			get { return __endDate; }
			set { __endDate = value; }
		}

		[XmlElement(ElementName="requireduserTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __requireduserTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __requireduserTypeIdSpecified;
		
		[XmlIgnore]
		public uint requireduserTypeId
		{ 
			get { return __requireduserTypeId; }
			set { __requireduserTypeId = value; __requireduserTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="country",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __country;
		
		[XmlIgnore]
		public string country
		{ 
			get { return __country; }
			set { __country = value; }
		}

		[XmlElement(ElementName="VisiblitlyLevel",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __VisiblitlyLevel;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __VisiblitlyLevelSpecified;
		
		[XmlIgnore]
		public uint VisiblitlyLevel
		{ 
			get { return __VisiblitlyLevel; }
			set { __VisiblitlyLevel = value; __VisiblitlyLevelSpecified = true; }
		}

		public TestOfferInstance()
		{
		}
	}


	[XmlRoot(ElementName="TestData",IsNullable=false),Serializable]
	public class TestData
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
            return TestGameCollection.GetEnumerator();
		}

		public TestGame Add(TestGame obj)
		{
			return TestGameCollection.Add(obj);
		}

		[XmlIgnore]
		public TestGame this[int index]
		{
			get { return (TestGame) TestGameCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return TestGameCollection.Count; }
        }

        public void Clear()
		{
			TestGameCollection.Clear();
        }

		public TestGame Remove(int index) 
		{ 
            TestGame obj = TestGameCollection[index];
            TestGameCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            TestGameCollection.Remove(obj);
        }

		[XmlElement(Type=typeof(TestGame),ElementName="TestGame",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestGameCollection __TestGameCollection;
		
		[XmlIgnore]
		public TestGameCollection TestGameCollection
		{
			get
			{
				if (__TestGameCollection == null) __TestGameCollection = new TestGameCollection();
				return __TestGameCollection;
			}
			set {__TestGameCollection = value;}
		}

		public TestData()
		{
		}
	}


	[XmlType(TypeName="TestGame"),Serializable]
	public class TestGame
	{

		[XmlElement(ElementName="MediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __MediaId;
		
		[XmlIgnore]
		public string MediaId
		{ 
			get { return __MediaId; }
			set { __MediaId = value; }
		}

		[XmlElement(ElementName="Title",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Title;
		
		[XmlIgnore]
		public string Title
		{ 
			get { return __Title; }
			set { __Title = value; }
		}

		[XmlElement(ElementName="MediaType",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __MediaType;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __MediaTypeSpecified;
		
		[XmlIgnore]
		public uint MediaType
		{ 
			get { return __MediaType; }
			set { __MediaType = value; __MediaTypeSpecified = true; }
		}

		[XmlElement(ElementName="VisibilityDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __VisibilityDate;
		
		[XmlIgnore]
		public string VisibilityDate
		{ 
			get { return __VisibilityDate; }
			set { __VisibilityDate = value; }
		}

		[XmlElement(Type=typeof(uint),ElementName="Category",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public CategoryCollection __CategoryCollection;
		
		[XmlIgnore]
		public CategoryCollection CategoryCollection
		{
			get
			{
				if (__CategoryCollection == null) __CategoryCollection = new CategoryCollection();
				return __CategoryCollection;
			}
			set {__CategoryCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="RatingValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public RatingValueCollection __RatingValueCollection;
		
		[XmlIgnore]
		public RatingValueCollection RatingValueCollection
		{
			get
			{
				if (__RatingValueCollection == null) __RatingValueCollection = new RatingValueCollection();
				return __RatingValueCollection;
			}
			set {__RatingValueCollection = value;}
		}

		[XmlElement(ElementName="LiveTitleId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LiveTitleId;
		
		[XmlIgnore]
		public string LiveTitleId
		{ 
			get { return __LiveTitleId; }
			set { __LiveTitleId = value; }
		}

		[XmlElement(Type=typeof(TestGameContent),ElementName="TestGameContent",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestGameContentCollection __TestGameContentCollection;
		
		[XmlIgnore]
		public TestGameContentCollection TestGameContentCollection
		{
			get
			{
				if (__TestGameContentCollection == null) __TestGameContentCollection = new TestGameContentCollection();
				return __TestGameContentCollection;
			}
			set {__TestGameContentCollection = value;}
		}

		[XmlElement(Type=typeof(InTestGame),ElementName="InTestGame",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public InTestGameCollection __InTestGameCollection;
		
		[XmlIgnore]
		public InTestGameCollection InTestGameCollection
		{
			get
			{
				if (__InTestGameCollection == null) __InTestGameCollection = new InTestGameCollection();
				return __InTestGameCollection;
			}
			set {__InTestGameCollection = value;}
		}

		public TestGame()
		{
		}
	}


	[XmlType(TypeName="TestGameContent"),Serializable]
	public class TestGameContent
	{

		[XmlElement(ElementName="ContentMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __ContentMediaId;
		
		[XmlIgnore]
		public string ContentMediaId
		{ 
			get { return __ContentMediaId; }
			set { __ContentMediaId = value; }
		}

		[XmlElement(ElementName="VisibilityDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __VisibilityDate;
		
		[XmlIgnore]
		public string VisibilityDate
		{ 
			get { return __VisibilityDate; }
			set { __VisibilityDate = value; }
		}

		[XmlElement(ElementName="LiveContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LiveContentId;
		
		[XmlIgnore]
		public string LiveContentId
		{ 
			get { return __LiveContentId; }
			set { __LiveContentId = value; }
		}

		[XmlElement(ElementName="MediaType",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __MediaType;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __MediaTypeSpecified;
		
		[XmlIgnore]
		public uint MediaType
		{ 
			get { return __MediaType; }
			set { __MediaType = value; __MediaTypeSpecified = true; }
		}

		[XmlElement(Type=typeof(uint),ElementName="Category",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public CategoryCollection __CategoryCollection;
		
		[XmlIgnore]
		public CategoryCollection CategoryCollection
		{
			get
			{
				if (__CategoryCollection == null) __CategoryCollection = new CategoryCollection();
				return __CategoryCollection;
			}
			set {__CategoryCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="RatingValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public RatingValueCollection __RatingValueCollection;
		
		[XmlIgnore]
		public RatingValueCollection RatingValueCollection
		{
			get
			{
				if (__RatingValueCollection == null) __RatingValueCollection = new RatingValueCollection();
				return __RatingValueCollection;
			}
			set {__RatingValueCollection = value;}
		}

		[XmlElement(Type=typeof(TestDataSchema.TestContentInstance),ElementName="TestContentInstance",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestContentInstanceCollection __TestContentInstanceCollection;
		
		[XmlIgnore]
		public TestContentInstanceCollection TestContentInstanceCollection
		{
			get
			{
				if (__TestContentInstanceCollection == null) __TestContentInstanceCollection = new TestContentInstanceCollection();
				return __TestContentInstanceCollection;
			}
			set {__TestContentInstanceCollection = value;}
		}

		public TestGameContent()
		{
		}
	}


	[XmlType(TypeName="InTestGame"),Serializable]
	public class InTestGame
	{

		[XmlElement(ElementName="MediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __MediaId;
		
		[XmlIgnore]
		public string MediaId
		{ 
			get { return __MediaId; }
			set { __MediaId = value; }
		}

		[XmlElement(ElementName="VisibilityDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __VisibilityDate;
		
		[XmlIgnore]
		public string VisibilityDate
		{ 
			get { return __VisibilityDate; }
			set { __VisibilityDate = value; }
		}

		[XmlElement(ElementName="LiveTitleId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LiveTitleId;
		
		[XmlIgnore]
		public string LiveTitleId
		{ 
			get { return __LiveTitleId; }
			set { __LiveTitleId = value; }
		}

		[XmlElement(ElementName="MediaType",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __MediaType;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __MediaTypeSpecified;
		
		[XmlIgnore]
		public uint MediaType
		{ 
			get { return __MediaType; }
			set { __MediaType = value; __MediaTypeSpecified = true; }
		}

		[XmlElement(Type=typeof(uint),ElementName="Category",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public CategoryCollection __CategoryCollection;
		
		[XmlIgnore]
		public CategoryCollection CategoryCollection
		{
			get
			{
				if (__CategoryCollection == null) __CategoryCollection = new CategoryCollection();
				return __CategoryCollection;
			}
			set {__CategoryCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="RatingValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public RatingValueCollection __RatingValueCollection;
		
		[XmlIgnore]
		public RatingValueCollection RatingValueCollection
		{
			get
			{
				if (__RatingValueCollection == null) __RatingValueCollection = new RatingValueCollection();
				return __RatingValueCollection;
			}
			set {__RatingValueCollection = value;}
		}

		[XmlElement(Type=typeof(TestDataSchema.TestContentInstance),ElementName="TestContentInstance",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestContentInstanceCollection __TestContentInstanceCollection;
		
		[XmlIgnore]
		public TestContentInstanceCollection TestContentInstanceCollection
		{
			get
			{
				if (__TestContentInstanceCollection == null) __TestContentInstanceCollection = new TestContentInstanceCollection();
				return __TestContentInstanceCollection;
			}
			set {__TestContentInstanceCollection = value;}
		}

		public InTestGame()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\testdata\XmlGen.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Xml.Serialization;
using System.IO;

using GameSchema;
using TestDataSchema;

using OfferSchema;


namespace TestDataGen
{


    [XmlRootAttribute("EMSCatalog", Namespace = "urn:schema-microsoft-ems-catalog-private", IsNullable = false)]
    public class EMSCatalog
    {

        public EMSCatalog()
        {
            OfferSaveList = new List<OfferSave>();
        }


        [XmlElement("OfferSave")]
        public List<OfferSave> OfferSaveList;
    }


    public class OfferSave
    {
        [XmlElement("xmlData")]
        public xmlData xmlData;

        public OfferSave()
        {
        }
    }


    [Serializable]
    public class xmlData
    {

         [XmlElement(Type = typeof(OfferSchema.Data), ElementName = "Offer.xsd.Data", IsNullable = false)]
         public OfferSchema.Data __Offer_xsd_Data;

         [XmlIgnore]
         public OfferSchema.Data Offer_xsdData
         {
             get
             {
                 if (__Offer_xsd_Data == null) __Offer_xsd_Data = new OfferSchema.Data();
                 return __Offer_xsd_Data;
             }
             set { __Offer_xsd_Data = value; }
         }

        public xmlData()
        {
        }
    }
    class XmlGenerator
    {
        Settings setting;        
        TestData inputData;
        GameContent gameContent;
        Game gameElement;
        GameContentOffer contentOffer;
        Game game;
        string tGameTitle;
        ArrayList injectionLst;
        ArrayList emsOfferLst;
        int mediaCount = 0;
        public const string ENGLISH = "1033";
        public const string FRENCH = "1036";
        public const string GERMAN = "1031";
        public const String Japanese = "1041";

        EMSCatalog emsCatalog; 
      

        public enum MediaTypeEnum
        {
            X360Game = 1,
            ArcadeDemo =5, 
            GameContent = 18,//T1
            X360Demo =19,//T2
            ArcadeGame = 23,  //T3       
            GameTile = 22,
            X360Theme = 20,
            Xbox1Game = 21
        };


        bool IsMediaContentType(MediaTypeEnum t){
           if(t == MediaTypeEnum.X360Theme ||t == MediaTypeEnum.GameContent ||t == MediaTypeEnum.GameTile) {
              return true;
           }
           else return false;
        }

        string GetTypeStr(MediaTypeEnum t) {
            switch (t) { 
                case MediaTypeEnum.GameContent: return "Content";
                case MediaTypeEnum.X360Demo: return "360Demo";
                case MediaTypeEnum.ArcadeGame: return "Arcade";
                case MediaTypeEnum.GameTile: return "GameTile";
                case MediaTypeEnum.X360Theme: return "360Theme";
                case MediaTypeEnum.X360Game: return "360Game";      
                case MediaTypeEnum.Xbox1Game: return "Xbox1Game";
                case MediaTypeEnum.ArcadeDemo: return "ArcadeDemo";

            }
            return null;
        }



        class InjectObject {
            string MediaType;
            public GameData newXml;
            string guid;
            string title;
            string xmlClass;

            public InjectObject(string gId, string title, string mType, GameData inXml, string xmlClass)
            {
                this.MediaType = mType;
                this.newXml = inXml;
                this.guid = gId;
                this.xmlClass = xmlClass;
                this.title = title;
            }
            public string FileName() {
                if (xmlClass == "") return title + "." + MediaType + "." +  guid + ".xml";
                else
                    return title + "." + MediaType + "." + xmlClass + "." + guid + ".xml";
            }
        }

        public XmlGenerator(TestData testDataXml, Settings setting)
        {
            inputData = testDataXml;
            game = null;
            gameContent = null;
            contentOffer = null;
            gameElement = null;
            this.setting = setting;

            emsCatalog = new EMSCatalog();
            emsCatalog.OfferSaveList = new List<OfferSave>();

        }

        public void Create()
        {
            injectionLst = new ArrayList();
            emsOfferLst = new ArrayList();
            
            foreach (TestGame tGame in inputData.TestGameCollection)
            {
                tGameTitle = tGame.Title;
                GenerateGame(tGame);
               
                foreach (TestGameContent tContent in tGame.TestGameContentCollection)
                {
                    ArrayList instanceIds = GenerateGameContent(tContent);                   
                    int i = 0;
                    foreach (TestContentInstance tContentInstance in tContent.TestContentInstanceCollection)
                    {

                        GenerateContentOffer(tContentInstance, instanceIds[i++].ToString(), gameContent.mediaInfo);
                    }
                }

                foreach ( InTestGame  inTestGame in tGame.InTestGameCollection)
                {
                    ArrayList instanceIds = GenerateGameContent(inTestGame);
                    int i = 0;
                    foreach (TestContentInstance tContentInstance in inTestGame.TestContentInstanceCollection)
                    {
                        GenerateContentOffer(tContentInstance, instanceIds[i++].ToString(), gameElement.mediaInfo);
                    }
                }
            }

            Save();
            SaveOffer();
            return;
                    
        }
        // XmlSerializerNamespaces ns = new XmlSerializerNamespaces();


        void Save() {
            foreach (InjectObject o in injectionLst)
            {
                XmlSerializerNamespaces ns = new XmlSerializerNamespaces();
                ns.Add("g", GameSchema.Declarations.SchemaVersion);

                XmlSerializer serializer = new XmlSerializer(typeof(GameData));
                
                TextWriter textWriter = new StreamWriter(o.FileName());
                serializer.Serialize(textWriter, o.newXml,ns);
                textWriter.Close();
            }

        }

        void SaveOffer() {

            XmlSerializer serializer1 = new XmlSerializer(typeof(EMSCatalog));
            TextWriter textWriter1 = new StreamWriter("emsoffer.xml");
            serializer1.Serialize(textWriter1, emsCatalog);
            textWriter1.Close();
        }



        bool HasContent(TestGame tGame){
            foreach (InTestGame inTestGame in tGame.InTestGameCollection)
            {
                if (inTestGame.MediaType == tGame.MediaType) return true;
            }
            return false;        
        }


        void GenerateGame(TestGame tGame)
        {
            GameData newXml = new GameData();
            game = new Game();

            game.liveTitleId = CreateLiveTitleId(tGame);           
            game.mediaInfo = CreateMediaInfo(tGame);
            game.gameLocaleInfoCollection = CreateGameLocaleInfoCollection(tGame);
            tGame.MediaId = game.mediaInfo.mediaId;

            if (!HasContent(tGame))
            {
                newXml.gameCollection.Add(game);
                injectionLst.Add(new InjectObject(game.mediaInfo.mediaId, tGame.Title, GetTypeStr(((MediaTypeEnum)tGame.MediaType)), newXml, ""));
            }            
        }




        //1 english and 1 french customGenre
        GameLocaleInfoCollection CreateGameLocaleInfoCollection(TestGame tGame)
        {
            GameLocaleInfoCollection list=null;
            GameLocaleInfo gLocaleInfo;
            list = new GameLocaleInfoCollection();

            if (!tGame.Title.Contains("FROnly"))
            {
                
                gLocaleInfo = new GameLocaleInfo();
                gLocaleInfo.lcid = ENGLISH;
                gLocaleInfo.customGenre = tGame.Title + "Custmo";
                list.Add(gLocaleInfo);
            }

            if (!tGame.Title.Contains("USOnly"))
            {

                gLocaleInfo = new GameLocaleInfo();
                gLocaleInfo.lcid = FRENCH;
                gLocaleInfo.customGenre = tGame.Title + "French Custmo";
                list.Add(gLocaleInfo);                
            }
            return list;
        }


        //For content, the category and rating would use from game title
        //english and french
        MediaInfo CreateMediaInfo(TestGame tGame)
        {
            MediaInfo info = new MediaInfo();

            info.mediaId = CreateUniqueGuid( tGame.MediaId);
            tGame.MediaId = info.mediaId;
            info.mediaTypeId = tGame.MediaType;
            info.mediaLocaleInfoCollection = new MediaLocaleInfoCollection();
            //create 1 mediaLocal right now
            if (!tGame.Title.Contains("FROnly"))
            {
                CatMediaLocale mLocale = new CatMediaLocale(tGame.Title, ENGLISH);
                
                info.mediaLocaleInfoCollection.Add(mLocale.Convert());

            }

            //create 1 mediaLocal right now
            if (!tGame.Title.Contains("USOnly"))
            {
                CatMediaLocale mLocale1 = new CatMediaLocale(tGame.Title, FRENCH);
                info.mediaLocaleInfoCollection.Add(mLocale1.Convert());                
            }

            CatMediaLocale mLocale11 = new CatMediaLocale(tGame.Title, Japanese);
            info.mediaLocaleInfoCollection.Add(mLocale11.Convert()); 

            info.mediaLocaleMappingCollection = new LocaleMappingCollection();
            LocaleMapping lMapping;
            foreach (MediaLocaleInfo localeInfo in info.mediaLocaleInfoCollection) {
                lMapping = new LocaleMapping();
                lMapping.lcidFrom = localeInfo.lcid;
                lMapping.lcidTo = localeInfo.lcid;
                info.mediaLocaleMappingCollection.Add(lMapping);

                if (localeInfo.lcid == "1036")
                {
                    //fr-CA
                    lMapping = new LocaleMapping();
                    lMapping.lcidFrom = "3084";
                    lMapping.lcidTo = "1036";
                    info.mediaLocaleMappingCollection.Add(lMapping);
                
                }                
            }

            info.categoryCollection = CreateCatagoryCollection(tGame);
            info.providerId = "2";

            //?????
            //info.ratingDescriptorCollection = CreateRatingDescriptorCollection(tGame);
            info.ratingValueCollection = CreateRatingValueCollection(tGame);

            DateTime t;
            info.visibilityDate = SetDate(tGame.VisibilityDate, out t);
            info.originalReleaseDate = t.AddDays(-1 * (Random(10) + 1)).ToShortDateString();
            info.displayOriginalReleaseDate = t.AddDays(-1 * (Random(10) + 1)).ToShortDateString();

            //info.mediaRelationshipCollection = CreateMediaRelationshipCollection();
            return info;
        }


        MediaLocaleInfo CopyGameLocalInfoToContent(MediaLocaleInfo gLocaleInfo, MediaTypeEnum mType ) {
            MediaLocaleInfo contentLocaleInfo = new MediaLocaleInfo();

            string countStr = "";
            if (tGameTitle.Contains("Paging"))
            {                
                mediaCount++;
            }
            countStr = mediaCount.ToString();
            string mTypeStr = GetTypeStr(mType);
            contentLocaleInfo.description = gLocaleInfo.description;
            contentLocaleInfo.lcid = gLocaleInfo.lcid;
            contentLocaleInfo.reducedDescription = gLocaleInfo.reducedDescription + mTypeStr + countStr;
            contentLocaleInfo.reducedTitle = gLocaleInfo.reducedTitle + mTypeStr + countStr;

            contentLocaleInfo.title = gLocaleInfo.title + mTypeStr + countStr;
            contentLocaleInfo.titleSort = gLocaleInfo.titleSort + mTypeStr + countStr;
            return contentLocaleInfo;
        }

        MediaInfo CreateMediaInfo(TestGameContent tContent)
        {
            MediaInfo info = new MediaInfo();
            
            info.mediaId = CreateUniqueGuid( tContent.ContentMediaId);
            tContent.ContentMediaId = info.mediaId;
            info.mediaTypeId = SetContentMediaType(tContent);
            info.mediaLocaleInfoCollection = new MediaLocaleInfoCollection();
            //create 1 mediaLocal right now   
            //get mediaLocaleInfo from game and add content type string 
            foreach(MediaLocaleInfo localeInfo in game.mediaInfo.mediaLocaleInfoCollection ) {
                info.mediaLocaleInfoCollection.Add(CopyGameLocalInfoToContent(localeInfo, (MediaTypeEnum)info.mediaTypeId));   
            }
            //copy localmapping from game
            info.mediaLocaleMappingCollection = new LocaleMappingCollection();
            foreach (LocaleMapping localeInfo in game.mediaInfo.mediaLocaleMappingCollection)
            {
                info.mediaLocaleMappingCollection.Add(localeInfo);
            }

            //copy from game dates
            info.displayOriginalReleaseDate = game.mediaInfo.visibilityDate;
            info.originalReleaseDate = info.displayOriginalReleaseDate;
            info.visibilityDate = info.displayOriginalReleaseDate;          
            info.mediaRelationshipCollection = CreateMediaRelationshipCollection();

            info.providerId = "2";            
            
            return info;
        }

        MediaInfo CreateMediaInfo(InTestGame inTestGame)
        {
            MediaInfo info = new MediaInfo();

            if (inTestGame.MediaType == game.mediaInfo.mediaTypeId)
            {
                info.mediaId = game.mediaInfo.mediaId;
            }
            else
                info.mediaId = CreateUniqueGuid(inTestGame.MediaId);
            
            inTestGame.MediaId = info.mediaId;
            info.mediaTypeId = inTestGame.MediaType;

            info.mediaLocaleInfoCollection = new MediaLocaleInfoCollection();
            //create 1 mediaLocal right now   
            //get mediaLocaleInfo from game and add content type string 
            foreach (MediaLocaleInfo localeInfo in game.mediaInfo.mediaLocaleInfoCollection)
            {
                info.mediaLocaleInfoCollection.Add(CopyGameLocalInfoToContent(localeInfo, (MediaTypeEnum)info.mediaTypeId));
            }
            //copy localmapping from game
            info.mediaLocaleMappingCollection = new LocaleMappingCollection();
            foreach (LocaleMapping localeInfo in game.mediaInfo.mediaLocaleMappingCollection)
            {
                info.mediaLocaleMappingCollection.Add(localeInfo);
            }

            //copy from game dates
            info.displayOriginalReleaseDate = game.mediaInfo.visibilityDate;
            info.originalReleaseDate = info.displayOriginalReleaseDate;
            info.visibilityDate = info.displayOriginalReleaseDate;
            info.mediaRelationshipCollection = CreateMediaRelationshipCollection();

            info.ratingValueCollection = game.mediaInfo.ratingValueCollection;
            info.categoryCollection = game.mediaInfo.categoryCollection;
          
            info.providerId = "2";

            return info;
        }

        //take "past" and future to generate time.
        String SetDate(string timePoint, out DateTime t)
        {
            
            Debug.Assert(timePoint != null || timePoint != "");
            switch (timePoint)
            {
                case "past":
                    t = System.DateTime.Today.AddDays(-1 * (Random(365) + 1));
                    break;
                case "future":
                    t = System.DateTime.Today.AddDays(Random(365) + 1);
                    break;
                default:
                    try {
                        t = DateTime.Parse(timePoint);
                    }
                    catch {
                        t = System.DateTime.Today;
                    }
                    break;
            }
            //need to check????
            return t.ToShortDateString();
        }

        String SetDate(string timePoint)
        {
            DateTime t;
            Debug.Assert(timePoint != null || timePoint != "");
            switch (timePoint)
            {
                case "past":
                    t = System.DateTime.Today.AddDays(-3 * (Random(365) + 1));
                    break;
                case "future":
                    t = System.DateTime.Today.AddDays(Random(365) + 3);
                    break;
                default:
                    try
                    {
                        t = DateTime.Parse(timePoint);
                    }
                    catch
                    {
                        t = System.DateTime.Today;
                    }
                    break;
            }
            //need to check????
            return t.ToShortDateString();
        }

        DateTime SetDate1(string timePoint)
        {
            DateTime t;
            Debug.Assert(timePoint != null || timePoint != "");
            switch (timePoint)
            {
                case "past":
                    t = System.DateTime.Today.AddDays(-3 * (Random(365) + 1));
                    break;
                case "future":
                    t = System.DateTime.Today.AddDays(Random(365) + 3);
                    break;
                default:
                    try
                    {
                        t = DateTime.Parse(timePoint);
                    }
                    catch
                    {
                        t = System.DateTime.Today;
                    }
                    break;
            }
            //need to check????
            return t;
        }

  

        
        //randamly
        uint SetContentMediaType(TestGameContent tContent)
        {

            MediaTypeEnum[] values = { MediaTypeEnum.GameTile, MediaTypeEnum.GameContent};
            if (tContent.MediaType == 0) tContent.MediaType = (uint)values[Random(values.Length) - 1];
            return tContent.MediaType;
        }

        //only 1 instance for game
        GameContentInstance CreateGameContentInstance(TestContentInstance tContentInstance)
        {
            GameContentInstance instance = new GameContentInstance();
            instance.mediaInstance.mediaInstanceId = CreateUniqueGuid( tContentInstance.ContentInstanceId);
            instance.mediaInstance.isAdSupported = false;
            instance.mediaInstance.isAcquirable = true;
            tContentInstance.ContentInstanceId = instance.mediaInstance.mediaInstanceId;
            instance.encryptedPublicKey = "0x525341310801000000080000FF000000010001009B83D4D5DE16258EE515F2189D191CF8FE91A583AEA5A8953F01B2C934FBC7512DACFF38E6B67B084ADF98A3FD3181BFAAD16258C06C8F8ECD96CE6D03445993CEEA8DF4D46F6F345D50F1AE997F1D9215F36BDBF9958B3F54AD37B54F0A587B48A29F9EA316C8BD37DA9A37E63F101BA84FA314FABE12FBD7194CEDADA2958F398CC4690F7DB8840A995C532FDEF21BC51D4C433C97A7BA8FC3226739C262743A0CB557013A67C6DE0C0BF6080164DBBD81E4DC092ED0F1D0D61EBA3836F44ADDCA39EB76CF95DC484CF2438CD944267A9EEB99A3D8FB30A81442828DB431B31AD52BF632BC62C0FE812049E7F7582F2DA61B4162C7E032025D82ECA3E46C9B0000000000000000" ;
            instance.encryptedSymKey = "0x2FECE1F4E272D96473F7DDD5844DEBA9";

            instance.installSize = (uint)Random(500)+1;
            instance.liveContentId = CreateContentLiveId(tContentInstance);
            instance.packageSize = (uint)Random(500)+1;
            instance.url = "http://somewhere.net/" + tGameTitle + ".xzp";            

            return instance;
        
        }

        ArrayList GenerateGameContent(TestGameContent tContent)
        {
            GameData newXml = new GameData();
            gameContent = new GameContent();
            ArrayList contentInstanceIds = null;
           // gameContent.gameContentInstanceCollection = 
            gameContent.gameMediaId = game.mediaInfo.mediaId;
            //gameContent.mediaTypeId = SetContentMediaType(tContent);
            gameContent.mediaInfo = CreateMediaInfo(tContent);
            gameContent.gameDownloadInfo.providerCategoryId = 0;
            

            foreach (TestContentInstance tContentInstance in tContent.TestContentInstanceCollection){   
                if(gameContent.gameDownloadInfo.gameContentInstanceCollection == null) 
                    gameContent.gameDownloadInfo.gameContentInstanceCollection = new GameContentInstanceCollection();
                GameContentInstance cInstance = CreateGameContentInstance(tContentInstance);
                gameContent.gameDownloadInfo.gameContentInstanceCollection.Add(cInstance);
             
                if (contentInstanceIds == null) contentInstanceIds = new ArrayList();
                contentInstanceIds.Add(cInstance.mediaInstance.mediaInstanceId);
            }
                    
            
            newXml.gameContentCollection.Add(gameContent);
            injectionLst.Add(new InjectObject(gameContent.mediaInfo.mediaId, tGameTitle, GetTypeStr((MediaTypeEnum)gameContent.mediaInfo.mediaTypeId), newXml, ""));
            return contentInstanceIds;
        }

        ArrayList GenerateGameContent(InTestGame inTestGame)
        {
            GameData newXml = new GameData();
            gameElement = new Game();
            ArrayList contentInstanceIds = null;
            gameElement.liveTitleId = game.liveTitleId;
            gameElement.mediaInfo = CreateMediaInfo(inTestGame);

            gameElement.gameLocaleInfoCollection = new GameLocaleInfoCollection();
            
            foreach (GameLocaleInfo lInfo in game.gameLocaleInfoCollection)
            {
                gameElement.gameLocaleInfoCollection.Add(lInfo);
            }

            gameElement.gameDownloadInfo.providerCategoryId = 0;


            foreach (TestContentInstance tContentInstance in inTestGame.TestContentInstanceCollection)
            {
                if (gameElement.gameDownloadInfo.gameContentInstanceCollection == null)
                    gameElement.gameDownloadInfo.gameContentInstanceCollection = new GameContentInstanceCollection();
                GameContentInstance cInstance = CreateGameContentInstance(tContentInstance);
                gameElement.gameDownloadInfo.gameContentInstanceCollection.Add(cInstance);

                if (contentInstanceIds == null) contentInstanceIds = new ArrayList();
                contentInstanceIds.Add(cInstance.mediaInstance.mediaInstanceId);
            }


            newXml.gameCollection.Add(gameElement);
            injectionLst.Add(new InjectObject(gameElement.mediaInfo.mediaId, tGameTitle, GetTypeStr((MediaTypeEnum)gameElement.mediaInfo.mediaTypeId), newXml, ""));
            return contentInstanceIds;
        }


        void GenerateContentOffer(TestContentInstance tContentInstance, string contentInstanceId, MediaInfo mInfo)
        {
            if (tContentInstance.TestGameContentoffer.TestOfferInstanceCollection.Count == 0) return;
            GameData newXml = new GameData();
            GameContentOffer contentOffer = new GameContentOffer();

            OfferSave emsSave = new OfferSave();
            emsSave.xmlData = new xmlData();
            emsSave.xmlData.Offer_xsdData = new Data();

            Data emsOffer = emsSave.xmlData.Offer_xsdData;

            //Data emsOffer = new Data();
            contentOffer.gameContentProviderTerms = CreateGameContentProviderTerms();
            contentOffer.gameContentProviderTerms.mediaInstanceId = contentInstanceId;
            contentOffer.gameContentProviderTerms.providerTermId = CreateUniqueGuid(null);

           //EMS ProviderTerm, for now ,only one providerterm is supported.
            bool notInital = true;
            ProviderTerm pTerm = new ProviderTerm();            
            pTerm.externalLicenserContentId="externalLicenserContentId";
            pTerm.externalProviderContentId="externalProviderContentId";
            pTerm.modifiedBy ="pefan";
            pTerm.licenserId ="1";//to do
            pTerm.automaticallyGenerateOffer ="0";
            pTerm.wholesalePrice =0;
            pTerm.providerTermId =contentOffer.gameContentProviderTerms.providerTermId;
            pTerm.providerId ="1";//1: synccast, 6 microsoft. see provider table.
            pTerm.mediaId = mInfo.mediaId;            
            //pTerm.countryCode =;//???????? set at last
            //pTerm.endDateTime =;//??
            //pTerm.startDateTime=;//???
            //pTerm.wholesalePriceCurrencyCode=0;                       
            ProviderTermCollection pTermCollection = new ProviderTermCollection();
            pTermCollection.Add(pTerm);
            pTerm.op = DatabaseOperation.Add;
            emsOffer.ProviderTermCollection = pTermCollection;

            //EMS ProviderTermMediaInstance
            ProviderTermMediaInstance pTermMediaInstance = new ProviderTermMediaInstance();
            pTermMediaInstance.providerTermId = pTerm.providerTermId;
            pTermMediaInstance.mediaInstanceId = contentInstanceId;
            pTermMediaInstance.licenseTypeId = "1";//put for 1 now, to do, need to update licensetype table.
            ProviderTermMediaInstanceCollection pTermMediaInstanceCol= new ProviderTermMediaInstanceCollection();
            pTermMediaInstanceCol.Add(pTermMediaInstance);
            pTermMediaInstance.op = DatabaseOperation.Add;
            emsOffer.ProviderTermMediaInstanceCollection = pTermMediaInstanceCol;

            //EMS ProviderTermMediaInstanceClientType
            ProviderTermMediaInstanceClientType ptClientType = new ProviderTermMediaInstanceClientType();
            ptClientType.mediaInstanceId = contentInstanceId;
            ptClientType.providerTermId = pTerm.providerTermId;
            ptClientType.clientTypeId = "1"; //put for 1 (xbox client) now, to do
            ptClientType.op = DatabaseOperation.Add;
            ProviderTermMediaInstanceClientTypeCollection ptcCol = new ProviderTermMediaInstanceClientTypeCollection();
            ptcCol.Add(ptClientType);
            emsOffer.ProviderTermMediaInstanceClientTypeCollection = ptcCol;

            contentOffer.friendlyName = tGameTitle;

            contentOffer.offer.storeCollection = CreatestoreCollection(tContentInstance.TestGameContentoffer);
            contentOffer.offer.offerId = CreateUniqueGuid( tContentInstance.TestGameContentoffer.offerId);
            tContentInstance.TestGameContentoffer.offerId = contentOffer.offer.offerId;
            contentOffer.offer.metadataMediaId = mInfo.mediaId;
           
            // EMS Offer
            emsOffer.Offer.name = tGameTitle;
            emsOffer.Offer.offerId = contentOffer.offer.offerId;
            emsOffer.Offer.mediaId = mInfo.mediaId;
            emsOffer.Offer.op = DatabaseOperation.Add;

            //EMS Offer store
            emsOffer.OfferStoreCollection = new OfferStoreCollection();
            OfferStore oStore = new OfferStore();
            oStore.storeId = "100";
            oStore.offerId = emsOffer.Offer.offerId;
            oStore.op = DatabaseOperation.Add;
            emsOffer.OfferStoreCollection.Add(oStore);

            

            //create offer instance inside an offer
            //foreach (TestGameContentoffer tContentOffer in tContentInstance.TestGameContentofferCollection) {only 1 child under it. 
              //  foreach (TestOfferInstance tOfferInstance in tContentOffer.TestOfferInstanceCollection){
              foreach (TestOfferInstance tOfferInstance in tContentInstance.TestGameContentoffer.TestOfferInstanceCollection){
                if(contentOffer.offer.offerInstanceCollection == null) 
                    contentOffer.offer.offerInstanceCollection = new GameSchema.OfferInstanceCollection();
                
                contentOffer.offer.offerInstanceCollection.Add(CreateOfferInstance(tOfferInstance));                                                    
            }

            //EMS Offer Instance
            //foreach (TestOfferInstance tOfferInstance in tContentInstance.TestGameContentoffer.TestOfferInstanceCollection)
            foreach (GameSchema.OfferInstance gameOi in contentOffer.offer.offerInstanceCollection)
            {
                if (emsOffer.OfferInstanceCollection == null)
                    emsOffer.OfferInstanceCollection = new OfferSchema.OfferInstanceCollection();

                OfferSchema.OfferInstance oi = CreateEMSOfferInstance(gameOi, emsOffer.Offer.offerId);
                oi.op = DatabaseOperation.Add;
                emsOffer.OfferInstanceCollection.Add(oi);

                if(notInital) 
                {//only one pterm is supported and copied from 1st offerinstance
                pTerm.countryCode =oi.countryCode;//???????? set at last
                pTerm.endDateTime =oi.endDateTime;//??
                pTerm.startDateTime=oi.startDateTime;//???
                pTerm.wholesalePriceCurrencyCode=oi.priceRetailCurrencyCode;
                notInital = false;
                }



                //EMS OfferInstanceProviderTerm
                if(emsOffer.OfferInstanceProviderTermCollection == null) 
                    emsOffer.OfferInstanceProviderTermCollection = new OfferInstanceProviderTermCollection();
                OfferInstanceProviderTerm opt = new OfferInstanceProviderTerm();
                opt.offerInstanceId = oi.offerInstanceId;
                opt.providerTermId =pTerm.providerTermId;
                opt.visibilityStatusId =oi.visibilityLevelId;
                opt.op = DatabaseOperation.Add;
                emsOffer.OfferInstanceProviderTermCollection.Add(opt);

                //EMS OfferInstanceUserType
                if(emsOffer.OfferInstanceUserTypeCollection == null)
                    emsOffer.OfferInstanceUserTypeCollection = new OfferInstanceUserTypeCollection();
                OfferInstanceUserType oUtype = new OfferInstanceUserType();
                oUtype.offerInstanceId =oi.offerInstanceId;
                oUtype.userTypeId = oi.requiredUserTypeId;
                oUtype.op = DatabaseOperation.Add;
                emsOffer.OfferInstanceUserTypeCollection.Add(oUtype);                    
 
            }

                             
            newXml.gameContentOfferCollection.Add(contentOffer);
            emsCatalog.OfferSaveList.Add(emsSave);
            injectionLst.Add(new InjectObject(contentOffer.offer.offerId, tGameTitle, GetTypeStr((MediaTypeEnum)mInfo.mediaTypeId), newXml, "offer"));
        }


       


        string CreateUniqueGuid( string tId){
            if(tId == null || setting.clearIds || tId =="")
                tId = Guid.NewGuid().ToString().ToUpper();
            return tId;
        }      

        //default visibiltyLevel = 1
        GameSchema.OfferInstance CreateOfferInstance(TestOfferInstance tOfferInstance){
            GameSchema.OfferInstance o = new GameSchema.OfferInstance();

           o.countryCode = tOfferInstance.country;
            o.endDate = SetDate(tOfferInstance.endDate);
            o.offerInstanceId = CreateUniqueGuid(tOfferInstance.offerInstanceId);
            tOfferInstance.offerInstanceId = o.offerInstanceId;

            o.pointsPrice = (uint)Random(500);
            o.requiredUserTypeId = tOfferInstance.requireduserTypeId;
            o.sku = "XBX-00005";
            o.startDate = SetDate(tOfferInstance.startDate);
            o.visibilityLevel = tOfferInstance.VisiblitlyLevel;       
           return o;
        }


        //default visibiltyLevel = 1
        OfferSchema.OfferInstance CreateEMSOfferInstance(TestOfferInstance tOfferInstance, GameSchema.OfferInstance gameOi, string offerId)
        {
            OfferSchema.OfferInstance o = new OfferSchema.OfferInstance();

            o.countryCode = tOfferInstance.country;
            o.offerInstanceId = tOfferInstance.offerInstanceId;
            tOfferInstance.offerInstanceId = o.offerInstanceId;

            if (gameOi != null)
            {
                o.pointsPrice = gameOi.pointsPrice.ToString();
                o.startDateTime = Convert.ToDateTime(gameOi.startDate);
                o.endDateTime = Convert.ToDateTime(gameOi.endDate);
            }
            else
            {
                o.pointsPrice = ((uint)Random(500)).ToString();
                o.startDateTime = SetDate1(tOfferInstance.startDate);
                o.endDateTime = SetDate1(tOfferInstance.endDate);            
            }

            o.priceRetail = gameOi.pointsPrice;           
            o.requiredUserTypeId = tOfferInstance.requireduserTypeId.ToString();
            o.sku = "XBX-00005";
            o.visibilityLevelId = tOfferInstance.VisiblitlyLevel.ToString();
            
            o.offerId = offerId;
            o.pricingRuleId = "0";
            o.priceRetailCurrencyCode = "USD";            

            return o;
        }

        OfferSchema.OfferInstance CreateEMSOfferInstance(GameSchema.OfferInstance gameOi, string offerId)
        {
            OfferSchema.OfferInstance o = new OfferSchema.OfferInstance();

            o.countryCode = gameOi.countryCode;
            o.offerInstanceId = gameOi.offerInstanceId;

            o.pointsPrice = gameOi.pointsPrice.ToString();
            o.startDateTime = Convert.ToDateTime(gameOi.startDate);
            o.endDateTime = Convert.ToDateTime(gameOi.endDate);

            o.priceRetail = gameOi.pointsPrice;
            o.requiredUserTypeId = gameOi.requiredUserTypeId.ToString();
            o.sku = "XBX-00005";
            o.visibilityLevelId = gameOi.visibilityLevel.ToString();

            o.offerId = offerId;
            o.pricingRuleId = "0";
            o.priceRetailCurrencyCode = "USD";

            return o;
        }

        //for offer
        GameContentProviderTerms CreateGameContentProviderTerms()
        {
            GameContentProviderTerms terms = new GameContentProviderTerms();
            terms.deliveryTypeId = 1;
            terms.licenseTypeId = 1;
            terms.publisherProviderId = 1;
            return terms;
        }

  
        string CreateLiveTitleId(TestGame g)
        {
            if (string.IsNullOrEmpty(g.LiveTitleId)) return "0";
            else
                return g.LiveTitleId;
        }



        string CreateContentLiveId(TestContentInstance g)
        {
            //string[] values = { "0x1000", "0x1001", "0x1002", "0x1003", "0x1004" };

            if (string.IsNullOrEmpty(g.liveContentId)) return "0x0";
            else
                return g.liveContentId;
        }

        MediaRelationshipCollection CreateMediaRelationshipCollection()
        {
            MediaRelationshipCollection r = new MediaRelationshipCollection();
            MediaRelationship relation = new MediaRelationship();
            relation.isFromToDirection = false;
            relation.mediaRelationshipTypeId = 2;
            relation.relatedMediaId = game.mediaInfo.mediaId;
            relation.sortOrder = 1;
            r.Add(relation);
            return r;
        }
      
        categoryCollection CreateCatagoryCollection(TestGame g)
        {
            uint[] values = { 3015};  // for US

            categoryCollection r = new categoryCollection();
            if (g.CategoryCollection.Count == 0)
            {
                foreach (int s1 in values)
                    r.Add(s1);
            }
            else
            {
                foreach (uint s2 in g.CategoryCollection)
                    r.Add(s2);
            }
            return r;
        }

        /*RatingDescriptorCollection CreateRatingDescriptorCollection(TestGame g)
        {
        string[] values = { "5", "10"};
            return new ArrayList(values);               
        */


        ratingValueCollection CreateRatingValueCollection(TestGame g)
        {
            uint[] values = { 0 };

            ratingValueCollection r = new ratingValueCollection();


            if (g.RatingValueCollection.Count == 0)
            {
                foreach (uint s1 in values)
                    r.Add(s1);
            }
            else
            {
                foreach (uint s2 in g.RatingValueCollection)
                    r.Add(s2);
            }
            return r;
        }

        storeCollection CreatestoreCollection(TestGameContentoffer t)
        {
            uint[] values = { 100 };

            storeCollection s = new storeCollection();


            if (t.TestStoreCollection.Count == 0)
            {
                foreach (uint s1 in values)
                    s.Add(s1);
            }
            else
            {
                foreach (uint s2 in t.TestStoreCollection)
                    s.Add(s2);
            }
            return s;
        }

        public static System.Random random = new System.Random((int)DateTime.Now.Ticks);

        public static int Random(int number)
        {
            return (int)(random.NextDouble() * number) + 1;
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\Verification\TagInfo.cs ===
using System;

namespace Catalog.Verifier
{
    public enum DataType : int
    {
        INT = 0,
        LONG,
        FLOAT,
        DOUBLE,
        GUID,
        STRING,
        DATETIME,
        IMAGE,
        PREVIEWIMAGE,
        PREVIEWVIDEO,
        CATEGORY,
        GAMEINSTANCE,
        VIDEOINSTANCE,
        OFFERINSTANCE,
        MEDIAINSTANCE,
        OFFERCOUNTS,
        XMLNODE
    }


    public enum TagPresent : int
    {        
        MUST=1,
        DEPEND,
        IGNORE,
    }

    public enum TitleContentOfferType : int
    {
        NONE = 0,
        FROMOFFERFILE,
        GAMETITLEONLY,
        GAMECONTENTONLY,
        GAMETITLECONTENT,
        MusicVideoONLY,
        TVONLY,
        SeasonONLY,
        EpisodeONLY,
        SeriesONLY,
        SeasonEpisodeONLY
    }

    public class TagInfo
    {
        public String tagName;//tagName in API output
        public String mappedTagName;//corresponding tag name is ingestion data 
        public DetailView viewLevel;
        public DataType valueType;
        public TitleContentOfferType tcoType;
        public bool attributeVal;  // indicate if it is an attribute in API output
        public TagPresent verifyIgnore;
        public TagPresent current;

        public string optionalField;   // output field could be optional, it depends on the input. This string is the input parameter name.

        public TagInfo(string tName, DataType t, DetailView vLevel, string mappedName)
        {
            tagName = tName;
            mappedTagName = mappedName;
            viewLevel = vLevel;
            valueType = t;
            tcoType = TitleContentOfferType.NONE;
            attributeVal = false;
            verifyIgnore = TagPresent.MUST;
            optionalField = null;
        }

        public TagInfo(string tName, DataType t, DetailView vLevel, string mappedName, TitleContentOfferType type)
            : this(tName, t, vLevel, mappedName)
        {
            tcoType = type;
        }

    public TagInfo(string tName, DataType t, DetailView vLevel, string mappedName, TitleContentOfferType type, bool attrVal, TagPresent ignore, string optional)
            : this(tName, t, vLevel, mappedName, type)
        {
            attributeVal = attrVal;
            verifyIgnore = ignore;
            optionalField = optional;
        }
    }

    static public class MediaTag
    {
        static public TagInfo[] tags;
        static MediaTag()
        {
            TagInfo[] t = {                 
                    //new TagInfo("live:mediaId", DataType.GUID,DetailView.IdOnly, "g:mediaId"),
                    new TagInfo("live:mediaType", DataType.INT, DetailView.IdOnly, "//g:mediaTypeId", TitleContentOfferType.NONE, true, TagPresent.MUST, null),
                    new TagInfo("live:categoryIds/live:categoryId", DataType.INT, DetailView.IdOnly, "//g:mediaInfo/g:category", TitleContentOfferType.NONE, false, TagPresent.MUST, "CategoryIds"),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:reducedTitle",DataType.STRING, DetailView.Minimum, "g:mediaLocaleInfo[g:lcid={0}]/g:reducedTitle"),
                    new TagInfo("live:reducedDescription",	DataType.STRING, DetailView.Minimum, "g:mediaLocaleInfo[g:lcid={0}]/g:reducedDescription"),
                    new TagInfo("live:title",DataType.STRING, DetailView.Full, "g:mediaLocaleInfo[g:lcid={0}]/g:title"),
                    new TagInfo("live:description",	DataType.STRING, DetailView.Full, "g:mediaLocaleInfo[g:lcid={0}]/g:description"),
                    new TagInfo("live:totalOfferCount",DataType.INT, DetailView.Full, ""),
                    new TagInfo("live:downloadCount",DataType.INT, DetailView.Full, "", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null)  //???                  
            };
            tags = t;
        }
    }

    static public class GameTag    {
        static public TagInfo[] tags;
        static GameTag()
        {
            TagInfo[] t = { 
                    //new TagInfo("live:mediaId",DataType.GUID,DetailView.IdOnly, "g:mediaId"),
                    new TagInfo("live:media/live:mediaType",DataType.INT,DetailView.Home, ".//pf:mediaTypeId", TitleContentOfferType.GAMECONTENTONLY, false, TagPresent.MUST, null),
                    
                    //new TagInfo("live:media/live:mediaType",DataType.INT,DetailView.Starter, "//g:mediaTypeId"),             
                    new TagInfo("live:media/live:gameTitleMediaId", DataType.GUID, DetailView.Starter, ".//pf:MediaRelationship[pf:mediaRelationshipTypeId=2]/pf:mediaId", TitleContentOfferType.GAMECONTENTONLY,false, TagPresent.DEPEND, null), //only in game content schema, 2 - MediaToAssociatedDownload                 
                    new TagInfo("live:media/live:reducedTitle",DataType.STRING,DetailView.Home, ".//pf:MediaLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:reducedTitle", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null), 
                    new TagInfo("live:media/live:reducedDescription",DataType.STRING, DetailView.Home, ".//pf:MediaLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:reducedDescription", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null), 
                    new TagInfo("live:media/live:availabilityDate",DataType.DATETIME, DetailView.Home, ".//pf:visibilityDate"),    
                    new TagInfo("live:media/live:releaseDate",DataType.DATETIME, DetailView.Home, ".//pf:originalReleaseDate"),    
                    new TagInfo("live:media/live:ratingId",DataType.INT, DetailView.Home, ".//pf:ratingValueId"),    
                
                    new TagInfo("live:media/live:customGenre",DataType.STRING, DetailView.Home, ".//pf:GameLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:customGenre", TitleContentOfferType.GAMECONTENTONLY, false, TagPresent.DEPEND, null), //only for title
                    new TagInfo("atom:title",DataType.STRING, DetailView.Ultimate, ".//pf:reducedTitle[../..//pf:MediaLocaleMap[./pf:lcidMap={0} and ./pf:lcid={0}] and ../pf:lcid={0}]", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null), 
                     
                    new TagInfo("live:media/live:description",DataType.STRING, DetailView.Ultimate, ".//pf:MediaLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:description"),    
                    new TagInfo("live:media/live:newestOfferStartDate",DataType.DATETIME, DetailView.Ultimate, "",TitleContentOfferType.NONE, false, TagPresent.IGNORE, null),        
                    //new TagInfo("live:media/live:developer",DataType.STRING, DetailView.Ultimate, "", TitleContentOfferType.NONE, true, TagPresent.IGNORE, null),//optional 
                    //new TagInfo("live:media/live:publisher",DataType.STRING, DetailView.Ultimate, "", TitleContentOfferType.NONE, true, TagPresent.IGNORE, null),//optional  
                    new TagInfo("live:media/live:offerCounts", DataType.OFFERCOUNTS, DetailView.Ultimate,   "", TitleContentOfferType.NONE, false, TagPresent.MUST, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:categories/live:category", DataType.CATEGORY, DetailView.Home,    ".//pf:categoryId", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:images/live:image", DataType.IMAGE, DetailView.Premium,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'                                       
                    new TagInfo("live:previewInstances/live:videoPreviewInstance", DataType.PREVIEWVIDEO, DetailView.Ultimate,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:previewInstances/live:imagePreviewInstance", DataType.PREVIEWIMAGE, DetailView.Ultimate,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'


             };
            tags = t;
        }
    }

    static public class GameOfferTag
    {
        static public TagInfo[] tags;

        static GameOfferTag()
        {
            TagInfo[] t = {             
                    //new TagInfo("OfferId",DataType.GUID, DetailView.IdOnly, "g:gameContentOffer/g:offer/g:offerId", TitleContentOfferType.FROMOFFERFILE),
                   new TagInfo("live:offer/live:mediaType",DataType.INT,DetailView.Starter, ".//pf:mediaTypeId"),
                     new TagInfo("live:offer/live:mediaId",DataType.GUID,DetailView.Starter, "./pf:Offer/pf:mediaId", TitleContentOfferType.FROMOFFERFILE, false, TagPresent.MUST, null), 
                    //new TagInfo("live:userType",DataType.INT, DetailView.IdOnly, "//g:offerInstance/g:requiredUserTypeId[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    //new TagInfo("live:pointsPrice", DataType.INT, DetailView.IdOnly, "//g:offerInstance/g:pointsPrice[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:categories/live:category", DataType.CATEGORY, DetailView.Home,  ".//pf:categoryId", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    //new TagInfo("live:startDateTime",	DataType.DATETIME, DetailView.Minimum, "//g:offerInstance/g:startDate[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                   // new TagInfo("live:endDateTime",DataType.DATETIME, DetailView.Minimum, "//g:offerInstance/g:endDate[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:offer/live:reducedTitle",DataType.STRING, DetailView.Home, ".//pf:MediaLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:reducedTitle", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null), 
                    new TagInfo("live:offer/live:reducedDescription",	DataType.STRING, DetailView.Home, ".//pf:MediaLocale[pf:lcid=..//pf:MediaLocaleMap[./pf:lcid={0}]/pf:lcidMap]/pf:reducedDescription", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),                                     
                    new TagInfo("live:offer/live:offerInstances/live:offerInstance", DataType.OFFERINSTANCE, DetailView.Home,  "", TitleContentOfferType.FROMOFFERFILE, false, TagPresent.MUST, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:images/live:image", DataType.IMAGE, DetailView.Premium,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'                   
                    new TagInfo("live:mediaInstances/live:gameMediaInstance", DataType.GAMEINSTANCE, DetailView.Ultimate,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:previewInstances/live:videoPreviewInstance", DataType.PREVIEWVIDEO, DetailView.Ultimate,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:previewInstances/live:imagePreviewInstance", DataType.PREVIEWIMAGE, DetailView.Ultimate,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'

             };
            tags = t;
        }
    }

    static public class MediaOfferTag
    {
        static public TagInfo[] tags;
        static MediaOfferTag()
        {
            TagInfo[] t = { 
                    //new TagInfo("live:offerId", DataType.STRING, DetailView.IdOnly, "g:gameContentOffer/g:offer/g:offerId", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:mediaType", DataType.STRING,DetailView.IdOnly, "//g:mediaTypeId", TitleContentOfferType.GAMECONTENTONLY, true, TagPresent.MUST, null),
                    new TagInfo("live:mediaId", DataType.GUID,DetailView.IdOnly, "g:offer/g:metadataMediaId", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:categoryIds/live:categoryId", DataType.INT, DetailView.IdOnly, "//g:mediaInfo/g:category", TitleContentOfferType.NONE, false, TagPresent.MUST, "CategoryIds"),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:userType",	DataType.INT, DetailView.IdOnly, "//g:offerInstance/g:requiredUserTypeId[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:pointsPrice", DataType.INT, DetailView.IdOnly, "//g:offerInstance/g:pointsPrice[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:reducedTitle", DataType.STRING, DetailView.Minimum, "g:mediaLocaleInfo[g:lcid={0}]/g:reducedTitle"),
                    new TagInfo("live:reducedDescription", DataType.STRING, DetailView.Minimum, "g:mediaLocaleInfo[g:lcid={0}]/g:reducedDescription"),  
                    new TagInfo("live:startDateTime", DataType.DATETIME, DetailView.Minimum, "//g:offerInstance/g:startDate[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("live:endDateTime", DataType.DATETIME, DetailView.Minimum, "//g:offerInstance/g:endDate[../g:countryCode='{0}']", TitleContentOfferType.FROMOFFERFILE),
                    
                    // media instance id
                    new TagInfo("|Instance|live:instanceId", DataType.GUID, DetailView.Full, "g:gameContentProviderTerms/g:mediaInstanceId", TitleContentOfferType.FROMOFFERFILE),
                    new TagInfo("|Instance|live:offerLicenseType", DataType.STRING, DetailView.Full, "g:gameContentProviderTerms/g:licenseTypeId", TitleContentOfferType.FROMOFFERFILE),  //one common for a offer xml file                  
                    //new TagInfo("|Instance|live:isAcquirable", DataType.INT, DetailView.Full, "//g:licenseTypeId", TitleContentOfferType.FROMOFFERFILE),  //one common for a offer xml file                  
                    //new TagInfo("|Instance|live:legalText", DataType.STRING, DetailView.Full, "//g:licenseTypeId", TitleContentOfferType.FROMOFFERFILE)  //one common for a offer xml file                  
             };
            tags = t;
        }
    }

    /*
     */
    //TagInfo(string tName, DataType t, DetailView vLevel, string mappedName, TitleContentOfferType type, bool attrVal, bool ignore, string optional)
    static public class PodcastsTag
    {
        static public TagInfo[] tags;
        static PodcastsTag()
        {
            TagInfo[] t = {                 
                    //new TagInfo("live:mediaId", DataType.GUID,DetailView.IdOnly, "g:mediaId"),
                    //new TagInfo("live:itemNum", DataType.INT, DetailView.Starter, "", TitleContentOfferType.NONE, true, false, null), //??
                    new TagInfo("live:detailView", DataType.INT, DetailView.Starter, "", TitleContentOfferType.NONE, true, TagPresent.MUST, null),  //??               
                    new TagInfo("live:podcast/live:imageUrl", DataType.STRING, DetailView.Enterprise, "//imageUrl"), 
                    new TagInfo("live:podcast/live:fullTitle", DataType.STRING, DetailView.Enterprise, "//title"), 
                    new TagInfo("live:podcast/live:author", DataType.STRING, DetailView.Enterprise, "//creatorName"), 
                    new TagInfo("live:podcast/live:explicit", DataType.INT, DetailView.Ultimate, "//explicitStr"), 
                    new TagInfo("live:podcast/live:podcastType", DataType.INT, DetailView.Enterprise, "//podcastType"),                     
                    new TagInfo("live:podcast/live:rssUrl", DataType.STRING, DetailView.Ultimate, "//rssUrl"),
                    new TagInfo("live:podcast/live:websiteUrl", DataType.STRING, DetailView.Ultimate, "//websiteUrl"),
                    new TagInfo("live:podcast/live:earliestAvailDate", DataType.DATETIME, DetailView.Ultimate, "//visibilityDate"), 
                    new TagInfo("live:podcast/live:description", DataType.STRING, DetailView.Ultimate, "//description"), 
                //new TagInfo("live:categoryIds/live:categoryId", DataType.INT, DetailView.IdOnly, "//g:mediaInfo/g:category", TitleContentOfferType.NONE, false, false, "CategoryIds"),   // optional output, depending on the input 'CategroyIds'                        
                    new TagInfo("live:categories/live:category", DataType.CATEGORY, DetailView.Ultimate,  "//category", TitleContentOfferType.NONE, false, TagPresent.MUST, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("atom:title",DataType.STRING, DetailView.Enterprise,"//reducedTitle"), //in entry node
                    //new TagInfo("atom:updated",	DataType.DATETIME, DetailView.Ultimate, "")//in entry node
                    //new TagInfo("atom:content",	DataType.STRING, DetailView.Starter, "")   
                    
            };
            tags = t;
        }
    }

    static public class FindVideosTag
    {
        static public TagInfo[] tags;
        static FindVideosTag(){
            TagInfo[] t = {                 
                new TagInfo("live:images/live:image", DataType.IMAGE, DetailView.Premium,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    //TagInfo(string tName, DataType t, DetailView vLevel, string mappedName, TitleContentOfferType type, bool attrVal, bool ignore, string optional)
                    new TagInfo("live:itemNum", DataType.INT, DetailView.Home, "", TitleContentOfferType.NONE, true, TagPresent.IGNORE, null), 
                    new TagInfo("live:media/live:mediaType",DataType.INT,DetailView.Home, ".//pf:mediaTypeId", TitleContentOfferType.GAMECONTENTONLY, false, TagPresent.MUST, null),
                    new TagInfo("live:media/live:reducedTitle",DataType.STRING,DetailView.Home, ".//pf:reducedTitle[../pf:lcid={0}]"),
                    new TagInfo("live:media/live:reducedDescription",DataType.STRING, DetailView.Home, ".//pf:reducedDescription[../pf:lcid={0}]"), 
                    new TagInfo("live:media/live:availabilityDate",DataType.DATETIME, DetailView.Home, ".//pf:visibilityDate"),    
                    new TagInfo("live:media/live:releaseDate",DataType.DATETIME, DetailView.Home, ".//pf:originalReleaseDate"),    
                    new TagInfo("live:media/live:ratingId",DataType.INT, DetailView.Home, ".//pf:ratingValueId"),    
                    new TagInfo("live:media/live:length",DataType.INT, DetailView.Home, ".//pf:Video/pf:durationSecs", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),    
                    new TagInfo("live:media/live:spokenLanguage",DataType.INT, DetailView.Home, ".//pf:Video/pf:spokenLanguage", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null),
                    new TagInfo("live:media/live:videoOfferCount",DataType.INT, DetailView.Ultimate, "",TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),     
                    new TagInfo("live:media/live:seriesOfferCount",DataType.INT, DetailView.Ultimate, "",TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),     
                    new TagInfo("live:media/live:seasonOfferCount",DataType.INT, DetailView.Ultimate, "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),     
                    new TagInfo("live:media/live:newestOfferStartDate",DataType.DATETIME, DetailView.Home, "", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null),        
                    new TagInfo("live:media/live:fullTitle",DataType.STRING, DetailView.Ultimate, ".//pf:title[../pf:lcid={0}]"),   
                    new TagInfo("live:media/live:description",DataType.STRING, DetailView.Ultimate, ".//pf:description[../pf:lcid={0}]"),    
                    new TagInfo("live:media/live:availableVideoDefinitions/live:videoDefinition",DataType.STRING, DetailView.Home, ".//pf:videoDefinitionId", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null),    
                    new TagInfo("live:media/live:isAdSupported",DataType.STRING, DetailView.Home, ".//pf:isAdSupported[../pf:isPreview=1]", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null),          
                    new TagInfo("live:media/live:artistName",DataType.STRING, DetailView.Home, "", TitleContentOfferType.MusicVideoONLY, false, TagPresent.IGNORE, null), 
                    new TagInfo("live:media/live:ratingDescritpor",DataType.STRING, DetailView.Home, ".//pf:ratingDescriptorId", TitleContentOfferType.NONE, false, TagPresent.IGNORE, null), 
//-----------------
//-----------------------------end of media  ------------------------------           
                    new TagInfo("live:categories/live:category", DataType.CATEGORY, DetailView.Home,  ".//pf:categoryId", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
//----------------------------end of category-------------------------------------------      
        new TagInfo("live:mediaInstances/live:videoMediaInstance", DataType.VIDEOINSTANCE, DetailView.Home,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
//----------------------------end of mediaInstances----------------------------  
        new TagInfo("live:previewInstances/live:videoPreviewInstance", DataType.PREVIEWVIDEO, DetailView.Enterprise,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
        new TagInfo("live:previewInstances/live:imagePreviewInstance", DataType.PREVIEWIMAGE, DetailView.Enterprise,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
//----------------------------end of videoPreviewInstance----------------------------     
        //all
        new TagInfo("live:media/live:seriesTitle", DataType.STRING, DetailView.Home,  ".//pf:reducedTitle[../pf:lcid={0}]", TitleContentOfferType.TVONLY, false, TagPresent.DEPEND, null), 
        new TagInfo("live:media/live:seriesId", DataType.STRING, DetailView.Home,  "", TitleContentOfferType.TVONLY, false, TagPresent.DEPEND, null), 
        new TagInfo("live:media/live:numEpisodes", DataType.INT, DetailView.Home,  "", TitleContentOfferType.TVONLY, false, TagPresent.DEPEND, null), 
        new TagInfo("live:media/live:numSeasons", DataType.INT, DetailView.Home,  "", TitleContentOfferType.TVONLY, false, TagPresent.DEPEND, null), 
        //series only
        new TagInfo("live:media/live:seasonIds/live:seasonId", DataType.STRING, DetailView.Home,  "", TitleContentOfferType.SeriesONLY, false, TagPresent.DEPEND, null), 
        //season,eps.
        new TagInfo("live:media/live:seasonId", DataType.STRING, DetailView.Home,  "", TitleContentOfferType.SeasonEpisodeONLY, false, TagPresent.DEPEND, null), 
        new TagInfo("live:media/live:seasonTitle", DataType.STRING, DetailView.Home,  ".//pf:reducedTitle[../pf:lcid={0}]", TitleContentOfferType.SeasonEpisodeONLY, false, TagPresent.DEPEND, null), 
        new TagInfo("live:media/live:seasonNo", DataType.STRING, DetailView.Home,  ".//pf:seasonNumber", TitleContentOfferType.SeasonEpisodeONLY, false, TagPresent.DEPEND, null), 
        // eps
        new TagInfo("live:media/live:episodeNo", DataType.STRING, DetailView.Home,  ".//pf:episodeNumber", TitleContentOfferType.EpisodeONLY, false, TagPresent.DEPEND, null), 
        //season 
        new TagInfo("live:media/live:networkName", DataType.STRING, DetailView.Home,  "", TitleContentOfferType.SeasonONLY, false, TagPresent.IGNORE, null), 
        //all
//----------------------------end of TV only ----------------------------     
            };
            tags = t;
        }
    }

    static public class FindVideoOffersTag
    {
        static public TagInfo[] tags;
        static FindVideoOffersTag()
        {
            TagInfo[] t = {                 
                   new TagInfo("live:images/live:image", DataType.IMAGE, DetailView.Premium,  "", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    //TagInfo(string tName, DataType t, DetailView vLevel, string mappedName, TitleContentOfferType type, bool attrVal, bool ignore, string optional)
                    new TagInfo("atom:title",DataType.STRING, DetailView.Starter,".//pf:title[../pf:lcid={0}]"), //in entry node
                    new TagInfo("live:itemNum", DataType.INT, DetailView.Home, "", TitleContentOfferType.NONE, true, TagPresent.IGNORE, null), 
                    new TagInfo("live:offer/live:mediaType",DataType.INT,DetailView.Starter, ".//pf:mediaTypeId", TitleContentOfferType.GAMECONTENTONLY, false, TagPresent.MUST, null),
                    new TagInfo("live:offer/live:mediaId",DataType.GUID,DetailView.Starter, "./pf:Offer/pf:mediaId", TitleContentOfferType.FROMOFFERFILE, false, TagPresent.MUST, null),                    
                    new TagInfo("live:offer/live:reducedTitle",DataType.STRING,DetailView.Home, ".//pf:reducedTitle[../pf:lcid={0}]"),
                    new TagInfo("live:offer/live:reducedDescription",DataType.STRING, DetailView.Home, ".//pf:reducedDescription[../pf:lcid={0}]"), 
                    new TagInfo("live:offer/live:offerInstances/live:offerInstance", DataType.OFFERINSTANCE, DetailView.Home,  "", TitleContentOfferType.FROMOFFERFILE, false, TagPresent.MUST, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:offer/live:ratingId",DataType.INT, DetailView.Home, ".//pf:ratingValueId"),    
//-----------------------------end of media  ------------------------------           
                    new TagInfo("live:categories/live:category", DataType.CATEGORY, DetailView.Home,  ".//pf:categoryId", TitleContentOfferType.NONE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
                    new TagInfo("live:mediaInstances/live:videoMediaInstance", DataType.MEDIAINSTANCE, DetailView.Ultimate,  "", TitleContentOfferType.FROMOFFERFILE, false, TagPresent.DEPEND, null),   // optional output, depending on the input 'CategroyIds'
//----------------------------end of mediaInstances----------------------------  
   
            };
            tags = t;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\Verification\CatalogResult.cs ===
// CatalogResult.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Globalization;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace Catalog
{
    public class CatalogResultHandler
    {
        public FeedResult Create(XmlReader reader)
        {
            XmlSerializer serializer;
            serializer = new XmlSerializer(typeof(FeedResult), "http://www.w3.org/2005/Atom");

            if (serializer.CanDeserialize(reader))
            {
                FeedResult feedResult = (FeedResult)serializer.Deserialize(reader);
                return feedResult;
            }
            throw new Exception("Cannot deserialize result");
        }

        public FeedResult Create(XmlDocument document)
        {
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.CloseInput = true;

            using (StringReader stringReader = new StringReader(document.OuterXml))
            {
                using (XmlReader reader = XmlReader.Create(stringReader, settings))
                {
                    return Create(reader);
                }
            }
        }
    }

    [XmlRootAttribute("feed")]
    public class FeedResult
    {
        public FeedResult()
        {
            this._updated = DateTime.UtcNow;
        }

        [XmlElement(ElementName = "totalItems", Namespace = "http://www.live.com/marketplace")]
        public int _totalItems;

        [XmlElement(ElementName = "numItems", Namespace = "http://www.live.com/marketplace")]
        public int _numItems;

        [XmlElement(ElementName = "title")]
        public string _title;

        [XmlElement(ElementName = "updated")]
        public DateTime _updated;

        // appears for FindGameOffers only
        [XmlElement(ElementName = "legalLcid", Namespace = "http://www.live.com/marketplace")]
        public string _legalLcid; // like 1033

        [XmlElement(ElementName = "entry")]
        public FeedEntry[] _entries;

        [XmlIgnore]
        internal FeedEntry[] Entries
        {
            get { return _entries; }

            set
            {
                _entries = value;

                if ((_entries == null) || (_entries.Length == 0))
                {
                    _numItems = 0;
                    _entries = null;
                }

                else
                {
                    _numItems = _entries.Length;
                    _updated = DateTime.MinValue;

                    if (LastItem - FirstItem + 1 != _entries.Length)
                    {
                        throw new Exception("Invalid item number");
                    }

                    // make sure the updated time  reflects
                    // the entries we just put in the array

                    foreach (FeedEntry entry in _entries)
                    {
                        if (entry.Updated > _updated) _updated = entry.Updated;
                    }
                }
            }
        }

        [XmlIgnore]
        public int FirstItem
        {
            get
            {
                if (_entries == null) return 0;
                return _entries[0].ItemNum - 1;
            }
        }

        [XmlIgnore]
        public int LastItem
        {
            get
            {
                if (_entries == null) return 0;
                return _entries[_entries.Length - 1].ItemNum - 1;
            }
        }

        [XmlIgnore]
        public int NumItems
        {
            get { return _numItems; }
        }

        [XmlIgnore]
        internal string Title
        {
            get { return _title; }
        }

        [XmlIgnore]
        public int TotalItems
        {
            get { return _totalItems; }
        }

        [XmlIgnore]
        internal DateTime Updated
        {
            get { return _updated; }
            set { _updated = value; }
        }

        [XmlIgnore] // this appears in output of FindGameOffers only
        internal int LegalLcid
        {
            get {
                   if (string.IsNullOrEmpty(_legalLcid)) return 0;
                   return Convert.ToInt32(_legalLcid); 
                }
        }

        // load from the test data xml file, node - <OfferSave>\<xmlData>\<Offer.xsd.Data>
        public void LoadFromTestDataOfferFile(XmlElement root, uint storeFilter, int legalLcid, string countryFilter, 
            List<uint> userTypesFilter, List<string> offersFilter, uint detailView)
        {
            uint store;
            string offerId;
            string mediaId;
            string country;
            List<FeedEntry> entries = new List<FeedEntry>();
            List<FeedOfferInstance> offerIns;

            // all offers
            XmlNodeList offers = root.GetElementsByTagName("Offer.xsd.Data");
            foreach (XmlNode n in offers)
            {
                XmlElement nd = (XmlElement)n;

                // only one OfferStore node. and apply the store filter
                store = Convert.ToUInt32(nd.GetElementsByTagName("storeId")[0].InnerText);
                if (store != storeFilter) continue;

                // only one Offer node. and apply the offers filter
                offerId = nd.GetElementsByTagName("offerId")[0].InnerText;
                offerId = offerId.Replace("{", "").Replace("}", "");
                if (!offersFilter.Contains(offerId)) continue;

                FeedEntry entry = new FeedEntry();
                entry.id = offerId;
                entry.DetailView = detailView;
                entry.Offer = new FeedOffer();
                mediaId = nd.GetElementsByTagName("mediaId")[0].InnerText;
                mediaId = mediaId.Replace("{", "").Replace("}", "");
                entry.Offer.mediaId = mediaId;
                entry.Offer.feedOfferInstances = new FeedOfferInstances();

                // multiple OfferInstanceUserType nodes
                XmlNodeList userTypes = nd.GetElementsByTagName("OfferInstanceUserType");

                // multiple OfferInstance nodes
                offerIns = new List<FeedOfferInstance>();
                XmlNodeList ois = nd.GetElementsByTagName("OfferInstance");
                foreach (XmlNode oin in ois)
                {
                    XmlElement oind = (XmlElement)oin;

                    // apply the country filter
                    country = oind.GetElementsByTagName("countryCode")[0].InnerText;
                    if (country.ToLower() != countryFilter.ToLower()) continue;

                    string offerInsanceId = oind.GetElementsByTagName("offerInstanceId")[0].InnerText;
                    FeedOfferInstance instance = new FeedOfferInstance();
                    instance.paymentType = Convert.ToUInt32(oind.GetElementsByTagName("paymentTypeId")[0].InnerText);
                    instance.taxType = CountryTaxTypeMap.GetTaxType(country); // tax type for now is per country regardless media types
                    instance.price = Convert.ToDouble(oind.GetElementsByTagName("price")[0].InnerText);
                    instance.priceText = FormatPriceForLocalCurrency(instance.paymentType, legalLcid, instance.price);
                    instance.startDateTime = Convert.ToDateTime(oind.GetElementsByTagName("startDateTime")[0].InnerText);
                    instance.endDateTime = Convert.ToDateTime(oind.GetElementsByTagName("endDateTime")[0].InnerText);
                    // get user type
                    foreach (XmlNode usernd in userTypes)
                    {
                        XmlElement userType = (XmlElement)usernd;
                        if (offerInsanceId == userType.GetElementsByTagName("offerInstanceId")[0].InnerText)
                        {
                            instance.userTypes = new FeedUserTypes();
                            instance.userTypes.userType = new uint[1];
                            instance.userTypes.userType[0] = Convert.ToUInt32(userType.GetElementsByTagName("userTypeId")[0].InnerText);
                            break;
                        }
                    }

                    // apply the user types filter
                    if (instance.userTypes != null && instance.userTypes.userType.Length > 0 && userTypesFilter.Contains(instance.userTypes.userType[0]))
                        offerIns.Add(instance);
                }
                if (offerIns.Count > 0)
                    entry.Offer.feedOfferInstances.feedOfferInstance = offerIns.ToArray();
                entries.Add(entry);
            }
            if (entries.Count > 0)
                this._entries = entries.ToArray();
            this._totalItems = offersFilter.Count;
            this._numItems = offersFilter.Count;
        }

        public bool Equals(FeedResult other, uint detailView)
        {
            if ( this.TotalItems != other.TotalItems)
                return false;
            if (this.NumItems != other.NumItems)
                return false;

            if (this.Entries == null && other.Entries == null)
                return true;
            if ( this.Entries == null || other.Entries == null)
                return false;
            if (this.Entries.Length != other.Entries.Length)
                return false;

            // sort first
            List<FeedEntry> first = new List<FeedEntry>(this.Entries);
            first.Sort(CompareEntry);
            List<FeedEntry> second = new List<FeedEntry>(other.Entries);
            second.Sort(CompareEntry);

            for (int i = 0; i < first.Count; i++)
            {
                if (!first[i].Equals(second[i], detailView))
                    return false;
            }
            return true;
        }

        private static int CompareEntry(FeedEntry x, FeedEntry y)
        {
            return x.id.CompareTo(y.id);
        }

        // Converts EMS PaymentType into UODB PaymentType
        public static uint CatalogPaymentTypeToUodbPaymentType(uint catalogPaymentType)
        {
            PaymentTypeEnum type;

            switch ((CatalogPaymentTypeEnum)catalogPaymentType)
            {
                case CatalogPaymentTypeEnum.CreditCard:
                    type = PaymentTypeEnum.CreditCard;
                    break;

                case CatalogPaymentTypeEnum.Token:
                    type = PaymentTypeEnum.Token;
                    break;

                case CatalogPaymentTypeEnum.Points:
                default:
                    type = PaymentTypeEnum.Points;
                    break;
            }

            return (uint)type;
        }

        public static uint GetEmsPaymentTypeFromXboxPaymentType(PaymentTypeEnum xboxPaymentType)
        {
            uint emsPaymentTypeId = 0;
            switch (xboxPaymentType)
            {
            case PaymentTypeEnum.Points:
                emsPaymentTypeId = (int) CatalogPaymentTypeEnum.Points;
                break;
            case PaymentTypeEnum.Token:
                emsPaymentTypeId = (int) CatalogPaymentTypeEnum.Token;
                break;
            case PaymentTypeEnum.CreditCard:
                emsPaymentTypeId = (int) CatalogPaymentTypeEnum.CreditCard;
                break;
            default:
                throw new Exception(
                    string.Format("Payment type '{0}' is invalid for media purchases.", xboxPaymentType)
                    );
            }

            return emsPaymentTypeId;
        }

        public static string XeFormatPrice(uint paymentType, double priceValue, int LCID)
        {
            string formattedPrice = "";

            CultureInfo ci = new CultureInfo(LCID);
            NumberFormatInfo nfi = ci.NumberFormat;

            // based on payment type, determine the if we need to do special cases
            switch ((PaymentTypeEnum)paymentType)
            {
                case PaymentTypeEnum.CreditCard:
                    switch (LCID)
                    {
                        case 1033: // US
                            nfi.CurrencySymbol = "\u0024";
                            break;

                        case 2057: // UK
                            nfi.CurrencySymbol = "\u00A3";
                            break;

                        case 1041: // Japan
                            nfi.CurrencySymbol = "\u00A5";
                            break;

                        case 1042: // S. Korea
                            nfi.CurrencySymbol = "\u20A9";
                            break;

                        case 1081: // Hindi India mapped to en-IN
                            nfi.CurrencySymbol = "Rs.";
                            break;
                    }
                    formattedPrice = priceValue.ToString("c", nfi);
                    break;

                case PaymentTypeEnum.Points:

                    // points do not have fractions
                    nfi.NumberDecimalDigits = 0;
                    nfi.CurrencyDecimalDigits = 0;
                    nfi.CurrencySymbol = "\u00A4";
                    nfi.CurrencyPositivePattern = 1;
                    nfi.CurrencyNegativePattern = 5;
                    formattedPrice = Convert.ToInt32(priceValue).ToString("c", nfi);
                    break;

                case PaymentTypeEnum.Token:
                default:
                    formattedPrice = "";
                    return formattedPrice;
            }

            return formattedPrice;
        }

        public static string FormatPriceForLocalCurrency(uint catalogPaymentType, int legalLcid, double price)
        {
            string priceText;

            // priceText XML node value, supplied by FindGmeOffers sproc comes enumerated as EMS paymentType (CatalogPaymentTypeEnum) 
            // but XeFormatPrice() expects UODB PaymentTypeEnum; so additional enum-to-enum convertion needed.
            uint currentPaymentType = CatalogPaymentTypeToUodbPaymentType(catalogPaymentType);  // converting EMSPaymentType into UODBPaymentType
            priceText = XeFormatPrice(currentPaymentType, price, legalLcid);
            return priceText;
        }

        private MemoryStream Serialize()
        {
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Indent = false;

            MemoryStream memoryStream = new MemoryStream();
            XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            XmlSerializer serializer = new XmlSerializer(typeof(FeedResult), "http://www.w3.org/2005/Atom");

            XmlSerializerNamespaces serializerNamespaces = new XmlSerializerNamespaces();
            serializerNamespaces.Add("live", "http://www.live.com/marketplace");
            serializer.Serialize(xmlWriter, this, serializerNamespaces);

            memoryStream.Seek(0, SeekOrigin.Begin);
            return memoryStream;
        }

        public XmlDocument GetDocument()
        {
            XmlDocument document = new XmlDocument();
            document.Load(Serialize());
            return document;
        }
    }

    public class FeedUserTypes
    {
        [XmlElement(ElementName = "userType")]
        public uint[] userType;   // can safely assume there is always one userType per offerInstance

        public bool Equals(FeedUserTypes other)
        {
            if (this.userType[0] != other.userType[0]) return false;
            return true;
        }
    }

    public class FeedOfferInstance
    {
        [XmlElement(ElementName = "price")]
        public double price;

        [XmlElement(ElementName = "priceText")]
        public string priceText;

        [XmlElement(ElementName = "paymentType")]
        public uint paymentType;

        [XmlElement(ElementName = "taxType")]
        public uint taxType;

        [XmlElement(ElementName = "startDateTime")]
        public DateTime startDateTime;

        [XmlElement(ElementName = "endDateTime")]
        public DateTime endDateTime;

        [XmlElement(ElementName = "userTypes")]
        public FeedUserTypes userTypes; 

        public bool Equals(FeedOfferInstance other, uint detailView)
        {
            if (this.price != other.price) return false;
            if (this.priceText != other.priceText) return false;
            if (this.paymentType != other.paymentType) return false;
            if (this.taxType != other.taxType) return false;
            if (this.startDateTime != other.startDateTime) return false;
            if (this.endDateTime != other.endDateTime) return false;
            if (!this.userTypes.Equals(other.userTypes)) return false;
            return true;
        }
    }

    public class FeedOfferInstances
    {
        [XmlElement(ElementName = "offerInstance")]
        public FeedOfferInstance[] feedOfferInstance;

        public bool Equals(FeedOfferInstances other, uint detailView)
        {
            if (this.feedOfferInstance == null && other.feedOfferInstance == null)
                return true;
            if (this.feedOfferInstance == null || other.feedOfferInstance == null)
                return false;
            if (this.feedOfferInstance.Length != other.feedOfferInstance.Length)
                return false;
            
            // sort the array first
            List<FeedOfferInstance> first = new List<FeedOfferInstance>(this.feedOfferInstance);
            first.Sort(CompareOfferInstance);
            List<FeedOfferInstance> second = new List<FeedOfferInstance>(other.feedOfferInstance);
            second.Sort(CompareOfferInstance);

            for (int i = 0; i < first.Count; i++)
            {
                if (!first[i].Equals(second[i], detailView))
                    return false;
            }
            return true;
        }

        // compare method to sort the OfferInstances array by userType (2,3), then paymentType (1,2,3)
        private static int CompareOfferInstance(FeedOfferInstance x, FeedOfferInstance y)
        {
           if (x == null)
            {
                if (y == null)
                {
                    // If x is null and y is null, they're equal. 
                    return 0;
                }
                else
                {
                    // If x is null and y is not null, y is greater. 
                    return -1;
                }
            }
            else
            {
                // If x is not null...
                if (y == null)
                    // ...and y is null, x is greater.
                {
                    return 1;
                }
                else
                {
                    // ...and y is not null, compare the userType first
                    int retval = x.userTypes.userType[0].CompareTo(y.userTypes.userType[0]);

                    if (retval != 0)
                    {
                        return retval;
                    }
                    else
                    {
                        // compare paymentType second
                        return x.paymentType.CompareTo(y.paymentType);
                    }
               }
           }
        }

        // sort the OfferInstances array by userType (2,3), then paymentType (1,2,3)
        public void SortArraryHardWay()
        {
            List<FeedOfferInstance> tempArray = new List<FeedOfferInstance>();

            foreach (FeedOfferInstance instance in feedOfferInstance)
            {
                if (instance.userTypes.userType[0] == 2)     // gold user
                {
                    bool bAdd = false;
                    int i = 0;
                    // starting from the head of list
                    for (i = 0; i < tempArray.Count; i++)
                    {
                        if (tempArray[i].userTypes.userType[0] != 2)
                            break;
                        if (tempArray[i].paymentType >= instance.paymentType)
                        {
                            tempArray.Insert(i, instance);
                            bAdd = true;
                            break;
                        }
                    }

                    if (!bAdd)
                    {
                        if (i >= tempArray.Count)
                            tempArray.Add(instance);
                        else
                            tempArray.Insert(i, instance);
                    }
                }
                else if (instance.userTypes.userType[0] == 3)    // silver user
                {
                    bool bAdd = false;
                    int i = 0;
                    // starting from tail of list
                    for (i = tempArray.Count - 1; i >= 0; i--)
                    {
                        if (tempArray[i].userTypes.userType[0] != 3)
                            break;
                        if (tempArray[i].paymentType < instance.paymentType)
                        {
                            if (i + 1 >= tempArray.Count)
                                tempArray.Add(instance);
                            else
                                tempArray.Insert(i + 1, instance);
                            bAdd = true;
                            break;
                        }
                    }

                    if (!bAdd)
                    {
                        if ( i + 1 >= tempArray.Count)
                            tempArray.Add(instance);
                        else
                            tempArray.Insert(i + 1, instance);
                    }
                }
                else
                {
                    throw new Exception("not supported user type: " + instance.userTypes.userType[0]);
                }
            }
        }
    }

    public class FeedOffer
    {
        [XmlElement(ElementName = "offerInstances")]
        public FeedOfferInstances feedOfferInstances;

        [XmlElement(ElementName = "mediaType")]
        public uint mediaType;

        [XmlElement(ElementName = "mediaId")]
        public string mediaId;

        [XmlAnyElement]
        public XmlElement[] elements;

        public bool Equals(FeedOffer other, uint detailView)
        {
            if (!this.feedOfferInstances.Equals(other.feedOfferInstances, detailView))
                return false;
            //if (this.mediaType != other.mediaType)
            //    return false;
            if (this.mediaId.Replace("urn:uuid:", "").ToUpper() != other.mediaId.Replace("urn:uuid:", "").ToUpper())
                return false;
            return true;
        }
    }

    public class FeedEntry
    {
        [XmlAttribute(AttributeName = "itemNum", Namespace = "http://www.live.com/marketplace")]
        public int ItemNum;

        [XmlAttribute(AttributeName = "detailView", Namespace = "http://www.live.com/marketplace")]
        public uint DetailView;

        public string id;

        [XmlElement(ElementName = "updated")]
        public DateTime Updated;

        [XmlElement(ElementName = "offer", Namespace = "http://www.live.com/marketplace")]
        public FeedOffer Offer;

        [XmlAnyElement]
        public XmlElement[] elements;

        public bool Equals(FeedEntry other, uint detailView)
        {
            if (!this.Offer.Equals(other.Offer, detailView))
                return false;
            if (this.id.Replace("urn:uuid:", "") != other.id.Replace("urn:uuid:", ""))
                return false;
            if (this.DetailView != other.DetailView)
                return false;
            //if (this.ItemNum != other.ItemNum)
            //    return false;
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\Verification\Sample\Program.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.IO;
using ServerTestFramework.Utilities;
using System.Xml.Schema;
using CatVerifier;


namespace ConsoleApplication1
{
        

    class Program
    {       
        static void Main(string[] args)
        {                       
            string findMediaXml =
"<Results totalItems='10' numItems='1' name='FindMedia'>" +
  "<Item mediaType='2' store='Xbox360'>" +
    "<MediaId>DE444A8A-0A98-4620-821D-397A97771B0D</MediaId>" +
    "<ParentMediaId>DE444A8A-0A98-4620-821D-397A97771B01</ParentMediaId>" +
    "<Title>Pac-Man</Title>" +
    "<ReducedTitle>Pac-Man</ReducedTitle>" +
    "<ReducedDescription>Move Pac-Man and eat all the Pac-Dots to clear the stage while avoiding the ghosts.</ReducedDescription>" +
    "<Description>Move Pac-Man and eat all the Pac-Dots to clear the stage while avoiding the ghosts. Eat Power Pellets to become invincible and eat the blue ghosts! Eat multiple blue ghosts to earn bonus points! Are you skilled enough to stay alive? This classic video game was released in 1980, and drove players crazy all around the world. Pac-Man was acknowledged as the \"Most Successful Coin-Operated Game in History\" by The Guinness Book of World Records in 2005.</Description>" +
    "<TotalOfferCount>35</TotalOfferCount>" +
    "<NewOfferCount>10</NewOfferCount>" +
    "<DownloadCount>10</DownloadCount>" +
    "<Images numItems='2'>"+
			"<Item>"+
				"<Url>http://foo.foo.com/image-url.ext</Url>"+
				"<Width>120</Width>"+
				"<Height>40</Height>"+
				"<Format>PNG</Format>"+
			"</Item>"+
			"<Item>"+
				"<Url>http://foo.foo.com/image2-url2.ext</Url>"+
				"<Width>160</Width>"+
				"<Height>20</Height>"+
				"<Format>JPG</Format>"+
			"</Item>"+
		"</Images>"+
  "</Item>" +  
"</Results>";

            string findGameXml = "<Results totalItems='10' numItems='1' name='FindMedia'>" +
  "<Item mediaType='2' store='Xbox360'>" +
    "<GameMediaId>DE444A8A-0A98-4620-821D-397A97771B0D</GameMediaId>" +
     "<ParentMediaId>DE444A8A-0A98-4620-821D-397A97771B21</ParentMediaId>" +
     "<ExternalId>0x00000000</ExternalId>" +
    "<Name>Pac-Man</Name>" +
    "<Description>Move Pac-Man and eat all the Pac-Dots to clear the stage while avoiding the ghosts. Eat Power Pellets to become invincible and eat the blue ghosts! Eat multiple blue ghosts to earn bonus points! Are you skilled enough to stay alive? This classic video game was released in 1980, and drove players crazy all around the world. Pac-Man was acknowledged as the \"Most Successful Coin-Operated Game in History\" by The Guinness Book of World Records in 2005.</Description>" +    
    "<Rating>10</Rating>" +
    "<CustomGenre>Arcade</CustomGenre>" +
    "<NewContentCount>35</NewContentCount>" +
    "<TotalContentCount>35</TotalContentCount>" +
    "<Developer>Microsoft</Developer>" +
    "<Publisher>Microsoft</Publisher>" +
    "<Category>3015</Category>" +
     "<Category>3102</Category>" +    
  "</Item>" +

  "<!-- [...] -->" +
"</Results>";
            XmlDocument doc = new XmlDocument();
            Message msg;

            //CatVerify.(string gSchema, string vSchema, string gPath, string vPath) {Setup
            
            Guid[] testGuids = {                
                new Guid("DE444A8A-0A98-4620-821D-397A97771B0D")
                //new Guid("5EFC7975-14BC-11CF-9B2B-00AA00573819"),
                //new Guid("1496A755-94DE-11D0-8C3F-00C04FC2AAE2")
             };

           
            doc.LoadXml(findMediaXml);            
            XmlNode root = doc.FirstChild;            
            CatVerify.FindMedia(root, 10, testGuids, 1033, true, CatVerify.DetailView.Full, out msg);
            Console.Write(msg.info);
            Console.ReadKey();

            doc.LoadXml(findGameXml);
            root = doc.FirstChild; 
            CatVerify.FindGame(root, 10, testGuids, 1033, true, CatVerify.DetailView.Full, out msg);
            Console.Write(msg.info);
            Console.ReadKey();                   
        }               
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\Verification\Globe.cs ===
using System.Collections;
using System.Xml;
using System;

namespace Catalog
{
    public class DataSource {

        static public bool IsEMSData(XmlNode nd) { 
            if(nd.NamespaceURI.Contains("ems-catalog"))	return true;
            else return false;
        }
        
        public static string [] GetStringArray(string tagName, XmlElement nd){
            ArrayList list = new ArrayList();
            XmlNodeList nodes = nd.GetElementsByTagName(tagName);


            if (nodes != null && nodes.Count > 0)
            {
                foreach (XmlNode fnd in nodes)
                {
                    list.Add(fnd.InnerText);
                }

                return (string[]) list.ToArray(typeof(string));
            }

            return null; 
        }

        public static int[] GetIntArray(string tagName, XmlElement nd)
        {
            ArrayList list = new ArrayList();
            XmlNodeList nodes = nd.GetElementsByTagName(tagName);


            if (nodes != null && nodes.Count > 0)
            {
                foreach (XmlNode fnd in nodes)
                {
                    list.Add(int.Parse(fnd.InnerText));
                }

                return (int[])list.ToArray(typeof(int));
            }

            return null;
        }

        public static DateTime ConvertTime(string value)
        {
            string valueDate = (string)value;
            // remove the last 'Z' from the dateTime in the output
            if (valueDate.LastIndexOf('Z') == (valueDate.Length - 1))
                valueDate = valueDate.Substring(0, valueDate.Length - 1);
            return (DateTime)Convert.ChangeType(valueDate, typeof(DateTime));
        }

        public static string[] GetStringArray(XmlNodeList nodes)
        {
            ArrayList list = new ArrayList();

            if (nodes != null && nodes.Count > 0)
            {
                foreach (XmlNode fnd in nodes)
                {
                    list.Add(fnd.InnerText);
                }


                return (string[])list.ToArray(typeof(string));
            }

            return null;
        }

        public static string GetAllinOneString(XmlNodeList nodes)
        {
            string s=null;

            if (nodes != null && nodes.Count > 0)
            {
                foreach (XmlNode fnd in nodes)
                {
                    s+=fnd.InnerText;
                }

                return s;
            }

            return null;
        }

        public static string GetAllinOneString(XmlNodeList nodes, bool lcid)
        {
            string s = null;

            ArrayList list = new ArrayList();

            if (nodes != null && nodes.Count > 0)
            {
                foreach (XmlNode fnd in nodes)
                {
                    if (lcid)
                        list.Add(LocaleLcidMap.GetLcid(fnd.InnerText, lcid));
                    else list.Add(fnd.InnerText.Trim());
                }

                list.Sort();

                foreach(string str in list) {
                    s += str;
                }
                return s;
            }

            return null;
        }

        static public bool IsVideoMedia(int mediaType)
        {
            if (mediaType >= 2 && mediaType <= 10) return true;
            else return false;
        }
    }


    public class HashHelper<T, S> { 
        //bulket is a array list
        static public void AddEntry(Hashtable htbl, T key, S value) {
            if(!htbl.ContainsKey(key)) {
                ArrayList lst = new ArrayList();
                htbl.Add(key,lst);
                lst.Add(value);
            }
            else {
                ArrayList lst = (ArrayList) htbl[key];
                if(!lst.Contains(value)) lst.Add(value);
            }
        }
    }

    public class VideoDefinitions {
        public static String[] Mapping ={
        "Empty",
        "HD",
        "SD",
        "XD"
       };    
    }


    public class RatingDescriptor {
        static Hashtable t;
        static RatingDescriptor()
        {
            t = new Hashtable();         
            t.Add(10001,"Adult Situations");
            t.Add(10002, "Brief Nudity");
            t.Add(10003,"Graphic Language");
            t.Add(10004,"Graphic Violence");
            t.Add(10005,"Language");
            t.Add(10006,"Mild Violence");
            t.Add(10007, "Nudity");
            t.Add(10008,"Rape");
            t.Add(10009, "Strong Sexual Content");
            t.Add(10010,"Violence");
      }
        static public string GetRatingDescriptor(int id)
        {
            if (id >=10001 && id <=10010)
                return (string)(t[id]);
            else return null;
        }
    }

    public class VideoEncoding
    {
        public static String[] Mapping ={
         "Empty",
         "ASF",
         "H.264",
         "MPEG-1",
        "MPEG",
        "MPEG-4 ASP",
        "RealVideo",
        "WAX",
        "WMV",
        "WMV HD"
       };
    }
  
  


    public class OfferCounts
    {
        static Hashtable t;
        static OfferCounts()
        {
            string[] offerCounterOutput = new string[] {     
                            "<live:offerCounts xmlns:live=\"http://www.live.com/marketplace\">" +  
                            "<live:offerCount>"+
                              "<live:targetMediaType>18</live:targetMediaType>"+
                              "<live:totalOfferCount>2</live:totalOfferCount>"+
                              "<live:userCounts>"+
                                "<live:userCount>"+
                                  "<live:userType>2</live:userType>"+
                                  "<live:offerCount>2</live:offerCount>"+
                                "</live:userCount>"+
                                "<live:userCount>"+
                                  "<live:userType>3</live:userType>"+
                                 "<live:offerCount>1</live:offerCount>"+
                                "</live:userCount>"+
                              "</live:userCounts>"+
                            "</live:offerCount>"+
                            "<live:offerCount>"+
                              "<live:targetMediaType>22</live:targetMediaType>"+
                              "<live:totalOfferCount>2</live:totalOfferCount>"+
                              "<live:userCounts>"+
                                "<live:userCount>"+
                                  "<live:userType>2</live:userType>"+
                                  "<live:offerCount>2</live:offerCount>"+
                                "</live:userCount>"+
                                "<live:userCount>"+
                                  "<live:userType>3</live:userType>"+
                                  "<live:offerCount>1</live:offerCount>"+
                                "</live:userCount>"+
                              "</live:userCounts>"+
                            "</live:offerCount>"+
                          "</live:offerCounts>",                          
                      
                        "<live:offerCounts xmlns:live=\"http://www.live.com/marketplace\">" +  
                            "<live:offerCount>"+
                              "<live:targetMediaType>18</live:targetMediaType>"+
                              "<live:totalOfferCount>2</live:totalOfferCount>"+
                              "<live:userCounts>"+
                               "<live:userCount>"+
                                  "<live:userType>2</live:userType>"+
                                  "<live:offerCount>2</live:offerCount>"+
                                "</live:userCount>"+
                              "</live:userCounts>"+
                            "</live:offerCount>"+
                            "<live:offerCount>"+
                              "<live:targetMediaType>22</live:targetMediaType>"+
                              "<live:totalOfferCount>2</live:totalOfferCount>"+
                              "<live:userCounts>"+
                                "<live:userCount>"+
                                  "<live:userType>2</live:userType>"+
                                  "<live:offerCount>2</live:offerCount>"+
                                "</live:userCount>"+
                              "</live:userCounts>"+
                            "</live:offerCount>"+
                          "</live:offerCounts>"};


            t = new Hashtable();
            XmlDocument dNd = new XmlDocument();
            

            dNd.LoadXml(offerCounterOutput[0]);
            t.Add(new Guid("00020000-0023-0001-0000-0000000C2000"), dNd.FirstChild);

            dNd = new XmlDocument();
            dNd.LoadXml(offerCounterOutput[1]);
            t.Add(new Guid("00020000-0001-0001-0000-000000001000"), dNd.FirstChild);
        }

        static public XmlNode GetOfferCount(Guid mid)
        {
            if (t[mid] != null)
                return (XmlNode)(t[mid]);
            else return null;
        }
    }

    public class RatingTableForVideo
    {
        static Hashtable t;
        static RatingTableForVideo()
        {
            t = new Hashtable();
            t.Add("00020013-000A-0001-0113-200708310001", 306);
            t.Add("00020013-000A-0001-0113-200708310002", 307);
            t.Add("00020013-000A-0001-0113-200708310003", 304);
            t.Add("00020013-0009-0001-0113-000000000001", 306);
            t.Add("00020013-0009-0001-0113-000000000002", 306);
            t.Add("00020013-0009-0001-0113-000000000003", 307);            
        }

        static public int GetRatingId(string mid)
        {
            if (t[mid] != null)
                return (int)(t[mid]);
            else return -1;
        }
    }

    public class VideoDefinition
    {
        static Hashtable t;
        static VideoDefinition()
        {
            t = new Hashtable();
            ArrayList hd = new ArrayList();
            hd.Add("HD");

            ArrayList sd = new ArrayList();
            sd.Add("SD");

            ArrayList hdsd = new ArrayList();
            hdsd.Add("HD");
            hdsd.Add("SD");

            t.Add("00020013-000A-0001-0113-200708310001", hdsd);
            t.Add("00020013-000A-0001-0113-200708310002", hd);
            t.Add("00020013-000A-0001-0113-200708310003", hd);
            t.Add("00020013-0009-0001-0113-000000000001", hdsd);
            t.Add("00020013-0009-0001-0113-000000000002", sd);
            t.Add("00020013-0009-0001-0113-000000000003", hd);
        }

        static public ArrayList GetValues(string mid)
        {
            if (t[mid] != null)
                return (ArrayList)(t[mid]);
            else return null;
        }
    }

    public class LocaleLcidMap
    {
        static Hashtable t;
        static LocaleLcidMap()
        {
            t = new Hashtable();
            t.Add("zh-TW", 1028);
            t.Add("cs-CZ", 1029);
            t.Add("da-DK", 1030);     
            t.Add("de-DE", 1031);  
            t.Add("el-GR", 1032);     
            t.Add("en-US", 1033);     
            t.Add("fi-FI", 1035);
            t.Add("fr-FR", 1036);    
            t.Add("hu-HU", 1038);    
            t.Add("it-IT", 1040);     
            t.Add("ja-JP", 1041);    
            t.Add("ko-KR", 1042);    
            t.Add("nl-NL", 1043);     
            t.Add("nb-NO", 1044);     
            t.Add("pl-PL", 1045);     
            t.Add("pt-BR", 1046);
            t.Add("ru-RU", 1049);
            t.Add("sk-SK", 1051);
            t.Add("sv-SE", 1053);
            t.Add("de-CH", 2055);
            t.Add("en-GB", 2057);
            t.Add("es-MX", 2058);
            t.Add("fr-BE", 2060);
            t.Add("nl-BE", 2067);
            t.Add("pt-PT", 2070);
            t.Add("zh-HK", 3076);
            t.Add("de-AT", 3079);
            t.Add("en-AU", 3081);
            t.Add("es-ES", 3082);
            t.Add("fr-CA", 3084);
            t.Add("zh-SG", 4100);
            t.Add("en-CA", 4105);
            t.Add("fr-CH", 4108);
            t.Add("en-NZ", 5129);
            t.Add("en-IE", 6153);
            t.Add("en-ZA", 7177);
            t.Add("es-CO", 9226);
            t.Add("es-CL", 13322);
            t.Add("en-IN", 101081);
            t.Add("en-HK", 103076);
            t.Add("en-SG", 104100);
            t.Add("en-AE", 14337);
            t.Add("zh-CN", 2052);
        }
        static public int GetLcid(string locale)
        {
            if (t[locale] != null)
                return (int)(t[locale]);
            else return -1;
        }

        static public string GetLcid(string lcid, bool l)
        {
            foreach (DictionaryEntry de in t) { 
              int key = (int) de.Value;
              if(lcid.Equals(key.ToString()))
                  return (string)de.Key;
            }
            return null;
        }
    }

    public class CountryTaxTypeMap
    {
        static Hashtable t;
        static CountryTaxTypeMap()
        {
            t = new Hashtable();
            t.Add("AU", 2);
            t.Add("CA", 0);
            t.Add("HK", 1);
            t.Add("MX", 1);
            t.Add("NZ", 1);
            t.Add("US", 0);
            t.Add("JP", 2);
            t.Add("SG", 2);
            t.Add("AT", 3);
            t.Add("BE", 3);
            t.Add("CH", 3);
            t.Add("DE", 3);
            t.Add("DK", 3);
            t.Add("ES", 3);
            t.Add("FI", 3);
            t.Add("FR", 3);
            t.Add("GB", 3);
            t.Add("IE", 3);
            t.Add("IN", 0);
            t.Add("IT", 3);
            t.Add("KR", 4);
            t.Add("NL", 3);
            t.Add("NO", 3);
            t.Add("PT", 3);
            t.Add("SE", 3);
            t.Add("TW", 3);
        }

        static public uint GetTaxType(string countryCode)
        {
            if (t[countryCode.ToUpper()] != null)
                return Convert.ToUInt32(t[countryCode.ToUpper()]);
            else
                throw new Exception("Invalid country code for tax type!");
        }
    }

    /*select rv.ratingValueId from RatingValue rv inner join RatingSystemCountry rsc on (rsc.ratingSystemId = rv.ratingSystemId) where rsc.countryCode = 'JP'

select * from RatingSystemCountry*/

    public class  RatingSystemCountry{      
      static Hashtable t;
      static RatingSystemCountry() {
         t = new Hashtable();
         t.Add(0, "US");
         t.Add(10,	"US");
         t.Add(20,	"US");         
         t.Add(30,	"US");
         t.Add(40,	"US");
         t.Add(50,	"US");
         t.Add(101,	"US");
         t.Add(102, "US");
         t.Add(103,	"US");
         t.Add(104,	"US");
         t.Add(105,	"US");
         t.Add(106,	"US");
         t.Add(107,	"US");
         t.Add(108, "US");
         t.Add(201,	"US");
         t.Add(202,	"US");
         t.Add(203,	"US");
         t.Add(204,	"US");
         t.Add(205,	"US");
         t.Add(206, "US");
         t.Add(207,	"US");
         t.Add(208,	"US");
         t.Add(209,	"US");
         t.Add(301,	"US");
         t.Add(302,	"US");
         t.Add(303,	"US");
         t.Add(304,	"US");
         t.Add(305,	"US");
         t.Add(306,	"US");
         t.Add(307,	"US");
         t.Add(308,	"US");
         t.Add(901,	"US");
         t.Add(902,	"US");
         t.Add(903,	"US");
      }
      static public string GetCountryCode(string ratingId) {
          return (string)(t[int.Parse(ratingId)]);
      }
    }


    public class LcidCountryCode
    {
        static Hashtable t;
        static LcidCountryCode()
        {
            t = new Hashtable();
            t.Add(1033, "US");
            t.Add(1041, "JP");
            t.Add(1036, "FR");
            t.Add(2052, "cn");
        }

        static public string GetCountryCode(int lcid)
        {
            string country = null;
            if (t[lcid] != null)
                country = (string)(t[lcid]);
            return country;
        }
    }



    public enum MediaTypeEnum
    {
        Xbox360Game = 1,
        Movie = 2,
        TVShow = 3,
        MusicVideo = 4,
        ArcadeDemo = 5,
        ViralVideo = 7,
        TVEpisode = 8,
        TVSeason = 9,
        TVSeries = 10,
        VideoPreview = 11,
        Poster = 12,
        Podcast = 13,
        Image = 14,
        BoxArt = 15,
        ArtistPicture = 16,
        ScreenShot = 17,
        InGameContent = 18,
        GameDemo = 19,
        Xbox360Theme = 20,
        Xbox1Game = 21,
        GamerTile = 22,
        ArcadeGame = 23,
        InGameConsumable = 24,
        Track = 25,
        Album = 26,
        AlbumDisc = 27,
        AlbumArt = 28,
        Music = 29,
        GameVideo = 30,
        BackgroundArt = 31,
        Playlist = 32,
        GamePackVideo = 42

    };

    public enum DetailView 
    { IdOnly = 1, Minimum=2, Full=3, Starter =1, Home =2, Premium = 3, Enterprise = 4, Ultimate = 5 };

    public enum OfferFilterLevel
    {
        All = 1,
        WithOffers
    };

    public enum OrderDirection
    {
        Ascending = 1,
        Descending
    };

    public enum OrderMediaBy
    {
        Name = 1,        
        AvailabilityDate,
        ReleaseDate,
        DownloadCount,
        PurchaseCount,
        PlayCount,
        IndustryRating,
        UserRating,
        UserRatingCount,
        SortOrder
    }

    public enum OrderMediaOffersBy
    {
        Name = 1,
        StartDate,
        ReleaseDate,
        AvailabilityDate,
        DownloadCount,
        PurchaseCount,
    }

    // Payment Types in UODB
    [Flags]
    public enum PaymentTypeEnum : uint
    {
        CreditCard = 0x00000001,
        Token = 0x00000002,
        Points = 0x00000004,
        Wholesale = 0x00000008,
        Untrusted = 0x00010000, // PS# 116953 - special flag used in ContentDetails, to exclude hidden/future/past offers.
        All = CreditCard | Token | Points | Wholesale,
        NoTokens = All & ~Token,
    };

    // enum matches PaymentType table in fecatalogdb
    public enum CatalogPaymentTypeEnum : uint
    {
        Points = 1,
        Token = 2,
        CreditCard = 3,
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\connection\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	connection.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\connection\StdAfx.h ===
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_)
#define AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers


// TODO: reference additional headers your program requires here

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.
#include <winsock2.h>
#endif // !defined(AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\connection\connection.cpp ===
///////////////////////////////////////////////////////////////////////////
// Copyright  2001 Microsoft.  ALL RIGHTS RESERVED
// Programmer: Sean Wohlgemuth (mailto:seanwo@microsoft.com)
/////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"      // Precompiled header
#include "connection.h"  // Local
#include <TiDebug.h>     // Debugging
#include <stdio.h>


/////////////////////////////////////////////////////////////////////////////
// Base Connection
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
//  Ctor
//  
BaseConnection::BaseConnection(
    HANDLE hShutdownEvent    /* = NULL */, 
    UINT   uicWriteBuffers   /* = DEFAULTBUFFERS */, 
    INT    icWriteBufferSize /* = DEFAULTBUFFERSIZE */, 
    INT    icReadBufferSize  /* = -1 */ )
:
    m_s( INVALID_SOCKET ),
    m_hShutdownEvent( hShutdownEvent ),
    m_icReadBufferSize( icReadBufferSize ),
    m_uicEvents( 1 ),
    m_uicWriteBuffers( uicWriteBuffers ),
    m_icWriteBufferSize( icWriteBufferSize ),
    m_rgWriteBuffer( NULL ),
    m_rgWriteOverlapped( NULL ),
    m_uiWriteIndex( 0 )
{
    TiDebugScope( BaseConnection::Ctor )
    TiDebugMsg1( "Write Buffers = %u", m_uicWriteBuffers )

    // Create array of buffers
    m_rgWriteBuffer = new WSABUF[ m_uicWriteBuffers ];
    TiAssert( NULL != m_rgWriteBuffer );

    // Create array of overlapped objects
    m_rgWriteOverlapped = new WSAOVERLAPPEDEX[ m_uicWriteBuffers ];
    TiAssert( NULL != m_rgWriteOverlapped );

    // Populate array of buffers and initialize overlapped objects
    for( UINT ui = 0; ui < m_uicWriteBuffers; ui++ )
    {
        // Populate array of buffers
        m_rgWriteBuffer[ui].buf = new CHAR[ m_icWriteBufferSize ];
        TiAssert( NULL != m_rgWriteBuffer[ui].buf );
        m_rgWriteBuffer[ui].len = 0;

        // Initialize array of overlapped objects
        m_rgWriteOverlapped[ui].hEvent = WSACreateEvent();
        TiAssert( NULL != m_rgWriteOverlapped[ui].hEvent );
        m_rgWriteOverlapped[ui].fPending = false;
    }

    if( NULL != m_hShutdownEvent)
    {
        m_uicEvents = 2;
        m_rghEvents[1] = m_hShutdownEvent;
    }
}

/////////////////////////////////////////////////
//  Dtor
//
BaseConnection::~BaseConnection()
{
    TiDebugScope( BaseConnection::Dtor )
    TiDebugMsg1( "Write Buffers = %u", m_uicWriteBuffers )
    TiDebugMsg1( "Socket handle = %x", m_s )

    // Make sure there's no pending overlapped IO that's using this stuff.
    HRESULT hr = WaitForAllPendingBuffersToFlush( WSA_INFINITE );
    
    // Cleanup array of buffers and overlapped objects
    for( UINT ui = 0; ui < m_uicWriteBuffers; ui++ )
    {
        // Cleanup array of buffers
        if( NULL != m_rgWriteBuffer[ui].buf )
        {
            delete [] m_rgWriteBuffer[ui].buf;
        }

        // Cleanup array of overlapped objects
        if( NULL != m_rgWriteOverlapped[ui].hEvent )
        {
            BOOL fClosed = WSACloseEvent( m_rgWriteOverlapped[ui].hEvent );
            TiAssert( fClosed );
        }
    }

    // Deallocate array of overlapped objects
    if( NULL != m_rgWriteOverlapped )
    {
        delete [] m_rgWriteOverlapped;
    }

    // Deallocate array of buffers
    if( NULL != m_rgWriteBuffer )
    {
        delete [] m_rgWriteBuffer;
    }
}

/////////////////////////////////////////////////
//  Wait For All Pending Buffers To Flush
//
HRESULT BaseConnection::WaitForAllPendingBuffersToFlush(
    DWORD dwTimeout )
{
    TiDebugScope( BaseConnection::WaitForAllPendingBuffersToFlush )
    TiDebugMsg1( "Socket handle = %x", m_s )

    // Initiate buffer flush
    HRESULT hr = SendToFlush( dwTimeout );
    if FAILED( hr ) return hr;

    // Allocate event array
    HANDLE* rghEvents = NULL;
    rghEvents = new HANDLE[m_uicWriteBuffers];
    TiAssert( NULL != rghEvents );
    if( NULL == rghEvents) return E_FAIL;

    UINT uicEvents = 0;
    bool fTimeout  = false;

    //Count the number of pending buffers
    for( UINT ui = 0; ui < m_uicWriteBuffers; ui++ )
    {
        if( m_rgWriteOverlapped[ui].fPending)
        {
            rghEvents[uicEvents++] = m_rgWriteOverlapped[ui].hEvent;
        }
    }

    // If we have pending buffers wait for all of them
    if( uicEvents > 0 )
    {
        TiDebugMsg( "Had something to wait for" );

        if( WSA_WAIT_TIMEOUT == WSAWaitForMultipleEvents( uicEvents, rghEvents, TRUE, dwTimeout, FALSE ) ) 
        {
            TiDebugMsg( " and it timed out" );
            fTimeout = true;
        }
    }

    // Deallocate event array
    if( NULL != rghEvents )
    {
        delete [] rghEvents;
    }

    return fTimeout ? E_FAIL : S_OK;
}

/////////////////////////////////////////////////
//  Send To
//
//  Send to buffer memory
//
HRESULT BaseConnection::SendTo(
    const char*            rgchBuf, 
    int                    iLen, 
    BOOL                   fFlush    /* = TRUE */, 
    DWORD                  dwTimeout /* = WSA_INFINITE */, 
    const struct sockaddr* lpTo      /* = NULL */, 
    int                    iToLen    /* = 0 */ )
{
    TiDebugScope( BaseConnection::SendTo )
    TiDebugMsg1( "Socket handle = %x", m_s )

    HRESULT hr = S_OK;

    // Check parameters
    if( (NULL == rgchBuf ) ||
        (iLen <= 0) ||
        (iLen > m_icWriteBufferSize) )
    {
        TiDebugMsg( "Bad Params" );
        return E_INVALIDARG;
    }

    // check if connection is established
    if( INVALID_SOCKET == m_s )
    {
        TiDebugMsg( "Invalid Socket" );
        return E_FAIL;
    }

    while( TRUE )
    {
        // Was buffer pending?
        if( m_rgWriteOverlapped[m_uiWriteIndex].fPending )
        {
            TiDebugMsg( "Buffer was pending" );

            // Populate event array
            m_rghEvents[0] = m_rgWriteOverlapped[m_uiWriteIndex].hEvent;

            // Wait for buffer to unlock or for shutdown event to fire
            DWORD dwErr = WSAWaitForMultipleEvents( m_uicEvents, m_rghEvents, FALSE, dwTimeout, FALSE );
            if( (WSA_WAIT_FAILED    == dwErr) ||
                (WSA_WAIT_TIMEOUT   == dwErr) ||
                (WSA_WAIT_EVENT_0+1 == dwErr) )
            {
                TiDebugMsg1( "WFME didn't get overlapped IO event it wanted, dwErr = %d", dwErr);
                return E_FAIL;
            }

            // Reuse the buffer and set the offset back to 0; data was sent
            m_rgWriteOverlapped[ m_uiWriteIndex].fPending = false;
            m_rgWriteBuffer[     m_uiWriteIndex].len      = 0;
        }

        // Can we write to this buffer or do we need to flush/and or get new buffer?
        if( (INT)m_rgWriteBuffer[m_uiWriteIndex].len +iLen > m_icWriteBufferSize )
        {
            TiDebugMsg( "No room left need to make some" );

            hr = SendToFlush( dwTimeout, lpTo, iToLen );
            if( FAILED( hr ) ) return hr;

            // check buffer now
            continue;  
        }

        // Copy data to memory buffer
        memcpy( 
            m_rgWriteBuffer[m_uiWriteIndex].buf + m_rgWriteBuffer[m_uiWriteIndex].len,
            rgchBuf,
            iLen );
        
        m_rgWriteBuffer[m_uiWriteIndex].len += iLen;

        // Force a flush? (time critical)
        if( TRUE == fFlush )
        {
            TiDebugMsg( "Flush being forced" );

            hr = SendToFlush( dwTimeout, lpTo, iToLen );
            if( FAILED(hr) ) return hr;
        }
        break; // success
    }

    return S_OK;
}

/////////////////////////////////////////////////
//  Receive From
//
//  Receives data on an open socket
//
HRESULT BaseConnection::ReceiveFrom(char* rgchBuf, DWORD dwLen, DWORD* pdwLen, DWORD dwTimeout/*=WSA_INFINITE*/,struct sockaddr FAR *lpFrom/*=NULL*/, int* piFromLen/*=0*/)
{
    TiDebugScope( BaseConnection::ReceiveFrom )
    TiDebugMsg1( "Socket handle = %x", m_s )

    HRESULT hr = S_OK;

    // Check parameters
    if( (NULL == rgchBuf) ||
        (NULL == pdwLen) )
    {
        TiDebugMsg( "Bad Params" );
        return E_INVALIDARG;
    }

    // check if connection is established
    if( INVALID_SOCKET == m_s )
    {
        TiDebugMsg( "Invalid Socket" );
        return E_FAIL;
    }

    // wrap w/ wsa buffer
    WSABUF Buffer;
    Buffer.buf = (char*)rgchBuf;
    Buffer.len = dwLen;

    // create io completion event
    WSAOVERLAPPED overlapped;
    overlapped.hEvent = WSACreateEvent();
    if( NULL == overlapped.hEvent)
    {
        TiDebugMsg( "Couldn't create Event" );
        return E_FAIL;
    }

    // populate event array
    UINT uicEvents = 1;
    WSAEVENT rghEvents[2];
    rghEvents[0] = overlapped.hEvent;
    if( NULL != m_hShutdownEvent )
    {
        uicEvents = 2;
        rghEvents[1] = m_hShutdownEvent;
    }

    // receive data
    DWORD dwFlags = 0L;
    *pdwLen       = 0L;
    int iRC = WSARecvFrom(
        m_s,
        &Buffer,
        1,
        pdwLen,
        &dwFlags,
        lpFrom,
        piFromLen,
        &overlapped,
        NULL );

    if( 0 != iRC )
    {
        // blocks
        int iErr = WSAGetLastError();
        if( WSA_IO_PENDING==iErr ) 
        {
            TiDebugMsg( "Receive Pending" );

            // wait for completion event or shutdown
            DWORD dwErr = WSAWaitForMultipleEvents( uicEvents, rghEvents, FALSE, dwTimeout, FALSE );
            if( (WSA_WAIT_FAILED == dwErr) ||
                (WSA_WAIT_TIMEOUT == dwErr) ||
                (1 == dwErr) )
            {
                TiDebugMsg1( "but WFME didn't get overlapped IO event it wanted, dwErr = %d", dwErr );
                hr = E_FAIL;
            }

            TiDebugMsg( "Receive no longer Pending" );

            // success?
            if( SUCCEEDED( hr ) )
            {
                // get bytes received
                if( FALSE == WSAGetOverlappedResult( m_s, &overlapped, pdwLen, FALSE, &dwFlags ) )
                {
                    TiDebugMsg( "but failed to get overlapped result" );
                    hr = HRESULT_FROM_WIN32(WSAGetLastError());
                }
            }
        }
        else
        {
            TiDebugMsg( "Receive Failed" );
            hr = HRESULT_FROM_WIN32(iErr);
        }
    }
    else
    {
        TiDebugMsg( "Receive Succeeded" );
    }

    // close event
    BOOL fClosed = WSACloseEvent( overlapped.hEvent );
    if( FALSE == fClosed )
    {
        hr = E_FAIL;
    }

    return hr;
}

/////////////////////////////////////////////////
//  Reset Buffers
//
//  Reset overlapped buffers
//
HRESULT BaseConnection::ResetBuffers()
{
    TiDebugScope( BaseConnection::ResetBuffers )
    TiDebugMsg1( "Socket handle = %x", m_s )

    // Reset any existing buffers
    for( UINT ui = 0; ui < m_uicWriteBuffers; ui++ )
    {
        m_rgWriteBuffer[ui].len          = 0;
        m_rgWriteOverlapped[ui].fPending = false;

        BOOL fReset = WSAResetEvent( m_rgWriteOverlapped[ui].hEvent );
        TiAssert( fReset );
    }
    
    m_uiWriteIndex = 0;

    return S_OK;
}

/////////////////////////////////////////////////
//  Send To Flush
//
// Throw overlapped buffer to winsock
//
HRESULT BaseConnection::SendToFlush(
    DWORD                  dwTimeout /* = WSA_INFINITE */, 
    const struct sockaddr* lpTo      /* = NULL */, 
    int                    iToLen    /* = 0 */ )
{
    TiDebugScope( BaseConnection::SendToFlush )
    TiDebugMsg1( "Socket handle = %x", m_s )

    // Check if connection is established
    if( INVALID_SOCKET == m_s )
    {
        TiDebugMsg( "Invalid Socket" );
        return E_FAIL;
    }

    // Was buffer pending?
    if( m_rgWriteOverlapped[ m_uiWriteIndex ].fPending )
    {
        TiDebugMsg( "Buffer was pending" );

        // Populate event array
        m_rghEvents[0] = m_rgWriteOverlapped[ m_uiWriteIndex ].hEvent;

        // Wait for buffer to unlock or for shutdown event to fire
        DWORD dwErr = WSAWaitForMultipleEvents( m_uicEvents, m_rghEvents, FALSE, dwTimeout, FALSE );
        if( (WSA_WAIT_FAILED    == dwErr) ||
            (WSA_WAIT_TIMEOUT   == dwErr) ||
            (WSA_WAIT_EVENT_0+1 == dwErr) )
        {
            TiDebugMsg1( "but WFME didn't get overlapped IO event it wanted, dwErr = %d", dwErr );
            return E_FAIL;
        }

        // Reuse the buffer and set the offset back to 0; data was sent
        m_rgWriteOverlapped[ m_uiWriteIndex].fPending = false;
        m_rgWriteBuffer[     m_uiWriteIndex].len      = 0;

        return S_OK;
    }

    // Initialize number of bytes sent
    DWORD dwBytesSent = 0L;

    // Reset overlapped object's wsa event
    WSAResetEvent( m_rgWriteOverlapped[ m_uiWriteIndex ].hEvent );

    // Send 
    int iRC = WSASendTo( 
        m_s, 
        &m_rgWriteBuffer[m_uiWriteIndex],
        1,
        &dwBytesSent,
        0,
        lpTo,
        iToLen,
        &m_rgWriteOverlapped[m_uiWriteIndex],
        NULL);

    if( 0 != iRC )
    {
        int iError = WSAGetLastError();

        // Pending?
        if( WSA_IO_PENDING != iError )
        {
            TiDebugMsg( "Send Failed" );
            return HRESULT_FROM_WIN32( iError );    
        }

        TiDebugMsg( "Send Pending" );

        // Mark buffer as submitted
        m_rgWriteOverlapped[m_uiWriteIndex].fPending = true;

        // Set new current buffer
        if( ++m_uiWriteIndex >= m_uicWriteBuffers) {
            m_uiWriteIndex = 0;
        }
    }
    else
    {
        TiDebugMsg( "Send Succeeded" );

        // All data sent?
        if( dwBytesSent != m_rgWriteBuffer[m_uiWriteIndex].len)
        {
            // Should have gone to WSA_IO_PENDING!
            TiDebugMsg( "but didn't get WSA_IO_PENDING as expected" );
            return E_FAIL;
        }

        // Data was sent; set buffer offset back to 0
        m_rgWriteBuffer[m_uiWriteIndex].len = 0;
    }

    return S_OK;
}

/////////////////////////////////////////////////////////////////////////////
// TCP Client Connection
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
//  Ctor
//
TCPClientConnection::TCPClientConnection(
    HANDLE hShutdownEvent    /* = NULL */, 
    UINT   uicWriteBuffers   /* = DEFAULTBUFFERS */, 
    INT    icWriteBufferSize /* = DEFAULTBUFFERSIZE */, 
    INT    icReadBufferSize  /* = -1 */,
    BOOL fReuseAddress /* = false */)
:
    BaseConnection( hShutdownEvent, uicWriteBuffers, icWriteBufferSize, icReadBufferSize )
{
    TiDebugScope( TCPClientConnection::Ctor )

    // create close event
    m_hCloseEvent = WSACreateEvent();

    if (!m_hCloseEvent)
    {
        int iErr = ::WSAGetLastError();
        char szBuffer[100];
        sprintf(szBuffer, "Could Not Create Event, WSAGetLastError() == %d\n", iErr);
        ::OutputDebugStringA(szBuffer);
        TiAssert( NULL != m_hCloseEvent );
    }
    m_wOutGoingPort = 0;
    m_fReuseAddress = fReuseAddress;
}

/////////////////////////////////////////////////
//  Dtor
//
TCPClientConnection::~TCPClientConnection()
{
    TiDebugScope( TCPClientConnection::Dtor )
    TiDebugMsg1( "TCP Socket handle = %x", m_s )

    // Close socket
    Close();

    // close event
    BOOL fClosed = WSACloseEvent( m_hCloseEvent );
    TiAssert( fClosed );
}

/////////////////////////////////////////////////
//  Connect
//
HRESULT TCPClientConnection::Connect(
    DWORD dwIP, 
    WORD  wPort, 
    DWORD dwTimeout )   // = WSA_INFINITE
{
    TiDebugScope( TCPClientConnection::Connect )

    // already connected?
    if( INVALID_SOCKET != m_s )
    {
        TiDebugMsg1( "Already connected, TCP Socket handle = %x", m_s )
        return E_FAIL;
    }

    // create socket
    m_s = WSASocket( AF_INET,SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED );
    TiDebugMsg1( "New TCP Socket handle = %x", m_s )
    if( INVALID_SOCKET == m_s )
    {
        return E_FAIL;
    }

    // Set the send buffer size to 0; forcing our local buffers to be used preventing any bad-performance copy
    int iBufferSize = 0;
    if( 0 != setsockopt( m_s, SOL_SOCKET, SO_SNDBUF, (char*)&iBufferSize, sizeof(iBufferSize) ) )
    {
        return E_FAIL;
    }

    // Set the socket option to reuse address
    if (0 != setsockopt( m_s, SOL_SOCKET, SO_REUSEADDR, (const char *)&m_fReuseAddress, sizeof(BOOL) ))
    {
        return E_FAIL;
    }

    // If user has requested a different receive buffer size, set it
    if( -1 != m_icReadBufferSize ) 
    {
        TiDebugMsg1( "Setting Receive buffer size = %d", m_icReadBufferSize )
        iBufferSize = m_icReadBufferSize;
        if( 0 != setsockopt( m_s, SOL_SOCKET, SO_RCVBUF, (char*)&iBufferSize, sizeof(iBufferSize) ) )
        {
            return E_FAIL;
        }
    }

    // create address
    SOCKADDR_IN sin;
    sin.sin_family      = AF_INET;
    sin.sin_port        = htons(wPort);
    sin.sin_addr.s_addr = dwIP;

    // create event array
    WSAEVENT rghEvents[2];
    rghEvents[0] = WSACreateEvent();
    if( NULL==rghEvents[0] )
    {
        return E_FAIL;
    }

    // populate event array
    UINT uicEvents = 1;
    if( NULL!=m_hShutdownEvent )
    {
        uicEvents    = 2;
        rghEvents[1] = m_hShutdownEvent;
    }

    // register for network event
    if( SOCKET_ERROR == WSAEventSelect( m_s, rghEvents[0], FD_CONNECT ) )
    {
        BOOL fClosed = ::WSACloseEvent(rghEvents[0]);
        TiAssert(fClosed);
        return E_FAIL;
    }

    // connect
    HRESULT hr = S_OK;
    if( SOCKET_ERROR == WSAConnect( m_s, (const SOCKADDR*) &sin, sizeof(sin), NULL, NULL, NULL, NULL ) )
    {
        // blocks
        if( WSAEWOULDBLOCK==WSAGetLastError())
        {
            // wait for network event or shutdown
            DWORD dwErr = WSAWaitForMultipleEvents( uicEvents, rghEvents, false, dwTimeout, false );
            if( (WSA_WAIT_FAILED == dwErr) ||
                (WSA_WAIT_TIMEOUT==dwErr) ||
                (1 == dwErr) )
            {
                hr = E_FAIL;
            }

            // success?
            if SUCCEEDED(hr)
            {
                // get network event
                WSANETWORKEVENTS NetworkEvents;
                if( SOCKET_ERROR == WSAEnumNetworkEvents( m_s, rghEvents[0], &NetworkEvents ) )
                {
                    hr = E_FAIL;
                }

                // success?
                if SUCCEEDED(hr)
                {
                    // check network event error code
                    if( ((NetworkEvents.lNetworkEvents & FD_CONNECT ) == FD_CONNECT) && 
                        (NetworkEvents.iErrorCode[FD_CONNECT_BIT] != 0) )
                    {
                        hr = NetworkEvents.iErrorCode[FD_CONNECT_BIT];
                    }
                }
            }
        }
        else
        {
            // error other than blocking occurred
            hr = E_FAIL;
        }
    }

   // Get the Outgoing socket
    SOCKADDR_IN sddrFrom;
    int x = sizeof(sddrFrom);
    getsockname( m_s, (SOCKADDR*)&sddrFrom, &x);
    //printf("Outgoing port  %d\n", ntohs (sddrFrom.sin_port));
    m_wOutGoingPort = ntohs (sddrFrom.sin_port);

    // unregister for network event
    if( SOCKET_ERROR == WSAEventSelect( m_s, rghEvents[0], 0 ) )
    {
        hr = E_FAIL;
    }

    // close event
    if( FALSE == WSACloseEvent(rghEvents[0] ) )
    {
        hr = E_FAIL;
    }

    // register for socket close event
    WSAResetEvent( m_hCloseEvent );
    if( SOCKET_ERROR == WSAEventSelect( m_s, m_hCloseEvent, FD_CLOSE ) )
    {
        hr = E_FAIL;
    }

    // Reset buffers
    if( FAILED(ResetBuffers() ) )
    {
        hr = E_FAIL;
    }

    return hr;
}

/////////////////////////////////////////////////
//  Wait For Disconnect
//
bool TCPClientConnection::WaitForDisconnect(
    int iTimeout )
{
    TiDebugScope( TCPClientConnection::WaitForDisconnect )
    TiDebugMsg1( "TCP Socket handle = %x", m_s )

    // create event array
    UINT uicEvents = 1;
    WSAEVENT l_rgEvents[2];    
    l_rgEvents[0] = m_hCloseEvent;
    if( NULL != m_hShutdownEvent)
    {
        uicEvents     = 2;
        l_rgEvents[1] = m_hShutdownEvent;
    }

    // wait for event or timeout
    DWORD dwErr = WSAWaitForMultipleEvents( uicEvents, l_rgEvents, false, iTimeout, false );
    if( (WSA_WAIT_TIMEOUT!=dwErr) ||
        (1==dwErr) )
    {
        Close();
    }
    
    // if connection is gone set retval to false
    if( INVALID_SOCKET == m_s )
    {
        return false;
    }

    return true;
}

/////////////////////////////////////////////////
//  Close 
//
HRESULT TCPClientConnection::Close(
    bool fHard /* = false */ )
{
    TiDebugScope( TCPClientConnection::Close )
    TiDebugMsg1( "TCP Socket handle = %x", m_s )

    // Socket closed?
    if( INVALID_SOCKET == m_s) 
    {   
        TiDebugMsg( "Already Closed" );
        return S_FALSE;
    }

    int iWSALastErr = 0;
    if( fHard )
    {
        TiDebugMsg( "Hard disconnect!" );

        //Hard disconnect!
        LINGER linger;
        linger.l_onoff  = 1;
        linger.l_linger = 0;
        if( 0 != setsockopt( m_s, SOL_SOCKET, SO_LINGER, (const char *)&linger, sizeof(linger) ) )
        {
            return E_FAIL;
        }
    }
    else
    {
        SendToFlush();
    }
    
    if( SOCKET_ERROR == shutdown( m_s, SD_SEND ) )
    {
        return E_FAIL;
    }

    // create event array
    UINT uicEvents = 1;
    WSAEVENT rgEvents[2];    
    rgEvents[0] = m_hCloseEvent;
    if( NULL != m_hShutdownEvent)
    {
        uicEvents   = 2;
        rgEvents[1] = m_hShutdownEvent;
    }

    // wait for close event or timeout
    int iTimeout = 60000;
    DWORD dwErr = WSAWaitForMultipleEvents( uicEvents, rgEvents, false, iTimeout, false );
    if( 0 != dwErr )
    {
        return E_FAIL;
    }

    // Read socket to detect remote close

    // wrap w/ wsa buffer
    WSABUF Buffer;
    char  acGarbage[ 128 ];  // TBD!!! Get this off stack use send buff
    Buffer.buf = acGarbage;
    Buffer.len = 128;

    // create io completion event
    WSAOVERLAPPED overlapped;
    overlapped.hEvent = WSACreateEvent();
    if( NULL == overlapped.hEvent)
    {
        TiDebugMsg( "Couldn't create Event" );
        return E_FAIL;
    }
    rgEvents[0] = overlapped.hEvent;

    HRESULT hr = S_OK;

    bool bDoneReading = false;
    while( ! bDoneReading )
    {
        // receive data
        DWORD dwFlags = 0L;
        DWORD dwLen = 128;
        int iRC = WSARecvFrom(
            m_s,
            &Buffer,
            1,
            &dwLen,
            &dwFlags,
            NULL,
            NULL,
            &overlapped,
            NULL );

        if( 0 == iRC )
        {
            if( dwLen == 0 )
            {
                bDoneReading = true;
            }
        }
        else
        {
            // blocks
            int iErr = WSAGetLastError();
            if( WSA_IO_PENDING == iErr ) 
            {
                TiDebugMsg( "Receive Pending" );

                // wait for completion event or shutdown
                DWORD dwTimeout = 60000;
                DWORD dwErr = WSAWaitForMultipleEvents( uicEvents, rgEvents, FALSE, dwTimeout, FALSE );
                if( (WSA_WAIT_FAILED == dwErr) ||
                    (WSA_WAIT_TIMEOUT == dwErr) ||
                    (1 == dwErr) )
                {
                    TiDebugMsg1( "but WFME didn't get overlapped IO event it wanted, dwErr = %d", dwErr );
//                    TiAssert( false );
                    hr = E_FAIL;
                    break;
                }

                TiDebugMsg( "Receive no longer Pending" );
                // get bytes received
                if( FALSE == WSAGetOverlappedResult( m_s, &overlapped, &dwLen, FALSE, &dwFlags ) )
                {
                    TiDebugMsg( "but failed to get overlapped result" );
                    hr = HRESULT_FROM_WIN32(WSAGetLastError());
                    break;
                }
                else
                {
                    if( dwLen == 0 )
                    {
                        bDoneReading = true;
                    }
                }
            }
            else
            {
                if( iErr != WSAEWOULDBLOCK )
                {
                    TiDebugMsg( "Receive Failed - That's OK though" );
                    bDoneReading = true;
                }
            }
        }
    }

    BOOL fClosed = WSACloseEvent( overlapped.hEvent );
    TiAssert( fClosed );

    // Close socket
    if( SOCKET_ERROR == closesocket( m_s ) )
    {
        hr = E_FAIL;
    }

    // Set internal state
    m_s = INVALID_SOCKET;

    return hr;
}

/////////////////////////////////////////////////////////////////////////////
// UDP Connection
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
//  Ctor 
//
UDPConnection::UDPConnection(
    HANDLE hShutdownEvent    /* = NULL */, 
    UINT   uicWriteBuffers   /* = DEFAULTBUFFERS */, 
    INT    icWriteBufferSize /* = DEFAULTBUFFERSIZE */, 
    INT    icReadBufferSize  /* = -1 */ )
:
    BaseConnection( hShutdownEvent, uicWriteBuffers, icWriteBufferSize, icReadBufferSize )
{
    TiDebugScope( UDPConnection::Ctor )

    // Socket setup
    m_s = WSASocket(AF_INET,SOCK_DGRAM,0,NULL,0,WSA_FLAG_OVERLAPPED);
    TiDebugMsg1( "New UDP socket handle = %x", m_s )
    TiAssert( INVALID_SOCKET != m_s );
    if( INVALID_SOCKET == m_s )
    {
        return;
    }

    // Set the send buffer size to 0; forcing our local buffers to be used preventing any bad-performance copy
    INT iBufferSize = 0;
    if( 0!= setsockopt( m_s, SOL_SOCKET, SO_SNDBUF, (char*)&iBufferSize, sizeof(iBufferSize) ) )
    {
        TiAssert( 0 );
        return;
    }

    // If user has requested a different receive buffer size, set it
    if( -1 != m_icReadBufferSize )
    {
        TiDebugMsg1( "Setting Receive buffer size = %d", m_icReadBufferSize )
        iBufferSize = m_icReadBufferSize;
        if( 0 != setsockopt( m_s, SOL_SOCKET, SO_RCVBUF, (char*)&iBufferSize, sizeof(iBufferSize) ) )
        {
            TiAssert(0);
            return;
        }
    }
}

/////////////////////////////////////////////////
//  Dtor 
//
UDPConnection::~UDPConnection()
{
    TiDebugScope( UDPConnection::Dtor )
    TiDebugMsg1( "UDP socket handle = %x", m_s )

    if (m_s != INVALID_SOCKET)
    {
        shutdown( m_s, SD_SEND );
//        TiAssert( iErr == 0 );

        closesocket( m_s );
//        TiAssert( iErr == 0 );

        m_s = INVALID_SOCKET;
    }
}

/////////////////////////////////////////////////
//  Bind 
//
HRESULT UDPConnection::Bind(
    WORD wPort )
{
    TiDebugScope( UDPConnection::Bind )
    TiDebugMsg1( "UDP socket handle = %x", m_s )

    // Socket address
    SOCKADDR_IN sin;
    sin.sin_family      = AF_INET;
    sin.sin_port        = htons( wPort );
    sin.sin_addr.s_addr = INADDR_ANY;

    BOOL fVal = TRUE;
    int iError = setsockopt( m_s, SOL_SOCKET, SO_REUSEADDR, (const char *)&fVal, sizeof(BOOL) );
    TiAssert(iError == 0);

    // Bind socket
    if( SOCKET_ERROR == bind( m_s,(struct sockaddr *)&sin, sizeof(sin) ) )
    {
        return E_FAIL;  //Unable to bind socket
    }
    
    return S_OK;
}

/////////////////////////////////////////////////
//  Close 
//
HRESULT UDPConnection::Close(
    bool fHard /* = false */ )
{
    TiDebugScope( UDPClientConnection::Close )
    TiDebugMsg1( "UDP Socket handle = %x", m_s );

    // Socket closed?
    if( INVALID_SOCKET == m_s) 
    {   
        TiDebugMsg( "Already Closed" );
        return S_FALSE;
    }

    if( fHard )
    {
        TiDebugMsg( "Hard disconnect!" );

        //Hard disconnect!
//        LINGER linger;
//        linger.l_onoff  = 1;
//        linger.l_linger = 0;
//        int iErr = setsockopt( m_s, SOL_SOCKET, SO_LINGER, (const char *)&linger, sizeof(linger) );
  //      TiAssert( 0 == iErr );
        int iErr = shutdown( m_s, SD_SEND );
        TiAssert( iErr == 0 );
    }
    else
    {
        // bool f=true;
        // setsockopt(m_s,SOL_SOCKET,SO_DONTLINGER,(const char *)&f,sizeof(f));
        SendToFlush();
    
        int iErr = shutdown(m_s, SD_SEND);
        TiAssert( 0 == iErr );
    }

    // Close socket
    int iErr = closesocket(m_s);
    TiAssert( 0 == iErr );

    // Set internal state
    m_s = INVALID_SOCKET;

    return S_OK;
}

/////////////////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
//  Get Local Address 
//
//  Helper function getting local ip as  DWORD
//
DWORD GetLocalAddress()
{
    TiDebugScope( GetLocalAddress )

    DWORD dwIP = INADDR_NONE;

    char szHost[ 128 ];
    if( 0 == gethostname( szHost, 128 ) )
    {
        HOSTENT* pHostEnt= ::gethostbyname( szHost );
        if( NULL != pHostEnt )
        {
            DWORD dwFavorite = 0xFFFFFFFF;
            int iAddr = 0;
            while( NULL != pHostEnt->h_addr_list[ iAddr ] )
            {
                // This will prefer the lowest address in host order.  For our networks, this means Testnet addresses
                // will be preferred over corpnet addresses and front tier will be preferred over back tier.
                dwFavorite = min( dwFavorite, ntohl( *((DWORD*)pHostEnt->h_addr_list[ iAddr ] ) ) );
                iAddr++;
            }

            if( 0xFFFFFFFF != dwFavorite )
            {
                dwIP = htonl( dwFavorite );
            }
        }
    }

    return dwIP;  //Return IP address
}

/////////////////////////////////////////////////
//  Internet Address
//
//  Helper function converting names or ips to DWORD
//
DWORD InternetAddress(
    const char* pszHost )
{
    TiDebugScope( InternetAddress )

    DWORD dwIP = INADDR_NONE;

    // Get IP address
    dwIP = ::inet_addr( pszHost );
    if( dwIP == INADDR_NONE )
    {
        HOSTENT* pHostEnt = ::gethostbyname( pszHost );
        if( NULL != pHostEnt )
        {
            dwIP = *( (LPDWORD)pHostEnt->h_addr );
        }
    }

    return dwIP; // Return IP address
}

/////////////////////////////////////////////////
//  Winsock UP
//  Helper function to bring up winsock layer
//
//
HRESULT WinsockUP()
{
    TiDebugScope( WinsockUP )
 
    // Set version requested
    WORD wVersionRequested = MAKEWORD( 2, 2 );
 
    // WSAStartup
    WSADATA wsaData; // Version of winsock the system supports
    int err = WSAStartup( wVersionRequested, &wsaData );
    if( err != 0 )
    {
        return E_FAIL; // Unable to start winsock
    }
  
    // Check version
    if( LOBYTE(wsaData.wVersion) != 2 ||
        HIBYTE(wsaData.wVersion) != 2 )
    {
        WSACleanup();
        return E_FAIL; // Wrong version of winsock 
    }

    // Success
    return S_OK;
}

/////////////////////////////////////////////////
//  Winsock DOWN
//
//  Helper function to bring down winsock layer
//
HRESULT WinsockDOWN()
{
    TiDebugScope( WinsockDOWN )

    // WSACleanup
    int err=WSACleanup();
    if( err != 0 )
    {
        return E_FAIL; // Unable to bring down winsock
    }

    // Success
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\connection\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_connection_none_12.4.56.0_none_bd5a72a5038d443c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=connection
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.manifest
XP_MANIFEST_PATH=manifests\x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.cat
XP_CATALOG_PATH=manifests\x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.cat
XP_PAYLOAD_PATH=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=connection,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\Catalog\Verification\CatVerifier.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Xml;
using System.Collections;
using System.Data.SqlClient;
using System.Xml.Schema;
using System.IO;
using Catalog;
using Catalog.DynamicOutput;
using Catalog.TestCaseXmlParser;


namespace Catalog.Verifier
{
    public class MediaOffer : Media
    {
        //public Guid mediaId;//title media Id
         public Guid offerId;

        public Guid contentMediaId;
        //public int mediaType;
        public XmlElement offerRoot;
        public XmlElement mediaContentRoot;
        //public XmlElement mediaRoot; //title root
        //public Hashtable outputTbl;
        public new string ToString() {
             return (offerId.ToString().ToUpper());
        }

        public MediaOffer(OfferMediaObject om):base(om.MediaObj) {
            
            /*outputTbl = m.OutputTbl;
            mediaRoot = m.XmlDocRoot;
            mediaId = m.MediaId;
            mediaType = m.MediaType;
            orderString = m.OrderString;
            mObj = m;*/
            
            offerId = om.OfferId;            
            outputTbl = om.OutputTbl;
            offerRoot = om.OfferObj.XmlDocRoot;
            mediaContentRoot = om.MediaObj.XmlDocRoot;
            contentMediaId = mediaId;

            /*if (!DataSource.IsEMSData(mediaContentRoot))
            {
                if (om.MediaObj is GameTitleClass)    // hard coded to 1 (360Game)
                {
                    mediaId = contentMediaId;
                    mediaRoot = mediaContentRoot;
                }
                else
                {
                    mediaId = ((GameContentClass)(om.MediaObj)).TitleMediaObject.MediaId;
                    mediaRoot = ((GameContentClass)(om.MediaObj)).TitleMediaObject.XmlDocRoot;
                }
            }*/            
        }

        public MediaOffer(Guid mId, Guid oId)
            : base(mId)
         {
             //mediaId = mId;
             offerId = oId;
             offerRoot = null;
             outputTbl = null;
             mediaContentRoot = null;
             //mediaRoot = null;

         }
    }

    public class Media
    {
        public Guid mediaId;       
        public int mediaType;
        public XmlElement mediaRoot; //title root
        public Hashtable outputTbl;
        public string orderString;
        public MediaObject mObj;

        public new string ToString()
        {
            return ((string)mediaId.ToString().ToUpper());
        }

        public Media(MediaObject m) {
            outputTbl = m.OutputTbl;
            mediaRoot = m.XmlDocRoot;
            mediaId = m.MediaId;
            mediaType = m.MediaType;
            orderString = m.OrderString;
            mObj = m;
        }

        public Media(Guid mId, Hashtable htbl)
         {
             mediaId = mId;
             mediaRoot = null;
             outputTbl = htbl;
         }

        public Media(Guid mId)
        {
            mediaId = mId;
            mediaRoot = null;
            outputTbl = null;
        }       
    }

    
    public class Message
    {
        public string info;       // has everything which includes warning and errors
        public string warning; // only warning
        public string errors;    // only errors
        public bool success;

        public Message()
        {
            info = null;
            warning = null;
            errors = null;
            success = true;
        }

        public void AddInfo(string s)
        {
            if (info == null) info = "";
            info += "[INF]" + s + "\r\n";
        }

        public void AddWarning(string s)
        {
            if (warning == null) warning = "";
            warning += "[WRN]" + s + "\r\n";
            info += "[WRN]" + s + "\r\n";
        }

        public void AddError(string s)
        {
            if (errors == null) errors = "";
            errors += "[ERR]" + s + "\r\n";
            info += "[ERR]" + s + "\r\n";
            success = false;
        }
    }


    


    static public class CatVerify
    {
        
        //To do: remove hardcoded                                    
        const string GameFilePath = @"C:\xonline_main\private\test\Catalog\Verification\Sample\";
        const string VideoFilePath = @"C:\xonline_main\private\test\Catalog\Verification\Sample\";      

        static public Media[] GetExpectedMedia(Hashtable[] expectedItems)
        {
            ArrayList mList = new ArrayList();
            foreach (Hashtable table in expectedItems)
            {
                Media m = new Media(new Guid((string)table["mediaid"]));
                m.outputTbl = (Hashtable)table.Clone();
                m.outputTbl.Remove("mediaid");
                mList.Add(m);
            }
            return (Media[])mList.ToArray(typeof(Media));
        }

 
        static public MediaOffer[] GetExpectedMediaOffers(Hashtable[] expectedItems)
        {
            ArrayList mList = new ArrayList();
            foreach (Hashtable table in expectedItems)
            {
                MediaOffer m = new MediaOffer(new Guid((string)table["mediaid"]), new Guid((string)table["offerid"]));
                m.outputTbl = (Hashtable)table.Clone();
                m.outputTbl.Remove("mediaid");
                m.outputTbl.Remove("offerid");
                mList.Add(m);
            }
            return (MediaOffer[])mList.ToArray(typeof(MediaOffer));
        }

        static public Media[] GetExpectedMedia(Hashtable expectedOutput)
        {
            
            ArrayList mList = new ArrayList();
            foreach( DictionaryEntry de in expectedOutput) {
                if(de.Key.ToString().Contains("Item")) {
                    XmlDocument dNd = new XmlDocument();
                    dNd.LoadXml((string)de.Value);                    
                    NameTable nt = new NameTable();
                    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);

                    System.Xml.XmlNamespaceManager xmlnsManager = new System.Xml.XmlNamespaceManager(nt);
                    xmlnsManager.AddNamespace("pf", dNd.DocumentElement.NamespaceURI);

                    XmlNode mIdNode = dNd.SelectSingleNode("//pf:" + "MediaId", xmlnsManager);//, 
                    Media m = new Media(new Guid(mIdNode.InnerText));

                    foreach (XmlNode childNd in dNd.DocumentElement.ChildNodes)
                    {
                        if (m.outputTbl == null) {
                            m.outputTbl = new Hashtable();
                        }

                        if (childNd.Name == "MediaId") continue;
                        m.outputTbl.Add(childNd.Name, childNd.InnerText);
                    }
                    mList.Add(m);
                }
            }            
            return (Media [] )mList.ToArray(typeof(Media));
        }

        static public MediaOffer[] GetExpectedMediaOffers(Hashtable expectedOutput)
        {

            ArrayList mList = new ArrayList();
            foreach (DictionaryEntry de in expectedOutput)
            {
                if (de.Key.ToString().Contains("Item"))
                {
                    XmlDocument dNd = new XmlDocument();
                    dNd.LoadXml((string)de.Value);
                    NameTable nt = new NameTable();
                    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);

                    System.Xml.XmlNamespaceManager xmlnsManager = new System.Xml.XmlNamespaceManager(nt);
                    xmlnsManager.AddNamespace("pf", dNd.DocumentElement.NamespaceURI);

                    XmlNode mIdNode = dNd.SelectSingleNode("//pf:" + "MediaId", xmlnsManager);//, 
                    XmlNode oIdNode = dNd.SelectSingleNode("//pf:" + "OfferId", xmlnsManager);//, 
                    MediaOffer mo = new MediaOffer(new Guid(mIdNode.InnerText), new Guid(oIdNode.InnerText));

                    foreach (XmlNode childNd in dNd.DocumentElement.ChildNodes)
                    {                        
                        if (mo.outputTbl == null)
                        {
                            mo.outputTbl = new Hashtable();
                        }
                        if (childNd.Name == "MediaId" || childNd.Name == "OfferId") continue;
                         mo.outputTbl.Add(childNd.Name, childNd.InnerText);
                    }
                    mList.Add(mo);
                }
            }
            return (MediaOffer[])mList.ToArray(typeof(MediaOffer));
        }

        // one taginfo correponding to one value in a return item
        public class TagInfoInItem
        {
            TagInfo tag;
            public ArrayList valueList = null;// added for returning 
            public bool optional;//?
            public ArrayList userTypes;

            public string mappedTagName {
                get {
                    return tag.mappedTagName;
                }
            }

            public string tagName
            {
                get
                {
                    return tag.tagName;
                }
            }

            public TagPresent current
            {
                get
                {
                    return tag.current;
                }
                set {
                    tag.current = value;
                }
            }

            public DetailView viewLevel
            {
                get
                {
                    return tag.viewLevel;
                }
            }
            

            public TitleContentOfferType tcoType
            {
                get
                {
                    return tag.tcoType;
                }
            }

            public DataType valueType
            {
                get
                {
                    return tag.valueType;
                }
            }


            public bool attributeVal
            {
                get
                {
                    return tag.attributeVal;
                }
            }

            public TagPresent verifyIgnore
            {
                get
                {
                    return tag.verifyIgnore;
                }
                /*set
                {
                    tag.verifyIgnore = value;
                }*/
            }

            public string optionalField
            {
                get
                {
                    return tag.optionalField;
                }
            }

            public TagInfoInItem(TagInfo tagInfo)
            {
                tag = tagInfo;
                valueList = null;
            }
         
            public static bool CheckDuplicatesInArray(ArrayList values)
            {
                ArrayList tempList = new ArrayList(values.Count);

                foreach (object obj in values)
                {
                    if (tempList.Contains(obj))
                        return true;
                    tempList.Add(obj);
                }
                return false;
            }

            public static string PrintStringArray(ArrayList values)
            {
                StringBuilder strOut = new StringBuilder();
                foreach (object obj in values)
                {
                    strOut.Append(obj.ToString() + " | ");
                }
                return strOut.ToString();
            }

            public bool ValueCompare(ArrayList expected, Message msg)
            {
                return ValueCompare(expected, msg, false);
            }

            public bool ValueCompare(ArrayList expected, Message msg, bool orderCompare)
            {
                msg.AddInfo("Compare " + tag.tagName);
                if (expected == valueList ||
                    expected==null&& valueList.Count==0
                    ||valueList == null&&expected.Count==0)
                    return true;
                else
                    if (expected == null)
                    {

                        msg.AddError(string.Format("Mismatch for {0}! Expected: null", tag.tagName));//"Value Mismatch!tagName, "Expected: " + expected + ", Got: " + value");

                        string str ="Got: ";
                        for (int j = 0; j < valueList.Count; j++) {
                            str += valueList[j] + ", ";
                        }
                        msg.AddError(str);
                        return false;
                    }
                    else if (valueList == null)
                    {
                        msg.AddError(string.Format("Mismatch for {0}! Should get  value but get null", tag.tagName));//"Value Mismatch!tagName, "Expected: " + expected + ", Got: " + value");

                        return false;
                    }
                    else
                    {
                        if (expected.Count != valueList.Count)
                        {
                            msg.AddError(string.Format("Expected Value Count = {0}, but Returned Value count = {1}", expected.Count, valueList.Count));
                            return false;
                        }
                        else
                        {
                            if (CheckDuplicatesInArray(valueList))
                                msg.AddError(tag.tagName + ", there are duplicates in the array, " + PrintStringArray(valueList));

                            // the order of the array elements is not important and can be random, or sometimes the order is important
                            for (int i = 0; i < expected.Count; i++)
                            {
                                bool found = false;
                                if (orderCompare)
                                {
                                    found = ValueCompare(expected[i], valueList[i], true);
                                }
                                else
                                {
                                    for (int j = 0; j < valueList.Count; j++)
                                    {
                                        if (ValueCompare(expected[i], valueList[j], true))
                                        {
                                            found = true;
                                            break;
                                        }
                                    }
                                }
                                if (!found)
                                {
                                    msg.AddError(tag.tagName + ", Expecting: " + expected[i] + ", but cannot find a match in output: " + PrintStringArray(valueList));
                                }
                            }

                            return msg.success;
                        }

                    }
            }
            

             bool ValueCompare(object expected, object value, bool specialGuid){
                bool equal = true;
                string msg;
                switch (tag.valueType)
               {
                   case DataType.DATETIME:
                        string valueDate = (string)value;
                        // remove the last 'Z' from the dateTime in the output
                        if (valueDate.LastIndexOf('Z') == (valueDate.Length - 1))
                            valueDate = valueDate.Substring(0, valueDate.Length - 1);
                       if ((DateTime)Convert.ChangeType(valueDate, typeof(DateTime)) != (DateTime)Convert.ChangeType(expected, typeof(DateTime)))
                           equal = false;
                       break;

                   case DataType.GUID:
                       string expectGuid = expected.ToString().ToUpper().Replace("{", "");
                       expectGuid = expectGuid.ToString().ToUpper().Replace("}", "");

                        if (specialGuid)
                            expectGuid = "URN:UUID:" + expectGuid.ToString().ToUpper();
                       if (value.ToString().ToUpper() != expectGuid)
                           equal = false;
                       break;

                   case DataType.INT:
                       if ((int)Convert.ChangeType(value, typeof(int)) != (int)Convert.ChangeType(expected, typeof(int)))
                           equal = false;
                       break;

                   case DataType.IMAGE:
                   case DataType.PREVIEWIMAGE:
                    case DataType.PREVIEWVIDEO:
                   case DataType.CATEGORY:   
                    case DataType.VIDEOINSTANCE:                    
                    case DataType.GAMEINSTANCE:
                       if (!value.Equals(expected))
                           equal = false;
                       break;
                   case DataType.OFFERINSTANCE:
                       if (!((OfferInstance)value).Equals(expected, this.userTypes))
                           equal = false;
                       break;
 
                    case DataType.FLOAT:
                       if ((float)Convert.ChangeType(value, typeof(float)) != (float)Convert.ChangeType(expected, typeof(float)))                       
                           equal = false;
                       break;
                   case DataType.DOUBLE:
                       if ((double)Convert.ChangeType(value, typeof(double)) != (double)Convert.ChangeType(expected, typeof(double)))
                           equal = false;
                       break;
                   case DataType.LONG:
                      
                       long ext;
                        //injection data for external ID might be hex number
                       if (((string)expected).ToLower().StartsWith("0x"))
                       {
                           ext = Int64.Parse(((string)expected).Substring(2), System.Globalization.NumberStyles.HexNumber);
                       }
                       else ext = (long)Convert.ChangeType(expected, typeof(long));
                      

                       if ((long)Convert.ChangeType(value, typeof(long)) != ext)
                           equal = false;
                       break;
                    case DataType.XMLNODE:
                        msg = "";
                        equal = XmlNodeCompare((XmlNode)expected, ((XmlNode)value), null, ref msg);
                        break;
                   default:
                       if (!expected.Equals(value)) equal = false;
                       break;
 
               }
                                                 
               //if (!equal)
               //    throw new ExpectedValueCheckException(tag.tagName, "Expected: " + expected + ", Got: " + value);
                return equal;
            }

            public void UpdateCurrentTag( int mType)
            {

                current = verifyIgnore;

                if (tcoType >= TitleContentOfferType.TVONLY && !IsVideoMedia(mType))
                    current = TagPresent.IGNORE;
                if (tcoType == TitleContentOfferType.SeasonEpisodeONLY &&
                    !(mType == 8 || mType == 9))
                    current = TagPresent.IGNORE;

                if (tcoType == TitleContentOfferType.SeriesONLY &&
                   (mType != 10))
                   current = TagPresent.IGNORE;

                if (tcoType == TitleContentOfferType.EpisodeONLY &&
                    (mType != 8))
                   current = TagPresent.IGNORE;

                if (tcoType == TitleContentOfferType.SeasonONLY &&
                    (mType != 9))
                    current = TagPresent.IGNORE;
                return;
            }

        }

        //Hash Table used to store the tag information for a item in the API xml output, "Result" tag is not included here. 
        public class APIXmlInfo
        {
            public String APIName;  //API Name
            Hashtable tagHashtbl;

            public APIXmlInfo(TagInfoInItem[] tags)
            {
                tagHashtbl = new Hashtable();
                foreach (TagInfoInItem tag in tags)
                    tagHashtbl.Add(tag.tagName, tag);
            }

            public Hashtable tagTbl
            {
                get
                {
                    return tagHashtbl;
                }
            }

            public void ClearValueList()
            {
                foreach(DictionaryEntry de in tagHashtbl)
                {
                    TagInfoInItem tagItem = (TagInfoInItem)de.Value;
                    tagItem.valueList = null;
                }
            }
        }



        static void FillValuesForItem(XmlNode root, APIXmlInfo XmlInfo, Guid id, string idTagName, DetailView  viewLevel, Message msg)
        {
            //get the xml node for the item using Guidid
            msg.AddInfo("Load item for " + idTagName+ ": " + id.ToString());
           XmlNode itemNd = root.SelectSingleNode(String.Format("/Results/Item[{0}='{1}']", idTagName, id.ToString().ToUpper()));
           if (itemNd == null)
           {
               msg.AddError("Can not find item in API Xml outout");
               return;
           }
           //Global.RO.Info(String.Format("Fill values for Item with Guid:{0}", id));
           //fill the values in the xml node to tags and also check if there is missing tag
           FillTagsValueFromItemXml(0, itemNd, XmlInfo, viewLevel, null, msg);        
        }


        static void FillValuesForItem(XmlNode root, APIXmlInfo XmlInfo, MediaOffer pair, string mediaTagName, DetailView viewLevel, Message msg)
        {
            msg.AddInfo("Load item for " + "MediaId:" +pair.mediaId + " and OfferId: " + pair.offerId);
            XmlNode itemNd = root.SelectSingleNode(String.Format("/Results/Item[{0}={1} and OfferId = {2}]", mediaTagName, pair.mediaId, pair.offerId));
            if (itemNd == null)
            {
                msg.AddError("Can not find item in API Xml outout");
                return;
            }
            FillTagsValueFromItemXml(0,itemNd, XmlInfo, viewLevel, null, msg); 
        }

        /*
           NONE = 0,
        FROMOFFERFILE,
        GAMETITLEONLY,
        GAMECONTENTONLY,
        GAMETITLECONTENT,
        TVONLY,
        SeasonONLY,
        EpisodeONLY,
        SeriesONLY,
        SeasonEpisodeONLY
         */
        static bool IsVideoMedia(int mType) {
            if (mType == 10 || mType == 9 || mType == 8) return true;
            else return false;
        }
        
        static void FillTagsValueFromItemXml(int  mType, XmlNode itemNd, APIXmlInfo XmlInfo, DetailView viewLevel, TestCaseInfo testInfo, Message msg)
        {
            FillTagsValueFromItemXml(mType, itemNd, XmlInfo, viewLevel, testInfo, false, msg);
        }

        static void FillTagsValueFromItemXml( int  mType, XmlNode itemNd, APIXmlInfo XmlInfo, DetailView viewLevel, TestCaseInfo testInfo, bool liveInstance, Message msg)
        {
            Debug.Assert(itemNd != null);
            ArrayList optionals;

            foreach (string tagName in XmlInfo.tagTbl.Keys)
            {
                string t;
                try
                {
                    {
                        TagInfoInItem tagInfo = (TagInfoInItem)XmlInfo.tagTbl[tagName];
                        //tagInfo.current = tagInfo.verifyIgnore;
                        tagInfo.UpdateCurrentTag(mType);

                        if (tagInfo.viewLevel > viewLevel || tagInfo.current == TagPresent.IGNORE) continue;                       

                        // for media instance data, to remove the "|Instance|"
                        string searchTag = tagName;

                        if ((mType == 20 || mType == 22)
                            && (tagName.Contains("customGenre") || tagName.Contains("gameTitleMediaId")))
                            continue;
                        if (liveInstance)
                        {
                            if (tagName.Contains("|Instance|"))
                                searchTag = tagName.Replace("|Instance|", "");
                            else
                                continue;
                        }
                        else
                        {
                            if (tagName.Contains("|Instance|"))
                                continue;
                        }

                        // optional output fields
                        if (!string.IsNullOrEmpty(tagInfo.optionalField))
                        {
                            optionals = GetInputValues(testInfo, tagInfo.optionalField);
                            if (optionals == null || optionals.Count == 0)
                                continue;
                        }

                        if (tagInfo.attributeVal)
                        {
                            try
                            {
                                t = itemNd.Attributes.GetNamedItem(searchTag).Value;
                                if (!liveInstance || tagInfo.valueList == null)
                                    tagInfo.valueList = new ArrayList();
                                tagInfo.valueList.Add(t);
                            }
                            catch {
                                msg.AddError(String.Format("Could not find Attributes:<{0}>  missing!\r\n", tagName));
                            }
                        }
                        else
                        {

                            XmlNodeList ndList = itemNd.SelectNodes(searchTag, BothManager);
                            if (!liveInstance || tagInfo.valueList == null)
                                tagInfo.valueList = new ArrayList();

                            if (ndList.Count == 0)
                            {
                                if (tagInfo.verifyIgnore == TagPresent.DEPEND)
                                {
                                    tagInfo.valueList = null;                                    
                                    msg.AddWarning(String.Format(" FillTagsValueFromItemXml: Could not find tag:<{0}>  missing! not a must tag\r\n", tagName));
                                }
                                else
                                    msg.AddError(String.Format(" FillTagsValueFromItemXml: Could not find tag:<{0}>  missing!\r\n", tagName));
                                //tagInfo.current =TagPresent.IGNORE; 
                            }
                            else
                            {                                
                                foreach (XmlNode nd in ndList)
                                {   //added for Image object
                                    /*if(tagName.Equals("Images/Item")) {
                                        tagInfo.valueList.Add(new Image((XmlElement)nd));                                       
                                    }*/
                                    switch (tagInfo.valueType)
                                    {
                                        case DataType.CATEGORY:
                                            tagInfo.valueList.Add(new Category(nd));
                                            break;
                                        case DataType.IMAGE:
                                        case DataType.PREVIEWIMAGE:
                                            tagInfo.valueList.Add(new Image((XmlElement)nd));
                                            break;
                                        case DataType.VIDEOINSTANCE:
                                        case DataType.PREVIEWVIDEO:
                                            tagInfo.valueList.Add(new VideoMediaInstance((XmlElement)nd, tagInfo.tcoType));
                                            break;
                                        case DataType.GAMEINSTANCE:
                                            tagInfo.valueList.Add(new GameMediaInstance((XmlElement)nd));
                                            break;
                                        case DataType.MEDIAINSTANCE:
                                            tagInfo.valueList.Add(new MediaInstance((XmlElement)nd));
                                            break;
                                        case DataType.OFFERINSTANCE:
                                            tagInfo.valueList.Add(new OfferInstance((XmlElement)nd));
                                            break;
                                        case DataType.OFFERCOUNTS:
                                            tagInfo.valueList.Add(nd.InnerXml);
                                            break;
                                        case DataType.XMLNODE:
                                            tagInfo.valueList.Add((XmlNode)nd);
                                            break;
                                        default:                                       //if (tagName.Contains("//Instance/")) { 
                                            //    string InstanceId = nd.SelectSingleNode("../InstanceId").InnerText.ToUpper();
                                            //  tagInfo.valueList.Add(InstanceId + "/"+ nd.InnerText);
                                            //}
                                            //else
                                            tagInfo.valueList.Add(nd.InnerText);
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    msg.AddError(e.StackTrace.ToString());
                    //tagInfo.verifyIgnore = TagPresent.IGNORE;
                }
            }

        }

        //expected
        internal class OrderInfo {
           public int rank;
           public bool listed;
           public string retId;
           public string orderString;

            public OrderInfo(int r, bool appear)
            {
                rank = r;
                listed = appear;
                orderString = null; ;
            }


            public OrderInfo(int r, string s, bool appear) {
                rank = r;
                listed = appear;
                orderString = s;
            }
        }


        // check on root tag and attributes, totalItems, numItems, the order of items or any missing items
        static bool VerifyItemNumber(XmlNode resultXml, int expectedTotalNum, Media [] expectedMedia, bool ordered, string mediaTagName, TestCaseInfo testInfo, Message msg)
        {            

            XmlNode root = resultXml;
            bool success = true;
            bool found = true;
            bool missing = false;
            
            Hashtable orderTbl = new Hashtable();

            DateTime rootUpdated;

            if (!CheckRootAttributes(root, expectedTotalNum, expectedMedia == null ? 0 : expectedMedia.Length, out rootUpdated, msg))
            {
                msg.AddError("Quit verification  due to error in  Root tag. ");
                return msg.success;
            }
                        
           
            //catogry not apply here, it does not use Guid as genre id. 

            ArrayList idList = new ArrayList();    // used to identify the duplicates of ids

            int itemNum = 0;

            if (expectedTotalNum != 0) itemNum = GetPageSize(testInfo) * (GetPageNum(testInfo) -1);

            //orderTbl = new Hashtable();
            int rank = 1;
            string expectList = "";
            string returnList = "";

            if(expectedMedia != null)
            foreach (Media m in expectedMedia)
            {
               orderTbl.Add(m.mediaId.ToString().ToUpper(), new OrderInfo(rank++, m.orderString, false));
               expectList += m.mediaId.ToString().ToUpper() + ", ";
            }
            

            XmlNodeList idNds = root.LastChild.SelectNodes(string.Format("/atom:feed/atom:entry/atom:{0}", mediaTagName), AtomnsManager);
            int lastindex = -1;
            bool outofOrder = false;
            if (idNds != null && idNds.Count > 0)
                found = false;
            DateTime entryUpdated;
            bool foundRootUpdated = false;
            bool latestUpdatedInRoot = true;

            if (idNds.Count == 0) foundRootUpdated = true;

            foreach(XmlNode nd in idNds) 
            {
                // we could check addtional items from output xml. we could add a new flag for partial match here, but need to change numItems verify
                string id = nd.InnerText.Substring(9).ToUpper();    // remove the "urn:uuid:"
                itemNum++;

                entryUpdated = (DateTime)Convert.ChangeType(nd.ParentNode.SelectSingleNode("atom:updated", AtomnsManager).InnerText, typeof(DateTime));
                if (entryUpdated == rootUpdated) foundRootUpdated = true;
                if (entryUpdated > rootUpdated)
                {
                    latestUpdatedInRoot = false;
                    msg.AddError("entryUpdated: " + entryUpdated + "is newer than rootUpdated: " + rootUpdated);
                }

                int retItemNum = int.Parse(nd.ParentNode.Attributes.GetNamedItem("live:itemNum").Value);
                if (itemNum != retItemNum)
                    msg.AddError(string.Format("itemNum Got {0}, expected {1}", retItemNum, itemNum));
                if (idList.Contains(id))
                    msg.AddError("Duplicate Media Id: " + id);
                idList.Add(id);

                if (orderTbl[id] != null)
                {

                    OrderInfo t = (OrderInfo)orderTbl[id];
                    returnList += id + ", ";
                    t.listed = true;
                    found = true;
                    if (lastindex > t.rank)
                        outofOrder = true;
                    lastindex = t.rank;
                }
                else {
                    msg.AddError(string.Format("Return has none expected Item with Mediald: {0}!", id));
                    idList.Remove(id);
                }
            }

            foreach (DictionaryEntry de in orderTbl)
            {
                OrderInfo t = (OrderInfo)de.Value;
                if (!t.listed)
                {
                    msg.AddError(string.Format("Missing Item with Mediald: {0}!", de.Key));
                    success = false;
                    //there are expected data missing. 
                    missing = true;
                }
                else { 
                   //expected might be more than returned
                   if(t.rank<=idList.Count)
                        t.retId = (string)idList[t.rank-1];
                }
            }

            if (ordered && outofOrder && !missing )
            {
                success = true;
                foreach (DictionaryEntry de in orderTbl)
                {
                    OrderInfo t = (OrderInfo)de.Value;
                    if (t.listed == true && t.retId!= null && t.retId != (string)de.Key)
                    {
                        if (t.orderString != ((OrderInfo)orderTbl[t.retId]).orderString)
                        {
                           msg.AddError("return Items are out of order.");
                           msg.AddError("Expected: ");
                           msg.AddError(expectList);
                           msg.AddError("Get: ");
                           msg.AddError(returnList);
                           success = false;
                           break;
                       }
                    }                    
                }
            }

            if (!success || missing) 
            {
                msg.AddInfo("Verifying matched items fails");
            }
            else {
                msg.AddInfo("Verifying matched items successed!");
            }
            
            if(!found) {
                msg.AddError("No matched items found, Verify process finsish.");
                return false;
            }

            if(latestUpdatedInRoot && foundRootUpdated)
                msg.AddInfo("checking update match!");
            else { 
                if(!foundRootUpdated) 
                    msg.AddError("can not found root updated in allentries " + rootUpdated);
                throw new Exception(msg.errors);
            }
            return true;
        }

        //alwasy do resulttag check here
        static bool VerifyItemNumber(XmlNode resultXml, int expectedTotalNum, MediaOffer[] mediaOffers, bool order, string mediaTagName, Message msg)
        {
            Debug.Assert(mediaOffers != null);

            XmlNode root = resultXml;
            bool success = true;
            bool found = true;
            DateTime rootUpdated;
            if (!CheckRootAttributes(root, expectedTotalNum, mediaOffers.Length, out rootUpdated, msg))
            {
                msg.AddError("Quit verification  due to error in  Result tag. ");
                return msg.success;
            }
            
            //catogry not apply here, it does not use Guid as genre id. 
            //Check Order
            ArrayList idList = new ArrayList();    // used to identify the duplicates of ids
            Hashtable orderTbl = new Hashtable();
            int rank = 1;
            foreach (MediaOffer mo in mediaOffers)
            {
                orderTbl.Add(mo.ToString(), new OrderInfo(rank++, false));
            }

            XmlNodeList idNds = root.SelectNodes("/atom:feed/atom:entry", AtomnsManager);
            int lastindex = -1;
            bool outofOrder = false;
            if (idNds != null && idNds.Count > 0)
                found = false;

            foreach (XmlNode nd in idNds)
            {
                // the offerId is the key   
                string key = nd.SelectSingleNode("atom:" + mediaTagName, AtomnsManager).InnerText.Substring(9).ToUpper();    //  remove the "urn:uuid:"
                if (idList.Contains(key))
                    msg.AddError("Duplicate Offer Id: " + key);
                idList.Add(key);

                OrderInfo t = (OrderInfo)orderTbl[key];
                if (t != null)
                {
                    t.listed = true;
                    found = true;
                    if (lastindex > t.rank)
                        outofOrder = true;
                    lastindex = t.rank;
                }                
            }

            foreach (DictionaryEntry de in orderTbl)
            {
                OrderInfo t = (OrderInfo) de.Value;
                if (!t.listed)
                {
                    msg.AddError(string.Format("Missing Item with Media Offer: {0}!", de.Key));
                    success = false;
                }
            }

            if (order && outofOrder)
            {
                msg.AddError("return Items are out of order.");
                msg.AddError("Expected: ");
                msg.AddError("Get: ");
                success = false;
            }
            
            if (!success)
            {
                msg.AddError("Verifying matched items fails");
            }
            else {
                msg.AddInfo("Verifying matched items successed!");
            }
            //to do check sort
            if(!found) {
                msg.AddError("No matched items found, Verify process finsish.");
                return false;
            }
            return true;
        }

        internal class ExpectedValueCheckException : Exception
        {
            public string Name;
            public ExpectedValueCheckException(string name) : base("Value Mismatch! " + name) { Name = name; }
            public ExpectedValueCheckException(string name, string message) : base("Value Mismatch! " + name + ": " + message) { Name = name; }
            public ExpectedValueCheckException(string name, string message, Exception inner) : base("Value Mismatch! " + name + ": " + message, inner) { Name = name; }
        }


        static bool CheckRootAttributes(XmlNode root, int expectedTotalNum, int expectedReturnedNum, out DateTime rootUpdated, Message msg)
        {
            int totalNum, returnedNum;
            //Check totalItem and num of items return. 
            //XmlNode nd = nd.SelectSingleNode(String.Format("/Results[@totalItems={0} and @numItems={1},]",expectedTotalNum,expectedIds.Length));
            msg.AddInfo("Check Root Tag");
            msg.AddInfo("Expecting totalItems - " + expectedReturnedNum + ", returnedItems - " + expectedReturnedNum);

            rootUpdated = DateTime.Now;
            root = root.LastChild;
            Debug.Assert(root != null);

            if (root.Name != "feed")
            {
                msg.AddError("feed Tag is not root tag");
                return msg.success;
            }

            try
            {//nd.SelectSingleNode("atom:" + mediaTagName, AtomnsManager)
                rootUpdated = (DateTime)Convert.ChangeType(root.SelectSingleNode("atom:updated", AtomnsManager).InnerText, typeof(DateTime)); 
                totalNum = int.Parse(root.SelectSingleNode("live:totalItems", XmlnsManager).InnerText);
                if (totalNum != expectedTotalNum) msg.AddWarning("totalItems: Expected: " + expectedTotalNum + ", Got: " + totalNum);

                returnedNum = int.Parse(root.SelectSingleNode("live:numItems", XmlnsManager).InnerText);

                if (returnedNum != expectedReturnedNum) msg.AddWarning("numItems: Expected: " + expectedReturnedNum + ", Got: " + returnedNum);

            }
            catch (Exception e){
                msg.AddError(e.Message);
            }           
            return true;
        }



        static bool FindMediaInternal(XmlNode resultXml, TagInfoInItem[] tags, string mediaTagName, int expectedTotalNum, Media[] expectedMedias, TestCaseInfo testInfo, Message msg)
        {
            APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);
            //string mediaGroup;
            bool sorted = IsOrderedResults(testInfo);
            DetailView viewLevel = GetDetailView(testInfo);
            int lcid = GetLocaleId(testInfo);

            if (VerifyItemNumber(resultXml, expectedTotalNum, expectedMedias, sorted, mediaTagName, testInfo, msg))
            {
                foreach (Media m  in expectedMedias)
                {
                    //get the values in the item xml into tags.value
                    try
                    {
                        //
                        //FillValuesForItem(resultXml, apiXmlInfo, id, mediaTagName, viewLevel, msg);
                        msg.AddInfo("Load item for " + mediaTagName + ": " + m.mediaId.ToString());
                        XmlNode itemNd = resultXml.SelectSingleNode(String.Format("/atom:feed/atom:entry[atom:{0}='{1}']", mediaTagName, "urn:uuid:" + m.mediaId.ToString().ToUpper()), AtomnsManager);
                        if (itemNd == null) continue;
                        XmlNode liveContentNode = itemNd.SelectSingleNode("atom:content", AtomnsManager);
                        FillTagsValueFromItemXml(m.mediaType, itemNd, apiXmlInfo, viewLevel, testInfo, msg);

                        //LoadCompareDetail(APIXmlInfo XmlInfo, Media m, int lcid, DetailView viewLevel, TestCaseInfo testInfo, Message msg, XmlNamespaceManager xmlNameManager, string entryPath)
                        LoadCompareDetail(apiXmlInfo, m, lcid, viewLevel, testInfo, msg, EmsnsManager, "");
                        //LoadCompareMediaDetail(apiXmlInfo, m, lcid, mediaGroup, viewLevel, testInfo, msg);
                    }
                    catch (Exception e){
                        msg.AddError(e.Message + e.StackTrace);
                        msg.AddError("Verification for item " + mediaTagName + ": " + m.mediaId.ToString() + " failed with above exception");
                        continue;
                    }
                }
            }
            return msg.success;
        
        }


        static bool FindMediaOfferInternal(XmlNode resultXml, TagInfoInItem[] tags, string mediaTagName, int expectedTotalNum, MediaOffer[] expectedOffers, TestCaseInfo testInfo, Message msg)
        {
            APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);
            bool sorted = IsOrderedResults(testInfo);
            DetailView viewLevel = GetDetailView(testInfo);
            int lcid = GetLocaleId(testInfo);

            if (VerifyItemNumber(resultXml, expectedTotalNum, expectedOffers, sorted, mediaTagName, msg))
            {
                foreach (MediaOffer pair in expectedOffers)
                {
                    //get the values in the item xml into tags.value
                    try
                    {
                        //FillValuesForItem(resultXml, apiXmlInfo, pair, mediaTagName, viewLevel, msg);
                        msg.AddInfo("\r\nLoad item for " + mediaTagName + ":(mediaId, offerId): " + pair.mediaId+","+pair.offerId);

                        // get live:content
                        XmlNode itemNd = resultXml.SelectSingleNode(String.Format("/atom:feed/atom:entry[atom:{0}='{1}']", mediaTagName, "urn:uuid:" + pair.offerId.ToString().ToUpper()), AtomnsManager);
                        if (itemNd == null) continue;

                        XmlNode liveContentNode = itemNd.SelectSingleNode("atom:content", AtomnsManager);
                        apiXmlInfo.ClearValueList();  // clear all ValueList first
                        FillTagsValueFromItemXml(pair.mediaType, itemNd, apiXmlInfo, viewLevel, testInfo, msg);

                        // get all the offer/media instances
                        XmlNodeList liveInstanceList = itemNd.SelectNodes("live:mediaInstances/live:gameMediaInstance", XmlnsManager);
                        foreach (XmlNode instanceNode in liveInstanceList)
                        {
                            FillTagsValueFromItemXml(pair.mediaType, instanceNode, apiXmlInfo, viewLevel, testInfo, true, msg);
                        }

                        //LoadCompareMediaOfferDetail(APIXmlInfo XmlInfo, MediaOffer mo, int lcid, string mediaGroup, DetailView viewLevel, Message msg)
                        //LoadCompareMediaOfferDetail(apiXmlInfo, pair, lcid,  "", viewLevel,  msg);
                        LoadCompareDetail(apiXmlInfo, pair, lcid, viewLevel, testInfo, msg, EmsnsManager, "{0}");
                    }
                    catch {
                        continue;
                    }
                }
            }
            return msg.success;
        }


        //Assume 
        //to do here for video
        private static readonly string inputSortBy = "OrderBy";
        private static readonly string inputSortDirection = "OrderDirection";
        private static readonly string inputDetailView = "DetailView";
        private static readonly string inputLocale = "LegalLocale";
        private static readonly string inputStore = "Store";

        public static DetailView GetDetailView(TestCaseInfo testInfo)
        {
            // the detailView value from Input parameters
            ArrayList inputPara = (ArrayList)testInfo.InputValues[inputDetailView];
            return (DetailView)Convert.ToInt32(inputPara[0].ToString());
        }

        private static int GetPageSize(TestCaseInfo testInfo)
        {
            // the detailView value from Input parameters
            ArrayList inputPara = (ArrayList)testInfo.InputValues["PageSize"];
            return Convert.ToInt32(inputPara[0].ToString());
        }

        public static ArrayList GetUserTypes(TestCaseInfo testInfo)
        {
            // the detailView value from Input parameters
            if(testInfo.InputValues["UserTypes"]!=null) 
                return  (ArrayList)testInfo.InputValues["UserTypes"];
            return null;
        }
        private static int GetPageNum(TestCaseInfo testInfo)
        {
            // the detailView value from Input parameters
            ArrayList inputPara = (ArrayList)testInfo.InputValues["PageNum"];
            return Convert.ToInt32(inputPara[0].ToString());
        }

        private static bool IsOrderedResults(TestCaseInfo testInfo)
        {
            bool ordered = false;
            // the OrderBy and OrderDirection values from input parameters
            if (testInfo.InputValues[inputSortBy] != null && testInfo.InputValues[inputSortDirection] != null)
                ordered = true;

            return ordered;
        }

        public static int GetLocaleId(TestCaseInfo testInfo)
        {
            // the locale id from Input parameters
            ArrayList inputPara = (ArrayList)testInfo.InputValues[inputLocale];
            return LocaleLcidMap.GetLcid(inputPara[0].ToString());
        }

        public static string GetCountryCode(TestCaseInfo testInfo)
        {
            ArrayList inputPara = (ArrayList)testInfo.InputValues[inputLocale];
            return inputPara[0].ToString().Substring(3);
        }

        public static uint GetStore(TestCaseInfo testInfo)
        {
            ArrayList inputPara = (ArrayList)testInfo.InputValues[inputStore];
            return Convert.ToUInt32(inputPara[0].ToString());
        }

        private static ArrayList GetInputValues(TestCaseInfo testInfo, string inputName)
        {
            return (ArrayList)testInfo.InputValues[inputName];
        }


        public struct FileInfo
        {
            int index;
            int fileSize;
            internal FileInfo(XmlElement nd)
            {
                this.index = int.Parse(nd.GetElementsByTagName("live:index")[0].InnerText);
                this.fileSize = int.Parse(nd.GetElementsByTagName("live:fileSize")[0].InnerText);
            }

            internal FileInfo(XmlElement nd, int i)
            {
                this.index = int.Parse(nd.GetElementsByTagName("fileIndex")[0].InnerText);
                this.fileSize = int.Parse(nd.GetElementsByTagName("size")[0].InnerText);
            }

            public override string ToString() {
                return index.ToString()+fileSize.ToString();
            }
        }


        public class MediaInstance:VideoMediaInstance
        {
            string mediaId;
            string offerLicneseType;
            string legalText;


            public override int GetHashCode()
            {
                return 0;
            }
            public override bool Equals(Object other)
            {
                MediaInstance o = (MediaInstance)other;

                if ((this.isAcquirable != o.isAcquirable) ||
                    !(this.videoDefinition.Equals(o.videoDefinition)) ||
                    !this.videoEncoding.Equals(o.videoEncoding) ||
                    (this.isAdSupported != o.isAdSupported) ||
                    !this.videoInstanceId.Equals(o.videoInstanceId) ||                   
                    !this.audioTrackLanguages.Equals(o.audioTrackLanguages) ||
                   !this.subtitleLanguages.Equals(o.subtitleLanguages)||
                    !this.fileList.Equals(o.fileList)
                    )
                    return false;
                else 
                if (!this.isDrm.Equals(o.isDrm) ||
                    !this.mediaId.Equals(o.mediaId) ||
                    !this.legalText.Equals(o.legalText) ||
                    !this.offerLicneseType.Equals(o.offerLicneseType))
                    return false;
                else return true;
                

            }

            public MediaInstance(VideoMediaInstance vInstance, OfferObject oObj, string mediaId)
                : base(vInstance)
            {
                this.mediaId = mediaId;
                string licenceTypeId = oObj.GetNodeByXpath(string.Format(".//pf:ProviderTermMediaInstance[pf:mediaInstanceId='{0}']/pf:licenseTypeId",
                                            vInstance.videoInstanceId)).InnerText;

                switch (licenceTypeId) { 
                    case "3":
                        offerLicneseType = "DTO";
                        legalText = "xbl video marketplace dto 1033";
                        break;
                }                
            }

            internal MediaInstance(XmlElement nd)
                : base(nd, TitleContentOfferType.FROMOFFERFILE)
            {
                 mediaId = nd.GetElementsByTagName("live:mediaId")[0].InnerText;
                 mediaId = mediaId.Replace("urn:uuid:", "");
                 offerLicneseType = nd.GetElementsByTagName("live:offerLicenseType")[0].InnerText; ;
                 isDrm = nd.GetElementsByTagName("live:isDrm")[0].InnerText; ;
                 legalText = nd.GetElementsByTagName("live:legalText")[0].InnerText; ;
            }
        }

        public class GameMediaInstance 
        {
            string mediaId;
            string offerLicneseType;
            string legalText;

            public string instanceId;
            public int isAcquirable;
            public int isAdSupported;
            public int installSize;
            public int packageSize;
            public ulong contentId;
            public string fileUrl;

            public int isPreview = 0;

            public override int GetHashCode()
            {
                return 0;
            }
            public override bool Equals(Object other)
            {
                GameMediaInstance o = (GameMediaInstance)other;

                if ((this.isAcquirable != o.isAcquirable) ||
                    (this.installSize != (o.installSize)) ||                    
                    !this.instanceId.Equals(o.instanceId) ||
                    (this.packageSize != (o.packageSize)) ||
                    (this.isAdSupported != (o.isAdSupported)) ||
                    (this.fileUrl != (o.fileUrl)) ||
                    (this.isAdSupported != (o.isAdSupported)) ||
                    (this.contentId != (o.contentId))                    
                    )
                    return false;
                else
                    if  ((this.legalText!=null && !this.legalText.Equals(o.legalText)) ||
                        (this.offerLicneseType!=null && !this.offerLicneseType.Equals(o.offerLicneseType)))
                        return false;
                    else return true;
            }

            public void UpdateOfferPart( OfferObject oObj, string mediaId) {
            
              this.mediaId = mediaId;
                string licenceTypeId = oObj.GetNodeByXpath(string.Format(".//pf:ProviderTermMediaInstance[pf:mediaInstanceId='{0}']/pf:licenseTypeId",
                                            instanceId)).InnerText;

                switch (licenceTypeId) { 
                    case "3":
                        offerLicneseType = "DTO";
                        legalText = "xbl video marketplace dto 1033";
                        break;
                    case "1":
                        offerLicneseType = "DTO";
                        legalText = "SyncCast DTO...";
                        break;
                }                
            }

/*
   <MediaInstance>
  <mediaInstanceId>{00010000-0019-0002-0000-0000000D1000}</mediaInstanceId> 
  <mediaId>{00010000-0019-0001-0000-0000000D1000}</mediaId> 
  <isAcquirable>1</isAcquirable> 
  <isAdSupported>0</isAdSupported> 
  <isPreview>0</isPreview> 
  </MediaInstance>
*/



            public GameMediaInstance(XmlElement gameContantInstanceNode, string instanceId, string mId)                
            {
                mediaId = mId;


                //offerLicneseType = nd.GetElementsByTagName("live:offerLicenseType")[0].InnerText;

                //legalText = nd.GetElementsByTagName("live:legalText")[0].InnerText;
                XmlElement nd = gameContantInstanceNode;
                
                this.instanceId = instanceId;

                packageSize = int.Parse(nd.GetElementsByTagName("packageSize")[0].InnerText);

                installSize = int.Parse(nd.GetElementsByTagName("installSize")[0].InnerText);
                //fileUrl = nd.GetElementsByTagName("url")[0].InnerText;


                try
                {
                    contentId = ulong.Parse(nd.GetElementsByTagName("liveContentId")[0].InnerText);
                    //contentId = ulong.Parse(nd.GetElementsByTagName("liveContentId")[0].InnerText.Replace("0x", ""), System.Globalization.NumberStyles.AllowHexSpecifier);
                }
                catch {
                    ;
                }

                nd = (XmlElement)gameContantInstanceNode.ParentNode;


                isAcquirable = int.Parse(nd.GetElementsByTagName("isAcquirable")[0].InnerText);

                isAdSupported = int.Parse(nd.GetElementsByTagName("isAdSupported")[0].InnerText);


                isPreview = int.Parse(nd.GetElementsByTagName("isPreview")[0].InnerText);
                
            }

            internal GameMediaInstance(XmlElement nd)                
            {

                if(nd.GetElementsByTagName("live:offerLicenseType").Count!=0)
                    offerLicneseType = nd.GetElementsByTagName("live:offerLicenseType")[0].InnerText;

                if(nd.GetElementsByTagName("live:legalText").Count!=0)
                    legalText = nd.GetElementsByTagName("live:legalText")[0].InnerText;

                instanceId = nd.GetElementsByTagName("live:gameContentInstanceId")[0].InnerText;
                instanceId = instanceId.Replace("urn:uuid:", "");

                isAcquirable = int.Parse(nd.GetElementsByTagName("live:isAcquirable")[0].InnerText);

                isAdSupported = int.Parse(nd.GetElementsByTagName("live:isAdSupported")[0].InnerText);
                
                packageSize =  int.Parse(nd.GetElementsByTagName("live:packageSize")[0].InnerText);

                installSize = int.Parse(nd.GetElementsByTagName("live:installSize")[0].InnerText);
                //fileUrl = nd.GetElementsByTagName("live:fileUrl")[0].InnerText;

                try
                {
                    if (nd.GetElementsByTagName("live:contentId").Count != 0)
                        contentId = ulong.Parse(nd.GetElementsByTagName("live:contentId")[0].InnerText);
                }
                catch {
                    contentId = 0;
                }
            }
        }
       public class VideoMediaInstance
        {
            enum InstanceType { Video=1, Preview=2, Offer=3};
            public string videoInstanceId;
            public int isAcquirable;//not for preview instance 
            public int isAdSupported;//not for preview instance 
            public string videoDefinition;
            public  string videoEncoding;
            public  string aspectRatio;//not for offer
            public string resolution;//not for offer
            public string fileList;
            public string burntInSubtitleLcid;
            public string audioTrackLanguages;
            public string subtitleLanguages;
            public string isDrm;
            public int isPreview;
            public string [] relatedMediaList;
            string countryCode;
          
            
            public override int GetHashCode(){
                return 0;
            }
            public override bool Equals(Object  other) {
                VideoMediaInstance o = (VideoMediaInstance)other;
                if (!(this.aspectRatio.Equals(o.aspectRatio)) ||
                    (this.isAcquirable != o.isAcquirable) ||
                    !(this.videoDefinition.Equals(o.videoDefinition)) ||
                    !this.videoEncoding.Equals(o.videoEncoding) ||
                    (this.isAdSupported != o.isAdSupported) ||
                    !this.videoInstanceId.Equals(o.videoInstanceId) ||
                    !this.resolution.Equals(o.resolution) || !(this.audioTrackLanguages == o.audioTrackLanguages
                    || this.audioTrackLanguages.Equals(o.audioTrackLanguages)) ||
                   !this.subtitleLanguages.Equals(o.subtitleLanguages) ||
                    !this.fileList.Equals(o.fileList)
                    )
                    return false;
                return true;
                
            }
            /*<VideoInstance op="Add">
    <videoMediaInstanceId>72babca4-366b-4ceb-b46e-ec33faa4ebc0</videoMediaInstanceId>
    <isDRM>1</isDRM>
    <audioEncodingId>1</audioEncodingId>
    <audioChannel>2</audioChannel>
    <videoDefinitionId>2</videoDefinitionId>
    <videoAspectRatio>1.33:1</videoAspectRatio>
    <videoResolution>480p</videoResolution>
    <videoEncodingId>8</videoEncodingId>
    <videoBitRate>2302</videoBitRate>
    </VideoInstance>*/


            /*<MediaInstance op="Add">
          <mediaInstanceId>72babca4-366b-4ceb-b46e-ec33faa4ebc0</mediaInstanceId>
          <mediaId>00010011-0008-0001-0000-000A01010001</mediaId>
          <isAcquirable>1</isAcquirable>
          <isAdSupported>0</isAdSupported>
          <isPreview>0</isPreview>
        </MediaInstance>*/



           public VideoMediaInstance(XmlElement videoInstanceNode, string InstanceId)
            {
                
                videoInstanceId = videoInstanceNode.GetElementsByTagName("videoMediaInstanceId")[0].InnerText;
                videoDefinition = VideoDefinitions.Mapping[int.Parse(videoInstanceNode.GetElementsByTagName("videoDefinitionId")[0].InnerText)];
                videoEncoding = VideoEncoding.Mapping[int.Parse(videoInstanceNode.GetElementsByTagName("videoEncodingId")[0].InnerText)];
                aspectRatio = videoInstanceNode.GetElementsByTagName("videoAspectRatio")[0].InnerText;
                resolution = videoInstanceNode.GetElementsByTagName("videoResolution")[0].InnerText;
                isDrm = videoInstanceNode.GetElementsByTagName("isDRM")[0].InnerText;

                XmlNode mediaInstanceNd = videoInstanceNode.SelectSingleNode("../pf:MediaInstance[pf:mediaInstanceId='" +
                                            InstanceId + "']", EmsnsManager);
                isPreview = int.Parse(mediaInstanceNd.SelectSingleNode("pf:isPreview", EmsnsManager).InnerText);
                if (isPreview == 0)
                {
                    isAcquirable = int.Parse(mediaInstanceNd.SelectSingleNode("pf:isAcquirable", EmsnsManager).InnerText);
                    isAdSupported = int.Parse(mediaInstanceNd.SelectSingleNode("pf:isAdSupported", EmsnsManager).InnerText);
                }
                else { 
                    XmlNodeList countryCodeList = videoInstanceNode.SelectNodes("../pf:PreviewMediaInstance[pf:previewMediaInstanceId='" +
                                            InstanceId + "']/pf:countryCode", EmsnsManager);

                    countryCode = DataSource.GetAllinOneString(countryCodeList);
                       

                }
                XmlNodeList videoFileNds = videoInstanceNode.SelectNodes("../pf:VideoFile[pf:videoMediaInstanceId='" +
                                            InstanceId + "']", EmsnsManager);

                foreach (XmlNode nd in videoFileNds) {

                    fileList += (new FileInfo((XmlElement)nd,0)).ToString();
                }
                //burntInSubtitleLcid = nd.GetElementsByTagName("live:burntInSubtitleLcid")[0].InnerText; ;                              
                XmlNodeList videoSubtitleNds = videoInstanceNode.SelectNodes("../pf:VideoSubtitle[pf:videoMediaInstanceId='" +
                                            InstanceId + "']/pf:languageCode", EmsnsManager);
                subtitleLanguages = DataSource.GetAllinOneString(videoSubtitleNds, false);

                XmlNodeList audioNds = videoInstanceNode.SelectNodes("../pf:VideoAudioTrackLanguage[pf:videoMediaInstanceId='" +
                                            InstanceId + "']/pf:lcid", EmsnsManager);
               audioTrackLanguages = DataSource.GetAllinOneString(audioNds, true);


               XmlNodeList relatedMediaNodeList = videoInstanceNode.SelectNodes("../pf:MediaInstance[pf:mediaInstanceId='" +
                                            InstanceId + "']/pf:mediaId", EmsnsManager);
               relatedMediaList = DataSource.GetStringArray(relatedMediaNodeList);
            }

            internal VideoMediaInstance(VideoMediaInstance o)
            {
                videoInstanceId = o.videoInstanceId;
                isAcquirable = o.isAcquirable;
                isAdSupported = o.isAdSupported;
                videoDefinition = o.videoDefinition;
                videoEncoding = o.videoEncoding;
                aspectRatio = o.aspectRatio;
                resolution = o.resolution;
                isDrm = o.isDrm;
                fileList = o.fileList;
                audioTrackLanguages = o.audioTrackLanguages;
                subtitleLanguages = o.subtitleLanguages;

            }
        

            internal VideoMediaInstance(XmlElement nd, TitleContentOfferType tagType)
            {
                videoInstanceId = nd.GetElementsByTagName("live:videoInstanceId")[0].InnerText;
                videoInstanceId = videoInstanceId.Replace("urn:uuid:", "");

                if (!(tagType == TitleContentOfferType.FROMOFFERFILE))
                {
                    aspectRatio = nd.GetElementsByTagName("live:aspectRatio")[0].InnerText;
                    resolution = nd.GetElementsByTagName("live:resolution")[0].InnerText;                    
                }

                if (!nd.Name.Contains("Preview"))
                {
                    isAcquirable = int.Parse(nd.GetElementsByTagName("live:isAcquirable")[0].InnerText);
                    isAdSupported = int.Parse(nd.GetElementsByTagName("live:isAdSupported")[0].InnerText);
                    //instanceType = InstanceType.Video;
                }
                /*
                else {
                    countryCode = nd.GetElementsByTagName("live:countryCode")[0].InnerText;
                }*/

                videoDefinition = nd.GetElementsByTagName("live:videoDefinition")[0].InnerText;
                videoEncoding = nd.GetElementsByTagName("live:videoEncoding")[0].InnerText;
                

                XmlNodeList filenodes = nd.GetElementsByTagName("live:file");

                foreach (XmlNode fileNd in filenodes)
                {

                    fileList += (new FileInfo((XmlElement)fileNd)).ToString();
                }

                 //burntInSubtitleLcid = nd.GetElementsByTagName("live:burntInSubtitleLcid")[0].InnerText;;
                audioTrackLanguages = DataSource.GetAllinOneString(nd.GetElementsByTagName("live:audioTrackLanguage"),false); ;
                subtitleLanguages = DataSource.GetAllinOneString(nd.GetElementsByTagName("live:subtitleLanguages"),false);
            }
        }

        /* <live:images>
        <live:image xmlns="http://www.w3.org/2005/Atom" xmlns:live="http://www.live.com/marketplace">
        <live:imageMediaId>urn:uuid:E60A05A7-4CED-4542-AF83-7770877DF318</live:imageMediaId>
        <live:imageMediaInstanceId>urn:uuid:1A76A218-0049-466D-9220-5276165E4CB9</live:imageMediaInstanceId>
        <live:imageMediaType>12</live:imageMediaType>
        <live:relationshipType>15</live:relationshipType>
        <live:format>4</live:format>
        <live:size>1</live:size>
        <live:fileUrl>http://msvideo-images.synccast.com/argo/2010%1.jpg</live:fileUrl>
        </live:image>
        </live:images>*/

        public class Image
        {
            string imageMediaInstanceId;
            public string imageMediaId;
            public string imageMediaType;
            int relationshipType;
            public string format;
            public string size;
            public string fileSize;
            string fileUrl;
            public string lcid;
            bool isPreview;
            int isAcquirable;
            

            public Image(Guid imageId, MediaObject mObj, int i, int relationType)
            {

                fileUrl = mObj.GetNodeListbyTagName("fileUrl")[i].InnerText;
                size = mObj.GetNodeListbyTagName("imageSizeId")[i].InnerText;
                format = mObj.GetNodeListbyTagName("imageFormatId")[i].InnerText;
                imageMediaInstanceId = mObj.GetNodeListbyTagName("imageMediaInstanceId")[i].InnerText.ToUpper();
                imageMediaType = mObj.GetNodeListbyTagName("mediaTypeId")[0].InnerText;
                relationshipType = relationType;
                lcid = mObj.GetNodeByXpath(string.Format(".//pf:ImageInstance[pf:imageMediaInstanceId='{0}']/pf:lcid", imageMediaInstanceId)).InnerText;
                
                imageMediaId = imageId.ToString().ToUpper();

            }
        

            public Image(){
            }

            public void ReadfromDb( SqlDataReader reader)
            {
                isPreview = true;
                imageMediaInstanceId = reader.GetGuid(reader.GetOrdinal("mediaInstanceId")).ToString().ToUpper();
                isAcquirable = (int)reader.GetByte(reader.GetOrdinal("isAcquirable"));
                format = reader.GetInt32(reader.GetOrdinal("imageFormatId")).ToString();
                size = reader.GetInt32(reader.GetOrdinal("imageSizeId")).ToString();
                fileUrl = reader.GetString(reader.GetOrdinal("fileUrl"));

                try
                {
                    fileSize = reader.GetInt32(reader.GetOrdinal("fileSize")).ToString();
                }
                catch {
                    ;// filesize can be null, which will generate exception and just escape it. 
                }
            }


            internal Image(XmlElement nd)
            {
                if (nd.Name.Equals("live:imagePreviewInstance"))
                    isPreview = true;
                else isPreview = false;

                fileUrl = nd.GetElementsByTagName("live:fileUrl")[0].InnerText;
                size = nd.GetElementsByTagName("live:size")[0].InnerText;
                format = nd.GetElementsByTagName("live:format")[0].InnerText;
                imageMediaInstanceId = nd.GetElementsByTagName("live:imageMediaInstanceId")[0].InnerText;
                if (!isPreview)
                {
                    imageMediaId = nd.GetElementsByTagName("live:imageMediaId")[0].InnerText;
                    imageMediaType = nd.GetElementsByTagName("live:imageMediaType")[0].InnerText;
                    relationshipType = int.Parse(nd.GetElementsByTagName("live:relationshipType")[0].InnerText);
                    imageMediaId = imageMediaId.Replace("urn:uuid:", "");
                }
                else {
                    isAcquirable = int.Parse(nd.GetElementsByTagName("live:isAcquirable")[0].InnerText);
                    try
                    {
                        fileSize = nd.GetElementsByTagName("live:fileSize")[0].InnerText;
                    }
                    catch {
                        fileSize = null;
                    }

                }
              
                imageMediaInstanceId = imageMediaInstanceId.Replace("urn:uuid:", "");
                lcid = null;
            }

            //not compare filesize sofar
            public override bool Equals(Object o)
            {
                Image img = (Image) o;
                if (isPreview) {
                    if (imageMediaInstanceId == img.imageMediaInstanceId &&                                                  
                         format == img.format &&
                         size == img.size &&
                         fileUrl == img.fileUrl
                         && isAcquirable == img.isAcquirable
                         && fileSize == img.fileSize)
                        return true;
                    else return false;                
                }
                
                if (imageMediaInstanceId == img.imageMediaInstanceId &&
                 imageMediaId == img.imageMediaId &&
                 imageMediaType == img.imageMediaType &&
                 relationshipType == img.relationshipType &&
                 format == img.format &&
                 size == img.size &&
                 fileUrl == img.fileUrl)
                    return true;
                else return false;
            }

            public override int GetHashCode()
            {
                return 0;
            }
        }




        public struct OfferInstance
        {

            float price;
            DateTime startDateTime;
            DateTime endDateTime;
            string [] userTypes;

            public OfferInstance(string oInstanceId, OfferObject oObj)
            {
                price = float.Parse(oObj.GetNodeByXpath(string.Format(".//pf:OfferInstance[pf:offerInstanceId='{0}']/pf:price", oInstanceId)).InnerText);
                string starttm = oObj.GetNodeByXpath(string.Format(".//pf:OfferInstance[pf:offerInstanceId='{0}']/pf:startDateTime", oInstanceId)).InnerText;
                string endtm = oObj.GetNodeByXpath(string.Format(".//pf:OfferInstance[pf:offerInstanceId='{0}']/pf:endDateTime", oInstanceId)).InnerText;

                startDateTime = (DateTime)Convert.ChangeType(starttm, typeof(DateTime));

                if (oInstanceId == "00020013-0000-0002-0113-000000100096")
                    startDateTime = DateTime.Today.AddDays(40);

                endDateTime = (DateTime)Convert.ChangeType(endtm, typeof(DateTime));
                
                XmlNodeList ndList = oObj.GetNodesByXpath(string.Format(".//pf:OfferInstanceUserType[pf:offerInstanceId='{0}']/pf:userTypeId", oInstanceId));

                //userTypes = DataSource.GetAllinOneString(ndList,false);
                userTypes = DataSource.GetStringArray(ndList);
            }


            internal OfferInstance(XmlElement nd)
            {
                price = float.Parse(nd.GetElementsByTagName("live:price")[0].InnerText);

                startDateTime = DataSource.ConvertTime(nd.GetElementsByTagName("live:startDateTime")[0].InnerText);
                endDateTime = DataSource.ConvertTime(nd.GetElementsByTagName("live:endDateTime")[0].InnerText);
                XmlNodeList ndList = (XmlNodeList)nd.GetElementsByTagName("live:userType");
                //userTypes = DataSource.GetAllinOneString(ndList, false);
                //userTypes = nd.GetElementsByTagName("live:userTypes")[0].InnerText;
                userTypes = DataSource.GetStringArray(ndList);
            }

            public new bool Equals(Object o, Object userTypesFilter)
            {
                OfferInstance oi = (OfferInstance)o;
                if (!(oi.price == this.price && oi.startDateTime == this.startDateTime && oi.endDateTime == this.endDateTime))
                    return false;
                foreach (string utype in this.userTypes)
                    if (!((ArrayList)(userTypesFilter)).Contains(utype)) return false;
                return true;
            }
        }


        public struct Category
        {
            int categoryId;
            int system;
            string name;

            public Category(int id, int system, string name)
            {
                categoryId = id;
                this.system = system;
                this.name = name;
            }

            internal Category(XmlNode nd)
            {
                categoryId = int.Parse(nd.SelectSingleNode("live:categoryId", XmlnsManager).InnerText);
                system = int.Parse(nd.SelectSingleNode("live:system", XmlnsManager).InnerText);
                name = nd.SelectSingleNode("live:name", XmlnsManager).InnerText;
            }
        }

        public class CategoryObjects
        {
            static Hashtable t;
            static CategoryObjects()
            {
                t = new Hashtable();
                t.Add(5003, new Category(5003, 5000, "Business"));
                t.Add(10401, new Category(10401, 10000, "Podcast Test Category 1"));
                t.Add(10402, new Category(10402, 10000, "Podcast Test Category 2"));
                t.Add(10200, new Category(10200, 10000, "Video Test Category 1"));
                t.Add(10205, new Category(10205, 10000, "Video Test Category 6"));
                t.Add(10204, new Category(10204, 10000, "Video Test Category 5"));
                t.Add(10002, new Category(10002, 10000, "Video Test Categories"));
                t.Add(10206, new Category(10206, 10000, "Video Test Category 7"));
                t.Add(10207, new Category(10207, 10000, "Video Test Category 8"));
                t.Add(10208, new Category(10208, 10000, "Video Test Category 9"));
                t.Add(10209, new Category(10209, 10000, "Video Test Category 10"));
                t.Add(10211, new Category(10211, 10000, "Video Test Category 12"));

                t.Add(4002, new Category(4002, 4000, "Electronic Arts"));
                t.Add(4001, new Category(4001, 4000, "Microsoft"));
                t.Add(4003, new Category(4003, 4000, "Ubisoft"));

                t.Add(6001, new Category(6001, 6000, "Microsoft"));
                t.Add(6002, new Category(6002, 6000, "Electronic Arts"));
                t.Add(6003, new Category(6003, 6000, "Ubisoft"));

                t.Add(10101, new Category(10101, 10000, "Game Test Category 1"));
                t.Add(10102, new Category(10102, 10000, "Game Test Category 2"));
                t.Add(10103, new Category(10103, 10000, "Game Test Category 3"));
                t.Add(10104, new Category(10104, 10000, "Game Test Category 4"));
                t.Add(10105, new Category(10105, 10000, "Game Test Category 5"));

                t.Add(10121, new Category(10121, 10000, "Game Test Category 21"));
                t.Add(10122, new Category(10122, 10000, "Game Test Category 22"));
                t.Add(10123, new Category(10123, 10000, "Game Test Category 23"));
                t.Add(10124, new Category(10124, 10000, "Game Test Category 24"));


                t.Add(10001, new Category(10001, 10000, "Game Test Categories"));

                
            }


            public static Category GetCategoryObj(int catgoryId)
            {
                return ((Category)t[catgoryId]);
            }

        }


        static XmlNamespaceManager GetCurrenXmlManager(string url){
            if (url == _liveNS) return XmlnsManager;
            if (url == _atomNS) return AtomnsManager;
            return null;        
        }



        private static readonly string _liveNS = "http://www.live.com/marketplace";
        private static XmlNamespaceManager _xmlnsManager = null;
        public static XmlNamespaceManager XmlnsManager
        {
            get
            {
                if (_xmlnsManager == null)
                {
                    NameTable nt = new NameTable();
                    _xmlnsManager = new XmlNamespaceManager(nt);
                    _xmlnsManager.AddNamespace("live", _liveNS);
                }
                return _xmlnsManager;
            }
        }

        private static XmlNamespaceManager _bothXmlnsManager = null;
        public static XmlNamespaceManager BothManager
        {
            get
            {
                if (_bothXmlnsManager == null)
                {
                    NameTable nt = new NameTable();
                    _bothXmlnsManager = new XmlNamespaceManager(nt);
                    _bothXmlnsManager.AddNamespace("live", _liveNS);
                    _bothXmlnsManager.AddNamespace("atom", _atomNS);
                }
                return _bothXmlnsManager;
            }
        }

        private static readonly string _atomNS = "http://www.w3.org/2005/Atom";
        private static XmlNamespaceManager _atomnsManager = null;
        public static XmlNamespaceManager AtomnsManager
        {
            get
            {
                if (_atomnsManager == null)
                {
                    NameTable nt = new NameTable();
                    _atomnsManager = new XmlNamespaceManager(nt);
                    _atomnsManager.AddNamespace("atom", _atomNS);
                }
                return _atomnsManager;
            }
        }

        private static readonly string _gameNS = "http://www.microsoft.com/ems/game";
        private static XmlNamespaceManager _gamensManager = null;
        public static XmlNamespaceManager GamensManager
        {
            get
            {
                if (_gamensManager == null)
                {
                    NameTable nt = new NameTable();
                    _gamensManager = new XmlNamespaceManager(nt);
                    _gamensManager.AddNamespace("g", _gameNS);
                }
                return _gamensManager;
            }
        }

        private static readonly string _emsNS = "urn:schema-microsoft-ems-catalog";
        private static XmlNamespaceManager _emsnsManager = null;
        public static XmlNamespaceManager EmsnsManager
        {
            get
            {
                if (_emsnsManager == null)
                {
                    NameTable nt = new NameTable();
                    _emsnsManager = new XmlNamespaceManager(nt);
                    _emsnsManager.AddNamespace("pf", _emsNS);
                    _emsnsManager.AddNamespace("", _emsNS);
                }
                return _emsnsManager;
            }
        }

        /*<live:videoMediaInstance xmlns="http://www.w3.org/2005/Atom" xmlns:live="http://www.live.com/marketplace">
        <live:videoInstanceId>urn:uuid:0F176493-D4E0-4F6E-B0EB-91FF6871464A</live:videoInstanceId>
        <live:isAcquirable>1</live:isAcquirable>
        <live:isAdSupported>0</live:isAdSupported>
        <live:videoDefinition>SD</live:videoDefinition>
        <live:videoEncoding>WMVWMA</live:videoEncoding>
        <live:aspectRatio>2.39:1</live:aspectRatio>
        <live:resolution>480p</live:resolution>
        <live:files>
          <live:file xmlns="http://www.w3.org/2005/Atom" xmlns:live="http://www.live.com/marketplace">
            <live:index>1</live:index>
            <live:fileSize>1364559370</live:fileSize>
          </live:file>
        </live:files>
      </live:videoMediaInstance>
        */



        public static string InjectionFilePath;

        static string GetInjectionFilePath() 
        {
            if (string.IsNullOrEmpty(InjectionFilePath))
                throw new Exception("InjectionFilePath cannot be null or empty.");

            return InjectionFilePath;
        }

        static internal string GetInjectDataFile(Guid id) 
        {
            DirectoryInfo di = new DirectoryInfo(GetInjectionFilePath());
            if (di == null)
                throw new DirectoryNotFoundException();
            string matchFile = "*" + id.ToString() + "*.xml";
            System.IO.FileInfo[] files = di.GetFiles(matchFile);
            if (files.Length != 1)
                throw new Exception("No match file found or more than one file found. Path: " + GetInjectionFilePath() + ", match: " + matchFile);

            return files[0].FullName;
        }
        
        // for media (game/video) xml files and game content files. Media Id needs to be part of file name
        static internal string GetInjectDataForMedia(Guid id)
        {
            return GetInjectDataFile(id);
        }

        // for game offer files. Offer Id needs to be part of file name
        static internal string GetInjectDataForOffer(Guid id)
        {
            return GetInjectDataFile(id);
        }

        /// <summary>
        /// Full Xml comparison. Whenever a mismatch is found, the comparison stops.
        /// In expected xml, even a node is ignored for comparison, the node should still be there with some dummy data
        /// This XmlDocCompare() is bit more flexible than the XmlNodeCompare.
        /// </summary>
        /// <param name="expect">the <feed> nodes in expected result</param>
        /// <param name="output">the <feed> nodes in output xml</param>
        /// <param name="nodeList">list of nodes under <entry> that need to be compared</param>
        /// <param name="ignoreList">any child nodes in the above nodeList that should be ignored</param>
        /// <param name="msg">the string with all error messages appended</param>
        /// <returns></returns>
        public static bool XmlDocCompare(XmlNode expect, XmlNode output, string[] nodeList, string[] ignoreList, ref string msg)
        {
            bool match = true;

            // TotalItem
            int expectedTotalNum = int.Parse(expect.SelectSingleNode("live:totalItems", BothManager).InnerText);
            int totalNum = int.Parse(output.SelectSingleNode("live:totalItems", BothManager).InnerText);
            if (totalNum != expectedTotalNum)
            {
                match = false;
                msg += ("Mismatch totalItems: Expected: " + expectedTotalNum + ", Got: " + totalNum + "\r\n");
            }

            //  ReturnedItem
            int expectedReturnedNum = int.Parse(expect.SelectSingleNode("live:numItems", BothManager).InnerText);
            int returnedNum = int.Parse(output.SelectSingleNode("live:numItems", BothManager).InnerText);
            if (returnedNum != expectedReturnedNum)
            {
                match = false;
                msg += ("Mismatch numItems: Expected: " + expectedReturnedNum + ", Got: " + returnedNum + "\r\n");
            }

            // stop if no entry
            if (expectedReturnedNum == 0 || !match)
                return match;

            // entry nodes
            XmlNodeList expectEntryNds = expect.SelectNodes("/atom:feed/atom:entry", BothManager);
            XmlNodeList entryNds = output.SelectNodes("/atom:feed/atom:entry", BothManager);
            if (expectEntryNds.Count != entryNds.Count || entryNds.Count != returnedNum)
            {
                match = false;
                msg += ("Mismatch numItems in output: returned: " + returnedNum + ", number of entries: " + entryNds.Count + "\r\n");
            }

            // one entry at a time
            for (int i = 0; i < expectEntryNds.Count; i++)
            {
                // only check nodes in the list
                foreach (string liveNode in nodeList)
                {
                    XmlNode expectNode = expectEntryNds[i].SelectSingleNode(liveNode, BothManager);
                    XmlNode outputNode = entryNds[i].SelectSingleNode(liveNode, BothManager);
                    bool tempMatch = XmlNodeCompare(expectNode, outputNode, ignoreList, ref msg);
                    if (match)
                        match = tempMatch;
                }
            }

            return match;
        }

        public static bool XmlNodeCompare(XmlNode expect, XmlNode output, string[] ignoreList, ref string msg)
        {
            bool match = true;
            StringBuilder msgBuilder = new StringBuilder();

            if (expect == null && output == null)
                return match;
            else if (expect == null || output == null)
            {
                msgBuilder.Append("Mismatch: node missing" + "\r\n");
                msg = msg + msgBuilder.ToString();
                return false;
            }

            // ignore some nodes. For DownloadHistory, ignore live:actionDate since we don't have control on that
            if(ignoreList!= null)
                foreach (string ignoreNode in ignoreList)
                {
                    if (expect.Name == ignoreNode)
                        return match;
                }

            // the leaf node
            if (!expect.HasChildNodes)
            {
                if (output.HasChildNodes || expect.Value != output.Value)
                {
                    msgBuilder.Append("Mismatch: expect node - " + expect.ParentNode.Name + " value - " + expect.Value + ", ouput node - " + output.ParentNode.Name + " value - " + output.Value + "\r\n");
                    match = false;
                }
                msg = msg + msgBuilder.ToString();
                return match;
            }

            // the child nodes count should be same
            if (!output.HasChildNodes || output.ChildNodes.Count != expect.ChildNodes.Count)
            {
                msgBuilder.Append("Mismatch: expect node - " + expect.Name + " value - " + expect.InnerXml + " has child nodes, ouput node - " + output.Name + " value - " + output.InnerXml + " don't or counts are not the same\r\n");
                msg = msg + msgBuilder.ToString();
                return false;
            }

            // compare child nodes one by one
            for (int i = 0; i < expect.ChildNodes.Count; i++)
            {
                bool tempMatch = XmlNodeCompare(expect.ChildNodes[i], output.ChildNodes[i], ignoreList, ref msg);
                if (match)
                    match = tempMatch;
            }
            return match;
        }

       /* static string GetSchema(APIXmlInfo XmlInfo, Guid id, string mediaType)
        {
        
          string schema;
            //decide the schema to use
            if (mediaType == "game") schema = GameSchema;
            else if (mediaType == "video") schema = VideoSchema;
            else {
                //check mediatype in the tag, mix mode                
                    TagInfoInItem typeInfo = (TagInfoInItem)XmlInfo.tagTbl["mediaType"];
                    if (typeInfo.valueList == null)
                    {
                        throw new Exception("unknown mediaType, can not load schema to compare the results for media: " + id.ToString().ToUpper());                        
                    }
                    else
                    {
                        //to do for other type of media, such as music
                        if (int.Parse((string)typeInfo.valueList[0]) >= (int)MediaTypeEnum.MusicVideo) schema = VideoSchema;
                        else schema = GameSchema;
                    }
            }
            return schema;
        }*/

        public static void LoadCompareMediaDetail(APIXmlInfo XmlInfo, Media m, int lcid, string mediaGroup, DetailView viewLevel, Message msg)
        {
            LoadCompareMediaDetail(XmlInfo, m, lcid, mediaGroup, viewLevel, null, msg);
        }

        public static void LoadCompareMediaDetail(APIXmlInfo XmlInfo, Media m, int lcid, string mediaGroup, DetailView viewLevel, TestCaseInfo testInfo, Message msg)
        {

            XmlElement injectionXml;
            string xmlfileName;
            ArrayList optionals;

            try
            {   
                if (m.mediaRoot == null)
                {
                    //For no IMDB, load the xml node directly from injection data.
                    //Assume use mediaId as inject data
                    xmlfileName = GetInjectDataForMedia(m.mediaId);
                    //string schema = GetSchema(XmlInfo, m.mediaId, mediaGroup);

                    injectionXml = RetrieveDocumentRootNode(xmlfileName);
                }
                else
                {
                    injectionXml = m.mediaRoot;
                }
            }
            catch(Exception e){
                msg.AddError(e.Message);
                return;
            }

            // compare the injectionXml (itemNode) with m, 
            if (injectionXml.Name.Contains("Game")) //game only
            {  
                XmlNode itemNode = injectionXml.SelectSingleNode(string.Format("//g:mediaInfo[g:mediaId='{0}']", m.mediaId.ToString().ToUpper()), GamensManager);
                //XmlNode itemNode = injectionXml.SelectSingleNode("//g:GameData", xmlnsManager);
                if (itemNode == null)
                {
                    msg.AddError("Could not find media id" + m.mediaId.ToString());
                    return;
                }

                //using id info to get xml for that id into memory
                //find the corresponding value and compare it with the tag value.
                //for video and game, different files need to be load. 
                foreach (string tagName in XmlInfo.tagTbl.Keys)
                {
                    TagInfoInItem tagInfo = (TagInfoInItem)XmlInfo.tagTbl[tagName];

                    // only check the tags with correct detail levels
                    if (tagInfo.viewLevel > viewLevel) 
                        continue;

                    // not checking ignored tags
                    if (tagInfo.verifyIgnore == TagPresent.IGNORE || tagInfo.current == TagPresent.IGNORE)
                        continue;

                    // optional output fields
                    optionals = null;
                    if (!string.IsNullOrEmpty(tagInfo.optionalField))
                    {
                        optionals = GetInputValues(testInfo, tagInfo.optionalField);
                        if (optionals == null || optionals.Count == 0)
                            continue;
                    }

                    try
                    {
                        ArrayList expected = null;
                        if (tagInfo.mappedTagName != "")
                        {
                            //first try to fill in the tag value for item if it has a mapping tag
                            string search;

                            if (tagInfo.mappedTagName.Contains("lcid={0}"))
                            {
                                search = string.Format(tagInfo.mappedTagName, lcid.ToString());
                            }
                            else search = tagInfo.mappedTagName;

                            XmlNodeList elm = itemNode.SelectNodes(search, GamensManager);
                            //do compare                            
                            if (elm.Count != 0)
                            {
                                foreach (XmlNode nd in elm)
                                {
                                    if (expected == null) expected = new ArrayList();

                                    if (tagName.Contains("ratingId"))
                                    { 
                                      if(RatingSystemCountry.GetCountryCode(nd.InnerText) != LcidCountryCode.GetCountryCode(lcid))
                                          expected.Add(-65535);
                                    }
                                    

                                    // optional output fields
                                    if (optionals == null || optionals.Contains(nd.InnerText))
                                        expected.Add(nd.InnerText);
                                }
                            }
                            else 
                            {
                                // some special processing here also, mainly related to some work for GameContent, and some others work for GameTitle, but not both
                                if (tagInfo.tcoType == TitleContentOfferType.GAMECONTENTONLY && tagName.Contains("mediaType"))
                                {
                                    elm = itemNode.SelectNodes("//g:game", GamensManager);
                                    if (elm.Count != 0)
                                    {
                                        expected = new ArrayList();
                                        expected.Add("1");
                                    }
                                }

                                // for GameTitle, the gameTitleMediaId is the same as mediaId
                                if (tagInfo.tcoType == TitleContentOfferType.GAMECONTENTONLY && tagName.Contains("gameTitleMediaId") && m.mediaType == 1)
                                {
                                    expected = new ArrayList();
                                    expected.Add(m.mediaId.ToString().ToUpper());
                                }
                            }

                            tagInfo.ValueCompare(expected, msg);
                        }
                        else
                        {
                            //need special process here for some tags.
                            string noLiveTag = tagInfo.tagName.ToLower();
                            noLiveTag = noLiveTag.Replace("live:", ""); // remove "live:"
                            if (m.outputTbl != null && m.outputTbl[noLiveTag] != null)
                            {                       
                                if (expected == null){
                                    expected = new ArrayList();
                                    expected.Add(m.outputTbl[noLiveTag]);
                                }                                
                            }
                            tagInfo.ValueCompare(expected, msg);
                        }
                    }
                    catch (Exception e)
                    {
                        if (tagInfo.verifyIgnore == TagPresent.DEPEND) {
                            msg.AddWarning(String.Format("LoadCompareMediaDetail:Could not find tag:'{0}, missing, not a must have tag \r\n{1}", tagName, e.Message));
                        }
                        else
                            msg.AddError(String.Format("LoadCompareMediaDetail:Could not find tag:'{0}, missing!\r\n{1}", tagName, e.Message));
                        continue;
                    }
                }
            }
        }

        public static Guid GetContentIdFrmOfferXml(XmlNode nd, System.Xml.XmlNamespaceManager xmlnsManager)
        {
            XmlNode tmpNd = nd.SelectSingleNode("g:offer/g:metadataMediaId", xmlnsManager);
            return new Guid(tmpNd.InnerText.ToUpper());                    
        }
                
       
        public static void LoadCompareMediaOfferDetail(APIXmlInfo XmlInfo, MediaOffer mo, int lcid, string mediaGroup, DetailView viewLevel, Message msg)
        {
            XmlElement m_injectionXml;
            XmlElement o_injectionXml;
            string xmlfileName;

            try
            {
                if (mo.offerRoot == null)
                {
                    xmlfileName = GetInjectDataForOffer(mo.offerId);
                    o_injectionXml = RetrieveDocumentRootNode(xmlfileName);
                }
                else
                {
                    o_injectionXml = mo.offerRoot;
                }               
            }
            catch (Exception e)
            {
                msg.AddError(e.Message);
                return;
            }

            //game only
            if (o_injectionXml.Name.Contains("Game"))
            {  
                //o_injectionXml.SelectSingleNode("g:gameContentOffer[g:offer/g:offerId='49306E26-47A7-4fb9-BA87-F1B75DBE4CBD'  and g:offer/g:metadataMediaId='DE444A8A-0A98-4620-821D-397A97771B0D']",xmlnsManager)                                                 
                                                  
                //                                  "g:gameContentOffer[g:offer/g:offerId='49306E26-47A7-4FB9-BA87-F1B75DBE4CBD' and g:offer/g:metadataMediaId='DE444A8A-0A98-4620-821D-397A97771B0D']
                
                XmlNode o_itemNode = o_injectionXml.SelectSingleNode(string.Format("g:gameContentOffer[g:offer/g:offerId='{0}']", 
                                        mo.offerId.ToString().ToUpper()), GamensManager);
                XmlNode itemNode;
                //XmlNode itemNode = injectionXml.SelectSingleNode("//g:GameData", xmlnsManager);

                if (o_itemNode == null)
                {
                    msg.AddError("Could not find offer id " + mo.offerId.ToString() + " in offer injection file, verification abort for this item!");
                    return;
                }

                mo.contentMediaId = GetContentIdFrmOfferXml(o_itemNode, GamensManager);

                if (mo.mediaContentRoot == null)
                {
                    //For no IMDB, load the xml node directly from injection data.
                    //Assume use mediaId as inject data
                    xmlfileName = GetInjectDataForMedia(mo.contentMediaId);
                    //string schema = GetSchema(XmlInfo, m.mediaId, mediaGroup);
                    m_injectionXml = RetrieveDocumentRootNode(xmlfileName);
                }
                else
                {
                    m_injectionXml = mo.mediaContentRoot;
                }

                XmlNode m_itemNode = m_injectionXml.SelectSingleNode(string.Format("//g:mediaInfo[g:mediaId='{0}']", mo.contentMediaId.ToString().ToUpper()), GamensManager);
                
                if (m_itemNode == null)
                {
                    msg.AddError("Could not find content media id " + mo.contentMediaId.ToString() + " in media injection file, verification abort for this item!");
                    return;
                }

                //using id info to get xml for that id into memory
                //find the corresponding value and compare it with the tag value.
                //for video and game, different files need to be load. 
                foreach (string tagName in XmlInfo.tagTbl.Keys)
                {
                    ArrayList expected = null;
                    bool orderCompare = false;
                    TagInfoInItem tagInfo = (TagInfoInItem)XmlInfo.tagTbl[tagName];

                    if (tagInfo.viewLevel > viewLevel) continue;
                    // not checking ignored tags
                    if (tagInfo.verifyIgnore==TagPresent.IGNORE)
                        continue;

                    try
                    {
                        if (tagInfo.mappedTagName != "")
                        {
                            //first try to fill in the tag value for item if it has a mapping tag
                            string search;
                            string mediaInstance = null;

                            // for all media instance tags, the order is important
                            if (tagInfo.tagName.Contains("|Instance|"))
                                orderCompare = true;

                            if (tagInfo.mappedTagName.Contains("lcid={0}"))
                            {
                                search = string.Format(tagInfo.mappedTagName, lcid.ToString());
                            }
                            else if (tagInfo.mappedTagName.Contains("countryCode="))
                            {
                                search = string.Format(tagInfo.mappedTagName, LcidCountryCode.GetCountryCode(lcid));
                            }
                            else if (tagInfo.mappedTagName.Contains("g:mediaInstanceId="))
                            {
                                mediaInstance = (string)(((TagInfoInItem)XmlInfo.tagTbl["//InstanceId"]).valueList[0]);
                                search = string.Format(tagInfo.mappedTagName, mediaInstance);
                            }
                            else
                            {
                                search = tagInfo.mappedTagName;
                            }

                            if (tagInfo.tcoType == TitleContentOfferType.FROMOFFERFILE ) itemNode = o_itemNode;
                            else itemNode = m_itemNode;

                            XmlNodeList elm = itemNode.SelectNodes(search, GamensManager);
                            //do compare
                            if (elm.Count != 0)
                            {
                                foreach (XmlNode nd in elm)
                                {
                                    if (tagName == "live:ratingId")
                                    {
                                        if (RatingSystemCountry.GetCountryCode(nd.InnerText) != LcidCountryCode.GetCountryCode(lcid))
                                            continue;
                                    }
                                    if (expected == null) expected = new ArrayList();
                                    if (tagInfo.mappedTagName.Contains("g:mediaInstanceId="))
                                        expected.Add(mediaInstance + "/" + nd.InnerText);
                                    else
                                        expected.Add(nd.InnerText);
                                }
                            }
                            else
                            {
                                // some special processing here also, mainly related to some work for GameContent, and some others work for GameTitle, but not both
                                if (tagInfo.tcoType == TitleContentOfferType.GAMECONTENTONLY && tagName.Contains("mediaType"))
                                {
                                    elm = m_itemNode.SelectNodes("//g:game", GamensManager);
                                    if (elm.Count != 0)
                                    {
                                        expected = new ArrayList();
                                        expected.Add("1");
                                    }
                                }
                            }

                            tagInfo.ValueCompare(expected, msg, orderCompare);
                        }
                        else
                        {
                            //need special process here for some tags.
                            if (mo.outputTbl != null && mo.outputTbl[tagInfo.tagName] != null)
                            {
                                if (expected == null)
                                {
                                    expected = new ArrayList();
                                    expected.Add(mo.outputTbl[tagInfo.tagName]);
                                }
                            }
                            tagInfo.ValueCompare(expected, msg, orderCompare);
                        }
                    }
                    catch (Exception e)
                    {
                        msg.AddError(String.Format("LoadCompareMediaOfferDetail:Could not find tag:'{0}, missing!\r\n{1}", tagName, e.Message));
                        continue;
                    }
                }
            }
        }


        static public void testload(){
            Guid[] testGuids = {                
                new Guid("DE444A8A-0A98-4620-821D-397A97771B0D")
                //new Guid("5EFC7975-14BC-11CF-9B2B-00AA00573819"),
                //new Guid("1496A755-94DE-11D0-8C3F-00C04FC2AAE2")
             };
            Media[] ms ={
          new Media(testGuids[0])
        };

            Message msg= new Message();
          TagInfoInItem[] tags = CatVerify.CreateTagInfoInItem(MediaTag.tags);
          APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);
          LoadCompareMediaDetail(apiXmlInfo, ms[0], 0, "game", DetailView.Full, msg);
        
        }

        static public bool FindMedia(XmlNode resultXml, int expectedTotalNum, Media[] expectedMedias, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(MediaTag.tags);

            msg = new Message();
            return FindMediaInternal(resultXml, tags, "id", expectedTotalNum, expectedMedias, testInfo, msg);
            
        }


        static public bool FindMediaOffers(XmlNode resultXml, int expectedTotalNum, MediaOffer[] expectedOffers, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(MediaOfferTag.tags);

            msg = new Message();
            return FindMediaOfferInternal(resultXml, tags, "id", expectedTotalNum, expectedOffers, testInfo, msg);            
        }


        static public bool FindGame(XmlNode resultXml, int expectedTotalNum, Media[] expectedMedia, TestCaseInfo testInfo, out Message msg) {

            TagInfoInItem[] tags = CreateTagInfoInItem(GameTag.tags);

            msg = new Message();
            return FindMediaInternal(resultXml, tags, "id", expectedTotalNum, expectedMedia, testInfo, msg);        
        }
        /*
        static public void FindRelatedMedia();       
        static public void FindVideos();
        static public void FindVideoOffers();
        static public void FindCategories();
        static public void FindContributors();
        */


        public static TagInfoInItem[] CreateTagInfoInItem(TagInfo[] tagList)
        {
            ArrayList lst = new ArrayList();
            foreach(TagInfo t in tagList) {
               lst.Add(new TagInfoInItem(t));
            }
            return (TagInfoInItem[])lst.ToArray(typeof(TagInfoInItem));
        
        }

        static public bool FindGameOffers(XmlNode resultXml, int expectedTotalNum, MediaOffer[] expectedOffers, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(GameOfferTag.tags);
                                        
            msg = new Message();
            return FindMediaOfferInternal(resultXml, tags, "id", expectedTotalNum, expectedOffers, testInfo, msg);                
        }



        static public XmlElement LoadeInjectionFile(string schemaFile, string xmlFile)
        {

            if (!File.Exists(xmlFile))
            {
                throw new Exception("injection data file " + xmlFile + " doesn't exist");
            }


            XmlReaderSettings schemaSettings = new XmlReaderSettings();
            schemaSettings.Schemas.Add(null, schemaFile);
            schemaSettings.ValidationType = ValidationType.Schema;
            schemaSettings.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);

            XmlReader xmlValidReader = XmlReader.Create(xmlFile, schemaSettings);


            // load the document
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlValidReader);

            return xmlDoc.DocumentElement;

        }

        public static XmlElement RetrieveDocumentRootNode(string xmlFile)
        {
            XmlDocument xmlDoc = new XmlDocument();
            if (!File.Exists(xmlFile))
            {
                throw new FileNotFoundException("File Not Found", xmlFile);
            }
            xmlDoc.Load(xmlFile);
            return xmlDoc.DocumentElement;
        }


        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)
        {
            throw new Exception("injection file failed schema check", e.Exception);
        }


        //to do 
        private static readonly string _podcastNS = "http://www.microsoft.com/ems/podcast";

        private static XmlNamespaceManager _podcastManager = null;
        private static XmlNamespaceManager PodcastManager
        {
            get
            {
                if (_podcastManager == null)
                {
                    NameTable nt = new NameTable();
                    _podcastManager = new XmlNamespaceManager(nt);
                    _podcastManager.AddNamespace("g", _podcastNS);
                }
                return _gamensManager;
            }
        }

        static void ProcessTVOnlyTags(TagInfoInItem tagInfo, Media m, ref ArrayList expected, int lcid) {
            expected = new ArrayList();

            VideoObject series = null, season = null, episo = null;
            VideoObject cur;

            if (m.mediaType == 10)
            {
                series = (VideoObject)m.mObj;
                //seasonIds
                if (tagInfo.tagName.Contains("seasonIds"))
                {
                    if (series.ChildList != null) {
                        foreach (MediaObject id in series.ChildList) {
                            if(id.MediaType==9)
                                expected.Add(id.MediaId.ToString().ToUpper());
                        }
                    }
                    
                    return;
                }
                if (tagInfo.tagName.Contains("numSeasons"))
                {
                    int count = 0;
                        if (series.ChildList != null)
                        {
                            foreach (MediaObject id in series.ChildList)
                            {
                                if (id.MediaType == 9)
                                    count++;
                            }
                        }
                        expected.Add(count.ToString());
                    return;
                }
                if (tagInfo.tagName.Contains("numEpisodes"))
                {
                    int count = 0;
                    if (series.ChildList != null)
                    {
                        foreach (MediaObject id in series.ChildList)
                        {
                            if (id.MediaType == 8 && id.MediaId != new Guid("00020013-0008-0001-0113-000000000001"))
                                count++;
                        }
                    }
                    expected.Add(count.ToString());
                    return;
                }
            }//end for series
            else {
                if (m.mediaType == 9)
                {
                    season = (VideoObject)m.mObj;
                    series = season.ParentMedia;

                    if (tagInfo.tagName.Contains("numEpisodes"))
                    {

                        if (season.ChildList != null)
                        {  if(season.MediaId!= new Guid("00020013-0009-0001-0113-000000000001"))
                                expected.Add(season.ChildList.Count);
                            else
                                expected.Add(season.ChildList.Count-1);
                        }
                        return;
                    }

                    if (tagInfo.tagName.Contains("numSeasons"))
                    {

                        if (series.ChildList != null) expected.Add(series.GetChildMedia(6).Count);
                        return;
                    }

                }//end for season
                else 
                {
                    episo = (VideoObject)m.mObj;

                    if (episo.ParentMedia.MediaType == 9)
                    {
                        season = episo.ParentMedia;
                        series = season.ParentMedia;
                    }
                    else {
                        series = episo.ParentMedia;
                        season = null;
                    }

                    

                    if (m.mediaType == 8)
                    {
                        int numEpisodes = 0;
                        int numSeasons = 0;
                        if (season != null)
                        {
                            numSeasons = series.GetChildMedia(6).Count;
                            numEpisodes = season.ChildList.Count;
                            if (season.MediaId == new Guid("00020013-0009-0001-0113-000000000001")) numEpisodes = numEpisodes - 1;
                        }
                        else {
                            numEpisodes = series.ChildList.Count;  // episodes directly under series
                        }
                        if (tagInfo.tagName.Contains("numEpisodes"))
                        {
                            expected.Add(numEpisodes);
                            return;
                        }
                        if (tagInfo.tagName.Contains("numSeasons"))
                        {
                            expected.Add(numSeasons);
                            return;
                        }
                    }
                }
            }

            cur = null;
            if (tagInfo.tagName.Contains("season")) cur = season;
            if (tagInfo.tagName.Contains("episo")) cur = episo;
            if (tagInfo.tagName.Contains("series")) cur = series;


            if (tagInfo.mappedTagName != "")
            {
                  string search;

                  if (tagInfo.mappedTagName.Contains("lcid={0}"))
                   {
                       search = string.Format(tagInfo.mappedTagName, lcid.ToString());
                   }
                  else search = tagInfo.mappedTagName;

                   XmlNodeList elm = cur.XmlDocRoot.SelectNodes(search, EmsnsManager);
                   //do compare                            
                   if (elm.Count != 0)
                        {
                            foreach (XmlNode nd in elm)
                            {
                                expected.Add(nd.InnerText);
                            }
                        }
            }
            else {
                if (tagInfo.tagName.Contains("Id") && cur!=null) expected.Add(cur.MediaId.ToString().ToUpper());
            }          
        }

        
        public static bool IsPreviewMedia(Guid id){
          ArrayList mids = new ArrayList();
          mids.Add(new Guid("00020013-0002-0001-0113-000000000011"));
          mids.Add(new Guid("00020013-0002-0001-0113-000000000010"));
        
            if(mids.Contains(id)) return true;
            else return false;
        }


        public static void LoadCompareDetail(APIXmlInfo XmlInfo, Media m, int lcid, DetailView viewLevel, TestCaseInfo testInfo, Message msg, XmlNamespaceManager xmlNameManager, string entryPath)
        {
            XmlElement m_injectionXml;
            XmlElement o_injectionXml=null;

            XmlNode itemNode;

            ArrayList optionals;

            if (m is MediaOffer)
            {

                try
                {
                    MediaOffer mo = (MediaOffer)m;
                    if (mo.offerRoot == null)
                    {
                        msg.AddInfo("Only Ids have been verified");
                        return;
                        //xmlfileName = GetInjectDataForOffer(mo.offerId);
                        //o_injectionXml = RetrieveDocumentRootNode(xmlfileName);
                    }
                    else
                    {
                        o_injectionXml = mo.offerRoot;
                    }

                    if (o_injectionXml == null)
                    {
                        msg.AddError("Could not find offer id " + mo.offerId.ToString() + " in offer injection file, verification abort for this item!");
                        return;
                    }
                }
                catch (Exception e)
                {
                    msg.AddError(e.Message);
                    return;
                }
            }
            
                try
                {
                    if (m.mediaRoot == null)
                    {
                        
                       msg.AddInfo("Only Ids have been verified");
                        return;
                        //For no IMDB, load the xml node directly from injection data.
                        //Assume use mediaId as inject data
                        /*xmlfileName = GetInjectDataForMedia(m.mediaId);
                        //string schema = GetSchema(XmlInfo, m.mediaId, mediaGroup);

                        m_injectionXml = RetrieveDocumentRootNode(xmlfileName);*/
                    }
                    else
                    {
                        m_injectionXml = m.mediaRoot;
                    }
                }
                catch (Exception e)
                {
                    msg.AddError(e.Message);
                    return;
                }
           

            // compare the injectionXml (itemNode) with m, 
            /*XmlNode itemNode = injectionXml.SelectSingleNode(string.Format(entryPath, m.mediaId.ToString().ToUpper()), xmlNameManager);
            //XmlNode itemNode = injectionXml.SelectSingleNode("//g:GameData", xmlnsManager);
            if (itemNode == null)
            {
                itemNode = injectionXml.SelectSingleNode(string.Format(entryPath, m.mediaId.ToString().ToLower()), xmlNameManager);
                if (itemNode == null)
                {
                    msg.AddError("Could not find media id" + m.mediaId.ToString());
                    return;
                }
            }*/

            //XmlNode itemNode = injectionXml;
            //if (itemNode == null) return;

            //using id info to get xml for that id into memory
            //find the corresponding value and compare it with the tag value.
            //for video and game, different files need to be load. 
            foreach (string tagName in XmlInfo.tagTbl.Keys)
            {
                TagInfoInItem tagInfo = (TagInfoInItem)XmlInfo.tagTbl[tagName];


                // only check the tags with correct detail levels
                if (tagInfo.viewLevel > viewLevel)
                    continue;

                // not checking ignored tags
                if (tagInfo.current==TagPresent.IGNORE)
                    continue;


                if (tagName.Contains("offerInstance")) tagInfo.userTypes = GetUserTypes(testInfo);
                // optional output fields
                optionals = null;
                if (!string.IsNullOrEmpty(tagInfo.optionalField))
                {
                    optionals = GetInputValues(testInfo, tagInfo.optionalField);
                    if (optionals == null || optionals.Count == 0)
                        continue;
                }

                try
                {
                    ArrayList expected = null;

                    if (tagInfo.tcoType >= TitleContentOfferType.TVONLY && (m.mediaType ==8 
                        || m.mediaType ==9
                        || m.mediaType ==10)
                        )
                    {
                        ProcessTVOnlyTags(tagInfo, m, ref expected, lcid);
                        tagInfo.ValueCompare(expected, msg);
                        continue;
                    }

                    if ((m.mediaType == 20 || m.mediaType == 22)
                            && (tagName.Contains("customGenre") || tagName.Contains("gameTitleMediaId")))
                    {
                        expected = null;
                        tagInfo.ValueCompare(expected, msg);
                        continue;
                    }

                    if (tagInfo.mappedTagName != "")
                    {
                        //first try to fill in the tag value for item if it has a mapping tag
                        string search;


                        if (tagInfo.tcoType == TitleContentOfferType.FROMOFFERFILE) itemNode = o_injectionXml;
                        else itemNode = m_injectionXml;

                        /*
                        if (tagInfo.mappedTagName.Contains("lcid={0}"))
                        {
                            search = string.Format(tagInfo.mappedTagName, lcid.ToString());
                        }
                        else 
                            search = tagInfo.mappedTagName;
                        */

                        if (tagInfo.mappedTagName.Contains("lcid={0}"))
                        {
                            search = string.Format(tagInfo.mappedTagName, lcid.ToString());
                        }
                        else if (tagInfo.mappedTagName.Contains("countryCode="))
                        {
                            search = string.Format(tagInfo.mappedTagName, LcidCountryCode.GetCountryCode(lcid));
                        }
                        else
                        {
                            search = tagInfo.mappedTagName;
                        }

                        XmlNodeList elm;
                        try
                        {
                            if(tagName.Contains("customGenre")) {
                                if(m.mObj is GameContentClass) {
                                    itemNode = ((GameContentClass)m.mObj).TitleMediaObject.XmlDocRoot;
                                }
                            }
                            if (tagName == "live:offer/live:mediaId")
                                elm = itemNode.SelectNodes(search, EmsnsManager);
                            else 
                            elm = itemNode.SelectNodes(search, xmlNameManager);
                        }
                        catch {
                            

                            if (tagName == "isAdSupported") {
                                expected.Add("0");
                                tagInfo.ValueCompare(expected, msg);
                            }

                            if (tagName.Contains("ratingId")) { 
                               //get from child
                                if (m.mObj is VideoObject)
                                {
                                    string s = m.mObj.MediaId.ToString().ToUpper();
                                    expected.Add(RatingTableForVideo.GetRatingId(s));
                                }                                                           
                            }

                           
                            throw;
                        }
                        //do compare                            
                        if (elm.Count != 0)
                        {
                            //bool preview = false;
                            foreach (XmlNode nd in elm)
                            {

                                if (expected == null) expected = new ArrayList();
                                if (tagName.Contains("ratingId"))
                                {
                                    if (RatingSystemCountry.GetCountryCode(nd.InnerText) != LcidCountryCode.GetCountryCode(lcid))
                                    {
                                        expected.Add("-65535");
                                        break;
                                    }
                                }

                                if (tagInfo.mappedTagName.Contains("ratingDescritpor"))
                                {
                                    expected.Add(RatingDescriptor.GetRatingDescriptor(int.Parse(nd.InnerText)));
                                    continue;
                                }

                                // optional output fields, for category, the optional is from input parameter:categoryIds.
                                // Expected nd.InnerText to be 10401, 10402 id number only here, so need to set the tag to be 
                                //"//category" in mappedtagname, used the id as index to create category object to do compare.
                                if (optionals == null || optionals.Contains(nd.InnerText))
                                {
                                    switch (tagInfo.valueType)
                                    {
                                        case DataType.CATEGORY:
                                            int categoryId = int.Parse(nd.InnerText);
                                            expected.Add(CategoryObjects.GetCategoryObj(categoryId));
                                            if (categoryId > 10200 && categoryId <= 10209)
                                            {
                                                if (!expected.Contains(CategoryObjects.GetCategoryObj(10002)))
                                                expected.Add(CategoryObjects.GetCategoryObj(10002));
                                            }
                                            if (categoryId >= 10101 && categoryId <= 10125)
                                            {
                                                if (!expected.Contains(CategoryObjects.GetCategoryObj(10001)))
                                                    expected.Add(CategoryObjects.GetCategoryObj(10001));
                                            }
                                            break;
                                        default:
                                            if (tagName.Contains("availableVideoDefinitions"))
                                            {
                                                //only take the first one, the second one is preview
                                                if (((VideoObject)(m.mObj)).VideoOfferCount >0)
                                                {
                                                    string videoDefinition = VideoDefinitions.Mapping[int.Parse(nd.InnerText)];
                                                    //remove depulicated video definition
                                                    if(!expected.Contains(videoDefinition))
                                                        expected.Add(videoDefinition);
                                                }

                                                break;
                                            }
                                            else
                                                expected.Add(nd.InnerText.Trim());
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {  // find node return 0 node.
                            if (expected == null) expected = new ArrayList();
                            if (tagName.Contains("ratingId"))
                            {
                                //get from child
                                if (m.mObj is VideoObject)
                                {
                                    string s = m.mObj.MediaId.ToString().ToUpper();
                                    if (expected == null) expected = new ArrayList();
                                    expected.Add(RatingTableForVideo.GetRatingId(s));
                                }

                                if (m.mObj is GameContentClass)
                                    foreach (int r in m.mObj.ratingIds)
                                        expected.Add(r.ToString());
                            }

                            if (tagName.Contains("category"))
                            {
                                //get from child
                               
                                if (m.mObj is GameContentClass)
                                {
                                    foreach (int r in m.mObj.Categories)
                                        expected.Add(CategoryObjects.GetCategoryObj(r));
                                        expected.Add(CategoryObjects.GetCategoryObj(10001));                                   
                                }
                            }

                            /*if (tagName.Contains(""))
                            {
                                //get from child

                                if (m.mObj is GameContentClass)
                                {
                                    expected.Add(m.mObj.Categories);
                                }
                            }*/

                            if (tagName.Contains("availableVideoDefinitions"))
                            {
                                //get from child
                                if (m.mObj is VideoObject)
                                {
                                    string s = m.mObj.MediaId.ToString().ToUpper();
                                    if (expected == null) expected = new ArrayList();
                                    expected = VideoDefinition.GetValues(s);
                                }
                            }
                            
                            if (tagInfo.tcoType == TitleContentOfferType.GAMECONTENTONLY && tagName.Contains("gameTitleMediaId"))
                                if ((MediaTypeEnum)m.mediaType == MediaTypeEnum.ArcadeGame || (MediaTypeEnum)m.mediaType == MediaTypeEnum.Xbox1Game || (MediaTypeEnum)m.mediaType == MediaTypeEnum.Xbox360Game)
                                {
                                    if (expected == null)  expected = new ArrayList();
                                    expected.Add(m.mediaId.ToString().ToUpper());
                                }//otherwise can read from the injection file. 
                        }

                        tagInfo.ValueCompare(expected, msg);
                    }
                    else //no mapping from injection xml
                    {
                        

                       if (expected == null) expected = new ArrayList();
                       ArrayList selectIndexs;

                       if (tagName.Contains("offerCounts"))
                       {
                           expected.Add(OfferCounts.GetOfferCount(m.mediaId).InnerXml);
                           tagInfo.ValueCompare(expected, msg);
                           continue;
                       }
                       

                       if (tagName.Contains("ratingId"))
                       {
                           //get from child
                           if (m.mObj.ratingIds != null)
                           {
                               tagInfo.ValueCompare(ArrayList.Adapter(m.mObj.ratingIds), msg);
                               continue;
                           }
                       }


    
                       if (tagInfo.tcoType == TitleContentOfferType.MusicVideoONLY) {
                           expected.Add("Test Contributor 2");
                           tagInfo.ValueCompare(expected, msg);
                           continue;
                       }
                        switch (tagInfo.valueType)
                        {
                            case DataType.PREVIEWIMAGE:
                                expected = (ArrayList)m.outputTbl["previewImage"];
                                 
                                break;

                            case DataType.IMAGE:
                                selectIndexs = (ArrayList)m.outputTbl["images"];
                                if(selectIndexs!=null)
                                foreach (int index in selectIndexs) {
                                    string imglcid = ((Image)m.mObj.ImageList[index]).lcid;
                                    if (imglcid.Contains(lcid.ToString()))
                                        expected.Add(m.mObj.ImageList[index]);
                                }
                                break;
                            case DataType.VIDEOINSTANCE:
                                 selectIndexs = (ArrayList)m.outputTbl["videoinstances"];
                                if (selectIndexs != null)
                                    foreach (int index in selectIndexs)
                                    {
                                        VideoMediaInstance vInstance = (VideoMediaInstance)((VideoObject)m.mObj).VideoInstanceList[index];
                                        if(vInstance.isPreview==0)
                                        expected.Add(((VideoObject)m.mObj).VideoInstanceList[index]);
                                    }
                                break;
                            case DataType.PREVIEWVIDEO:
                                 expected = (ArrayList)m.outputTbl["previewvideoinstances"];
                                break;
                            case DataType.GAMEINSTANCE:
                                selectIndexs = (ArrayList)m.outputTbl["contentinstances"];
                                if (selectIndexs != null)
                                {
                                    try
                                    {
                                        foreach (int index in selectIndexs)
                                        {
                                            GameMediaInstance vInstance = (GameMediaInstance)m.mObj.ContentInstanceList[index];
                                            expected.Add(m.mObj.ContentInstanceList[index]);
                                        }
                                    }
                                    catch {
                                        foreach (GameMediaInstance vInstance in selectIndexs)
                                        {
                                            expected.Add(vInstance);
                                        }                                    
                                    }
                                }
                                break;
                            case DataType.MEDIAINSTANCE:
                                ArrayList mInstanceLst = (ArrayList)m.outputTbl["mediainstances"];
                                if (mInstanceLst != null)
                                    foreach (MediaInstance mInstance in mInstanceLst)
                                    {
                                        expected.Add(mInstance);
                                    }
                                break;
                            case DataType.OFFERINSTANCE:
                                ArrayList offerInstanceLst = (ArrayList)m.outputTbl["offerInstances"];
                                if (offerInstanceLst != null)
                                    foreach (OfferInstance oInstance in offerInstanceLst)
                                    {
                                        expected.Add(oInstance);
                                    }
                                break;

                            default:
                                //need special process here for some tags.
                                string noLiveTag = tagInfo.tagName.ToLower();

                                if (tagInfo.tagName == "live:detailView")
                                {
                                    expected.Add(((int)viewLevel).ToString());
                                }

                                noLiveTag = noLiveTag.Replace("live:", ""); // remove "live:"
                                //read output from the outputTbl passed by dynmaicOutput. 
                                if (m.outputTbl != null && m.outputTbl[noLiveTag] != null)
                                {                                    
                                    expected.Add(m.outputTbl[noLiveTag]);
                                }
                                break;
                        }
                        tagInfo.ValueCompare(expected, msg);
                    }
                }
                catch (Exception e)
                {
                    if (tagInfo.verifyIgnore == TagPresent.DEPEND)
                    {
                        msg.AddWarning(String.Format("LoadCompareMediaDetail:Could not find tag:'{0}, missing, not a must have tag \r\n{1},{2}", tagName, e.Message, e.StackTrace));
                    }
                    else
                    {
                        msg.AddError(String.Format("LoadCompareMediaDetail:Could not find tag:'{0}, missing!\r\n{1}", tagName, e.Message));
                        msg.AddError(e.StackTrace);
                    }
                    continue;
                }
            }
        }

        static public bool FindVideos(XmlNode resultXml, int expectedTotalNum, Media[] expectedMedias, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(FindVideosTag.tags);
            msg = new Message();

            APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);

            bool sorted = IsOrderedResults(testInfo);
            DetailView viewLevel = GetDetailView(testInfo);
            int lcid = GetLocaleId(testInfo);

            string mediaTagName = "id";

            
            
            if (VerifyItemNumber(resultXml, expectedTotalNum, expectedMedias, sorted, mediaTagName,  testInfo, msg))
            {
                if(expectedMedias == null) return msg.success;
                foreach (Media m in expectedMedias)
                {
                    //get the values in the item xml into tags.value
                    try
                    {
                        //
                        //FillValuesForItem(resultXml, apiXmlInfo, id, mediaTagName, viewLevel, msg);
                        msg.AddInfo("Load item for " + "id" + ": " + m.mediaId.ToString());
                        XmlNode itemNd = resultXml.SelectSingleNode(String.Format("/atom:feed/atom:entry[atom:{0}='{1}']", mediaTagName, "urn:uuid:" + m.mediaId.ToString().ToUpper()), BothManager);
                        if (itemNd == null) {
                            msg.AddError(String.Format("/atom:feed/atom:entry[atom:{0}='{1}'] could not found!, might be atom format error", mediaTagName, "urn:uuid:" + m.mediaId.ToString().ToUpper()));
                            continue;
                        }

                        FillTagsValueFromItemXml(m.mediaType, itemNd, apiXmlInfo, viewLevel, testInfo, msg);
                        //XmlNode liveContentNode = itemNd.SelectSingleNode("live:podcast", XmlnsManager);
                        //FillTagsValueFromItemXml(liveContentNode, apiXmlInfo, viewLevel, testInfo, msg);

                        LoadCompareDetail(apiXmlInfo, m, lcid, viewLevel, testInfo, msg, EmsnsManager, "{0}");
                    }
                    catch (Exception e)
                    {
                        msg.AddError(e.Message + e.StackTrace);
                        msg.AddError("Verification for item " + mediaTagName + ": " + m.mediaId.ToString() + " failed with above exception");
                        continue;
                    }
                }
            }
            return msg.success;
        }

        static public bool FindVideoOffers(XmlNode resultXml, int expectedTotalNum, MediaOffer[] expectedMedias, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(FindVideoOffersTag.tags);
            msg = new Message();

            APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);

            bool sorted = IsOrderedResults(testInfo);
            DetailView viewLevel = GetDetailView(testInfo);
            int lcid = GetLocaleId(testInfo);

            string mediaTagName = "id";
            
            if (VerifyItemNumber(resultXml, expectedTotalNum, (MediaOffer[])expectedMedias, sorted, mediaTagName, msg))
            {
                if (expectedMedias == null) return msg.success;
                foreach (MediaOffer m in expectedMedias)
                {
                    //get the values in the item xml into tags.value
                    try
                    {
                        //
                        //FillValuesForItem(resultXml, apiXmlInfo, id, mediaTagName, viewLevel, msg);
                        msg.AddInfo("\r\nLoad item for " + "id" + ": " + m.mediaId.ToString());
                        XmlNode itemNd = resultXml.SelectSingleNode(String.Format("/atom:feed/atom:entry[atom:{0}='{1}']", mediaTagName, "urn:uuid:" + m.offerId.ToString().ToUpper()), BothManager);
                        if (itemNd == null)
                        {
                            msg.AddError(String.Format("/atom:feed/atom:entry[atom:{0}='{1}'] could not found!, might be atom format error", mediaTagName, "urn:uuid:" + m.offerId.ToString().ToUpper()));
                            continue;
                        }

                        FillTagsValueFromItemXml(m.mediaType, itemNd, apiXmlInfo, viewLevel, testInfo, msg);
                        //XmlNode liveContentNode = itemNd.SelectSingleNode("live:podcast", XmlnsManager);
                        //FillTagsValueFromItemXml(liveContentNode, apiXmlInfo, viewLevel, testInfo, msg);

                        LoadCompareDetail(apiXmlInfo, m, lcid, viewLevel, testInfo, msg, EmsnsManager, "{0}");
                    }
                    catch (Exception e)
                    {
                        msg.AddError(e.Message + e.StackTrace);
                        msg.AddError("Verification for item " + mediaTagName + ": " + m.mediaId.ToString() + " failed with above exception");
                        continue;
                    }
                }
            }
            return msg.success;
        }


        static public bool FindPodcasts(XmlNode resultXml, int expectedTotalNum, Media[] expectedMedias, TestCaseInfo testInfo, out Message msg)
        {

            TagInfoInItem[] tags = CreateTagInfoInItem(PodcastsTag.tags);
            msg = new Message();

            APIXmlInfo apiXmlInfo = new APIXmlInfo(tags);

            bool sorted = IsOrderedResults(testInfo);
            DetailView viewLevel = GetDetailView(testInfo);
            int lcid = GetLocaleId(testInfo);

            string mediaTagName = "id";



            if (VerifyItemNumber(resultXml, expectedTotalNum, expectedMedias, sorted, mediaTagName, testInfo, msg))
            {
                if (expectedMedias == null) return msg.success;
                foreach (Media m in expectedMedias)
                {
                    //get the values in the item xml into tags.value
                    try
                    {
                        //
                        //FillValuesForItem(resultXml, apiXmlInfo, id, mediaTagName, viewLevel, msg);
                        msg.AddInfo("\r\nLoad item for " + "id" + ": " + m.mediaId.ToString());
                        XmlNode itemNd = resultXml.SelectSingleNode(String.Format("/atom:feed/atom:entry[atom:{0}='{1}']", mediaTagName, "urn:uuid:" + m.mediaId.ToString().ToUpper()), BothManager);
                        if (itemNd == null)
                        {
                            msg.AddError(String.Format("/atom:feed/atom:entry[atom:{0}='{1}'] could not found!, might be atom format error", mediaTagName, "urn:uuid:" + m.mediaId.ToString().ToUpper()));
                            continue;
                        }

                        FillTagsValueFromItemXml(m.mediaType, itemNd, apiXmlInfo, viewLevel, testInfo, msg);
                        //XmlNode liveContentNode = itemNd.SelectSingleNode("live:podcast", XmlnsManager);
                        //FillTagsValueFromItemXml(liveContentNode, apiXmlInfo, viewLevel, testInfo, msg);

                        LoadCompareDetail(apiXmlInfo, m, lcid, viewLevel, testInfo, msg, PodcastManager, "{0}");
                    }
                    catch (Exception e)
                    {
                        msg.AddError(e.Message + e.StackTrace);
                        msg.AddError("Verification for item " + mediaTagName + ": " + m.mediaId.ToString() + " failed with above exception");
                        continue;
                    }
                }
            }
            return msg.success;
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\connection\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_connection_none_12.4.56.0_none_bd5a72a5038d443c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=connection
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.manifest
XP_MANIFEST_PATH=manifests\x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.cat
XP_CATALOG_PATH=manifests\x86_connection_no-public-key_12.4.56.0_x-ww_7df98874.cat
XP_PAYLOAD_PATH=x86_connection_no-public-key_12.4.56.0_x-ww_7df98874
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=connection,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\IEvidence.cs ===
﻿using System;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace FingerprintFramework
{
    /// <summary>
    /// The framework uses this interface to work with data that is collected by users.
    /// </summary>
    /// <remarks>
    /// Implementors should be marked with the SerializableAttribute.
    /// 
    /// The fingerprint framework requires the constructor:
    /// IEvidence ()
    /// This empty constructor should be as minimal as possible. The Collect function should
    /// be used to populate the object.
    /// 
    /// IXmlSerializable is used only for serialization, thus one does not need to write out a
    /// fully deserializable object, but simply enough information to display nicely.
    /// 
    /// ISerializable requires the constructor:
    /// IEvidence (SerializationInfo, StreamingContext)
    /// </remarks>
    public interface IEvidence : ISerializable, IXmlSerializable
    {
        /// <summary>
        /// Gets a hash of the evidence.
        /// </summary>
        /// <returns>A hash of the evidence.</returns>
        int GetHashCode ();

        /// <summary>
        /// Compares this evidence with another to determine the confidence factor that the two are the same.
        /// </summary>
        /// <param name="evidence">The other evidence to compare.</param>
        /// <returns>
        /// A value of 0 should be returned to indicate that the two evidences are definitaly not the same.
        /// A value of 1 should be returned to indicate that the two evidences are identical.
        /// The range in between should be used to indicate similarity, and to what degree.
        /// </returns>
        float Compare (IEvidence evidence);

        /// <summary>
        /// Collects the evidence using the data passed in via the property bag.
        /// </summary>
        /// <param name="data">The set of known data that is used to inform the evidence collection.</param>
        /// <returns>
        /// Returns true if evidence collection could occur (regardless of whether any evidence was found);
        /// returns false if collection could not occur because sufficient data was not provided.
        /// </returns>
        bool Collect (PropertyBag data);

        /// <summary>
        /// Gets the string representation of the evidence.
        /// </summary>
        /// <returns>The string representation of the evidence.</returns>
        string ToString ();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\FingerprintException.cs ===
﻿using System;

namespace FingerprintFramework
{
    /// <summary>
    /// All exceptions thrown directly by the framework will be of this type.
    /// </summary>
    public class FingerprintException : Exception
    {
        public FingerprintException (string message) : base(message) { }
        public FingerprintException (string message, Exception innerException) : base(message, innerException) { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\Fingerprint.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Threading;
using System.Xml;

namespace FingerprintFramework
{
    /// <summary>
    /// A fingerprint of evidence that was collected after some event occured.
    /// </summary>
    [Serializable]
    public class Fingerprint : MultipartEvidence
    {
        #region Statics

        #region Internal

        /// <summary>
        /// Set the defaults for the static members.
        /// </summary>
        static Fingerprint ()
        {
            _registeredEvidence = new List<RegisteredIEvidence>();
            CollectionTimeout = 0;
        }

        /// <summary>
        /// Gets a registered evidence based on its type name.
        /// </summary>
        /// <param name="typeName">The type name to look up.</param>
        /// <returns>A registered evidence that matches the type name, or null if there is no match.</returns>
        internal static RegisteredIEvidence GetRegisteredIEvidence (string typeName)
        {
            return _registeredEvidence.Find(p => p.Type.FullName == typeName);
        }

        #endregion

        #region Public

        /// <summary>Registered evidence types.</summary>
        private static List<RegisteredIEvidence> _registeredEvidence;

        /// <summary>
        /// Registers evidence types that should be collected to create a fingerprint.
        /// </summary>
        /// <param name="evidence">A list of IEvidence implementing types to register.</param>
        public static void RegisterIEvidence (IEnumerable<Type> evidence)
        {
            foreach (Type t in evidence)
            {
                // check the 
                if (!_registeredEvidence.Exists(p => p.Type == t))
                {
                    _registeredEvidence.Add(new RegisteredIEvidence(t));
                }
            }
        }

        /// <summary>
        /// The time limit for collecting a fingerprint, in seconds.
        /// </summary>
        public static int CollectionTimeout
        {
            get;
            set;
        }

        /// <summary>
        /// Collects a fingerprint using the registered evidence types and the provided data.
        /// </summary>
        /// <param name="data">The data provided to enable evidence collection.</param>
        /// <returns>A fingerprint of the evidence that was collected.</returns>
        public static Fingerprint Collect (PropertyBag data)
        {
            if (CollectionTimeout <= 0)
            {
                return new Fingerprint(data);
            }
            else
            {
                CollectThreadObject cto = new CollectThreadObject() { Data = data };

                Thread thread = new Thread(CollectThreadStart);
                thread.IsBackground = true;
                thread.Start(cto);
                if (!thread.Join(CollectionTimeout * 1000))
                {
                    thread.Abort();
                }

                Fingerprint ans = cto.ResultFingerprint;

                if (ans == null)
                {
                    Exception exc = cto.ResultException;

                    if (exc == null)
                    {
                        throw new FingerprintException("Fingerprint collection timed out.");
                    }
                    else
                    {
                        throw new FingerprintException(exc.Message, exc);
                    }
                }

                return ans;
            }
        }

        /// <summary>The obejct passed to CollectThreadStart.</summary>
        private class CollectThreadObject
        {
            public Fingerprint ResultFingerprint;
            public Exception ResultException;
            public PropertyBag Data;
        }

        /// <summary>
        /// Function for use with a thread and CollectionTimeout.
        /// </summary>
        private static void CollectThreadStart (object data)
        {
            CollectThreadObject cto = (CollectThreadObject)data;

            try
            {
                cto.ResultFingerprint = new Fingerprint(cto.Data);
            }
            catch (ThreadAbortException)
            {
                Thread.ResetAbort();
            }
            catch (Exception exc)
            {
                cto.ResultException = exc;
            }
        }

        #endregion

        #endregion

        #region Instance Members

        #region Fields

        /// <summary>The name used for InitialData in the binary serialization.</summary>
        private const string InitialDataSerilizationName = "FP_PropBag";

        /// <summary>
        /// The data that was used to create this fingerprint.
        /// </summary>
        public PropertyBag InitialData
        {
            get;
            private set;
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Creates a Fingerprint using the data provided.
        /// </summary>
        /// <param name="data">The data to use during evidence collection.</param>
        private Fingerprint (PropertyBag data)
        {
            InitialData = data;

            foreach (RegisteredIEvidence rie in _registeredEvidence)
            {
                IEvidence evidence = rie.New();

                if (evidence.Collect(data))
                {
                    AddEvidence(evidence);
                }
            }
        }

        /// <summary>
        /// Used only by the XML deserializer.
        /// </summary>
        private Fingerprint () { }

        /// <summary>
        /// Used only by the binary deserializer.
        /// </summary>
        protected Fingerprint (SerializationInfo info, StreamingContext context) :
            base(info, context)
        {
            InitialData = (PropertyBag)info.GetValue(InitialDataSerilizationName, typeof(PropertyBag));
        }

        #endregion

        #region Methods

        /// <summary>
        /// Gets the string representation of the fingerprint.
        /// </summary>
        /// <returns>The string representation of the fingerprint.</returns>
        public override string ToString ()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.AppendLine("Initial Data:");
            builder.AppendLine(InitialData.ToString());
            builder.AppendLine("Evidence:");
            builder.Append(base.ToString());

            return builder.ToString();
        }

        /// <summary>
        /// Compares this fingerprint with another to determine the confidence factor that the two are the same.
        /// </summary>
        /// <param name="evidence">The other fingerprint to compare.</param>
        /// <returns>
        /// A value of 0 should be returned to indicate that the two fingerprints are definitaly not the same.
        /// A value of 1 should be returned to indicate that the two fingerprints are identical.
        /// The range in between should be used to indicate similarity, and to what degree.
        /// </returns>
        public float Compare (Fingerprint other)
        {
            return ((IEvidence)this).Compare(other);
        }

        #region ISerializable Members

        protected override void GetObjectData (SerializationInfo info, StreamingContext context)
        {
            info.AddValue(InitialDataSerilizationName, InitialData);
            base.GetObjectData(info, context);
        }

        #endregion

        #region IXmlSerializable Members

        /// <summary>
        /// IEvidence does not require XML deserialization.
        /// </summary>
        protected override void ReadXml (XmlReader reader)
        {
            throw new NotImplementedException("IEvidence does not require XML deserialization.");
        }

        /// <summary>The name of the XML element that contains the InitialData.</summary>
        private const string InitialDataXmlElementName = "PropertyBag";

        /// <summary>The name of the XML element that contains the base portion.</summary>
        private const string BaseXmlElementName = "MultipartEvidence";

        /// <summary>
        /// Expected format of output:
        /// OuterElement // Written by framework
        ///   PropertyBag
        ///     PropertyBagBody // Written by property bag
        ///   /PropertyBag
        ///   MultipartEvidence
        ///     MultipartEvidenceBody // Written by base class
        ///   /MultipartEvidence
        /// /OuterElement // Written by framework
        /// </summary>
        protected override void WriteXml (XmlWriter writer)
        {
            writer.WriteStartElement(InitialDataXmlElementName);
            InitialData.WriteXml(writer);
            writer.WriteEndElement();

            writer.WriteStartElement(BaseXmlElementName);
            base.WriteXml(writer);
            writer.WriteEndElement();
        }

        #endregion

        #endregion

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\ServerPool\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	connection.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\ServerPool\StdAfx.h ===
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_)
#define AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers


// TODO: reference additional headers your program requires here

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.
#include <winsock2.h>
#endif // !defined(AFX_STDAFX_H__76E58C5B_F85B_4C1D_8661_7BC701958809__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\ExceptionEvidence.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace FingerprintFramework
{
    /// <summary>
    /// This evidence is an exception; it is specifically intended to be an exception
    /// that was thrown and later caught by the system.
    /// </summary>
    [Serializable]
    public class ExceptionEvidence : IEvidence
    {
        #region Constructors

        /// <summary>
        /// Creates a default, empty ExceptionEvidence.
        /// Required by the fingerprint framework and the XML deserializer.
        /// </summary>
        public ExceptionEvidence ()
        {
            _exceptionInfo = new List<ExceptionInfo>();
        }

        /// <summary>
        /// Reads data from the SerializationInfo object to deserialize the binary stream.
        /// </summary>
        protected ExceptionEvidence (SerializationInfo info, StreamingContext context)
        {
            _exceptionInfo = (List<ExceptionInfo>)info.GetValue(ExceptionBinarySerializationName, typeof(List<ExceptionInfo>));
        }

        #endregion

        #region Types

        /// <summary>
        /// The exception information for an individual exception.
        /// </summary>
        [Serializable]
        public class ExceptionInfo : IXmlSerializable
        {
            /// <summary>
            /// Used only by XML deserialization.
            /// </summary>
            internal ExceptionInfo ()
            {
            }

            internal ExceptionInfo (Exception exc)
            {
                Message = exc.Message;
                Type = exc.GetType();

                StackTrace trace = new StackTrace(exc, true);
                Stack = trace.GetFrames();
            }

            /// <summary>
            /// The message contained by the exception.
            /// </summary>
            public string Message
            {
                get;
                internal set;
            }

            /// <summary>
            /// The Type of the exception.
            /// </summary>
            public Type Type
            {
                get;
                internal set;
            }

            /// <summary>
            /// The StackFrames that the exception unwound.
            /// </summary>
            public StackFrame[] Stack
            {
                get;
                internal set;
            }

            /// <summary>
            /// Gets a hash value based on the ExceptionInfo members.
            /// </summary>
            /// <returns>A hash value based on the ExceptionInfo members.</returns>
            public override int GetHashCode ()
            {
                // Start with a hash that is unique to this evidence type
                int ans = typeof(ExceptionEvidence).FullName.GetHashCode();

                // Excplicitly removing message from the hash code because it could include a XUID, title id, etc
                // This will allow us to more likely get a quick match from the hash code
                //ans ^= Message.GetHashCode();
                ans ^= Type.FullName.GetHashCode();

                foreach (StackFrame frame in Stack)
                {
                    MethodBase method = frame.GetMethod();
                    ans ^= method.ToString().GetHashCode();
                    ans ^= method.ReflectedType.FullName.GetHashCode();
                }

                return ans;
            }

            private const float MessageWeight = 0.2f;
            private const float TypeWeight = 0.3f;
            private const float StackWeight = 0.5f;

            #region Internal/Private Compare Members

            internal float Compare (ExceptionInfo info)
            {
                float ans = CompareMessageStrings(info.Message) * MessageWeight;

                if (Type == info.Type)
                {
                    ans += TypeWeight;
                }

                // compare frames
                int minCount = Math.Min(Stack.Length, info.Stack.Length);
                float stackConfidence = 0;

                for (int i = 0; i < minCount; ++i)
                {
                    float current = CompareStackFrames(Stack[i], info.Stack[i]);
                    stackConfidence += (minCount - i) * current;
                }

                // compute the average by multiplying be the reciprical of the sum of 1 to minCount
                stackConfidence *= 2f / (minCount * (minCount + 1));

                ans += stackConfidence * StackWeight;

                return ans;
            }

            private float CompareMessageStrings (string otherMessage)
            {
                return RecursiveDiff(Message, 0, Message.Length, otherMessage, 0, otherMessage.Length) * 2f /
                    (Message.Length + otherMessage.Length);
            }

            private int RecursiveDiff (
                string firstString, int firstStart, int firstLength,
                string secondString, int secondStart, int secondLength)
            {
                int firstResultStart, secondResultStart, resultLength;
                FindLongestMatchingSubstring(firstString, firstStart, firstLength,
                    secondString, secondStart, secondLength, 
                    out firstResultStart, out secondResultStart, out resultLength);

                // short circuit out for very small matches
                if (resultLength < 5)
                {
                    return resultLength;
                }

                int firstMatchLength = 0;
                int secondMatchLength = 0;

                // there is some amount of data out front
                if (firstStart != firstResultStart && secondStart != secondResultStart)
                {
                    firstMatchLength = RecursiveDiff(firstString, firstStart, firstResultStart - firstStart,
                                                        secondString, secondStart, secondResultStart - secondStart);
                }

                // there is some amount of data at the end
                if (firstResultStart + resultLength != firstStart + firstLength &&
                    secondResultStart + resultLength != secondStart + secondLength)
                {
                    secondMatchLength = RecursiveDiff(firstString, firstResultStart + resultLength, 
                                                        (firstStart + firstLength) - (firstResultStart + resultLength),
                                                        secondString, secondResultStart + resultLength,
                                                        (secondStart + secondLength) - (secondResultStart + resultLength));
                }

                return resultLength + firstMatchLength + secondMatchLength;
            }

            private void FindLongestMatchingSubstring (
                string firstString, int firstStart, int firstLength, 
                string secondString, int secondStart, int secondLength,
                out int firstResultStart, out int secondResultStart, out int resultLength)
            {
                firstResultStart = firstStart;
                secondResultStart = secondStart;
                resultLength = 0;

                int[,] lengths = new int[2, secondLength];
                int currentLengthInd = 0;

                for (int i = 0; i < firstLength; ++i)
                {
                    for (int j = 0; j < secondLength; ++j)
                    {
                        if (firstString[firstStart + i] == secondString[secondStart + j])
                        {
                            if (i == 0 || j == 0)
                            {
                                lengths[currentLengthInd, j] = 1;
                            }
                            else
                            {
                                lengths[currentLengthInd, j] = lengths[(currentLengthInd + 1) % 2, j - 1] + 1;
                            }

                            if (lengths[currentLengthInd, j] > resultLength)
                            {
                                resultLength = lengths[currentLengthInd, j];
                                firstResultStart = firstStart + i + 1 - resultLength;
                                secondResultStart = secondStart + j + 1 - resultLength;
                            }
                        }
                    }

                    currentLengthInd = (currentLengthInd + 1) % 2;
                }
            }

            private float CompareStackFrames (StackFrame first, StackFrame second)
            {
                MethodBase method1 = first.GetMethod();
                MethodBase method2 = second.GetMethod();

                if (method1.ReflectedType.FullName == method2.ReflectedType.FullName)
                {
                    if (method1.ToString() == method2.ToString())
                    {
                        return 1f;
                    }
                    else if (method1.Name == method2.Name)
                    {
                        // not an exact match, but the same name might mean similar functionality
                        return 0.5f;
                    }
                }

                // methods are not on the same type, no match
                return 0f;
            }

            #endregion

            internal void ToString (StringBuilder builder)
            {
                builder.Append(Type.FullName);
                builder.Append(": ");
                builder.AppendLine(Message);

                foreach (StackFrame frame in Stack.Reverse())
                {
                    MethodBase method = frame.GetMethod();
                    Type type = method.ReflectedType;

                    builder.Append("  at ");
                    builder.Append(type.FullName);
                    builder.Append(" :: ");
                    builder.Append(method.ToString());

                    string file = frame.GetFileName();
                    if (!string.IsNullOrEmpty(file))
                    {
                        builder.Append(" in ");
                        builder.Append(file);
                        builder.Append(":line ");
                        builder.Append(frame.GetFileLineNumber());
                    }

                    builder.AppendLine();
                }
            }

            #region IXmlSerializable Members

            /// <summary>
            /// Should always return null.
            /// </summary>
            public System.Xml.Schema.XmlSchema GetSchema ()
            {
                return null;
            }

            void IXmlSerializable.ReadXml (XmlReader reader)
            {
                throw new NotImplementedException("IEvidence does not require XML deserialization.");
            }

            private const string TypeXmlSerializationName = "Type";
            private const string MessageXmlSerializationName = "Message";
            private const string StackXmlSerializationName = "StackFrames";

            void IXmlSerializable.WriteXml (XmlWriter writer)
            {
                WriteXml(writer);
            }

            internal void WriteXml (XmlWriter writer)
            {
                // the type of the exception
                writer.WriteAttributeString(TypeXmlSerializationName, Type.AssemblyQualifiedName);

                // the message
                writer.WriteStartElement(MessageXmlSerializationName);
                writer.WriteValue(Message);
                writer.WriteEndElement();

                // write the stack frames as nice xml so that we can potentially display them
                writer.WriteStartElement(StackXmlSerializationName);

                foreach (StackFrame frame in Stack)
                {
                    writer.WriteStartElement("Frame");
                    writer.WriteAttributeString("FileColumnNumber", frame.GetFileColumnNumber().ToString());
                    writer.WriteAttributeString("FileLineNumber", frame.GetFileLineNumber().ToString());
                    writer.WriteAttributeString("FileName", frame.GetFileName());
                    MethodBase method = frame.GetMethod();
                    writer.WriteAttributeString("Method", method.ToString());
                    writer.WriteAttributeString("MethodTypeName", method.ReflectedType.FullName);
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }

            #endregion
        }

        #endregion

        #region Fields

        /// <summary>The analyzed, individual exception pieces.</summary>
        protected List<ExceptionInfo> _exceptionInfo;

        /// <summary>
        /// The exception stack of the exception this evidence is based on.
        /// The exceptions are in order from outer to inner.
        /// </summary>
        public IEnumerable<ExceptionInfo> ExceptionStack
        {
            get
            {
                return _exceptionInfo;
            }
        }

        #endregion

        #region Members

        /// <summary>
        /// Analyzes the base data to create more detailed evidence.
        /// </summary>
        protected void AnalyzeData (Exception exception)
        {
            if (exception == null)
            {
                throw new ArgumentNullException("exception");
            }

            // analyze each exception in the list
            _exceptionInfo = new List<ExceptionInfo>();
            Exception current = exception;

            while (current != null)
            {
                _exceptionInfo.Add(new ExceptionInfo(current));
                current = current.InnerException;
            }
        }

        #endregion

        #region IEvidence Members

        /// <summary>
        /// Gets a hash of the evidence that can be used to quickly find exact matches.
        /// </summary>
        public override int GetHashCode ()
        {
            int ans = 0;

            foreach (ExceptionInfo info in _exceptionInfo)
            {
                ans ^= info.GetHashCode();
            }

            return ans;
        }

        /// <summary>
        /// Compares this evidence with the given one.
        /// </summary>
        /// <param name="evidence">The evidence to compare.</param>
        /// <returns>A value indicating how similar the two evidences are.</returns>
        float IEvidence.Compare (IEvidence evidence)
        {
            if (typeof(ExceptionEvidence) != evidence.GetType())
            {
                return 0;
            }

            ExceptionEvidence excEvidence = (ExceptionEvidence)evidence;
            List<ExceptionInfo> otherExcInfo = excEvidence._exceptionInfo;

            int minCount = Math.Min(_exceptionInfo.Count, otherExcInfo.Count);
            int maxCount = Math.Max(_exceptionInfo.Count, otherExcInfo.Count);

            float maxConfidence = 1f;
            
            switch (maxCount - minCount)
            {
                case 0: maxConfidence = 1f; break;
                case 1: maxConfidence = 0.9f; break;
                case 2: maxConfidence = 0.8f; break;
                case 3: maxConfidence = 0.7f; break;
                case 4: maxConfidence = 0.6f; break;
                default: maxConfidence = 0.5f; break;
            }

            float ans = 0;

            for (int i = 1; i <= minCount; ++i)
            {
                float current = _exceptionInfo[_exceptionInfo.Count - i].Compare(otherExcInfo[otherExcInfo.Count - i]);
                ans += (minCount - i + 1) * current;
            }

            // compute the average by multiplying be the reciprical of the sum of 1 to minCount
            ans *= 2f / (minCount * (minCount + 1));

            // reduce the confidence level based on the exception count difference
            ans *= maxConfidence;

            return ans;
        }

        /// <summary>
        /// The name of the exception data that this evidence uses.
        /// This data is required to collect the evidence.
        /// The data should be of type Exception.
        /// </summary>
        public static PropertyBag.TypedPropertyName ExceptionPropertyName =
            new PropertyBag.TypedPropertyName("ExceptionEvidence.Exception", typeof(Exception));

        /// <summary>
        /// Collect checks that we have the necessary data (the exception) and 
        /// optionally that we have some additional data that helps (a stack trace from the top level exception catcher).
        /// </summary>
        /// <param name="data">The property bag of data passed to us by the caller.</param>
        /// <returns>True if the required data is present; false if it is not.</returns>
        bool IEvidence.Collect (PropertyBag data)
        {
            if (!data.Exists(ExceptionPropertyName))
            {
                return false;
            }

            AnalyzeData(data.GetFirst<Exception>(ExceptionPropertyName));

            return true;
        }

        /// <summary>
        /// Gets a string representation of the exception evidence.
        /// </summary>
        public override string ToString ()
        {
            StringBuilder builder = new StringBuilder();
            bool isFirst = true;

            foreach (ExceptionInfo ei in _exceptionInfo)
            {
                if (isFirst)
                {
                    isFirst = false;
                }
                else
                {
                    builder.AppendLine("  --- Inner Exception ---");
                }

                ei.ToString(builder);
            }

            return builder.ToString();
        }

        #endregion

        #region ISerializable Members

        /// <summary>The name of the exception object for serialization.</summary>
        protected const string ExceptionBinarySerializationName = "Exc";

        /// <summary>
        /// Adds objects to the SerializationInfo object for binary serialization.
        /// See the constructor with the same parameters for deserialization.
        /// </summary>
        void ISerializable.GetObjectData (SerializationInfo info, StreamingContext context)
        {
            info.AddValue(ExceptionBinarySerializationName, _exceptionInfo);
        }

        #endregion

        #region IXmlSerializable Members

        /// <remarks>
        /// According to the IXmlSerializable documentation, this should always return null.
        /// </remarks>
        System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ()
        {
            return null;
        }

        /// <summary>
        /// IEvidence does not require XML deserialization.
        /// </summary>
        void IXmlSerializable.ReadXml (XmlReader reader)
        {
            throw new NotImplementedException("IEvidence does not require XML deserialization.");
        }

        /// <summary>The name of an exception info object for serialization.</summary>
        protected const string ExceptionInfoXmlSerializationName = "ExceptionInfo";

        /// <summary>The name of the exception info list for serialization.</summary>
        protected const string ExceptionInfoListXmlSerializationName = "ExceptionInfoList";

        /// <summary>
        /// Writes the evidence to the XML stream.
        /// The intended format is:
        /// OuterElement
        ///   ExceptionInfoListElement
        ///     ExceptionInfoElement
        ///       Exception
        ///     /ExceptionInfoElement
        ///     ...
        ///   /ExceptionInfoListElement
        /// /OuterElement
        /// </summary>
        void IXmlSerializable.WriteXml (XmlWriter writer)
        {
            writer.WriteStartElement(ExceptionInfoListXmlSerializationName);

            foreach (ExceptionInfo ei in _exceptionInfo)
            {
                writer.WriteStartElement(ExceptionInfoXmlSerializationName);
                ei.WriteXml(writer);
                writer.WriteEndElement();
            }

            writer.WriteEndElement();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\RegisteredIEvidence.cs ===
﻿using System;
using System.Reflection;

namespace FingerprintFramework
{
    /// <summary>
    /// An internal type used to store information about registered evidence types.
    /// </summary>
    internal class RegisteredIEvidence
    {
        /// <summary>
        /// Creates a RegisteredIEvidence using the specified type.
        /// </summary>
        /// <param name="type">The type of IEvidence to create.</param>
        internal RegisteredIEvidence (Type type)
        {
            // make sure that this is an IEvidence
            if (!typeof(IEvidence).IsAssignableFrom(type))
            {
                throw new FingerprintException("Type does not implement IEvidence: " + type.FullName);
            }

            // check for a default constructor
            _constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,
                null, new Type[0], null);

            if (_constructorInfo == null)
            {
                throw new FingerprintException("Type does not have an empty constructor: " + type.FullName);
            }

            Type = type;
        }

        /// <summary>The type that is registered.</summary>
        internal Type Type
        {
            get;
            private set;
        }

        /// <summary>The empty constructor.</summary>
        private ConstructorInfo _constructorInfo;

        /// <summary>
        /// Creates a new instance of the registered type.
        /// </summary>
        /// <returns>A new instance of the registered type.</returns>
        internal IEvidence New ()
        {
            return (IEvidence)(_constructorInfo.Invoke(new object[0]));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\MultipartEvidence.cs ===
﻿using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;

namespace FingerprintFramework
{
    /// <summary>
    /// This base class is an IEvidence that holds multiple IEvidences within it.
    /// </summary>
    [Serializable]
    public class MultipartEvidence : IEvidence
    {
        #region MultipartEvidence Members

        #region Constructors

        /// <summary>Creates a default MultipartEvidence.</summary>
        public MultipartEvidence ()
        {
            _evidence = new List<IEvidence>();
        }

        /// <summary>Creates a MultipartEvidence from the deserialized info provided.</summary>
        /// <remarks>Required by ISerializable.</remarks>
        protected MultipartEvidence (SerializationInfo info, StreamingContext context) : this()
        {
            _evidence = (List<IEvidence>)info.GetValue(EvidenceBinarySerializationName, typeof(List<IEvidence>));
        }

        #endregion

        #region Evidence

        /// <summary>The evidence that we contain.</summary>
        private List<IEvidence> _evidence;

        /// <summary>An enumerable list of our evidence.</summary>
        protected IEnumerable<IEvidence> Evidence
        {
            get
            {
                return _evidence;
            }
        }

        /// <summary>
        /// Adds evidence to the collection.
        /// </summary>
        /// <param name="evidence">The evidence to add.</param>
        protected void AddEvidence (IEvidence evidence)
        {
            if (_evidence.Count >= ushort.MaxValue)
            {
                throw new OverflowException(string.Format("Cannot have more than {0} pieces of evidence.", ushort.MaxValue));
            }

            _evidence.Add(evidence);
        }

        #endregion

        #endregion

        #region IEvidence Members

        /// <summary>XOrs the hashes of the contained evidence.</summary>
        public override int GetHashCode ()
        {
            int ans = 0;

            foreach (IEvidence evidence in _evidence)
            {
                ans ^= evidence.GetHashCode();
            }

            return ans;
        }

        /// <summary>Averages the Compare results of the contained evidence.</summary>
        /// <remarks>
        /// Some other combination algorithm may be better, such as:
        /// multiplication : Means that any total miss (0) means the whole thing is a miss, but doesn't quite seem accurate
        /// other?
        /// </remarks>
        float IEvidence.Compare (IEvidence evidence)
        {
            List<IEvidence> ourEvidenceRemaining = new List<IEvidence>(_evidence);
            List<IEvidence> theirEvidence = new List<IEvidence>();

            MultipartEvidence mpe = evidence as MultipartEvidence;
            if (mpe != null)
            {
                theirEvidence.AddRange(mpe._evidence);
            }
            else
            {
                theirEvidence.Add(evidence);
            }

            float ans = 0f;
            float total = (float)Math.Max(ourEvidenceRemaining.Count, theirEvidence.Count);

            foreach (IEvidence iev in theirEvidence)
            {
                Type ievType = iev.GetType();
                IEvidence bestEv = null;
                float bestComp = 0f;

                foreach (IEvidence ourEv in ourEvidenceRemaining)
                {
                    if (ievType.IsAssignableFrom(ourEv.GetType()))
                    {
                        float comp = ourEv.Compare(iev);
                        if (comp > bestComp)
                        {
                            bestComp = comp;
                            bestEv = ourEv;
                        }
                    }
                }

                if (bestEv != null)
                {
                    ans += bestComp;
                    ourEvidenceRemaining.Remove(bestEv);
                }
            }

            return ans / total;
        }

        /// <summary>Collects each contained evidence, returning true if any of them do.</summary>
        bool IEvidence.Collect (PropertyBag data)
        {
            bool ans = false;
            List<IEvidence> collected = new List<IEvidence>();

            foreach (IEvidence evidence in _evidence)
            {
                if (evidence.Collect(data))
                {
                    ans = true;
                    collected.Add(evidence);
                }
            }

            _evidence = collected;
            return ans;
        }

        /// <summary>
        /// Gets the string representation of the evidence.
        /// </summary>
        /// <returns>The string representation of the evidence.</returns>
        public override string ToString ()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();

            foreach (IEvidence evidence in _evidence)
            {
                AppendNamedItemWithOptionalIndention(builder, evidence.GetType().Name, evidence.ToString());
            }

            return builder.ToString();
        }

        /// <summary>
        /// Adds a named item to a StringBuilder, and indents it if it has multiple lines.
        /// </summary>
        internal static void AppendNamedItemWithOptionalIndention (System.Text.StringBuilder builder, string name, string value)
        {
            builder.Append(name);

            if (value.IndexOf('\n') == -1)
            {
                // no newline
                builder.Append(": ");
                builder.AppendLine(value);
            }
            else
            {
                // has newline(s)
                builder.AppendLine(":");

                string[] lines = value.Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string line in lines)
                {
                    builder.Append(' ', 2);
                    builder.AppendLine(line);
                }
            }
        }

        #endregion

        #region ISerializable Members

        void ISerializable.GetObjectData (SerializationInfo info, StreamingContext context)
        {
            GetObjectData(info, context);
        }

        protected const string EvidenceBinarySerializationName = "Evidence";

        protected virtual void GetObjectData (SerializationInfo info, StreamingContext context)
        {
            info.AddValue(EvidenceBinarySerializationName, _evidence);
        }

        #endregion

        #region IXmlSerializable Members

        /// <summary>
        /// According to MSDN documentation, this should always return null.
        /// </summary>
        System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ()
        {
            return null;
        }

        void IXmlSerializable.ReadXml (XmlReader reader)
        {
            ReadXml(reader);
        }

        /// <summary>
        /// IEvidence does not require XML deserialization.
        /// </summary>
        protected virtual void ReadXml (XmlReader reader)
        {
            throw new NotImplementedException("IEvidence does not require XML deserialization.");
        }

        void IXmlSerializable.WriteXml (XmlWriter writer)
        {
            WriteXml(writer);
        }

        /// <summary>
        /// Expected format of output:
        /// OuterElement // Written by framework
        ///   EvidenceTypeName
        ///     EvidenceBody // Written by contained evidence
        ///   /EvidenceTypeName
        ///   ...
        /// /OuterElement // Written by framework
        /// </summary>
        protected virtual void WriteXml (XmlWriter writer)
        {
            foreach (IEvidence evidence in _evidence)
            {
                writer.WriteStartElement(evidence.GetType().FullName);
                evidence.WriteXml(writer);
                writer.WriteEndElement();
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\ServerPool\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_serverpool_none_12.4.56.0_none_dafc5504f528ed97
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=serverpool
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.manifest
XP_MANIFEST_PATH=manifests\x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.cat
XP_CATALOG_PATH=manifests\x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.cat
XP_PAYLOAD_PATH=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=serverpool,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\ServerPool\ServerPool.cpp ===
/////////////////////////////////////////////////////////////////////////////
// Copyright  2001 Microsoft.  ALL RIGHTS RESERVED
// Programmer: Sean Wohlgemuth (mailto:seanwo@microsoft.com)
/////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "ServerPool.h"

/////////////////////////////////////////////////////////////////////////////
// CServerPool
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
// Ctor
//
CServerPool::CServerPool
(
    DWORD  dwServers, 
    HANDLE hShutdownEvent,       // = NULL
    ULONG  ulcSendBuffers,       // = DEFAULTBUFFERS, 
    ULONG  ulcSendBufferSize,    // = DEFAULTBUFFERSIZE, 
    long   lcReceiveBufferSize ) // = -1 
: 
    m_hShutdownEvent( hShutdownEvent ), 
    m_dwServers( 0 ),
    m_apClient( NULL )
{
    // Check for valid server count
    if( 0L >= dwServers ) 
    {
        return;
    }

    // Create client connection array
    m_apClient = new TCPClientConnection*[ dwServers ];
    if( NULL == m_apClient )
    {
        return;
    }

    // Create client connections
    for( DWORD dw = 0L; dw < dwServers; dw++ )
    {
        m_apClient[ dw ] = new 
            TCPClientConnection( 
                m_hShutdownEvent,
                ulcSendBuffers,
                ulcSendBufferSize,
                lcReceiveBufferSize );
        if( NULL == m_apClient[ dw ] )
        {
            return;
        }
    }

    // Create list of ips
    m_adwIP = new DWORD[ dwServers ];
    if( NULL == m_adwIP )
    {
        return;
    }

    // Create list of ports
    m_awPort = new WORD[ dwServers ];
    if( NULL == m_awPort )
    {
        return;
    }

    m_dwServers = dwServers;
}

/////////////////////////////////////////////////
// Dtor
//
CServerPool::~CServerPool()
{
    if( NULL==m_apClient ) return;

    // Delete client connections
    for( DWORD dw = 0L; dw < m_dwServers; dw++ )
    {
        if( NULL != m_apClient[ dw ] )
        {
            delete m_apClient[ dw ];
        }
    }
    delete[] m_apClient;

    // Delete client IPs
    if( NULL != m_adwIP )
    {
        delete[] m_adwIP;
    }

    // Delete client ports
    if( NULL != m_awPort )
    {
        delete[] m_awPort;
    }
}

/////////////////////////////////////////////////
//  User To IP
//
DWORD CServerPool::UserToIP( 
    ULONGLONG qwUserId )
{
    if( NULL == m_adwIP )
    {
        return E_FAIL;
    }

    return m_adwIP[ UserToServer( qwUserId ) ];
}

/////////////////////////////////////////////////
//  Wait For All Pending Buffers To Flush
//
HRESULT CServerPool::WaitForAllPendingBuffersToFlush(
    DWORD dwTimeout )
{
    HRESULT hr = S_OK;
    
    for( DWORD dw = 0L; dw < m_dwServers; dw++ )
    {
        if( FAILED( m_apClient[ dw ]->WaitForAllPendingBuffersToFlush( dwTimeout ) ) )
        {
            hr = E_FAIL;
        }
    }

    return hr;
}

/////////////////////////////////////////////////
//  Connect
//
HRESULT CServerPool::Connect( 
    DWORD* adwIP, 
    UINT   uiNumIPs, 
    WORD*  awPort, 
    DWORD  dwTimeout ) // = WSA_INFINITE 
{
    HRESULT hr = S_OK;
    
    for( DWORD dw = 0L; dw < m_dwServers; dw++ )
    {
        m_adwIP[ dw ] = adwIP[ dw ];
        m_awPort[ dw ] = awPort[ dw ];
        if( FAILED( m_apClient[ dw ]->Connect( m_adwIP[ dw ], m_awPort[ dw ], dwTimeout ) ) )
        {
            hr = E_FAIL;
        }
    }

    return hr;
}

/////////////////////////////////////////////////
//  Close
//
HRESULT CServerPool::Close( 
    bool fHard ) // = false 
{
    HRESULT hr = S_OK;
    
    for( DWORD dw = 0L; dw < m_dwServers; dw++ )
    {
        if( FAILED( m_apClient[ dw ]->Close( fHard ) ) )
        {
            hr = E_FAIL;
        }
    }

    return hr;
}

/////////////////////////////////////////////////
//  Send
//
HRESULT CServerPool::Send(
    ULONGLONG   qwUserId, 
    const BYTE* pBuf, 
    int         iLen, 
    BOOL        fFlush,     // = TRUE
    DWORD       dwTimeout ) // = WSA_INFINITE
{
    return m_apClient[ UserToServer( qwUserId ) ]->Send( (const char*)pBuf, iLen, fFlush, dwTimeout );
}

/////////////////////////////////////////////////
//  Send ALL
//
HRESULT CServerPool::SendALL(
    const BYTE* pBuf, 
    int         iLen, 
    BOOL        fFlush,     // = TRUE
    DWORD       dwTimeout ) // = WSA_INFINITE
{
    HRESULT hr = S_OK;
    
    for( DWORD dw = 0L; dw < m_dwServers; dw++ )
    {
        if( FAILED( m_apClient[ dw ]->Send( (const char*)pBuf, iLen, fFlush, dwTimeout ) ) )
        {
            hr = E_FAIL;
        }
    }

    return hr;
}

/////////////////////////////////////////////////
//  Receive
//
HRESULT CServerPool::Receive( 
    ULONGLONG qwUserId, 
    BYTE*     pBuf, 
    DWORD     dwLen, 
    DWORD*    pdwLen, 
    DWORD     dwTimeout ) // = WSA_INFINITE
{
    return m_apClient[ UserToServer( qwUserId ) ]->Receive( (char*)pBuf, dwLen, pdwLen, dwTimeout );
}

/////////////////////////////////////////////////
//  Wait For Disconnect
//
bool CServerPool::WaitForDisconnect( 
    ULONGLONG qwUserId, 
    int       iTimeout )
{
    return m_apClient[ UserToServer( qwUserId ) ]->WaitForDisconnect( iTimeout );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\Fingerprint\PropertyBag.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace FingerprintFramework
{
    /// <summary>
    /// The property bag that is used by the framework.
    /// </summary>
    [Serializable]
    public class PropertyBag : ISerializable, IXmlSerializable
    {
        #region Types

        /// <summary>
        /// A property within the PropertyBag.
        /// </summary>
        [Serializable]
        public class Property : ISerializable, IXmlSerializable
        {
            /// <summary>Creates a Property with the given values.</summary>
            public Property (string name, object value)
            {
                Name = name;
                Value = value;
            }

            /// <summary>Used only by the XML deserializer.</summary>
            internal Property ()
            {
            }

            /// <summary>
            /// Used only by the binary deserializer.
            /// </summary>
            protected Property (SerializationInfo info, StreamingContext context)
            {
                Name = info.GetString(NameBinarySerializationName);
                Type t = (Type)info.GetValue(ValueTypeBinarySerializationName, typeof(Type));
                Value = info.GetValue(ValueBinarySerializationName, t);
            }

            /// <summary>The name of the property.</summary>
            public string Name
            {
                get;
                private set;
            }

            /// <summary>The value of the property.</summary>
            public object Value
            {
                get;
                private set;
            }

            #region ISerializable Members

            private const string NameBinarySerializationName = "Name";
            private const string ValueBinarySerializationName = "Value";
            private const string ValueTypeBinarySerializationName = "Type";

            void ISerializable.GetObjectData (SerializationInfo info, StreamingContext context)
            {
                info.AddValue(NameBinarySerializationName, Name);
                info.AddValue(ValueTypeBinarySerializationName, Value.GetType());
                info.AddValue(ValueBinarySerializationName, Value);
            }

            #endregion

            #region IXmlSerializable Members

            System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ()
            {
                return null;
            }

            private const string PropertyAttributeExceptionMessage = "Property element should contain a " +
                NameBinarySerializationName + " attribute.";

            void IXmlSerializable.ReadXml (XmlReader reader)
            {
                throw new NotImplementedException("IEvidence does not require XML deserialization.");
            }

            void IXmlSerializable.WriteXml (XmlWriter writer)
            {
                WriteXml(writer);
            }

            internal void WriteXml (XmlWriter writer)
            {
                writer.WriteAttributeString(NameBinarySerializationName, Name);
                writer.WriteAttributeString(ValueTypeBinarySerializationName, Value.GetType().FullName);

                // write a string version of the value
                writer.WriteStartElement(ValueBinarySerializationName);
                writer.WriteValue((Value ?? "null").ToString());
                writer.WriteEndElement();
            }

            #endregion
        }

        /// <summary>
        /// A typed property name helps ensure that the proper type of value is placed into the bag for a given name.
        /// </summary>
        public class TypedPropertyName
        {
            public TypedPropertyName (string name, Type type)
            {
                Name = name;
                Type = type;
            }

            public string Name { get; set; }
            public Type Type { get; set; }

            public override string ToString ()
            {
                StringBuilder builder = new StringBuilder();
                builder.Append(Name);
                builder.Append(", ");
                builder.Append(Type.Name);
                return builder.ToString();
            }
        }

        #endregion

        #region Fields

        /// <summary>Our bag of properties.</summary>
        protected List<Property> _properties;

        #endregion

        #region Constructors

        /// <summary>
        /// Creates a default, empty PropertyBag.
        /// </summary>
        public PropertyBag ()
        {
            _properties = new List<Property>();
        }

        /// <summary>
        /// Used only by the binary deserializer.
        /// </summary>
        protected PropertyBag (SerializationInfo info, StreamingContext context)
        {
            _properties = (List<Property>)info.GetValue(PropertiesBinarySerializationName, typeof(List<Property>));
        }

        #endregion

        #region Members

        /// <summary>
        /// Adds a property to the bag.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        public void Add (string name, object value)
        {
            Add(new Property(name, value));
        }

        /// <summary>
        /// Adds a property to the bag.
        /// </summary>
        /// <param name="property">The property to add.</param>
        public void Add (Property property)
        {
            _properties.Add(property);
        }

        /// <summary>
        /// Adds a property to the bag.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        public void Add (TypedPropertyName name, object value)
        {
            if (!name.Type.IsAssignableFrom(value.GetType()))
            {
                throw new ArgumentException("This property must be of type: " + name.ToString(), "value");
            }

            Add(name.Name, value);
        }

        /// <summary>
        /// Determines if the property bag has a property with the given name.
        /// </summary>
        /// <param name="name">The name of the property to search for.</param>
        /// <returns>True if the property exists in the bag; false if it does not.</returns>
        public bool Exists (string name)
        {
            return _properties.Exists(p => p.Name == name);
        }

        /// <summary>
        /// Determines if the property bag has a property with the given name.
        /// </summary>
        /// <param name="name">The name of the property to search for.</param>
        /// <returns>True if the property exists in the bag; false if it does not.</returns>
        public bool Exists (TypedPropertyName name)
        {
            return _properties.Exists(p => p.Name == name.Name && name.Type.IsAssignableFrom(p.Value.GetType()));
        }

        /// <summary>
        /// Gets the property values associated with the given name.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <returns>An enumerable list of values.</returns>
        public IEnumerable<object> Get (string name)
        {
            return _properties.Where(p => p.Name == name).Select(p => p.Value);
        }

        /// <summary>
        /// Gets the property values associated with the given name.
        /// </summary>
        /// <typeparam name="T">The type of value that is expected to be held by the property.</typeparam>
        /// <param name="name">The name of the property.</param>
        /// <returns>An enumerable list of values of type T.</returns>
        public IEnumerable<T> Get<T> (string name)
        {
            return _properties.Where(p => p.Name == name).Select(p => p.Value).Cast<T>();
        }

        /// <summary>
        /// Gets the property values associated with the given name.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <returns>An enumerable list of values.</returns>
        public IEnumerable<object> Get (TypedPropertyName name)
        {
            return _properties.Where(p => p.Name == name.Name && name.Type.IsAssignableFrom(p.Value.GetType())).Select(p => p.Value);
        }

        /// <summary>
        /// Gets the property values associated with the given name.
        /// </summary>
        /// <typeparam name="T">The type of value that is expected to be held by the property.</typeparam>
        /// <param name="name">The name of the property.</param>
        /// <returns>An enumerable list of values of type T.</returns>
        public IEnumerable<T> Get<T> (TypedPropertyName name)
        {
            return _properties.Where(p => p.Name == name.Name && name.Type.IsAssignableFrom(p.Value.GetType())).Select(p => p.Value).Cast<T>();
        }

        /// <summary>
        /// Gets the first property value associated with the given name.
        /// </summary>
        /// <typeparam name="T">The type of value that is expected to be held by the property.</typeparam>
        /// <param name="name">The name of the property.</param>
        /// <returns>The first property value; with type T.</returns>
        public T GetFirst<T> (string name)
        {
            Property prop = _properties.Find(p => p.Name == name);

            return prop == null ? default(T) : (T)prop.Value;
        }

        /// <summary>
        /// Gets the first property value associated with the given name.
        /// </summary>
        /// <typeparam name="T">The type of value that is expected to be held by the property.</typeparam>
        /// <param name="name">The name of the property.</param>
        /// <returns>The first property value; with type T.</returns>
        public T GetFirst<T> (TypedPropertyName name)
        {
            Property prop = _properties.Find(p => p.Name == name.Name && name.Type.IsAssignableFrom(p.Value.GetType()));

            return prop == null ? default(T) : (T)prop.Value;
        }

        public override string ToString ()
        {
            StringBuilder builder = new StringBuilder();

            foreach (Property p in _properties)
            {
                MultipartEvidence.AppendNamedItemWithOptionalIndention(builder, p.Name, p.Value.ToString());
            }

            return builder.ToString();
        }

        #endregion

        #region ISerializable Members

        private const string PropertiesBinarySerializationName = "Props";

        void ISerializable.GetObjectData (SerializationInfo info, StreamingContext context)
        {
            info.AddValue(PropertiesBinarySerializationName, _properties);
        }

        #endregion

        #region IXmlSerializable Members

        System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ()
        {
            return null;
        }

        /// <summary>The name of the xml element that holds a property.</summary>
        private const string PropertyXmlElementName = "Property";

        void IXmlSerializable.ReadXml (XmlReader reader)
        {
            throw new NotImplementedException("IEvidence does not require XML deserialization.");
        }

        void IXmlSerializable.WriteXml (XmlWriter writer)
        {
            WriteXml(writer);
        }

        internal void WriteXml (XmlWriter writer)
        {
            foreach (Property prop in _properties)
            {
                writer.WriteStartElement(PropertyXmlElementName);
                prop.WriteXml(writer);
                writer.WriteEndElement();
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\ServerPool\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_serverpool_none_12.4.56.0_none_dafc5504f528ed97
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=serverpool
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.manifest
XP_MANIFEST_PATH=manifests\x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.cat
XP_CATALOG_PATH=manifests\x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5.cat
XP_PAYLOAD_PATH=x86_serverpool_no-public-key_12.4.56.0_x-ww_764435f5
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=serverpool,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\threadpool\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	threadpool.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\threadpool\threadpool.cpp ===
/////////////////////////////////////////////////////////////////////////////
// Copyright  2001 Microsoft.  ALL RIGHTS RESERVED
// Programmer: Sean Wohlgemuth (mailto:seanwo@microsoft.com)
/////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"   //Precompiled header
#include "process.h" // _beginthread
#include "threadpool.h"
#include "TiDebug.h"

/////////////////////////////////////////////////////////////////////////////
// Constructor - Initializes member variables and call initialization
// procedure.
/////////////////////////////////////////////////////////////////////////////

WorkerThreadPool::WorkerThreadPool(
    unsigned      cThreads, 
    ThreadFuncPtr pWorkerFunc, 
    HANDLE        hShutdownEvent /* = NULL */ )
:
    m_fInit( false ),
    m_cThreads( 0 ),
    m_rghThreads( NULL ),
    m_rgThreadParams( NULL ),
    m_rghFinishedEvents( NULL ),
    m_hShutdown( hShutdownEvent )
{
    TiDebugScope( WorkerThreadPool::Ctor )

	Init( cThreads, pWorkerFunc, hShutdownEvent );
}

/////////////////////////////////////////////////////////////////////////////
// Destructor - signals shutdown event then waits on all threads finished
// events before closing all handles and freeing allocated memory for member
// variables.
/////////////////////////////////////////////////////////////////////////////

WorkerThreadPool::~WorkerThreadPool()
{
    TiDebugScope( WorkerThreadPool::Dtor )

	// If we are not initialized, no need to cleanup
	if( !m_fInit )
    {
		return;
    }

	// Signal shutdown
	SetEvent( m_hShutdown );

	//Make sure that both events have been thrown, this signifies proper shutdown, not just being "finished"
	for (unsigned int i=0; i<m_cThreads; i++)
		if ((WAIT_TIMEOUT==WaitForSingleObject(m_rgThreadParams[i].rgEvents[EVENTS_FINISHED],1000))||
			(WAIT_TIMEOUT==WaitForSingleObject(m_rgThreadParams[i].rgEvents[EVENTS_TRIGGER],1000)))
			if (NULL!=m_rghThreads[i])
            {
                TiDebugMsg( "Forcibly terminating a thread - This is VERY bad, is worker thread stupid?" );
                TiAssert( false );
				TerminateThread(m_rghThreads[i],-1);
            }

    // TBD - Add WFMO on thread handles

	//Close thread handles and free thread list
	if (NULL!=m_rghThreads){
		for (unsigned int i=0; i<m_cThreads; i++)
			CloseHandle(m_rghThreads[i]);
		delete [] m_rghThreads;
	}//endif

	//Close trigger and shutdown events, delete thread data and then free parameter structure list
	if (NULL!=m_rgThreadParams){
		for (unsigned int i=0; i<m_cThreads; i++){
			if (NULL!=m_rgThreadParams[i].rgEvents[EVENTS_TRIGGER])
				CloseHandle(m_rgThreadParams[i].rgEvents[EVENTS_TRIGGER]);
			if (NULL!=m_rgThreadParams[i].rgEvents[EVENTS_FINISHED])
				CloseHandle(m_rgThreadParams[i].rgEvents[EVENTS_FINISHED]);
//			if (NULL!=m_rgThreadParams[i].pData)
//				delete [] m_rgThreadParams[i].pData;
		}//endfor
		delete [] m_rgThreadParams;
	}//endif

	//Free finished events list, no need to close handles since that was done in the parameter structure list; this is a copy
	if (NULL!=m_rghFinishedEvents){
		delete [] m_rghFinishedEvents;
	}//endif

	//Close shutdown event
	if (true==m_fOwnShutdownEvent){
		CloseHandle(m_hShutdown);
	}//endif

}//endmethod

/////////////////////////////////////////////////////////////////////////////
// Init - Store how many threads we have, create all events and event lists, 
// and start all threads.
/////////////////////////////////////////////////////////////////////////////

unsigned int WorkerThreadPool::Init(
    unsigned      cThreads, 
    ThreadFuncPtr pWorkerFunc, 
    HANDLE        hShutdownEvent )
{
    TiDebugScope( WorkerThreadPool::Init )

	// Check parameters or whether we have been initialized before somehow
    TiAssert( !m_fInit )
    TiAssert( NULL != pWorkerFunc )
    TiAssert( 0 != cThreads )
	if( ( m_fInit ) || (NULL == pWorkerFunc) || (0 == cThreads) )
    {
		return m_cThreads; // return number of worker threads
    }

	// Create shutdown event if one is not provided.
    m_fOwnShutdownEvent = (NULL == m_hShutdown);
    if( m_fOwnShutdownEvent )
    {
		m_hShutdown = CreateEvent( NULL, TRUE, FALSE, NULL );
        TiAssert( NULL != m_hShutdown )
        if( NULL == m_hShutdown )
        {
            return m_cThreads;
        }
	}

    // Store number of threads
	m_cThreads = cThreads;

	// Allocate memory for lists
	m_rghThreads = new HANDLE[ m_cThreads ];
    TiAssert( NULL != m_rghThreads );
	
    m_rgThreadParams = new ThreadParam[ m_cThreads ];
	TiAssert( NULL != m_rgThreadParams );
    
    m_rghFinishedEvents = new HANDLE[ m_cThreads ];
    TiAssert( NULL != m_rghFinishedEvents );


	// Populate lists and start threads
	for( unsigned int i = 0; i < m_cThreads; i++ )
    {
        // Create Finished event for this thread (Auto reset, Initially signaled)
        HANDLE hFinishedEvent = CreateEvent( NULL, FALSE, TRUE, NULL );
        TiAssert( NULL != hFinishedEvent )

        // Create Trigger event for this thread (Manual reset, Initially non-sugnaled)
        HANDLE hTriggerEvent = CreateEvent( NULL, TRUE, FALSE, NULL );
        TiAssert( NULL != hTriggerEvent )

        m_rghFinishedEvents[i] = hFinishedEvent;

        m_rgThreadParams[i].rgEvents[ EVENTS_FINISHED ] = hFinishedEvent;
		m_rgThreadParams[i].rgEvents[ EVENTS_TRIGGER ]  = hTriggerEvent;
		m_rgThreadParams[i].rgEvents[ EVENTS_SHUTDOWN ] = m_hShutdown;
		m_rgThreadParams[i].pFunc                       = pWorkerFunc;
		m_rgThreadParams[i].pData                       = NULL;
    	
        unsigned uID = 0;
		m_rghThreads[i] = 
            (HANDLE)_beginthreadex( 
                NULL, 
                0, 
                &WorkerThread, 
                (void*)&m_rgThreadParams[i], 
                0, 
                &uID );
        if( 0 == m_rghThreads[i] )
        {
            // fail
        }
	}
	
	// We have successfully initialized	
	m_fInit = true;

	return m_cThreads; // Return number of threads
}

/////////////////////////////////////////////////////////////////////////////
// WorkerThread - The worker thread which wraps the user worker function.
/////////////////////////////////////////////////////////////////////////////

unsigned __stdcall WorkerThreadPool::WorkerThread(
     void* pParam )
{
	// If parameter pointer is NULL then shutdown
    TiAssert( pParam != NULL );
	if( NULL == pParam )
    {
        return( E_FAIL );
    }

	// Cast back the parameters
	HANDLE* rgEvents; 
	rgEvents = ((ThreadParam*)pParam)->rgEvents;

	DWORD dwReturn=0; //temp return value from worker function
	DWORD dwObject=0; //signaled object
	while (true){
		//Wait to be triggered or shutdown
		dwObject=WaitForMultipleObjects(2,&rgEvents[0],false,INFINITE);
		if (EVENTS_SHUTDOWN==(dwObject-WAIT_OBJECT_0))
			break;
		//Reset the trigger
		ResetEvent(rgEvents[EVENTS_TRIGGER]);
		//Do work
		dwReturn= ((ThreadParam*)pParam)->pFunc(((ThreadParam*)pParam)->pData,rgEvents[EVENTS_SHUTDOWN]);
		//Signal finished
		SetEvent(rgEvents[EVENTS_FINISHED]);
	}//endwhile

	//We are shutting down, trigger both events when done
	SetEvent(rgEvents[EVENTS_FINISHED]);
	SetEvent(rgEvents[EVENTS_TRIGGER]);

	ExitThread(S_OK);
	return S_OK;  //Success

}//endmethod

/////////////////////////////////////////////////////////////////////////////
// DoWork - Assign work to one of the available threads in the thread pool.
// This operation blocks until the task has been assigned to an available 
// thread.  If no thread is available, the task blocks until one is.
/////////////////////////////////////////////////////////////////////////////

HRESULT WorkerThreadPool::DoWork( void* pData )
{
	// Check if we have been initialized
    TiAssert( m_fInit );
	if( !m_fInit ) return E_FAIL;

	// Wait for any thread to become available
	DWORD dwRet =  WaitForMultipleObjects( m_cThreads, m_rghFinishedEvents, FALSE, INFINITE );
    if( (WAIT_OBJECT_0 < dwRet ) || (dwRet > (WAIT_OBJECT_0 + m_cThreads - 1)) )
    {
        TiDebugMsg( "WorkerThreadPool::DoWork - Failed, thread looks available becuase it's dead" );
		return S_FALSE;
    }
	DWORD dwIndex = dwRet - WAIT_OBJECT_0;

	// Shutdown time
	if( WAIT_OBJECT_0 == WaitForSingleObject( m_hShutdown, 0 ) )
    {
        TiDebugMsg( "WorkerThreadPool::DoWork - Failed, been signaled to shutdown" );
		return S_FALSE;
    }

	// Reset the finished event on this thread so we know when it is done
	ResetEvent(m_rghFinishedEvents[dwIndex]);

	//Delete previous data used by this thread
//	if (NULL!=m_rgThreadParams[dIndex].pData){
        // TBD: Come back and fix this.  Calling delete, let alone delete[], on a void* isn't going to cut it.  
        //      It's possible that a object with a virtual destructor might work, but what's a void* know of 
        //      vtables.  Sean is investigating, maybe RTTI makes this work but that's too expensive when there
        //      are alternatives such as the thread funcs stack, or using a base data class with a virtual
        //      destructor.
        //          
		// delete [] m_rgThreadParams[dIndex].pData;
		// m_rgThreadParams[dIndex].pData=NULL;
//	}//enidf

	//Assign new data for thread to process
	m_rgThreadParams[dwIndex].pData=pData;

	//Signal thread to start processing
	SetEvent(m_rgThreadParams[dwIndex].rgEvents[EVENTS_TRIGGER]);

	return S_OK;  //Success
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\threadpool\StdAfx.h ===
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__263169A0_2415_407A_9AC7_F176D6E5CFF2__INCLUDED_)
#define AFX_STDAFX_H__263169A0_2415_407A_9AC7_F176D6E5CFF2__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

//#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers


// TODO: reference additional headers your program requires here

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__263169A0_2415_407A_9AC7_F176D6E5CFF2__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\threadpool\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_threadpool_none_12.4.56.0_none_a6f868bb6b63459c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=threadpool
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.manifest
XP_MANIFEST_PATH=manifests\x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.cat
XP_CATALOG_PATH=manifests\x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.cat
XP_PAYLOAD_PATH=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=threadpool,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\threadpool\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_threadpool_none_12.4.56.0_none_a6f868bb6b63459c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=threadpool
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.manifest
XP_MANIFEST_PATH=manifests\x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.cat
XP_CATALOG_PATH=manifests\x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c.cat
XP_PAYLOAD_PATH=x86_threadpool_no-public-key_12.4.56.0_x-ww_6fd4c11c
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=threadpool,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\AnsiBstr.h ===
/*****************************************************************************

Copyright (C) Microsoft Corporation.  All rights reserved.

Module Name:

    AnsiBstr.h

Abstract:

    

Author:

    Josh Poley (jpoley) 1-1-1999

Revision History:

*****************************************************************************/

#ifndef _ANSIBSTR_H_
#define _ANSIBSTR_H_

class AnsiBstr
    {
    public:
        PCHAR astr;
        BSTR bstr;

    public:
        AnsiBstr();
        AnsiBstr(BSTR b);
        AnsiBstr(PCHAR a);

        void SetStr(BSTR b);
        void SetStr(PCHAR a);

        operator PCHAR(void) const { return astr; }
        operator BSTR(void) const { return bstr; }


        ~AnsiBstr();
    };

extern PCHAR CreateAnsiFromBstr(BSTR bstr);
extern BSTR CreateBstrFromAnsi(const char *pszText);
extern BSTR CreateBstrFromAnsi(const char *pszText, size_t length);
extern char* Unicode2AnsiHack(unsigned short *str);
extern char* Ansi2UnicodeHack(char *str);
extern char* Ansi2UnicodeHack(char *str, size_t length);

#endif // _ANSIBSTR_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\report_i.c ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 5.03.0279 */
/* at Wed Aug 20 10:25:49 2003
 */
/* Compiler settings for report.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if !defined(_M_IA64) && !defined(_M_AXP64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_IReport,0x978B4FEE,0x5325,0x4743,0xB4,0xB7,0x25,0x8B,0x84,0xBF,0x0D,0xD7);


MIDL_DEFINE_GUID(IID, IID_IReport2,0x4930F57F,0x2B0A,0x418f,0x8F,0x16,0x31,0xCE,0xD4,0x93,0xC7,0x04);


MIDL_DEFINE_GUID(IID, IID_IMonitor,0x978B4FEE,0x5325,0x4743,0xB4,0xB7,0x25,0x8B,0x84,0xBF,0x0D,0xD8);


MIDL_DEFINE_GUID(IID, IID_ITextFile,0xB69B9BCE,0x81CE,0x400D,0x90,0x16,0x9D,0xCE,0x9F,0x5C,0x8A,0x02);


MIDL_DEFINE_GUID(IID, IID_IRegDB,0xF0F54A4C,0x1E29,0x42F2,0xA6,0xC8,0x39,0x2E,0x1F,0x10,0x5D,0xD7);


MIDL_DEFINE_GUID(IID, IID_IHealthDB,0xE23C217F,0x4783,0x42DA,0xB7,0xDE,0x1F,0x73,0x7B,0x59,0x7F,0x3F);


MIDL_DEFINE_GUID(IID, LIBID_ReportLib,0xCEF1FEA7,0x1E01,0x4EFC,0xB3,0x90,0x57,0x1F,0x90,0x8F,0x3A,0x65);


MIDL_DEFINE_GUID(CLSID, CLSID_Monitor,0x336FCE5B,0xD4ED,0x47CF,0xBA,0x17,0x09,0x4C,0x4D,0xBA,0x46,0x12);


MIDL_DEFINE_GUID(CLSID, CLSID_TextFile,0x1FFF0E0A,0x2F54,0x4F1E,0xB3,0xE5,0x0D,0x06,0xEC,0x72,0x4D,0x27);


MIDL_DEFINE_GUID(CLSID, CLSID_RegDB,0xBF95B8F1,0xADD4,0x42A5,0x9F,0xAB,0xB5,0x87,0xD9,0x3B,0xDE,0x50);


MIDL_DEFINE_GUID(CLSID, CLSID_HealthDB,0xC58B2E86,0xAA4B,0x4E44,0x84,0xC2,0x4E,0x06,0x78,0xF9,0xD2,0xCD);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* !defined(_M_IA64) && !defined(_M_AXP64)*/


#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 5.03.0279 */
/* at Wed Aug 20 10:25:49 2003
 */
/* Compiler settings for report.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win64 (32b run,appending), ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if defined(_M_IA64) || defined(_M_AXP64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_IReport,0x978B4FEE,0x5325,0x4743,0xB4,0xB7,0x25,0x8B,0x84,0xBF,0x0D,0xD7);


MIDL_DEFINE_GUID(IID, IID_IReport2,0x4930F57F,0x2B0A,0x418f,0x8F,0x16,0x31,0xCE,0xD4,0x93,0xC7,0x04);


MIDL_DEFINE_GUID(IID, IID_IMonitor,0x978B4FEE,0x5325,0x4743,0xB4,0xB7,0x25,0x8B,0x84,0xBF,0x0D,0xD8);


MIDL_DEFINE_GUID(IID, IID_ITextFile,0xB69B9BCE,0x81CE,0x400D,0x90,0x16,0x9D,0xCE,0x9F,0x5C,0x8A,0x02);


MIDL_DEFINE_GUID(IID, IID_IRegDB,0xF0F54A4C,0x1E29,0x42F2,0xA6,0xC8,0x39,0x2E,0x1F,0x10,0x5D,0xD7);


MIDL_DEFINE_GUID(IID, IID_IHealthDB,0xE23C217F,0x4783,0x42DA,0xB7,0xDE,0x1F,0x73,0x7B,0x59,0x7F,0x3F);


MIDL_DEFINE_GUID(IID, LIBID_ReportLib,0xCEF1FEA7,0x1E01,0x4EFC,0xB3,0x90,0x57,0x1F,0x90,0x8F,0x3A,0x65);


MIDL_DEFINE_GUID(CLSID, CLSID_Monitor,0x336FCE5B,0xD4ED,0x47CF,0xBA,0x17,0x09,0x4C,0x4D,0xBA,0x46,0x12);


MIDL_DEFINE_GUID(CLSID, CLSID_TextFile,0x1FFF0E0A,0x2F54,0x4F1E,0xB3,0xE5,0x0D,0x06,0xEC,0x72,0x4D,0x27);


MIDL_DEFINE_GUID(CLSID, CLSID_RegDB,0xBF95B8F1,0xADD4,0x42A5,0x9F,0xAB,0xB5,0x87,0xD9,0x3B,0xDE,0x50);


MIDL_DEFINE_GUID(CLSID, CLSID_HealthDB,0xC58B2E86,0xAA4B,0x4E44,0x84,0xC2,0x4E,0x06,0x78,0xF9,0xD2,0xCD);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* defined(_M_IA64) || defined(_M_AXP64)*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\stdafx.h ===
// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently,
// but are changed infrequently

#pragma once

#ifndef STRICT
#define STRICT
#endif

// Modify the following defines if you have to target a platform prior to the ones specified below.
// Refer to MSDN for the latest info on corresponding values for different platforms.
#ifndef WINVER				// Allow use of features specific to Windows 95 and Windows NT 4 or later.
#define WINVER 0x0400		// Change this to the appropriate value to target Windows 98 and Windows 2000 or later.
#endif

#ifndef _WIN32_WINNT		// Allow use of features specific to Windows NT 4 or later.
#define _WIN32_WINNT 0x0400	// Change this to the appropriate value to target Windows 2000 or later.
#endif						

#ifndef _WIN32_WINDOWS		// Allow use of features specific to Windows 98 or later.
#define _WIN32_WINDOWS 0x0410 // Change this to the appropriate value to target Windows Me or later.
#endif

#ifndef _WIN32_IE			// Allow use of features specific to IE 4.0 or later.
#define _WIN32_IE 0x0400	// Change this to the appropriate value to target IE 5.0 or later.
#endif

#define _ATL_APARTMENT_THREADED
#define _ATL_NO_AUTOMATIC_NAMESPACE

#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS	// some CString constructors will be explicit

// turns off ATL's hiding of some common and often safely ignored warning messages
#define _ATL_ALL_WARNINGS

#include <atlbase.h>

using namespace ATL;

#include <stdio.h>

#include "ti.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\AnsiBstr.cpp ===
/*****************************************************************************

Copyright (C) Microsoft Corporation.  All rights reserved.

Module Name:

    AnsiBstr.cpp

Abstract:

    

Author:

    Josh Poley (jpoley) 1-1-1999

Revision History:

*****************************************************************************/
#include "stdafx.h"
#include "ansibstr.h"

/*****************************************************************************

Routine Description:

    AnsiBstr::AnsiBstr
    Default Constructor

Arguments:

    none

Return Value:

    none

Notes:

*****************************************************************************/
AnsiBstr::AnsiBstr()
    {
    astr = NULL;
    bstr = NULL;
    }

/*****************************************************************************

Routine Description:

    AnsiBstr::AnsiBstr
    Constructor with a BSTR input

Arguments:

    BSTR b - pointer to a null terminated wide char string

Return Value:

    none

Notes:

*****************************************************************************/
AnsiBstr::AnsiBstr(BSTR b)
    {
    astr = CreateAnsiFromBstr(b);
    bstr = CreateBstrFromAnsi(astr);
    }

/*****************************************************************************

Routine Description:

    AnsiBstr::AnsiBstr
    Constructor with a char* input

Arguments:

    PCHAR a - pointer to a null terminated char string

Return Value:

    none

Notes:

*****************************************************************************/
AnsiBstr::AnsiBstr(PCHAR a)
    {
    bstr = CreateBstrFromAnsi(a);
    astr = CreateAnsiFromBstr(bstr);
    }

/*****************************************************************************

Routine Description:

    AnsiBstr::~AnsiBstr
    Destructor

Arguments:

    none

Return Value:

    none

Notes:

*****************************************************************************/
AnsiBstr::~AnsiBstr()
    {
    if(astr) LocalFree(astr);
    if(bstr) SysFreeString(bstr);
    }

/*****************************************************************************

Routine Description:

    AnsiBstr::SetStr
    Changes the values of the strings (deletes old ones if necessary)

Arguments:

    BSTR b - pointer to a null terminated wide char string

Return Value:

    none

Notes:

*****************************************************************************/
void AnsiBstr::SetStr(BSTR b)
    {
    if(astr) LocalFree(astr);
    if(bstr) SysFreeString(bstr);
    astr = CreateAnsiFromBstr(b);
    bstr = CreateBstrFromAnsi(astr);
    }

/*****************************************************************************

Routine Description:

    AnsiBstr::SetStr
    Changes the values of the strings (deletes old ones if necessary)

Arguments:

    PCHAR a - pointer to a null terminated char string

Return Value:

    none

Notes:

*****************************************************************************/
void AnsiBstr::SetStr(PCHAR a)
    {
    if(astr) LocalFree(astr);
    if(bstr) SysFreeString(bstr);
    bstr = CreateBstrFromAnsi(a);
    astr = CreateAnsiFromBstr(bstr);
    }


/*****************************************************************************

Routine Description:

    CreateAnsiFromBstr
    Allocates memory and converts from a BSTR

Arguments:

    BSTR bstr - pointer to a null terminated wide char string

Return Value:

    PCHAR - pointer to the newly allocated string

Notes:

*****************************************************************************/
PCHAR CreateAnsiFromBstr(BSTR bstr)
    {
    if(!bstr) return NULL;

    size_t bstrLen, pszLen;
    PCHAR psz = NULL;

    bstrLen = wcslen(bstr);
    pszLen = bstrLen * sizeof(CHAR);

    psz = (PCHAR)LocalAlloc(LPTR, pszLen + sizeof(CHAR));

    if(!psz) return NULL;

    WideCharToMultiByte(CP_ACP, 0, bstr, (int)bstrLen, psz, (int)pszLen + sizeof(CHAR), NULL, NULL);

    return psz;
    }

/*****************************************************************************

Routine Description:

    CreateBstrFromAnsi
    Allocates memory and converts from a PCHAR

Arguments:

    PCHAR pszText - pointer to a null terminated char string

Return Value:

    BSTR - return pointer to the new string

Notes:

*****************************************************************************/
BSTR CreateBstrFromAnsi(const char *pszText)
    {
    if(!pszText) return NULL;

    size_t TextLen, pszTextLen;

    pszTextLen = strlen(pszText);
    TextLen = pszTextLen * sizeof(WCHAR);

    BSTR pbstr = SysAllocStringByteLen(NULL, (int)TextLen);

    if(!pbstr) return NULL;

    MultiByteToWideChar(CP_ACP, 0, pszText, (int)pszTextLen, pbstr, (int)TextLen + sizeof(WCHAR));

    return pbstr;
    }


/*****************************************************************************

Routine Description:

    CreateBstrFromAnsi
    Allocates memory and converts from a PCHAR

Arguments:

    PCHAR pszText - pointer to a null terminated char string

Return Value:

    BSTR - return pointer to the new string

Notes:

*****************************************************************************/
BSTR CreateBstrFromAnsi(const char *pszText, size_t length)
    {
    if(!pszText) return NULL;

    size_t TextLen, pszTextLen;

    pszTextLen = length;
    TextLen = pszTextLen * sizeof(WCHAR);

    BSTR pbstr = SysAllocStringByteLen(pszText, (UINT)TextLen);

    if(!pbstr) return NULL;

    pbstr = (BSTR)Ansi2UnicodeHack((char*)pbstr, length);

    pbstr[length] = '\0';

    return pbstr;
    }


/*****************************************************************************

Routine Description:

    Ansi2UnicodeHack

    In-place Pseudo Ansi to Unicode (char to wide char) conversion.

Arguments:

    IN char* str - char string to convert to wide char string

Return Value:

    char* - pointer to Unicode string

Note:
    
    Because a bunch of Unicode functions expect a char string to be on an
    even boundry, the returned string may be moved 1 character over.

*****************************************************************************/
char* Ansi2UnicodeHack(char *str, size_t length)
    {
    if(!str) return NULL;

    int align = 0;
    int len = (int)length;

    // put string on an even boundry because some freak put a bunch of ASSERTs
    // that check for even boundries in Unicode functions like 
    // RtlEqualUnicodeString()
    if(((__int64)str & 1) != 0)
        {
        align = 1;
        }

    for(; len>=0; len--)
        {
        str[len*2+align] = str[len];
        str[len*2+align+1] = '\0';
        }

    str += align;

    return (char*)str;
    }

/*****************************************************************************

Routine Description:

    Ansi2UnicodeHack

    In-place Pseudo Ansi to Unicode (char to wide char) conversion.

Arguments:

    IN char* str - char string to convert to wide char string

Return Value:

    char* - pointer to Unicode string

Note:
    
    Because a bunch of Unicode functions expect a char string to be on an
    even boundry, the returned string may be moved 1 character over.

*****************************************************************************/
char* Ansi2UnicodeHack(char *str)
    {
    if(!str) return NULL;

    int align = 0;
    int len = (int)strlen(str)+1;

    // put string on an even boundry because some freak put a bunch of ASSERTs
    // that check for even boundries in Unicode functions like 
    // RtlEqualUnicodeString()
    if(((__int64)str & 1) != 0)
        {
        align = 1;
        }

    for(; len>=0; len--)
        {
        str[len*2+align] = str[len];
        str[len*2+align+1] = '\0';
        }

    str += align;

    return (char*)str;
    }


/*****************************************************************************

Routine Description:

    Unicode2AnsiHack

    In-place Pseudo Unicode to Ansi (wide char to char) conversion.

Arguments:

    IN unsigned short* str - wide char string to convert to char string

Return Value:

    char* - pointer to ANSI string

*****************************************************************************/
char* Unicode2AnsiHack(unsigned short *str)
    {
    if(!str) return NULL;
    char *str2 = (char*)str;

    size_t len = wcslen((const wchar_t *)str)+1;
    for(size_t i=0; i<len; i++)
        {
        str2[i] = str2[i*2];
        }

    return (char*)str;
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\TiDebug.cpp ===
#include "stdafx.h"
#include "tidebug.h"


// Writes data to the debugger.
// author: jpoley
void TiDebug::Print(char* format, ...)
{
    if(!format) return;

    char *szBuffer;
    try
    {
        INT cBuffer = strlen(format) + 4*1024*sizeof(char);
        char *szOverflowMsg = "\n  [...]\n";

        // alloca can throw if no mem on stack
        szBuffer = (char*)_alloca(cBuffer + strlen(szOverflowMsg));

        va_list args;
        va_start(args, format);

        _vsnprintf(szBuffer, cBuffer, format, args);
        OutputDebugStringA(szBuffer);

        va_end(args);
    }
    catch(...)
    {
        OutputDebugStringA(format); // just write out as much as we can
    }
}

// Writes data to the debugger.
void TiDebug::PrintLine(char* format, ...)
{
    if(!format) return;

    char *szBuffer;
    try
    {
        INT cBuffer = strlen(format) + 4*1024*sizeof(char);
        char *szOverflowMsg = "\n  [...]\n";

        // alloca can throw if no mem on stack
        const size_t cbBuffer = cBuffer + strlen(szOverflowMsg) + 1;
        szBuffer = (char*)_alloca(cbBuffer);
        memset(szBuffer, 0, cbBuffer);

        va_list args;
        va_start(args, format);

        // Oacr warning 6053 says not to trust _vsnprintf because it doesn't always null-terminate
        // szBuffer. However, we are (now) following the best-practice outlined at
        // http://msdn.microsoft.com/en-us/library/1kt27hek(VS.80).aspx, so we are fine.
        // TobiasB
        _vsnprintf(szBuffer, cBuffer, format, args);
#pragma warning ( push )
#pragma warning ( disable : 6053 )
        strcat(szBuffer, "\n");
#pragma warning ( pop )
        OutputDebugStringA(szBuffer);

        va_end(args);
    }
    catch(...)
    {
        OutputDebugStringA(format); // just write out as much as we can
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\TiRandom.cpp ===
#include "stdafx.h"


// Fills pb with cb random bytes
void Random(BYTE *pb, INT cb)
{
    for (INT i = 0; i < cb; i++)
    {
      INT r = rand();
      pb[i] ^= (BYTE)r;
      if (i + 1 < cb)
        pb[i + 1] = (BYTE)(r >> 8);
    }
}

BOOL Chance(float nChance)
{
    DWORD dw = 0;
    Random((BYTE*)&dw, 2);
    if (((float)dw / 65536) < nChance)
    {
        return TRUE;
    }
    return FALSE;
}

// gets a random number from min to max, inclusive
INT RandRange(int min, int max)
{
    DWORD dw = 0;
    Random((BYTE*)&dw, 2);
    return (INT)(((float)dw / 65536) * (max - min + 1)) + min;
}

INT RandRange(INT max)
{
    return RandRange(0, max);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\TestInterLib.cpp ===
// TestInterLib.cpp : Implementation of DLL Exports.

#include "stdafx.h"
#include "ti.h"
#include "ansibstr.h"
#include "svector.h"
#include "tidebug.h"
#include "report.h"


HRESULT TestInterLib::Initialize()
{
    HRESULT hr = S_OK;

    TiDebug::Print("TestInter.Initialize() called\n");

    m_pti = TestImpl::Make();
    if (m_pti)
    {
        hr = m_pti->TestInitialize();
    }
    else
    {
        TiDebug::Print("TestInter.Initialize() -- TestImpl::Make() returned NULL.\n");
        hr = E_FAIL;
    }

    return hr;
}

HRESULT TestInterLib::StartTest(BSTR ReportObject, BSTR TestList, BSTR Settings)
{
    USES_CONVERSION;

    HRESULT hr = S_OK;

    TiDebug::Print("TestInter::StartTest() entered.\n");

    if (!m_pti)
    {
        TiDebug::Print("TestInter.StartTest() -- TestInterface is NULL.  Can not call TestStart()\n");
        return E_FAIL;
    }

    char *reportObject = W2A(ReportObject);
    char *testList = W2A(TestList);
    char *settings = W2A(Settings);

	IReport2 *pReport2 = NULL;

    IReport *pReport = NULL;

    if (wcslen(ReportObject) > 0)
    {
        // load the IDispatch interface from the object
        CLSID groupID;
        memset(&groupID, 0, sizeof(groupID));

        // Using the object name, retreive the CLSID from the Registry
        hr = CLSIDFromProgID(ReportObject, &groupID);
        if(SUCCEEDED(hr))
        {
            IUnknown *punk = NULL;
            hr = CoCreateInstance(groupID, NULL, CLSCTX_INPROC_SERVER, IID_IUnknown, (void**)&punk);
            if(SUCCEEDED(hr))
            {
                hr = punk->QueryInterface(IID_IReport, (void**)&pReport);
                if (SUCCEEDED(hr))
                {
                    pReport->AddRef();
                }
                punk->Release();

				hr = punk->QueryInterface(IID_IReport2, (void**)&pReport2);
                if (SUCCEEDED(hr))
                {
                    pReport2->AddRef();
					
					
                }
                punk->Release();

            }
        }
        else
        {
            TiDebug::Print("Failed to find reporting object, \"%S\".  Please make sure that it has ben regsrv32'd.\n", ReportObject);
        }
    }

    if (SUCCEEDED(hr))
    {
        SVector<char*> vctszTests;
        GetLines(testList, vctszTests);

        SVector<char*> vctszSettings;
        GetLines(settings, vctszSettings);

        // Do not delete vctszSettings until tis is no longer used
        TiSettings tis(vctszSettings);

		// setbuild number
		char*  pszBuildNO (tis.getSetting("Global Data","BuildNo")->toString());
		int IterationNO= tis.getSetting("Global Data","IterationNo")->toInt();
		int charlen=(int)strlen(pszBuildNO);
		int bstrlen= charlen*sizeof(WCHAR);
		BSTR bstrBuildNo = SysAllocStringByteLen(NULL,bstrlen);
		if(!bstrBuildNo)
			return S_FALSE;
		MultiByteToWideChar(CP_ACP,0,pszBuildNO,charlen,bstrBuildNo,bstrlen+sizeof(WCHAR));
		
		pReport2->SetBuild(bstrBuildNo,IterationNO);
        hr = m_pti->TestStart(pReport, vctszTests, tis);

        vctszSettings.DeleteAll();

        vctszTests.DeleteAll();

        pReport->Release();
    }

    return hr;
}

HRESULT TestInterLib::Uninitialize()
{
    HRESULT hr = S_OK;

    TiDebug::Print("TestInter.Uninitialize() called\n");

    if (m_pti)
    {
        hr = m_pti->TestUninitialize();
        delete m_pti;
        m_pti = NULL;
    }
    else
    {
        TiDebug::Print("TestInter.Uninitialize() -- TestInterface is NULL.\n");
        hr = S_FALSE;
    }

    return hr;
}

HRESULT TestInterLib::QueryTests(BSTR* wcTestList)
{
    TiDebug::Print("TestInter.QueryTests() called\n");

    SVector<char*> vctszTests;

    TestInterface *ti = TestImpl::Make();
    ti->TestQuery(vctszTests);
    delete ti;

    //Length of each test + 2 per ", " + 1 for the null terminator
    INT cTestBuf = (vctszTests.Count() - 1) * 2 + 1;
    for (INT i = 0; i < vctszTests.Count(); i++)
    {
        cTestBuf += (INT)strlen(vctszTests[i]);
    }

    char *szTestBuf = new char[cTestBuf];

    szTestBuf[0] = 0;
    for (INT i = 0; i < vctszTests.Count(); i++)
    {
        strcat(szTestBuf, vctszTests[i]);
        if (i != vctszTests.Count() - 1)
        {
            strcat(szTestBuf, ", ");
        }
    }

    *wcTestList = CreateBstrFromAnsi(szTestBuf);

    delete szTestBuf;

    return S_OK;
}



HRESULT TestInterLib::Terminate()
{
    TiDebug::Print("TestInter.Terminate() called\n");

    if (m_pti)
    {
        m_pti->TestTerminate();
    }

    return S_OK;
}

// CountLines returns the number of \n delimited lines that have non-whitespace characters on them
void TestInterLib::GetLines(char *sz, SVector<char*> &vctszLines)
{
    if (!sz)
    {
        return;
    }

    while (*sz)
    {
        char *szT = sz;

        while (*szT == ' ' || *szT == '\t') szT++;

        sz = strchr(sz, '\n');

        if (sz == NULL)
        {
            if (*szT)
            {
                char *szNew = new char[strlen(szT) + 1];
                memcpy(szNew, szT, strlen(szT));
                szNew[strlen(szT)] = 0;
                vctszLines.Add(szNew);
            }

            break;
        }

        if (*szT != 0 && *szT != '\n')
        {
            char *szNew = new char[sz - szT + 1];
            memcpy(szNew, szT, sz - szT);
            szNew[sz - szT] = 0;
            vctszLines.Add(szNew);
        }

        sz++;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\Ti.cpp ===
#include "stdafx.h"
#include "ti.h"
#include "ansibstr.h"

// Returns a newly allocated copy of sz.  Caller should free with delete[].
char *tistrdup(const char *sz)
{
    if (!sz) return NULL;

    int nLen = strlen(sz);
    char *szNew = new char[nLen + 1];
    memcpy(szNew, sz, nLen + 1);
    return szNew;
}

// This is a wrapper of pReport->Log() to support variable number of parameters for the notes field
HRESULT TiLog(IReport *pReport, ULONG level, BSTR category, BSTR subcategory, BSTR variation, BSTR notes, ...)
{
    HRESULT hr = S_OK;

    if(pReport)
    {
        const INT cBuffer = 2048;
        WCHAR wszBuffer[cBuffer];
        BSTR bstrNotes = NULL;

        if (notes)
        {
            va_list pArgs;
            va_start(pArgs, notes);

            _vsnwprintf(wszBuffer, cBuffer, notes, pArgs);
            bstrNotes = SysAllocString(wszBuffer);
        }
        else
        {
            bstrNotes = SysAllocString(L"");
        }

        hr = pReport->Log(level, category, subcategory, variation, bstrNotes);

        SysFreeString(bstrNotes);
    }
    else
    {
        hr = S_FALSE;
    }

    return hr;
}

// This is the same as TiLog(IReport*, ULONG, BSTR, BSTR, BSTR, BSTR, ...)
// except that it takes char*'s instead of BSTR's.
HRESULT TiLogV(IReport *pReport, ULONG level, char *category, char *subcategory, char *variation, char *notes, va_list args )
{
    HRESULT hr = S_OK;

    if(pReport)
    {
        const INT cBuffer = 2048;
        char szBuffer[cBuffer];

        if (notes)
        {
            _vsnprintf(szBuffer, cBuffer, notes, args);
        }

        // NULLs will pass through these functions
        BSTR bstrCategory = category ? CreateBstrFromAnsi(category) : CreateBstrFromAnsi("");
        BSTR bstrSubcategory = subcategory ? CreateBstrFromAnsi(subcategory) : CreateBstrFromAnsi("");
        BSTR bstrVariation = variation ? CreateBstrFromAnsi(variation) : CreateBstrFromAnsi("");
        // We don't want to convert szBuffer if it wasn't filled in
        BSTR bstrNotes = notes ? CreateBstrFromAnsi(szBuffer) : CreateBstrFromAnsi("");

        hr = pReport->Log(level, bstrCategory, bstrSubcategory, bstrVariation, bstrNotes);

        SysFreeString(bstrCategory);
        SysFreeString(bstrSubcategory);
        SysFreeString(bstrVariation);
        SysFreeString(bstrNotes);
    }
    else
    {
        hr = S_FALSE;
    }

    return hr;
}

// This is the same as TiLog(IReport*, ULONG, BSTR, BSTR, BSTR, BSTR, ...)
// except that it takes char*'s instead of BSTR's.
HRESULT TiLog(IReport *pReport, ULONG level, char *category, char *subcategory, char *variation, char *notes, ...)
{
    HRESULT hr = S_OK;

    if(pReport)
    {
        va_list pArgs;
        va_start(pArgs, notes);
        return( TiLogV( pReport, level, category, subcategory, variation, notes, pArgs ) );
    }
    else
    {
        hr = S_FALSE;
    }

    return hr;
}

// TiLogger
TiLogger::TiLogger( IReport *pReport )
:   m_pReport( pReport )
{
    *m_szCategory    = '\0';
    *m_szSubCategory = '\0';
    *m_szVariation   = '\0';
}
    
void TiLogger::SetCategory( char* pszCategory )
{
    strncpy( m_szCategory, pszCategory, kMaxNameLen-1 );
    m_szCategory[ kMaxNameLen-1 ] = '\0';
}

void TiLogger::SetSubCategory( char* pszSubCategory )
{
    strncpy( m_szSubCategory, pszSubCategory, kMaxNameLen-1 );
    m_szSubCategory[ kMaxNameLen-1 ] = '\0';
}

void TiLogger::SetVariation( char* pszVariation )
{
    strncpy( m_szVariation, pszVariation, kMaxNameLen-1 );
    m_szVariation[ kMaxNameLen-1 ] = '\0';
}

HRESULT TiLogger::Report( ULONG level, char *notes, ... )
{
    HRESULT hr = S_OK;

    if(m_pReport)
    {
        va_list pArgs;
        va_start(pArgs, notes);
        return( TiLogV( m_pReport, level, m_szCategory, m_szSubCategory, m_szVariation, notes, pArgs ) );
    }
    else
    {
        hr = S_FALSE;
    }

    return hr;
}

#define IMPLEMENT_SPECIFIC_REPORT( _name_, _level_ )                        \
    HRESULT TiLogger::##_name_( char* notes, ... )                          \
    {                                                                       \
        HRESULT hr = S_OK;                                                  \
        if( m_pReport )                                                     \
        {                                                                   \
            va_list pArgs;                                                  \
            va_start(pArgs, notes);                                         \
            return( TiLogV( m_pReport, ##_level_,                           \
                           m_szCategory, m_szSubCategory, m_szVariation,    \
                           notes, pArgs ) );                                \
        }                                                                   \
        else                                                                \
        {                                                                   \
            hr = S_FALSE;                                                   \
        }                                                                   \
        return hr;                                                          \
    }
 
IMPLEMENT_SPECIFIC_REPORT( Pass, REPORTLOG_PASS )
IMPLEMENT_SPECIFIC_REPORT( Fail, REPORTLOG_FAIL )
IMPLEMENT_SPECIFIC_REPORT( Info, REPORTLOG_INFO )
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_tilib_none_12.4.56.0_none_f2ede7cc7af2ca3a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=tilib
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.manifest
XP_MANIFEST_PATH=manifests\x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.cat
XP_CATALOG_PATH=manifests\x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.cat
XP_PAYLOAD_PATH=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=tilib,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\TiSettings.cpp ===
#include "stdafx.h"
#include "tisettings.h"


TiKeyValue::TiKeyValue(IN char *szKeyValue)
{
    char *szEq = strchr(szKeyValue, '=');
    if (szEq)
    {
        m_szKey = new char[szEq - szKeyValue + 1];
        if (m_szKey)
        {
            strncpy(m_szKey, szKeyValue, szEq - szKeyValue);
            m_szKey[szEq - szKeyValue] = 0;
            m_szValue = new char[strlen(szKeyValue) - strlen(m_szKey)];
            if (m_szValue)
            {
                strcpy(m_szValue, szEq + 1);
            }
            else
            {
                delete m_szKey;
                m_szKey = NULL;
            }
        }
        else
        {
            m_szValue = "";
        }
    }
    else
    {
        m_szKey = NULL;
        m_szValue = NULL;
    }
}

TiKeyValue::TiKeyValue(IN char *szKey, IN char *szValue)
{
    m_szKey = tistrdup(szKey);
    m_szValue = tistrdup(szValue);
}

TiKeyValue::TiKeyValue(IN TiKeyValue &tkv)
{
    m_szKey = tistrdup(tkv.m_szKey);
    m_szValue = tistrdup(tkv.m_szValue);
}

TiKeyValue::~TiKeyValue()
{
    delete [] m_szKey;
    delete [] m_szValue;
}

TiKeyValue &TiKeyValue::operator=(IN const TiKeyValue &tkv)
{
    if (&tkv == this) return *this;
    delete [] m_szKey;
    delete [] m_szValue;
    m_szKey = tistrdup(tkv.m_szKey);
    m_szValue = tistrdup(tkv.m_szValue);
    return *this;
}

bool TiKeyValue::toBool()
{
    bool fLc = !strcmp(m_szValue, "y") || !strcmp(m_szValue, "yes") || !strcmp(m_szValue, "true") || !strcmp(m_szValue, "t");
    bool fUc = !strcmp(m_szValue, "Y") || !strcmp(m_szValue, "YES") || !strcmp(m_szValue, "TRUE") || !strcmp(m_szValue, "T");
    return fLc || fUc || strcmp(m_szValue, "1") == 0;
}

unsigned int TiKeyValue::toIp()
{
    if (!m_szValue || m_szValue[0] == 0) return 0;

    unsigned int nIp = 0;

    if (m_szValue[0] == '0' && (m_szValue[1] == 'x' || m_szValue[1] == 'X') && ((strlen(m_szValue) == 10) || (strchr(m_szValue, ':') - m_szValue == 10)))
    {
        char szT[9];
        strncpy(szT, m_szValue+2, 8);
        szT[min(8, strlen(m_szValue)-2)] = 0;
        // The IP is in Hex form
        nIp = toDwordFromHexStr(szT);
    }
    else
    {
        bool fLikeIp = true;
        int nOctets = 1;
        unsigned int n = strlen(m_szValue);
        for (unsigned int i = 0; i < n && m_szValue[i] != ':'; i++)
        {
            if(m_szValue[i] == '.')
            {
                nOctets++;
            }
            else if ((m_szValue[i] < '0' || m_szValue[i] > '9'))
            {
                fLikeIp = false;
                break;
            }
        }

        if (fLikeIp && nOctets == 4)
        {
            // The IP is in decimal dot form
            char *szIp = m_szValue;
            nIp = atoi(szIp);
            szIp = strchr(szIp, '.') + 1;
            nIp |= szIp ? atoi(szIp) << 8 : 0;
            szIp = strchr(szIp, '.') + 1;
            nIp |= szIp ? atoi(szIp) << 16 : 0;
            szIp = strchr(szIp, '.') + 1;
            nIp |= szIp ? atoi(szIp) << 24 : 0;
        }
        else
        {
            // We don't do DNS lookups right now because code to do so is very different in the xbox tree vs. the xonline tree
            nIp = 0;
        }
    }

    return nIp;
}

unsigned short TiKeyValue::toPort()
{
    if (!m_szValue || m_szValue[0] == 0) return 0;

    unsigned short nPort = 0;
    char *szT = m_szValue;

    while (*szT && *szT != ':')
    {
        szT++;
    }

    if (*szT)
    {
        nPort = (unsigned short)atoi(szT+1);
    }

    return nPort;
}

unsigned __int64 TiKeyValue::toQwordFromHexStr(char *sz)
{
    char *szHex = sz;

    if (strstr(szHex, "0x") == szHex || strstr(szHex, "0X") == szHex)
    {
        szHex += 2;
    }

    if (strlen(szHex) == 8)
    {
        unsigned int nLow;
        sscanf(szHex, "%x", &nLow);
        return (unsigned __int64)nLow;
    }
    else if (strlen(szHex) == 16)
    {
        unsigned int nLow;
        unsigned int nHigh;
        sscanf(szHex, "%x%x", &nHigh, &nLow);
        return (((unsigned __int64)nHigh) << 32) | nLow;
    }
    else
    {
        return 0;
    }
}

void TiKeyValue::toList(IN OUT SVector<TiKeyValue> &vcttkv, IN char cSeparator)
{
    char szSeparators[2];
    szSeparators[0] = cSeparator;
    szSeparators[1] = 0;
    toList(vcttkv, szSeparators);
}

void TiKeyValue::toList(IN OUT SVector<TiKeyValue> &vcttkv, IN char *szSeparators)
{
    if (strlen(szSeparators))
    {
        char *szNew = tistrdup(m_szValue);
        if (szNew)
        {
            char *sz = szNew;
            char *szNext = szNew;

            while (sz)
            {
                szNext = strchr(sz, szSeparators[0]);
                for (UINT i = 1; i < strlen(szSeparators); i++)
                {
                    char *szT = strchr(sz, szSeparators[i]);
                    if (szT)
                    {
                        szNext = min(szT, szNext);
                    }
                }

                if (szNext)
                {
                    char *szEnd = szNext;
                    while (szEnd-1 > sz && (*(szEnd-1) == ' ' || *(szEnd-1) == '\t')) szEnd--;
                    *szEnd = 0;
                    char szT[11];
                    sprintf(szT, "%d", vcttkv.Count());
                    vcttkv.Add(TiKeyValue(szT, sz));
                    sz = szNext + 1;
                }
                else
                {
                    if (strlen(sz))
                    {
                        char szT[11];
                        sprintf(szT, "%d", vcttkv.Count());
                        vcttkv.Add(TiKeyValue(szT, sz));
                    }
                    sz = NULL;
                }

                while (sz && (*sz == ' ' || *sz == '\t')) sz++;
            }

            delete [] szNew;
        }
    }
}

TiTable::TiTable(IN SVector <char*> &vctszLines)
{
    if (vctszLines.Count() == 0)
    {
        m_szName = NULL;
    }
    else
    {
        m_szName = new char[strlen(vctszLines[0]) - 1];
        strncpy(m_szName, vctszLines[0] + 1, strlen(vctszLines[0]) - 2);
        m_szName[strlen(vctszLines[0]) - 2] = 0;
        for (int i = 1; i < vctszLines.Count(); i++)
        {
            TiKeyValue *ptkv = new TiKeyValue(vctszLines[i]);
            if (ptkv)
            {
                if (ptkv->getKey())
                {
                    m_titkv.Add(ptkv);
                }
                else
                {
                    delete ptkv;
                }
            }
        }
    }
}

TiTable::~TiTable()
{
    m_titkv.DeleteAll();

    delete m_szName;
}

TiKeyValue *TiTable::operator[](IN int i)
{
    if (i < 0 || i > m_titkv.Count())
    {
        return NULL;
    }

    return m_titkv[i];
}

TiKeyValue *TiTable::operator[](IN char *szKey)
{
    if (!szKey)
    {
        return NULL;
    }

    for (int i = 0; i < m_titkv.Count(); i++)
    {
        if (!_stricmp(szKey, m_titkv[i]->getKey()))
        {
            return m_titkv[i];
        }
    }

    return NULL;
}

char *TiSettings::c_szGeneralSectionName = "Global Data";
char *TiSettings::c_szTestGeneralSectionName = "Group Global Data";

TiSettings::TiSettings(IN SVector<char*> &vctszLines)
{
    int i = 0;
    while (i < vctszLines.Count())
    {
        SVector<char*> vctszTable;
        do
        {
            if (strchr(vctszLines[i], '#'))
                strchr(vctszLines[i], '#')[0] = 0;
            vctszTable.Add(vctszLines[i]);

            i++;
        } while (i < vctszLines.Count() && vctszLines[i][0] != '[');

        m_vctttbl.Add(new TiTable(vctszTable));

        vctszTable.Clear();
    }
}

TiSettings::~TiSettings()
{
    m_vctttbl.DeleteAll();
}

TiKeyValue *TiSettings::getSetting(char *szTest, char *szKey)
{
    TiKeyValue *ptikv = NULL;

    TiTable *pttbl = NULL;
    if (szTest)
    {
        pttbl = (*this)[szTest];
        if (pttbl)
        {
            ptikv = (*pttbl)[szKey];
        }
    }

    if (!ptikv)
    {
        pttbl = (*this)[c_szTestGeneralSectionName];
        if (pttbl)
        {
            ptikv = (*pttbl)[szKey];
        }

        if (!ptikv)
        {
            pttbl = (*this)[c_szGeneralSectionName];
            if (pttbl)
            {
                ptikv = (*pttbl)[szKey];
            }
        }
    }

    return ptikv;
}

TiKeyValue *TiSettings::getSetting(char *szKey)
{
    return getSetting(NULL, szKey);
}

TiKeyValue *TiSettings::getServerIp(IN char *szServer)
{
    TiKeyValue *ptkvServer = 0;

    char *szT = new char[strlen(szServer) + 8];
    strcpy(szT, "server_");
    strcat(szT, szServer);

    TiTable *pttbl = (*this)[c_szGeneralSectionName];

    for (int i = 0; i  < pttbl->Count(); i++)
    {
        if (!_stricmp((*pttbl)[i]->getKey(), szT))
        {
            ptkvServer = (*pttbl)[i];
        }
    }

    delete [] szT;

    return ptkvServer;
}

void TiSettings::getServerIpList(SVector<TiKeyValue*> &vcttkv)
{
    TiTable *pttbl = (*this)[c_szGeneralSectionName];

    for (int i = 0; i < pttbl->Count(); i++)
    {
        TiKeyValue *tkv = (*pttbl)[i];
        if (strstr(tkv->getKey(), "server_") == tkv->getKey())
        {
            vcttkv.Add(tkv);
        }
    }
}

TiTable *TiSettings::operator[](IN int i)
{
    if (i < 0 || i > m_vctttbl.Count())
    {
        return NULL;
    }

    return m_vctttbl[i];
}

TiTable *TiSettings::operator[](IN char *szTable)
{
    if (!szTable)
    {
        return NULL;
    }

    for (int i = 0; i < m_vctttbl.Count(); i++)
    {
        if (!_stricmp(szTable, m_vctttbl[i]->getName()))
        {
            return m_vctttbl[i];
        }
    }

    return NULL;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\TiLib\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_tilib_none_12.4.56.0_none_f2ede7cc7af2ca3a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=tilib
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.manifest
XP_MANIFEST_PATH=manifests\x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.cat
XP_CATALOG_PATH=manifests\x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106.cat
XP_PAYLOAD_PATH=x86_tilib_no-public-key_12.4.56.0_x-ww_0c33e106
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=tilib,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\FriendsPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Presence;

namespace WSHelper
{
	public class FriendsList : FriendsInfo
	{
		public uint ValidSeconds;
		public void CopyFrom(FriendsInfo f)
		{
			this.OnlineFriends = f.OnlineFriends;
			this.OfflineFriends = f.OfflineFriends;
		}
	}

	public class FriendsPrime : Presence.Presence
	{
		CallStatistics cs = null;

		public FriendsPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Presence/Presence.asmx");
		}

		protected FriendsPrime(String url) {}
		protected FriendsPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Presence functions (1)
		#region public FriendsList GetFriends(byte[] WebID, string GamerTag)
		[OneWayAttribute()]
		public void CBGetFriends(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetFriends(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetFriends failed.", e);
			}
			obj.Set();
		}

		public FriendsList GetFriends(byte[] WebID, string GamerTag)
		{
			FriendsList res = new FriendsList();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetFriends);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetFriends(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Presence_GetFriends, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((FriendsInfo) cbres.res);
			return res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\Helpers.cs ===
using System;
using System.Collections;
using System.Data;
using System.Security.Cryptography.X509Certificates;
using System.Xml;
using System.Globalization;
using CAPICOM;
using System.Text;

using GeneralInfo;
using Messaging;
using Presence;
using Query;
using Stats;

namespace WSHelper
{
	/// <summary>
	/// Summary description for Helpers.
	/// </summary>
	public class Helpers
	{

		public Helpers()
		{
			//
			// TODO: Add constructor logic here
			//
		}

		#region Conversion routines and related
		public static APIInfo GetAPIInfo(string name)
		{
			string s = name.ToLower();
			int i = s.IndexOf('.');
			while(i > -1)
			{
				s = ((i > 0) ? s.Substring(0, i) : "") + "_" + ((i + 1 < s.Length) ? s.Substring(i + 1) : "");
				i = s.IndexOf('.', i);
			}
			for(i = 0; i < (int) APIInfo.Count; ++i)
			{
				APIInfo a = (APIInfo) i;
				if(a.ToString().ToLower() == s)
				{
					return a;
				}
			}
			return APIInfo.Count;
		}


		public static bool GetValue(string a, bool defValue)
		{
			if(a == null)
				return defValue;

			string t = a.ToLower();

			switch(t)
			{
				case "yes":
				case "true":
				case "1":
					return true;
				case "no":
				case "false":
				case "0":
					return false;
				default:
					return defValue;
			};
		}
		public static bool GetValue(XmlAttribute a, bool defValue)
		{
			if(a == null)
				return defValue;
			return GetValue(a.Value, defValue);
		}

		public static string GetValue(XmlAttribute a, string defValue)
		{
			if(a == null)
				return defValue;
			return a.Value;
		}

		public static uint GetValue(string s, uint defValue)
		{
			if(s == null)
				return defValue;
			string t = s.ToLower();
			try
			{
				if(t.StartsWith("0x"))
				{
					return uint.Parse(t.Substring(2, t.Length - 2), NumberStyles.HexNumber);
				}
				else
				{
					return uint.Parse(t);
				}
			}
			catch
			{
				return defValue;
			}
		}
		public static uint GetValue(XmlAttribute a, uint defValue)
		{
			if(a == null)
				return defValue;
			return GetValue(a.Value, defValue);			
		}


		public static void ByteArrayToHexString(byte[] arr, StringBuilder sb)
		{
			if(arr == null || sb == null)
				return;
			foreach(byte b in arr)
				sb.Append(b.ToString("X2"));
		}
		public static string ByteArrayToHexString(byte[] arr)
		{
			StringBuilder sb = new StringBuilder();
			ByteArrayToHexString(arr, sb);
			return sb.ToString();
		}

		public static byte[] HexStringToByteArray(string str)
		{
			if(str.Length % 2 == 1)
				throw new Exception("Failed to convert the hex string to a byte array.");
			System.IO.MemoryStream memStream = new System.IO.MemoryStream(8);
			System.IO.BinaryWriter writer = new System.IO.BinaryWriter(memStream);
			for(int i = 0; i < str.Length; i += 2)
			{
				writer.Write(Convert.ToByte(str.Substring(i, 2), 16));
			}
			return memStream.ToArray();
		}
		
		public static byte[] StringToByteArray(string str)
		{
			System.IO.MemoryStream memStream = new System.IO.MemoryStream(str.Length);
			System.IO.BinaryWriter writer = new System.IO.BinaryWriter(memStream);
			writer.Write(str);
			return memStream.ToArray();
		}
		public static byte[] PuidToArray(string hexPuid)
		{
			System.IO.MemoryStream memStream = new System.IO.MemoryStream(8);
			System.IO.BinaryWriter writer = new System.IO.BinaryWriter(memStream);
			writer.Write( UInt64.Parse(hexPuid, System.Globalization.NumberStyles.HexNumber) );
			return memStream.ToArray();

		}

		public static bool IsIPAddr(string host)
		{
			string [] splitHost = host.Split(".".ToCharArray(0, 1), 4);
			if(splitHost.Length != 4)
				return false;
			for(uint i = 0; i < 4; ++i)
			{
				char [] chars = splitHost[i].ToCharArray(0, splitHost[i].Length);
				for(uint j = 0; j < chars.Length; ++j)
					if(chars[j] < '0' || chars[j] > '9')
						return false;
			}

			return true;
		}

		#endregion

		#region ExceptionInfo
		public static void ExceptionInfo(System.Exception e, bool fHtml, StringBuilder sb)
		{
			ExceptionInfo(e, fHtml, 0, sb);
		}

		public static string ExceptionInfo(System.Exception e, bool fHtml)
		{
			StringBuilder sb = new StringBuilder();
			ExceptionInfo(e, fHtml, 0, sb);
			return sb.ToString();
		}

		protected static string Repeat(string str, uint count)
		{
			StringBuilder sb = new StringBuilder();
			Repeat(str, count, sb);
			return sb.ToString();
		}
		protected static void Repeat(string str, uint count, StringBuilder sb)
		{
			for(int i = 0; i < count; ++i)
				sb.Append(str);
		}

		protected static void ExceptionInfo(System.Exception e, bool fHtml, uint depth, StringBuilder sb)
		{
			sb.Append(((fHtml) ? "<li>" : Repeat("\t", depth) )).Append("Message: ").Append(e.Message).Append(((fHtml) ? "<br>\n" : "\n"));
			if(e.TargetSite != null)
				sb.Append(((fHtml) ? "<li>" : Repeat("\t", depth) )).Append("Method: ").Append(e.TargetSite.ToString()).Append(((fHtml) ? "<br>\n" : "\n"));
			if(e.HelpLink != null && e.HelpLink.Length != 0)
				sb.Append(((fHtml) ? "<li>" : Repeat("\t", depth) )).Append("Help Link: ").Append(e.HelpLink).Append(((fHtml) ? "<br>\n" : "\n"));
			if(e.StackTrace != null)
				sb.Append(((fHtml) ? "<li>" : Repeat("\t", depth) )).Append("Call Stack: ").Append(e.StackTrace).Append(((fHtml) ? "<br>\n" : "\n"));
			if(e.InnerException != null)
			{
				sb.Append(((fHtml) ? "<ul>" : Repeat("\t", depth))).Append("InnerException:");
				ExceptionInfo(e.InnerException, fHtml, depth + 1, sb);
				sb.Append(((fHtml) ? "</ul>\n" : "\n"));
			}
		}

		#endregion

		#region GetLocalizedName & GetTitleName
		public static string GetLocalizedName(string Locale, StatsLocalizedName[] names, string IfNotFound)
		{
			string lwr = Locale.ToLower();
			if(names == null)
			{
				return IfNotFound;
			}

			foreach(StatsLocalizedName n in names)
			{
				if(n.Locale.ToLower() == lwr)
				{
					return n.DisplayName;
				}
			}

			return IfNotFound;
		}

		public static string GetLocalizedName(string Locale, LocalizedDisplayName[] names, string IfNotFound)
		{
			string lwr = Locale.ToLower();
			if(names == null)
			{
				return IfNotFound;
			}

			foreach(LocalizedDisplayName n in names)
			{
				if(n.Locale.ToLower() == lwr)
				{
					return n.DisplayName;
				}
			}

			return IfNotFound;
		}

		public static string GetTitleName(uint id, string Locale, TitlePrivilegeInfo[] titles)
		{
			if(titles == null || titles.Length == 0)
				return id.ToString();
			foreach(TitlePrivilegeInfo x in titles)
			{
				if(x.TitleID == id)
					return Helpers.GetLocalizedName((Locale != null) ? Locale : x.DefaultLocale, x.LocalizedName, id.ToString());
			}
			return id.ToString();
		}

		#endregion

		#region FriendStatus
		public static void FriendStatus(uint status, StringBuilder sb)
		{
			uint leftover = (status & 0x03FFFF00);
			// Don't know if we should ever see 0x00000004--Cloaking on the web.
			sb.Append(((status & 0x00000004) != 0) ? "Cloaked" : (((status & 0x0000001B) != 0) ? "Online" : "Offline"));
			if((status & 0x00000002) != 0) sb.Append("<br>Playing");
			if((status & 0x00000008) != 0) sb.Append("<br>Voice");
			if((status & 0x00000010) != 0) sb.Append("<br>Joinable");
			if((status & 0x00000060) != 0) sb.Append("<br>MaskGuests");
			if((status & 0x00000080) != 0) sb.Append("<br>Reserved0");
			if((status & 0x04000000) != 0) sb.Append("<br>SentInvite");
			if((status & 0x08000000) != 0) sb.Append("<br>ReceivedInvite");
			if((status & 0x10000000) != 0) sb.Append("<br>InviteAccepted");
			if((status & 0x20000000) != 0) sb.Append("<br>InviteRejected");
			if((status & 0x40000000) != 0) sb.Append("<br>SentRequest");
			if((status & 0x80000000) != 0) sb.Append("<br>ReceivedRequest");
			if(leftover != 0) sb.Append("<br>Remaining: 0x").Append(leftover.ToString("X"));  // Just in case there is stuff we don't know about getting passed through (that shouldn't)
		}
		
		public static string FriendStatus(uint status)
		{
			StringBuilder sb = new StringBuilder();
			FriendStatus(status, sb);
			return sb.ToString();
		}

		#endregion

		#region GamerStatus
		public static void GamerStatus(uint status, StringBuilder sb)
		{
			uint country = (status & 0x0000ff00) >> 8;
			uint leftover = (status & 0xFFF800FC);
			sb.Append("Country: ").Append(Helpers.IDToCountry(country));
			if((status & 0x00000003) != 0) sb.Append("<br>Guest");
			if((status & 0x00010000) != 0) sb.Append("<br>Voice Ban");
			if((status & 0x00020000) != 0) sb.Append("<br>Purchase Ban");
			if((status & 0x00040000) != 0) sb.Append("<br>Nickname Ban");
			if(leftover != 0) sb.Append("<br>Remaining: ").Append(leftover.ToString("X"));		// Just in case there is other stuff being passed through (that shouldn't).
		}

		public static string GamerStatus(uint status)
		{
			StringBuilder sb = new StringBuilder();
			GamerStatus(status, sb);
			return sb.ToString();
		}

		#endregion

		#region static bool IsBannedString(string s)
		static string [] bannedStrings = new string [] {"anal", "chink", "clit", "cock", "cum", "cunt", "dick", "fag", "fuck", "GEN0", "GEN1", "GEN2", "GEN3", "GEN4", "GEN5", "GEN6", "GEN7", "GEN8", "GEN9", "gook", "homo", "incest", "jew", "kike", "lolita", "mick", "microsoft", "nazi", "nigger", "penis", "preteen", "pubic", "rape", "rectum", "shit", "teensex", "towelhead", "twat", "virgin", "whore", "wop"};
		static bool IsBannedString(string s)
		{
			string l = s.ToLower();
			for(uint i = 0; i < bannedStrings.Length; ++i)
			{
				if(l.IndexOf(bannedStrings[i]) > -1)
					return true;
			}
			return false;
		}
		#endregion

		#region PassportDump
		public static void PassportDump(Passport pp, StringBuilder sb)
		{
			sb.Append("PUID: \"").Append(pp.sHexPUID).Append("\"<br>\n");
			sb.Append("Expired Ticket: \"").Append(pp.fExpired.ToString()).Append("\"<br>\n");
			sb.Append("Name: ");
			if(pp.sFirstName == null || pp.sFirstName == "")
			{
				sb.Append("&lt;not provided&gt;");
			}
			else
			{
				sb.Append("\"").Append(pp.sFirstName).Append(" ").Append(pp.sLastName).Append("\"");
			}
			sb.Append("<br>\n");
			sb.Append("NickName: \"").Append(pp.sNickname).Append("\"<br>\n");
			sb.Append("Email: \"").Append(pp.sEmailAddress).Append("\"<br>\n");
			sb.Append("Country: \"").Append(pp.sCountry).Append("\"<br>\n");
			sb.Append("Region: \"").Append(pp.lRegion.ToString()).Append("\"<br>\n");
			sb.Append("Lang: \"").Append(pp.shLang.ToString()).Append("\"<br>\n");
			sb.Append("ZIP: \"").Append(pp.sZIP).Append("\"<br>\n");
			sb.Append("TimeZone: \"").Append(pp.sTimeZone).Append("\"<br>\n");
			sb.Append("Gender: \"").Append(pp.sGender).Append("\"<br>\n");
			sb.Append("BirthDate: \"").Append(pp.dtBirthDate.ToShortDateString()).Append("\"<br>\n");
			sb.Append("Kid: \"").Append(pp.fKid.ToString()).Append("\"<br>\n");
			sb.Append("FlagData: <i>");
			if(0 != (pp.lFlags & 1)) sb.Append("EmailVerified ");
			if(0 != (pp.lFlags & 2)) sb.Append("HotmailAcctActivated ");
			if(0 != (pp.lFlags & 4)) sb.Append("PasswordRecoveredAtHomtail ");
			if(0 != (pp.lFlags & 16)) sb.Append("HotmailBlocked ");
			if(0 != (pp.lFlags & 32)) sb.Append("LimitedConsent ");
			if(0 != (pp.lFlags & 64)) sb.Append("FullConsent ");
			if(0 != (pp.lFlags & 128)) sb.Append("KidsPassport ");
			if(0 != (pp.lFlags & 256)) sb.Append("ParentsPassport ");
			if(0 != (pp.lFlags & 512)) sb.Append("EmailNeitherHotmailNorPassport ");
			if(0 != (pp.lFlags & 1024)) sb.Append("MemberNameAsEmailValidated ");
			if(0 != (pp.lFlags & 2048)) sb.Append("MSNIA_ISP_Account ");
			if(0 != (pp.lFlags & 4096)) sb.Append("HasMobileDevices ");
			if(0 != (pp.lFlags & 8192)) sb.Append("PremiumHotmailAccount ");
			if(0 != (pp.lFlags & 0x80000000)) sb.Append("ProfileInTertiaryDomain ");
			sb.Append("</i><br>\n");
		}
		
		public static string PassportDump(Passport pp)
		{
			StringBuilder sb = new StringBuilder();
			PassportDump(pp, sb);
			return sb.ToString();
		}

		#endregion

		#region public static string IDToCountry(uint cid);
		public static string IDToCountry(uint cid)
		{
			switch(cid)
			{
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_UNITED_ARAB_EMIRATES:
					return "United Arab Emirates";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ALBANIA:
					return "Albania";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ARMENIA:
					return "Armenia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ARGENTINA:
					return "Argentina";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_AUSTRIA:
					return "Austria";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_AUSTRALIA:
					return "Australia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_AZERBAIJAN:
					return "Azerbaijan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BELGIUM:
					return "Belgium";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BULGARIA:
					return "Bulgaria";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BAHRAIN:
					return "Bahrain";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BRUNEI_DARUSSALAM:
					return "Brunei Darussalam";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BOLIVIA:
					return "Bolivia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BRAZIL:
					return "Brazil";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BELARUS:
					return "Belarus";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_BELIZE:
					return "Belize";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_CANADA:
					return "Canada";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SWITZERLAND:
					return "Switzerland";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_CHILE:
					return "Chile";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_CHINA:
					return "China";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_COLOMBIA:
					return "Columbia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_COSTA_RICA:
					return "Costa Rica";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_CZECH_REPUBLIC:
					return "Czech Republic";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_GERMANY:
					return "Germany";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_DENMARK:
					return "Denmark";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_DOMINICAN_REPUBLIC:
					return "Dominican Republic";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ALGERIA:
					return "Algeria";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ECUADOR:
					return "Ecuador";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ESTONIA:
					return "Estonia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_EGYPT:
					return "Egypt";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SPAIN:
					return "Spain";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_FINLAND:
					return "Finland";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_FAROE_ISLANDS:
					return "Faroe Islands";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_FRANCE:
					return "France";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_GREAT_BRITAIN:
					return "Great Britain";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_GEORGIA:
					return "Georgia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_GREECE:
					return "Greece";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_GUATEMALA:
					return "Guatemala";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_HONG_KONG:
					return "Hong Kong";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_HONDURAS:
					return "Honduras";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_CROATIA:
					return "Croatia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_HUNGARY:
					return "Hungary";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_INDONESIA:
					return "Indonesia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_IRELAND:
					return "Ireland";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ISRAEL:
					return "Israel";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_INDIA:
					return "India";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_IRAQ:
					return "Iraq";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_IRAN:
					return "Iran";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ICELAND:
					return "Iceland";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ITALY:
					return "Italy";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_JAMAICA:
					return "Jamaica";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_JORDAN:
					return "Jordan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_JAPAN:
					return "Japan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_KENYA:
					return "Kenya";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_KYRGYZSTAN:
					return "Kyrgyzstan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_KOREA:
					return "Korea";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_KUWAIT:
					return "Kuwait";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_KAZAKHSTAN:
					return "Kazakhstan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LEBANON:
					return "Lebanon";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LIECHTENSTEIN:
					return "Liechtenstein";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LITHUANIA:
					return "Lithuania";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LUXEMBOURG:
					return "Luxembourg";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LATVIA:
					return "Latvia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_LIBYA:
					return "Libya";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MOROCCO:
					return "Morocco";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MONACO:
					return "Monaco";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MACEDONIA:
					return "Macedonia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MONGOLIA:
					return "Mongolia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MACAU:
					return "Macau";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MALDIVES:
					return "Maldives";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MEXICO:
					return "Mexico";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_MALAYSIA:
					return "Malaysia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_NICARAGUA:
					return "Nicaragua";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_NETHERLANDS:
					return "Netherlands";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_NORWAY:
					return "Norway";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_NEW_ZEALAND:
					return "New Zealand";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_OMAN:
					return "Oman";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PANAMA:
					return "Panama";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PERU:
					return "Peru";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PHILIPPINES:
					return "Philippines";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PAKISTAN:
					return "Pakistan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_POLAND:
					return "Poland";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PUERTO_RICO:
					return "Puerto Rico";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PORTUGAL:
					return "Portugal";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_PARAGUAY:
					return "Paraguay";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_QATAR:
					return "Qatar";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ROMANIA:
					return "Romania";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_RUSSIAN_FEDERATION:
					return "Russian Federation";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SAUDI_ARABIA:
					return "Saudi Arabia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SWEDEN:
					return "Sweden";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SINGAPORE:
					return "Singapore";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SLOVENIA:
					return "Slovenia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SLOVAK_REPUBLIC:
					return "Slovak Republic";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_EL_SALVADOR:
					return "El Salvador";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SYRIA:
					return "Syria";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_THAILAND:
					return "Thailand";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_TUNISIA:
					return "Tunisia";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_TURKEY:
					return "Turkey";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_TRINIDAD_AND_TOBAGO:
					return "Trinidad and Tobago";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_TAIWAN:
					return "Taiwan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_UKRAINE:
					return "Ukraine";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_UNITED_STATES:
					return "United States";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_URUGUAY:
					return "Uruguay";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_UZBEKISTAN:
					return "Uzbekistan";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_VENEZUELA:
					return "Venezuela";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_VIET_NAM:
					return "Viet Nam";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_YEMEN:
					return "Yemen";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_SOUTH_AFRICA:
					return "South Africa";
				case (uint) XONLINE_COUNTRY_CODES.XONLINE_COUNTRY_ZIMBABWE:
					return "Zimbabwe";
				default:
					return "Unknown(" + cid.ToString() + ")";
			};
		}

		#endregion

		#region HTMLError
		public static void HTMLError(string str, StringBuilder sb)
		{
			sb.Append("<span style='color:red'>").Append(str).Append("</span>");
		}

		public static string HTMLError(string str)
		{
			StringBuilder sb = new StringBuilder();
			HTMLError(str, sb);
			return sb.ToString();
		}

		#endregion


		#region LeaderboardToTable routines
		public static void LeaderboardListToTable(TitlePrivilegeInfo title, LBInfo[] lb, StringBuilder sb)
		{
			int count = 0;

			if(lb == null || lb.Length == 0)
			{
				sb.Append("No leaderboard information was found for ");
				sb.Append(GetLocalizedName(title.DefaultLocale, title.LocalizedName, title.TitleID.ToString()));
				sb.Append("<br>\n");
				return;
			}
			// First display leaderboard information
			sb.Append("<table border=1><tr><th>Leaderboard ID</th><th>Reset Type</th><th colspan=2>Localized Name</th></tr>\n");
			foreach(LBInfo i in lb)
			{
				count = (i.LocalizedLBName == null || i.LocalizedLBName.Length == 0) ? 1 : i.LocalizedLBName.Length;

				sb.Append("<tr><td rowspan=").Append(count.ToString()).Append(">").Append(i.LBID.ToString()).Append("</td><td rowspan=").Append(count.ToString()).Append(">").Append(i.ResetType.ToString()).Append("</td><td>");
				if(i.LocalizedLBName == null || i.LocalizedLBName.Length == 0)
				{
					sb.Append("No localized names.</td></tr>\n");
					continue;
				}
				sb.Append(i.LocalizedLBName[0].Locale).Append("</td><td>").Append(i.LocalizedLBName[0].DisplayName).Append("</td></tr>\n");
				for(int j = 1; j < i.LocalizedLBName.Length; ++j)
				{
					sb.Append("<tr><td>").Append(i.LocalizedLBName[j].Locale).Append("</td><td>").Append(i.LocalizedLBName[j].DisplayName).Append("</td></tr>\n");
				}
			}
			sb.Append("</table><br><br>\n");
		}
		
		public static string LeaderboardListToTable(TitlePrivilegeInfo title, LBInfo[] lb)
		{
			StringBuilder sb = new StringBuilder();
			LeaderboardListToTable(title, lb, sb);
			return sb.ToString();
		}


		public static void LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsDetailedLB lb, StringBuilder sb)
		{
			StringBuilder sbtitlerow = new StringBuilder();
			int columncount = 2;

			if(lb == null)
			{
				sb.Append("Warning: The leaderboard passed was null for ");
				sb.Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString()));
				return;
			}

			sb.Append("<table border=1>");
			sbtitlerow.Append("<tr><th>Rank</th><th>Gamertag</th>");
			if(info.AttributeInfo != null && info.AttributeInfo.Length > 0)
			{
				foreach(LBAttributeInfo attr in info.AttributeInfo)
				{
					sbtitlerow.Append("<th>").Append(GetLocalizedName(title.DefaultLocale, attr.LocalizedAttrName, attr.ID)).Append(" (").Append(attr.Unit.ToString()).Append(")</th>");
					++columncount;
				}
			}
			sbtitlerow.Append("</tr>\n");

			sb.Append("<tr><td align=center colspan=").Append(columncount.ToString()).Append("><b>").Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString())).Append("</b> (ID: ").Append(info.LBID.ToString()).Append(" Count: ").Append(lb.TotalLBEntries.ToString()).Append(")</td></tr>");
			sb.Append(sbtitlerow.ToString());

			if(lb.Entries != null && lb.Entries.Length > 0)
			{
				foreach(DetailedLBEntry entry in lb.Entries)
				{
					sb.Append("<tr><td>").Append(entry.R.ToString()).Append("</td><td>").Append(entry.G).Append("</td>");
					foreach(LBEntryAttribute attr in entry.F)
					{
						sb.Append("<td>").Append(attr.V).Append("</td>");
					}
					sb.Append("</tr>\n");
				}
			}
			sb.Append("<tr><td colspan=").Append(columncount.ToString()).Append(">Last Reset: ").Append(lb.LBLastResetDate.ToShortDateString()).Append(" ").Append(lb.LBLastResetDate.ToShortTimeString()).Append("<br>\n");
			sb.Append("This LB is valid for ").Append(lb.ValidSeconds.ToString()).Append(" seconds.</td></tr></table>");
		}

		public static string LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsDetailedLB lb)
		{
			StringBuilder sb = new StringBuilder();
			LeaderboardToTable(title, info, lb, sb);
			return sb.ToString();
		}



		public static void LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsRawLB lb, StringBuilder sb)
		{
			StringBuilder sbtitlerow = new StringBuilder();
			int count = 2;
			if(lb == null)
			{
				sb.Append("Warning: The leaderboard passed was null for ");
				sb.Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString()));
				return;
			}

			sb.Append("<table border=1>");
			sbtitlerow.Append("<tr><th>Rank</th><th>Gamertag</th>");
			if(lb.Entries != null && lb.Entries.Length > 0 && lb.Entries[0].A != null && lb.Entries[0].A.Length > 0)
			{
				foreach(RawLBAttribute attr in lb.Entries[0].A)
				{
					sbtitlerow.Append("<th>ID=").Append(attr.ID.ToString()).Append(" (").Append(attr.V.GetType().Name).Append(")</th>");
					++count;
				}
			}
			sb.Append("<tr><td align=center colspan=").Append(count.ToString()).Append("><b>").Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString())).Append("</b> (ID: ").Append(info.LBID.ToString()).Append(" Count: ").Append(lb.TotalLBEntries.ToString()).Append(")</td></tr><tr>");
			sb.Append(sbtitlerow.ToString()).Append("</tr>\n");

			if(lb.Entries != null && lb.Entries.Length > 0)
			{
				foreach(RawLBEntry entry in lb.Entries)
				{
					sb.Append("<tr><td>").Append(entry.R.ToString()).Append("</td><td>").Append(entry.G).Append("</td>");
					if(entry.A != null && entry.A.Length > 0)
					{
						foreach(RawLBAttribute attr in entry.A)
						{
							sb.Append("<td>").Append(attr.V.ToString()).Append("</td>");
						}
					}
					sb.Append("</tr>\n");
				}
			}
			sb.Append("<tr><td colspan=").Append(count.ToString()).Append(">Last Reset: ").Append(lb.LBLastResetDate.ToShortDateString()).Append(" ").Append(lb.LBLastResetDate.ToShortTimeString()).Append("<br>\n");
			sb.Append("Valid for ").Append(lb.ValidSeconds.ToString()).Append(" seconds</td></tr></table>");
		}
		
		public static string LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsRawLB lb)
		{
			StringBuilder sb = new StringBuilder();
			LeaderboardToTable(title, info, lb, sb);
			return sb.ToString();
		}


		public static void LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsFriendsLB lb, StringBuilder sb)
		{
			if(lb == null)
			{
				sb.Append("Warning: The leaderboard passed was null for ");
				sb.Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString()));
				return;
			}
			
			sb.Append("<table border=1><tr><td align=center colspan=2><b>").Append(GetLocalizedName(title.DefaultLocale, info.LocalizedLBName, info.LBID.ToString())).Append("</b> (ID: ").Append(info.LBID.ToString()).Append(" Count: ").Append(lb.TotalLBEntries.ToString()).Append(")</td></tr>\n");
			sb.Append("<tr><th>Rank</th><th>Gamertag</th></tr>\n");

			if(lb.Entries != null && lb.Entries.Length > 0)
			{
				foreach(LBEntry entry in lb.Entries)
				{
					sb.Append("<tr><td>").Append(entry.R.ToString()).Append("</td><td>").Append(entry.G).Append("</td></tr>\n");
				}
			}
			sb.Append("<tr><td colspan=2>Last Reset: ").Append(lb.LBLastResetDate.ToShortDateString()).Append(" ").Append(lb.LBLastResetDate.ToShortTimeString()).Append("<br>\n");
			sb.Append("Valid for ").Append(lb.ValidSeconds.ToString()).Append(" seconds</td></tr>\n");
			sb.Append("</table>");
		}

		public static string LeaderboardToTable(TitlePrivilegeInfo title, LBInfo info, StatsFriendsLB lb)
		{
			StringBuilder sb = new StringBuilder();
			LeaderboardToTable(title, info, lb, sb);
			return sb.ToString();
		}
		#endregion

		#region IsTeamLeaderboard
		public static bool IsTeamLeaderboard(LBType type)
		{
			if(type == LBType.CompetitionTemplateTeam || type == LBType.RegularTeam )
				return true;
			return false;
		}
		#endregion

		#region FriendsToTable
		public static void FriendsToTable(TitlePrivilegeInfo[] titles, FriendsList friends, StringBuilder sb)
		{
			bool fTitles = (titles != null && titles.Length > 0);

			if(friends == null)
			{
				Helpers.HTMLError("Presence.GetFriends returned null!", sb);
				return;
			}

			if((friends.OnlineFriends == null || friends.OnlineFriends.Length == 0) &&
				(friends.OfflineFriends == null || friends.OfflineFriends.Length == 0))
			{
				sb.Append("No friends found.<br>\n");
				return;
			}

			sb.Append("<table border=1><tr><th>Friend</th><th>Status</th><th>Title</th></tr>\n");

			foreach(OnlineFriend f in friends.OnlineFriends)
			{
				sb.Append("<tr><td>").Append(((f.G == null) ? "&lt;null&gt;" : f.G)).Append("</td><td>").Append(Helpers.FriendStatus(f.S));
				sb.Append("</td><td>").Append(((fTitles) ? Helpers.GetTitleName(f.T, null, titles) : f.T.ToString())).Append("</td></tr>\n");
			}

			foreach(OfflineFriend o in friends.OfflineFriends)
			{
				sb.Append("<tr><td>").Append(((o.G == null) ? "&lt;null&gt;" : o.G)).Append("</td><td>-</td><td>---</td></tr>\n");
			}

			sb.Append("</table><br>\n");
			sb.Append("Valid for ").Append(friends.ValidSeconds.ToString()).Append(" seconds.<br>\n");
		}

		public static string FriendsToTable(TitlePrivilegeInfo[] titles, FriendsList friends)
		{
			StringBuilder sb = new StringBuilder();
			FriendsToTable(titles, friends, sb);
			return sb.ToString();
		}

		#endregion


		#region AccountsToTable
		public static void AccountsToTable(LinkedAccount[] accts, uint[] statuscode, string[] errorresults, string unlinkLink, StringBuilder sb)
		{
			if(accts == null)
			{
				sb.Append("No gamertags were found for this Passport Prep account.<br>\n");
				return;
			}

			if(statuscode != null && statuscode.Length != accts.Length)
			{
				HTMLError("Mismatched length between status code array and account list array.", sb);
				sb.Append("<br>\n");
				return;
			}

			if(errorresults != null && errorresults.Length != accts.Length)
			{
				HTMLError("Mismatched length between error results array and account list array.", sb);
				sb.Append("<br>\n");
				return;
			}

			if(0 == accts.Length)
			{
				sb.Append("No gamertags were found for this Passport Prep account.<br>\n");
				return;
			}

			bool fStatus = false, fErrors = false;
			int i = 0;
			if(statuscode != null)
				fStatus = true;
			if(errorresults != null)
				fErrors = true;

			sb.Append("<table border=1><tr><th>GamerTag</th><th>Owner</th>").Append(((fStatus) ? "<th>Status Info</th>" : "")).Append(((unlinkLink != null) ? "<th>Unlink Link</th>" : "" )).Append("</tr>\n");

			foreach(LinkedAccount li in accts)
			{
				sb.Append("<tr><td>").Append(li.GamerTag).Append("</td><td>").Append(li.Owner.ToString()).Append("</td>");
				if(fStatus)
				{
					sb.Append("<td align=center>").Append(((fErrors && (errorresults[i] != null)) ? errorresults[i] : Helpers.GamerStatus(statuscode[i]))).Append("</td>");
				}
				if(unlinkLink != null)
				{
					sb.Append("<td><a href=\"").Append(unlinkLink).Append(li.GamerTag).Append("\">Unlink</a></td>\n");
				}
				sb.Append("</tr>\n");
				++i;
			}
			sb.Append("</table>\n\n");
		}
		
		public static string AccountsToTable(LinkedAccount[] accts, uint[] statuscode, string[] errorresults, string unlinkLink)
		{
			StringBuilder sb = new StringBuilder();
			AccountsToTable(accts, statuscode, errorresults, unlinkLink, sb);
			return sb.ToString();
		}
		#endregion


		#region TitleListToTable
		public static void TitleListToTable(TitlePrivilegeInfo[] titles, StringBuilder sb)
		{
			string bgcolor = "";
			string hex, title;
			int count = 0, localcounts;
			if(null == titles || 0 == titles.Length)
			{
				sb.Append("No titles were found.");
				return;
			}

			sb.Append("\n\n<table border=1><tr><th>TitleID</th><th>Localized Name</th><th>Supported<br>Locale Count</th><th>Default<br>Locale</th><th>Privileges</th><th>ESRB Rating</th></tr>\n");
			foreach( TitlePrivilegeInfo t in titles)
			{
				if(count % 2 == 0)
				{
					bgcolor = "#EEEEEE";
				}
				else
				{
					bgcolor = "#FFFFFF";
				}
				localcounts = (t.LocalizedName == null) ? 1 : t.LocalizedName.Length;
				hex = t.TitleID.ToString("X8");
				sb.Append("<tr bgcolor=").Append(bgcolor).Append("><td>").Append(hex).Append("</td>");
				
				// This is the entry containing the list of localized title names.
				sb.Append("<td STYLE='cursor:hand' onClick='javascript:SwapDisplay(IDS").Append(hex).Append(", IDB").Append(hex).Append(");'>\n");
				title = GetLocalizedName(t.DefaultLocale, t.LocalizedName, null);
				// This is the small/collapsed table for easy viewing
				sb.Append("<span ID=IDS").Append(hex).Append(" STYLE='display:block'><table border=0>");
				if(t.LocalizedName == null)
				{
					sb.Append("<tr><td align=center><b>").Append(HTMLError("No localized information exists for this title!")).Append("</b></td></tr>\n");
				}
				else if(title == null)
				{
					sb.Append("<tr><td align=center><b>").Append(HTMLError("A title string does not exist for the default locale!")).Append("</b></td></tr>\n");
				}
				else
				{
					sb.Append("<tr><td align=center><b>(").Append(t.DefaultLocale).Append(") </b></td>\n");
					sb.Append("    <td align=center><b>").Append(title).Append("</b></td></tr>\n");
				}
				sb.Append("</table></span>\n");

				// This is the big/expanded table for complete info
				sb.Append("<span ID=IDB").Append(hex).Append(" STYLE='display:none'><table border=0>");
				if(t.LocalizedName != null)
				{
					foreach(LocalizedDisplayName n in t.LocalizedName)
					{
						bool fBolded = (n.Locale == t.DefaultLocale);
						sb.Append("<tr><td align=center>").Append((fBolded ? "<b>" : "")).Append("(").Append(n.Locale).Append(") ").Append((fBolded ? "<b>" : "")).Append("</td><td>").Append((fBolded ? "<b>" : "")).Append(n.DisplayName).Append((fBolded ? "<b>" : "")).Append("</td></tr>\n");
					}
				}
				else
				{
					sb.Append("<tr><td align=center><b>").Append(HTMLError("No localized information exists for this title!")).Append("</b></td></tr>\n");
				}
				sb.Append("</table></span></td>\n");

				// Rest of the row.
				sb.Append("<td align=center>").Append(((t.LocalizedName == null) ? "0" : t.LocalizedName.Length.ToString())).Append("</td><td>").Append(t.DefaultLocale.ToString()).Append("</td>");
				sb.Append("<td>").Append(t.Privileges.ToString()).Append("</td>");
				sb.Append("<td>").Append(t.Rating.ToString()).Append("</td></tr>\n");
				++count;
			}
			sb.Append("</table><br>\n\n");
		}
		
		public static string TitleListToTable(TitlePrivilegeInfo[] titles)
		{
			StringBuilder sb = new StringBuilder();
			TitleListToTable(titles, sb);
			return sb.ToString();
		}
		#endregion


		#region FriendsToStringArray
		public static string[] FriendsToStringArray(LinkedAccount acct, FriendsInfo friends)
		{
			int i = 1, count = (friends == null) ? 1 : friends.OfflineFriends.Length + friends.OnlineFriends.Length + 1;
			string[] gamertags = new string[count];

			if(acct == null && friends == null)
				return null;

			gamertags[0] = acct.GamerTag;
			if(friends != null)
			{
				foreach(OnlineFriend f in friends.OnlineFriends)
				{
					gamertags[i] = f.G;
					++i;
				}

				foreach(OfflineFriend f in friends.OfflineFriends)
				{
					gamertags[i] = f.G;
					++i;
				}
			}
			return gamertags;
		}

		#endregion

		#region CollapseToggler
		public static void CollapseToggler(string ActiveText, string ID, StringBuilder sb)
		{
			sb.Append("<span STYLE='cursor:hand' onclick='javascript:ExpandCollapse(");
			sb.Append(ID);
			sb.Append(");'>");
			sb.Append(ActiveText);
			sb.Append("</span>");
		}
		
		public static string CollapseToggler(string ActiveText, string ID)
		{
			StringBuilder sb = new StringBuilder();
			CollapseToggler(ActiveText, ID, sb);
			return sb.ToString();
		}


		public static void CollapseToggler(string ActiveText, string ID, string Body, bool fInitiallyCollapsed, StringBuilder sb)
		{
			sb.Append("<span STYLE='cursor:hand' onclick='javascript:ExpandCollapse(" + ID + ");'>");
			sb.Append(ActiveText);
			sb.Append("</span><span ID=");
			sb.Append(ID);
			sb.Append(" STYLE='display:");
			sb.Append((fInitiallyCollapsed ? "none" : "block"));
			sb.Append("'>");
			sb.Append(Body);
			sb.Append("</span>");
		}

		public static string CollapseToggler(string ActiveText, string ID, string Body, bool fInitiallyCollapsed)
		{
			StringBuilder sb = new StringBuilder();
			CollapseToggler(ActiveText, ID, Body, fInitiallyCollapsed, sb);
			return sb.ToString();
		}
		#endregion

		#region Certificate Functions
		public static string CertificateCN(string cert)
		{
			string txt = cert;
			int idx = txt.IndexOf("CN=");
			if(idx < 0)
				return "";
			idx += 3;
			int end = txt.IndexOf(',', idx);
			if(end < 0)
				return txt.Substring(idx, txt.Length - idx);
			return txt.Substring(idx, end - idx);
		}

		public static string CertificateCN(X509Certificate cert)
		{
			return CertificateCN(cert.Subject);
		}

		public static StoreClass GetCertificateStore(System.IO.StreamWriter sw)
		{
			try
			{
				StoreClass store = new StoreClass();
				string user = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
				CAPICOM.CAPICOM_STORE_LOCATION loc = CAPICOM.CAPICOM_STORE_LOCATION.CAPICOM_CURRENT_USER_STORE;
				if(user.StartsWith("NT AUTHORITY\\") || user.EndsWith("\\ASPNET"))
					loc = CAPICOM.CAPICOM_STORE_LOCATION.CAPICOM_LOCAL_MACHINE_STORE;
				int i = user.LastIndexOf("\\");
				if(i >= 0)
				{
					string m = user.Substring(0, i).ToLower();
					string u = user.Substring(i + 1).ToLower();
					if(u == "iusr_" + m || u == "iwam_" + m)
						loc = CAPICOM.CAPICOM_STORE_LOCATION.CAPICOM_LOCAL_MACHINE_STORE;
				}
				store.Open(loc, "My", CAPICOM.CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_READ_ONLY);
				if(sw != null) sw.WriteLine("GetCertificateStore: Using store " + loc.ToString() + " for user " + user);
				return store;
			}
			catch(System.Exception f)
			{
				if(sw != null) sw.WriteLine("GetCertificateStore: Exception accessing the certificate store: " + ExceptionInfo(f, false));
			}
			return null;
		}

		public static bool ExistsCertificate(X509Certificate cer, System.IO.StreamWriter sw)
		{
			try
			{
				StoreClass store = GetCertificateStore(sw);
				if(store == null)
					return true;
				if(store.Certificates == null || store.Certificates.Count == 0)
				{
					if(sw != null) sw.WriteLine("ExistsCertificate: No certificates found in the store.");
				}
				else
				{
					foreach(ICertificate2 cert in store.Certificates)
					{
						if(cert.IsValid().Result && (CertificateCN(cer.Issuer) == CertificateCN(cert.IssuerName)) &&
							(CertificateCN(cer.Subject) == CertificateCN(cert.SubjectName)))
						{
							if(sw != null) sw.WriteLine("ExistsCertificate: Found a certificate in the store for: " + CertificateCN(cer.Issuer) + "\\" + CertificateCN(cer.Subject));
							return true;
						}
					}
					if(sw != null) sw.WriteLine("ExistsCertificate: Failed to find a certificate in the store for: " + CertificateCN(cer.Issuer) + "\\" + CertificateCN(cer.Subject));
				}
			}
			catch(System.Exception f)
			{
				if(sw != null) sw.WriteLine("ExistsCertificate: Exception enumerating certificates: " + ExceptionInfo(f, false));
			}
			return false;
		}

		public static X509Certificate LookupCertificate(string issuer, string subject, System.IO.StreamWriter sw)
		{
			try
			{
				StoreClass store = GetCertificateStore(sw);
				if(store == null || store.Certificates == null || store.Certificates.Count == 0)
				{
					if(sw != null) sw.WriteLine("LookupCertificate: No certificates found in the store.");
				}
				else
				{
					foreach(ICertificate2 cert in store.Certificates)
					{
						if(cert.IsValid().Result && (issuer == null || issuer == "" || issuer == CertificateCN(cert.IssuerName)) &&
							(subject != null && subject != "" && subject == CertificateCN(cert.SubjectName)))
						{
							if(sw != null) sw.WriteLine("LookupCertificate: Found a certificate in the store for: " + ((issuer == null || issuer == "") ? "*" : issuer) + "\\" + ((subject != null && subject != "") ? subject : "<unspecified>"));
							string b64cert = cert.Export(CAPICOM.CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64);
							return new X509Certificate(Convert.FromBase64String(b64cert));
						}
					}
					if(sw != null) sw.WriteLine("ExistsCertificate: Failed to find a certificate in the store for: " + ((issuer == null || issuer == "") ? "*" : issuer) + "\\" + ((subject != null && subject != "") ? subject : "<unspecified>"));
				}
			}
			catch(System.Exception f)
			{
				if(sw != null) sw.WriteLine("LookupCertificate: Exception enumerating certificates: " + ExceptionInfo(f, false));
			}
			return null;
		}

		#endregion

		#region DropDown Lists
		public static ICollection YesNoDropDown()
		{
			DataTable tbl = new DataTable();
			DataRow r1 = tbl.NewRow();
			DataRow r2 = tbl.NewRow();

			tbl.Columns.Add("Choice");
			r1[0] = "Yes";
			r2[0] = "No";
			tbl.Rows.Add(r1);
			tbl.Rows.Add(r2);

			DataView dv = new DataView(tbl);
			return dv;
		}

		public static ICollection TitleListToDataView(TitleInfoList titles)
		{
			DataTable tbl = new DataTable();
			DataRow r1 = tbl.NewRow();

			tbl.Columns.Add("TitleID");
			tbl.Columns.Add("TitleName");
			r1[0] = "0";
			r1[1] = "<all>";
			tbl.Rows.Add(r1);

			if(titles == null || titles.info == null)
				goto Done;

			foreach(TitlePrivilegeInfo t in titles.info)
			{
				if(t.Privileges != TitlePrivilege.None)
				{
					DataRow r = tbl.NewRow();
					r[0] = t.TitleID.ToString("X8");
					r[1] = "[" + t.TitleID.ToString("X8") + "] " + GetLocalizedName(t.DefaultLocale, t.LocalizedName, "Localized Title Name Not Found");
					tbl.Rows.Add(r);
				}
			}

			Done:
				DataView dv = new DataView(tbl);
			return dv;
		}

		public static ICollection APIsTable()
		{
			DataTable tbl = new DataTable();
			DataRow r1 = tbl.NewRow();
			DataRow r2 = tbl.NewRow();
			DataRow r3 = tbl.NewRow();

			tbl.Columns.Add("Choice");
			r1[0] = "<all>";
			r2[0] = "Top";
			r3[0] = "Raw";
			tbl.Rows.Add(r1);
			tbl.Rows.Add(r2);
			tbl.Rows.Add(r3);

			DataView dv = new DataView(tbl);
			return dv;
		}

		#endregion

		#region SetSelectedValue
		public static void SetSelectedValue(System.Web.UI.WebControls.DropDownList list, string val)
		{
			SetSelectedValue(list, val, -1);
		}

		public static void SetSelectedValue(System.Web.UI.WebControls.DropDownList list, string val, int indexifnotfound)
		{
			for(int i = 0; i < list.Items.Count; ++i)
			{
				if(list.Items[i].Value == val)
				{
					list.SelectedIndex = i;
					return;
				}
			}
			if(indexifnotfound >= 0 && indexifnotfound < list.Items.Count)
			{
				list.SelectedIndex = indexifnotfound;
			}
		}

		#endregion
	}

	#region XONLINE_COUNTRY_CODES
	enum XONLINE_COUNTRY_CODES
	{
		XONLINE_COUNTRY_UNITED_ARAB_EMIRATES = 1,
		XONLINE_COUNTRY_ALBANIA              = 2,
		XONLINE_COUNTRY_ARMENIA              = 3,
		XONLINE_COUNTRY_ARGENTINA            = 4,
		XONLINE_COUNTRY_AUSTRIA              = 5,
		XONLINE_COUNTRY_AUSTRALIA            = 6,
		XONLINE_COUNTRY_AZERBAIJAN           = 7,
		XONLINE_COUNTRY_BELGIUM              = 8,
		XONLINE_COUNTRY_BULGARIA             = 9,
		XONLINE_COUNTRY_BAHRAIN              = 10,
		XONLINE_COUNTRY_BRUNEI_DARUSSALAM    = 11,
		XONLINE_COUNTRY_BOLIVIA              = 12,
		XONLINE_COUNTRY_BRAZIL               = 13,
		XONLINE_COUNTRY_BELARUS              = 14,
		XONLINE_COUNTRY_BELIZE               = 15,
		XONLINE_COUNTRY_CANADA               = 16,
		XONLINE_COUNTRY_SWITZERLAND          = 18,
		XONLINE_COUNTRY_CHILE                = 19,
		XONLINE_COUNTRY_CHINA                = 20,
		XONLINE_COUNTRY_COLOMBIA             = 21,
		XONLINE_COUNTRY_COSTA_RICA           = 22,
		XONLINE_COUNTRY_CZECH_REPUBLIC       = 23,
		XONLINE_COUNTRY_GERMANY              = 24,
		XONLINE_COUNTRY_DENMARK              = 25,
		XONLINE_COUNTRY_DOMINICAN_REPUBLIC   = 26,
		XONLINE_COUNTRY_ALGERIA              = 27,
		XONLINE_COUNTRY_ECUADOR              = 28,
		XONLINE_COUNTRY_ESTONIA              = 29,
		XONLINE_COUNTRY_EGYPT                = 30,
		XONLINE_COUNTRY_SPAIN                = 31,
		XONLINE_COUNTRY_FINLAND              = 32,
		XONLINE_COUNTRY_FAROE_ISLANDS        = 33,
		XONLINE_COUNTRY_FRANCE               = 34,
		XONLINE_COUNTRY_GREAT_BRITAIN        = 35,
		XONLINE_COUNTRY_GEORGIA              = 36,
		XONLINE_COUNTRY_GREECE               = 37,
		XONLINE_COUNTRY_GUATEMALA            = 38,
		XONLINE_COUNTRY_HONG_KONG            = 39,
		XONLINE_COUNTRY_HONDURAS             = 40,
		XONLINE_COUNTRY_CROATIA              = 41,
		XONLINE_COUNTRY_HUNGARY              = 42,
		XONLINE_COUNTRY_INDONESIA            = 43,
		XONLINE_COUNTRY_IRELAND              = 44,
		XONLINE_COUNTRY_ISRAEL               = 45,
		XONLINE_COUNTRY_INDIA                = 46,
		XONLINE_COUNTRY_IRAQ                 = 47,
		XONLINE_COUNTRY_IRAN                 = 48,
		XONLINE_COUNTRY_ICELAND              = 49,
		XONLINE_COUNTRY_ITALY                = 50,
		XONLINE_COUNTRY_JAMAICA              = 51,
		XONLINE_COUNTRY_JORDAN               = 52,
		XONLINE_COUNTRY_JAPAN                = 53,
		XONLINE_COUNTRY_KENYA                = 54,
		XONLINE_COUNTRY_KYRGYZSTAN           = 55,
		XONLINE_COUNTRY_KOREA                = 56,
		XONLINE_COUNTRY_KUWAIT               = 57,
		XONLINE_COUNTRY_KAZAKHSTAN           = 58,
		XONLINE_COUNTRY_LEBANON              = 59,
		XONLINE_COUNTRY_LIECHTENSTEIN        = 60,
		XONLINE_COUNTRY_LITHUANIA            = 61,
		XONLINE_COUNTRY_LUXEMBOURG           = 62,
		XONLINE_COUNTRY_LATVIA               = 63,
		XONLINE_COUNTRY_LIBYA                = 64,
		XONLINE_COUNTRY_MOROCCO              = 65,
		XONLINE_COUNTRY_MONACO               = 66,
		XONLINE_COUNTRY_MACEDONIA            = 67,
		XONLINE_COUNTRY_MONGOLIA             = 68,
		XONLINE_COUNTRY_MACAU                = 69,
		XONLINE_COUNTRY_MALDIVES             = 70,
		XONLINE_COUNTRY_MEXICO               = 71,
		XONLINE_COUNTRY_MALAYSIA             = 72,
		XONLINE_COUNTRY_NICARAGUA            = 73,
		XONLINE_COUNTRY_NETHERLANDS          = 74,
		XONLINE_COUNTRY_NORWAY               = 75,
		XONLINE_COUNTRY_NEW_ZEALAND          = 76,
		XONLINE_COUNTRY_OMAN                 = 77,
		XONLINE_COUNTRY_PANAMA               = 78,
		XONLINE_COUNTRY_PERU                 = 79,
		XONLINE_COUNTRY_PHILIPPINES          = 80,
		XONLINE_COUNTRY_PAKISTAN             = 81,
		XONLINE_COUNTRY_POLAND               = 82,
		XONLINE_COUNTRY_PUERTO_RICO          = 83,
		XONLINE_COUNTRY_PORTUGAL             = 84,
		XONLINE_COUNTRY_PARAGUAY             = 85,
		XONLINE_COUNTRY_QATAR                = 86,
		XONLINE_COUNTRY_ROMANIA              = 87,
		XONLINE_COUNTRY_RUSSIAN_FEDERATION   = 88,
		XONLINE_COUNTRY_SAUDI_ARABIA         = 89,
		XONLINE_COUNTRY_SWEDEN               = 90,
		XONLINE_COUNTRY_SINGAPORE            = 91,
		XONLINE_COUNTRY_SLOVENIA             = 92,
		XONLINE_COUNTRY_SLOVAK_REPUBLIC      = 93,
		XONLINE_COUNTRY_EL_SALVADOR          = 95,
		XONLINE_COUNTRY_SYRIA                = 96,
		XONLINE_COUNTRY_THAILAND             = 97,
		XONLINE_COUNTRY_TUNISIA              = 98,
		XONLINE_COUNTRY_TURKEY               = 99,
		XONLINE_COUNTRY_TRINIDAD_AND_TOBAGO  = 100,
		XONLINE_COUNTRY_TAIWAN               = 101,
		XONLINE_COUNTRY_UKRAINE              = 102,
		XONLINE_COUNTRY_UNITED_STATES        = 103,
		XONLINE_COUNTRY_URUGUAY              = 104,
		XONLINE_COUNTRY_UZBEKISTAN           = 105,
		XONLINE_COUNTRY_VENEZUELA            = 106,
		XONLINE_COUNTRY_VIET_NAM             = 107,
		XONLINE_COUNTRY_YEMEN                = 108,
		XONLINE_COUNTRY_SOUTH_AFRICA         = 109,
		XONLINE_COUNTRY_ZIMBABWE             = 110
	};
	#endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\CallStatistics.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

namespace WSHelper
{
	public class CallStatistics
	{
		#region protected struct callstats
		protected struct callstats
		{
			public string name;
			public uint calls;
			public uint successful;
			public uint failed;
			public uint completions;
			public TimeSpan successtime;
			public TimeSpan completiontime;
			public TimeSpan failedtime;
		};
		#endregion;		

		#region Member variables
		protected WSEnvironment env;
		public DateTime dtStartTime;
		public Stream logStream = null;
		protected callstats[] data;
		#endregion

		#region Constructors
		public CallStatistics()
		{
			env = null;
			dtStartTime = DateTime.FromFileTime(0);

			Init();
		}
		public CallStatistics(WSEnvironment e, DateTime dtStart)
		{
			if(e == null)
				throw new Exception("Environment parameter cannot be null.");
			env = e;
			dtStartTime = dtStart;

			Init();
		}
		#endregion

		#region Init
		public void Init()
		{
			data = new callstats[(int) APIInfo.Count];
			for(int i = 0; i < (int) APIInfo.Count; ++i)
			{
				data[i].name = ((APIInfo) i).ToString();
				data[i].calls = 0;
				data[i].successful = 0;
				data[i].failed = 0;
				data[i].successtime = new TimeSpan(0);
				data[i].failedtime = new TimeSpan(0);
				data[i].completions = 0;
				data[i].completiontime = new TimeSpan(0);
			}
		}
		#endregion

		#region Environment (accessor)
		public WSEnvironment Environment
		{
			get 
			{
				return env;
			}
		}
		#endregion
        
		#region ConfigureSoapHandler (disabled)
		/*
				public void ConfigureSoapHandler(SoapHandler sh)
				{
					if(env.LogFile != null && logStream == null)
					{
						try
						{
							logStream = File.Open(env.LogFile, FileMode.Append, FileAccess.Write, FileShare.None);
						}
						catch
						{
						}
					}


				}
		*/
		#endregion

		#region GetCallStats
		public uint GetCallStats(APIInfo api, out uint successful, out uint failed, out uint completions)
		{
			if((int) api >= (int) APIInfo.Count)
				throw new System.Exception("APIInfo argument out of range.");
			successful = data[(int) api].successful;
			failed = data[(int) api].failed;
			completions = data[(int) api].completions;
			return data[(int) api].calls;
		}

		public uint GetCallStats(APIInfo api, out uint successful, out TimeSpan successtime, out uint failed, out TimeSpan failedtime, out uint completions, out TimeSpan completiontime)
		{
			GetCallStats(api, out successful, out failed, out completions);
			completiontime = data[(int) api].completiontime;
			failedtime = data[(int) api].failedtime;
			successtime = data[(int) api].successtime;
			return data[(int) api].calls;
		}
		#endregion

		#region ProcessResult
		public void ProcessResult(System.Exception e, APIInfo cat, DateTime start, DateTime completed)
		{
			data[(int)cat].calls++;
			if(completed > asyncCallbackObject.dtBase)
			{
				data[(int)cat].completiontime += completed.Subtract(start);
				data[(int)cat].completions++;
			}
			if(e == null)
			{
				data[(int)cat].successful++;
				data[(int)cat].successtime += DateTime.Now.Subtract(start);
				return;
			}
			data[(int)cat].failed++;
			data[(int)cat].failedtime += DateTime.Now.Subtract(start);
			throw e;
		}
		#endregion

		#region GetWebRequest
		public WebRequest GetWebRequest(System.Web.Services.Protocols.SoapHttpClientProtocol hwcp, HttpWebRequest req)
		{
			req.ProtocolVersion = new Version(env.Version);
			req.Pipelined = env.fPipelined;
			req.KeepAlive = env.fKeepAlive;
			if(!env.fSecure)
			{
				req.Headers.Add("Subject-Name: " + Helpers.CertificateCN(env.Cert));
				req.Headers.Add("Client-IP-Port: 4.0.9.6:4096");
				req.Headers.Add("RequestId: 0123456789ABCDEF");
				req.Headers.Add("X-UserIdentity: " + System.Security.Principal.WindowsIdentity.GetCurrent().Name);
			}
			else
			{
				req.ClientCertificates.Add(env.Cert);
			}
			return req; // new RequestSniffer(req, env.LogStream);
		}
		#endregion

		// Returns the remaining time based on the start time and the total limit into milliseconds
		#region RemainingTime
		public long RemainingTime()
		{
			TimeSpan timePassed = DateTime.Now.Subtract(dtStartTime);
			long msPassed = (long) (timePassed.TotalMilliseconds);
			long msAvailTotal = (long) (env.Timeout * 1000);
			if(msPassed > msAvailTotal)
				return 0;
			return msAvailTotal - msPassed;
		}
		#endregion

		#region WaitOneObject
		public Exception WaitOneObject(ManualResetEvent evt)
		{
			TimeSpan msRemaining = new TimeSpan(RemainingTime() * 10000);
			if(evt.WaitOne(msRemaining, true))
				return null;
			return new Exception("Web request timed out after " + msRemaining.ToString() + ".");
		}
		#endregion

		#region ToString
		public override string ToString()
		{
			return ToString(null);
		}

		public string ToString(APIInfo[] skipList)
		{
			StringBuilder sb = new StringBuilder();
			sb.Append("<table border=1><tr><th>API</th><th>Passed</th><th>Failed</th><th>Avg Time</th><th>CompletionTime</th></tr>\n");
			APIInfo [] skips = skipList;
			bool fFailed = false, fSuccessful = false, fNotRun = false, fUnsupported = false;
			uint count = 0;
			if(skips == null)
				skips = new APIInfo[0];

			for(int i = 0; i < data.Length; ++i)
			{
				bool fFound = false;
				foreach(APIInfo a in skips)
					if(a == (APIInfo) i)
					{
						fFound = true;
						break;
					}
				if(fFound) continue;
				// Successful apis
				if(data[i].name != null && data[i].name != "" && env.APISupported((APIInfo) i) && data[i].calls > 0 && data[i].failed == 0)
				{
					TimeSpan avg = new TimeSpan(0);
					TimeSpan avg2 = new TimeSpan(0);
					if(data[i].calls != 0)
					{
						avg = (data[i].successtime + data[i].failedtime);
						avg2 = new TimeSpan((data[i].completions != 0) ? (data[i].completiontime.Ticks / data[i].completions) : 0);
						avg = new TimeSpan(avg.Ticks / data[i].calls);
					}
					string style = " STYLE='background-color:#80FF80' ";
					sb.Append("<tr").Append(style).Append("><td>").Append(data[i].name).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].successful.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].failed.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg2.ToString()).Append("</td>");
					sb.Append("</tr>\n");
					fSuccessful = true;
				}
			}
			if(fSuccessful)
				count++;

			// APIs not run
			for(int i = 0; i < data.Length; ++i)
			{
				bool fFound = false;
				foreach(APIInfo a in skips)
					if(a == (APIInfo) i)
					{
						fFound = true;
						break;
					}
				if(fFound) continue;
				if(data[i].name != null && data[i].name != "" && env.APISupported((APIInfo) i) && data[i].calls == 0)
				{
					TimeSpan avg = new TimeSpan(0);
					TimeSpan avg2 = new TimeSpan(0);
					if(data[i].calls != 0)
					{
						avg = (data[i].successtime + data[i].failedtime);
						avg2 = new TimeSpan((data[i].completions != 0) ? (data[i].completiontime.Ticks / data[i].completions) : 0);
						avg = new TimeSpan(avg.Ticks / data[i].calls);
					}
					string style = " STYLE='background-color:#FFFF80' ";
					sb.Append("<tr").Append(style).Append("><td>").Append(data[i].name).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].successful.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].failed.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg2.ToString()).Append("</td>");
					sb.Append("</tr>\n");
					fNotRun = true;
				}
			}
			if(fNotRun)
				count++;

			// Unsuccessful APIs
			for(int i = 0; i < data.Length; ++i)
			{
				bool fFound = false;
				foreach(APIInfo a in skips)
					if(a == (APIInfo) i)
					{
						fFound = true;
						break;
					}
				if(fFound) continue;
				if(data[i].name != null && data[i].name != "" && env.APISupported((APIInfo) i) && data[i].failed > 0)
				{
					TimeSpan avg = new TimeSpan(0);
					TimeSpan avg2 = new TimeSpan(0);
					if(data[i].calls != 0)
					{
						avg = (data[i].successtime + data[i].failedtime);
						avg2 = new TimeSpan((data[i].completions != 0) ? (data[i].completiontime.Ticks / data[i].completions) : 0);
						avg = new TimeSpan(avg.Ticks / data[i].calls);
					}
					string style = " STYLE='background-color:#FF8080' ";
					sb.Append("<tr").Append(style).Append("><td>").Append(data[i].name).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].successful.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].failed.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg2.ToString()).Append("</td>");
					sb.Append("</tr>\n");
					fFailed = true;
				}
			}
			if(fFailed)
				count++;

			// Unsupported APIs
			for(int i = 0; i < data.Length; ++i)
			{
				bool fFound = false;
				foreach(APIInfo a in skips)
					if(a == (APIInfo) i)
					{
						fFound = true;
						break;
					}
				if(fFound) continue;
				if(data[i].name != null && data[i].name != "" && !env.APISupported((APIInfo) i))
				{
					TimeSpan avg = new TimeSpan(0);
					TimeSpan avg2 = new TimeSpan(0);
					if(data[i].calls != 0)
					{
						avg = (data[i].successtime + data[i].failedtime);
						avg2 = new TimeSpan((data[i].completions != 0) ? (data[i].completiontime.Ticks / data[i].completions) : 0);
						avg = new TimeSpan(avg.Ticks / data[i].calls);
					}
					string style = " STYLE='background-color:#E0E0E0' ";
					sb.Append("<tr").Append(style).Append("><td>").Append(data[i].name).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].successful.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(data[i].failed.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg.ToString()).Append("</td>");
					sb.Append("<td align=center>").Append(avg2.ToString()).Append("</td>");
					sb.Append("</tr>\n");
					fUnsupported = true;
				}
			}
			if(fUnsupported)
				count++;

			uint ratio = 100/((count > 0) ? count : 1);
			sb.Append("<tr><td cellpadding=0 cellspacing=0 colspan=5><table width=100%><tr><td><b>Legend:<b></td>");
			if(fSuccessful)
				sb.Append("<td width=").Append(ratio.ToString()).Append("% STYLE='background-color:#80FF80' align=center>Successful</td>");
			if(fNotRun)
				sb.Append("<td width=").Append(ratio.ToString()).Append("% STYLE='background-color:#FFFF80' align=center>Not Run</td>");
			if(fFailed)
				sb.Append("<td width=").Append(ratio.ToString()).Append("% STYLE='background-color:#FF8080' align=center>Failed</td>");
			if(fUnsupported)
				sb.Append("<td width=").Append(ratio.ToString()).Append("% STYLE='background-color:#E0E0E0' align=center>Unsupported</td>");
			sb.Append("</tr></table></tr>\n");
			sb.Append("</table>\n");
			return sb.ToString();
		}
		#endregion

	}

	class asyncCallbackObject
	{
		#region Member Variables
		public static DateTime dtBase = new DateTime(1980, 1, 1, 0, 0, 0, 0);
		public ManualResetEvent sync = null;
		public object res = null;
		public uint ValidSeconds = 0;
		public Exception e = null;
		public DateTime dtCompleted = new DateTime(1980, 1, 1, 0, 0, 0, 0);
		#endregion

		public asyncCallbackObject() {sync = new ManualResetEvent(false);}
		public void Set()
		{
			dtCompleted = DateTime.Now;
			sync.Set();
		}
	};
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\AlertsPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Alerts;

namespace WSHelper
{
	public class AlertsPrime : Alerts.Alerts
	{
		CallStatistics cs = null;

		public AlertsPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Alerts/Alerts.asmx");
		}

		protected AlertsPrime(String url) {}
		protected AlertsPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Alerts functions (5)
		#region public new bool SubscriberExists(byte[] WebID)
		[OneWayAttribute()]
		public void CBSubscriberExists(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndSubscriberExists(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SubscriberExists failed.", e);
			}
			obj.Set();
		}

		public new bool SubscriberExists(byte[] WebID)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSubscriberExists);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSubscriberExists(WebID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Alerts_SubscriberExists, start, cbres.dtCompleted);
			return (bool) cbres.res;
		}
		#endregion

		#region public new ExistingSubscriptions Subscribe(bool InitializeSubscriber, byte[] WebID, string GamerTag, Alerts.AddSubscriptions alerts)
		[OneWayAttribute()]
		public void CBSubscribe(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndSubscribe(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Subscribe failed.", e);
			}
			obj.Set();
		}

		public new ExistingSubscriptions Subscribe(bool InitializeSubscriber, byte[] WebID, string GamerTag, Alerts.AddSubscriptions alerts)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSubscribe);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSubscribe(InitializeSubscriber, WebID, GamerTag, alerts, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Alerts_Subscribe, start, cbres.dtCompleted);
			return (ExistingSubscriptions) cbres.res;
		}
		#endregion

		#region public new uint Unsubscribe(bool DeleteSubscriber, bool DeleteAccountSubscriptions, byte[] WebID, string GamerTag, Alerts.ExistingSubscriptions alerts)
		[OneWayAttribute()]
		public void CBUnsubscribe(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndUnsubscribe(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Unsubscribe failed.", e);
			}
			obj.Set();
		}

		public new uint Unsubscribe(bool DeleteSubscriber, bool DeleteAccountSubscriptions, byte[] WebID, string GamerTag, Alerts.ExistingSubscriptions alerts)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBUnsubscribe);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginUnsubscribe(DeleteSubscriber, DeleteAccountSubscriptions, WebID, GamerTag, alerts, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Alerts_Unsubscribe, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new ExistingSubscriptions EnumerateSubscriptions(byte[] WebID, string GamerTag)
		[OneWayAttribute()]
		public void CBEnumerateSubscriptions(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndEnumerateSubscriptions(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumerateSubscriptions failed.", e);
			}
			obj.Set();
		}

		public new ExistingSubscriptions EnumerateSubscriptions(byte[] WebID, string GamerTag)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumerateSubscriptions);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumerateSubscriptions(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Alerts_EnumerateSubscriptions, start, cbres.dtCompleted);
			return (ExistingSubscriptions) cbres.res;
		}
		#endregion

		#region public new uint ScheduleContentAlert(byte[] WebID, uint type, string locale, string message, DateTime deliveryTime)
		[OneWayAttribute()]
		public void CBScheduleContentAlert(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndScheduleContentAlert(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to ScheduleContentAlert failed.", e);
			}
			obj.Set();
		}

		public new uint ScheduleContentAlert(byte[] WebID, uint type, string locale, string message, DateTime deliveryTime)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBScheduleContentAlert);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginScheduleContentAlert(WebID, type, locale, message, deliveryTime, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Alerts_ScheduleContentAlert, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\InfoPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using GeneralInfo;

namespace WSHelper
{
	public class TitleInfoList
	{
		public TitlePrivilegeInfo[] info;
		public uint ValidSeconds;
	}

	public class InfoPrime : GeneralInfo.GeneralInfo
	{
		CallStatistics cs = null;

		#region Constructors
		public InfoPrime(CallStatistics s)
		{
			cs = s;
			Url = s.Environment.ToUri("/GeneralInfo/GeneralInfo.asmx");
		}

		protected InfoPrime(String url) {}
		protected InfoPrime() {}
		#endregion

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}


		#region public TitleInfoList GetTitleList()
		// GeneralInfo functions (1)
		[OneWayAttribute()]
		public void CBGetTitleList(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTitleList(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTitleList failed.", e);
			}
			obj.Set();
		}

		public TitleInfoList GetTitleList()
		{
			TitleInfoList res = new TitleInfoList();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTitleList);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTitleList(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.GeneralInfo_GetTitleList, start, cbres.dtCompleted);

			res.ValidSeconds = cbres.ValidSeconds;
			res.info = (TitlePrivilegeInfo[]) cbres.res;
			return res;
		}
		#endregion

		#region public new LinkedAccount[] LinkedGamerTags(byte[] WebID)
		[OneWayAttribute()]
		public void CBLinkedGamerTags(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndLinkedGamerTags(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GeneralInfo.LinkedGamerTags failed.", e);
			}
			obj.Set();
		}

		public new LinkedAccount[] LinkedGamerTags(byte[] WebID)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBLinkedGamerTags);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginLinkedGamerTags(WebID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.GeneralInfo_LinkedGamerTags, start, cbres.dtCompleted);
			if(cbres.res == null)
				return null;
			LinkInfo[] li = (LinkInfo []) cbres.res;
			LinkedAccount[] la = new LinkedAccount[li.Length];
			for(int i = 0; i < li.Length; ++i)
			{
				la[i] = new LinkedAccount();
				la[i].GamerTag = li[i].GamerTag;
				la[i].Owner = li[i].Owner;
			}
			return la;
		}
		#endregion

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

!include makefile.wsdl.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\Passport.cs ===
using System;
using System.Web.Security;

namespace WSHelper
{
	/// <summary>
	/// Summary description for Passport.
	/// </summary>
	public class Passport
	{
		public bool fValid = false;
		public bool fExpired = false;
		public bool fFromNetwork = false;
		public bool fAuthed = false;
		public bool fKid = false;
		public byte[] WebID;
		public string sNickname = "";
		public string sName = "";
		public string sEmailAddress = "";
		public string sCountry = "";
		public long lRegion = 0;
		public short shLang = 0;
		public string sZIP = "";
		public string sTimeZone = "";
		public string sGender = "";
		public string sFirstName = "";
		public string sLastName = "";
		public string sHexPUID = "";
		public string sLogoTag = "";
		public long lFlags = 0;
		public System.DateTime dtBirthDate;
		public string sOccupation = "";
		System.Exception e = null;

		public int ppTimeout = -1;

		public Passport(PassportIdentity oMgr, int TimeoutSeconds, string sReturnURL)
		{
			try
			{
				if( null == oMgr )
				{
					fValid = false;
					return;
				}

				ppTimeout = TimeoutSeconds;
				sLogoTag = oMgr.LogoTag2(sReturnURL, ppTimeout, true, null, -1, false, null, -1, false);

				if (oMgr.GetFromNetworkServer) 
				{
					fFromNetwork = true;
					fValid = true;
					return;
				}

				if (oMgr.HasTicket) 
				{ 
					fAuthed = true;
					sHexPUID = oMgr.HexPUID;
					WebID = Helpers.PuidToArray(sHexPUID);
					sName = oMgr.Name;
					sFirstName = oMgr["FirstName"];
					sLastName = oMgr["LastName"];
					sNickname = oMgr["Nickname"];
					sEmailAddress = oMgr["PREFERREDEMAIL"];
					sCountry = oMgr["Country"];
					lRegion = long.Parse(oMgr["Region"]);
					shLang = short.Parse(oMgr["Lang_Preference"]);
					sZIP = oMgr["PostalCode"];
					sTimeZone = oMgr["TimeZone"];
					sGender = oMgr["Gender"];
					dtBirthDate = System.DateTime.Parse(oMgr["BirthDate"]);
					sOccupation = oMgr["Occupation"];
					fKid = (long.Parse(oMgr["Flags"]) & (0x180)) == 0x080;
					lFlags = long.Parse(oMgr["Flags"]);
				}

				if (!oMgr.GetIsAuthenticated(ppTimeout, true, false))
				{
					fExpired = true;
				}

				fValid = true;
			}
			catch(System.Exception f)
			{
				e = f;
				fValid = false;
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\makefile.wsdl.inc ===
!if defined(PASS0ONLY) || defined(VSTUDIO_PREBUILD)

WSDL_SRCS=$(INETROOT)\private\server\webcache\wsdl

$(O)\WSDL_FILES:  $(O)\Alerts.cs $(O)\GeneralInfo.cs $(O)\Messaging.cs $(O)\Presence.cs $(O)\Query.cs $(O)\Signature.cs $(O)\Stats.cs $(O)\Storage.cs $(O)\UserAccount.cs $(O)\Teams.cs $(O)\ToolsMgmt.cs
	touch -c $@

$(O)\Alerts.cs : wsdl.exe $(WSDL_SRCS)\Alerts.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Alerts /o:$@ $(WSDL_SRCS)\Alerts.wsdl

$(O)\GeneralInfo.cs : wsdl.exe $(WSDL_SRCS)\GeneralInfo.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:GeneralInfo /o:$@ $(WSDL_SRCS)\GeneralInfo.wsdl

$(O)\Messaging.cs : wsdl.exe $(WSDL_SRCS)\Messaging.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Messaging /o:$@ $(WSDL_SRCS)\Messaging.wsdl

$(O)\Presence.cs : wsdl.exe $(WSDL_SRCS)\Presence.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Presence /o:$@ $(WSDL_SRCS)\Presence.wsdl

$(O)\Query.cs : wsdl.exe $(WSDL_SRCS)\Query.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Query /o:$@ $(WSDL_SRCS)\Query.wsdl

$(O)\Signature.cs : wsdl.exe $(WSDL_SRCS)\Signature.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Signature /o:$@ $(WSDL_SRCS)\Signature.wsdl

$(O)\Storage.cs : wsdl.exe $(WSDL_SRCS)\Storage.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Storage /o:$@ $(WSDL_SRCS)\Storage.wsdl

$(O)\Stats.cs : wsdl.exe $(WSDL_SRCS)\Stats.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Stats /o:$@ $(WSDL_SRCS)\Stats.wsdl

$(O)\Teams.cs : wsdl.exe $(WSDL_SRCS)\Teams.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:Teams /o:$@ $(WSDL_SRCS)\Teams.wsdl

$(O)\ToolsMgmt.cs : wsdl.exe $(WSDL_SRCS)\ToolsMgmt.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:ToolsManagement /o:$@ $(WSDL_SRCS)\ToolsMgmt.wsdl

$(O)\UserAccount.cs : wsdl.exe $(WSDL_SRCS)\UserAccount.wsdl
	IF NOT EXIST $(O) mkdir $(O)
	wsdl.exe /n:UserAccount /o:$@ $(WSDL_SRCS)\UserAccount.wsdl

!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\MessagingPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Messaging;

namespace WSHelper
{
	public class MessagingPrime : Messaging.MessagingImpl
	{
		CallStatistics cs = null;

		public MessagingPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Messaging/Messaging.asmx");
		}


		//
		// Message Property Types
		//
		public const byte XONLINE_MSG_PROP_TYPE_NULL                  = 1;   // The property contains no data
		public const byte XONLINE_MSG_PROP_TYPE_I1                    = 2;   // The property value points to 8-bits of data
		public const byte XONLINE_MSG_PROP_TYPE_I2                    = 3;   // The property value points to 16-bits of data
		public const byte XONLINE_MSG_PROP_TYPE_I4                    = 4;   // The property value points to 32-bits of data
		public const byte XONLINE_MSG_PROP_TYPE_I8                    = 5;   // The property value points to 64-bits of data
		public const byte XONLINE_MSG_PROP_TYPE_STRING                = 6;   // The property value points to a NULL-terminated wide character string
		public const byte XONLINE_MSG_PROP_TYPE_FILETIME              = 7;   // The property value points to a time value
		public const byte XONLINE_MSG_PROP_TYPE_BINARY                = 8;   // The property value points to a binary blob that fits in the message details
		public const byte XONLINE_MSG_PROP_TYPE_ATTACHMENT            = 9;   // The property value points to a binary blob (or directory path, depending on attachment flags) that will be uploaded to storage during XOnlineMessageSend
		public const byte XONLINE_MSG_PROP_TYPE_BOOL                  = 10;  // The property value points to a boolean value (1=TRUE, 0=FALSE)
		public const byte XONLINE_MSG_PROP_TYPE_STRING_ID             = 11;  // The property value contains a string ID whose text can be requested from the string service

		protected MessagingPrime(String url) {}
		protected MessagingPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Signature functions (15)
		#region public new uint EnumMessages(byte [] WebID, string GamerTag, out WCMessageSummary [] Summary)
		[OneWayAttribute()]
		public void CBEnumMessages(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				Messaging.WCMessageSummary [] summary;
				object [] data = new object[2];
				data[0] = EndEnumMessages(ar, out summary);
				data[1] = summary;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumMessages failed.", e);
			}
			obj.Set();
		}

		public new uint EnumMessages(byte [] WebID, string GamerTag, out WCMessageSummary [] Summary)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumMessages);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumMessages(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_EnumMessages, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Summary = (WCMessageSummary[]) data[1];
			return (uint) data[0];
		}
		#endregion

		#region public new uint GetMessageDetails(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, out WCMessageSummary Summary, out WCMessageDetails Details)
		[OneWayAttribute()]
		public void CBGetMessageDetails(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				Messaging.WCMessageSummary summary;
				Messaging.WCMessageDetails details;
				object [] data = new object[3];
				data[0] = EndGetMessageDetails(ar, out summary, out details);
				data[1] = summary;
				data[2] = details;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetMessageDetails failed.", e);
			}
			obj.Set();
		}

		public new uint GetMessageDetails(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, out WCMessageSummary Summary, out WCMessageDetails Details)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetMessageDetails);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetMessageDetails(WebID, GamerTag, MessageID, SetFlags, UnsetFlags, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_GetMessageDetails, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Summary = (WCMessageSummary) data[1];
			Details = (WCMessageDetails) data[2];
			return (uint) data[0];
		}
		#endregion

		#region public new uint DeleteMessage(byte [] WebID, string GamerTag, uint MessageID, WCDeleteMsgFlags Flags)
		[OneWayAttribute()]
		public void CBDeleteMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndDeleteMessage(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteMessage failed.", e);
			}
			obj.Set();
		}

		public new uint DeleteMessage(byte [] WebID, string GamerTag, uint MessageID, WCDeleteMsgFlags Flags)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteMessage(WebID, GamerTag, MessageID, Flags, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_DeleteMessage, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new uint SendMessage(byte [] WebID, string GamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipients, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		[OneWayAttribute()]
		public void CBSendMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				Messaging.WCRecipientResult [] recips;
				object [] data = new object[2];
				data[0] = EndSendMessage(ar, out recips);
				data[1] = recips;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SendMessage failed.", e);
			}
			obj.Set();
		}

		public new uint SendMessage(byte [] WebID, string GamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipients, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSendMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSendMessage(WebID, GamerTag, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipients, Details, Attachment, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_SendMessage, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			RecipResult = (WCRecipientResult []) data[1];
			return (uint) data[0];
		}
		#endregion

		#region public new uint RevokeMessage(byte [] WebID, string GamerTag, WCRecipientResult[] RecipResult)
		[OneWayAttribute()]
		public void CBRevokeMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndRevokeMessage(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RevokeMessage failed.", e);
			}
			obj.Set();
		}

		public new uint RevokeMessage(byte [] WebID, string GamerTag, WCRecipientResult[] RecipResult)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRevokeMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRevokeMessage(WebID, GamerTag, RecipResult, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_RevokeMessage, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new uint DeleteUserTitle(byte [] WebID, string GamerTag, uint TitleID)
		[OneWayAttribute()]
		public void CBDeleteUserTitle(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndDeleteUserTitle(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteUserTitle failed.", e);
			}
			obj.Set();
		}

		public new uint DeleteUserTitle(byte [] WebID, string GamerTag, uint TitleID)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteUserTitle);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteUserTitle(WebID, GamerTag, TitleID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_DeleteUserTitle, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new uint EnumUserTitles(byte [] WebID, string GamerTag, out WCUserTitle[] Titles)
		[OneWayAttribute()]
		public void CBEnumUserTitles(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				WCUserTitle[] titles;
				object [] data = new object[2];
				data[0] = EndEnumUserTitles(ar, out titles);
				data[1] = titles;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumUserTitles failed.", e);
			}
			obj.Set();
		}

		public new uint EnumUserTitles(byte [] WebID, string GamerTag, out WCUserTitle[] Titles)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumUserTitles);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumUserTitles(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_EnumUserTitles, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Titles = (WCUserTitle[]) data[1];
			return (uint) data[0];
		}
		#endregion

		#region public new uint SetMessageFlags(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags)
		[OneWayAttribute()]
		public void CBSetMessageFlags(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndSetMessageFlags(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SetMessageFlags failed.", e);
			}
			obj.Set();
		}

		public new uint SetMessageFlags(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSetMessageFlags);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSetMessageFlags(WebID, GamerTag, MessageID, SetFlags, UnsetFlags, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_SetMessageFlags, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new uint EnumTitleWideMessages(uint TitleID, out WCTitleWideMessageSummary[] Summary)
		[OneWayAttribute()]
		public void CBEnumTitleWideMessages(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				WCTitleWideMessageSummary[] summary;
				object [] data = new object[2];
				data[0] = EndEnumTitleWideMessages(ar, out summary);
				data[1] = summary;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumTitleWideMessages failed.", e);
			}
			obj.Set();
		}

		public new uint EnumTitleWideMessages(uint TitleID, out WCTitleWideMessageSummary[] Summary)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumTitleWideMessages);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumTitleWideMessages(TitleID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_EnumTitleWideMessages, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Summary = (WCTitleWideMessageSummary[]) data[1];
			return (uint) data[0];
		}
		#endregion

		#region public new uint GetTitleWideMessageDetails(uint TitleID, uint MessageID, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details)
		[OneWayAttribute()]
		public void CBGetTitleWideMessageDetails(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				WCTitleWideMessageSummary summary;
				Messaging.WCMessageDetails details;
				object [] data = new object[3];
				data[0] = EndGetTitleWideMessageDetails(ar, out summary, out details);
				data[1] = summary;
				data[2] = details;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTitleWideMessageDetails failed.", e);
			}
			obj.Set();
		}

		public new uint GetTitleWideMessageDetails(uint TitleID, uint MessageID, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTitleWideMessageDetails);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTitleWideMessageDetails(TitleID, MessageID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_GetTitleWideMessageDetails, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Summary = (WCTitleWideMessageSummary) data[1];
			Details = (WCMessageDetails) data[2];
			return (uint) data[0];
		}
		#endregion

		#region public new uint DeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags)
		[OneWayAttribute()]
		public void CBDeleteTitleWideMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndDeleteTitleWideMessage(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteTitleWideMessage failed.", e);
			}
			obj.Set();
		}

		public new uint DeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteTitleWideMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteTitleWideMessage(TitleID, MessageID, Flags, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_DeleteTitleWideMessage, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new uint SendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] MultiLangString, WCMessageAttachment[] Attachment, out ushort Delay, out uint MessageID)
		[OneWayAttribute()]
		public void CBSendTitleWideMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				ushort delay;
				uint mid;
				object [] data = new object[3];
				data[0] = EndSendTitleWideMessage(ar, out delay, out mid);
				data[1] = delay;
				data[2] = mid;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SendTitleWideMessage failed.", e);
			}
			obj.Set();
		}

		public new uint SendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] MultiLangString, WCMessageAttachment[] Attachment, out ushort Delay, out uint MessageID)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSendTitleWideMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSendTitleWideMessage(Sender, SenderContext, SentTime, Region, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Description, Details, MultiLangString, Attachment, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_SendTitleWideMessage, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			Delay = (ushort) data[1];
			MessageID = (uint) data[2];
			return (uint) data[0];
		}
		#endregion

		#region public new uint SendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		[OneWayAttribute()]
		public void CBSendTitleUserMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				WCRecipientResult[] recips;
				object [] data = new object[2];
				data[0] = EndSendTitleUserMessage(ar, out recips);
				data[1] = recips;
				obj.res = data;
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SendTitleUserMessage failed.", e);
			}
			obj.Set();
		}

		public new uint SendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSendTitleUserMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSendTitleUserMessage(Sender, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_SendTitleUserMessage, start, cbres.dtCompleted);
			object [] data = (object []) cbres.res;
			RecipResult = (WCRecipientResult[]) data[1];
			return (uint) data[0];
		}
		#endregion

		#region public new uint RevokeTitleUserMessage(WCRecipientResult[] RecipResult)
		[OneWayAttribute()]
		public void CBRevokeTitleUserMessage(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndRevokeTitleUserMessage(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RevokeTitleUserMessage failed.", e);
			}
			obj.Set();
		}

		public new uint RevokeTitleUserMessage(WCRecipientResult[] RecipResult)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRevokeTitleUserMessage);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRevokeTitleUserMessage(RecipResult, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_RevokeTitleUserMessage, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new string GetMessageString(uint TitleID, uint StringID, string Locale)
		[OneWayAttribute()]
		public void CBGetMessageString(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetMessageString(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetMessageString failed.", e);
			}
			obj.Set();
		}

		public new string GetMessageString(uint TitleID, uint StringID, string Locale)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetMessageString);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetMessageString(TitleID, StringID, Locale, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Messaging_GetMessageString, start, cbres.dtCompleted);
			return (string) cbres.res;
		}
		#endregion
	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\SignaturePrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Signature;

namespace WSHelper
{
	public class WSSignatureData
	{
		public byte [] Digest;
		public uint TitleID;
		public byte [] Signature;
		public uint HR;
		public uint HRExpected;
		public bool Checked;
	}

	public class SignaturePrime : Signature.Signature
	{
		CallStatistics cs = null;

		public SignaturePrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Signature/Signature.asmx");
		}

		protected SignaturePrime(String url) {}
		protected SignaturePrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Signature functions (2)
		#region public new XSigCreateSignatureResponse [] CreateSignature(uint titleID, string adminID, XSigCreateSignatureRequest [] sigData)
		[OneWayAttribute()]
		public void CBCreateSignature(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCreateSignature(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to CreateSignature failed.", e);
			}
			obj.Set();
		}

		public new XSigCreateSignatureResponse [] CreateSignature(uint titleID, string adminID, XSigCreateSignatureRequest [] sigData)
		{
			XSigCreateSignatureResponse [] res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCreateSignature);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCreateSignature(titleID, adminID, sigData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Signature_CreateSignature, start, cbres.dtCompleted);
			res = (XSigCreateSignatureResponse []) cbres.res;
			return res;
		}
		#endregion

		#region public new uint [] VerifySignature(XSigVerifySignatureRequest [] sigData)
		[OneWayAttribute()]
		public void CBVerifySignature(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndVerifySignature(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to VerifySignature failed.", e);
			}
			obj.Set();
		}

		public new uint [] VerifySignature(XSigVerifySignatureRequest [] sigData)
		{
			uint [] res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBVerifySignature);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginVerifySignature(sigData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Signature_VerifySignature, start, cbres.dtCompleted);
			res = (uint []) cbres.res;
			return res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\LSP.cs ===
using System;
using System.Net;
using System.Runtime.Remoting.Messaging;
using System.IO;

namespace WSHelper
{
	/// <summary>
	/// Key data values.
	/// </summary>
	public struct KeyData
	{
		public uint     _keyVersion;
		public byte[]   _key;
	}

	/// <summary>
	/// SiteInfoReply:  Response to site info request.
	/// </summary>
	#region public class SiteInfoReply
	public class SiteInfoReply
	{
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="_maxNumberOfKeys">Number of values expected in the array.</param>
		public SiteInfoReply( )
		{
			_numberOfKeys = 0;
			_curFileTime = DateTime.FromFileTime(0);
            
			// create the array of keys
			_keys = null;

		}

		/// <summary>
		/// Constructs the binary form to be returned.
		/// </summary>
		/// <returns>byte array representation of this class.</returns>
		public void ReadBinary( Stream s )
		{
			BinaryReader br = new BinaryReader( s );

			// read the expected time and number of keys.
			_curFileTime = DateTime.FromFileTime(br.ReadInt64( ));
			_numberOfKeys = br.ReadUInt32( );

			// set the array size.
			_keys = new KeyData[_numberOfKeys];
			for ( int x = 0; x < _numberOfKeys; x++ )
			{
				_keys[x]._keyVersion = br.ReadUInt32( );
				// all key sizes are 16 bytes.
				_keys[x]._key = br.ReadBytes( 16 );
			}

			br.Close();
		}

		public override string ToString()
		{
			string result = "";
            
			result = "TIME: " + _curFileTime.ToString() + "\n";
			result += "Number Of Keys: " + _numberOfKeys + "\n";
			result += "Keys: \n";

			// got through the list and print out all the keys.
			for ( int x = 0; x < _numberOfKeys; x++ )
			{
				_keys[x]._key[0].ToString("X");
				result += "Version: " + _keys[x]._keyVersion + " Value: 0x";
                
				// print out each byte as a hex value.
				for (int y = 0; y < _keys[x]._key.Length; y++ )
				{
					result += _keys[x]._key[y].ToString("X");
				}

				result += "\n";
			}

			return result;
		}

		public KeyData [] Keys
		{
			get {return _keys;}
		}
		public DateTime FileTime
		{
			get {return _curFileTime;}
		}

		DateTime    _curFileTime;
		uint        _numberOfKeys;
		KeyData[]   _keys;
	}
	#endregion

	/// <summary>
	/// Summary description for LSP.
	/// </summary>
	public class LSP
	{
		CallStatistics cs = null;
		public const uint c_GAMERTAG_SIZE = 16;

		public LSP(CallStatistics s)
		{
			cs = s;
		}

		protected LSP(String url) {}
		protected LSP() {}

		#region CBGetHttpWebResponse
		[OneWayAttribute()]
		public void CBGetHttpWebResponse(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				HttpWebRequest wr = (HttpWebRequest) obj.res;
				obj.res = wr.EndGetResponse(ar);
			}
			catch(Exception e)
			{
				obj.e = e;
			}
			obj.Set();
		}
		#endregion

		// LSP functions (4 so far)
		#region public SiteInfoReply GetSiteInfo(uint TitleID)
		public SiteInfoReply GetSiteInfo(uint TitleID)
		{
			SiteInfoReply res = null;
			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/getsiteinfo.aspx")));

			wr.ContentType = "xon/0";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();

			BinaryWriter bs = new BinaryWriter(body, System.Text.Encoding.UTF8);
			bs.Write(TitleID);
			bs.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			body.Close();

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);
			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				try
				{
					res = new SiteInfoReply();
					res.ReadBinary(resp.GetResponseStream());
				}
				catch(System.Exception e)
				{
					cbres.e = e;
				}
			}

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_GetSiteInfo, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public ulong [] LookupGamerTags(string [] GamerTags)
		public ulong [] LookupGamerTags(string [] GamerTags)
		{
			ulong [] res = null;
			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/LookupGamerTag.aspx")));

			wr.ContentType = "xon/0";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();

			BinaryWriter bs = new BinaryWriter(body, System.Text.Encoding.UTF8);
			if(GamerTags != null)
			{
				bs.Write(GamerTags.Length);
				foreach(string s in GamerTags)
				{
					byte[] binaryGT = System.Text.UnicodeEncoding.Unicode.GetBytes( s.PadRight( (int)c_GAMERTAG_SIZE, (char)0 ) );
					bs.Write(binaryGT, 0, binaryGT.Length);
				}
			}
			else
			{
				bs.Write((uint) 0);
			}
			bs.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			body.Close();

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				long len = resp.ContentLength;
				body = resp.GetResponseStream();
				BinaryReader br = new BinaryReader(body);
				if(len < 4)
				{
					cbres.e = new Exception("The response from the server is too short.");
					goto done;
				}
				uint count = br.ReadUInt32();
				if(count * 8 + 4 != len)
				{
					cbres.e = new Exception("The response from the server is invalid --> The length and puid count don't agree.");
					goto done;
				}

				res = new ulong[count];
				for(uint i = 0; i < count; ++i)
				{
					res[i] = br.ReadUInt64();
				}
			}
			done:
			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_LookupGamerTags, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public string [] LookupPuids(ulong [] Puids)
		public string [] LookupPuids(ulong [] Puids)
		{
			string [] res = null;
			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/LookupPuid.aspx")));

			wr.ContentType = "xon/0";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();

			BinaryWriter bs = new BinaryWriter(body, System.Text.Encoding.UTF8);
			if(Puids != null)
			{
				bs.Write(Puids.Length);
				foreach(ulong u in Puids)
				{
					bs.Write(u);
				}
			}
			else
			{
				bs.Write((uint) 0);
			}
			bs.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			body.Close();

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				long len = resp.ContentLength;
				body = resp.GetResponseStream();
				BinaryReader br = new BinaryReader(body);
				if(len < 4)
				{
					cbres.e = new Exception("The response from the server is too short.");
					goto done;
				}
				uint count = br.ReadUInt32();
				if(count * c_GAMERTAG_SIZE * 2 + 4 != len)
				{
					cbres.e = new Exception("The response from the server is invalid --> The length and gamertag count don't agree.");
					goto done;
				}

				res = new string[count];
				for(uint i = 0; i < count; ++i)
				{
					byte[] binaryGT = br.ReadBytes((int) c_GAMERTAG_SIZE * 2);
					int l = binaryGT.Length;
					for(uint j = 0; j < c_GAMERTAG_SIZE * 2; j += 2)
					{
						if(binaryGT[j] == 0 && binaryGT[j + 1] == 0)
						{
							l = (int) j;
							break;
						}
					}
					res[i] = System.Text.UnicodeEncoding.Unicode.GetString(binaryGT, 0, l);
				}
			}
			done:
			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_LookupPuids, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public bool GetSitePuids(out ulong MachinePuid, out ulong UserPuid)
		public bool GetSitePuids(out ulong MachinePuid, out ulong UserPuid)
		{
			bool res = false;
			MachinePuid = 0;
			UserPuid = 0;

			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/GetSitePuids.aspx")));

			wr.ContentType = "xon/0";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();
			body.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				long len = resp.ContentLength;
				body = resp.GetResponseStream();
				BinaryReader br = new BinaryReader(body);
				if(len != 16)
				{
					cbres.e = new Exception("The response from the server isn't 16 bytes.");
					goto done;
				}

				MachinePuid = br.ReadUInt64();
				UserPuid = br.ReadUInt64();
				res = true;
			}
			done:
				cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_GetSitePuids, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public bool MatchHost(uint TitleID) // ** Incomplete **
		public bool MatchHost(uint TitleID)
		{
			bool res = true;

			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/ForwardRequest.aspx")));

			wr.ContentType = "xon/6";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Headers.Add("xrl", "/xmatch/xmatchhost.srf");
			wr.Headers.Add("title-id", TitleID.ToString("X8"));
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();
			BinaryWriter bw = new BinaryWriter(body);
			bw.Write((ulong) 0);
			bw.Close();
			body.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);
		
			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				Stream s = resp.GetResponseStream();
				byte [] b = new byte[resp.ContentLength];
				s.Read(b, 0, (int) resp.ContentLength);
				string toLog = System.Text.UTF8Encoding.UTF8.GetString(b);
				System.Diagnostics.Debug.WriteLine(toLog);
				goto done;
			}

			done:
			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_MatchHost, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public bool MatchHostDelete(uint TitleID) // ** Incomplete **
		public bool MatchHostDelete(uint TitleID)
		{
			bool res = true;

			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/ForwardRequest.aspx")));

			wr.ContentType = "xon/6";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Headers.Add("xrl", "/xmatch/xmatchhostdelete.srf");
			wr.Headers.Add("title-id", TitleID.ToString("X8"));
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();
			BinaryWriter bw = new BinaryWriter(body);
			bw.Write((ulong) 0);
			bw.Close();
			body.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);
		
			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				Stream s = resp.GetResponseStream();
				byte [] b = new byte[resp.ContentLength];
				s.Read(b, 0, (int) resp.ContentLength);
				string toLog = System.Text.UTF8Encoding.UTF8.GetString(b);
				System.Diagnostics.Debug.WriteLine(toLog);
				goto done;
			}

			done:
				cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_MatchHostDelete, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public bool QueryAdd(uint TitleID) // ** Incomplete **
		public bool QueryAdd(uint TitleID)
		{
			bool res = true;

			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/ForwardRequest.aspx")));

			wr.ContentType = "xon/13";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Headers.Add("xrl", "/xqry/add.ashx");
			wr.Headers.Add("title-id", TitleID.ToString("X8"));
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();
			BinaryWriter bw = new BinaryWriter(body);
			bw.Write((ulong) 0);
			bw.Close();
			body.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);
		
			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				Stream s = resp.GetResponseStream();
				byte [] b = new byte[resp.ContentLength];
				s.Read(b, 0, (int) resp.ContentLength);
				string toLog = System.Text.UTF8Encoding.UTF8.GetString(b);
				System.Diagnostics.Debug.WriteLine(toLog);
				goto done;
			}

			done:
				cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_QueryAdd, start, cbres.dtCompleted);
			return res;
		}
		#endregion

		#region public bool QueryRemove(uint TitleID) // ** Incomplete **
		public bool QueryRemove(uint TitleID)
		{
			bool res = true;

			HttpWebRequest wr = (HttpWebRequest) cs.GetWebRequest(null, (HttpWebRequest) WebRequest.Create(cs.Environment.ToUri("/liveproxy/ForwardRequest.aspx")));

			wr.ContentType = "xon/13";
			wr.UserAgent = "Xbox Live Verify Partner Tool";
			wr.Headers.Add("xrl", "/xqry/remove.ashx");
			wr.Headers.Add("title-id", TitleID.ToString("X8"));
			wr.Method = "POST";
			Stream body = wr.GetRequestStream();
			BinaryWriter bw = new BinaryWriter(body);
			bw.Write((ulong) 0);
			bw.Close();
			body.Close();
			
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetHttpWebResponse);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			cbres.res = wr;
			async = wr.BeginGetResponse(cb, cbres);
			f = cs.WaitOneObject(cbres.sync);
		
			if(cbres.e == null)
			{
				HttpWebResponse resp = (HttpWebResponse) cbres.res;
				Stream s = resp.GetResponseStream();
				byte [] b = new byte[resp.ContentLength];
				s.Read(b, 0, (int) resp.ContentLength);
				string toLog = System.Text.UTF8Encoding.UTF8.GetString(b);
				System.Diagnostics.Debug.WriteLine(toLog);
				goto done;
			}

			done:
				cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.LiveProxy_QueryRemove, start, cbres.dtCompleted);
			return res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\SGWrapper.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

//using SoapSniff;

using UserAccount;
using GeneralInfo;
using Messaging;
using Presence;
using Stats;
using Signature;
using Query;
using Alerts;
using Teams;
using Storage;

namespace WSHelper
{
	
	public class LinkedAccount
	{
		public string GamerTag;
		public bool Owner;
	};

	public class WSWrap : CallStatistics
	{
		#region Constructors & Members
		protected InfoPrime info;
		protected StatsPrime stat;
		protected FriendsPrime pres;
		protected UsersPrime acct;
		protected SignaturePrime vsig;
		protected QueryPrime comp;
		protected AlertsPrime alrt;
		protected MessagingPrime msgs;
		protected LSP lsp;
		protected StoragePrime stor;
		protected TeamsPrime team;

		protected WSWrap() {lsp = null; info = null; stat = null; pres = null; acct = null; vsig = null; comp = null; alrt = null; msgs = null;}
		static public WSWrap GetWrapper(WSEnvironment e, DateTime dtStart)
		{
			if(e == null)
				throw new Exception("Environment is null!");
			WSWrap ws = new WSWrap();
			ws.env = e;
			ws.dtStartTime = dtStart;
			ws.stat = new StatsPrime(ws);
			ws.info = new InfoPrime(ws);
			ws.pres = new FriendsPrime(ws);
			ws.acct = new UsersPrime(ws);
			ws.vsig = new SignaturePrime(ws);
			ws.comp = new QueryPrime(ws);
			ws.alrt = new AlertsPrime(ws);
			ws.msgs = new MessagingPrime(ws);
			ws.lsp = new LSP(ws);
			ws.team = new TeamsPrime(ws);
			ws.stor = new StoragePrime(ws);
			return ws;
		}
		#endregion

		#region Stats
		public StatsDetailedLB EnumerateLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			return stat.EnumerateLB(TitleID, LBID, StartIndex, MaxEntries);
		}

		public StatsRawLB EnumerateLBRaw(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			return stat.EnumerateLBRaw(TitleID, LBID, StartIndex, MaxEntries);
		}

		public StatsDetailedLB GetLBDetailsForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		{
			return stat.GetLBDetailsForGamerTags(TitleID, LBID, GamerTagList);
		}

		public StatsFriendsLB GetLBForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		{
			return stat.GetLBForGamerTags(TitleID, LBID, GamerTagList);
		}

		public StatsLBList GetLBList(uint TitleID)
		{
			return stat.GetLBList(TitleID);
		}

		public StatsDetailedLB GetLBNearGamerTag(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow)
		{
			return stat.GetLBNearGamerTag(TitleID, LBID, GamerTag, NumAbove, NumBelow);
		}

		public StatsLBList GetLBListByType(uint TitleID, LBType LeaderboardType)
		{
			return stat.GetLBListByType(TitleID, LeaderboardType);
		}

		public StatsDetailedLB EnumerateTeamLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			return stat.EnumerateTeamLB(TitleID, LBID, StartIndex, MaxEntries);
		}

		public StatsDetailedLB GetTeamLBNearTeamName(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow)
		{
			return stat.GetTeamLBNearTeamName(TitleID, LBID, TeamName, NumAbove, NumBelow);
		}

		public StatsFriendsLB GetTeamLBForTeamNames(uint TitleID, uint LBID, string[] TeamNameList)
		{
			return stat.GetTeamLBForTeamNames(TitleID, LBID, TeamNameList);
		}

		public StatsDetailedLB GetTeamLBDetailsForTeamNames(uint TitleID, uint LBID, string[] TeamNames)
		{
			return stat.GetTeamLBDetailsForTeamNames(TitleID, LBID, TeamNames);
		}

		#endregion

		#region Alerts
		public bool SubscriberExists(byte[] WebID)
		{
			return alrt.SubscriberExists(WebID);
		}

		public ExistingSubscriptions Subscribe(bool InitializeSubscriber, byte[] WebID, string GamerTag, Alerts.AddSubscriptions alerts)
		{
			return alrt.Subscribe(InitializeSubscriber, WebID, GamerTag, alerts);
		}

		public uint Unsubscribe(bool DeleteSubscriber, bool DeleteAccountSubscriptions, byte[] WebID, string GamerTag, Alerts.ExistingSubscriptions alerts)
		{
			return alrt.Unsubscribe(DeleteSubscriber, DeleteAccountSubscriptions, WebID, GamerTag, alerts);
		}

		public ExistingSubscriptions EnumerateSubscriptions(byte[] WebID, string GamerTag)
		{
			return alrt.EnumerateSubscriptions(WebID, GamerTag);
		}

		public uint ScheduleContentAlert(byte[] WebID, uint type, string locale, string message, DateTime deliveryTime)
		{
			return alrt.ScheduleContentAlert(WebID, type, locale, message, deliveryTime);
		}
		#endregion

		#region GeneralInfo
		public TitleInfoList GetTitleList()
		{
			return info.GetTitleList();
		}

		public LinkedAccount[] GILinkedGamerTags(byte [] WebID)
		{
			return info.LinkedGamerTags(WebID);
		}
		#endregion

		#region Presence
		public FriendsList GetFriends(byte[] WebID, string GamerTag)
		{
			return pres.GetFriends(WebID, GamerTag);
		}

		#endregion

		#region UserAccount
		public LinkedAccount[] LinkedGamerTags(byte[] WebID)
		{
			return acct.LinkedGamerTags(WebID);
		}
		public bool LinkUser(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber)
		{
			return acct.LinkUser(WebID, GamerTag, Owner, PhonePrefix, PhoneNumber, PhoneExtension, PostalCode, CardHolder, CardNumber);
		}
		public uint GetUserSettings(byte[] WebID, string GamerTag)
		{
			return acct.GetUserSettings(WebID, GamerTag);
		}

		public bool SetInfoSharing(byte[] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo)
		{
			return acct.SetInfoSharing(WebID, GamerTag, acceptMSInfo, acceptPartnerInfo);
		}

		public UserAccountStatus GetAccountStatus(byte[] WebID, string GamerTag)
		{
			return acct.GetAccountStatus(WebID, GamerTag);
		}

		#endregion

		#region Signature
		public XSigCreateSignatureResponse [] CreateSignature(uint TitleID, string AdminID, XSigCreateSignatureRequest [] sigData)
		{
			return vsig.CreateSignature(TitleID, AdminID, sigData);
		}

		public uint [] VerifySignature(XSigVerifySignatureRequest [] sigData)
		{
			return vsig.VerifySignature(sigData);
		}
		#endregion

		#region Messaging
		public uint EnumMessages(byte [] WebID, string GamerTag, out WCMessageSummary [] Summary)
		{
			return msgs.EnumMessages(WebID, GamerTag, out Summary);
		}

		public uint GetMessageDetails(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, out WCMessageSummary Summary, out WCMessageDetails Details)
		{
			return msgs.GetMessageDetails(WebID, GamerTag, MessageID, SetFlags, UnsetFlags, out Summary, out Details);
		}

		public uint DeleteMessage(byte [] WebID, string GamerTag, uint MessageID, WCDeleteMsgFlags Flags)
		{
			return msgs.DeleteMessage(WebID, GamerTag, MessageID, Flags);
		}

		public uint SendMessage(byte [] WebID, string GamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipients, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		{
			return msgs.SendMessage(WebID, GamerTag, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipients, Details, Attachment, out RecipResult);
		}

		public uint RevokeMessage(byte [] WebID, string GamerTag, WCRecipientResult[] RecipResult)
		{
			return msgs.RevokeMessage(WebID, GamerTag, RecipResult);
		}

		public uint DeleteUserTitle(byte [] WebID, string GamerTag, uint TitleID)
		{
			return msgs.DeleteUserTitle(WebID, GamerTag, TitleID);
		}

		public uint EnumUserTitles(byte [] WebID, string GamerTag, out WCUserTitle[] Titles)
		{
			return msgs.EnumUserTitles(WebID, GamerTag, out Titles);
		}

		public uint SetMessageFlags(byte [] WebID, string GamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags)
		{
			return msgs.SetMessageFlags(WebID, GamerTag, MessageID, SetFlags, UnsetFlags);
		}

		public uint EnumTitleWideMessages(uint TitleID, out WCTitleWideMessageSummary[] Summary)
		{
			return msgs.EnumTitleWideMessages(TitleID, out Summary);
		}

		public uint GetTitleWideMessageDetails(uint TitleID, uint MessageID, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details)
		{
			return msgs.GetTitleWideMessageDetails(TitleID, MessageID, out Summary, out Details);
		}

		public uint DeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags)
		{
			return msgs.DeleteTitleWideMessage(TitleID, MessageID, Flags);
		}

		public uint SendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] MultiLangString, WCMessageAttachment[] Attachment, out ushort Delay, out uint MessageID)
		{
			return msgs.SendTitleWideMessage(Sender, SenderContext, SentTime, Region, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Description, Details, MultiLangString, Attachment, out Delay, out MessageID);
		}

		public uint SendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, out WCRecipientResult[] RecipResult)
		{
			return msgs.SendTitleUserMessage(Sender, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, out RecipResult);
		}

		public uint RevokeTitleUserMessage(WCRecipientResult[] RecipResult)
		{
			return msgs.RevokeTitleUserMessage(RecipResult);
		}

		public string GetMessageString(uint TitleID, uint StringID, string Locale)
		{
			return msgs.GetMessageString(TitleID, StringID, Locale);
		}
		#endregion

		#region Query/Competitions
		public ulong Add(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, QueryAttribute[] attributes)
		{
			return comp.Add(TitleId, WebId, GamerTag, teamName, DatasetId, attributes);
		}
		
		public void Update(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		{
			comp.Update(TitleId, WebId, GamerTag, teamName, DatasetId, procIndex, attributes);
		}
		
		public void UpdateId(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes)
		{
			comp.UpdateId(TitleId, WebId, GamerTag, teamName, DatasetId, procIndex, entityId, attributes);
		}
		
		public SearchResponse Search(uint TitleId, uint DatasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		{
			return comp.Search(TitleId, DatasetId, procIndex, page, resultsPerPage, specs, attributes);
		}
		
		public FindFromIdsResponse FindFromIds(uint TitleId, uint DatasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds)
		{
			return comp.FindFromIds(TitleId, DatasetId, procIndex, specs, entityIds);
		}
		
		public void Remove(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		{
			comp.Remove(TitleId, WebId, gamerTag, teamName, DatasetId, procIndex, attributes);
		}

		public void RemoveId(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId)
		{
			comp.RemoveId(TitleId, WebId, gamerTag, teamName, DatasetId, entityId);
		}
		
		public void Select(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId, uint action, QueryAttribute[] attributes)
		{
			comp.Select(TitleId, WebId, gamerTag, teamName, DatasetId, entityId, action, attributes);
		}
		
		public QuerySim GetXQSConfig(uint TitleId, byte[] WebId, ulong haveVersion)
		{
			return comp.GetXQSConfig(TitleId, WebId, haveVersion);
		}
		
		public ulong CompetitionCreate(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes)
		{
			return comp.CompetitionCreate(TitleId, WebId, gamerTag, teamName, datasetId, attributes);
		}
		
		public ulong CompetitionCreateSingleElimination(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, uint cPrivateSlots, uint cPublicSlots, uint cMinimumPlayers, DateTime dtRegistrationOpen, DateTime dtRegistrationClose, DateTime dtCompetitionStart, DateTime dtRoundOneStart, DateTime dtRoundOneEnd, uint dwMatchReminderAdvanceMinutes, uint UnitOrMask, uint Interval, bool fTeamCompetition, uint dwTeamSize, QueryAttribute[] additionalAttributes)
		{
			return comp.CompetitionCreateSingleElimination(TitleId, WebId, gamerTag, teamName, datasetId, cPrivateSlots, cPublicSlots, cMinimumPlayers, dtRegistrationOpen, dtRegistrationClose, dtCompetitionStart, dtRoundOneStart, dtRoundOneEnd, dwMatchReminderAdvanceMinutes, UnitOrMask, Interval, fTeamCompetition, dwTeamSize, additionalAttributes);
		}
		
		public SearchResponse CompetitionSearch(uint TitleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		{
			return comp.CompetitionSearch(TitleId, datasetId, queryId, page, resultsPerPage, specs, attributes);
		}

		public void CompetitionManageEntrant(uint TitleId, byte[] WebId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes)
		{
			comp.CompetitionManageEntrant(TitleId, WebId, gamerTag, action, teamName, datasetId, competitionId, attributes);
		}
		
		public void CompetitionCancel(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, ulong competitionId)
		{
			comp.CompetitionCancel(TitleId, WebId, gamerTag, teamName, datasetId, competitionId);
		}

		public SearchResponse CompetitionTopology(uint TitleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, uint startingEventId, uint endingEventId, QueryAttributeSpec[] specs)
		{
			return comp.CompetitionTopology(TitleId, datasetId, competitionId, page, resultsPerPage, startingEventId, endingEventId, specs);
		}

		public SearchResponse CompetitionTopologySingleElimination(uint TitleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs)
		{
			return comp.CompetitionTopologySingleElimination(TitleId, datasetId, competitionId, originEventId, roundsForward, roundsBackward, topWidth, specs);
		}
		#endregion

		#region LSP
		public SiteInfoReply GetSiteInfo(uint TitleID)
		{
			return lsp.GetSiteInfo(TitleID);
		}

		public bool GetSitePuids(out ulong MachinePuid, out ulong UserPuid)
		{
			return lsp.GetSitePuids(out MachinePuid, out UserPuid);
		}

		public ulong [] LookupGamerTags(string [] GamerTags)
		{
			return lsp.LookupGamerTags(GamerTags);
		}

		public string [] LookupPuids(ulong [] Puids)
		{
			return lsp.LookupPuids(Puids);
		}

		public bool MatchHost(uint TitleID)
		{
			return lsp.MatchHost(TitleID);
		}

		public bool MatchHostDelete(uint TitleID)
		{
			return lsp.MatchHostDelete(TitleID);
		}

		public bool QueryAdd(uint TitleID)
		{
			return lsp.QueryAdd(TitleID);
		}

		public bool QueryRemove(uint TitleID)
		{
			return lsp.QueryRemove(TitleID);
		}
		#endregion

		#region Teams
		public void CreateTeam(uint titleID, byte [] webID, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte [] teamData, byte [] creatorData)
		{
			team.CreateTeam(titleID, webID, gamerTag, teamName, maxMembers, description, motto, URL, teamData, creatorData);
		}

		public void DeleteTeam(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			team.DeleteTeam(titleID, webID, gamerTag, teamName);
		}

		public void ManageTeam(uint titleID, byte [] webID, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte [] teamData)
		{
			team.ManageTeam(titleID, webID, gamerTag, teamName, newTeamName, description, motto, URL, teamData);
		}

		public void ManageTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		{
			team.ManageTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag, memberPriv, memberData);
		}

		public void RemoveTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag)
		{
			team.RemoveTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag);
		}

		public void RecruitTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		{
			team.RecruitTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag, memberPriv, memberData);
		}

		public void JoinTeam(uint titleID, byte [] webID, string gamerTag, string teamName, byte answer)
		{
			team.JoinTeam(titleID, webID, gamerTag, teamName, answer);
		}

		public TeamInfo [] GetTeamInfo(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			return team.GetTeamInfo(titleID, webID, gamerTag, teamName);
		}

		public TeamMember [] GetTeamMembers(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			return team.GetTeamMembers(titleID, webID, gamerTag, teamName);
		}

		#endregion

		#region Storage
		public QuotaInfo GetTitleQuota(uint titleID)
		{
			return stor.GetTitleQuota(titleID);
		}

		public FileEnumerationInfo [] EnumerateTitleFiles(uint titleID, string fileQuery, DateTime ifModifiedSince)
		{
			return stor.EnumerateTitleFiles(titleID, fileQuery, ifModifiedSince);
		}

		public ReadFileInfo ReadTitleFile(uint titleID, string fileName, DateTime ifModifiedSince)
		{
			return stor.ReadTitleFile(titleID, fileName, ifModifiedSince);
		}

		public void WriteTitleFile(uint titleID, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			stor.WriteTitleFile(titleID, fileName, contentType, data, expirationDate);
		}

		public void DeleteTitleFile(uint titleID, string fileName)
		{
			stor.DeleteTitleFile(titleID, fileName);
		}

		public void RevokeTitleFile(uint titleID, string fileName)
		{
			stor.RevokeTitleFile(titleID, fileName);
		}

		public ReadFileInfo ReadUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, DateTime ifModifiedSince)
		{
			return stor.ReadUserFile(titleID, webID, gamerTag, fileName, ifModifiedSince);
		}

		public void WriteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			stor.WriteUserFile(titleID, webID, gamerTag, fileName, contentType, data, expirationDate);
		}

		public void DeleteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName)
		{
			stor.DeleteUserFile(titleID, webID, gamerTag, fileName);
		}

		public void RevokeUserFile(uint titleID, byte[] webID, string gamerTag, string fileName)
		{
			stor.RevokeUserFile(titleID, webID, gamerTag, fileName);
		}
		#endregion
	}
   
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\StoragePrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Storage;

namespace WSHelper
{
	public class StoragePrime : Storage.Storage
	{
		CallStatistics cs = null;

		public StoragePrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Storage/Storage.asmx");
		}

		protected StoragePrime(String url) {}
		protected StoragePrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Storage functions (10)
		#region public new QuotaInfo GetTitleQuota(uint titleID)
		[OneWayAttribute()]
		public void CBGetTitleQuota(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTitleQuota(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTitleQuota failed.", e);
			}
			obj.Set();
		}

		public new QuotaInfo GetTitleQuota(uint titleID)
		{
			QuotaInfo res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTitleQuota);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTitleQuota(titleID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_GetTitleQuota, start, cbres.dtCompleted);
			res = (QuotaInfo) cbres.res;
			return res;
		}
		#endregion

		#region public new FileEnumerationInfo [] EnumerateTitleFiles(uint titleID, string fileQuery, DateTime ifModifiedSince)
		[OneWayAttribute()]
		public void CBEnumerateTitleFiles(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndEnumerateTitleFiles(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumerateTitleFiles failed.", e);
			}
			obj.Set();
		}

		public new FileEnumerationInfo [] EnumerateTitleFiles(uint titleID, string fileQuery, DateTime ifModifiedSince)
		{
			FileEnumerationInfo [] res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumerateTitleFiles);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumerateTitleFiles(titleID, fileQuery, ifModifiedSince, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_EnumerateTitleFiles, start, cbres.dtCompleted);
			res = (FileEnumerationInfo []) cbres.res;
			return res;
		}
		#endregion

		#region public new ReadFileInfo ReadTitleFile(uint titleID, string fileName, DateTime ifModifiedSince)
		[OneWayAttribute()]
		public void CBReadTitleFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndReadTitleFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to ReadTitleFile failed.", e);
			}
			obj.Set();
		}

		public new ReadFileInfo ReadTitleFile(uint titleID, string fileName, DateTime ifModifiedSince)
		{
			ReadFileInfo res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBReadTitleFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginReadTitleFile(titleID, fileName, ifModifiedSince, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_ReadTitleFile, start, cbres.dtCompleted);
			res = (ReadFileInfo) cbres.res;
			return res;
		}
		#endregion

		#region public new void WriteTitleFile(uint titleID, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		[OneWayAttribute()]
		public void CBWriteTitleFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndWriteTitleFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to WriteTitleFile failed.", e);
			}
			obj.Set();
		}

		public new void WriteTitleFile(uint titleID, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBWriteTitleFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginWriteTitleFile(titleID, fileName, contentType, data, expirationDate, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_WriteTitleFile, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void DeleteTitleFile(uint titleID, string fileName)
		[OneWayAttribute()]
		public void CBDeleteTitleFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndDeleteTitleFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteTitleFile failed.", e);
			}
			obj.Set();
		}

		public new void DeleteTitleFile(uint titleID, string fileName)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteTitleFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteTitleFile(titleID, fileName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_DeleteTitleFile, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void RevokeTitleFile(uint titleID, string fileName)
		[OneWayAttribute()]
		public void CBRevokeTitleFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRevokeTitleFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RevokeTitleFile failed.", e);
			}
			obj.Set();
		}

		public new void RevokeTitleFile(uint titleID, string fileName)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRevokeTitleFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRevokeTitleFile(titleID, fileName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_RevokeTitleFile, start, cbres.dtCompleted);
		}
		#endregion

		#region public new ReadFileInfo ReadUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, DateTime ifModifiedSince)
		[OneWayAttribute()]
		public void CBReadUserFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndReadUserFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to ReadUserFile failed.", e);
			}
			obj.Set();
		}

		public new ReadFileInfo ReadUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, DateTime ifModifiedSince)
		{
			ReadFileInfo res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBReadUserFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginReadUserFile(titleID, webID, gamerTag, fileName, ifModifiedSince, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_ReadUserFile, start, cbres.dtCompleted);
			res = (ReadFileInfo) cbres.res;
			return res;
		}
		#endregion

		#region public new void WriteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		[OneWayAttribute()]
		public void CBWriteUserFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndWriteUserFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to WriteUserFile failed.", e);
			}
			obj.Set();
		}

		public new void WriteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBWriteUserFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginWriteUserFile(titleID, webID, gamerTag, fileName, contentType, data, expirationDate, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_WriteUserFile, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void DeleteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName)
		[OneWayAttribute()]
		public void CBDeleteUserFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndDeleteUserFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteUserFile failed.", e);
			}
			obj.Set();
		}

		public new void DeleteUserFile(uint titleID, byte [] webID, string gamerTag, string fileName)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteUserFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteUserFile(titleID, webID, gamerTag, fileName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_DeleteUserFile, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void RevokeUserFile(uint titleID, byte[] webID, string gamerTag, string fileName)
		[OneWayAttribute()]
		public void CBRevokeUserFile(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRevokeUserFile(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RevokeUserFile failed.", e);
			}
			obj.Set();
		}

		public new void RevokeUserFile(uint titleID, byte[] webID, string gamerTag, string fileName)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRevokeUserFile);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRevokeUserFile(titleID, webID, gamerTag, fileName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Storage_RevokeUserFile, start, cbres.dtCompleted);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\TeamsPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Teams;

namespace WSHelper
{
	public class TeamsPrime : Teams.Teams
	{
		CallStatistics cs = null;

		public TeamsPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Teams/Teams.asmx");
		}

		protected TeamsPrime(String url) {}
		protected TeamsPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Teams functions (9)
		#region public new void CreateTeam(uint titleID, byte [] webID, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte [] teamData, byte [] creatorData)
		[OneWayAttribute()]
		public void CBCreateTeam(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndCreateTeam(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to CreateTeam failed.", e);
			}
			obj.Set();
		}

		public new void CreateTeam(uint titleID, byte [] webID, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte [] teamData, byte [] creatorData)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCreateTeam);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCreateTeam(titleID, webID, gamerTag, teamName, maxMembers, description, motto, URL, teamData, creatorData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_CreateTeam, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void DeleteTeam(uint titleID, byte [] webID, string gamerTag, string teamName)
		[OneWayAttribute()]
		public void CBDeleteTeam(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndDeleteTeam(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to DeleteTeam failed.", e);
			}
			obj.Set();
		}

		public new void DeleteTeam(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBDeleteTeam);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginDeleteTeam(titleID, webID, gamerTag, teamName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_DeleteTeam, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void ManageTeam(uint titleID, byte [] webID, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte [] teamData)
		[OneWayAttribute()]
		public void CBManageTeam(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndManageTeam(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to ManageTeam failed.", e);
			}
			obj.Set();
		}

		public new void ManageTeam(uint titleID, byte [] webID, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte [] teamData)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBManageTeam);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginManageTeam(titleID, webID, gamerTag, teamName, newTeamName, description, motto, URL, teamData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_ManageTeam, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void ManageTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		[OneWayAttribute()]
		public void CBManageTeamMember(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndManageTeamMember(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to ManageTeamMember failed.", e);
			}
			obj.Set();
		}

		public new void ManageTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBManageTeamMember);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginManageTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag, memberPriv, memberData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_ManageTeamMember, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void RemoveTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag)
		[OneWayAttribute()]
		public void CBRemoveTeamMember(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRemoveTeamMember(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RemoveTeamMember failed.", e);
			}
			obj.Set();
		}

		public new void RemoveTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRemoveTeamMember);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRemoveTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_RemoveTeamMember, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void RecruitTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		[OneWayAttribute()]
		public void CBRecruitTeamMember(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRecruitTeamMember(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to RecruitTeamMember failed.", e);
			}
			obj.Set();
		}

		public new void RecruitTeamMember(uint titleID, byte [] webID, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte [] memberData)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRecruitTeamMember);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRecruitTeamMember(titleID, webID, gamerTag, teamName, memberGamerTag, memberPriv, memberData, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_RecruitTeamMember, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void JoinTeam(uint titleID, byte [] webID, string gamerTag, string teamName, byte answer)
		[OneWayAttribute()]
		public void CBJoinTeam(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndJoinTeam(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to JoinTeam failed.", e);
			}
			obj.Set();
		}

		public new void JoinTeam(uint titleID, byte [] webID, string gamerTag, string teamName, byte answer)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBJoinTeam);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginJoinTeam(titleID, webID, gamerTag, teamName, answer, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_JoinTeam, start, cbres.dtCompleted);
		}
		#endregion

		#region public new TeamInfo [] GetTeamInfo(uint titleID, byte [] webID, string gamerTag, string teamName)
		[OneWayAttribute()]
		public void CBGetTeamInfo(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTeamInfo(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTeamInfo failed.", e);
			}
			obj.Set();
		}

		public new TeamInfo [] GetTeamInfo(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			TeamInfo [] res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTeamInfo);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTeamInfo(titleID, webID, gamerTag, teamName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_GetTeamInfo, start, cbres.dtCompleted);
			res = (TeamInfo []) cbres.res;
			return res;
		}
		#endregion

		#region public new TeamMember [] GetTeamMembers(uint titleID, byte [] webID, string gamerTag, string teamName)
		[OneWayAttribute()]
		public void CBGetTeamMembers(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTeamMembers(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTeamMembers failed.", e);
			}
			obj.Set();
		}

		public new TeamMember [] GetTeamMembers(uint titleID, byte [] webID, string gamerTag, string teamName)
		{
			TeamMember [] res = null;
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTeamMembers);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTeamMembers(titleID, webID, gamerTag, teamName, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Teams_GetTeamMembers, start, cbres.dtCompleted);
			res = (TeamMember []) cbres.res;
			return res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\StatsPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

using Stats;

namespace WSHelper
{
	public class StatsDetailedLB : DetailedLBResults
	{
		public uint ValidSeconds;
		public void CopyFrom(DetailedLBResults lb)
		{
			this.Entries = lb.Entries;
			this.LBLastResetDate = lb.LBLastResetDate;
			this.TotalLBEntries = lb.TotalLBEntries;
		}
	}

	public class StatsRawLB : RawLBResults
	{
		public uint ValidSeconds;
		public void CopyFrom(RawLBResults lb)
		{
			this.Entries = lb.Entries;
			this.LBLastResetDate = lb.LBLastResetDate;
			this.TotalLBEntries = lb.TotalLBEntries;
		}
	}

	public class StatsLBList
	{
		public LBInfo[] info;
		public uint ValidSeconds;
	}

	public class StatsFriendsLB : LBResults
	{
		public void CopyFrom(LBResults lb)
		{
			this.Entries = lb.Entries;
			this.LBLastResetDate = lb.LBLastResetDate;
			this.TotalLBEntries = lb.TotalLBEntries;
		}
		public uint ValidSeconds;
	}
    

	public class StatsPrime : Stats.Stats
	{
		CallStatistics cs = null;
		public StatsPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/Stats/Stats.asmx");
		}

		protected StatsPrime(String url) {}
		protected StatsPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// Stats functions (15)
		#region public StatsDetailedLB EnumerateLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		[OneWayAttribute()]
		public void CBEnumerateLB(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndEnumerateLB(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumerateLB failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB EnumerateLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumerateLB);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumerateLB(TitleID, LBID, StartIndex, MaxEntries, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_EnumerateLB, start, cbres.dtCompleted);
			res.CopyFrom((DetailedLBResults) cbres.res);
			res.ValidSeconds = cbres.ValidSeconds;
			return res;
		}
		#endregion

		#region public StatsRawLB EnumerateLBRaw(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		[OneWayAttribute()]
		public void CBEnumerateLBRaw(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndEnumerateLBRaw(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumerateLBRaw failed.", e);
			}
			obj.Set();
		}

		public StatsRawLB EnumerateLBRaw(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			StatsRawLB res = new StatsRawLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumerateLBRaw);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumerateLBRaw(TitleID, LBID, StartIndex, MaxEntries, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_EnumerateLBRaw, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((RawLBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsDetailedLB GetLBDetailsForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		[OneWayAttribute()]
		public void CBGetLBDetailsForGamerTags(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetLBDetailsForGamerTags(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetLBDetailsForGamerTags failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB GetLBDetailsForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetLBDetailsForGamerTags);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetLBDetailsForGamerTags(TitleID, LBID, GamerTagList, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetLBDetailsForGamerTags, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((DetailedLBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsFriendsLB GetLBForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		[OneWayAttribute()]
		public void CBGetLBForGamerTags(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetLBForGamerTags(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetLBForGamerTags failed.", e);
			}
			obj.Set();
		}

		public StatsFriendsLB GetLBForGamerTags(uint TitleID, uint LBID, string[] GamerTagList)
		{
			StatsFriendsLB res = new StatsFriendsLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetLBForGamerTags);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetLBForGamerTags(TitleID, LBID, GamerTagList, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetLBForGamerTags, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((LBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsLBList GetLBList(uint TitleID)
		[OneWayAttribute()]
		public void CBGetLBList(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetLBList(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetLBList failed.", e);
			}
			obj.Set();
		}

		public StatsLBList GetLBList(uint TitleID)
		{
			StatsLBList res = new StatsLBList();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetLBList);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetLBList(TitleID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetLBList, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.info = (LBInfo[]) cbres.res;
			return res;
		}
		#endregion

		#region public StatsDetailedLB GetLBNearGamerTag(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow)
		[OneWayAttribute()]
		public void CBGetLBNearGamerTag(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetLBNearGamerTag(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetLBNearGamerTag failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB GetLBNearGamerTag(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetLBNearGamerTag);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetLBNearGamerTag(TitleID, LBID, GamerTag, NumAbove, NumBelow, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetLBNearGamerTag, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((DetailedLBResults) cbres.res);
			return res;
		}
		#endregion GetLBNearGamerTag

		#region public StatsLBList GetLBListByType(uint TitleID, LBType LeaderboardType)
		[OneWayAttribute()]
		public void CBGetLBListByType(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetLBListByType(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetLBListByType failed.", e);
			}
			obj.Set();
		}

		public StatsLBList GetLBListByType(uint TitleID, LBType LeaderboardType)
		{
			StatsLBList res = new StatsLBList();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetLBListByType);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetLBListByType(TitleID, LeaderboardType, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetLBListByType, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.info = (LBInfo[]) cbres.res;
			return res;
		}
		#endregion

		#region public StatsDetailedLB EnumerateTeamLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		[OneWayAttribute()]
		public void CBEnumerateTeamLB(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndEnumerateTeamLB(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to EnumerateTeamLB failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB EnumerateTeamLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBEnumerateTeamLB);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginEnumerateTeamLB(TitleID, LBID, StartIndex, MaxEntries, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_EnumerateTeamLB, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((DetailedLBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsDetailedLB GetTeamLBNearTeamName(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow)
		[OneWayAttribute()]
		public void CBGetTeamLBNearTeamName(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTeamLBNearTeamName(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTeamLBNearTeamName failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB GetTeamLBNearTeamName(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTeamLBNearTeamName);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTeamLBNearTeamName(TitleID, LBID, TeamName, NumAbove, NumBelow, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetTeamLBNearTeamName, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((DetailedLBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsFriendsLB GetTeamLBForTeamNames(uint TitleID, uint LBID, string[] TeamNameList)
		[OneWayAttribute()]
		public void CBGetTeamLBForTeamNames(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTeamLBForTeamNames(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTeamLBForTeamNames failed.", e);
			}
			obj.Set();
		}

		public StatsFriendsLB GetTeamLBForTeamNames(uint TitleID, uint LBID, string[] TeamNameList)
		{
			StatsFriendsLB res = new StatsFriendsLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTeamLBForTeamNames);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTeamLBForTeamNames(TitleID, LBID, TeamNameList, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetTeamLBForTeamNames, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((LBResults) cbres.res);
			return res;
		}
		#endregion

		#region public StatsDetailedLB GetTeamLBDetailsForTeamNames(uint TitleID, uint LBID, string[] TeamNames)
		[OneWayAttribute()]
		public void CBGetTeamLBDetailsForTeamNames(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetTeamLBDetailsForTeamNames(ar, out obj.ValidSeconds);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetTeamLBDetailsForTeamNames failed.", e);
			}
			obj.Set();
		}

		public StatsDetailedLB GetTeamLBDetailsForTeamNames(uint TitleID, uint LBID, string[] TeamNames)
		{
			StatsDetailedLB res = new StatsDetailedLB();
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetTeamLBDetailsForTeamNames);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetTeamLBDetailsForTeamNames(TitleID, LBID, TeamNames, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Stats_GetTeamLBDetailsForTeamNames, start, cbres.dtCompleted);
			res.ValidSeconds = cbres.ValidSeconds;
			res.CopyFrom((DetailedLBResults) cbres.res);
			return res;
		}
		#endregion

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\UserPrime.cs ===
using System;
using UserAccount;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;

namespace WSHelper
{
	public class UsersPrime : UserAccount.UserAccount
	{
		CallStatistics cs = null;

		#region Constructors
		public UsersPrime(CallStatistics s)
		{
			cs = s;
			Url = cs.Environment.ToUri("/UserAccount/UserAccount.asmx");
		}

		protected UsersPrime(String url) {}
		protected UsersPrime() {}
		#endregion

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}

		// UserAccount functions (6)
		#region public new uint GetUserSettings(byte[] WebID, string GamerTag)
		[OneWayAttribute()]
		public void CBGetUserSettings(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetUserSettings(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetUserSettings failed.", e);
			}
			obj.Set();
		}
		
		public new uint GetUserSettings(byte[] WebID, string GamerTag)
		{
			IAsyncResult async;
			Exception f;
			AsyncCallback cb = new AsyncCallback(CBGetUserSettings);
			asyncCallbackObject cbres = new asyncCallbackObject();
			DateTime start = DateTime.Now;

			async = BeginGetUserSettings(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, 0, start, cbres.dtCompleted);
			return (uint) cbres.res;
		}
		#endregion

		#region public new LinkedAccount[] LinkedGamerTags(byte[] WebID)
		[OneWayAttribute()]
		public void CBLinkedGamerTags(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndLinkedGamerTags(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to UserAccount.LinkedGamerTags failed.", e);
			}
			obj.Set();
		}

		public new LinkedAccount[] LinkedGamerTags(byte[] WebID)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBLinkedGamerTags);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginLinkedGamerTags(WebID, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.UserAccount_LinkedGamerTags, start, cbres.dtCompleted);
			if(cbres.res == null)
				return null;
			LinkInfo[] li = (LinkInfo []) cbres.res;
			LinkedAccount[] la = new LinkedAccount[li.Length];
			for(int i = 0; i < li.Length; ++i)
			{
				la[i] = new LinkedAccount();
				la[i].GamerTag = li[i].GamerTag;
				la[i].Owner = li[i].Owner;
			}
			return la;
		}
		#endregion

		#region public new bool LinkUser(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber)
		[OneWayAttribute()]
		public void CBLinkUser(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndLinkUser(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to LinkUser failed.", e);
			}
			obj.Set();
		}

		public new bool LinkUser(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBLinkUser);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginLinkUser(WebID, GamerTag, Owner, PhonePrefix, PhoneNumber, PhoneExtension, PostalCode, CardHolder, CardNumber, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.UserAccount_LinkUser, start, cbres.dtCompleted);
			return (bool) cbres.res;
		}
		#endregion

		#region public new bool SetInfoSharing(byte [] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo)
		[OneWayAttribute()]
		public void CBSetInfoSharing(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndSetInfoSharing(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to SetInfoSharing failed.", e);
			}
			obj.Set();
		}

		public new bool SetInfoSharing(byte [] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSetInfoSharing);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSetInfoSharing(WebID, GamerTag, acceptMSInfo, acceptPartnerInfo, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.UserAccount_SetInfoSharing, start, cbres.dtCompleted);
			return (bool) cbres.res;
		}
		#endregion

		#region public new UserAccountStatus GetAccountStatus(byte [] WebID, string GamerTag)
		[OneWayAttribute()]
		public void CBGetAccountStatus(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetAccountStatus(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to GetAccountStatus failed.", e);
			}
			obj.Set();
		}

		public new UserAccountStatus GetAccountStatus(byte [] WebID, string GamerTag)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetAccountStatus);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetAccountStatus(WebID, GamerTag, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.UserAccount_GetAccountStatus, start, cbres.dtCompleted);
			return (UserAccountStatus) cbres.res;
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\QueryPrime.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Net;
using System.Web.Services.Protocols;
using System.Text;
using System.IO;
using System.Xml;
using System.Collections;

using Query;

namespace WSHelper
{

	#region QueryValue & QueryValueType
	public enum QueryValueType
	{
		Attribute,
		Constant,
		Parameter
	}
	public class QueryValue
	{
		uint id;
		Type kind;
		object val = null;
		bool hasval = false;

		protected void Set(string i, QueryValueType t, string k, string v)
		{
			hasval = true;
			id = Convert.ToUInt32(i, 16);
			switch(t)
			{
				case QueryValueType.Attribute:
					if((id & 0x02000000) == 0x02000000)
						throw new Exception("XQS Parse Error: This Attribute ID \"0x" + id.ToString("X8") + "\" has the parameter flag set.");
					if((id & 0x04000000) == 0x04000000)
						throw new Exception("XQS Parse Error: This Attribute ID \"0x" + id.ToString("X8") + "\" has the constant flag set.");
					break;
				case QueryValueType.Constant:
					if((id & 0x02000000) == 0x02000000)
						throw new Exception("XQS Parse Error: This Constant ID \"0x" + id.ToString("X8") + "\" has the parameter flag set.");
					if((id & 0x04000000) != 0x04000000)
						throw new Exception("XQS Parse Error: This Constant ID \"0x" + id.ToString("X8") + "\" does not have the constant flag set.");
					break;
				case QueryValueType.Parameter:
					if((id & 0x02000000) != 0x02000000)
						throw new Exception("XQS Parse Error: This Parameter ID \"0x" + id.ToString("X8") + "\" does not have the parameter flag set.");
					if((id & 0x04000000) == 0x04000000)
						throw new Exception("XQS Parse Error: This Parameter ID \"0x" + id.ToString("X8") + "\" has the constant flag set.");
					break;
			};
			switch(k)
			{
				case "int":
					kind = typeof(long);
					if((id & 0x00F00000) != 0)
						throw new Exception("XQS Parse Error: ID \"0x" + id.ToString("X8") + "\" is type int but the id indicates a different type.");
					if(v != null)
					{
						if(v.ToLower().StartsWith("0x"))
						{
							val = Convert.ToInt64(v, 16);
						}
						else
						{
							val = Convert.ToInt64(v, 10);
						}
					}
					break;
				case "blob":
					kind = typeof(byte []);
					if((id & 0x00F00000) != 0x00200000)
						throw new Exception("XQS Parse Error: ID \"0x" + id.ToString("X8") + "\" is type blob but the id indicates a different type.");
					val = v;
					break;
				case "string":
					kind = typeof(string);
					if((id & 0x00F00000) != 0x00100000)
						throw new Exception("XQS Parse Error: ID \"0x" + id.ToString("X8") + "\" is type string but the id indicates a different type.");
					val = v;
					break;
				default:
					if(QuerySim.Rigorous)
					{
						throw new Exception("XQS Parse Error: Unknown object type: \"" + k + "\"");
					}
					else
					{
						break;
					}
			};
		}
		protected void Set(string i, QueryValueType t, string k)
		{
			Set(i, t, k, null);
			hasval = false;
		}

		#region Accessors
		public uint ID
		{
			get{return id;}
		}
		public Type Kind
		{
			get{return kind;}
		}
		public object Value
		{
			get{return val;}
		}
		public bool HasValue
		{
			get{return hasval;}
		}
		#endregion
	}
	#endregion

	#region QuerySchemaAttribute
	public class QuerySchemaAttribute : QueryValue
	{
		string name;
		bool hidden = false;
		bool nullok = false;
		uint maxlen = 0;
		QueryIndex idx;

		static string [] attrList = new string [] {"hexid", "name", "kind"};
		static string [] optList = new string [] {"index", "default", "maxlen", "nullok", "hidden"};
		#region Accessors
		public bool Nullable
		{
			get{return nullok;}
		}
		public bool Hidden
		{
			get{return hidden;}
		}
		public string Name
		{
			get{return name;}
		}
		public QueryIndex Index
		{
			get{return idx;}
		}
		public object Default
		{
			get{return Value;}
		}
		public uint MaxLen
		{
			get{return maxlen;}
		}
		#endregion

		public static QuerySchemaAttribute Deserialize(XmlNode x, Hashtable ixLookup)
		{
			QuerySchemaAttribute q = new QuerySchemaAttribute();
			QuerySim.CheckNode(x, "attribute", attrList, optList);
			q.name = x.Attributes["name"].Value;
			if(x.Attributes["default"] == null)
				q.Set(x.Attributes["hexid"].Value, QueryValueType.Attribute, x.Attributes["kind"].Value);
			else
				q.Set(x.Attributes["hexid"].Value, QueryValueType.Attribute, x.Attributes["kind"].Value, x.Attributes["default"].Value);
			if(x.Attributes["maxlen"] != null)		// this is an optional attribute
				q.maxlen = Convert.ToUInt32(x.Attributes["maxlen"].Value, 10);
			if(q.maxlen == 0 && q.Kind != typeof(long))
				q.maxlen = 30;
			if(x.Attributes["nullok"] != null)
				q.nullok = (x.Attributes["nullok"].Value.ToLower() == "true" || x.Attributes["nullok"].Value == "1");
			if(x.Attributes["hidden"] != null)
				q.hidden = (x.Attributes["hidden"].Value.ToLower() == "true" || x.Attributes["hidden"].Value == "1");
			if(x.Attributes["index"] != null)
			{
				string idx = x.Attributes["index"].Value.ToLower();
				if(ixLookup[idx] != null)
				{
					q.idx = (QueryIndex) ixLookup[idx];
				}
				else
				{
					q.idx = new QueryIndex(idx);
				}
				q.idx.Used = true;
				ixLookup[idx] = q.idx;
			}
			return q;
		}
	}
	#endregion

	#region QueryConstant
	public class QueryConstant : QueryValue
	{
		string name;
		static string [] attrList = new string [] {"hexid", "name", "kind", "value"};
		static string [] optList = new string [] {};

		#region Accessors
		public string Name
		{
			get{return name;}
		}
		#endregion

		public static QueryConstant Deserialize(XmlNode x)
		{
			QueryConstant q = new QueryConstant();
			QuerySim.CheckNode(x, "constant", attrList, optList);
			q.name = x.Attributes["name"].Value;
			q.Set(x.Attributes["hexid"].Value, QueryValueType.Constant, x.Attributes["kind"].Value, x.Attributes["value"].Value);
			return q;
		}
	}
	#endregion

	#region QueryIndex
	public class QueryIndex
	{
		string name;
		bool clustered;
		bool unique;
		bool complete;
		bool used;

		static string [] attrList = new string [] {"name"};
		static string [] optList = new string [] {"unique", "clustered"};

		#region Accessors
		public string Name
		{
			get{return name;}
		}
		public bool Clustered
		{
			get{return clustered;}
		}
		public bool Unique
		{
			get{return unique;}
		}
		public bool Complete
		{
			get{return complete;}
		}
		public bool Used
		{
			get{return used;}
			set{used = value;}
		}
		#endregion

		public QueryIndex()
		{
		}

		public QueryIndex(string name)
		{
			this.name = name;
			complete = false;
			used = true;
		}
		public static QueryIndex Deserialize(XmlNode x, Hashtable ixLookup)
		{
			QueryIndex i = null;
			QuerySim.CheckNode(x, "index", attrList, optList);
			object o = ixLookup[x.Attributes["name"].Value.ToLower()];
			if(o == null)
			{
				i = new QueryIndex();
				i.name = x.Attributes["name"].Value;
				ixLookup[i.name.ToLower()] = i;
			}
			else
			{
				i = (QueryIndex) o;
				if(i.Complete)
					throw new Exception("XQS Parse Error: Duplicate index found (case insensitive) for \"" + i.name + "\"");
			}
			if(x.Attributes["unique"] != null && x.Attributes["unique"].Value == "true")
				i.unique = true;
			if(x.Attributes["clustered"] != null && x.Attributes["clustered"].Value == "true")
				i.clustered = true;
			i.complete = true;
			return i;
		}
	}
	#endregion
	
	#region QueryQuery
	public enum QueryOpType
	{
		Search,
		FindIDs,
		Update,
		UpdateID,
		Custom,
		Remove,
		RemoveID,
		Count,
	};
	public enum FilterOp
	{
		Equal,
		LessThan,
		LessThanOrEqual,
		GreaterThan,
		GreaterThanOrEqual,
		NotEqual,
		Invalid
	};

	#region QueryParam
	public class QueryParam : QueryValue
	{
		string name;
		uint maxlen;
		static string [] attrList = new string [] {"hexid", "name", "kind"};
		static string [] optList = new string [] {"default", "maxlen"};

		#region Accessors
		public string Name
		{
			get{return name;}
		}
		public object Default
		{
			get{return Value;}
		}
		public bool HasDefault
		{
			get{return HasValue;}
		}
		public uint MaxLen
		{
			get{return maxlen;}
		}
		#endregion

		public static QueryParam Deserialize(XmlNode a)
		{
			QueryParam qp = new QueryParam();
			QuerySim.CheckNode(a, "param", attrList, optList);
			qp.name = a.Attributes["name"].Value;
			if(a.Attributes["default"] != null)
				qp.Set(a.Attributes["hexid"].Value, QueryValueType.Parameter, a.Attributes["kind"].Value, a.Attributes["default"].Value);
			else
				qp.Set(a.Attributes["hexid"].Value, QueryValueType.Parameter, a.Attributes["kind"].Value);

			if((qp.ID & 0x02000000) != 0x02000000)
				throw new Exception("XQS Parse Error: Query Parameter \"0x" + qp.ID.ToString("X8") + "\" does not have the parameter flag set.");

			if(a.Attributes["maxlen"] != null)
				qp.maxlen = Convert.ToUInt32(a.Attributes["maxlen"].Value, 10);
			if(qp.maxlen == 0 && qp.Kind == typeof(string))
				qp.maxlen = 400;
			else if(qp.maxlen == 0 && qp.Kind == typeof(byte []))
				qp.maxlen = 800;

			return qp;
		}
	}
	#endregion

	#region QueryFilter
	public class QueryFilter
	{
		QueryValue left;
		QueryValue right;
		FilterOp op = FilterOp.Invalid;
		static string [] attrList = new string [] {"left", "op", "right"};
		static string [] optList = new string [] {};

		#region Accessors
		public QueryValue Left
		{
			get{return left;}
		}
		public QueryValue Right
		{
			get{return right;}
		}
		public FilterOp Op
		{
			get{return op;}
		}
		#endregion

		public static QueryFilter Deserialize(XmlNode x, Hashtable objLookup, Hashtable psLookup)
		{
			QuerySim.CheckNode(x, "filter", attrList, optList);
			QueryFilter qf = new QueryFilter();
			uint left = Convert.ToUInt32(x.Attributes["left"].Value, 16);
			uint right = Convert.ToUInt32(x.Attributes["right"].Value, 16);
			switch(x.Attributes["op"].Value)
			{
				case "==":
					qf.op = FilterOp.Equal;
					break;
				case "<":
					qf.op = FilterOp.LessThan;
					break;
				case "<=":
					qf.op = FilterOp.LessThanOrEqual;
					break;
				case ">":
					qf.op = FilterOp.GreaterThan;
					break;
				case ">=":
					qf.op = FilterOp.GreaterThanOrEqual;
					break;
				case "<>":
					qf.op = FilterOp.NotEqual;
					break;
				default:
					if(QuerySim.Rigorous)
					{
						throw new Exception("XQS Parse Error: Unknown filter operator: \"" + x.Attributes["op"].Value + "\"");
					}
					else
					{
						break;
					}
			};
			object o = objLookup[left];

			if(o != null)
				qf.left = (QueryValue) o;
			o = objLookup[right]; 
			if(o != null)
				qf.right = (QueryValue) o;

			o = psLookup[left];
			if(qf.left != null && o != null)
				throw new Exception("XQS Parse Error: ID collision on the left filter parameter between a \"" + qf.left.GetType() + "\" on ID: 0x" + left.ToString("X8"));
			else if(o != null)
				qf.left = (QueryValue) o;

			o = psLookup[right];
			if(qf.right != null && o != null)
				throw new Exception("XQS Parse Error: ID collision on the right filter parameter between a \"" + qf.right.GetType() + "\" on ID: 0x" + right.ToString("X8"));
			else if(o != null)
				qf.right = (QueryValue) o;

			if(qf.left == null)
				throw new Exception("XQS Parse Error: The left filter parameter ID \"" + left.ToString("X8") + "\" could not be found.");
			if(qf.right == null)
				throw new Exception("XQS Parse Error: The right filter parameter ID \"" + right.ToString("X8") + "\" could not be found.");

			if(left == right && qf.op != FilterOp.Equal && qf.op != FilterOp.GreaterThanOrEqual && qf.op != FilterOp.LessThanOrEqual)
				throw new Exception("XQS Parse Error: This filter will result in an empty set since the left and right parameters are the same and the operation does not include equality.");
			if(qf.left.Kind != qf.right.Kind)
				throw new Exception("XQS Parse Error: This filter will fail to compile: the left and right parameters are different types.");
			return qf;
		}
	}
	#endregion

	public class QuerySortOps
	{
	}

	#region QueryReturn
	public class QueryReturn
	{
		string name;
		QueryValue result;
		bool interpreted;
		static string [] attrList = new string [] {"hexid", "name"};
		static string [] optList = new string [] {};

		#region Accessors
		public QueryValue Result
		{
			get{return result;}
		}
		public string Name
		{
			get{return name;}
		}
		public bool Interpreted
		{
			get{return interpreted;}
		}
		#endregion

		public static QueryReturn Deserialize(XmlNode x, Hashtable objLookup, Hashtable psLookup)
		{
			QuerySim.CheckNode(x, "return", attrList, optList);
			QueryReturn qf = new QueryReturn();
			qf.name = x.Attributes["name"].Value;
			uint id = Convert.ToUInt32(x.Attributes["hexid"].Value, 16);
			
			qf.interpreted = ((id & 0x01000000) == 0x01000000);

			object o = objLookup[id & 0xFEFFFFFF];
			if(o != null)
				qf.result = (QueryValue) o;

			o = psLookup[id & 0xFEFFFFFF];
			if(qf.result != null && o != null)
				throw new Exception("XQS Parse Error: ID collision for query return value \"" + qf.name + "\" from a \"" + qf.result.GetType() + "\" on ID: 0x" + id.ToString("X8"));
			else if(o != null)
				qf.result = (QueryValue) o;

			if(qf.result == null)
				throw new Exception("XQS Parse Error: The query return value \"" + qf.name + "\" with ID \"0x" + id.ToString("X8") + "\" could not be found.");
			if(qf.interpreted && qf.result.Kind != typeof(long))
				throw new Exception("XQS Parse Error: Query return value \"" + qf.name + "\" is interpreted (puid converted to gamertag) but the source id \"0x" + qf.result.ID.ToString("X8") + "\" is not an integer type.");

			return qf;
		}
	}
	#endregion

	public class QueryQuery
	{
		string name;
		uint id;
		QueryOpType op = QueryOpType.Count;
		QueryParam [] prms;
		QueryFilter [] fltrs;
		QueryReturn [] rtrns;
		string custom = null;

		static string [] attrList = new string [] {"hexid", "name", "op"};
		static string [] optList = new string [] {};

		#region Accessors
		public QueryFilter [] Filters
		{
			get{return fltrs;}
		}
		public QueryReturn [] Returns
		{
			get{return rtrns;}
		}
		public QueryParam [] Params
		{
			get{return prms;}
		}
		public string Name
		{
			get{return name;}
		}
		public uint ID
		{
			get{return id;}
		}
		public QueryOpType Op
		{
			get{return op;}
		}
		public string Custom
		{
			get{return custom;}
		}
		#endregion

		public static QueryQuery Deserialize(XmlNode x, Hashtable objLookup)
		{
			QueryQuery q = new QueryQuery();
			QuerySim.CheckNode(x, "query", attrList, optList);
			q.id = Convert.ToUInt32(x.Attributes["hexid"].Value, 16);
			q.name = x.Attributes["name"].Value;
			string op = x.Attributes["op"].Value;
			for(int i = 0; i < (int) QueryOpType.Count; ++i)
			{
				if(op == ((QueryOpType) i).ToString().ToLower())
				{
					q.op = (QueryOpType) i;
				}
			}
			if(q.op == QueryOpType.Count)
				throw new Exception("XQS Parse Error: Unknown Query Operation: \"" + op + "\"");

			ArrayList ps = new ArrayList();
			ArrayList fs = new ArrayList();
			ArrayList rs = new ArrayList();
			Hashtable psLookup = new Hashtable();

			uint customcount = 0;
			foreach(XmlNode c in x.ChildNodes)
			{
				if(c.NodeType != XmlNodeType.Element)
					continue;
				switch(c.LocalName)
				{
					case "params":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryParam qp = QueryParam.Deserialize(a);
							if(qp != null)
							{
								ps.Add(qp);
								if(psLookup[qp.ID] != null)
									throw new Exception("XQS Parse Error: Duplicate Schema Query Param ID detected: \"0x" + qp.ID.ToString("X8") + "\"");
								psLookup[qp.ID] = qp;
							}
						}
						break;
					case "filters":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryFilter qf = QueryFilter.Deserialize(a, objLookup, psLookup);
							if(qf != null)
							{
								fs.Add(qf);
							}
						}
						break;
					case "sortops":
						break;
					case "returns":
					{
						if(q.op == QueryOpType.Custom)
							throw new Exception("XQS Parse Error: Query \"" + q.name + "\" is a custom query, a return set should not be specified.");
						if(q.op == QueryOpType.UpdateID)
							throw new Exception("XQS Parse Error: Query \"" + q.name + "\" is an ID update query, a return set should not be specified.");
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryReturn qr = QueryReturn.Deserialize(a, objLookup, psLookup);
							if(qr != null)
							{
								rs.Add(qr);
							}
						}
					}
						break;
					case "custom":
					{
						customcount++;
						if(q.op != QueryOpType.Custom)
							throw new Exception("XQS Parse Error: Query \"" + q.name + "\" is not a custom query but a custom tag was found.");
						if(customcount > 1)
							throw new Exception("XQS Parse Error: Custom Query \"" + q.name + "\" has multiple custom nodes defined.");
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType == XmlNodeType.CDATA)
							{
								if(q.custom != null)
									throw new Exception("XQS Parse Error: Custom Query \"" + q.name + "\" already has a body.");
								q.custom = a.Value;
							}
						}
					}
						break;

				};
			}
			if(q.op == QueryOpType.Custom && q.custom == null)
				throw new Exception("XQS Parse Error: Custom Query \"" + q.name + "\" did not set a body for the custom query.");

			q.prms = (QueryParam []) ps.ToArray(typeof(QueryParam));
			q.rtrns = (QueryReturn []) rs.ToArray(typeof(QueryReturn));
			q.fltrs = (QueryFilter []) fs.ToArray(typeof(QueryFilter));
			return q;
		}
	}
	#endregion

	public class QueryDataset
	{

		uint id;
		int quota;
		string name;
		int typeid;
		QuerySchemaAttribute [] attributes;
		QueryConstant [] constants;
		QueryIndex [] indices;
		static XmlDocument entity_id_doc = new XmlDocument();
		static XmlDocument owner_id_doc = new XmlDocument();
		static string [] attrList = new string [] {"id", "name", "quota", "typeid"};
		static string [] optList = new string [] {};

		static QueryDataset()
		{
			string entity_id_xml = "<attribute name=\"entity_id\" hexid=\"0x80000000\" kind=\"int\" />";
			string owner_id_xml = "<attribute name=\"owner_id\" hexid=\"0x80000001\" kind=\"int\" />";
			entity_id_doc.LoadXml(entity_id_xml);
			owner_id_doc.LoadXml(owner_id_xml);
		}

		#region Accessors
		public QueryIndex [] Indices
		{
			get {return indices;}
		}
		public QueryConstant [] Constants
		{
			get {return constants;}
		}
		public QuerySchemaAttribute [] Attributes
		{
			get {return attributes;}
		}
		public uint ID
		{
			get {return id;}
		}
		public int Quota
		{
			get {return quota;}
		}
		public string Name
		{
			get {return name;}
		}
		public int TypeID
		{
			get {return typeid;}
		}
		#endregion

		static public QueryDataset Deserialize(XmlNode x)
		{
			QueryDataset d = new QueryDataset();
			QuerySim.CheckNode(x, "dataset", attrList, optList);
			d.id = Convert.ToUInt32(x.Attributes["id"].Value, 16);
			d.name = x.Attributes["name"].Value;
			d.quota = Convert.ToInt32(x.Attributes["quota"].Value, 10);
			d.typeid = Convert.ToInt32(x.Attributes["typeid"].Value, 10);
			uint dsSize = 0;
			uint dsvarSize = 0;
			uint colCount = 0;
			uint colvarCount = 0;

			ArrayList attrs = new ArrayList();
			ArrayList cs = new ArrayList();
			ArrayList qs = new ArrayList();
			ArrayList ps = new ArrayList();
			ArrayList ix = new ArrayList();
			Hashtable ixLookup = new Hashtable();
			Hashtable atLookup = new Hashtable();
			Hashtable qsLookup = new Hashtable();

			QuerySchemaAttribute owner_id = QuerySchemaAttribute.Deserialize(owner_id_doc.FirstChild, ixLookup);
			QuerySchemaAttribute entity_id = QuerySchemaAttribute.Deserialize(entity_id_doc.FirstChild, ixLookup);
			attrs.Add(owner_id);
			attrs.Add(entity_id);
			atLookup[owner_id.ID] = owner_id;
			atLookup[entity_id.ID] = entity_id;


			foreach(XmlNode c in x.ChildNodes)
			{
				if(c.NodeType != XmlNodeType.Element)
					continue;

				switch(c.LocalName)
				{
					case "schema":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QuerySchemaAttribute attr = QuerySchemaAttribute.Deserialize(a, ixLookup);
							if(attr != null)
							{
								if(attr.Kind == typeof(long))
								{
									colCount++;
									dsSize += 8;
								}
								else
								{
									colCount++;
									colvarCount++;
									if(attr.Kind == typeof(string))
                                        dsvarSize += attr.MaxLen * 2;
									else
										dsvarSize += attr.MaxLen;
								}
								attrs.Add(attr);
								if(atLookup[attr.ID] != null)
									throw new Exception("XQS Parse Error: Duplicate Schema Attribute ID detected (case insensitive): \"0x" + attr.ID.ToString("X8") + "\"");
								atLookup[attr.ID] = attr;
							}
						}
						break;
					case "constants":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryConstant cons = QueryConstant.Deserialize(a);
							if(cons != null)
							{
								cs.Add(cons);
								if(atLookup[cons.ID] != null)
									throw new Exception("XQS Parse Error: Duplicate Schema Constant ID detected: \"0x" + cons.ID.ToString("X8") + "\"");
								atLookup[cons.ID] = cons;
							}
						}
						break;
					case "queries":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryQuery qq = QueryQuery.Deserialize(a, atLookup);
							if(qq != null)
							{
								qs.Add(qq);
								if(qsLookup[qq.ID.ToString("X8") + qq.Op.ToString()] != null)
									throw new Exception("XQS Parse Error: Duplicate Schema Query ID detected: \"0x" + qq.ID.ToString("X8") + "\" Op: " + qq.Op.ToString());
								qsLookup[qq.ID.ToString("X8") + qq.Op.ToString()] = 1;
							}
						}
						break;
					case "indexes":
						foreach(XmlNode a in c.ChildNodes)
						{
							if(a.NodeType != XmlNodeType.Element)
								continue;
							QueryIndex idx = QueryIndex.Deserialize(a, ixLookup);
							if(idx != null)
								ix.Add(idx);
						}
						break;
					case "plugins":
						break;
				};
			}

			// Calculating row size here...
			uint nullBitMap = 2 + ((colCount + 7) / 8);
			uint varDataSize = (colvarCount == 0) ? 0 : 2 + (colvarCount * 2) + dsvarSize;
			uint rowSize = dsSize + varDataSize + nullBitMap + 4;
			if(rowSize > 8096) // 8096 is the free space for a page in SQL Server
				throw new Exception("The total rowsize for dataset \"" + d.name + "\" ID: \"0x" + d.id.ToString("X8") + "\" is " + rowSize.ToString() + " which is greater than the 8096 supported by SQL Server.");

			// Finishing off configuration of object.
			d.attributes = (QuerySchemaAttribute []) attrs.ToArray(typeof(QuerySchemaAttribute));
			d.constants = (QueryConstant []) cs.ToArray(typeof(QueryConstant));
			d.indices = (QueryIndex []) ix.ToArray(typeof(QueryIndex));
			StringBuilder sbNotUsed = new StringBuilder(), sbNotComplete = new StringBuilder();
			uint clusterCount = 0;
			bool fNotUsed = false, fNotComplete = false;
			foreach(QueryIndex qi in d.indices)
			{
				if(qi.Clustered)
					clusterCount++;
				if(qi.Used == false)
				{
					fNotUsed = true;
					sbNotUsed.Append("\t\"");
					sbNotUsed.Append(qi.Name).Append("\"\n");
				}
				if(qi.Complete == false)
				{
					fNotComplete = true;
					sbNotComplete.Append("\t\"");
					sbNotComplete.Append(qi.Name).Append("\"\n");
				}
			}

			string msg = "";
			if(fNotUsed || fNotComplete || clusterCount > 1)
				msg += "Dataset: \"" + d.name + "\":\n";

			if(fNotUsed)
			{
				msg += "The following indices were defined but not used:\n";
				msg += sbNotUsed.ToString();
			}

			if(fNotUsed && fNotComplete)
				msg += "\n";

			if(fNotComplete)
			{
				msg += "The following indices were used but not defined:\n";
				msg += sbNotComplete.ToString();
			}

			if((fNotUsed || fNotComplete) && !(fNotUsed && fNotComplete) && clusterCount > 1)
				msg += "\n";

			if(clusterCount > 1)
				msg += "This dataset contains multiple indices listed as clustered.\n";

			if(msg.Length > 0)
				throw new Exception(msg);

			return d;
		}

	}

	#region QueryTitle
	public class QueryTitle
	{
		uint id;
		string name;
		static string [] attrList = new string [] {"id", "name"};
		static string [] optList = new string [] {};

		QueryDataset [] datasets;
		#region Accessors
		public uint ID
		{
			get {return id;}
		}
		public string Name
		{
			get {return name;}
		}
		public QueryDataset [] Datasets
		{
			get {return datasets;}
		}
		#endregion

		static public QueryTitle Deserialize(XmlNode x)
		{
			QueryTitle t = new QueryTitle();

			QuerySim.CheckNode(x, "title", attrList, optList);
			t.id = Convert.ToUInt32(x.Attributes["id"].Value, 16);
			t.name = x.Attributes["name"].Value;

			ArrayList al = new ArrayList();
			foreach(XmlNode c in x.ChildNodes)
			{
				if(c.NodeType == XmlNodeType.Element)
				{
					if(c.LocalName == "dataset")
					{
						QueryDataset d = QueryDataset.Deserialize(c);
						if(d != null)
							al.Add(d);
					}
				}
			}

			t.datasets = (QueryDataset []) al.ToArray(typeof(QueryDataset));
			return t;
		}
	}
	#endregion

	#region QuerySim
	public class QuerySim
	{
		string sVersion;
		ulong ulVersion;
		QueryTitle [] titles;
		bool valid = false;
		static string [] attrList = new string [] {"ver", "hexver"};
		static string [] optList = new string [] {};
		static bool rigorous = false;

        #region Accessors
		public static bool Rigorous
		{
			get{return rigorous;}
		}
		public bool Valid
		{
			get{return valid;}
		}
		public string VersionString
		{
			get{return sVersion;}
		}
		public ulong Version
		{
			get{return ulVersion;}
		}
		public QueryTitle [] Titles
		{
			get{return titles;}
		}
		#endregion

		static public void CheckNode(XmlNode x, string nodeName, string [] attrList, string [] optList)
		{
			if(x.LocalName != nodeName)
				throw new Exception("XQS parse error: expected \"" + nodeName + "\" got \"" + x.LocalName + "\"");

			foreach(string s in attrList)
			{
				if(x.Attributes[s] == null)
					throw new Exception("XQS parse error: the attribute \"" + s + "\" on node \"" + nodeName + "\" was not found.");
			}
			foreach(XmlAttribute xa in x.Attributes)
			{
				bool fFound = false;
				foreach(string s in attrList)
				{
					if(xa.Name == s)
					{
						fFound = true;
						break;
					}
				}
				if(fFound)
					continue;
				foreach(string s in optList)
				{
					if(xa.Name == s)
					{
						fFound = true;
						break;
					}
				}
				if(!fFound && QuerySim.Rigorous)
					throw new Exception("XQS Parse Error: Unknown attribute: \"" + xa.Name + "\" on node \"" + x.Name + "\"");
			}
		}
		static public QuerySim Deserialize(XmlNode x)
		{
			QuerySim q = new QuerySim();
			if(x == null)
				return null;
			CheckNode(x, "querysim", attrList, optList);
			q.sVersion = x.Attributes["ver"].Value;
			q.ulVersion = Convert.ToUInt64(x.Attributes["hexver"].Value, 16);

			ArrayList al = new ArrayList();
			foreach(XmlNode c in x.ChildNodes)
			{
				if(c.NodeType == XmlNodeType.Element && c.LocalName == "title")
				{
					QueryTitle t = QueryTitle.Deserialize(c);
					if(t != null)
						al.Add(t);
				}
			}
			q.titles = (QueryTitle []) al.ToArray(typeof(QueryTitle));
			if(q.titles.Length > 0 && q.sVersion != null)
			{
				q.valid = true;
			}
			return q;
		}
	};
	#endregion

	public class QueryPrime : Query.Query
	{
		CallStatistics cs = null;
		public QueryPrime(CallStatistics s)
		{
			cs = s;
			Url = s.Environment.ToUri("/Query/Query.asmx");
		}

		protected QueryPrime(String url) {}
		protected QueryPrime() {}

		protected override WebRequest GetWebRequest(Uri uri)
		{
			return cs.GetWebRequest(this, (HttpWebRequest) base.GetWebRequest(uri));
		}


		// Query functions (16)
		#region public new ulong Add(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, QueryAttribute[] attributes)
		public void CBAdd(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndAdd(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.Add failed.", e);
			}
			obj.Set();
		}

		public new ulong Add(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBAdd);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginAdd(TitleId, WebId, GamerTag, teamName, DatasetId, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_Add, start, cbres.dtCompleted);
			return (ulong) cbres.res;
		}
		#endregion

		#region public new void Update(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		public void CBUpdate(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndUpdate(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.Update failed.", e);
			}
			obj.Set();
		}

		public new void Update(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBUpdate);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginUpdate(TitleId, WebId, GamerTag, teamName, DatasetId, procIndex, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_Update, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void UpdateId(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes)
		public void CBUpdateId(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndUpdateId(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.UpdateId failed.", e);
			}
			obj.Set();
		}

		public new void UpdateId(uint TitleId, byte [] WebId, string GamerTag, string teamName, uint DatasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBUpdateId);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginUpdateId(TitleId, WebId, GamerTag, teamName, DatasetId,  procIndex, entityId, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_UpdateId, start, cbres.dtCompleted);
		}
		#endregion

		#region public new SearchResponse Search(uint TitleId, uint DatasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		public void CBSearch(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndSearch(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.Search failed.", e);
			}
			obj.Set();
		}

		public new SearchResponse Search(uint TitleId, uint DatasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSearch);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSearch(TitleId, DatasetId,  procIndex, page, resultsPerPage, specs, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_Search, start, cbres.dtCompleted);
			return (SearchResponse) cbres.res;
		}
		#endregion

		#region public new FindFromIdsResponse FindFromIds(uint TitleId, uint DatasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds)
		public void CBFindFromIds(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndFindFromIds(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.FindFromIds failed.", e);
			}
			obj.Set();
		}

		public new FindFromIdsResponse FindFromIds(uint TitleId, uint DatasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBFindFromIds);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginFindFromIds(TitleId, DatasetId,  procIndex, specs, entityIds, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_FindFromIds, start, cbres.dtCompleted);
			return (FindFromIdsResponse) cbres.res;
		}
		#endregion

		#region public new void Remove(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		public void CBRemove(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRemove(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.Remove failed.", e);
			}
			obj.Set();
		}

		public new void Remove(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, uint procIndex, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRemove);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRemove(TitleId, WebId, gamerTag, teamName, DatasetId, procIndex, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_Remove, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void RemoveId(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId)
		public void CBRemoveId(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndRemoveId(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.RemoveId failed.", e);
			}
			obj.Set();
		}

		public new void RemoveId(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBRemoveId);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginRemoveId(TitleId, WebId, gamerTag, teamName, DatasetId, entityId, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_RemoveId, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void Select(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId, uint action, QueryAttribute[] attributes)
		public void CBSelect(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndSelect(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.Select failed.", e);
			}
			obj.Set();
		}

		public new void Select(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint DatasetId, ulong entityId, uint action, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBSelect);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginSelect(TitleId, WebId, gamerTag, teamName, DatasetId, entityId, action, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_Select, start, cbres.dtCompleted);
		}
		#endregion

		#region public new QuerySim GetXQSConfig(uint TitleId, byte[] WebId, ulong haveVersion)
		public void CBGetXQSConfig(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndGetXQSConfig(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.GetXQSConfig failed.", e);
			}
			obj.Set();
		}

		public new QuerySim GetXQSConfig(uint TitleId, byte[] WebId, ulong haveVersion)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBGetXQSConfig);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginGetXQSConfig(TitleId, WebId, haveVersion, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			if(cbres.e != null && cbres.e.InnerException != null && cbres.e.InnerException.Message == "Server was unable to process request. -->  Error: titleid " + TitleId.ToString() + " does not have an XQS configuration on XBOX Live. hr = 80150013")
			{
				cbres.e = null;
				cbres.res = null;
			}
			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_GetXQSConfig, start, cbres.dtCompleted);
			string s = (string) cbres.res;
			if(s == null || s.Length == 0)
				return null;
			XmlDocument doc = new XmlDocument();
			doc.LoadXml(s);
			QuerySim q = QuerySim.Deserialize(doc.DocumentElement);
			return q;
		}
		#endregion

		#region public new ulong CompetitionCreate(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes)
		public void CBCompetitionCreate(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCompetitionCreate(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionCreate failed.", e);
			}
			obj.Set();
		}

		public new ulong CompetitionCreate(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionCreate);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionCreate(TitleId, WebId, gamerTag, teamName, datasetId, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionCreate, start, cbres.dtCompleted);
			return (ulong) cbres.res;
		}
		#endregion

		#region public new ulong CompetitionCreateSingleElimination(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, uint cPrivateSlots, uint cPublicSlots, uint cMinimumPlayers, DateTime dtRegistrationOpen, DateTime dtRegistrationClose, DateTime dtCompetitionStart, DateTime dtRoundOneStart, DateTime dtRoundOneEnd, uint dwMatchReminderAdvanceMinutes, uint UnitOrMask, uint Interval, bool fTeamCompetition, uint dwTeamSize, QueryAttribute[] additionalAttributes)
		public void CBCompetitionCreateSingleElimination(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCompetitionCreateSingleElimination(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionCreateSingleElimination failed.", e);
			}
			obj.Set();
		}

		public new ulong CompetitionCreateSingleElimination(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, uint cPrivateSlots, uint cPublicSlots, uint cMinimumPlayers, DateTime dtRegistrationOpen, DateTime dtRegistrationClose, DateTime dtCompetitionStart, DateTime dtRoundOneStart, DateTime dtRoundOneEnd, uint dwMatchReminderAdvanceMinutes, uint UnitOrMask, uint Interval, bool fTeamCompetition, uint dwTeamSize, QueryAttribute[] additionalAttributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionCreateSingleElimination);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionCreateSingleElimination(TitleId, WebId, gamerTag, teamName, datasetId, cPrivateSlots, cPublicSlots, cMinimumPlayers, dtRegistrationOpen, dtRegistrationClose, dtCompetitionStart, dtRoundOneStart, dtRoundOneEnd, dwMatchReminderAdvanceMinutes, UnitOrMask, Interval, fTeamCompetition, dwTeamSize, additionalAttributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionCreateSingleElimination, start, cbres.dtCompleted);
			return (ulong) cbres.res;
		}
		#endregion

		#region public new SearchResponse CompetitionSearch(uint TitleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		public void CBCompetitionSearch(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCompetitionSearch(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionSearch failed.", e);
			}
			obj.Set();
		}

		public new SearchResponse CompetitionSearch(uint TitleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionSearch);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionSearch(TitleId, datasetId, queryId, page, resultsPerPage, specs, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionSearch, start, cbres.dtCompleted);
			return (SearchResponse) cbres.res;
		}
		#endregion

		#region public new void CompetitionManageEntrant(uint TitleId, byte[] WebId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes)
		public void CBCompetitionManageEntrant(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndCompetitionManageEntrant(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionManageEntrant failed.", e);
			}
			obj.Set();
		}

		public new void CompetitionManageEntrant(uint TitleId, byte[] WebId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionManageEntrant);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionManageEntrant(TitleId, WebId, gamerTag, action, teamName, datasetId, competitionId, attributes, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionManageEntrant, start, cbres.dtCompleted);
		}
		#endregion

		#region public new void CompetitionCancel(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, ulong competitionId)
		public void CBCompetitionCancel(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				EndCompetitionCancel(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionCancel failed.", e);
			}
			obj.Set();
		}

		public new void CompetitionCancel(uint TitleId, byte[] WebId, string gamerTag, string teamName, uint datasetId, ulong competitionId)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionCancel);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionCancel(TitleId, WebId, gamerTag, teamName, datasetId, competitionId, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionCancel, start, cbres.dtCompleted);
		}
		#endregion

		#region public new SearchResponse CompetitionTopology(uint TitleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs)
		public void CBCompetitionTopology(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCompetitionTopology(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionTopology failed.", e);
			}
			obj.Set();
		}

		public new SearchResponse CompetitionTopology(uint TitleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionTopology);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionTopology(TitleId, datasetId, competitionId, page, resultsPerPage, startingEventId, endingEventId, specs, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionTopology, start, cbres.dtCompleted);
			return (SearchResponse) cbres.res;
		}
		#endregion

		#region public new SearchResponse CompetitionTopologySingleElimination(uint TitleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs)
		public void CBCompetitionTopologySingleElimination(IAsyncResult ar)
		{
			// Obtain the result.
			asyncCallbackObject obj = (asyncCallbackObject) ar.AsyncState;
			try
			{
				obj.res = EndCompetitionTopologySingleElimination(ar);
			}
			catch(Exception e)
			{
				obj.e = new Exception("The call to Query.CompetitionTopologySingleElimination failed.", e);
			}
			obj.Set();
		}

		public new SearchResponse CompetitionTopologySingleElimination(uint TitleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs)
		{
			Exception f;
			IAsyncResult async;
			AsyncCallback cb = new AsyncCallback(CBCompetitionTopologySingleElimination);
			asyncCallbackObject cbres = new asyncCallbackObject();
			System.DateTime start = System.DateTime.Now;

			async = BeginCompetitionTopologySingleElimination(TitleId, datasetId, competitionId, originEventId, roundsForward, roundsBackward, topWidth, specs, cb, cbres);
			f = cs.WaitOneObject(cbres.sync);

			cs.ProcessResult((f == null) ? cbres.e : f, APIInfo.Query_CompetitionTopologySingleElimination, start, cbres.dtCompleted);
			return (SearchResponse) cbres.res;
		}
		#endregion
	};
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Presence.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Presence {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PresenceSoap", Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class Presence : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetGamertagsFromXUIDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXUIDSFromGamertagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPresenceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentPlayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendsOperationCompleted;
        
        /// <remarks/>
        public Presence() {
            this.Url = "http://xewbcaiis001:12000/Presence/Presence.asmx";
        }
        
        /// <remarks/>
        public event GetGamertagsFromXUIDSCompletedEventHandler GetGamertagsFromXUIDSCompleted;
        
        /// <remarks/>
        public event GetXUIDSFromGamertagsCompletedEventHandler GetXUIDSFromGamertagsCompleted;
        
        /// <remarks/>
        public event GetPresenceInfoCompletedEventHandler GetPresenceInfoCompleted;
        
        /// <remarks/>
        public event GetFriendsExCompletedEventHandler GetFriendsExCompleted;
        
        /// <remarks/>
        public event GetRecentPlayersCompletedEventHandler GetRecentPlayersCompleted;
        
        /// <remarks/>
        public event GetFriendsCompletedEventHandler GetFriendsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetGamertagsFromXUIDS", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetGamertagsFromXUIDS(ulong[] XUIDS) {
            object[] results = this.Invoke("GetGamertagsFromXUIDS", new object[] {
                        XUIDS});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGamertagsFromXUIDS(ulong[] XUIDS, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGamertagsFromXUIDS", new object[] {
                        XUIDS}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetGamertagsFromXUIDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGamertagsFromXUIDSAsync(ulong[] XUIDS) {
            this.GetGamertagsFromXUIDSAsync(XUIDS, null);
        }
        
        /// <remarks/>
        public void GetGamertagsFromXUIDSAsync(ulong[] XUIDS, object userState) {
            if ((this.GetGamertagsFromXUIDSOperationCompleted == null)) {
                this.GetGamertagsFromXUIDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGamertagsFromXUIDSOperationCompleted);
            }
            this.InvokeAsync("GetGamertagsFromXUIDS", new object[] {
                        XUIDS}, this.GetGamertagsFromXUIDSOperationCompleted, userState);
        }
        
        private void OnGetGamertagsFromXUIDSOperationCompleted(object arg) {
            if ((this.GetGamertagsFromXUIDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGamertagsFromXUIDSCompleted(this, new GetGamertagsFromXUIDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetXUIDSFromGamertags", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong[] GetXUIDSFromGamertags(string[] gamertags) {
            object[] results = this.Invoke("GetXUIDSFromGamertags", new object[] {
                        gamertags});
            return ((ulong[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetXUIDSFromGamertags(string[] gamertags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetXUIDSFromGamertags", new object[] {
                        gamertags}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong[] EndGetXUIDSFromGamertags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong[])(results[0]));
        }
        
        /// <remarks/>
        public void GetXUIDSFromGamertagsAsync(string[] gamertags) {
            this.GetXUIDSFromGamertagsAsync(gamertags, null);
        }
        
        /// <remarks/>
        public void GetXUIDSFromGamertagsAsync(string[] gamertags, object userState) {
            if ((this.GetXUIDSFromGamertagsOperationCompleted == null)) {
                this.GetXUIDSFromGamertagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXUIDSFromGamertagsOperationCompleted);
            }
            this.InvokeAsync("GetXUIDSFromGamertags", new object[] {
                        gamertags}, this.GetXUIDSFromGamertagsOperationCompleted, userState);
        }
        
        private void OnGetXUIDSFromGamertagsOperationCompleted(object arg) {
            if ((this.GetXUIDSFromGamertagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXUIDSFromGamertagsCompleted(this, new GetXUIDSFromGamertagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetPresenceInfo", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PresenceInfo GetPresenceInfo(ulong targetXUID, ulong senderXUID, ushort senderLocale, out uint ValidSeconds) {
            object[] results = this.Invoke("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale});
            ValidSeconds = ((uint)(results[1]));
            return ((PresenceInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPresenceInfo(ulong targetXUID, ulong senderXUID, ushort senderLocale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale}, callback, asyncState);
        }
        
        /// <remarks/>
        public PresenceInfo EndGetPresenceInfo(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((PresenceInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPresenceInfoAsync(ulong targetXUID, ulong senderXUID, ushort senderLocale) {
            this.GetPresenceInfoAsync(targetXUID, senderXUID, senderLocale, null);
        }
        
        /// <remarks/>
        public void GetPresenceInfoAsync(ulong targetXUID, ulong senderXUID, ushort senderLocale, object userState) {
            if ((this.GetPresenceInfoOperationCompleted == null)) {
                this.GetPresenceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresenceInfoOperationCompleted);
            }
            this.InvokeAsync("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale}, this.GetPresenceInfoOperationCompleted, userState);
        }
        
        private void OnGetPresenceInfoOperationCompleted(object arg) {
            if ((this.GetPresenceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPresenceInfoCompleted(this, new GetPresenceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetFriendsEx", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FriendEx[] GetFriendsEx(ulong XUID, ushort locale, out uint ValidSeconds) {
            object[] results = this.Invoke("GetFriendsEx", new object[] {
                        XUID,
                        locale});
            ValidSeconds = ((uint)(results[1]));
            return ((FriendEx[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFriendsEx(ulong XUID, ushort locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFriendsEx", new object[] {
                        XUID,
                        locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public FriendEx[] EndGetFriendsEx(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((FriendEx[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendsExAsync(ulong XUID, ushort locale) {
            this.GetFriendsExAsync(XUID, locale, null);
        }
        
        /// <remarks/>
        public void GetFriendsExAsync(ulong XUID, ushort locale, object userState) {
            if ((this.GetFriendsExOperationCompleted == null)) {
                this.GetFriendsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendsExOperationCompleted);
            }
            this.InvokeAsync("GetFriendsEx", new object[] {
                        XUID,
                        locale}, this.GetFriendsExOperationCompleted, userState);
        }
        
        private void OnGetFriendsExOperationCompleted(object arg) {
            if ((this.GetFriendsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendsExCompleted(this, new GetFriendsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetRecentPlayers", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecentPlayer[] GetRecentPlayers(ulong xuid, ushort maxRequest, ushort locale) {
            object[] results = this.Invoke("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale});
            return ((RecentPlayer[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecentPlayers(ulong xuid, ushort maxRequest, ushort locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public RecentPlayer[] EndGetRecentPlayers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RecentPlayer[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentPlayersAsync(ulong xuid, ushort maxRequest, ushort locale) {
            this.GetRecentPlayersAsync(xuid, maxRequest, locale, null);
        }
        
        /// <remarks/>
        public void GetRecentPlayersAsync(ulong xuid, ushort maxRequest, ushort locale, object userState) {
            if ((this.GetRecentPlayersOperationCompleted == null)) {
                this.GetRecentPlayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentPlayersOperationCompleted);
            }
            this.InvokeAsync("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale}, this.GetRecentPlayersOperationCompleted, userState);
        }
        
        private void OnGetRecentPlayersOperationCompleted(object arg) {
            if ((this.GetRecentPlayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentPlayersCompleted(this, new GetRecentPlayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetFriends", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FriendsInfo GetFriends([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag, out uint ValidSeconds) {
            object[] results = this.Invoke("GetFriends", new object[] {
                        WebID,
                        GamerTag});
            ValidSeconds = ((uint)(results[1]));
            return ((FriendsInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFriends(byte[] WebID, string GamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFriends", new object[] {
                        WebID,
                        GamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public FriendsInfo EndGetFriends(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((FriendsInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendsAsync(byte[] WebID, string GamerTag) {
            this.GetFriendsAsync(WebID, GamerTag, null);
        }
        
        /// <remarks/>
        public void GetFriendsAsync(byte[] WebID, string GamerTag, object userState) {
            if ((this.GetFriendsOperationCompleted == null)) {
                this.GetFriendsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendsOperationCompleted);
            }
            this.InvokeAsync("GetFriends", new object[] {
                        WebID,
                        GamerTag}, this.GetFriendsOperationCompleted, userState);
        }
        
        private void OnGetFriendsOperationCompleted(object arg) {
            if ((this.GetFriendsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendsCompleted(this, new GetFriendsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class PresenceInfo {
        
        private ulong xUIDField;
        
        private string gamerTagField;
        
        private uint onlineStateField;
        
        private uint lastSeenTitleField;
        
        private uint minutesSinceStateChangeField;
        
        private string richPresenceStringField;
        
        /// <remarks/>
        public ulong XUID {
            get {
                return this.xUIDField;
            }
            set {
                this.xUIDField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public uint OnlineState {
            get {
                return this.onlineStateField;
            }
            set {
                this.onlineStateField = value;
            }
        }
        
        /// <remarks/>
        public uint LastSeenTitle {
            get {
                return this.lastSeenTitleField;
            }
            set {
                this.lastSeenTitleField = value;
            }
        }
        
        /// <remarks/>
        public uint MinutesSinceStateChange {
            get {
                return this.minutesSinceStateChangeField;
            }
            set {
                this.minutesSinceStateChangeField = value;
            }
        }
        
        /// <remarks/>
        public string RichPresenceString {
            get {
                return this.richPresenceStringField;
            }
            set {
                this.richPresenceStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class OfflineFriend {
        
        private string gField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class OnlineFriend {
        
        private string gField;
        
        private uint tField;
        
        private uint sField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
        
        /// <remarks/>
        public uint T {
            get {
                return this.tField;
            }
            set {
                this.tField = value;
            }
        }
        
        /// <remarks/>
        public uint S {
            get {
                return this.sField;
            }
            set {
                this.sField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class FriendsInfo {
        
        private OnlineFriend[] onlineFriendsField;
        
        private OfflineFriend[] offlineFriendsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public OnlineFriend[] OnlineFriends {
            get {
                return this.onlineFriendsField;
            }
            set {
                this.onlineFriendsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public OfflineFriend[] OfflineFriends {
            get {
                return this.offlineFriendsField;
            }
            set {
                this.offlineFriendsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class RecentPlayer {
        
        private ulong userLivepuidField;
        
        private string gamertagField;
        
        private string gamerTileUrlField;
        
        private int reputationBucketField;
        
        private int gamerScoreField;
        
        private GamercardZones gamerZoneField;
        
        private RecentPlayerStatus statusField;
        
        private string gameTitleNameField;
        
        private System.DateTime lastMetDateField;
        
        private string gameTitleTileUrlField;
        
        /// <remarks/>
        public ulong UserLivepuid {
            get {
                return this.userLivepuidField;
            }
            set {
                this.userLivepuidField = value;
            }
        }
        
        /// <remarks/>
        public string Gamertag {
            get {
                return this.gamertagField;
            }
            set {
                this.gamertagField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTileUrl {
            get {
                return this.gamerTileUrlField;
            }
            set {
                this.gamerTileUrlField = value;
            }
        }
        
        /// <remarks/>
        public int ReputationBucket {
            get {
                return this.reputationBucketField;
            }
            set {
                this.reputationBucketField = value;
            }
        }
        
        /// <remarks/>
        public int GamerScore {
            get {
                return this.gamerScoreField;
            }
            set {
                this.gamerScoreField = value;
            }
        }
        
        /// <remarks/>
        public GamercardZones GamerZone {
            get {
                return this.gamerZoneField;
            }
            set {
                this.gamerZoneField = value;
            }
        }
        
        /// <remarks/>
        public RecentPlayerStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string GameTitleName {
            get {
                return this.gameTitleNameField;
            }
            set {
                this.gameTitleNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastMetDate {
            get {
                return this.lastMetDateField;
            }
            set {
                this.lastMetDateField = value;
            }
        }
        
        /// <remarks/>
        public string GameTitleTileUrl {
            get {
                return this.gameTitleTileUrlField;
            }
            set {
                this.gameTitleTileUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public enum GamercardZones {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Xbox_1,
        
        /// <remarks/>
        RR,
        
        /// <remarks/>
        Pro,
        
        /// <remarks/>
        Family,
        
        /// <remarks/>
        Underground,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public enum RecentPlayerStatus {
        
        /// <remarks/>
        Neutral,
        
        /// <remarks/>
        Preferred,
        
        /// <remarks/>
        Avoided,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class FriendEx {
        
        private ulong xUIDField;
        
        private string gamerTagField;
        
        private uint friendStatusField;
        
        private uint onlineStateField;
        
        private uint lastSeenTitleField;
        
        private uint minutesSinceStateChangeField;
        
        private string richPresenceStringField;
        
        /// <remarks/>
        public ulong XUID {
            get {
                return this.xUIDField;
            }
            set {
                this.xUIDField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public uint FriendStatus {
            get {
                return this.friendStatusField;
            }
            set {
                this.friendStatusField = value;
            }
        }
        
        /// <remarks/>
        public uint OnlineState {
            get {
                return this.onlineStateField;
            }
            set {
                this.onlineStateField = value;
            }
        }
        
        /// <remarks/>
        public uint LastSeenTitle {
            get {
                return this.lastSeenTitleField;
            }
            set {
                this.lastSeenTitleField = value;
            }
        }
        
        /// <remarks/>
        public uint MinutesSinceStateChange {
            get {
                return this.minutesSinceStateChangeField;
            }
            set {
                this.minutesSinceStateChangeField = value;
            }
        }
        
        /// <remarks/>
        public string RichPresenceString {
            get {
                return this.richPresenceStringField;
            }
            set {
                this.richPresenceStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGamertagsFromXUIDSCompletedEventHandler(object sender, GetGamertagsFromXUIDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGamertagsFromXUIDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGamertagsFromXUIDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetXUIDSFromGamertagsCompletedEventHandler(object sender, GetXUIDSFromGamertagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXUIDSFromGamertagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXUIDSFromGamertagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPresenceInfoCompletedEventHandler(object sender, GetPresenceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPresenceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPresenceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PresenceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PresenceInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFriendsExCompletedEventHandler(object sender, GetFriendsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FriendEx[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FriendEx[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecentPlayersCompletedEventHandler(object sender, GetRecentPlayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecentPlayer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecentPlayer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFriendsCompletedEventHandler(object sender, GetFriendsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FriendsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FriendsInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\GeneralInfo.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace GeneralInfo {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GeneralInfoSoap", Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class GeneralInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTitleListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkedGamerTagsOperationCompleted;
        
        /// <remarks/>
        public GeneralInfo() {
            this.Url = "http://xewbcaiis001:12000/generalinfo/generalinfo.asmx";
        }
        
        /// <remarks/>
        public event GetTitleListCompletedEventHandler GetTitleListCompleted;
        
        /// <remarks/>
        public event LinkedGamerTagsCompletedEventHandler LinkedGamerTagsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/GeneralInfo/GetTitleList", RequestNamespace="http://websvc.xboxlive.com/GeneralInfo/", ResponseNamespace="http://websvc.xboxlive.com/GeneralInfo/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TitlePrivilegeInfo[] GetTitleList(out uint ValidSeconds) {
            object[] results = this.Invoke("GetTitleList", new object[0]);
            ValidSeconds = ((uint)(results[1]));
            return ((TitlePrivilegeInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public TitlePrivilegeInfo[] EndGetTitleList(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((TitlePrivilegeInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleListAsync() {
            this.GetTitleListAsync(null);
        }
        
        /// <remarks/>
        public void GetTitleListAsync(object userState) {
            if ((this.GetTitleListOperationCompleted == null)) {
                this.GetTitleListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleListOperationCompleted);
            }
            this.InvokeAsync("GetTitleList", new object[0], this.GetTitleListOperationCompleted, userState);
        }
        
        private void OnGetTitleListOperationCompleted(object arg) {
            if ((this.GetTitleListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleListCompleted(this, new GetTitleListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/GeneralInfo/LinkedGamerTags", RequestNamespace="http://websvc.xboxlive.com/GeneralInfo/", ResponseNamespace="http://websvc.xboxlive.com/GeneralInfo/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LinkInfo[] LinkedGamerTags([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID) {
            object[] results = this.Invoke("LinkedGamerTags", new object[] {
                        WebID});
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLinkedGamerTags(byte[] WebID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LinkedGamerTags", new object[] {
                        WebID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LinkInfo[] EndLinkedGamerTags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID) {
            this.LinkedGamerTagsAsync(WebID, null);
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID, object userState) {
            if ((this.LinkedGamerTagsOperationCompleted == null)) {
                this.LinkedGamerTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkedGamerTagsOperationCompleted);
            }
            this.InvokeAsync("LinkedGamerTags", new object[] {
                        WebID}, this.LinkedGamerTagsOperationCompleted, userState);
        }
        
        private void OnLinkedGamerTagsOperationCompleted(object arg) {
            if ((this.LinkedGamerTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkedGamerTagsCompleted(this, new LinkedGamerTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class TitlePrivilegeInfo {
        
        private uint titleIDField;
        
        private TitlePrivilege privilegesField;
        
        private ESRBRating ratingField;
        
        private string defaultLocaleField;
        
        private LocalizedDisplayName[] localizedNameField;
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public TitlePrivilege Privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        public ESRBRating Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultLocale {
            get {
                return this.defaultLocaleField;
            }
            set {
                this.defaultLocaleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LocalizedDisplayName[] LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                this.localizedNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public enum TitlePrivilege {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        ReadOnly,
        
        /// <remarks/>
        ReadWrite,
        
        /// <remarks/>
        FullControl,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public enum ESRBRating {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        ADULT,
        
        /// <remarks/>
        MATURE,
        
        /// <remarks/>
        TEEN,
        
        /// <remarks/>
        EVERYONE,
        
        /// <remarks/>
        KIDS_TO_ADULTS,
        
        /// <remarks/>
        EARLY_CHILDHOOD,
        
        /// <remarks/>
        UNSPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class LocalizedDisplayName {
        
        private string localeField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class LinkInfo {
        
        private string gamerTagField;
        
        private bool ownerField;
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public bool Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTitleListCompletedEventHandler(object sender, GetTitleListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TitlePrivilegeInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TitlePrivilegeInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LinkedGamerTagsCompletedEventHandler(object sender, LinkedGamerTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkedGamerTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkedGamerTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LinkInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LinkInfo[])(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\WSEnvironment.cs ===
using System;
using System.Security.Cryptography.X509Certificates;
using System.Xml;
using System.Collections;
using System.Globalization;
using System.Web;
using System.Data;
using System.IO;
using CAPICOM;
using System.Text;

namespace WSHelper
{
	/// <summary>
	/// Summary description for WSEnvironment.
	/// </summary>
	/// 
	public enum APIInfo
	{
		UserAccount_GetUserSettings,
		UserAccount_LinkedGamerTags,
		UserAccount_LinkUser,
		UserAccount_UnlinkGamerTag,
		UserAccount_SetInfoSharing,
		UserAccount_GetAccountStatus,
		GeneralInfo_GetTitleList,
		GeneralInfo_LinkedGamerTags,
		Presence_GetFriends,
		Stats_GetLBList,
		Stats_EnumerateLB,
		Stats_EnumerateLBRaw,
		Stats_GetLBDetailsForGamerTags,
		Stats_GetLBForGamerTags,
		Stats_GetLBNearGamerTag,
		Stats_GetLBListByType,
		Stats_EnumerateTeamLB,
		Stats_GetTeamLBNearTeamName,			// *
		Stats_GetTeamLBForTeamNames,			// *
		Stats_GetTeamLBDetailsForTeamNames,		// *
		Stats_GetUnitsForGamerTag,
		Stats_GetUnitForGamerTags,				// *
		Stats_GetUnitsForTeamName,				// *
		Stats_GetUnitForTeamNames,				// *
		Signature_CreateSignature,
		Signature_VerifySignature,
		Query_Add,
		Query_Update,
		Query_UpdateId,
		Query_Search,
		Query_FindFromIds,
		Query_Remove,
		Query_RemoveId,
		Query_Select,
		Query_GetXQSConfig,
		Query_CompetitionCreate,
		Query_CompetitionCreateSingleElimination,
		Query_CompetitionSearch,
		Query_CompetitionManageEntrant,
		Query_CompetitionCancel,
		Query_CompetitionTopology,
		Query_CompetitionTopologySingleElimination,
		Alerts_SubscriberExists,
		Alerts_Subscribe,
		Alerts_Unsubscribe,
		Alerts_EnumerateSubscriptions,
		Alerts_ScheduleContentAlert,
		Messaging_EnumMessages,
		Messaging_GetMessageDetails,
        Messaging_DeleteMessage,
		Messaging_SendMessage,
		Messaging_RevokeMessage,
		Messaging_DeleteUserTitle,
		Messaging_EnumUserTitles,
		Messaging_SetMessageFlags,
		Messaging_EnumTitleWideMessages,
		Messaging_GetTitleWideMessageDetails,
		Messaging_DeleteTitleWideMessage,
		Messaging_SendTitleWideMessage,
		Messaging_SendTitleUserMessage,
		Messaging_RevokeTitleUserMessage,
		Messaging_GetMessageString,
		LiveProxy_GetSiteInfo,
		LiveProxy_LookupPuids,
		LiveProxy_LookupGamerTags,
		LiveProxy_GetSitePuids,
		LiveProxy_MatchHost,
		LiveProxy_MatchHostDelete,
		LiveProxy_QueryAdd,
		LiveProxy_QueryRemove,
		Storage_GetTitleQuota,
		Storage_EnumerateTitleFiles,
		Storage_ReadTitleFile,
		Storage_WriteTitleFile,
		Storage_RevokeTitleFile,
		Storage_DeleteTitleFile,
		Storage_ReadUserFile,
		Storage_WriteUserFile,
		Storage_RevokeUserFile,
		Storage_DeleteUserFile,
		Teams_CreateTeam,
		Teams_DeleteTeam,
		Teams_ManageTeam,
		Teams_JoinTeam,
		Teams_GetTeamInfo,
		Teams_GetTeamMembers,
		Teams_RemoveTeamMember,
		Teams_ManageTeamMember,
		Teams_RecruitTeamMember,
		Count
	};

	[AttributeUsage(AttributeTargets.Class, AllowMultiple=true)] // multiuse attribute
	public class RequiredAPI : System.Attribute
	{
		public RequiredAPI(APIInfo api) {this.api = api;}
		public APIInfo api;
	}

	public delegate object DataValidationDelegate(Hashtable map);
	public delegate object DataConvolverDelegate(ArrayList list);

	#region Default Validators & Convolvers (Signature, UserInfo, SkipLocales)
	public class DefaultValidators
	{
		public static object ValidateSignature(Hashtable map)
		{
			string d = (string) map["Digest"];
			string s = (string) map["Signature"];

			if(s == null || d == null)
				return null;

			WSSignature sig = new WSSignature();
			try
			{
				sig.Digest = Helpers.HexStringToByteArray(d);
				sig.Signature = Helpers.HexStringToByteArray(s);
				if(map["Result"] != null)
					sig.Result = Helpers.GetValue(map["Result"].ToString(), 0);
				else
					sig.Result = 0;
			}
			catch(System.Exception)
			{
				return null;
			}
			return sig;
		}
		public static object ConvolveSignature(ArrayList siglist)
		{
			return (WSSignature []) siglist.ToArray(typeof(WSSignature));
		}
		public static object ValidateUserInfo(Hashtable map)
		{
			WSUserInfo u = new WSUserInfo();
			u.Description = (string) map["Description"];
			if(u.Description == null || u.Description.Length == 0)
				return null;
			u.GamerTag = (string) map["GamerTag"];
			u.CardHolder = (string) map["CardHolder"];
			u.CardNumber = (string) map["CardNumber"];
			if(u.CardNumber != null && u.CardNumber.Length == 4)
				u.CardNumber = "411111111111" + u.CardNumber;
			u.Default = Helpers.GetValue((string) map["Default"], false);
			u.PhoneExtension = (string) map["PhoneExtension"];
			u.PhoneNumber = (string) map["PhoneNumber"];
			u.PhonePrefix = (string) map["PhonePrefix"];
			u.PostalCode = (string) map["PostalCode"];
			u.Passport = (string) map["Passport"];
			u.PassportPassword = (string) map["PassportPassword"];

			if(map["Puid"] != null)
			{
				try
				{
					u.Puid = Helpers.PuidToArray((string) map["Puid"]);
					u.PuidFriendly = (string) map["Puid"];
				}
				catch
				{
				}
			}
			return u;
		}
		public static object ConvolveUserInfo(ArrayList userlist)
		{
			return (WSUserInfo []) userlist.ToArray(typeof(WSUserInfo));
		}
		public static object ValidateAPIInfo(Hashtable map)
		{
			if(map["API"] == null)
				return null;
			string s = (string) map["API"];
			APIInfo a = Helpers.GetAPIInfo(s);
			if(a == APIInfo.Count)
				return null;
			return a;
		}
		public static object ConvolveAPIInfo(ArrayList apilist)
		{
			Hashtable h = new Hashtable();
			foreach(APIInfo a in apilist)
			{
				h[a] = true;
			}
			return h;
		}
		public static object ValidateSkipLocale(Hashtable map)
		{
			if(map["LocaleID"] == null)
				return null;
			string l = (string) map["LocaleID"];
			map.Clear();
			return l.ToLower();
		}
		public static object ConvolveSkipLocale(ArrayList skiplist)
		{
			Hashtable h = new Hashtable();
			foreach(string l in skiplist)
			{
				h[l] = true;
			}
			return h;
		}
	};
	#endregion

	public class WSSignature
	{
		public byte [] Digest;
		public byte [] Signature;
		public uint Result;
	};

	public class WSUserInfo
	{
		public string Description;
		public string GamerTag;
		public string CardHolder;
		public string CardNumber;
		public string PhoneExtension;
		public string PhoneNumber;
		public string PhonePrefix;
		public string PostalCode;
		public byte [] Puid;
		public string PuidFriendly;
		public bool Default;
		public string Passport;
		public string PassportPassword;
	};

	public class WSTitleList
	{
		public uint TitleID = 0;
		public uint[] LBID = null;
		public static WSTitleList ParseFromXml(XmlNode n)
		{
			WSTitleList title = new WSTitleList();
			if(n.Name != "Title")
				return null;


			title.TitleID = Helpers.GetValue(n.Attributes["TitleID"], 0);
			if(0 == title.TitleID)
				return null;

			foreach(XmlNode x in n.ChildNodes)
			{
				if(x.Name != "LeaderboardFilter")
					continue;
				ArrayList al = new ArrayList();

				foreach(XmlNode lb in x.ChildNodes)
				{
					if(lb.Name != "Leaderboard")
						continue;
					uint u = Helpers.GetValue(lb.Attributes["LBID"], 0);
					if(0 == u)
						continue;
					al.Add(u);
				}
				if(al.Count > 0)
				{
					title.LBID = (uint []) al.ToArray(typeof(uint));
				}
			} // foreach(XmlNode x in n.ChildNodes)
			if(title.TitleID != 0)
				return title;
			return null;
		}
	}

	public class WSEnvironment
	{
		#region Variables and Properties
		public uint Timeout = 90;	// Default timeout of 90 seconds.
		public string Description = "";
		public string Host = "";
		public string HostVersion = null;
		public X509Certificate Cert = null;
		public bool fSecure = true;
		public bool fDefault = false;
		public string Version = "1.1";
		public Hashtable CustomData = new Hashtable();
		public WSTitleList[] Titles = null;
		public bool fKeepAlive = true;
		public bool fPipelined = true;
		public string LogFile = null;

		static Hashtable HostVersionToAPIs;

		static WSEnvironment()
		{
			HostVersionToAPIs = new Hashtable();
			Hashtable Aftershock = new Hashtable();
			Aftershock[APIInfo.GeneralInfo_GetTitleList] = 1;
			Aftershock[APIInfo.Presence_GetFriends] = 1;
			Aftershock[APIInfo.Stats_EnumerateLB] = 1;
			Aftershock[APIInfo.Stats_EnumerateLBRaw] = 1;
            Aftershock[APIInfo.Stats_GetLBDetailsForGamerTags] = 1;
			Aftershock[APIInfo.Stats_GetLBForGamerTags] = 1;
			Aftershock[APIInfo.Stats_GetLBList] = 1;
			Aftershock[APIInfo.Stats_GetLBNearGamerTag] = 1;
			Aftershock[APIInfo.UserAccount_GetUserSettings] = 1;
			Aftershock[APIInfo.UserAccount_LinkedGamerTags] = 1;
			Aftershock[APIInfo.UserAccount_LinkUser] = 1;
			HostVersionToAPIs["aftershock"] = Aftershock;

			Hashtable TsunamiWave2 = new Hashtable();
			foreach(APIInfo a in Aftershock.Keys)
				TsunamiWave2[a] = 1;
			TsunamiWave2[APIInfo.UserAccount_UnlinkGamerTag] = 1;
			TsunamiWave2[APIInfo.Signature_VerifySignature] = 1;
			HostVersionToAPIs["tsunami wave 2"] = TsunamiWave2;

			Hashtable Tsunami = new Hashtable();
			foreach(APIInfo a in TsunamiWave2.Keys)
				Tsunami[a] = 1;
            Tsunami.Remove( APIInfo.UserAccount_UnlinkGamerTag );

			Tsunami[APIInfo.Signature_CreateSignature] = 1;
			Tsunami[APIInfo.GeneralInfo_LinkedGamerTags] = 1;
			Tsunami[APIInfo.UserAccount_GetAccountStatus] = 1;
			Tsunami[APIInfo.UserAccount_SetInfoSharing] = 1;
//			Tsunami[APIInfo.Alerts_EnumerateSubscriptions] = 1;
//			Tsunami[APIInfo.Alerts_ScheduleContentAlert] = 1;
//			Tsunami[APIInfo.Alerts_Subscribe] = 1;
//			Tsunami[APIInfo.Alerts_SubscriberExists] = 1;
//			Tsunami[APIInfo.Alerts_Unsubscribe] = 1;
			Tsunami[APIInfo.Messaging_DeleteMessage] = 1;
			Tsunami[APIInfo.Messaging_DeleteTitleWideMessage] = 1;
			Tsunami[APIInfo.Messaging_EnumMessages] = 1;
			Tsunami[APIInfo.Messaging_EnumTitleWideMessages] = 1;
			Tsunami[APIInfo.Messaging_EnumUserTitles] = 1;
			Tsunami[APIInfo.Messaging_GetMessageDetails] = 1;
			Tsunami[APIInfo.Messaging_GetTitleWideMessageDetails] = 1;
			Tsunami[APIInfo.Messaging_RevokeMessage] = 1;
			Tsunami[APIInfo.Messaging_RevokeTitleUserMessage] = 1;
			Tsunami[APIInfo.Messaging_SendMessage] = 1;
			Tsunami[APIInfo.Messaging_SendTitleUserMessage] = 1;
			Tsunami[APIInfo.Messaging_SendTitleWideMessage] = 1;
			Tsunami[APIInfo.Messaging_SetMessageFlags] = 1;
			Tsunami[APIInfo.Query_GetXQSConfig] = 1;
			Tsunami[APIInfo.Stats_EnumerateTeamLB] = 1;
			Tsunami[APIInfo.Stats_GetLBListByType] = 1;
//			Tsunami[APIInfo.Stats_GetUnitsForGamerTag] = 1;
//			Tsunami[APIInfo.Stats_GetUnitForGamerTags] = 1;
			Tsunami[APIInfo.Stats_GetTeamLBDetailsForTeamNames] = 1;
			Tsunami[APIInfo.Stats_GetTeamLBForTeamNames] = 1;
			Tsunami[APIInfo.Stats_GetTeamLBNearTeamName] = 1;
			Tsunami[APIInfo.LiveProxy_LookupGamerTags] = 1;
			Tsunami[APIInfo.LiveProxy_LookupPuids] = 1;
			Tsunami[APIInfo.LiveProxy_GetSiteInfo] = 1;
			Tsunami[APIInfo.LiveProxy_GetSitePuids] = 1;
//			Tsunami[APIInfo.Stats_GetUnitForTeamNames] = 1;
//			Tsunami[APIInfo.Stats_GetUnitsForTeamName] = 1;
			/*	Commented out for WSMonitor to skip over these as they don't have cases yet and would result
			 * in spurious failures that aren't needed.  So make this part transparent.  VerifyPartner uses
			 * "All" anyway so these get hit by that tool instead.
			Tsunami[APIInfo.Messaging_DeleteUserTitle] = 1;
			Tsunami[APIInfo.Messaging_GetMessageString] = 1;
			Tsunami[APIInfo.Query_Add] = 1;
			Tsunami[APIInfo.Query_CompetitionCancel] = 1;
			Tsunami[APIInfo.Query_CompetitionCreate] = 1;
			Tsunami[APIInfo.Query_CompetitionCreateSingleElimination] = 1;
			Tsunami[APIInfo.Query_CompetitionManageEntrant] = 1;
			Tsunami[APIInfo.Query_CompetitionSearch] = 1;
			Tsunami[APIInfo.Query_CompetitionTopology] = 1;
			Tsunami[APIInfo.Query_CompetitionTopologySingleElimination] = 1;
			Tsunami[APIInfo.Query_FindFromIds] = 1;
			Tsunami[APIInfo.Query_Remove] = 1;
			Tsunami[APIInfo.Query_RemoveId] = 1;
			Tsunami[APIInfo.Query_Search] = 1;
			Tsunami[APIInfo.Query_Select] = 1;
			Tsunami[APIInfo.Query_Update] = 1;
			Tsunami[APIInfo.Query_UpdateId] = 1;
			*/
			HostVersionToAPIs["tsunami"] = Tsunami;

			Hashtable TsunamiSP1 = new Hashtable();
			foreach(APIInfo a in Tsunami.Keys)
				TsunamiSP1[a] = 1;
			TsunamiSP1[APIInfo.Storage_DeleteTitleFile] = 1;
			TsunamiSP1[APIInfo.Storage_DeleteUserFile] = 1;
			TsunamiSP1[APIInfo.Storage_EnumerateTitleFiles] = 1;
			TsunamiSP1[APIInfo.Storage_GetTitleQuota] = 1;
			TsunamiSP1[APIInfo.Storage_ReadTitleFile] = 1;
			TsunamiSP1[APIInfo.Storage_ReadUserFile] = 1;
			TsunamiSP1[APIInfo.Storage_RevokeTitleFile] = 1;
			TsunamiSP1[APIInfo.Storage_RevokeUserFile] = 1;
			TsunamiSP1[APIInfo.Storage_WriteTitleFile] = 1;
			TsunamiSP1[APIInfo.Storage_WriteUserFile] = 1;

			TsunamiSP1[APIInfo.Teams_CreateTeam] = 1;
			TsunamiSP1[APIInfo.Teams_DeleteTeam] = 1;
			TsunamiSP1[APIInfo.Teams_GetTeamInfo] = 1;
			TsunamiSP1[APIInfo.Teams_GetTeamMembers] = 1;
			TsunamiSP1[APIInfo.Teams_JoinTeam] = 1;
			TsunamiSP1[APIInfo.Teams_ManageTeam] = 1;
			TsunamiSP1[APIInfo.Teams_ManageTeamMember] = 1;
			TsunamiSP1[APIInfo.Teams_RecruitTeamMember] = 1;
			TsunamiSP1[APIInfo.Teams_RemoveTeamMember] = 1;

			HostVersionToAPIs["tsunamisp1"] = TsunamiSP1;

			Hashtable All = new Hashtable();
			for(int i = 0; i < (int) APIInfo.Count; ++i)
			{
				All[(APIInfo) i] = 1;
			}

            HostVersionToAPIs["all"] = All;
		}

		public WSEnvironment() {}

		public WSSignature [] Signatures
		{
			get
			{
				return (WSSignature []) CustomData["Signature"];
			}
		}

		public WSUserInfo [] UserInfo
		{
			get 
			{
				return (WSUserInfo []) CustomData["UserInfo"];
			}
		}

		public Hashtable SkipLocales 
		{
			get
			{
				return (Hashtable) CustomData["SkipLocale"];
			}
		}

		public Hashtable SupportedAPIs
		{
			get
			{
				return (Hashtable) CustomData["SupportedAPI"];
			}
		}

		public Hashtable ProfileURLs
		{
			get 
			{
				return (Hashtable) CustomData["ProfileURLs"];
			}
		}

		#endregion

		public void UpdateAPISet(string NewHostVersion)
		{
			HostVersion = NewHostVersion;

			Hashtable t = (Hashtable) HostVersionToAPIs[HostVersion.ToLower()];
			Hashtable v = (Hashtable) CustomData["SupportedAPI"];
			if(v == null)
				v = new Hashtable();
			foreach(APIInfo a in t.Keys)
				v[a] = true;
			CustomData["SupportedAPI"] = v;
		}

		public byte [] GetFirstPuid()
		{
			if(UserInfo == null || UserInfo.Length == 0)
				return null;
			foreach(WSUserInfo u in UserInfo)
				if(u.Puid != null)
					return u.Puid;
			return null;
		}
		public string GetFirstPuidFriendly()
		{
			if(UserInfo == null || UserInfo.Length == 0)
				return null;
			foreach(WSUserInfo u in UserInfo)
				if(u.PuidFriendly != null)
					return u.PuidFriendly;
			return null;
		}
		public string ToUri(string path) {return (fSecure ? "https://" : "http://") + Host + path;}
		public bool SkipLocale(string locale)
		{
			if(SkipLocales == null)
				return false;
			string t = locale.ToLower();
			if(SkipLocales[t] != null && ((bool) SkipLocales[t]) == true)
				return true;
			return false;
		}

		public bool DisplayTitle(uint tid)
		{
			if(Titles == null)
				return true;
			foreach(WSTitleList t in Titles)
				if(t.TitleID == tid)
					return true;
			return false;
		}
		public bool DisplayLeaderboard(uint tid, uint lbid)
		{
			if(Titles == null)
				return true;
			foreach(WSTitleList t in Titles)
				if(t.TitleID == tid)
				{
					if(t.LBID == null)
						return true;
					foreach(int lb in t.LBID)
						if(lb == lbid)
							return true;
				}
			return false;
		}

		public bool SupportsRequiredAPIs(Type obj)
		{
			if(SupportedAPIs == null)
				return true;
			System.Attribute [] attr;
			attr = System.Attribute.GetCustomAttributes(obj);
			foreach(System.Attribute a in attr)
			{
				if(a is RequiredAPI)
				{
					if(!APISupported(((RequiredAPI) a).api))
						return false;
				}
			}
			return true;
		}
		public bool APISupported(APIInfo api)
		{
            if(SupportedAPIs == null)
                return true;
            if( ( SupportedAPIs[ api ] != null ) && ((bool) SupportedAPIs[api]) == true)
                return true;
			return false;
		}

		public static Hashtable ParseCustomDataFromXml(XmlNode n, Hashtable validators, StreamWriter sw)
		{
			if(sw != null) sw.WriteLine("ParseCustomDataFromXml: Starting parse...");
			if(n == null || n.ChildNodes.Count == 0)
			{
				if(sw != null) sw.WriteLine("ParseCustomDataFromXml: No subnodes found.");
				return new Hashtable();
			}

			Hashtable res = new Hashtable();
			foreach(XmlNode o in n.ChildNodes)
			{
				if(o.Attributes == null)
				{
					if(sw != null) sw.WriteLine("ParseCustomDataFromXml (" + o.Name + "): No attributes found. Skipping.");
					continue;
				}
				Hashtable h = new Hashtable();
				foreach(XmlAttribute a in o.Attributes)
				{
					h[a.Name] = a.Value;
				}
				try
				{
					if(sw != null) sw.WriteLine("ParseCustomDataFromXml (" + o.Name + "): Running data validation on " + h.Count + " attributes.");
					DataValidationDelegate dvd = (validators == null) ? null : (DataValidationDelegate) validators[o.Name];
					object data = (dvd == null) ? h : dvd(h);
					if(sw != null) sw.WriteLine("ParseCustomDataFromXml (" + o.Name + "): Data validation result: " + (data == null ? "<null>" : "<not null>"));
					if(data != null)
					{
						ArrayList al = (ArrayList) res[o.Name];
						if(al == null)
							al = new ArrayList();
						al.Add(data);
						res[o.Name] = al;
						continue;
					}
				}
				catch(System.Exception f)
				{
					if(sw != null) sw.WriteLine("ParseCustomDataFromXml (" + o.Name + "): Exception: " + Helpers.ExceptionInfo(f, false));
					if(System.Web.HttpContext.Current != null)
						System.Web.HttpContext.Current.Response.Write("Exception in ParseCustomDataFromXml: " + Helpers.ExceptionInfo(f, true));
				}
			}
			return res;
		}

		public string ToString(bool fHtml)
		{
			string eol = (fHtml) ? "<br>\n" : "\n";
			StringBuilder sb = new StringBuilder();
			if(fHtml)
				sb.Append("<table border=1><tr><th>Environment Settings</th></tr><tr><td>\n");
			if(fHtml)
				sb.Append("<br>\n");
			sb.Append("Description: ").Append(Description).Append(eol);
			sb.Append("CertCN: ").Append(Helpers.CertificateCN(Cert)).Append(eol);
			sb.Append("Host: ").Append(Host).Append(eol);
			if(HostVersion != null)
				sb.Append("HostVersion: ").Append(HostVersion).Append(eol);
			sb.Append("Timeout: ").Append(Timeout.ToString()).Append(eol);
			sb.Append("HttpVersion: ").Append(Version).Append(eol);
			sb.Append("Secure: ").Append(fSecure.ToString()).Append(eol);
			sb.Append("Default: ").Append(fDefault.ToString()).Append(eol);
			if(CustomData["SupportedAPI"] != null)
			{
				if(fHtml)
					sb.Append("<ul>SupportedAPIs:\n");
				else
					sb.Append("SupportedAPIs:\n");

				foreach(APIInfo key in SupportedAPIs.Keys)
				{
					if(fHtml)
						sb.Append("<li>API: ").Append(key.ToString()).Append(eol);
					else
						sb.Append("\tAPI: " ).Append(key.ToString()).Append(eol);
				}
				if(fHtml)
					sb.Append("</ul>\n");
			}
			else
			{
				sb.Append("SupportedAPIs: All").Append(eol);
			}

			if(Titles != null)
			{
				if(fHtml)
					sb.Append("<ul>TitleFilter:\n");
				else
					sb.Append("TitleFilter:\n");
				
				foreach(WSTitleList t in Titles)
				{
					if(fHtml)
						sb.Append("<li>TitleID: 0x").Append(t.TitleID.ToString("X8")).Append(eol);
					else
						sb.Append("\tTitleID: 0x").Append(t.TitleID.ToString("X8")).Append(eol);

					if(t.LBID != null)
					{
						if(fHtml)
							sb.Append("<ul>LeaderboardFilter:\n");
						else
							sb.Append("\tLeaderboardFilter:\n");

						foreach(uint u in t.LBID)
						{
							if(fHtml)
								sb.Append("<li>Leaderboard: ").Append(u.ToString()).Append(eol);
							else
								sb.Append("\t\tLeaderboard: ").Append(u.ToString()).Append(eol);
						}
						if(fHtml)
							sb.Append("</ul>\n");
					}
				}
				
				if(fHtml)
					sb.Append("</ul>\n");
			}
			if(fHtml)
				sb.Append("</td></tr></table>\n");
			return sb.ToString();
		}

		public static void Log(StreamWriter sw, string msg)
		{
			if(sw != null)
				sw.WriteLine(msg);
		}

		public static WSEnvironment ParseFromXml(XmlNode n, string basePath, Hashtable validators, StreamWriter logTo)
		{

			WSEnvironment ret = new WSEnvironment();
			if(n.Name != "Environment")
			{
				Log(logTo, "Enviroment: Expecting tag \"Environment\" got \"" + n.Name + "\"");
				return null;
			}

			ret.Host = Helpers.GetValue(n.Attributes["Host"], null);
			ret.Description = Helpers.GetValue(n.Attributes["Description"], null);
			if(ret.Host == null || ret.Description == null || ret.Host == "" || ret.Description == "")
			{
				Log(logTo, "Environment: Host or description was null.");
				return null;
			}

			ret.fSecure = Helpers.GetValue(n.Attributes["Secure"], true);
			ret.fDefault = Helpers.GetValue(n.Attributes["Default"], false);
			ret.Version = Helpers.GetValue(n.Attributes["Version"], "1.1");
			ret.Timeout = Helpers.GetValue(n.Attributes["Timeout"], ret.Timeout);
			ret.LogFile = Helpers.GetValue(n.Attributes["LogFile"], null);

			if(n.Attributes["Cert"] != null)
			{
				try
				{
					if(n.Attributes["Cert"] != null)
					{
						ret.Cert = new X509Certificate(Helpers.StringToByteArray(n.Attributes["Cert"].Value));
						if(ret.Cert != null && !Helpers.ExistsCertificate(ret.Cert, logTo))
						{
							ret.Cert = null;
						}
					}
				}
				catch(System.Exception f)
				{
					Log(logTo, "Environment (" + ret.Description + "): Exception loading Base 64 encoded certificate: " + Helpers.ExceptionInfo(f, false));
					ret.Cert = null;
				}
			}
			if(n.Attributes["CertFileName"] != null)
			{
				try
				{
					if(n.Attributes["CertFileName"] != null)
					{
						String path = (basePath == null || basePath == "") ? "" : 
							((basePath[basePath.Length - 1] == '\\') ? basePath : basePath + "\\");
						ret.Cert = X509Certificate.CreateFromCertFile(path + n.Attributes["CertFileName"].Value);
						if(ret.Cert != null && !Helpers.ExistsCertificate(ret.Cert, logTo))
						{
							ret.Cert = null;
						}
					}
				}
				catch(System.Exception f)
				{
					Log(logTo, "Environment (" + ret.Description + "): Exception loading certificate file: " + Helpers.ExceptionInfo(f, false));
					ret.Cert = null;
				}
			}
			if(n.Attributes["CertSubject"] != null)
			{
				try
				{
					ret.Cert = Helpers.LookupCertificate(Helpers.GetValue(n.Attributes["CertIssuer"], null), n.Attributes["CertSubject"].Value, logTo);
				}
				catch(System.Exception f)
				{
					Log(logTo, "Environment (" + ret.Description + "): Exception getting the certificate from the certificate store: " + Helpers.ExceptionInfo(f, false));
					ret.Cert = null;
				}
			}

			if(ret.Cert == null)
			{
				Log(logTo, "Environment (" + ret.Description + "): Rejected--no valid certificate found.");
				return null;
			}

			foreach(XmlNode x in n.ChildNodes)
			{
				if(x.Name == "LocalData")
				{
					Log(logTo, "Environment (" + ret.Description + "): Parsing local data...");
					ret.CustomData = ParseCustomDataFromXml(x, validators, logTo);
				}
				else if(x.Name == "TitleFilter")
				{
					ArrayList al = new ArrayList();
					foreach(XmlNode title in x.ChildNodes)
					{
						WSTitleList t = WSTitleList.ParseFromXml(title);
						if(t != null)
						{
							Log(logTo, "Environment (" + ret.Description + "): Adding filter for title id 0x" + t.TitleID.ToString("X8"));
							al.Add(t);
						}
					}
					if(al.Count > 0)
						ret.Titles = (WSTitleList []) al.ToArray(typeof(WSTitleList));
				}
			}

			ret.HostVersion = Helpers.GetValue(n.Attributes["HostVersion"], null);
			if(ret.HostVersion != null)
			{
				Hashtable hv = (Hashtable) WSEnvironment.HostVersionToAPIs[ret.HostVersion.ToLower()];
				if(hv != null)
				{
					ArrayList apis = (ArrayList) ret.CustomData["SupportedAPI"];
					if(apis == null)
					{
						apis = new ArrayList();
					}
                    
					foreach(APIInfo a in hv.Keys)
					{
						apis.Add(a);
					}
					ret.CustomData["SupportedAPI"] = apis;
				}
			}
			Log(logTo, "Environment (" + ret.Description + "): Successfully parsed and is valid.");
			return ret;
		}
	}
	
	public delegate bool WSEnvironmentFilter(WSEnvironment e);

	public class WSEnvironments
	{
		WSEnvironment[] Envs = null;
		protected System.Web.HttpServerUtility svr = null;
		protected System.Web.HttpRequest req = null;
		protected static Hashtable validators = new Hashtable();
		protected static Hashtable convolvers = new Hashtable();
		protected Hashtable globaldata = new Hashtable();

		protected int iCurrent = -1;

		static WSEnvironments()
		{
			SetDefaultValidationDelegates();
		}

		public static void SetDataValidationDelegate(string nodeName, DataValidationDelegate fnValidate)
		{
			validators[nodeName] = fnValidate;
		}

		public static void SetDataConvolverDelegate(string nodeName, DataConvolverDelegate fnConvolve)
		{
			convolvers[nodeName] = fnConvolve;
		}

		protected static void SetDefaultValidationDelegates()
		{
			SetDataValidationDelegate("SkipLocale", new DataValidationDelegate(DefaultValidators.ValidateSkipLocale));
			SetDataValidationDelegate("Signature", new DataValidationDelegate(DefaultValidators.ValidateSignature));
			SetDataValidationDelegate("SupportedAPI", new DataValidationDelegate(DefaultValidators.ValidateAPIInfo));
			SetDataValidationDelegate("UserInfo", new DataValidationDelegate(DefaultValidators.ValidateUserInfo));
			SetDataConvolverDelegate("SkipLocale", new DataConvolverDelegate(DefaultValidators.ConvolveSkipLocale));
			SetDataConvolverDelegate("Signature", new DataConvolverDelegate(DefaultValidators.ConvolveSignature));
			SetDataConvolverDelegate("SupportedAPI", new DataConvolverDelegate(DefaultValidators.ConvolveAPIInfo));
			SetDataConvolverDelegate("UserInfo", new DataConvolverDelegate(DefaultValidators.ConvolveUserInfo));
		}

		public static void Log(StreamWriter sw, string msg)
		{
			if(sw == null)
				return;

			sw.WriteLine(msg);
		}

		public WSEnvironments(HttpServerUtility server, HttpRequest request, StreamWriter logTo)
		{
			svr = server;
			req = request;

			ParseConfiguration(server.MapPath("Environments.xml"), server.MapPath("bin"), logTo);

			string desc = null;
			if(req.Cookies["XWebEnvironment"] != null && 
				req.Cookies["XWebEnvironment"].Value != null && 
				req.Cookies["XWebEnvironment"].Value != "")
			{
				desc = req.Cookies["XWebEnvironment"].Value;
			}

			int iDefault = -1;
            for(int i = 0; i < Envs.Length; ++i)
            {
                if(Envs[i].Description == desc)
                {
                    Log(logTo, "WSEnvironments: Found current environment: " + Envs[i].Description);
                    iCurrent = i;
                }
                if(Envs[i].fDefault)
                {
                    Log(logTo, "WSEnvironments: Found default environment: " + Envs[i].Description);
                    iDefault = i;
                }
            }

			if(iCurrent < 0)
				iCurrent = iDefault;
			if(iCurrent < 0 && Envs.Length > 0)
				iCurrent = 0;
			if(Envs.Length > 0)
				Log(logTo, "WSEnvironments: Using environment: " + Envs[iCurrent].Description);
		}

		public WSEnvironments(XmlNode root, string baseCertPath, StreamWriter logTo)
		{
			ParseConfiguration(root, baseCertPath, logTo);
			if(Envs == null)
				Envs = new WSEnvironment[0];
			for(int i = 0; i < Envs.Length; ++i)
			{
				if(Envs[i].fDefault)
				{
					iCurrent = i;
					break;
				}
			}
			if(iCurrent < 0 && Envs.Length > 0)
				iCurrent = 0;
		}

		public WSEnvironments(string fullPathToFile, string baseCertPath, StreamWriter logTo)
		{
			ParseConfiguration(fullPathToFile, baseCertPath, logTo);
			if(Envs == null)
				Envs = new WSEnvironment[0];
			for(int i = 0; i < Envs.Length; ++i)
			{
				if(Envs[i].fDefault)
				{
					iCurrent = i;
					break;
				}
			}
			if(iCurrent < 0 && Envs.Length > 0)
				iCurrent = 0;
		}

		protected WSEnvironments()
		{
		}

		public bool ParseEnvironments(XmlNode n, string baseCertPath, StreamWriter logTo)
		{
			ArrayList al = new ArrayList();
			if(n.Name != "Environments")
				return false;
			foreach(XmlNode o in n.ChildNodes)
			{
				WSEnvironment e = WSEnvironment.ParseFromXml(o, baseCertPath, validators, logTo);
				if(e != null)
					al.Add(e);
			}
			if(al.Count > 0)
			{
				Envs = (WSEnvironment []) al.ToArray(typeof(WSEnvironment));
				Log(logTo, "WSEnvironments: Found " + Envs.Length.ToString() + " environments.");
				return true;
			}
			return false;
		}

		public bool ParseConfiguration(string fullPathToFile, string baseCertPath, StreamWriter logTo)
		{
			XmlDocument doc = new XmlDocument();
			doc.Load(fullPathToFile);
			XmlNode root = doc.DocumentElement;
			return ParseConfiguration(root, baseCertPath, logTo);
		}

		public bool ParseConfiguration(XmlNode root, string baseCertPath, StreamWriter logTo)
		{
			bool fRes = true;

			foreach(XmlNode n in root.ChildNodes)
			{
				if(n.Name == "Environments")
				{
					Log(logTo, "WSEnvironments: Parsing environments...");
					fRes = fRes && ParseEnvironments(n, baseCertPath, logTo);
				}
				else if(n.Name == "GlobalData")
				{
					Log(logTo, "WSEnvironments: Parsing global data...");
					globaldata = WSEnvironment.ParseCustomDataFromXml(n, validators, logTo);
				}
			}
			if(Envs == null)
				Envs = new WSEnvironment[0];
			MergeGlobalsIntoEnvironments(logTo);
			// System.Web.HttpContext.Current.Response.End();
			return fRes;
		}

		protected void MergeGlobalsIntoEnvironments(StreamWriter logTo)
		{
			if(Envs == null)
				return;

			if(globaldata == null)
				globaldata = new Hashtable();

			Log(logTo, "WSEnvironments: Merging global data into local data...");
			foreach(WSEnvironment e in Envs)
			{
                Log(logTo, "WSEnvironments: Merging global data for \r\n  EnvDesc: " + e.Description
                    + " \r\n  HostVer:" + e.HostVersion );

                ArrayList keys = new ArrayList();
				if(e.CustomData != null && e.CustomData.Count > 0)
					keys.AddRange(e.CustomData.Keys);
				keys.AddRange(globaldata.Keys);
				Hashtable h = new Hashtable();
                foreach(string s in keys)
                {
                    if(h[s] != null)
                        continue;
                    h[s] = true;
                    if(e.CustomData[s] == null)
                        e.CustomData[s] = globaldata[s];
                    else if(globaldata[s] != null)
                    {
                        ArrayList al = new ArrayList();
                        al.AddRange((ArrayList) globaldata[s]);
                        al.AddRange((ArrayList) e.CustomData[s]);
                        e.CustomData[s] = al;
                    }
                    DataConvolverDelegate conv = (DataConvolverDelegate) convolvers[s];
                    if(conv == null)
                        continue;
                    e.CustomData[s] = conv((ArrayList) e.CustomData[s]);
                    Log(logTo, "WSEnvironments: \"" + s + "\" convolved.  Value: " + ((e.CustomData[s] == null) ? "<null>" : "<not null>"));
                }
			}
		}

		public string GetCurrentEnv()
		{
			if(Envs != null && Envs.Length > 0 && iCurrent > -1)
			{
				return Envs[iCurrent].Description;
			}
			return null;
		}

		public System.Web.HttpCookie SetCurrentEnv(string val)
		{
			for(int i = 0; i < Envs.Length; ++i)
			{
				if(Envs[i].Description == val && i != iCurrent)
				{
					iCurrent = i;
					HttpCookie cookie = new HttpCookie("XWebEnvironment");
					// cookie.Path = "/";
					cookie.Value = Envs[i].Description;
					cookie.Expires = new DateTime(2100, 12, 31, 23, 59, 59, 999);
					return cookie;
				}
			}
			return null;
		}

		public WSEnvironment [] GetEnvironments()
		{
			return GetEnvironments(null);
		}
		public WSEnvironment [] GetEnvironments(WSEnvironmentFilter ef)
		{
			ArrayList al = new ArrayList();
			foreach(WSEnvironment e in Envs)
			{
				if(ef == null || ef(e))
					al.Add(e);
			}
			return (WSEnvironment []) al.ToArray(typeof(WSEnvironment));
		}

		public ICollection GetEnvironmentDescriptions()
		{
			DataTable tbl = new DataTable();
			tbl.Columns.Add("Environments");

			if(Envs != null)
			{
				for(int i = 0; i < Envs.Length; ++i)
				{
					//				DebugString += "Environment: " + ((Envs[i] != null) ? Envs[i].Description : "Unknown") + "<br>\n";
					DataRow row = tbl.NewRow();
					row[0] = Envs[i].Description;
					tbl.Rows.Add(row);
				}
			}
			DataView dv = new DataView(tbl);
			return dv;
		}

		public int GetDefaultEnvironment(out string def)
		{
			if(iCurrent < 0)
			{
				def = null;
				return 0;
			}
			def = Envs[iCurrent].Description;
			return iCurrent;
		}

		public WSEnvironment GetCurrent()
		{
			if(iCurrent < 0)
				return null;
			return Envs[iCurrent];
		}

		public string GetHost(string Description)
		{
			for(int i = 0; i < Envs.Length; ++i)
			{
				if(Envs[i].Description == Description)
				{
					return Envs[i].Host;
				}
			}

			return null;
		}
		public X509Certificate GetCert(string Description)
		{
			for(int i = 0; i < Envs.Length; ++i)
			{
				if(Envs[i].Description == Description)
					return Envs[i].Cert;
			}

			return null;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Signature.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Signature {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SignatureSoap", Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class Signature : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VerifySignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferUserLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlacklistDigestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBlacklistDigestOperationCompleted;
        
        /// <remarks/>
        public Signature() {
            this.Url = "http://tobiasb-xblobd:12000/Signature/Signature.asmx";
        }
        
        /// <remarks/>
        public event VerifySignatureCompletedEventHandler VerifySignatureCompleted;
        
        /// <remarks/>
        public event CreateSignatureCompletedEventHandler CreateSignatureCompleted;
        
        /// <remarks/>
        public event TransferUserLicensesCompletedEventHandler TransferUserLicensesCompleted;
        
        /// <remarks/>
        public event BlacklistDigestCompletedEventHandler BlacklistDigestCompleted;
        
        /// <remarks/>
        public event UnBlacklistDigestCompletedEventHandler UnBlacklistDigestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/VerifySignature", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint[] VerifySignature(XSigVerifySignatureRequest[] sigData) {
            object[] results = this.Invoke("VerifySignature", new object[] {
                        sigData});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifySignature(XSigVerifySignatureRequest[] sigData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifySignature", new object[] {
                        sigData}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint[] EndVerifySignature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignatureAsync(XSigVerifySignatureRequest[] sigData) {
            this.VerifySignatureAsync(sigData, null);
        }
        
        /// <remarks/>
        public void VerifySignatureAsync(XSigVerifySignatureRequest[] sigData, object userState) {
            if ((this.VerifySignatureOperationCompleted == null)) {
                this.VerifySignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignatureOperationCompleted);
            }
            this.InvokeAsync("VerifySignature", new object[] {
                        sigData}, this.VerifySignatureOperationCompleted, userState);
        }
        
        private void OnVerifySignatureOperationCompleted(object arg) {
            if ((this.VerifySignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignatureCompleted(this, new VerifySignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/CreateSignature", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public XSigCreateSignatureResponse[] CreateSignature(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData) {
            object[] results = this.Invoke("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData});
            return ((XSigCreateSignatureResponse[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSignature(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData}, callback, asyncState);
        }
        
        /// <remarks/>
        public XSigCreateSignatureResponse[] EndCreateSignature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((XSigCreateSignatureResponse[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateSignatureAsync(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData) {
            this.CreateSignatureAsync(titleID, adminId, sigData, null);
        }
        
        /// <remarks/>
        public void CreateSignatureAsync(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData, object userState) {
            if ((this.CreateSignatureOperationCompleted == null)) {
                this.CreateSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSignatureOperationCompleted);
            }
            this.InvokeAsync("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData}, this.CreateSignatureOperationCompleted, userState);
        }
        
        private void OnCreateSignatureOperationCompleted(object arg) {
            if ((this.CreateSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSignatureCompleted(this, new CreateSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/TransferUserLicenses", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TransferUserLicenses(ulong xuid, string consoleId) {
            this.Invoke("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTransferUserLicenses(ulong xuid, string consoleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTransferUserLicenses(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TransferUserLicensesAsync(ulong xuid, string consoleId) {
            this.TransferUserLicensesAsync(xuid, consoleId, null);
        }
        
        /// <remarks/>
        public void TransferUserLicensesAsync(ulong xuid, string consoleId, object userState) {
            if ((this.TransferUserLicensesOperationCompleted == null)) {
                this.TransferUserLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferUserLicensesOperationCompleted);
            }
            this.InvokeAsync("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId}, this.TransferUserLicensesOperationCompleted, userState);
        }
        
        private void OnTransferUserLicensesOperationCompleted(object arg) {
            if ((this.TransferUserLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferUserLicensesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/BlacklistDigest", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BlacklistDigest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] digest, byte deliveryType, string revocationReason) {
            this.Invoke("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBlacklistDigest(byte[] digest, byte deliveryType, string revocationReason, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndBlacklistDigest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void BlacklistDigestAsync(byte[] digest, byte deliveryType, string revocationReason) {
            this.BlacklistDigestAsync(digest, deliveryType, revocationReason, null);
        }
        
        /// <remarks/>
        public void BlacklistDigestAsync(byte[] digest, byte deliveryType, string revocationReason, object userState) {
            if ((this.BlacklistDigestOperationCompleted == null)) {
                this.BlacklistDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlacklistDigestOperationCompleted);
            }
            this.InvokeAsync("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason}, this.BlacklistDigestOperationCompleted, userState);
        }
        
        private void OnBlacklistDigestOperationCompleted(object arg) {
            if ((this.BlacklistDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlacklistDigestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/UnBlacklistDigest", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnBlacklistDigest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] digest) {
            this.Invoke("UnBlacklistDigest", new object[] {
                        digest});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnBlacklistDigest(byte[] digest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnBlacklistDigest", new object[] {
                        digest}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnBlacklistDigest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnBlacklistDigestAsync(byte[] digest) {
            this.UnBlacklistDigestAsync(digest, null);
        }
        
        /// <remarks/>
        public void UnBlacklistDigestAsync(byte[] digest, object userState) {
            if ((this.UnBlacklistDigestOperationCompleted == null)) {
                this.UnBlacklistDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBlacklistDigestOperationCompleted);
            }
            this.InvokeAsync("UnBlacklistDigest", new object[] {
                        digest}, this.UnBlacklistDigestOperationCompleted, userState);
        }
        
        private void OnUnBlacklistDigestOperationCompleted(object arg) {
            if ((this.UnBlacklistDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBlacklistDigestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigVerifySignatureRequest {
        
        private byte[] _digestField;
        
        private byte[] _signatureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _digest {
            get {
                return this._digestField;
            }
            set {
                this._digestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _signature {
            get {
                return this._signatureField;
            }
            set {
                this._signatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigCreateSignatureResponse {
        
        private uint _hresultField;
        
        private byte[] _signatureField;
        
        /// <remarks/>
        public uint _hresult {
            get {
                return this._hresultField;
            }
            set {
                this._hresultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _signature {
            get {
                return this._signatureField;
            }
            set {
                this._signatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigCreateSignatureRequest {
        
        private byte[] _digestField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _digest {
            get {
                return this._digestField;
            }
            set {
                this._digestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void VerifySignatureCompletedEventHandler(object sender, VerifySignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateSignatureCompletedEventHandler(object sender, CreateSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public XSigCreateSignatureResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((XSigCreateSignatureResponse[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TransferUserLicensesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BlacklistDigestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnBlacklistDigestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Alerts.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Alerts {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AlertsSoap", Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class Alerts : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubscriberExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnsubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleContentAlertOperationCompleted;
        
        /// <remarks/>
        public Alerts() {
            this.Url = "http://xewbcaiis001:12000/alerts/alerts.asmx";
        }
        
        /// <remarks/>
        public event SubscriberExistsCompletedEventHandler SubscriberExistsCompleted;
        
        /// <remarks/>
        public event SubscribeCompletedEventHandler SubscribeCompleted;
        
        /// <remarks/>
        public event UnsubscribeCompletedEventHandler UnsubscribeCompleted;
        
        /// <remarks/>
        public event EnumerateSubscriptionsCompletedEventHandler EnumerateSubscriptionsCompleted;
        
        /// <remarks/>
        public event ScheduleContentAlertCompletedEventHandler ScheduleContentAlertCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/SubscriberExists", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubscriberExists([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId) {
            object[] results = this.Invoke("SubscriberExists", new object[] {
                        webId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubscriberExists(byte[] webId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubscriberExists", new object[] {
                        webId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSubscriberExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(byte[] webId) {
            this.SubscriberExistsAsync(webId, null);
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(byte[] webId, object userState) {
            if ((this.SubscriberExistsOperationCompleted == null)) {
                this.SubscriberExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscriberExistsOperationCompleted);
            }
            this.InvokeAsync("SubscriberExists", new object[] {
                        webId}, this.SubscriberExistsOperationCompleted, userState);
        }
        
        private void OnSubscriberExistsOperationCompleted(object arg) {
            if ((this.SubscriberExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscriberExistsCompleted(this, new SubscriberExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/Subscribe", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExistingSubscriptions Subscribe(bool initializeSubscriber, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, AddSubscriptions alerts) {
            object[] results = this.Invoke("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts});
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubscribe(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExistingSubscriptions EndSubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public void SubscribeAsync(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts) {
            this.SubscribeAsync(initializeSubscriber, webId, gamerTag, alerts, null);
        }
        
        /// <remarks/>
        public void SubscribeAsync(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts, object userState) {
            if ((this.SubscribeOperationCompleted == null)) {
                this.SubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscribeOperationCompleted);
            }
            this.InvokeAsync("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts}, this.SubscribeOperationCompleted, userState);
        }
        
        private void OnSubscribeOperationCompleted(object arg) {
            if ((this.SubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/Unsubscribe", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint Unsubscribe(bool deleteSubscriber, bool deleteAccountSubscriptions, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, ExistingSubscriptions alerts) {
            object[] results = this.Invoke("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnsubscribe(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndUnsubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void UnsubscribeAsync(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts) {
            this.UnsubscribeAsync(deleteSubscriber, deleteAccountSubscriptions, webId, gamerTag, alerts, null);
        }
        
        /// <remarks/>
        public void UnsubscribeAsync(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts, object userState) {
            if ((this.UnsubscribeOperationCompleted == null)) {
                this.UnsubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnsubscribeOperationCompleted);
            }
            this.InvokeAsync("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts}, this.UnsubscribeOperationCompleted, userState);
        }
        
        private void OnUnsubscribeOperationCompleted(object arg) {
            if ((this.UnsubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnsubscribeCompleted(this, new UnsubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/EnumerateSubscriptions", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExistingSubscriptions EnumerateSubscriptions([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag) {
            object[] results = this.Invoke("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag});
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateSubscriptions(byte[] webId, string gamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExistingSubscriptions EndEnumerateSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateSubscriptionsAsync(byte[] webId, string gamerTag) {
            this.EnumerateSubscriptionsAsync(webId, gamerTag, null);
        }
        
        /// <remarks/>
        public void EnumerateSubscriptionsAsync(byte[] webId, string gamerTag, object userState) {
            if ((this.EnumerateSubscriptionsOperationCompleted == null)) {
                this.EnumerateSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag}, this.EnumerateSubscriptionsOperationCompleted, userState);
        }
        
        private void OnEnumerateSubscriptionsOperationCompleted(object arg) {
            if ((this.EnumerateSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateSubscriptionsCompleted(this, new EnumerateSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/ScheduleContentAlert", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint ScheduleContentAlert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime) {
            object[] results = this.Invoke("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginScheduleContentAlert(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndScheduleContentAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleContentAlertAsync(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime) {
            this.ScheduleContentAlertAsync(webId, type, locale, message, deliveryTime, null);
        }
        
        /// <remarks/>
        public void ScheduleContentAlertAsync(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime, object userState) {
            if ((this.ScheduleContentAlertOperationCompleted == null)) {
                this.ScheduleContentAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleContentAlertOperationCompleted);
            }
            this.InvokeAsync("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime}, this.ScheduleContentAlertOperationCompleted, userState);
        }
        
        private void OnScheduleContentAlertOperationCompleted(object arg) {
            if ((this.ScheduleContentAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleContentAlertCompleted(this, new ScheduleContentAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class AddSubscriptions {
        
        private AlertSubscription[] liveSubscriptionsField;
        
        private AlertSubscription[] contentSubscriptionsField;
        
        /// <remarks/>
        public AlertSubscription[] liveSubscriptions {
            get {
                return this.liveSubscriptionsField;
            }
            set {
                this.liveSubscriptionsField = value;
            }
        }
        
        /// <remarks/>
        public AlertSubscription[] contentSubscriptions {
            get {
                return this.contentSubscriptionsField;
            }
            set {
                this.contentSubscriptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class AlertSubscription {
        
        private uint typeField;
        
        private string localeField;
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class ContentSubscription {
        
        private ulong subscriptionIDField;
        
        private uint typeField;
        
        private string localeField;
        
        /// <remarks/>
        public ulong subscriptionID {
            get {
                return this.subscriptionIDField;
            }
            set {
                this.subscriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class LiveSubscription {
        
        private ulong subscriptionIDField;
        
        private uint typeField;
        
        private string nameField;
        
        private string localeField;
        
        /// <remarks/>
        public ulong subscriptionID {
            get {
                return this.subscriptionIDField;
            }
            set {
                this.subscriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class ExistingSubscriptions {
        
        private LiveSubscription[] liveSubscriptionsField;
        
        private ContentSubscription[] contentSubscriptionsField;
        
        /// <remarks/>
        public LiveSubscription[] liveSubscriptions {
            get {
                return this.liveSubscriptionsField;
            }
            set {
                this.liveSubscriptionsField = value;
            }
        }
        
        /// <remarks/>
        public ContentSubscription[] contentSubscriptions {
            get {
                return this.contentSubscriptionsField;
            }
            set {
                this.contentSubscriptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubscriberExistsCompletedEventHandler(object sender, SubscriberExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscriberExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscriberExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubscribeCompletedEventHandler(object sender, SubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExistingSubscriptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExistingSubscriptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnsubscribeCompletedEventHandler(object sender, UnsubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnsubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnsubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateSubscriptionsCompletedEventHandler(object sender, EnumerateSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExistingSubscriptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExistingSubscriptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ScheduleContentAlertCompletedEventHandler(object sender, ScheduleContentAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleContentAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleContentAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Stats.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Stats {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StatsSoap", Namespace="http://websvc.xboxlive.com/Stats/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RawLBEntry[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RawLBAttribute[]))]
    public partial class Stats : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DeleteXUIDFromLBOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteXUIDFromAllLBsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLBListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLBListByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateLBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLBNearGamerTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLBForGamerTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLBDetailsForGamerTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateTeamLBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamLBNearTeamNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamLBForTeamNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamLBDetailsForTeamNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateLBRawOperationCompleted;
        
        /// <remarks/>
        public Stats() {
            this.Url = "https://websvc.xboxlive.com/stats/stats.asmx";
        }
        
        /// <remarks/>
        public event DeleteXUIDFromLBCompletedEventHandler DeleteXUIDFromLBCompleted;
        
        /// <remarks/>
        public event DeleteXUIDFromAllLBsCompletedEventHandler DeleteXUIDFromAllLBsCompleted;
        
        /// <remarks/>
        public event GetLBListCompletedEventHandler GetLBListCompleted;
        
        /// <remarks/>
        public event GetLBListByTypeCompletedEventHandler GetLBListByTypeCompleted;
        
        /// <remarks/>
        public event EnumerateLBCompletedEventHandler EnumerateLBCompleted;
        
        /// <remarks/>
        public event GetLBNearGamerTagCompletedEventHandler GetLBNearGamerTagCompleted;
        
        /// <remarks/>
        public event GetLBForGamerTagsCompletedEventHandler GetLBForGamerTagsCompleted;
        
        /// <remarks/>
        public event GetLBDetailsForGamerTagsCompletedEventHandler GetLBDetailsForGamerTagsCompleted;
        
        /// <remarks/>
        public event EnumerateTeamLBCompletedEventHandler EnumerateTeamLBCompleted;
        
        /// <remarks/>
        public event GetTeamLBNearTeamNameCompletedEventHandler GetTeamLBNearTeamNameCompleted;
        
        /// <remarks/>
        public event GetTeamLBForTeamNamesCompletedEventHandler GetTeamLBForTeamNamesCompleted;
        
        /// <remarks/>
        public event GetTeamLBDetailsForTeamNamesCompletedEventHandler GetTeamLBDetailsForTeamNamesCompleted;
        
        /// <remarks/>
        public event EnumerateLBRawCompletedEventHandler EnumerateLBRawCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/DeleteXUIDFromLB", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeleteXUIDStatus DeleteXUIDFromLB(uint uiTitleID, uint uiLbId, ulong xuid) {
            object[] results = this.Invoke("DeleteXUIDFromLB", new object[] {
                        uiTitleID,
                        uiLbId,
                        xuid});
            return ((DeleteXUIDStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteXUIDFromLB(uint uiTitleID, uint uiLbId, ulong xuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteXUIDFromLB", new object[] {
                        uiTitleID,
                        uiLbId,
                        xuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteXUIDStatus EndDeleteXUIDFromLB(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteXUIDStatus)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteXUIDFromLBAsync(uint uiTitleID, uint uiLbId, ulong xuid) {
            this.DeleteXUIDFromLBAsync(uiTitleID, uiLbId, xuid, null);
        }
        
        /// <remarks/>
        public void DeleteXUIDFromLBAsync(uint uiTitleID, uint uiLbId, ulong xuid, object userState) {
            if ((this.DeleteXUIDFromLBOperationCompleted == null)) {
                this.DeleteXUIDFromLBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteXUIDFromLBOperationCompleted);
            }
            this.InvokeAsync("DeleteXUIDFromLB", new object[] {
                        uiTitleID,
                        uiLbId,
                        xuid}, this.DeleteXUIDFromLBOperationCompleted, userState);
        }
        
        private void OnDeleteXUIDFromLBOperationCompleted(object arg) {
            if ((this.DeleteXUIDFromLBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteXUIDFromLBCompleted(this, new DeleteXUIDFromLBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/DeleteXUIDFromAllLBs", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeleteXUIDStatus DeleteXUIDFromAllLBs(uint uiTitleID, ulong xuid) {
            object[] results = this.Invoke("DeleteXUIDFromAllLBs", new object[] {
                        uiTitleID,
                        xuid});
            return ((DeleteXUIDStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteXUIDFromAllLBs(uint uiTitleID, ulong xuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteXUIDFromAllLBs", new object[] {
                        uiTitleID,
                        xuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteXUIDStatus EndDeleteXUIDFromAllLBs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteXUIDStatus)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteXUIDFromAllLBsAsync(uint uiTitleID, ulong xuid) {
            this.DeleteXUIDFromAllLBsAsync(uiTitleID, xuid, null);
        }
        
        /// <remarks/>
        public void DeleteXUIDFromAllLBsAsync(uint uiTitleID, ulong xuid, object userState) {
            if ((this.DeleteXUIDFromAllLBsOperationCompleted == null)) {
                this.DeleteXUIDFromAllLBsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteXUIDFromAllLBsOperationCompleted);
            }
            this.InvokeAsync("DeleteXUIDFromAllLBs", new object[] {
                        uiTitleID,
                        xuid}, this.DeleteXUIDFromAllLBsOperationCompleted, userState);
        }
        
        private void OnDeleteXUIDFromAllLBsOperationCompleted(object arg) {
            if ((this.DeleteXUIDFromAllLBsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteXUIDFromAllLBsCompleted(this, new DeleteXUIDFromAllLBsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBList", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LBInfo[] GetLBList(uint TitleID, out uint ValidSeconds) {
            object[] results = this.Invoke("GetLBList", new object[] {
                        TitleID});
            ValidSeconds = ((uint)(results[1]));
            return ((LBInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLBList(uint TitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLBList", new object[] {
                        TitleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LBInfo[] EndGetLBList(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((LBInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLBListAsync(uint TitleID) {
            this.GetLBListAsync(TitleID, null);
        }
        
        /// <remarks/>
        public void GetLBListAsync(uint TitleID, object userState) {
            if ((this.GetLBListOperationCompleted == null)) {
                this.GetLBListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLBListOperationCompleted);
            }
            this.InvokeAsync("GetLBList", new object[] {
                        TitleID}, this.GetLBListOperationCompleted, userState);
        }
        
        private void OnGetLBListOperationCompleted(object arg) {
            if ((this.GetLBListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLBListCompleted(this, new GetLBListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBListByType", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LBInfo[] GetLBListByType(uint TitleID, LBType LeaderboardType, out uint ValidSeconds) {
            object[] results = this.Invoke("GetLBListByType", new object[] {
                        TitleID,
                        LeaderboardType});
            ValidSeconds = ((uint)(results[1]));
            return ((LBInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLBListByType(uint TitleID, LBType LeaderboardType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLBListByType", new object[] {
                        TitleID,
                        LeaderboardType}, callback, asyncState);
        }
        
        /// <remarks/>
        public LBInfo[] EndGetLBListByType(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((LBInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLBListByTypeAsync(uint TitleID, LBType LeaderboardType) {
            this.GetLBListByTypeAsync(TitleID, LeaderboardType, null);
        }
        
        /// <remarks/>
        public void GetLBListByTypeAsync(uint TitleID, LBType LeaderboardType, object userState) {
            if ((this.GetLBListByTypeOperationCompleted == null)) {
                this.GetLBListByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLBListByTypeOperationCompleted);
            }
            this.InvokeAsync("GetLBListByType", new object[] {
                        TitleID,
                        LeaderboardType}, this.GetLBListByTypeOperationCompleted, userState);
        }
        
        private void OnGetLBListByTypeOperationCompleted(object arg) {
            if ((this.GetLBListByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLBListByTypeCompleted(this, new GetLBListByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/EnumerateLB", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults EnumerateLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, out uint ValidSeconds) {
            object[] results = this.Invoke("EnumerateLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndEnumerateLB(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateLBAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries) {
            this.EnumerateLBAsync(TitleID, LBID, StartIndex, MaxEntries, null);
        }
        
        /// <remarks/>
        public void EnumerateLBAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, object userState) {
            if ((this.EnumerateLBOperationCompleted == null)) {
                this.EnumerateLBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateLBOperationCompleted);
            }
            this.InvokeAsync("EnumerateLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, this.EnumerateLBOperationCompleted, userState);
        }
        
        private void OnEnumerateLBOperationCompleted(object arg) {
            if ((this.EnumerateLBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateLBCompleted(this, new EnumerateLBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBNearGamerTag", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults GetLBNearGamerTag(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow, out uint ValidSeconds) {
            object[] results = this.Invoke("GetLBNearGamerTag", new object[] {
                        TitleID,
                        LBID,
                        GamerTag,
                        NumAbove,
                        NumBelow});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLBNearGamerTag(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLBNearGamerTag", new object[] {
                        TitleID,
                        LBID,
                        GamerTag,
                        NumAbove,
                        NumBelow}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndGetLBNearGamerTag(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetLBNearGamerTagAsync(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow) {
            this.GetLBNearGamerTagAsync(TitleID, LBID, GamerTag, NumAbove, NumBelow, null);
        }
        
        /// <remarks/>
        public void GetLBNearGamerTagAsync(uint TitleID, uint LBID, string GamerTag, uint NumAbove, uint NumBelow, object userState) {
            if ((this.GetLBNearGamerTagOperationCompleted == null)) {
                this.GetLBNearGamerTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLBNearGamerTagOperationCompleted);
            }
            this.InvokeAsync("GetLBNearGamerTag", new object[] {
                        TitleID,
                        LBID,
                        GamerTag,
                        NumAbove,
                        NumBelow}, this.GetLBNearGamerTagOperationCompleted, userState);
        }
        
        private void OnGetLBNearGamerTagOperationCompleted(object arg) {
            if ((this.GetLBNearGamerTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLBNearGamerTagCompleted(this, new GetLBNearGamerTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBForGamerTags", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LBResults GetLBForGamerTags(uint TitleID, uint LBID, string[] GamerTagList, out uint ValidSeconds) {
            object[] results = this.Invoke("GetLBForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList});
            ValidSeconds = ((uint)(results[1]));
            return ((LBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLBForGamerTags(uint TitleID, uint LBID, string[] GamerTagList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLBForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList}, callback, asyncState);
        }
        
        /// <remarks/>
        public LBResults EndGetLBForGamerTags(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((LBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetLBForGamerTagsAsync(uint TitleID, uint LBID, string[] GamerTagList) {
            this.GetLBForGamerTagsAsync(TitleID, LBID, GamerTagList, null);
        }
        
        /// <remarks/>
        public void GetLBForGamerTagsAsync(uint TitleID, uint LBID, string[] GamerTagList, object userState) {
            if ((this.GetLBForGamerTagsOperationCompleted == null)) {
                this.GetLBForGamerTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLBForGamerTagsOperationCompleted);
            }
            this.InvokeAsync("GetLBForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList}, this.GetLBForGamerTagsOperationCompleted, userState);
        }
        
        private void OnGetLBForGamerTagsOperationCompleted(object arg) {
            if ((this.GetLBForGamerTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLBForGamerTagsCompleted(this, new GetLBForGamerTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBDetailsForGamerTags", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults GetLBDetailsForGamerTags(uint TitleID, uint LBID, string[] GamerTagList, out uint ValidSeconds) {
            object[] results = this.Invoke("GetLBDetailsForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLBDetailsForGamerTags(uint TitleID, uint LBID, string[] GamerTagList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLBDetailsForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndGetLBDetailsForGamerTags(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetLBDetailsForGamerTagsAsync(uint TitleID, uint LBID, string[] GamerTagList) {
            this.GetLBDetailsForGamerTagsAsync(TitleID, LBID, GamerTagList, null);
        }
        
        /// <remarks/>
        public void GetLBDetailsForGamerTagsAsync(uint TitleID, uint LBID, string[] GamerTagList, object userState) {
            if ((this.GetLBDetailsForGamerTagsOperationCompleted == null)) {
                this.GetLBDetailsForGamerTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLBDetailsForGamerTagsOperationCompleted);
            }
            this.InvokeAsync("GetLBDetailsForGamerTags", new object[] {
                        TitleID,
                        LBID,
                        GamerTagList}, this.GetLBDetailsForGamerTagsOperationCompleted, userState);
        }
        
        private void OnGetLBDetailsForGamerTagsOperationCompleted(object arg) {
            if ((this.GetLBDetailsForGamerTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLBDetailsForGamerTagsCompleted(this, new GetLBDetailsForGamerTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/EnumerateTeamLB", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults EnumerateTeamLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, out uint ValidSeconds) {
            object[] results = this.Invoke("EnumerateTeamLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateTeamLB(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateTeamLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndEnumerateTeamLB(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateTeamLBAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries) {
            this.EnumerateTeamLBAsync(TitleID, LBID, StartIndex, MaxEntries, null);
        }
        
        /// <remarks/>
        public void EnumerateTeamLBAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, object userState) {
            if ((this.EnumerateTeamLBOperationCompleted == null)) {
                this.EnumerateTeamLBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateTeamLBOperationCompleted);
            }
            this.InvokeAsync("EnumerateTeamLB", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, this.EnumerateTeamLBOperationCompleted, userState);
        }
        
        private void OnEnumerateTeamLBOperationCompleted(object arg) {
            if ((this.EnumerateTeamLBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateTeamLBCompleted(this, new EnumerateTeamLBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetTeamLBNearTeamName", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults GetTeamLBNearTeamName(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow, out uint ValidSeconds) {
            object[] results = this.Invoke("GetTeamLBNearTeamName", new object[] {
                        TitleID,
                        LBID,
                        TeamName,
                        NumAbove,
                        NumBelow});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTeamLBNearTeamName(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTeamLBNearTeamName", new object[] {
                        TitleID,
                        LBID,
                        TeamName,
                        NumAbove,
                        NumBelow}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndGetTeamLBNearTeamName(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamLBNearTeamNameAsync(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow) {
            this.GetTeamLBNearTeamNameAsync(TitleID, LBID, TeamName, NumAbove, NumBelow, null);
        }
        
        /// <remarks/>
        public void GetTeamLBNearTeamNameAsync(uint TitleID, uint LBID, string TeamName, uint NumAbove, uint NumBelow, object userState) {
            if ((this.GetTeamLBNearTeamNameOperationCompleted == null)) {
                this.GetTeamLBNearTeamNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamLBNearTeamNameOperationCompleted);
            }
            this.InvokeAsync("GetTeamLBNearTeamName", new object[] {
                        TitleID,
                        LBID,
                        TeamName,
                        NumAbove,
                        NumBelow}, this.GetTeamLBNearTeamNameOperationCompleted, userState);
        }
        
        private void OnGetTeamLBNearTeamNameOperationCompleted(object arg) {
            if ((this.GetTeamLBNearTeamNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamLBNearTeamNameCompleted(this, new GetTeamLBNearTeamNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetTeamLBForTeamNames", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LBResults GetTeamLBForTeamNames(uint TitleID, uint LBID, string[] TeamNameList, out uint ValidSeconds) {
            object[] results = this.Invoke("GetTeamLBForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList});
            ValidSeconds = ((uint)(results[1]));
            return ((LBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTeamLBForTeamNames(uint TitleID, uint LBID, string[] TeamNameList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTeamLBForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList}, callback, asyncState);
        }
        
        /// <remarks/>
        public LBResults EndGetTeamLBForTeamNames(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((LBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamLBForTeamNamesAsync(uint TitleID, uint LBID, string[] TeamNameList) {
            this.GetTeamLBForTeamNamesAsync(TitleID, LBID, TeamNameList, null);
        }
        
        /// <remarks/>
        public void GetTeamLBForTeamNamesAsync(uint TitleID, uint LBID, string[] TeamNameList, object userState) {
            if ((this.GetTeamLBForTeamNamesOperationCompleted == null)) {
                this.GetTeamLBForTeamNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamLBForTeamNamesOperationCompleted);
            }
            this.InvokeAsync("GetTeamLBForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList}, this.GetTeamLBForTeamNamesOperationCompleted, userState);
        }
        
        private void OnGetTeamLBForTeamNamesOperationCompleted(object arg) {
            if ((this.GetTeamLBForTeamNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamLBForTeamNamesCompleted(this, new GetTeamLBForTeamNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetTeamLBDetailsForTeamNames", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DetailedLBResults GetTeamLBDetailsForTeamNames(uint TitleID, uint LBID, string[] TeamNameList, out uint ValidSeconds) {
            object[] results = this.Invoke("GetTeamLBDetailsForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList});
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTeamLBDetailsForTeamNames(uint TitleID, uint LBID, string[] TeamNameList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTeamLBDetailsForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList}, callback, asyncState);
        }
        
        /// <remarks/>
        public DetailedLBResults EndGetTeamLBDetailsForTeamNames(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((DetailedLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamLBDetailsForTeamNamesAsync(uint TitleID, uint LBID, string[] TeamNameList) {
            this.GetTeamLBDetailsForTeamNamesAsync(TitleID, LBID, TeamNameList, null);
        }
        
        /// <remarks/>
        public void GetTeamLBDetailsForTeamNamesAsync(uint TitleID, uint LBID, string[] TeamNameList, object userState) {
            if ((this.GetTeamLBDetailsForTeamNamesOperationCompleted == null)) {
                this.GetTeamLBDetailsForTeamNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamLBDetailsForTeamNamesOperationCompleted);
            }
            this.InvokeAsync("GetTeamLBDetailsForTeamNames", new object[] {
                        TitleID,
                        LBID,
                        TeamNameList}, this.GetTeamLBDetailsForTeamNamesOperationCompleted, userState);
        }
        
        private void OnGetTeamLBDetailsForTeamNamesOperationCompleted(object arg) {
            if ((this.GetTeamLBDetailsForTeamNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamLBDetailsForTeamNamesCompleted(this, new GetTeamLBDetailsForTeamNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/EnumerateLBRaw", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RawLBResults EnumerateLBRaw(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, out uint ValidSeconds) {
            object[] results = this.Invoke("EnumerateLBRaw", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries});
            ValidSeconds = ((uint)(results[1]));
            return ((RawLBResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateLBRaw(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateLBRaw", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, callback, asyncState);
        }
        
        /// <remarks/>
        public RawLBResults EndEnumerateLBRaw(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((RawLBResults)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateLBRawAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries) {
            this.EnumerateLBRawAsync(TitleID, LBID, StartIndex, MaxEntries, null);
        }
        
        /// <remarks/>
        public void EnumerateLBRawAsync(uint TitleID, uint LBID, uint StartIndex, uint MaxEntries, object userState) {
            if ((this.EnumerateLBRawOperationCompleted == null)) {
                this.EnumerateLBRawOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateLBRawOperationCompleted);
            }
            this.InvokeAsync("EnumerateLBRaw", new object[] {
                        TitleID,
                        LBID,
                        StartIndex,
                        MaxEntries}, this.EnumerateLBRawOperationCompleted, userState);
        }
        
        private void OnEnumerateLBRawOperationCompleted(object arg) {
            if ((this.EnumerateLBRawCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateLBRawCompleted(this, new EnumerateLBRawCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public enum DeleteXUIDStatus {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Warning_No_OP,
        
        /// <remarks/>
        Error_Invalid_Xuid,
        
        /// <remarks/>
        Error_Invalid_Title,
        
        /// <remarks/>
        Error_Invalid_Lb_ID,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class LBInfo {
        
        private uint lBIDField;
        
        private LBResetType resetTypeField;
        
        private StatsLocalizedName[] localizedLBNameField;
        
        private LBAttributeInfo[] attributeInfoField;
        
        /// <remarks/>
        public uint LBID {
            get {
                return this.lBIDField;
            }
            set {
                this.lBIDField = value;
            }
        }
        
        /// <remarks/>
        public LBResetType ResetType {
            get {
                return this.resetTypeField;
            }
            set {
                this.resetTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public StatsLocalizedName[] LocalizedLBName {
            get {
                return this.localizedLBNameField;
            }
            set {
                this.localizedLBNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LBAttributeInfo[] AttributeInfo {
            get {
                return this.attributeInfoField;
            }
            set {
                this.attributeInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public enum LBResetType {
        
        /// <remarks/>
        Never,
        
        /// <remarks/>
        Weekly,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Bimonthly,
        
        /// <remarks/>
        Quarterly,
        
        /// <remarks/>
        Semiannually,
        
        /// <remarks/>
        Annually,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class StatsLocalizedName {
        
        private string localeField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class RawLBAttribute {
        
        private uint idField;
        
        private object vField;
        
        /// <remarks/>
        public uint ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public object V {
            get {
                return this.vField;
            }
            set {
                this.vField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class RawLBEntry {
        
        private string gField;
        
        private uint rField;
        
        private RawLBAttribute[] aField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
        
        /// <remarks/>
        public uint R {
            get {
                return this.rField;
            }
            set {
                this.rField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public RawLBAttribute[] A {
            get {
                return this.aField;
            }
            set {
                this.aField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class RawLBResults {
        
        private RawLBEntry[] entriesField;
        
        private System.DateTime lBLastResetDateField;
        
        private uint totalLBEntriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public RawLBEntry[] Entries {
            get {
                return this.entriesField;
            }
            set {
                this.entriesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LBLastResetDate {
            get {
                return this.lBLastResetDateField;
            }
            set {
                this.lBLastResetDateField = value;
            }
        }
        
        /// <remarks/>
        public uint TotalLBEntries {
            get {
                return this.totalLBEntriesField;
            }
            set {
                this.totalLBEntriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class LBEntry {
        
        private string gField;
        
        private uint rField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
        
        /// <remarks/>
        public uint R {
            get {
                return this.rField;
            }
            set {
                this.rField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class LBResults {
        
        private LBEntry[] entriesField;
        
        private System.DateTime lBLastResetDateField;
        
        private uint totalLBEntriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LBEntry[] Entries {
            get {
                return this.entriesField;
            }
            set {
                this.entriesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LBLastResetDate {
            get {
                return this.lBLastResetDateField;
            }
            set {
                this.lBLastResetDateField = value;
            }
        }
        
        /// <remarks/>
        public uint TotalLBEntries {
            get {
                return this.totalLBEntriesField;
            }
            set {
                this.totalLBEntriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class LBEntryAttribute {
        
        private string idField;
        
        private string vField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string V {
            get {
                return this.vField;
            }
            set {
                this.vField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class DetailedLBEntry {
        
        private string gField;
        
        private uint rField;
        
        private LBEntryAttribute[] fField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
        
        /// <remarks/>
        public uint R {
            get {
                return this.rField;
            }
            set {
                this.rField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LBEntryAttribute[] F {
            get {
                return this.fField;
            }
            set {
                this.fField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class DetailedLBResults {
        
        private DetailedLBEntry[] entriesField;
        
        private System.DateTime lBLastResetDateField;
        
        private uint totalLBEntriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public DetailedLBEntry[] Entries {
            get {
                return this.entriesField;
            }
            set {
                this.entriesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LBLastResetDate {
            get {
                return this.lBLastResetDateField;
            }
            set {
                this.lBLastResetDateField = value;
            }
        }
        
        /// <remarks/>
        public uint TotalLBEntries {
            get {
                return this.totalLBEntriesField;
            }
            set {
                this.totalLBEntriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public partial class LBAttributeInfo {
        
        private string idField;
        
        private AttributeUnit unitField;
        
        private StatsLocalizedName[] localizedAttrNameField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public AttributeUnit Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public StatsLocalizedName[] LocalizedAttrName {
            get {
                return this.localizedAttrNameField;
            }
            set {
                this.localizedAttrNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public enum AttributeUnit {
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        Percent,
        
        /// <remarks/>
        GamerTag,
        
        /// <remarks/>
        TimeStamp,
        
        /// <remarks/>
        MilliSeconds,
        
        /// <remarks/>
        TenMilliSeconds,
        
        /// <remarks/>
        HundredMilliSeconds,
        
        /// <remarks/>
        Seconds,
        
        /// <remarks/>
        Minutes,
        
        /// <remarks/>
        Hours,
        
        /// <remarks/>
        Days,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Team,
        
        /// <remarks/>
        MaxAttributeUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
    public enum LBType {
        
        /// <remarks/>
        Regular,
        
        /// <remarks/>
        RegularTeam,
        
        /// <remarks/>
        CompetitionTemplate,
        
        /// <remarks/>
        CompetitionTemplateTeam,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteXUIDFromLBCompletedEventHandler(object sender, DeleteXUIDFromLBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteXUIDFromLBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteXUIDFromLBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeleteXUIDStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeleteXUIDStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteXUIDFromAllLBsCompletedEventHandler(object sender, DeleteXUIDFromAllLBsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteXUIDFromAllLBsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteXUIDFromAllLBsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeleteXUIDStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeleteXUIDStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLBListCompletedEventHandler(object sender, GetLBListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLBListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLBListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LBInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LBInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLBListByTypeCompletedEventHandler(object sender, GetLBListByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLBListByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLBListByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LBInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LBInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateLBCompletedEventHandler(object sender, EnumerateLBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateLBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateLBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLBNearGamerTagCompletedEventHandler(object sender, GetLBNearGamerTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLBNearGamerTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLBNearGamerTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLBForGamerTagsCompletedEventHandler(object sender, GetLBForGamerTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLBForGamerTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLBForGamerTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLBDetailsForGamerTagsCompletedEventHandler(object sender, GetLBDetailsForGamerTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLBDetailsForGamerTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLBDetailsForGamerTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateTeamLBCompletedEventHandler(object sender, EnumerateTeamLBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateTeamLBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateTeamLBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTeamLBNearTeamNameCompletedEventHandler(object sender, GetTeamLBNearTeamNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamLBNearTeamNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamLBNearTeamNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTeamLBForTeamNamesCompletedEventHandler(object sender, GetTeamLBForTeamNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamLBForTeamNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamLBForTeamNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTeamLBDetailsForTeamNamesCompletedEventHandler(object sender, GetTeamLBDetailsForTeamNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamLBDetailsForTeamNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamLBDetailsForTeamNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DetailedLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DetailedLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateLBRawCompletedEventHandler(object sender, EnumerateLBRawCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateLBRawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateLBRawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RawLBResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RawLBResults)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Query.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Query {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="QuerySoap", Namespace="http://websvc.xboxlive.com/Query/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WireData))]
    public partial class Query : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindFromIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXQSConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCreateSingleEliminationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionManageEntrantOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionTopologyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionTopologySingleEliminationOperationCompleted;
        
        /// <remarks/>
        public Query() {
            this.Url = "http://xewbcaiis001:12000/query/query.asmx";
        }
        
        /// <remarks/>
        public event AddCompletedEventHandler AddCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event UpdateIdCompletedEventHandler UpdateIdCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event FindFromIdsCompletedEventHandler FindFromIdsCompleted;
        
        /// <remarks/>
        public event RemoveCompletedEventHandler RemoveCompleted;
        
        /// <remarks/>
        public event RemoveIdCompletedEventHandler RemoveIdCompleted;
        
        /// <remarks/>
        public event SelectCompletedEventHandler SelectCompleted;
        
        /// <remarks/>
        public event GetXQSConfigCompletedEventHandler GetXQSConfigCompleted;
        
        /// <remarks/>
        public event CompetitionCreateCompletedEventHandler CompetitionCreateCompleted;
        
        /// <remarks/>
        public event CompetitionCreateSingleEliminationCompletedEventHandler CompetitionCreateSingleEliminationCompleted;
        
        /// <remarks/>
        public event CompetitionSearchCompletedEventHandler CompetitionSearchCompleted;
        
        /// <remarks/>
        public event CompetitionManageEntrantCompletedEventHandler CompetitionManageEntrantCompleted;
        
        /// <remarks/>
        public event CompetitionCancelCompletedEventHandler CompetitionCancelCompleted;
        
        /// <remarks/>
        public event CompetitionTopologyCompletedEventHandler CompetitionTopologyCompleted;
        
        /// <remarks/>
        public event CompetitionTopologySingleEliminationCompletedEventHandler CompetitionTopologySingleEliminationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Add", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong Add(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            object[] results = this.Invoke("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdd(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void AddAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            this.AddAsync(titleId, webId, gamerTag, teamName, datasetId, attributes, null);
        }
        
        /// <remarks/>
        public void AddAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, object userState) {
            if ((this.AddOperationCompleted == null)) {
                this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
            }
            this.InvokeAsync("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, this.AddOperationCompleted, userState);
        }
        
        private void OnAddOperationCompleted(object arg) {
            if ((this.AddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Update", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.Invoke("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.UpdateAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, attributes, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/UpdateId", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateId(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes) {
            this.Invoke("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateId(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes) {
            this.UpdateIdAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, entityId, attributes, null);
        }
        
        /// <remarks/>
        public void UpdateIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes, object userState) {
            if ((this.UpdateIdOperationCompleted == null)) {
                this.UpdateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIdOperationCompleted);
            }
            this.InvokeAsync("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes}, this.UpdateIdOperationCompleted, userState);
        }
        
        private void OnUpdateIdOperationCompleted(object arg) {
            if ((this.UpdateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Search", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse Search(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            object[] results = this.Invoke("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearch(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            this.SearchAsync(titleId, datasetId, procIndex, page, resultsPerPage, specs, attributes, null);
        }
        
        /// <remarks/>
        public void SearchAsync(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/FindFromIds", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindFromIdsResponse FindFromIds(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds) {
            object[] results = this.Invoke("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds});
            return ((FindFromIdsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindFromIds(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindFromIdsResponse EndFindFromIds(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindFromIdsResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FindFromIdsAsync(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds) {
            this.FindFromIdsAsync(titleId, datasetId, procIndex, specs, entityIds, null);
        }
        
        /// <remarks/>
        public void FindFromIdsAsync(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds, object userState) {
            if ((this.FindFromIdsOperationCompleted == null)) {
                this.FindFromIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFromIdsOperationCompleted);
            }
            this.InvokeAsync("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds}, this.FindFromIdsOperationCompleted, userState);
        }
        
        private void OnFindFromIdsOperationCompleted(object arg) {
            if ((this.FindFromIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindFromIdsCompleted(this, new FindFromIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Remove", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Remove(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.Invoke("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemove(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemove(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.RemoveAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, attributes, null);
        }
        
        /// <remarks/>
        public void RemoveAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, object userState) {
            if ((this.RemoveOperationCompleted == null)) {
                this.RemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveOperationCompleted);
            }
            this.InvokeAsync("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, this.RemoveOperationCompleted, userState);
        }
        
        private void OnRemoveOperationCompleted(object arg) {
            if ((this.RemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/RemoveId", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveId(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId) {
            this.Invoke("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveId(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId) {
            this.RemoveIdAsync(titleId, webId, gamerTag, teamName, datasetId, entityId, null);
        }
        
        /// <remarks/>
        public void RemoveIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, object userState) {
            if ((this.RemoveIdOperationCompleted == null)) {
                this.RemoveIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIdOperationCompleted);
            }
            this.InvokeAsync("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId}, this.RemoveIdOperationCompleted, userState);
        }
        
        private void OnRemoveIdOperationCompleted(object arg) {
            if ((this.RemoveIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Select", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Select(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes) {
            this.Invoke("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSelect(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSelect(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SelectAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes) {
            this.SelectAsync(titleId, webId, gamerTag, teamName, datasetId, entityId, action, attributes, null);
        }
        
        /// <remarks/>
        public void SelectAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes, object userState) {
            if ((this.SelectOperationCompleted == null)) {
                this.SelectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectOperationCompleted);
            }
            this.InvokeAsync("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes}, this.SelectOperationCompleted, userState);
        }
        
        private void OnSelectOperationCompleted(object arg) {
            if ((this.SelectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/GetXQSConfig", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXQSConfig(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, ulong haveVersion) {
            object[] results = this.Invoke("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetXQSConfig(uint titleId, byte[] webId, ulong haveVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetXQSConfig(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXQSConfigAsync(uint titleId, byte[] webId, ulong haveVersion) {
            this.GetXQSConfigAsync(titleId, webId, haveVersion, null);
        }
        
        /// <remarks/>
        public void GetXQSConfigAsync(uint titleId, byte[] webId, ulong haveVersion, object userState) {
            if ((this.GetXQSConfigOperationCompleted == null)) {
                this.GetXQSConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXQSConfigOperationCompleted);
            }
            this.InvokeAsync("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion}, this.GetXQSConfigOperationCompleted, userState);
        }
        
        private void OnGetXQSConfigOperationCompleted(object arg) {
            if ((this.GetXQSConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXQSConfigCompleted(this, new GetXQSConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCreate", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong CompetitionCreate(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            object[] results = this.Invoke("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCreate(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndCompetitionCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionCreateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            this.CompetitionCreateAsync(titleId, webId, gamerTag, teamName, datasetId, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionCreateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionCreateOperationCompleted == null)) {
                this.CompetitionCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCreateOperationCompleted);
            }
            this.InvokeAsync("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, this.CompetitionCreateOperationCompleted, userState);
        }
        
        private void OnCompetitionCreateOperationCompleted(object arg) {
            if ((this.CompetitionCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCreateCompleted(this, new CompetitionCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCreateSingleElimination", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong CompetitionCreateSingleElimination(
                    uint titleId, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes) {
            object[] results = this.Invoke("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCreateSingleElimination(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndCompetitionCreateSingleElimination(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionCreateSingleEliminationAsync(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes) {
            this.CompetitionCreateSingleEliminationAsync(titleId, webId, gamerTag, teamName, datasetId, cPrivateSlots, cPublicSlots, cMinimumPlayers, dtRegistrationOpen, dtRegistrationClose, dtCompetitionStart, dtRoundOneStart, dtRoundOneEnd, dwMatchReminderAdvanceMinutes, UnitOrMask, Interval, fTeamCompetition, dwTeamSize, additionalAttributes, null);
        }
        
        /// <remarks/>
        public void CompetitionCreateSingleEliminationAsync(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes, 
                    object userState) {
            if ((this.CompetitionCreateSingleEliminationOperationCompleted == null)) {
                this.CompetitionCreateSingleEliminationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCreateSingleEliminationOperationCompleted);
            }
            this.InvokeAsync("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes}, this.CompetitionCreateSingleEliminationOperationCompleted, userState);
        }
        
        private void OnCompetitionCreateSingleEliminationOperationCompleted(object arg) {
            if ((this.CompetitionCreateSingleEliminationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCreateSingleEliminationCompleted(this, new CompetitionCreateSingleEliminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionSearch", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionSearch(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            object[] results = this.Invoke("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionSearch(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionSearchAsync(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            this.CompetitionSearchAsync(titleId, datasetId, queryId, page, resultsPerPage, specs, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionSearchAsync(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionSearchOperationCompleted == null)) {
                this.CompetitionSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionSearchOperationCompleted);
            }
            this.InvokeAsync("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, this.CompetitionSearchOperationCompleted, userState);
        }
        
        private void OnCompetitionSearchOperationCompleted(object arg) {
            if ((this.CompetitionSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionSearchCompleted(this, new CompetitionSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionManageEntrant", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompetitionManageEntrant(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes) {
            this.Invoke("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionManageEntrant(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCompetitionManageEntrant(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CompetitionManageEntrantAsync(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes) {
            this.CompetitionManageEntrantAsync(titleId, webId, gamerTag, action, teamName, datasetId, competitionId, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionManageEntrantAsync(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionManageEntrantOperationCompleted == null)) {
                this.CompetitionManageEntrantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionManageEntrantOperationCompleted);
            }
            this.InvokeAsync("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes}, this.CompetitionManageEntrantOperationCompleted, userState);
        }
        
        private void OnCompetitionManageEntrantOperationCompleted(object arg) {
            if ((this.CompetitionManageEntrantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionManageEntrantCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCancel", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompetitionCancel(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId) {
            this.Invoke("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCancel(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCompetitionCancel(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CompetitionCancelAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId) {
            this.CompetitionCancelAsync(titleId, webId, gamerTag, teamName, datasetId, competitionId, null);
        }
        
        /// <remarks/>
        public void CompetitionCancelAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId, object userState) {
            if ((this.CompetitionCancelOperationCompleted == null)) {
                this.CompetitionCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCancelOperationCompleted);
            }
            this.InvokeAsync("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId}, this.CompetitionCancelOperationCompleted, userState);
        }
        
        private void OnCompetitionCancelOperationCompleted(object arg) {
            if ((this.CompetitionCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCancelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionTopology", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionTopology(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs) {
            object[] results = this.Invoke("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionTopology(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionTopology(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionTopologyAsync(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs) {
            this.CompetitionTopologyAsync(titleId, datasetId, competitionId, page, resultsPerPage, startingEventId, endingEventId, specs, null);
        }
        
        /// <remarks/>
        public void CompetitionTopologyAsync(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs, object userState) {
            if ((this.CompetitionTopologyOperationCompleted == null)) {
                this.CompetitionTopologyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionTopologyOperationCompleted);
            }
            this.InvokeAsync("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs}, this.CompetitionTopologyOperationCompleted, userState);
        }
        
        private void OnCompetitionTopologyOperationCompleted(object arg) {
            if ((this.CompetitionTopologyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionTopologyCompleted(this, new CompetitionTopologyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionTopologySingleElimination", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionTopologySingleElimination(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs) {
            object[] results = this.Invoke("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionTopologySingleElimination(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionTopologySingleElimination(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionTopologySingleEliminationAsync(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs) {
            this.CompetitionTopologySingleEliminationAsync(titleId, datasetId, competitionId, originEventId, roundsForward, roundsBackward, topWidth, specs, null);
        }
        
        /// <remarks/>
        public void CompetitionTopologySingleEliminationAsync(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs, object userState) {
            if ((this.CompetitionTopologySingleEliminationOperationCompleted == null)) {
                this.CompetitionTopologySingleEliminationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionTopologySingleEliminationOperationCompleted);
            }
            this.InvokeAsync("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs}, this.CompetitionTopologySingleEliminationOperationCompleted, userState);
        }
        
        private void OnCompetitionTopologySingleEliminationOperationCompleted(object arg) {
            if ((this.CompetitionTopologySingleEliminationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionTopologySingleEliminationCompleted(this, new CompetitionTopologySingleEliminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class QueryAttribute : WireData {
        
        private object valueField;
        
        private uint idField;
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(XRLObject2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindFromIdsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttributeSpec))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttribute))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class WireData {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindFromIdsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttributeSpec))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class XRLObject2 : WireData {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class FindFromIdsResponse : XRLObject2 {
        
        private uint returnedResultsField;
        
        private uint attribCountField;
        
        private QueryAttribute[] attribsField;
        
        /// <remarks/>
        public uint returnedResults {
            get {
                return this.returnedResultsField;
            }
            set {
                this.returnedResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint attribCount {
            get {
                return this.attribCountField;
            }
            set {
                this.attribCountField = value;
            }
        }
        
        /// <remarks/>
        public QueryAttribute[] attribs {
            get {
                return this.attribsField;
            }
            set {
                this.attribsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class SearchResponse : XRLObject2 {
        
        private uint totalResultsField;
        
        private uint returnedResultsField;
        
        private uint attribCountField;
        
        private QueryAttribute[] attribsField;
        
        /// <remarks/>
        public uint totalResults {
            get {
                return this.totalResultsField;
            }
            set {
                this.totalResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint returnedResults {
            get {
                return this.returnedResultsField;
            }
            set {
                this.returnedResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint attribCount {
            get {
                return this.attribCountField;
            }
            set {
                this.attribCountField = value;
            }
        }
        
        /// <remarks/>
        public QueryAttribute[] attribs {
            get {
                return this.attribsField;
            }
            set {
                this.attribsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class QueryAttributeSpec : XRLObject2 {
        
        private uint typeField;
        
        private uint lenField;
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public uint len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindFromIdsCompletedEventHandler(object sender, FindFromIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindFromIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindFromIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindFromIdsResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindFromIdsResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SelectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetXQSConfigCompletedEventHandler(object sender, GetXQSConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXQSConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXQSConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCreateCompletedEventHandler(object sender, CompetitionCreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCreateSingleEliminationCompletedEventHandler(object sender, CompetitionCreateSingleEliminationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionCreateSingleEliminationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionCreateSingleEliminationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionSearchCompletedEventHandler(object sender, CompetitionSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionManageEntrantCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCancelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionTopologyCompletedEventHandler(object sender, CompetitionTopologyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionTopologyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionTopologyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionTopologySingleEliminationCompletedEventHandler(object sender, CompetitionTopologySingleEliminationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionTopologySingleEliminationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionTopologySingleEliminationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Messaging.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Messaging {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MessagingImplSoap", Namespace="http://tempuri.org/")]
    public partial class MessagingImpl : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMessageStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeTitleUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTitleUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTitleWideMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTitleWideMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTitleWideMessageDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumTitleWideMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMessageFlagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumUserTitlesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumMessagesOperationCompleted;
        
        /// <remarks/>
        public MessagingImpl() {
            this.Url = "http://xewbcaiis001:12000/messaging/messaging.asmx";
        }
        
        /// <remarks/>
        public event GetMessageStringCompletedEventHandler GetMessageStringCompleted;
        
        /// <remarks/>
        public event RevokeTitleUserMessageCompletedEventHandler RevokeTitleUserMessageCompleted;
        
        /// <remarks/>
        public event SendTitleUserMessageCompletedEventHandler SendTitleUserMessageCompleted;
        
        /// <remarks/>
        public event SendTitleWideMessageCompletedEventHandler SendTitleWideMessageCompleted;
        
        /// <remarks/>
        public event DeleteTitleWideMessageCompletedEventHandler DeleteTitleWideMessageCompleted;
        
        /// <remarks/>
        public event GetTitleWideMessageDetailsCompletedEventHandler GetTitleWideMessageDetailsCompleted;
        
        /// <remarks/>
        public event EnumTitleWideMessagesCompletedEventHandler EnumTitleWideMessagesCompleted;
        
        /// <remarks/>
        public event SetMessageFlagsCompletedEventHandler SetMessageFlagsCompleted;
        
        /// <remarks/>
        public event EnumUserTitlesCompletedEventHandler EnumUserTitlesCompleted;
        
        /// <remarks/>
        public event DeleteUserTitleCompletedEventHandler DeleteUserTitleCompleted;
        
        /// <remarks/>
        public event RevokeMessageCompletedEventHandler RevokeMessageCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event GetMessageDetailsCompletedEventHandler GetMessageDetailsCompleted;
        
        /// <remarks/>
        public event EnumMessagesCompletedEventHandler EnumMessagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetMessageString", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("StringData")]
        public string GetMessageString(uint TitleID, uint StringID, string Locale) {
            object[] results = this.Invoke("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMessageString(uint TitleID, uint StringID, string Locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMessageString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStringAsync(uint TitleID, uint StringID, string Locale) {
            this.GetMessageStringAsync(TitleID, StringID, Locale, null);
        }
        
        /// <remarks/>
        public void GetMessageStringAsync(uint TitleID, uint StringID, string Locale, object userState) {
            if ((this.GetMessageStringOperationCompleted == null)) {
                this.GetMessageStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStringOperationCompleted);
            }
            this.InvokeAsync("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale}, this.GetMessageStringOperationCompleted, userState);
        }
        
        private void OnGetMessageStringOperationCompleted(object arg) {
            if ((this.GetMessageStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStringCompleted(this, new GetMessageStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/RevokeTitleUserMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint RevokeTitleUserMessage([System.Xml.Serialization.XmlElementAttribute("RecipResult")] WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("RevokeTitleUserMessage", new object[] {
                        RecipResult});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeTitleUserMessage(WCRecipientResult[] RecipResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeTitleUserMessage", new object[] {
                        RecipResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndRevokeTitleUserMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeTitleUserMessageAsync(WCRecipientResult[] RecipResult) {
            this.RevokeTitleUserMessageAsync(RecipResult, null);
        }
        
        /// <remarks/>
        public void RevokeTitleUserMessageAsync(WCRecipientResult[] RecipResult, object userState) {
            if ((this.RevokeTitleUserMessageOperationCompleted == null)) {
                this.RevokeTitleUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeTitleUserMessageOperationCompleted);
            }
            this.InvokeAsync("RevokeTitleUserMessage", new object[] {
                        RecipResult}, this.RevokeTitleUserMessageOperationCompleted, userState);
        }
        
        private void OnRevokeTitleUserMessageOperationCompleted(object arg) {
            if ((this.RevokeTitleUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeTitleUserMessageCompleted(this, new RevokeTitleUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendTitleUserMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, [System.Xml.Serialization.XmlElementAttribute("Recipient")] string[] Recipient, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] out WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment});
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendTitleUserMessage(System.IAsyncResult asyncResult, out WCRecipientResult[] RecipResult) {
            object[] results = this.EndInvoke(asyncResult);
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendTitleUserMessageAsync(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment) {
            this.SendTitleUserMessageAsync(Sender, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, null);
        }
        
        /// <remarks/>
        public void SendTitleUserMessageAsync(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendTitleUserMessageOperationCompleted == null)) {
                this.SendTitleUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTitleUserMessageOperationCompleted);
            }
            this.InvokeAsync("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, this.SendTitleUserMessageOperationCompleted, userState);
        }
        
        private void OnSendTitleUserMessageOperationCompleted(object arg) {
            if ((this.SendTitleUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTitleUserMessageCompleted(this, new SendTitleUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendTitleWideMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("LocalizedString")] WCLocalizedString[] LocalizedString, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, out ushort Delay, out uint MessageID) {
            object[] results = this.Invoke("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment});
            Delay = ((ushort)(results[1]));
            MessageID = ((uint)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendTitleWideMessage(System.IAsyncResult asyncResult, out ushort Delay, out uint MessageID) {
            object[] results = this.EndInvoke(asyncResult);
            Delay = ((ushort)(results[1]));
            MessageID = ((uint)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendTitleWideMessageAsync(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment) {
            this.SendTitleWideMessageAsync(Sender, SenderContext, SentTime, Region, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Description, Details, LocalizedString, Attachment, null);
        }
        
        /// <remarks/>
        public void SendTitleWideMessageAsync(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendTitleWideMessageOperationCompleted == null)) {
                this.SendTitleWideMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTitleWideMessageOperationCompleted);
            }
            this.InvokeAsync("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment}, this.SendTitleWideMessageOperationCompleted, userState);
        }
        
        private void OnSendTitleWideMessageOperationCompleted(object arg) {
            if ((this.SendTitleWideMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTitleWideMessageCompleted(this, new SendTitleWideMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteTitleWideMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags) {
            object[] results = this.Invoke("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteTitleWideMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTitleWideMessageAsync(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags) {
            this.DeleteTitleWideMessageAsync(TitleID, MessageID, Flags, null);
        }
        
        /// <remarks/>
        public void DeleteTitleWideMessageAsync(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags, object userState) {
            if ((this.DeleteTitleWideMessageOperationCompleted == null)) {
                this.DeleteTitleWideMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTitleWideMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags}, this.DeleteTitleWideMessageOperationCompleted, userState);
        }
        
        private void OnDeleteTitleWideMessageOperationCompleted(object arg) {
            if ((this.DeleteTitleWideMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTitleWideMessageCompleted(this, new DeleteTitleWideMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetTitleWideMessageDetails", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint GetTitleWideMessageDetails(uint TitleID, uint MessageID, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.Invoke("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID});
            Summary = ((WCTitleWideMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleWideMessageDetails(uint TitleID, uint MessageID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndGetTitleWideMessageDetails(System.IAsyncResult asyncResult, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCTitleWideMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleWideMessageDetailsAsync(uint TitleID, uint MessageID) {
            this.GetTitleWideMessageDetailsAsync(TitleID, MessageID, null);
        }
        
        /// <remarks/>
        public void GetTitleWideMessageDetailsAsync(uint TitleID, uint MessageID, object userState) {
            if ((this.GetTitleWideMessageDetailsOperationCompleted == null)) {
                this.GetTitleWideMessageDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleWideMessageDetailsOperationCompleted);
            }
            this.InvokeAsync("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID}, this.GetTitleWideMessageDetailsOperationCompleted, userState);
        }
        
        private void OnGetTitleWideMessageDetailsOperationCompleted(object arg) {
            if ((this.GetTitleWideMessageDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleWideMessageDetailsCompleted(this, new GetTitleWideMessageDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/EnumTitleWideMessages", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint EnumTitleWideMessages(uint TitleID, [System.Xml.Serialization.XmlElementAttribute("Summary")] out WCTitleWideMessageSummary[] Summary) {
            object[] results = this.Invoke("EnumTitleWideMessages", new object[] {
                        TitleID});
            Summary = ((WCTitleWideMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumTitleWideMessages(uint TitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumTitleWideMessages", new object[] {
                        TitleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndEnumTitleWideMessages(System.IAsyncResult asyncResult, out WCTitleWideMessageSummary[] Summary) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCTitleWideMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void EnumTitleWideMessagesAsync(uint TitleID) {
            this.EnumTitleWideMessagesAsync(TitleID, null);
        }
        
        /// <remarks/>
        public void EnumTitleWideMessagesAsync(uint TitleID, object userState) {
            if ((this.EnumTitleWideMessagesOperationCompleted == null)) {
                this.EnumTitleWideMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumTitleWideMessagesOperationCompleted);
            }
            this.InvokeAsync("EnumTitleWideMessages", new object[] {
                        TitleID}, this.EnumTitleWideMessagesOperationCompleted, userState);
        }
        
        private void OnEnumTitleWideMessagesOperationCompleted(object arg) {
            if ((this.EnumTitleWideMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumTitleWideMessagesCompleted(this, new EnumTitleWideMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SetMessageFlags", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SetMessageFlags([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags) {
            object[] results = this.Invoke("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetMessageFlags(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSetMessageFlags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SetMessageFlagsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags) {
            this.SetMessageFlagsAsync(UserWebID, UserGamerTag, MessageID, SetFlags, UnsetFlags, null);
        }
        
        /// <remarks/>
        public void SetMessageFlagsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, object userState) {
            if ((this.SetMessageFlagsOperationCompleted == null)) {
                this.SetMessageFlagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMessageFlagsOperationCompleted);
            }
            this.InvokeAsync("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, this.SetMessageFlagsOperationCompleted, userState);
        }
        
        private void OnSetMessageFlagsOperationCompleted(object arg) {
            if ((this.SetMessageFlagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMessageFlagsCompleted(this, new SetMessageFlagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/EnumUserTitles", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint EnumUserTitles([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, [System.Xml.Serialization.XmlElementAttribute("Title")] out WCUserTitle[] Title) {
            object[] results = this.Invoke("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag});
            Title = ((WCUserTitle[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumUserTitles(byte[] UserWebID, string UserGamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndEnumUserTitles(System.IAsyncResult asyncResult, out WCUserTitle[] Title) {
            object[] results = this.EndInvoke(asyncResult);
            Title = ((WCUserTitle[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void EnumUserTitlesAsync(byte[] UserWebID, string UserGamerTag) {
            this.EnumUserTitlesAsync(UserWebID, UserGamerTag, null);
        }
        
        /// <remarks/>
        public void EnumUserTitlesAsync(byte[] UserWebID, string UserGamerTag, object userState) {
            if ((this.EnumUserTitlesOperationCompleted == null)) {
                this.EnumUserTitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumUserTitlesOperationCompleted);
            }
            this.InvokeAsync("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag}, this.EnumUserTitlesOperationCompleted, userState);
        }
        
        private void OnEnumUserTitlesOperationCompleted(object arg) {
            if ((this.EnumUserTitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumUserTitlesCompleted(this, new EnumUserTitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteUserTitle", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteUserTitle([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint TitleID) {
            object[] results = this.Invoke("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUserTitle(byte[] UserWebID, string UserGamerTag, uint TitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteUserTitle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserTitleAsync(byte[] UserWebID, string UserGamerTag, uint TitleID) {
            this.DeleteUserTitleAsync(UserWebID, UserGamerTag, TitleID, null);
        }
        
        /// <remarks/>
        public void DeleteUserTitleAsync(byte[] UserWebID, string UserGamerTag, uint TitleID, object userState) {
            if ((this.DeleteUserTitleOperationCompleted == null)) {
                this.DeleteUserTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserTitleOperationCompleted);
            }
            this.InvokeAsync("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID}, this.DeleteUserTitleOperationCompleted, userState);
        }
        
        private void OnDeleteUserTitleOperationCompleted(object arg) {
            if ((this.DeleteUserTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserTitleCompleted(this, new DeleteUserTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/RevokeMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint RevokeMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] SenderWebID, string SenderGamerTag, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeMessage(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndRevokeMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeMessageAsync(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult) {
            this.RevokeMessageAsync(SenderWebID, SenderGamerTag, RecipResult, null);
        }
        
        /// <remarks/>
        public void RevokeMessageAsync(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult, object userState) {
            if ((this.RevokeMessageOperationCompleted == null)) {
                this.RevokeMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeMessageOperationCompleted);
            }
            this.InvokeAsync("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult}, this.RevokeMessageOperationCompleted, userState);
        }
        
        private void OnRevokeMessageOperationCompleted(object arg) {
            if ((this.RevokeMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeMessageCompleted(this, new RevokeMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, [System.Xml.Serialization.XmlElementAttribute("Recipient")] string[] Recipient, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] out WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment});
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMessage(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendMessage(System.IAsyncResult asyncResult, out WCRecipientResult[] RecipResult) {
            object[] results = this.EndInvoke(asyncResult);
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment) {
            this.SendMessageAsync(SenderWebID, SenderGamerTag, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMessage(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags) {
            this.DeleteMessageAsync(UserWebID, UserGamerTag, MessageID, Flags, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetMessageDetails", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint GetMessageDetails([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, out WCMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.Invoke("GetMessageDetails", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags});
            Summary = ((WCMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMessageDetails(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMessageDetails", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndGetMessageDetails(System.IAsyncResult asyncResult, out WCMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageDetailsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags) {
            this.GetMessageDetailsAsync(UserWebID, UserGamerTag, MessageID, SetFlags, UnsetFlags, null);
        }
        
        /// <remarks/>
        public void GetMessageDetailsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, object userState) {
            if ((this.GetMessageDetailsOperationCompleted == null)) {
                this.GetMessageDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageDetailsOperationCompleted);
            }
            this.InvokeAsync("GetMessageDetails", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, this.GetMessageDetailsOperationCompleted, userState);
        }
        
        private void OnGetMessageDetailsOperationCompleted(object arg) {
            if ((this.GetMessageDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageDetailsCompleted(this, new GetMessageDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/EnumMessages", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint EnumMessages([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, [System.Xml.Serialization.XmlElementAttribute("Summary")] out WCMessageSummary[] Summary) {
            object[] results = this.Invoke("EnumMessages", new object[] {
                        UserWebID,
                        UserGamerTag});
            Summary = ((WCMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumMessages(byte[] UserWebID, string UserGamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumMessages", new object[] {
                        UserWebID,
                        UserGamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndEnumMessages(System.IAsyncResult asyncResult, out WCMessageSummary[] Summary) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void EnumMessagesAsync(byte[] UserWebID, string UserGamerTag) {
            this.EnumMessagesAsync(UserWebID, UserGamerTag, null);
        }
        
        /// <remarks/>
        public void EnumMessagesAsync(byte[] UserWebID, string UserGamerTag, object userState) {
            if ((this.EnumMessagesOperationCompleted == null)) {
                this.EnumMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumMessagesOperationCompleted);
            }
            this.InvokeAsync("EnumMessages", new object[] {
                        UserWebID,
                        UserGamerTag}, this.EnumMessagesOperationCompleted, userState);
        }
        
        private void OnEnumMessagesOperationCompleted(object arg) {
            if ((this.EnumMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumMessagesCompleted(this, new EnumMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCRecipientResult {
        
        private string userField;
        
        private uint messageIDField;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public uint MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCMessageSummary {
        
        private string senderField;
        
        private ulong senderContextField;
        
        private System.DateTime sentTimeField;
        
        private uint messageIDField;
        
        private WCMessageFlags messageFlagsField;
        
        private uint senderTitleIDField;
        
        private ushort expireMinutesField;
        
        private ushort detailsSizeField;
        
        private WCMessageType messageTypeField;
        
        /// <remarks/>
        public string Sender {
            get {
                return this.senderField;
            }
            set {
                this.senderField = value;
            }
        }
        
        /// <remarks/>
        public ulong SenderContext {
            get {
                return this.senderContextField;
            }
            set {
                this.senderContextField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SentTime {
            get {
                return this.sentTimeField;
            }
            set {
                this.sentTimeField = value;
            }
        }
        
        /// <remarks/>
        public uint MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public WCMessageFlags MessageFlags {
            get {
                return this.messageFlagsField;
            }
            set {
                this.messageFlagsField = value;
            }
        }
        
        /// <remarks/>
        public uint SenderTitleID {
            get {
                return this.senderTitleIDField;
            }
            set {
                this.senderTitleIDField = value;
            }
        }
        
        /// <remarks/>
        public ushort ExpireMinutes {
            get {
                return this.expireMinutesField;
            }
            set {
                this.expireMinutesField = value;
            }
        }
        
        /// <remarks/>
        public ushort DetailsSize {
            get {
                return this.detailsSizeField;
            }
            set {
                this.detailsSizeField = value;
            }
        }
        
        /// <remarks/>
        public WCMessageType MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCMessageFlags {
        
        /// <remarks/>
        Required = 1,
        
        /// <remarks/>
        Recommended = 2,
        
        /// <remarks/>
        HasVoice = 4,
        
        /// <remarks/>
        HasText = 8,
        
        /// <remarks/>
        Read = 16,
        
        /// <remarks/>
        NonExportable = 32,
        
        /// <remarks/>
        TeamContext = 64,
        
        /// <remarks/>
        CompContext = 128,
        
        /// <remarks/>
        AlternateTitle = 256,
        
        /// <remarks/>
        Marketing = 512,
        
        /// <remarks/>
        MSReserved0 = 1024,
        
        /// <remarks/>
        MSReserved1 = 2048,
        
        /// <remarks/>
        MSReserved2 = 4096,
        
        /// <remarks/>
        MSReserved3 = 8192,
        
        /// <remarks/>
        MSReserved4 = 16384,
        
        /// <remarks/>
        MSReserved5 = 32768,
        
        /// <remarks/>
        MSReserved6 = 65536,
        
        /// <remarks/>
        MSReserved7 = 131072,
        
        /// <remarks/>
        MSReserved8 = 262144,
        
        /// <remarks/>
        MSReserved9 = 524288,
        
        /// <remarks/>
        MSReserved10 = 1048576,
        
        /// <remarks/>
        MSReserved11 = 2097152,
        
        /// <remarks/>
        MSReserved12 = 4194304,
        
        /// <remarks/>
        MSReserved13 = 8388608,
        
        /// <remarks/>
        TitleReserved0 = 16777216,
        
        /// <remarks/>
        TitleReserved1 = 33554432,
        
        /// <remarks/>
        TitleReserved2 = 67108864,
        
        /// <remarks/>
        TitleReserved3 = 134217728,
        
        /// <remarks/>
        TitleReserved4 = 268435456,
        
        /// <remarks/>
        TitleReserved5 = 536870912,
        
        /// <remarks/>
        TitleReserved6 = 1073741824,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCMessageType {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        TitleCustom,
        
        /// <remarks/>
        FriendRequest,
        
        /// <remarks/>
        GameInvite,
        
        /// <remarks/>
        TeamRecruit,
        
        /// <remarks/>
        CompReminder,
        
        /// <remarks/>
        CompRequest,
        
        /// <remarks/>
        LiveMessage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCUserTitle {
        
        private uint titleIDField;
        
        private System.DateTime lastLogonTimeField;
        
        private WCUserTitleFlags flagsField;
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLogonTime {
            get {
                return this.lastLogonTimeField;
            }
            set {
                this.lastLogonTimeField = value;
            }
        }
        
        /// <remarks/>
        public WCUserTitleFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCUserTitleFlags {
        
        /// <remarks/>
        AcceptMarketing = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCTitleWideMessageSummary {
        
        private uint titleIDField;
        
        private ulong senderContextField;
        
        private System.DateTime sentTimeField;
        
        private uint regionField;
        
        private uint messageIDField;
        
        private WCMessageFlags messageFlagsField;
        
        private ushort expireMinutesField;
        
        private ushort detailsSizeField;
        
        private WCMessageType messageTypeField;
        
        private string senderNameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public ulong SenderContext {
            get {
                return this.senderContextField;
            }
            set {
                this.senderContextField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SentTime {
            get {
                return this.sentTimeField;
            }
            set {
                this.sentTimeField = value;
            }
        }
        
        /// <remarks/>
        public uint Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        /// <remarks/>
        public uint MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public WCMessageFlags MessageFlags {
            get {
                return this.messageFlagsField;
            }
            set {
                this.messageFlagsField = value;
            }
        }
        
        /// <remarks/>
        public ushort ExpireMinutes {
            get {
                return this.expireMinutesField;
            }
            set {
                this.expireMinutesField = value;
            }
        }
        
        /// <remarks/>
        public ushort DetailsSize {
            get {
                return this.detailsSizeField;
            }
            set {
                this.detailsSizeField = value;
            }
        }
        
        /// <remarks/>
        public WCMessageType MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SenderName {
            get {
                return this.senderNameField;
            }
            set {
                this.senderNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCLanguageString {
        
        private string localeField;
        
        private string stringField;
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public string String {
            get {
                return this.stringField;
            }
            set {
                this.stringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCLocalizedString {
        
        private byte propIDField;
        
        private string defaultLocaleField;
        
        private WCLanguageString[] langStringField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultLocale {
            get {
                return this.defaultLocaleField;
            }
            set {
                this.defaultLocaleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LangString")]
        public WCLanguageString[] LangString {
            get {
                return this.langStringField;
            }
            set {
                this.langStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCMessageAttachment {
        
        private byte propIDField;
        
        private WCAttachFlags flagsField;
        
        private byte[] dataField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public WCAttachFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCAttachFlags {
        
        /// <remarks/>
        NonExportable = 1,
        
        /// <remarks/>
        Directory = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCStringIdProp {
        
        private byte propIDField;
        
        private uint valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public uint Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCBoolProp {
        
        private byte propIDField;
        
        private bool valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public bool Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCAttachmentProp {
        
        private byte propIDField;
        
        private uint attachSizeField;
        
        private WCAttachFlags attachFlagsField;
        
        private string attachUrlField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public uint AttachSize {
            get {
                return this.attachSizeField;
            }
            set {
                this.attachSizeField = value;
            }
        }
        
        /// <remarks/>
        public WCAttachFlags AttachFlags {
            get {
                return this.attachFlagsField;
            }
            set {
                this.attachFlagsField = value;
            }
        }
        
        /// <remarks/>
        public string AttachUrl {
            get {
                return this.attachUrlField;
            }
            set {
                this.attachUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCBinaryProp {
        
        private byte propIDField;
        
        private byte[] valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCTimeProp {
        
        private byte propIDField;
        
        private System.DateTime valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCStringProp {
        
        private byte propIDField;
        
        private string valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCQwordProp {
        
        private byte propIDField;
        
        private ulong valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public ulong Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCDwordProp {
        
        private byte propIDField;
        
        private uint valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public uint Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCWordProp {
        
        private byte propIDField;
        
        private ushort valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public ushort Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCByteProp {
        
        private byte propIDField;
        
        private byte valueField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
        
        /// <remarks/>
        public byte Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCNullProp {
        
        private byte propIDField;
        
        /// <remarks/>
        public byte PropID {
            get {
                return this.propIDField;
            }
            set {
                this.propIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public partial class WCMessageDetails {
        
        private WCNullProp[] nullPropField;
        
        private WCByteProp[] bytePropField;
        
        private WCWordProp[] wordPropField;
        
        private WCDwordProp[] dwordPropField;
        
        private WCQwordProp[] qwordPropField;
        
        private WCStringProp[] stringPropField;
        
        private WCTimeProp[] timePropField;
        
        private WCBinaryProp[] binaryPropField;
        
        private WCAttachmentProp[] attachmentPropField;
        
        private WCBoolProp[] boolPropField;
        
        private WCStringIdProp[] stringIdPropField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NullProp")]
        public WCNullProp[] NullProp {
            get {
                return this.nullPropField;
            }
            set {
                this.nullPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ByteProp")]
        public WCByteProp[] ByteProp {
            get {
                return this.bytePropField;
            }
            set {
                this.bytePropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WordProp")]
        public WCWordProp[] WordProp {
            get {
                return this.wordPropField;
            }
            set {
                this.wordPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DwordProp")]
        public WCDwordProp[] DwordProp {
            get {
                return this.dwordPropField;
            }
            set {
                this.dwordPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("QwordProp")]
        public WCQwordProp[] QwordProp {
            get {
                return this.qwordPropField;
            }
            set {
                this.qwordPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StringProp")]
        public WCStringProp[] StringProp {
            get {
                return this.stringPropField;
            }
            set {
                this.stringPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TimeProp")]
        public WCTimeProp[] TimeProp {
            get {
                return this.timePropField;
            }
            set {
                this.timePropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BinaryProp")]
        public WCBinaryProp[] BinaryProp {
            get {
                return this.binaryPropField;
            }
            set {
                this.binaryPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AttachmentProp")]
        public WCAttachmentProp[] AttachmentProp {
            get {
                return this.attachmentPropField;
            }
            set {
                this.attachmentPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BoolProp")]
        public WCBoolProp[] BoolProp {
            get {
                return this.boolPropField;
            }
            set {
                this.boolPropField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StringIdProp")]
        public WCStringIdProp[] StringIdProp {
            get {
                return this.stringIdPropField;
            }
            set {
                this.stringIdPropField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCDeleteSysMsgFlags {
        
        /// <remarks/>
        RevokeAll = 1,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Messaging/")]
    public enum WCDeleteMsgFlags {
        
        /// <remarks/>
        BlockSender = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMessageStringCompletedEventHandler(object sender, GetMessageStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeTitleUserMessageCompletedEventHandler(object sender, RevokeTitleUserMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokeTitleUserMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevokeTitleUserMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendTitleUserMessageCompletedEventHandler(object sender, SendTitleUserMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTitleUserMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTitleUserMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCRecipientResult[] RecipResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCRecipientResult[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendTitleWideMessageCompletedEventHandler(object sender, SendTitleWideMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTitleWideMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTitleWideMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ushort Delay {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ushort)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public uint MessageID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteTitleWideMessageCompletedEventHandler(object sender, DeleteTitleWideMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTitleWideMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTitleWideMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTitleWideMessageDetailsCompletedEventHandler(object sender, GetTitleWideMessageDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleWideMessageDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleWideMessageDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCTitleWideMessageSummary Summary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCTitleWideMessageSummary)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public WCMessageDetails Details {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCMessageDetails)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumTitleWideMessagesCompletedEventHandler(object sender, EnumTitleWideMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumTitleWideMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumTitleWideMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCTitleWideMessageSummary[] Summary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCTitleWideMessageSummary[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetMessageFlagsCompletedEventHandler(object sender, SetMessageFlagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMessageFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMessageFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumUserTitlesCompletedEventHandler(object sender, EnumUserTitlesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumUserTitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumUserTitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCUserTitle[] Title {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCUserTitle[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteUserTitleCompletedEventHandler(object sender, DeleteUserTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeMessageCompletedEventHandler(object sender, RevokeMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokeMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevokeMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCRecipientResult[] RecipResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCRecipientResult[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMessageDetailsCompletedEventHandler(object sender, GetMessageDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCMessageSummary Summary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCMessageSummary)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public WCMessageDetails Details {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCMessageDetails)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumMessagesCompletedEventHandler(object sender, EnumMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WCMessageSummary[] Summary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WCMessageSummary[])(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_wshelper_none_12.4.56.0_none_6da0353643f7de53
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wshelper
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d.manifest
XP_MANIFEST_PATH=manifests\msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d.cat
XP_CATALOG_PATH=manifests\msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d.cat
XP_PAYLOAD_PATH=msil_wshelper_no-public-key_12.4.56.0_x-ww_4066644d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wshelper,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Teams.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Teams {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TeamsSoap", Namespace="http://websvc.xboxlive.com/Teams/")]
    public partial class Teams : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTeamMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManageTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManageTeamMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecruitTeamMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback JoinTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamMembersOperationCompleted;
        
        /// <remarks/>
        public Teams() {
            this.Url = "http://xewbcaiis001:12000/teams/teams.asmx";
        }
        
        /// <remarks/>
        public event CreateTeamCompletedEventHandler CreateTeamCompleted;
        
        /// <remarks/>
        public event DeleteTeamCompletedEventHandler DeleteTeamCompleted;
        
        /// <remarks/>
        public event RemoveTeamMemberCompletedEventHandler RemoveTeamMemberCompleted;
        
        /// <remarks/>
        public event ManageTeamCompletedEventHandler ManageTeamCompleted;
        
        /// <remarks/>
        public event ManageTeamMemberCompletedEventHandler ManageTeamMemberCompleted;
        
        /// <remarks/>
        public event RecruitTeamMemberCompletedEventHandler RecruitTeamMemberCompleted;
        
        /// <remarks/>
        public event JoinTeamCompletedEventHandler JoinTeamCompleted;
        
        /// <remarks/>
        public event GetTeamInfoCompletedEventHandler GetTeamInfoCompleted;
        
        /// <remarks/>
        public event GetTeamMembersCompletedEventHandler GetTeamMembersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/CreateTeam", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateTeam(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] teamData, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] creatorData) {
            this.Invoke("CreateTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        maxMembers,
                        description,
                        motto,
                        URL,
                        teamData,
                        creatorData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateTeam(uint titleId, byte[] webId, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte[] teamData, byte[] creatorData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        maxMembers,
                        description,
                        motto,
                        URL,
                        teamData,
                        creatorData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateTeam(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte[] teamData, byte[] creatorData) {
            this.CreateTeamAsync(titleId, webId, gamerTag, teamName, maxMembers, description, motto, URL, teamData, creatorData, null);
        }
        
        /// <remarks/>
        public void CreateTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint maxMembers, string description, string motto, string URL, byte[] teamData, byte[] creatorData, object userState) {
            if ((this.CreateTeamOperationCompleted == null)) {
                this.CreateTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTeamOperationCompleted);
            }
            this.InvokeAsync("CreateTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        maxMembers,
                        description,
                        motto,
                        URL,
                        teamData,
                        creatorData}, this.CreateTeamOperationCompleted, userState);
        }
        
        private void OnCreateTeamOperationCompleted(object arg) {
            if ((this.CreateTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/DeleteTeam", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTeam(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName) {
            this.Invoke("DeleteTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTeam(uint titleId, byte[] webId, string gamerTag, string teamName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteTeam(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName) {
            this.DeleteTeamAsync(titleId, webId, gamerTag, teamName, null);
        }
        
        /// <remarks/>
        public void DeleteTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, object userState) {
            if ((this.DeleteTeamOperationCompleted == null)) {
                this.DeleteTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTeamOperationCompleted);
            }
            this.InvokeAsync("DeleteTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, this.DeleteTeamOperationCompleted, userState);
        }
        
        private void OnDeleteTeamOperationCompleted(object arg) {
            if ((this.DeleteTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/RemoveTeamMember", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveTeamMember(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, string memberGamerTag) {
            this.Invoke("RemoveTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveTeamMember(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveTeamMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag) {
            this.RemoveTeamMemberAsync(titleId, webId, gamerTag, teamName, memberGamerTag, null);
        }
        
        /// <remarks/>
        public void RemoveTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, object userState) {
            if ((this.RemoveTeamMemberOperationCompleted == null)) {
                this.RemoveTeamMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTeamMemberOperationCompleted);
            }
            this.InvokeAsync("RemoveTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag}, this.RemoveTeamMemberOperationCompleted, userState);
        }
        
        private void OnRemoveTeamMemberOperationCompleted(object arg) {
            if ((this.RemoveTeamMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTeamMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/ManageTeam", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ManageTeam(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] teamData) {
            this.Invoke("ManageTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        newTeamName,
                        description,
                        motto,
                        URL,
                        teamData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginManageTeam(uint titleId, byte[] webId, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte[] teamData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ManageTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        newTeamName,
                        description,
                        motto,
                        URL,
                        teamData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndManageTeam(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ManageTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte[] teamData) {
            this.ManageTeamAsync(titleId, webId, gamerTag, teamName, newTeamName, description, motto, URL, teamData, null);
        }
        
        /// <remarks/>
        public void ManageTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string newTeamName, string description, string motto, string URL, byte[] teamData, object userState) {
            if ((this.ManageTeamOperationCompleted == null)) {
                this.ManageTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManageTeamOperationCompleted);
            }
            this.InvokeAsync("ManageTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        newTeamName,
                        description,
                        motto,
                        URL,
                        teamData}, this.ManageTeamOperationCompleted, userState);
        }
        
        private void OnManageTeamOperationCompleted(object arg) {
            if ((this.ManageTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManageTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/ManageTeamMember", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ManageTeamMember(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] memberData) {
            this.Invoke("ManageTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginManageTeamMember(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ManageTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndManageTeamMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ManageTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData) {
            this.ManageTeamMemberAsync(titleId, webId, gamerTag, teamName, memberGamerTag, memberPriv, memberData, null);
        }
        
        /// <remarks/>
        public void ManageTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData, object userState) {
            if ((this.ManageTeamMemberOperationCompleted == null)) {
                this.ManageTeamMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManageTeamMemberOperationCompleted);
            }
            this.InvokeAsync("ManageTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData}, this.ManageTeamMemberOperationCompleted, userState);
        }
        
        private void OnManageTeamMemberOperationCompleted(object arg) {
            if ((this.ManageTeamMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManageTeamMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/RecruitTeamMember", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RecruitTeamMember(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] memberData) {
            this.Invoke("RecruitTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecruitTeamMember(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RecruitTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRecruitTeamMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RecruitTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData) {
            this.RecruitTeamMemberAsync(titleId, webId, gamerTag, teamName, memberGamerTag, memberPriv, memberData, null);
        }
        
        /// <remarks/>
        public void RecruitTeamMemberAsync(uint titleId, byte[] webId, string gamerTag, string teamName, string memberGamerTag, uint memberPriv, byte[] memberData, object userState) {
            if ((this.RecruitTeamMemberOperationCompleted == null)) {
                this.RecruitTeamMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecruitTeamMemberOperationCompleted);
            }
            this.InvokeAsync("RecruitTeamMember", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        memberGamerTag,
                        memberPriv,
                        memberData}, this.RecruitTeamMemberOperationCompleted, userState);
        }
        
        private void OnRecruitTeamMemberOperationCompleted(object arg) {
            if ((this.RecruitTeamMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecruitTeamMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/JoinTeam", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void JoinTeam(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, byte answer) {
            this.Invoke("JoinTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        answer});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginJoinTeam(uint titleId, byte[] webId, string gamerTag, string teamName, byte answer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("JoinTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        answer}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndJoinTeam(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void JoinTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, byte answer) {
            this.JoinTeamAsync(titleId, webId, gamerTag, teamName, answer, null);
        }
        
        /// <remarks/>
        public void JoinTeamAsync(uint titleId, byte[] webId, string gamerTag, string teamName, byte answer, object userState) {
            if ((this.JoinTeamOperationCompleted == null)) {
                this.JoinTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJoinTeamOperationCompleted);
            }
            this.InvokeAsync("JoinTeam", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        answer}, this.JoinTeamOperationCompleted, userState);
        }
        
        private void OnJoinTeamOperationCompleted(object arg) {
            if ((this.JoinTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JoinTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/GetTeamInfo", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TeamInfo[] GetTeamInfo(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName) {
            object[] results = this.Invoke("GetTeamInfo", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName});
            return ((TeamInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTeamInfo(uint titleId, byte[] webId, string gamerTag, string teamName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTeamInfo", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, callback, asyncState);
        }
        
        /// <remarks/>
        public TeamInfo[] EndGetTeamInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TeamInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamInfoAsync(uint titleId, byte[] webId, string gamerTag, string teamName) {
            this.GetTeamInfoAsync(titleId, webId, gamerTag, teamName, null);
        }
        
        /// <remarks/>
        public void GetTeamInfoAsync(uint titleId, byte[] webId, string gamerTag, string teamName, object userState) {
            if ((this.GetTeamInfoOperationCompleted == null)) {
                this.GetTeamInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamInfoOperationCompleted);
            }
            this.InvokeAsync("GetTeamInfo", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, this.GetTeamInfoOperationCompleted, userState);
        }
        
        private void OnGetTeamInfoOperationCompleted(object arg) {
            if ((this.GetTeamInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamInfoCompleted(this, new GetTeamInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Teams/GetTeamMembers", RequestNamespace="http://websvc.xboxlive.com/Teams/", ResponseNamespace="http://websvc.xboxlive.com/Teams/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TeamMember[] GetTeamMembers(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName) {
            object[] results = this.Invoke("GetTeamMembers", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName});
            return ((TeamMember[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTeamMembers(uint titleId, byte[] webId, string gamerTag, string teamName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTeamMembers", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, callback, asyncState);
        }
        
        /// <remarks/>
        public TeamMember[] EndGetTeamMembers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TeamMember[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamMembersAsync(uint titleId, byte[] webId, string gamerTag, string teamName) {
            this.GetTeamMembersAsync(titleId, webId, gamerTag, teamName, null);
        }
        
        /// <remarks/>
        public void GetTeamMembersAsync(uint titleId, byte[] webId, string gamerTag, string teamName, object userState) {
            if ((this.GetTeamMembersOperationCompleted == null)) {
                this.GetTeamMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamMembersOperationCompleted);
            }
            this.InvokeAsync("GetTeamMembers", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName}, this.GetTeamMembersOperationCompleted, userState);
        }
        
        private void OnGetTeamMembersOperationCompleted(object arg) {
            if ((this.GetTeamMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamMembersCompleted(this, new GetTeamMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Teams/")]
    public partial class TeamInfo {
        
        private string nameField;
        
        private string descriptionField;
        
        private string mottoField;
        
        private string uRLField;
        
        private ulong createdField;
        
        private uint numMembersField;
        
        private byte[] dataField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string motto {
            get {
                return this.mottoField;
            }
            set {
                this.mottoField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public ulong created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public uint numMembers {
            get {
                return this.numMembersField;
            }
            set {
                this.numMembersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Teams/")]
    public partial class TeamMember {
        
        private string gamertagField;
        
        private bool memberField;
        
        private uint privilegesField;
        
        private byte[] dataField;
        
        private ulong joinedField;
        
        /// <remarks/>
        public string gamertag {
            get {
                return this.gamertagField;
            }
            set {
                this.gamertagField = value;
            }
        }
        
        /// <remarks/>
        public bool member {
            get {
                return this.memberField;
            }
            set {
                this.memberField = value;
            }
        }
        
        /// <remarks/>
        public uint privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public ulong joined {
            get {
                return this.joinedField;
            }
            set {
                this.joinedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveTeamMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ManageTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ManageTeamMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RecruitTeamMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void JoinTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTeamInfoCompletedEventHandler(object sender, GetTeamInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTeamMembersCompletedEventHandler(object sender, GetTeamMembersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamMember[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamMember[])(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\Storage.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Storage {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StorageSoap", Namespace="http://websvc.xboxlive.com/Storage/")]
    public partial class Storage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTitleQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadUserFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadTitleFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteUserFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteTitleFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTitleFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeTitleFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeUserFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateTitleFilesOperationCompleted;
        
        /// <remarks/>
        public Storage() {
            this.Url = "http://xewbcaiis001:12000/storage/storage.asmx";
        }
        
        /// <remarks/>
        public event GetTitleQuotaCompletedEventHandler GetTitleQuotaCompleted;
        
        /// <remarks/>
        public event ReadUserFileCompletedEventHandler ReadUserFileCompleted;
        
        /// <remarks/>
        public event ReadTitleFileCompletedEventHandler ReadTitleFileCompleted;
        
        /// <remarks/>
        public event WriteUserFileCompletedEventHandler WriteUserFileCompleted;
        
        /// <remarks/>
        public event WriteTitleFileCompletedEventHandler WriteTitleFileCompleted;
        
        /// <remarks/>
        public event DeleteUserFileCompletedEventHandler DeleteUserFileCompleted;
        
        /// <remarks/>
        public event DeleteTitleFileCompletedEventHandler DeleteTitleFileCompleted;
        
        /// <remarks/>
        public event RevokeTitleFileCompletedEventHandler RevokeTitleFileCompleted;
        
        /// <remarks/>
        public event RevokeUserFileCompletedEventHandler RevokeUserFileCompleted;
        
        /// <remarks/>
        public event EnumerateTitleFilesCompletedEventHandler EnumerateTitleFilesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/GetTitleQuota", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuotaInfo GetTitleQuota(uint titleID) {
            object[] results = this.Invoke("GetTitleQuota", new object[] {
                        titleID});
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleQuota(uint titleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleQuota", new object[] {
                        titleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public QuotaInfo EndGetTitleQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleQuotaAsync(uint titleID) {
            this.GetTitleQuotaAsync(titleID, null);
        }
        
        /// <remarks/>
        public void GetTitleQuotaAsync(uint titleID, object userState) {
            if ((this.GetTitleQuotaOperationCompleted == null)) {
                this.GetTitleQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleQuotaOperationCompleted);
            }
            this.InvokeAsync("GetTitleQuota", new object[] {
                        titleID}, this.GetTitleQuotaOperationCompleted, userState);
        }
        
        private void OnGetTitleQuotaOperationCompleted(object arg) {
            if ((this.GetTitleQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleQuotaCompleted(this, new GetTitleQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/ReadUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReadFileInfo ReadUserFile(uint titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate) {
            object[] results = this.Invoke("ReadUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        ifModifiedSinceDate});
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadUserFile(uint titleID, byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        ifModifiedSinceDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReadFileInfo EndReadUserFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ReadUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate) {
            this.ReadUserFileAsync(titleID, webID, gamerTag, fileName, ifModifiedSinceDate, null);
        }
        
        /// <remarks/>
        public void ReadUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate, object userState) {
            if ((this.ReadUserFileOperationCompleted == null)) {
                this.ReadUserFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadUserFileOperationCompleted);
            }
            this.InvokeAsync("ReadUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        ifModifiedSinceDate}, this.ReadUserFileOperationCompleted, userState);
        }
        
        private void OnReadUserFileOperationCompleted(object arg) {
            if ((this.ReadUserFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadUserFileCompleted(this, new ReadUserFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/ReadTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReadFileInfo ReadTitleFile(uint titleID, string fileName, System.DateTime ifModifiedSinceDate) {
            object[] results = this.Invoke("ReadTitleFile", new object[] {
                        titleID,
                        fileName,
                        ifModifiedSinceDate});
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadTitleFile(uint titleID, string fileName, System.DateTime ifModifiedSinceDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadTitleFile", new object[] {
                        titleID,
                        fileName,
                        ifModifiedSinceDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReadFileInfo EndReadTitleFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ReadTitleFileAsync(uint titleID, string fileName, System.DateTime ifModifiedSinceDate) {
            this.ReadTitleFileAsync(titleID, fileName, ifModifiedSinceDate, null);
        }
        
        /// <remarks/>
        public void ReadTitleFileAsync(uint titleID, string fileName, System.DateTime ifModifiedSinceDate, object userState) {
            if ((this.ReadTitleFileOperationCompleted == null)) {
                this.ReadTitleFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadTitleFileOperationCompleted);
            }
            this.InvokeAsync("ReadTitleFile", new object[] {
                        titleID,
                        fileName,
                        ifModifiedSinceDate}, this.ReadTitleFileOperationCompleted, userState);
        }
        
        private void OnReadTitleFileOperationCompleted(object arg) {
            if ((this.ReadTitleFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadTitleFileCompleted(this, new ReadTitleFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/WriteUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteUserFile(uint titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, System.DateTime expirationDate) {
            this.Invoke("WriteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        contentType,
                        data,
                        expirationDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteUserFile(uint titleID, byte[] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        contentType,
                        data,
                        expirationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndWriteUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void WriteUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate) {
            this.WriteUserFileAsync(titleID, webID, gamerTag, fileName, contentType, data, expirationDate, null);
        }
        
        /// <remarks/>
        public void WriteUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate, object userState) {
            if ((this.WriteUserFileOperationCompleted == null)) {
                this.WriteUserFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteUserFileOperationCompleted);
            }
            this.InvokeAsync("WriteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        contentType,
                        data,
                        expirationDate}, this.WriteUserFileOperationCompleted, userState);
        }
        
        private void OnWriteUserFileOperationCompleted(object arg) {
            if ((this.WriteUserFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteUserFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/WriteTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteTitleFile(uint titleID, string fileName, FileContentTypeEnum contentType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, System.DateTime expirationDate) {
            this.Invoke("WriteTitleFile", new object[] {
                        titleID,
                        fileName,
                        contentType,
                        data,
                        expirationDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteTitleFile(uint titleID, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteTitleFile", new object[] {
                        titleID,
                        fileName,
                        contentType,
                        data,
                        expirationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndWriteTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void WriteTitleFileAsync(uint titleID, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate) {
            this.WriteTitleFileAsync(titleID, fileName, contentType, data, expirationDate, null);
        }
        
        /// <remarks/>
        public void WriteTitleFileAsync(uint titleID, string fileName, FileContentTypeEnum contentType, byte[] data, System.DateTime expirationDate, object userState) {
            if ((this.WriteTitleFileOperationCompleted == null)) {
                this.WriteTitleFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteTitleFileOperationCompleted);
            }
            this.InvokeAsync("WriteTitleFile", new object[] {
                        titleID,
                        fileName,
                        contentType,
                        data,
                        expirationDate}, this.WriteTitleFileOperationCompleted, userState);
        }
        
        private void OnWriteTitleFileOperationCompleted(object arg) {
            if ((this.WriteTitleFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteTitleFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/DeleteUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserFile(uint titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webID, string gamerTag, string fileName) {
            this.Invoke("DeleteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUserFile(uint titleID, byte[] webID, string gamerTag, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName) {
            this.DeleteUserFileAsync(titleID, webID, gamerTag, fileName, null);
        }
        
        /// <remarks/>
        public void DeleteUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, object userState) {
            if ((this.DeleteUserFileOperationCompleted == null)) {
                this.DeleteUserFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserFileOperationCompleted);
            }
            this.InvokeAsync("DeleteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, this.DeleteUserFileOperationCompleted, userState);
        }
        
        private void OnDeleteUserFileOperationCompleted(object arg) {
            if ((this.DeleteUserFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/DeleteTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTitleFile(uint titleID, string fileName) {
            this.Invoke("DeleteTitleFile", new object[] {
                        titleID,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTitleFile(uint titleID, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTitleFile", new object[] {
                        titleID,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteTitleFileAsync(uint titleID, string fileName) {
            this.DeleteTitleFileAsync(titleID, fileName, null);
        }
        
        /// <remarks/>
        public void DeleteTitleFileAsync(uint titleID, string fileName, object userState) {
            if ((this.DeleteTitleFileOperationCompleted == null)) {
                this.DeleteTitleFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTitleFileOperationCompleted);
            }
            this.InvokeAsync("DeleteTitleFile", new object[] {
                        titleID,
                        fileName}, this.DeleteTitleFileOperationCompleted, userState);
        }
        
        private void OnDeleteTitleFileOperationCompleted(object arg) {
            if ((this.DeleteTitleFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTitleFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/RevokeTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeTitleFile(uint titleID, string fileName) {
            this.Invoke("RevokeTitleFile", new object[] {
                        titleID,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeTitleFile(uint titleID, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeTitleFile", new object[] {
                        titleID,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRevokeTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RevokeTitleFileAsync(uint titleID, string fileName) {
            this.RevokeTitleFileAsync(titleID, fileName, null);
        }
        
        /// <remarks/>
        public void RevokeTitleFileAsync(uint titleID, string fileName, object userState) {
            if ((this.RevokeTitleFileOperationCompleted == null)) {
                this.RevokeTitleFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeTitleFileOperationCompleted);
            }
            this.InvokeAsync("RevokeTitleFile", new object[] {
                        titleID,
                        fileName}, this.RevokeTitleFileOperationCompleted, userState);
        }
        
        private void OnRevokeTitleFileOperationCompleted(object arg) {
            if ((this.RevokeTitleFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeTitleFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/RevokeUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeUserFile(uint titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webID, string gamerTag, string fileName) {
            this.Invoke("RevokeUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeUserFile(uint titleID, byte[] webID, string gamerTag, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRevokeUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RevokeUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName) {
            this.RevokeUserFileAsync(titleID, webID, gamerTag, fileName, null);
        }
        
        /// <remarks/>
        public void RevokeUserFileAsync(uint titleID, byte[] webID, string gamerTag, string fileName, object userState) {
            if ((this.RevokeUserFileOperationCompleted == null)) {
                this.RevokeUserFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeUserFileOperationCompleted);
            }
            this.InvokeAsync("RevokeUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, this.RevokeUserFileOperationCompleted, userState);
        }
        
        private void OnRevokeUserFileOperationCompleted(object arg) {
            if ((this.RevokeUserFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeUserFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/EnumerateTitleFiles", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public FileEnumerationInfo[] EnumerateTitleFiles(uint titleID, string fileQuery, System.DateTime ifModifiedSince) {
            object[] results = this.Invoke("EnumerateTitleFiles", new object[] {
                        titleID,
                        fileQuery,
                        ifModifiedSince});
            return ((FileEnumerationInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateTitleFiles(uint titleID, string fileQuery, System.DateTime ifModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateTitleFiles", new object[] {
                        titleID,
                        fileQuery,
                        ifModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public FileEnumerationInfo[] EndEnumerateTitleFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FileEnumerationInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateTitleFilesAsync(uint titleID, string fileQuery, System.DateTime ifModifiedSince) {
            this.EnumerateTitleFilesAsync(titleID, fileQuery, ifModifiedSince, null);
        }
        
        /// <remarks/>
        public void EnumerateTitleFilesAsync(uint titleID, string fileQuery, System.DateTime ifModifiedSince, object userState) {
            if ((this.EnumerateTitleFilesOperationCompleted == null)) {
                this.EnumerateTitleFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateTitleFilesOperationCompleted);
            }
            this.InvokeAsync("EnumerateTitleFiles", new object[] {
                        titleID,
                        fileQuery,
                        ifModifiedSince}, this.EnumerateTitleFilesOperationCompleted, userState);
        }
        
        private void OnEnumerateTitleFilesOperationCompleted(object arg) {
            if ((this.EnumerateTitleFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateTitleFilesCompleted(this, new EnumerateTitleFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public partial class QuotaInfo {
        
        private ulong maxFileSizeField;
        
        private ulong totalBytesMaxField;
        
        private ulong totalBytesUsedField;
        
        private uint totalFilesMaxField;
        
        private uint totalFilesUsedField;
        
        /// <remarks/>
        public ulong MaxFileSize {
            get {
                return this.maxFileSizeField;
            }
            set {
                this.maxFileSizeField = value;
            }
        }
        
        /// <remarks/>
        public ulong TotalBytesMax {
            get {
                return this.totalBytesMaxField;
            }
            set {
                this.totalBytesMaxField = value;
            }
        }
        
        /// <remarks/>
        public ulong TotalBytesUsed {
            get {
                return this.totalBytesUsedField;
            }
            set {
                this.totalBytesUsedField = value;
            }
        }
        
        /// <remarks/>
        public uint TotalFilesMax {
            get {
                return this.totalFilesMaxField;
            }
            set {
                this.totalFilesMaxField = value;
            }
        }
        
        /// <remarks/>
        public uint TotalFilesUsed {
            get {
                return this.totalFilesUsedField;
            }
            set {
                this.totalFilesUsedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public partial class FileEnumerationInfo {
        
        private uint titleIDField;
        
        private uint titleVersionField;
        
        private string gamerTagField;
        
        private byte userCountryIDField;
        
        private uint fileSizeField;
        
        private System.DateTime creationDateField;
        
        private System.DateTime modifiedDateField;
        
        private string fileNameField;
        
        private FileContentTypeEnum fileContentTypeField;
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public uint TitleVersion {
            get {
                return this.titleVersionField;
            }
            set {
                this.titleVersionField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public byte UserCountryID {
            get {
                return this.userCountryIDField;
            }
            set {
                this.userCountryIDField = value;
            }
        }
        
        /// <remarks/>
        public uint FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public FileContentTypeEnum FileContentType {
            get {
                return this.fileContentTypeField;
            }
            set {
                this.fileContentTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public enum FileContentTypeEnum {
        
        /// <remarks/>
        Package,
        
        /// <remarks/>
        Blob,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public partial class ReadFileInfo {
        
        private bool fileNotModifiedField;
        
        private uint titleIDField;
        
        private uint titleVersionField;
        
        private string gamerTagField;
        
        private byte userCountryIDField;
        
        private uint fileSizeField;
        
        private System.DateTime creationDateField;
        
        private byte[] fileDataField;
        
        private FileContentTypeEnum fileContentTypeField;
        
        /// <remarks/>
        public bool FileNotModified {
            get {
                return this.fileNotModifiedField;
            }
            set {
                this.fileNotModifiedField = value;
            }
        }
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public uint TitleVersion {
            get {
                return this.titleVersionField;
            }
            set {
                this.titleVersionField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public byte UserCountryID {
            get {
                return this.userCountryIDField;
            }
            set {
                this.userCountryIDField = value;
            }
        }
        
        /// <remarks/>
        public uint FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
        
        /// <remarks/>
        public FileContentTypeEnum FileContentType {
            get {
                return this.fileContentTypeField;
            }
            set {
                this.fileContentTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTitleQuotaCompletedEventHandler(object sender, GetTitleQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QuotaInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QuotaInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ReadUserFileCompletedEventHandler(object sender, ReadUserFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadUserFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadUserFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReadFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReadFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ReadTitleFileCompletedEventHandler(object sender, ReadTitleFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadTitleFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadTitleFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReadFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReadFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WriteUserFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WriteTitleFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteUserFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteTitleFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeTitleFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeUserFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateTitleFilesCompletedEventHandler(object sender, EnumerateTitleFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateTitleFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateTitleFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileEnumerationInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileEnumerationInfo[])(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\UserAccount.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace UserAccount {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserAccountSoap", Namespace="http://websvc.xboxlive.com/UserAccount/")]
    public partial class UserAccount : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LinkUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkedGamerTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetInfoSharingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAuthorizationOperationCompleted;
        
        /// <remarks/>
        public UserAccount() {
            this.Url = "http://xewbcaiis001:12000/UserAccount/UserAccount.asmx";
        }
        
        /// <remarks/>
        public event LinkUserCompletedEventHandler LinkUserCompleted;
        
        /// <remarks/>
        public event LinkedGamerTagsCompletedEventHandler LinkedGamerTagsCompleted;
        
        /// <remarks/>
        public event GetUserSettingsCompletedEventHandler GetUserSettingsCompleted;
        
        /// <remarks/>
        public event SetInfoSharingCompletedEventHandler SetInfoSharingCompleted;
        
        /// <remarks/>
        public event GetAccountStatusCompletedEventHandler GetAccountStatusCompleted;
        
        /// <remarks/>
        public event GetUserAuthorizationCompletedEventHandler GetUserAuthorizationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/LinkUser", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LinkUser([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber) {
            object[] results = this.Invoke("LinkUser", new object[] {
                        WebID,
                        GamerTag,
                        Owner,
                        PhonePrefix,
                        PhoneNumber,
                        PhoneExtension,
                        PostalCode,
                        CardHolder,
                        CardNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLinkUser(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LinkUser", new object[] {
                        WebID,
                        GamerTag,
                        Owner,
                        PhonePrefix,
                        PhoneNumber,
                        PhoneExtension,
                        PostalCode,
                        CardHolder,
                        CardNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndLinkUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LinkUserAsync(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber) {
            this.LinkUserAsync(WebID, GamerTag, Owner, PhonePrefix, PhoneNumber, PhoneExtension, PostalCode, CardHolder, CardNumber, null);
        }
        
        /// <remarks/>
        public void LinkUserAsync(byte[] WebID, string GamerTag, bool Owner, string PhonePrefix, string PhoneNumber, string PhoneExtension, string PostalCode, string CardHolder, string CardNumber, object userState) {
            if ((this.LinkUserOperationCompleted == null)) {
                this.LinkUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkUserOperationCompleted);
            }
            this.InvokeAsync("LinkUser", new object[] {
                        WebID,
                        GamerTag,
                        Owner,
                        PhonePrefix,
                        PhoneNumber,
                        PhoneExtension,
                        PostalCode,
                        CardHolder,
                        CardNumber}, this.LinkUserOperationCompleted, userState);
        }
        
        private void OnLinkUserOperationCompleted(object arg) {
            if ((this.LinkUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkUserCompleted(this, new LinkUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/LinkedGamerTags", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LinkInfo[] LinkedGamerTags([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID) {
            object[] results = this.Invoke("LinkedGamerTags", new object[] {
                        WebID});
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLinkedGamerTags(byte[] WebID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LinkedGamerTags", new object[] {
                        WebID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LinkInfo[] EndLinkedGamerTags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID) {
            this.LinkedGamerTagsAsync(WebID, null);
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID, object userState) {
            if ((this.LinkedGamerTagsOperationCompleted == null)) {
                this.LinkedGamerTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkedGamerTagsOperationCompleted);
            }
            this.InvokeAsync("LinkedGamerTags", new object[] {
                        WebID}, this.LinkedGamerTagsOperationCompleted, userState);
        }
        
        private void OnLinkedGamerTagsOperationCompleted(object arg) {
            if ((this.LinkedGamerTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkedGamerTagsCompleted(this, new LinkedGamerTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/GetUserSettings", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint GetUserSettings([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag) {
            object[] results = this.Invoke("GetUserSettings", new object[] {
                        WebID,
                        GamerTag});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserSettings(byte[] WebID, string GamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserSettings", new object[] {
                        WebID,
                        GamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndGetUserSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserSettingsAsync(byte[] WebID, string GamerTag) {
            this.GetUserSettingsAsync(WebID, GamerTag, null);
        }
        
        /// <remarks/>
        public void GetUserSettingsAsync(byte[] WebID, string GamerTag, object userState) {
            if ((this.GetUserSettingsOperationCompleted == null)) {
                this.GetUserSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserSettings", new object[] {
                        WebID,
                        GamerTag}, this.GetUserSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserSettingsOperationCompleted(object arg) {
            if ((this.GetUserSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserSettingsCompleted(this, new GetUserSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/SetInfoSharing", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetInfoSharing([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo) {
            object[] results = this.Invoke("SetInfoSharing", new object[] {
                        WebID,
                        GamerTag,
                        acceptMSInfo,
                        acceptPartnerInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetInfoSharing(byte[] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetInfoSharing", new object[] {
                        WebID,
                        GamerTag,
                        acceptMSInfo,
                        acceptPartnerInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetInfoSharing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetInfoSharingAsync(byte[] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo) {
            this.SetInfoSharingAsync(WebID, GamerTag, acceptMSInfo, acceptPartnerInfo, null);
        }
        
        /// <remarks/>
        public void SetInfoSharingAsync(byte[] WebID, string GamerTag, bool acceptMSInfo, bool acceptPartnerInfo, object userState) {
            if ((this.SetInfoSharingOperationCompleted == null)) {
                this.SetInfoSharingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetInfoSharingOperationCompleted);
            }
            this.InvokeAsync("SetInfoSharing", new object[] {
                        WebID,
                        GamerTag,
                        acceptMSInfo,
                        acceptPartnerInfo}, this.SetInfoSharingOperationCompleted, userState);
        }
        
        private void OnSetInfoSharingOperationCompleted(object arg) {
            if ((this.SetInfoSharingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetInfoSharingCompleted(this, new SetInfoSharingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/GetAccountStatus", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserAccountStatus GetAccountStatus([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag) {
            object[] results = this.Invoke("GetAccountStatus", new object[] {
                        WebID,
                        GamerTag});
            return ((UserAccountStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountStatus(byte[] WebID, string GamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountStatus", new object[] {
                        WebID,
                        GamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserAccountStatus EndGetAccountStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserAccountStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountStatusAsync(byte[] WebID, string GamerTag) {
            this.GetAccountStatusAsync(WebID, GamerTag, null);
        }
        
        /// <remarks/>
        public void GetAccountStatusAsync(byte[] WebID, string GamerTag, object userState) {
            if ((this.GetAccountStatusOperationCompleted == null)) {
                this.GetAccountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountStatusOperationCompleted);
            }
            this.InvokeAsync("GetAccountStatus", new object[] {
                        WebID,
                        GamerTag}, this.GetAccountStatusOperationCompleted, userState);
        }
        
        private void OnGetAccountStatusOperationCompleted(object arg) {
            if ((this.GetAccountStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountStatusCompleted(this, new GetAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/UserAccount/GetUserAuthorization", RequestNamespace="http://websvc.xboxlive.com/UserAccount/", ResponseNamespace="http://websvc.xboxlive.com/UserAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserAuthorization GetUserAuthorization(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag) {
            object[] results = this.Invoke("GetUserAuthorization", new object[] {
                        titleId,
                        webId,
                        gamerTag});
            return ((UserAuthorization)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserAuthorization(uint titleId, byte[] webId, string gamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserAuthorization", new object[] {
                        titleId,
                        webId,
                        gamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserAuthorization EndGetUserAuthorization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserAuthorization)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAuthorizationAsync(uint titleId, byte[] webId, string gamerTag) {
            this.GetUserAuthorizationAsync(titleId, webId, gamerTag, null);
        }
        
        /// <remarks/>
        public void GetUserAuthorizationAsync(uint titleId, byte[] webId, string gamerTag, object userState) {
            if ((this.GetUserAuthorizationOperationCompleted == null)) {
                this.GetUserAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAuthorizationOperationCompleted);
            }
            this.InvokeAsync("GetUserAuthorization", new object[] {
                        titleId,
                        webId,
                        gamerTag}, this.GetUserAuthorizationOperationCompleted, userState);
        }
        
        private void OnGetUserAuthorizationOperationCompleted(object arg) {
            if ((this.GetUserAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAuthorizationCompleted(this, new GetUserAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/UserAccount/")]
    public partial class LinkInfo {
        
        private string gamerTagField;
        
        private bool ownerField;
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public bool Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/UserAccount/")]
    public partial class UserAuthorization {
        
        private bool acceptedTermsOfServiceField;
        
        private bool isVoiceBannedField;
        
        private bool isSuspendedField;
        
        private bool[] privilegesField;
        
        private uint[] servicesField;
        
        /// <remarks/>
        public bool acceptedTermsOfService {
            get {
                return this.acceptedTermsOfServiceField;
            }
            set {
                this.acceptedTermsOfServiceField = value;
            }
        }
        
        /// <remarks/>
        public bool isVoiceBanned {
            get {
                return this.isVoiceBannedField;
            }
            set {
                this.isVoiceBannedField = value;
            }
        }
        
        /// <remarks/>
        public bool isSuspended {
            get {
                return this.isSuspendedField;
            }
            set {
                this.isSuspendedField = value;
            }
        }
        
        /// <remarks/>
        public bool[] privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        public uint[] services {
            get {
                return this.servicesField;
            }
            set {
                this.servicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/UserAccount/")]
    public partial class UserAccountStatus {
        
        private bool acceptMSInfoField;
        
        private bool acceptPartnerInfoField;
        
        private bool forceNameChangeField;
        
        private bool voiceBannedField;
        
        private System.DateTime voiceBannedUntilField;
        
        private bool nicknameBannedField;
        
        private bool accountSuspendedField;
        
        private System.DateTime accountSuspendedUntilField;
        
        /// <remarks/>
        public bool acceptMSInfo {
            get {
                return this.acceptMSInfoField;
            }
            set {
                this.acceptMSInfoField = value;
            }
        }
        
        /// <remarks/>
        public bool acceptPartnerInfo {
            get {
                return this.acceptPartnerInfoField;
            }
            set {
                this.acceptPartnerInfoField = value;
            }
        }
        
        /// <remarks/>
        public bool forceNameChange {
            get {
                return this.forceNameChangeField;
            }
            set {
                this.forceNameChangeField = value;
            }
        }
        
        /// <remarks/>
        public bool voiceBanned {
            get {
                return this.voiceBannedField;
            }
            set {
                this.voiceBannedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime voiceBannedUntil {
            get {
                return this.voiceBannedUntilField;
            }
            set {
                this.voiceBannedUntilField = value;
            }
        }
        
        /// <remarks/>
        public bool nicknameBanned {
            get {
                return this.nicknameBannedField;
            }
            set {
                this.nicknameBannedField = value;
            }
        }
        
        /// <remarks/>
        public bool accountSuspended {
            get {
                return this.accountSuspendedField;
            }
            set {
                this.accountSuspendedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime accountSuspendedUntil {
            get {
                return this.accountSuspendedUntilField;
            }
            set {
                this.accountSuspendedUntilField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LinkUserCompletedEventHandler(object sender, LinkUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LinkedGamerTagsCompletedEventHandler(object sender, LinkedGamerTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkedGamerTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkedGamerTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LinkInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LinkInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserSettingsCompletedEventHandler(object sender, GetUserSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetInfoSharingCompletedEventHandler(object sender, SetInfoSharingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetInfoSharingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetInfoSharingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAccountStatusCompletedEventHandler(object sender, GetAccountStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserAccountStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserAccountStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserAuthorizationCompletedEventHandler(object sender, GetUserAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserAuthorization Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserAuthorization)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\Alerts.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Alerts {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AlertsSoap", Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class Alerts : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubscriberExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnsubscribeOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleContentAlertOperationCompleted;
        
        /// <remarks/>
        public Alerts() {
            this.Url = "http://xewbcaiis001:12000/alerts/alerts.asmx";
        }
        
        /// <remarks/>
        public event SubscriberExistsCompletedEventHandler SubscriberExistsCompleted;
        
        /// <remarks/>
        public event SubscribeCompletedEventHandler SubscribeCompleted;
        
        /// <remarks/>
        public event UnsubscribeCompletedEventHandler UnsubscribeCompleted;
        
        /// <remarks/>
        public event EnumerateSubscriptionsCompletedEventHandler EnumerateSubscriptionsCompleted;
        
        /// <remarks/>
        public event ScheduleContentAlertCompletedEventHandler ScheduleContentAlertCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/SubscriberExists", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubscriberExists([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId) {
            object[] results = this.Invoke("SubscriberExists", new object[] {
                        webId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubscriberExists(byte[] webId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubscriberExists", new object[] {
                        webId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSubscriberExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(byte[] webId) {
            this.SubscriberExistsAsync(webId, null);
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(byte[] webId, object userState) {
            if ((this.SubscriberExistsOperationCompleted == null)) {
                this.SubscriberExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscriberExistsOperationCompleted);
            }
            this.InvokeAsync("SubscriberExists", new object[] {
                        webId}, this.SubscriberExistsOperationCompleted, userState);
        }
        
        private void OnSubscriberExistsOperationCompleted(object arg) {
            if ((this.SubscriberExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscriberExistsCompleted(this, new SubscriberExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/Subscribe", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExistingSubscriptions Subscribe(bool initializeSubscriber, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, AddSubscriptions alerts) {
            object[] results = this.Invoke("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts});
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubscribe(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExistingSubscriptions EndSubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public void SubscribeAsync(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts) {
            this.SubscribeAsync(initializeSubscriber, webId, gamerTag, alerts, null);
        }
        
        /// <remarks/>
        public void SubscribeAsync(bool initializeSubscriber, byte[] webId, string gamerTag, AddSubscriptions alerts, object userState) {
            if ((this.SubscribeOperationCompleted == null)) {
                this.SubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscribeOperationCompleted);
            }
            this.InvokeAsync("Subscribe", new object[] {
                        initializeSubscriber,
                        webId,
                        gamerTag,
                        alerts}, this.SubscribeOperationCompleted, userState);
        }
        
        private void OnSubscribeOperationCompleted(object arg) {
            if ((this.SubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/Unsubscribe", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint Unsubscribe(bool deleteSubscriber, bool deleteAccountSubscriptions, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, ExistingSubscriptions alerts) {
            object[] results = this.Invoke("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnsubscribe(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndUnsubscribe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void UnsubscribeAsync(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts) {
            this.UnsubscribeAsync(deleteSubscriber, deleteAccountSubscriptions, webId, gamerTag, alerts, null);
        }
        
        /// <remarks/>
        public void UnsubscribeAsync(bool deleteSubscriber, bool deleteAccountSubscriptions, byte[] webId, string gamerTag, ExistingSubscriptions alerts, object userState) {
            if ((this.UnsubscribeOperationCompleted == null)) {
                this.UnsubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnsubscribeOperationCompleted);
            }
            this.InvokeAsync("Unsubscribe", new object[] {
                        deleteSubscriber,
                        deleteAccountSubscriptions,
                        webId,
                        gamerTag,
                        alerts}, this.UnsubscribeOperationCompleted, userState);
        }
        
        private void OnUnsubscribeOperationCompleted(object arg) {
            if ((this.UnsubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnsubscribeCompleted(this, new UnsubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/EnumerateSubscriptions", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExistingSubscriptions EnumerateSubscriptions([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag) {
            object[] results = this.Invoke("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag});
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateSubscriptions(byte[] webId, string gamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExistingSubscriptions EndEnumerateSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExistingSubscriptions)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateSubscriptionsAsync(byte[] webId, string gamerTag) {
            this.EnumerateSubscriptionsAsync(webId, gamerTag, null);
        }
        
        /// <remarks/>
        public void EnumerateSubscriptionsAsync(byte[] webId, string gamerTag, object userState) {
            if ((this.EnumerateSubscriptionsOperationCompleted == null)) {
                this.EnumerateSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("EnumerateSubscriptions", new object[] {
                        webId,
                        gamerTag}, this.EnumerateSubscriptionsOperationCompleted, userState);
        }
        
        private void OnEnumerateSubscriptionsOperationCompleted(object arg) {
            if ((this.EnumerateSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateSubscriptionsCompleted(this, new EnumerateSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Alerts/ScheduleContentAlert", RequestNamespace="http://websvc.xboxlive.com/Alerts/", ResponseNamespace="http://websvc.xboxlive.com/Alerts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint ScheduleContentAlert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime) {
            object[] results = this.Invoke("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginScheduleContentAlert(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndScheduleContentAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleContentAlertAsync(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime) {
            this.ScheduleContentAlertAsync(webId, type, locale, message, deliveryTime, null);
        }
        
        /// <remarks/>
        public void ScheduleContentAlertAsync(byte[] webId, uint type, string locale, string message, System.DateTime deliveryTime, object userState) {
            if ((this.ScheduleContentAlertOperationCompleted == null)) {
                this.ScheduleContentAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleContentAlertOperationCompleted);
            }
            this.InvokeAsync("ScheduleContentAlert", new object[] {
                        webId,
                        type,
                        locale,
                        message,
                        deliveryTime}, this.ScheduleContentAlertOperationCompleted, userState);
        }
        
        private void OnScheduleContentAlertOperationCompleted(object arg) {
            if ((this.ScheduleContentAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleContentAlertCompleted(this, new ScheduleContentAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class AddSubscriptions {
        
        private AlertSubscription[] liveSubscriptionsField;
        
        private AlertSubscription[] contentSubscriptionsField;
        
        /// <remarks/>
        public AlertSubscription[] liveSubscriptions {
            get {
                return this.liveSubscriptionsField;
            }
            set {
                this.liveSubscriptionsField = value;
            }
        }
        
        /// <remarks/>
        public AlertSubscription[] contentSubscriptions {
            get {
                return this.contentSubscriptionsField;
            }
            set {
                this.contentSubscriptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class AlertSubscription {
        
        private uint typeField;
        
        private string localeField;
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class ContentSubscription {
        
        private ulong subscriptionIDField;
        
        private uint typeField;
        
        private string localeField;
        
        /// <remarks/>
        public ulong subscriptionID {
            get {
                return this.subscriptionIDField;
            }
            set {
                this.subscriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class LiveSubscription {
        
        private ulong subscriptionIDField;
        
        private uint typeField;
        
        private string nameField;
        
        private string localeField;
        
        /// <remarks/>
        public ulong subscriptionID {
            get {
                return this.subscriptionIDField;
            }
            set {
                this.subscriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Alerts/")]
    public partial class ExistingSubscriptions {
        
        private LiveSubscription[] liveSubscriptionsField;
        
        private ContentSubscription[] contentSubscriptionsField;
        
        /// <remarks/>
        public LiveSubscription[] liveSubscriptions {
            get {
                return this.liveSubscriptionsField;
            }
            set {
                this.liveSubscriptionsField = value;
            }
        }
        
        /// <remarks/>
        public ContentSubscription[] contentSubscriptions {
            get {
                return this.contentSubscriptionsField;
            }
            set {
                this.contentSubscriptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubscriberExistsCompletedEventHandler(object sender, SubscriberExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscriberExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscriberExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubscribeCompletedEventHandler(object sender, SubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExistingSubscriptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExistingSubscriptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnsubscribeCompletedEventHandler(object sender, UnsubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnsubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnsubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnumerateSubscriptionsCompletedEventHandler(object sender, EnumerateSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExistingSubscriptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExistingSubscriptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ScheduleContentAlertCompletedEventHandler(object sender, ScheduleContentAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleContentAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleContentAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\obj\i386\ToolsMgmt.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ToolsManagement {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ToolsMgmtSoap", Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ToolsMgmt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetActionTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorkFilesReadyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback CleanupJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobLogOperationCompleted;
        
        /// <remarks/>
        public ToolsMgmt() {
            this.Url = "http://paulram002:12000/wctoolsmgmt/toolsmgmt.asmx";
        }
        
        /// <remarks/>
        public event GetActionTableCompletedEventHandler GetActionTableCompleted;
        
        /// <remarks/>
        public event BeginWorkCompletedEventHandler BeginWorkCompleted;
        
        /// <remarks/>
        public event WorkFilesReadyCompletedEventHandler WorkFilesReadyCompleted;
        
        /// <remarks/>
        public event GetWorkStatusCompletedEventHandler GetWorkStatusCompleted;
        
        /// <remarks/>
        public event CreateJobCompletedEventHandler CreateJobCompleted;
        
        /// <remarks/>
        public event AddActionCompletedEventHandler AddActionCompleted;
        
        /// <remarks/>
        public event ExecuteJobCompletedEventHandler ExecuteJobCompleted;
        
        /// <remarks/>
        public event CancelJobCompletedEventHandler CancelJobCompleted;
        
        /// <remarks/>
        public event GetJobStatusCompletedEventHandler GetJobStatusCompleted;
        
        /// <remarks/>
        public event GetActionStatusCompletedEventHandler GetActionStatusCompleted;
        
        /// <remarks/>
        public event GetActionResultCompletedEventHandler GetActionResultCompleted;
        
        /// <remarks/>
        public event CleanupJobCompletedEventHandler CleanupJobCompleted;
        
        /// <remarks/>
        public event GetJobLogCompletedEventHandler GetJobLogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionTable", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActionTable() {
            object[] results = this.Invoke("GetActionTable", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionTable(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionTable", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetActionTable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionTableAsync() {
            this.GetActionTableAsync(null);
        }
        
        /// <remarks/>
        public void GetActionTableAsync(object userState) {
            if ((this.GetActionTableOperationCompleted == null)) {
                this.GetActionTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionTableOperationCompleted);
            }
            this.InvokeAsync("GetActionTable", new object[0], this.GetActionTableOperationCompleted, userState);
        }
        
        private void OnGetActionTableOperationCompleted(object arg) {
            if ((this.GetActionTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionTableCompleted(this, new GetActionTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/BeginWork", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BeginWorkResult BeginWork(BeginWorkInfo bwi) {
            object[] results = this.Invoke("BeginWork", new object[] {
                        bwi});
            return ((BeginWorkResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBeginWork(BeginWorkInfo bwi, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BeginWork", new object[] {
                        bwi}, callback, asyncState);
        }
        
        /// <remarks/>
        public BeginWorkResult EndBeginWork(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BeginWorkResult)(results[0]));
        }
        
        /// <remarks/>
        public void BeginWorkAsync(BeginWorkInfo bwi) {
            this.BeginWorkAsync(bwi, null);
        }
        
        /// <remarks/>
        public void BeginWorkAsync(BeginWorkInfo bwi, object userState) {
            if ((this.BeginWorkOperationCompleted == null)) {
                this.BeginWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginWorkOperationCompleted);
            }
            this.InvokeAsync("BeginWork", new object[] {
                        bwi}, this.BeginWorkOperationCompleted, userState);
        }
        
        private void OnBeginWorkOperationCompleted(object arg) {
            if ((this.BeginWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginWorkCompleted(this, new BeginWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/WorkFilesReady", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkFilesReadyResult WorkFilesReady(WorkFilesReadyInfo wfri) {
            object[] results = this.Invoke("WorkFilesReady", new object[] {
                        wfri});
            return ((WorkFilesReadyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWorkFilesReady(WorkFilesReadyInfo wfri, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WorkFilesReady", new object[] {
                        wfri}, callback, asyncState);
        }
        
        /// <remarks/>
        public WorkFilesReadyResult EndWorkFilesReady(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WorkFilesReadyResult)(results[0]));
        }
        
        /// <remarks/>
        public void WorkFilesReadyAsync(WorkFilesReadyInfo wfri) {
            this.WorkFilesReadyAsync(wfri, null);
        }
        
        /// <remarks/>
        public void WorkFilesReadyAsync(WorkFilesReadyInfo wfri, object userState) {
            if ((this.WorkFilesReadyOperationCompleted == null)) {
                this.WorkFilesReadyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkFilesReadyOperationCompleted);
            }
            this.InvokeAsync("WorkFilesReady", new object[] {
                        wfri}, this.WorkFilesReadyOperationCompleted, userState);
        }
        
        private void OnWorkFilesReadyOperationCompleted(object arg) {
            if ((this.WorkFilesReadyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorkFilesReadyCompleted(this, new WorkFilesReadyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetWorkStatus", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetWorkStatusResult GetWorkStatus(GetWorkStatusInfo gwsi) {
            object[] results = this.Invoke("GetWorkStatus", new object[] {
                        gwsi});
            return ((GetWorkStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWorkStatus(GetWorkStatusInfo gwsi, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWorkStatus", new object[] {
                        gwsi}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetWorkStatusResult EndGetWorkStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetWorkStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkStatusAsync(GetWorkStatusInfo gwsi) {
            this.GetWorkStatusAsync(gwsi, null);
        }
        
        /// <remarks/>
        public void GetWorkStatusAsync(GetWorkStatusInfo gwsi, object userState) {
            if ((this.GetWorkStatusOperationCompleted == null)) {
                this.GetWorkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkStatusOperationCompleted);
            }
            this.InvokeAsync("GetWorkStatus", new object[] {
                        gwsi}, this.GetWorkStatusOperationCompleted, userState);
        }
        
        private void OnGetWorkStatusOperationCompleted(object arg) {
            if ((this.GetWorkStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkStatusCompleted(this, new GetWorkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CreateJob", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateJob(string description, out JobInfo jobInfo) {
            object[] results = this.Invoke("CreateJob", new object[] {
                        description});
            jobInfo = ((JobInfo)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateJob(string description, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateJob", new object[] {
                        description}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndCreateJob(System.IAsyncResult asyncResult, out JobInfo jobInfo) {
            object[] results = this.EndInvoke(asyncResult);
            jobInfo = ((JobInfo)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateJobAsync(string description) {
            this.CreateJobAsync(description, null);
        }
        
        /// <remarks/>
        public void CreateJobAsync(string description, object userState) {
            if ((this.CreateJobOperationCompleted == null)) {
                this.CreateJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateJobOperationCompleted);
            }
            this.InvokeAsync("CreateJob", new object[] {
                        description}, this.CreateJobOperationCompleted, userState);
        }
        
        private void OnCreateJobOperationCompleted(object arg) {
            if ((this.CreateJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateJobCompleted(this, new CreateJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/AddAction", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAction(ActionInfo actionInfo) {
            object[] results = this.Invoke("AddAction", new object[] {
                        actionInfo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddAction(ActionInfo actionInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddAction", new object[] {
                        actionInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddAction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddActionAsync(ActionInfo actionInfo) {
            this.AddActionAsync(actionInfo, null);
        }
        
        /// <remarks/>
        public void AddActionAsync(ActionInfo actionInfo, object userState) {
            if ((this.AddActionOperationCompleted == null)) {
                this.AddActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActionOperationCompleted);
            }
            this.InvokeAsync("AddAction", new object[] {
                        actionInfo}, this.AddActionOperationCompleted, userState);
        }
        
        private void OnAddActionOperationCompleted(object arg) {
            if ((this.AddActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActionCompleted(this, new AddActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/ExecuteJob", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteJob(long jobId) {
            object[] results = this.Invoke("ExecuteJob", new object[] {
                        jobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteJob(long jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteJob", new object[] {
                        jobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndExecuteJob(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteJobAsync(long jobId) {
            this.ExecuteJobAsync(jobId, null);
        }
        
        /// <remarks/>
        public void ExecuteJobAsync(long jobId, object userState) {
            if ((this.ExecuteJobOperationCompleted == null)) {
                this.ExecuteJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteJobOperationCompleted);
            }
            this.InvokeAsync("ExecuteJob", new object[] {
                        jobId}, this.ExecuteJobOperationCompleted, userState);
        }
        
        private void OnExecuteJobOperationCompleted(object arg) {
            if ((this.ExecuteJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteJobCompleted(this, new ExecuteJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CancelJob", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelJob(long jobId) {
            this.Invoke("CancelJob", new object[] {
                        jobId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelJob(long jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelJob", new object[] {
                        jobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCancelJob(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CancelJobAsync(long jobId) {
            this.CancelJobAsync(jobId, null);
        }
        
        /// <remarks/>
        public void CancelJobAsync(long jobId, object userState) {
            if ((this.CancelJobOperationCompleted == null)) {
                this.CancelJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelJobOperationCompleted);
            }
            this.InvokeAsync("CancelJob", new object[] {
                        jobId}, this.CancelJobOperationCompleted, userState);
        }
        
        private void OnCancelJobOperationCompleted(object arg) {
            if ((this.CancelJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetJobStatus", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobState GetJobStatus(long jobId) {
            object[] results = this.Invoke("GetJobStatus", new object[] {
                        jobId});
            return ((JobState)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetJobStatus(long jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetJobStatus", new object[] {
                        jobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public JobState EndGetJobStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((JobState)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobStatusAsync(long jobId) {
            this.GetJobStatusAsync(jobId, null);
        }
        
        /// <remarks/>
        public void GetJobStatusAsync(long jobId, object userState) {
            if ((this.GetJobStatusOperationCompleted == null)) {
                this.GetJobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobStatusOperationCompleted);
            }
            this.InvokeAsync("GetJobStatus", new object[] {
                        jobId}, this.GetJobStatusOperationCompleted, userState);
        }
        
        private void OnGetJobStatusOperationCompleted(object arg) {
            if ((this.GetJobStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobStatusCompleted(this, new GetJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionStatus", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobState GetActionStatus(long jobId, int rank) {
            object[] results = this.Invoke("GetActionStatus", new object[] {
                        jobId,
                        rank});
            return ((JobState)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionStatus(long jobId, int rank, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionStatus", new object[] {
                        jobId,
                        rank}, callback, asyncState);
        }
        
        /// <remarks/>
        public JobState EndGetActionStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((JobState)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionStatusAsync(long jobId, int rank) {
            this.GetActionStatusAsync(jobId, rank, null);
        }
        
        /// <remarks/>
        public void GetActionStatusAsync(long jobId, int rank, object userState) {
            if ((this.GetActionStatusOperationCompleted == null)) {
                this.GetActionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionStatusOperationCompleted);
            }
            this.InvokeAsync("GetActionStatus", new object[] {
                        jobId,
                        rank}, this.GetActionStatusOperationCompleted, userState);
        }
        
        private void OnGetActionStatusOperationCompleted(object arg) {
            if ((this.GetActionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionStatusCompleted(this, new GetActionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionResult", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ActionResult GetActionResult(long jobId, int rank) {
            object[] results = this.Invoke("GetActionResult", new object[] {
                        jobId,
                        rank});
            return ((ActionResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionResult(long jobId, int rank, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionResult", new object[] {
                        jobId,
                        rank}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionResult EndGetActionResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionResultAsync(long jobId, int rank) {
            this.GetActionResultAsync(jobId, rank, null);
        }
        
        /// <remarks/>
        public void GetActionResultAsync(long jobId, int rank, object userState) {
            if ((this.GetActionResultOperationCompleted == null)) {
                this.GetActionResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionResultOperationCompleted);
            }
            this.InvokeAsync("GetActionResult", new object[] {
                        jobId,
                        rank}, this.GetActionResultOperationCompleted, userState);
        }
        
        private void OnGetActionResultOperationCompleted(object arg) {
            if ((this.GetActionResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionResultCompleted(this, new GetActionResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CleanupJob", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CleanupJob(ulong jobId) {
            object[] results = this.Invoke("CleanupJob", new object[] {
                        jobId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCleanupJob(ulong jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CleanupJob", new object[] {
                        jobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCleanupJob(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CleanupJobAsync(ulong jobId) {
            this.CleanupJobAsync(jobId, null);
        }
        
        /// <remarks/>
        public void CleanupJobAsync(ulong jobId, object userState) {
            if ((this.CleanupJobOperationCompleted == null)) {
                this.CleanupJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanupJobOperationCompleted);
            }
            this.InvokeAsync("CleanupJob", new object[] {
                        jobId}, this.CleanupJobOperationCompleted, userState);
        }
        
        private void OnCleanupJobOperationCompleted(object arg) {
            if ((this.CleanupJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanupJobCompleted(this, new CleanupJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetJobLog", RequestNamespace="http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace="http://websvc.xboxlive.com/ToolsMgmt/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJobLog(int jobId, out JobLogEntry[] jobLog) {
            object[] results = this.Invoke("GetJobLog", new object[] {
                        jobId});
            jobLog = ((JobLogEntry[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetJobLog(int jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetJobLog", new object[] {
                        jobId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetJobLog(System.IAsyncResult asyncResult, out JobLogEntry[] jobLog) {
            object[] results = this.EndInvoke(asyncResult);
            jobLog = ((JobLogEntry[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobLogAsync(int jobId) {
            this.GetJobLogAsync(jobId, null);
        }
        
        /// <remarks/>
        public void GetJobLogAsync(int jobId, object userState) {
            if ((this.GetJobLogOperationCompleted == null)) {
                this.GetJobLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobLogOperationCompleted);
            }
            this.InvokeAsync("GetJobLog", new object[] {
                        jobId}, this.GetJobLogOperationCompleted, userState);
        }
        
        private void OnGetJobLogOperationCompleted(object arg) {
            if ((this.GetJobLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobLogCompleted(this, new GetJobLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class BeginWorkInfo {
        
        private uint workTypeField;
        
        private string titleIdField;
        
        /// <remarks/>
        public uint workType {
            get {
                return this.workTypeField;
            }
            set {
                this.workTypeField = value;
            }
        }
        
        /// <remarks/>
        public string titleId {
            get {
                return this.titleIdField;
            }
            set {
                this.titleIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class JobLogEntry {
        
        private System.DateTime loggedField;
        
        private int levelField;
        
        private string logField;
        
        /// <remarks/>
        public System.DateTime logged {
            get {
                return this.loggedField;
            }
            set {
                this.loggedField = value;
            }
        }
        
        /// <remarks/>
        public int level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        public string log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ActionResult {
        
        private JobState stateField;
        
        private int returnCodeField;
        
        private string consoleOutputField;
        
        /// <remarks/>
        public JobState state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int returnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        public string consoleOutput {
            get {
                return this.consoleOutputField;
            }
            set {
                this.consoleOutputField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public enum JobState {
        
        /// <remarks/>
        Created,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Download,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Canceled,
        
        /// <remarks/>
        Complete,
        
        /// <remarks/>
        Failed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class Parameter {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ActionInfo {
        
        private long jobIdField;
        
        private string toolFileNameField;
        
        private Parameter[] parametersField;
        
        private string[] filesField;
        
        /// <remarks/>
        public long jobId {
            get {
                return this.jobIdField;
            }
            set {
                this.jobIdField = value;
            }
        }
        
        /// <remarks/>
        public string toolFileName {
            get {
                return this.toolFileNameField;
            }
            set {
                this.toolFileNameField = value;
            }
        }
        
        /// <remarks/>
        public Parameter[] parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        public string[] files {
            get {
                return this.filesField;
            }
            set {
                this.filesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class JobInfo {
        
        private long jobIdField;
        
        private ulong spaceAvailableField;
        
        private string uploadPathField;
        
        /// <remarks/>
        public long jobId {
            get {
                return this.jobIdField;
            }
            set {
                this.jobIdField = value;
            }
        }
        
        /// <remarks/>
        public ulong spaceAvailable {
            get {
                return this.spaceAvailableField;
            }
            set {
                this.spaceAvailableField = value;
            }
        }
        
        /// <remarks/>
        public string uploadPath {
            get {
                return this.uploadPathField;
            }
            set {
                this.uploadPathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class GetWorkStatusResult {
        
        private bool workCompleteField;
        
        private int returnCodeField;
        
        private string consoleOutputField;
        
        /// <remarks/>
        public bool workComplete {
            get {
                return this.workCompleteField;
            }
            set {
                this.workCompleteField = value;
            }
        }
        
        /// <remarks/>
        public int returnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        public string consoleOutput {
            get {
                return this.consoleOutputField;
            }
            set {
                this.consoleOutputField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class GetWorkStatusInfo {
        
        private ulong workIdField;
        
        /// <remarks/>
        public ulong workId {
            get {
                return this.workIdField;
            }
            set {
                this.workIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class WorkFilesReadyResult {
        
        private bool successField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class WorkFilesReadyInfo {
        
        private ulong workIdField;
        
        private string relativePathField;
        
        /// <remarks/>
        public ulong workId {
            get {
                return this.workIdField;
            }
            set {
                this.workIdField = value;
            }
        }
        
        /// <remarks/>
        public string relativePath {
            get {
                return this.relativePathField;
            }
            set {
                this.relativePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class BeginWorkResult {
        
        private ulong workIdField;
        
        private ulong spaceAvailableField;
        
        /// <remarks/>
        public ulong workId {
            get {
                return this.workIdField;
            }
            set {
                this.workIdField = value;
            }
        }
        
        /// <remarks/>
        public ulong spaceAvailable {
            get {
                return this.spaceAvailableField;
            }
            set {
                this.spaceAvailableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionTableCompletedEventHandler(object sender, GetActionTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BeginWorkCompletedEventHandler(object sender, BeginWorkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BeginWorkResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BeginWorkResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WorkFilesReadyCompletedEventHandler(object sender, WorkFilesReadyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorkFilesReadyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorkFilesReadyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkFilesReadyResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkFilesReadyResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWorkStatusCompletedEventHandler(object sender, GetWorkStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetWorkStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetWorkStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateJobCompletedEventHandler(object sender, CreateJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public JobInfo jobInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobInfo)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddActionCompletedEventHandler(object sender, AddActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ExecuteJobCompletedEventHandler(object sender, ExecuteJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetJobStatusCompletedEventHandler(object sender, GetJobStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionStatusCompletedEventHandler(object sender, GetActionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionResultCompletedEventHandler(object sender, GetActionResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActionResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActionResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CleanupJobCompletedEventHandler(object sender, CleanupJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CleanupJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CleanupJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetJobLogCompletedEventHandler(object sender, GetJobLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public JobLogEntry[] jobLog {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobLogEntry[])(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\GeneralInfo.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace GeneralInfo {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GeneralInfoSoap", Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class GeneralInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTitleListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkedGamerTagsOperationCompleted;
        
        /// <remarks/>
        public GeneralInfo() {
            this.Url = "http://xewbcaiis001:12000/generalinfo/generalinfo.asmx";
        }
        
        /// <remarks/>
        public event GetTitleListCompletedEventHandler GetTitleListCompleted;
        
        /// <remarks/>
        public event LinkedGamerTagsCompletedEventHandler LinkedGamerTagsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/GeneralInfo/GetTitleList", RequestNamespace="http://websvc.xboxlive.com/GeneralInfo/", ResponseNamespace="http://websvc.xboxlive.com/GeneralInfo/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TitlePrivilegeInfo[] GetTitleList(out uint ValidSeconds) {
            object[] results = this.Invoke("GetTitleList", new object[0]);
            ValidSeconds = ((uint)(results[1]));
            return ((TitlePrivilegeInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public TitlePrivilegeInfo[] EndGetTitleList(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((TitlePrivilegeInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleListAsync() {
            this.GetTitleListAsync(null);
        }
        
        /// <remarks/>
        public void GetTitleListAsync(object userState) {
            if ((this.GetTitleListOperationCompleted == null)) {
                this.GetTitleListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleListOperationCompleted);
            }
            this.InvokeAsync("GetTitleList", new object[0], this.GetTitleListOperationCompleted, userState);
        }
        
        private void OnGetTitleListOperationCompleted(object arg) {
            if ((this.GetTitleListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleListCompleted(this, new GetTitleListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/GeneralInfo/LinkedGamerTags", RequestNamespace="http://websvc.xboxlive.com/GeneralInfo/", ResponseNamespace="http://websvc.xboxlive.com/GeneralInfo/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LinkInfo[] LinkedGamerTags([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID) {
            object[] results = this.Invoke("LinkedGamerTags", new object[] {
                        WebID});
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLinkedGamerTags(byte[] WebID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LinkedGamerTags", new object[] {
                        WebID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LinkInfo[] EndLinkedGamerTags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LinkInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID) {
            this.LinkedGamerTagsAsync(WebID, null);
        }
        
        /// <remarks/>
        public void LinkedGamerTagsAsync(byte[] WebID, object userState) {
            if ((this.LinkedGamerTagsOperationCompleted == null)) {
                this.LinkedGamerTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkedGamerTagsOperationCompleted);
            }
            this.InvokeAsync("LinkedGamerTags", new object[] {
                        WebID}, this.LinkedGamerTagsOperationCompleted, userState);
        }
        
        private void OnLinkedGamerTagsOperationCompleted(object arg) {
            if ((this.LinkedGamerTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkedGamerTagsCompleted(this, new LinkedGamerTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class TitlePrivilegeInfo {
        
        private uint titleIDField;
        
        private TitlePrivilege privilegesField;
        
        private ESRBRating ratingField;
        
        private string defaultLocaleField;
        
        private LocalizedDisplayName[] localizedNameField;
        
        /// <remarks/>
        public uint TitleID {
            get {
                return this.titleIDField;
            }
            set {
                this.titleIDField = value;
            }
        }
        
        /// <remarks/>
        public TitlePrivilege Privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        public ESRBRating Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultLocale {
            get {
                return this.defaultLocaleField;
            }
            set {
                this.defaultLocaleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LocalizedDisplayName[] LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                this.localizedNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public enum TitlePrivilege {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        ReadOnly,
        
        /// <remarks/>
        ReadWrite,
        
        /// <remarks/>
        FullControl,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public enum ESRBRating {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        ADULT,
        
        /// <remarks/>
        MATURE,
        
        /// <remarks/>
        TEEN,
        
        /// <remarks/>
        EVERYONE,
        
        /// <remarks/>
        KIDS_TO_ADULTS,
        
        /// <remarks/>
        EARLY_CHILDHOOD,
        
        /// <remarks/>
        UNSPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class LocalizedDisplayName {
        
        private string localeField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
    public partial class LinkInfo {
        
        private string gamerTagField;
        
        private bool ownerField;
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public bool Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTitleListCompletedEventHandler(object sender, GetTitleListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TitlePrivilegeInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TitlePrivilegeInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LinkedGamerTagsCompletedEventHandler(object sender, LinkedGamerTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkedGamerTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkedGamerTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LinkInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LinkInfo[])(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\Signature.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Signature {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SignatureSoap", Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class Signature : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VerifySignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferUserLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlacklistDigestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBlacklistDigestOperationCompleted;
        
        /// <remarks/>
        public Signature() {
            this.Url = "http://tobiasb-xblobd:12000/Signature/Signature.asmx";
        }
        
        /// <remarks/>
        public event VerifySignatureCompletedEventHandler VerifySignatureCompleted;
        
        /// <remarks/>
        public event CreateSignatureCompletedEventHandler CreateSignatureCompleted;
        
        /// <remarks/>
        public event TransferUserLicensesCompletedEventHandler TransferUserLicensesCompleted;
        
        /// <remarks/>
        public event BlacklistDigestCompletedEventHandler BlacklistDigestCompleted;
        
        /// <remarks/>
        public event UnBlacklistDigestCompletedEventHandler UnBlacklistDigestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/VerifySignature", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint[] VerifySignature(XSigVerifySignatureRequest[] sigData) {
            object[] results = this.Invoke("VerifySignature", new object[] {
                        sigData});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifySignature(XSigVerifySignatureRequest[] sigData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifySignature", new object[] {
                        sigData}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint[] EndVerifySignature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignatureAsync(XSigVerifySignatureRequest[] sigData) {
            this.VerifySignatureAsync(sigData, null);
        }
        
        /// <remarks/>
        public void VerifySignatureAsync(XSigVerifySignatureRequest[] sigData, object userState) {
            if ((this.VerifySignatureOperationCompleted == null)) {
                this.VerifySignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignatureOperationCompleted);
            }
            this.InvokeAsync("VerifySignature", new object[] {
                        sigData}, this.VerifySignatureOperationCompleted, userState);
        }
        
        private void OnVerifySignatureOperationCompleted(object arg) {
            if ((this.VerifySignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignatureCompleted(this, new VerifySignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/CreateSignature", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public XSigCreateSignatureResponse[] CreateSignature(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData) {
            object[] results = this.Invoke("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData});
            return ((XSigCreateSignatureResponse[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSignature(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData}, callback, asyncState);
        }
        
        /// <remarks/>
        public XSigCreateSignatureResponse[] EndCreateSignature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((XSigCreateSignatureResponse[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateSignatureAsync(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData) {
            this.CreateSignatureAsync(titleID, adminId, sigData, null);
        }
        
        /// <remarks/>
        public void CreateSignatureAsync(uint titleID, string adminId, XSigCreateSignatureRequest[] sigData, object userState) {
            if ((this.CreateSignatureOperationCompleted == null)) {
                this.CreateSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSignatureOperationCompleted);
            }
            this.InvokeAsync("CreateSignature", new object[] {
                        titleID,
                        adminId,
                        sigData}, this.CreateSignatureOperationCompleted, userState);
        }
        
        private void OnCreateSignatureOperationCompleted(object arg) {
            if ((this.CreateSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSignatureCompleted(this, new CreateSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/TransferUserLicenses", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TransferUserLicenses(ulong xuid, string consoleId) {
            this.Invoke("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTransferUserLicenses(ulong xuid, string consoleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTransferUserLicenses(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TransferUserLicensesAsync(ulong xuid, string consoleId) {
            this.TransferUserLicensesAsync(xuid, consoleId, null);
        }
        
        /// <remarks/>
        public void TransferUserLicensesAsync(ulong xuid, string consoleId, object userState) {
            if ((this.TransferUserLicensesOperationCompleted == null)) {
                this.TransferUserLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferUserLicensesOperationCompleted);
            }
            this.InvokeAsync("TransferUserLicenses", new object[] {
                        xuid,
                        consoleId}, this.TransferUserLicensesOperationCompleted, userState);
        }
        
        private void OnTransferUserLicensesOperationCompleted(object arg) {
            if ((this.TransferUserLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferUserLicensesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/BlacklistDigest", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BlacklistDigest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] digest, byte deliveryType, string revocationReason) {
            this.Invoke("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBlacklistDigest(byte[] digest, byte deliveryType, string revocationReason, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndBlacklistDigest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void BlacklistDigestAsync(byte[] digest, byte deliveryType, string revocationReason) {
            this.BlacklistDigestAsync(digest, deliveryType, revocationReason, null);
        }
        
        /// <remarks/>
        public void BlacklistDigestAsync(byte[] digest, byte deliveryType, string revocationReason, object userState) {
            if ((this.BlacklistDigestOperationCompleted == null)) {
                this.BlacklistDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlacklistDigestOperationCompleted);
            }
            this.InvokeAsync("BlacklistDigest", new object[] {
                        digest,
                        deliveryType,
                        revocationReason}, this.BlacklistDigestOperationCompleted, userState);
        }
        
        private void OnBlacklistDigestOperationCompleted(object arg) {
            if ((this.BlacklistDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlacklistDigestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Signature/UnBlacklistDigest", RequestNamespace="http://websvc.xboxlive.com/Signature/", ResponseNamespace="http://websvc.xboxlive.com/Signature/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnBlacklistDigest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] digest) {
            this.Invoke("UnBlacklistDigest", new object[] {
                        digest});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnBlacklistDigest(byte[] digest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnBlacklistDigest", new object[] {
                        digest}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnBlacklistDigest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnBlacklistDigestAsync(byte[] digest) {
            this.UnBlacklistDigestAsync(digest, null);
        }
        
        /// <remarks/>
        public void UnBlacklistDigestAsync(byte[] digest, object userState) {
            if ((this.UnBlacklistDigestOperationCompleted == null)) {
                this.UnBlacklistDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBlacklistDigestOperationCompleted);
            }
            this.InvokeAsync("UnBlacklistDigest", new object[] {
                        digest}, this.UnBlacklistDigestOperationCompleted, userState);
        }
        
        private void OnUnBlacklistDigestOperationCompleted(object arg) {
            if ((this.UnBlacklistDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBlacklistDigestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigVerifySignatureRequest {
        
        private byte[] _digestField;
        
        private byte[] _signatureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _digest {
            get {
                return this._digestField;
            }
            set {
                this._digestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _signature {
            get {
                return this._signatureField;
            }
            set {
                this._signatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigCreateSignatureResponse {
        
        private uint _hresultField;
        
        private byte[] _signatureField;
        
        /// <remarks/>
        public uint _hresult {
            get {
                return this._hresultField;
            }
            set {
                this._hresultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _signature {
            get {
                return this._signatureField;
            }
            set {
                this._signatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Signature/")]
    public partial class XSigCreateSignatureRequest {
        
        private byte[] _digestField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] _digest {
            get {
                return this._digestField;
            }
            set {
                this._digestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void VerifySignatureCompletedEventHandler(object sender, VerifySignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateSignatureCompletedEventHandler(object sender, CreateSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public XSigCreateSignatureResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((XSigCreateSignatureResponse[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TransferUserLicensesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BlacklistDigestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnBlacklistDigestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\Presence.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Presence {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PresenceSoap", Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class Presence : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetGamertagsFromXUIDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXUIDSFromGamertagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPresenceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentPlayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendsOperationCompleted;
        
        /// <remarks/>
        public Presence() {
            this.Url = "http://xewbcaiis001:12000/Presence/Presence.asmx";
        }
        
        /// <remarks/>
        public event GetGamertagsFromXUIDSCompletedEventHandler GetGamertagsFromXUIDSCompleted;
        
        /// <remarks/>
        public event GetXUIDSFromGamertagsCompletedEventHandler GetXUIDSFromGamertagsCompleted;
        
        /// <remarks/>
        public event GetPresenceInfoCompletedEventHandler GetPresenceInfoCompleted;
        
        /// <remarks/>
        public event GetFriendsExCompletedEventHandler GetFriendsExCompleted;
        
        /// <remarks/>
        public event GetRecentPlayersCompletedEventHandler GetRecentPlayersCompleted;
        
        /// <remarks/>
        public event GetFriendsCompletedEventHandler GetFriendsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetGamertagsFromXUIDS", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetGamertagsFromXUIDS(ulong[] XUIDS) {
            object[] results = this.Invoke("GetGamertagsFromXUIDS", new object[] {
                        XUIDS});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGamertagsFromXUIDS(ulong[] XUIDS, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGamertagsFromXUIDS", new object[] {
                        XUIDS}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetGamertagsFromXUIDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGamertagsFromXUIDSAsync(ulong[] XUIDS) {
            this.GetGamertagsFromXUIDSAsync(XUIDS, null);
        }
        
        /// <remarks/>
        public void GetGamertagsFromXUIDSAsync(ulong[] XUIDS, object userState) {
            if ((this.GetGamertagsFromXUIDSOperationCompleted == null)) {
                this.GetGamertagsFromXUIDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGamertagsFromXUIDSOperationCompleted);
            }
            this.InvokeAsync("GetGamertagsFromXUIDS", new object[] {
                        XUIDS}, this.GetGamertagsFromXUIDSOperationCompleted, userState);
        }
        
        private void OnGetGamertagsFromXUIDSOperationCompleted(object arg) {
            if ((this.GetGamertagsFromXUIDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGamertagsFromXUIDSCompleted(this, new GetGamertagsFromXUIDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetXUIDSFromGamertags", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong[] GetXUIDSFromGamertags(string[] gamertags) {
            object[] results = this.Invoke("GetXUIDSFromGamertags", new object[] {
                        gamertags});
            return ((ulong[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetXUIDSFromGamertags(string[] gamertags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetXUIDSFromGamertags", new object[] {
                        gamertags}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong[] EndGetXUIDSFromGamertags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong[])(results[0]));
        }
        
        /// <remarks/>
        public void GetXUIDSFromGamertagsAsync(string[] gamertags) {
            this.GetXUIDSFromGamertagsAsync(gamertags, null);
        }
        
        /// <remarks/>
        public void GetXUIDSFromGamertagsAsync(string[] gamertags, object userState) {
            if ((this.GetXUIDSFromGamertagsOperationCompleted == null)) {
                this.GetXUIDSFromGamertagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXUIDSFromGamertagsOperationCompleted);
            }
            this.InvokeAsync("GetXUIDSFromGamertags", new object[] {
                        gamertags}, this.GetXUIDSFromGamertagsOperationCompleted, userState);
        }
        
        private void OnGetXUIDSFromGamertagsOperationCompleted(object arg) {
            if ((this.GetXUIDSFromGamertagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXUIDSFromGamertagsCompleted(this, new GetXUIDSFromGamertagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetPresenceInfo", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PresenceInfo GetPresenceInfo(ulong targetXUID, ulong senderXUID, ushort senderLocale, out uint ValidSeconds) {
            object[] results = this.Invoke("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale});
            ValidSeconds = ((uint)(results[1]));
            return ((PresenceInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPresenceInfo(ulong targetXUID, ulong senderXUID, ushort senderLocale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale}, callback, asyncState);
        }
        
        /// <remarks/>
        public PresenceInfo EndGetPresenceInfo(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((PresenceInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPresenceInfoAsync(ulong targetXUID, ulong senderXUID, ushort senderLocale) {
            this.GetPresenceInfoAsync(targetXUID, senderXUID, senderLocale, null);
        }
        
        /// <remarks/>
        public void GetPresenceInfoAsync(ulong targetXUID, ulong senderXUID, ushort senderLocale, object userState) {
            if ((this.GetPresenceInfoOperationCompleted == null)) {
                this.GetPresenceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresenceInfoOperationCompleted);
            }
            this.InvokeAsync("GetPresenceInfo", new object[] {
                        targetXUID,
                        senderXUID,
                        senderLocale}, this.GetPresenceInfoOperationCompleted, userState);
        }
        
        private void OnGetPresenceInfoOperationCompleted(object arg) {
            if ((this.GetPresenceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPresenceInfoCompleted(this, new GetPresenceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetFriendsEx", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FriendEx[] GetFriendsEx(ulong XUID, ushort locale, out uint ValidSeconds) {
            object[] results = this.Invoke("GetFriendsEx", new object[] {
                        XUID,
                        locale});
            ValidSeconds = ((uint)(results[1]));
            return ((FriendEx[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFriendsEx(ulong XUID, ushort locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFriendsEx", new object[] {
                        XUID,
                        locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public FriendEx[] EndGetFriendsEx(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((FriendEx[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendsExAsync(ulong XUID, ushort locale) {
            this.GetFriendsExAsync(XUID, locale, null);
        }
        
        /// <remarks/>
        public void GetFriendsExAsync(ulong XUID, ushort locale, object userState) {
            if ((this.GetFriendsExOperationCompleted == null)) {
                this.GetFriendsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendsExOperationCompleted);
            }
            this.InvokeAsync("GetFriendsEx", new object[] {
                        XUID,
                        locale}, this.GetFriendsExOperationCompleted, userState);
        }
        
        private void OnGetFriendsExOperationCompleted(object arg) {
            if ((this.GetFriendsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendsExCompleted(this, new GetFriendsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetRecentPlayers", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecentPlayer[] GetRecentPlayers(ulong xuid, ushort maxRequest, ushort locale) {
            object[] results = this.Invoke("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale});
            return ((RecentPlayer[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecentPlayers(ulong xuid, ushort maxRequest, ushort locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public RecentPlayer[] EndGetRecentPlayers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RecentPlayer[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentPlayersAsync(ulong xuid, ushort maxRequest, ushort locale) {
            this.GetRecentPlayersAsync(xuid, maxRequest, locale, null);
        }
        
        /// <remarks/>
        public void GetRecentPlayersAsync(ulong xuid, ushort maxRequest, ushort locale, object userState) {
            if ((this.GetRecentPlayersOperationCompleted == null)) {
                this.GetRecentPlayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentPlayersOperationCompleted);
            }
            this.InvokeAsync("GetRecentPlayers", new object[] {
                        xuid,
                        maxRequest,
                        locale}, this.GetRecentPlayersOperationCompleted, userState);
        }
        
        private void OnGetRecentPlayersOperationCompleted(object arg) {
            if ((this.GetRecentPlayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentPlayersCompleted(this, new GetRecentPlayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Presence/GetFriends", RequestNamespace="http://websvc.xboxlive.com/Presence/", ResponseNamespace="http://websvc.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FriendsInfo GetFriends([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] WebID, string GamerTag, out uint ValidSeconds) {
            object[] results = this.Invoke("GetFriends", new object[] {
                        WebID,
                        GamerTag});
            ValidSeconds = ((uint)(results[1]));
            return ((FriendsInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFriends(byte[] WebID, string GamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFriends", new object[] {
                        WebID,
                        GamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public FriendsInfo EndGetFriends(System.IAsyncResult asyncResult, out uint ValidSeconds) {
            object[] results = this.EndInvoke(asyncResult);
            ValidSeconds = ((uint)(results[1]));
            return ((FriendsInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendsAsync(byte[] WebID, string GamerTag) {
            this.GetFriendsAsync(WebID, GamerTag, null);
        }
        
        /// <remarks/>
        public void GetFriendsAsync(byte[] WebID, string GamerTag, object userState) {
            if ((this.GetFriendsOperationCompleted == null)) {
                this.GetFriendsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendsOperationCompleted);
            }
            this.InvokeAsync("GetFriends", new object[] {
                        WebID,
                        GamerTag}, this.GetFriendsOperationCompleted, userState);
        }
        
        private void OnGetFriendsOperationCompleted(object arg) {
            if ((this.GetFriendsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendsCompleted(this, new GetFriendsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class PresenceInfo {
        
        private ulong xUIDField;
        
        private string gamerTagField;
        
        private uint onlineStateField;
        
        private uint lastSeenTitleField;
        
        private uint minutesSinceStateChangeField;
        
        private string richPresenceStringField;
        
        /// <remarks/>
        public ulong XUID {
            get {
                return this.xUIDField;
            }
            set {
                this.xUIDField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public uint OnlineState {
            get {
                return this.onlineStateField;
            }
            set {
                this.onlineStateField = value;
            }
        }
        
        /// <remarks/>
        public uint LastSeenTitle {
            get {
                return this.lastSeenTitleField;
            }
            set {
                this.lastSeenTitleField = value;
            }
        }
        
        /// <remarks/>
        public uint MinutesSinceStateChange {
            get {
                return this.minutesSinceStateChangeField;
            }
            set {
                this.minutesSinceStateChangeField = value;
            }
        }
        
        /// <remarks/>
        public string RichPresenceString {
            get {
                return this.richPresenceStringField;
            }
            set {
                this.richPresenceStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class OfflineFriend {
        
        private string gField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class OnlineFriend {
        
        private string gField;
        
        private uint tField;
        
        private uint sField;
        
        /// <remarks/>
        public string G {
            get {
                return this.gField;
            }
            set {
                this.gField = value;
            }
        }
        
        /// <remarks/>
        public uint T {
            get {
                return this.tField;
            }
            set {
                this.tField = value;
            }
        }
        
        /// <remarks/>
        public uint S {
            get {
                return this.sField;
            }
            set {
                this.sField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class FriendsInfo {
        
        private OnlineFriend[] onlineFriendsField;
        
        private OfflineFriend[] offlineFriendsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public OnlineFriend[] OnlineFriends {
            get {
                return this.onlineFriendsField;
            }
            set {
                this.onlineFriendsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public OfflineFriend[] OfflineFriends {
            get {
                return this.offlineFriendsField;
            }
            set {
                this.offlineFriendsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class RecentPlayer {
        
        private ulong userLivepuidField;
        
        private string gamertagField;
        
        private string gamerTileUrlField;
        
        private int reputationBucketField;
        
        private int gamerScoreField;
        
        private GamercardZones gamerZoneField;
        
        private RecentPlayerStatus statusField;
        
        private string gameTitleNameField;
        
        private System.DateTime lastMetDateField;
        
        private string gameTitleTileUrlField;
        
        /// <remarks/>
        public ulong UserLivepuid {
            get {
                return this.userLivepuidField;
            }
            set {
                this.userLivepuidField = value;
            }
        }
        
        /// <remarks/>
        public string Gamertag {
            get {
                return this.gamertagField;
            }
            set {
                this.gamertagField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTileUrl {
            get {
                return this.gamerTileUrlField;
            }
            set {
                this.gamerTileUrlField = value;
            }
        }
        
        /// <remarks/>
        public int ReputationBucket {
            get {
                return this.reputationBucketField;
            }
            set {
                this.reputationBucketField = value;
            }
        }
        
        /// <remarks/>
        public int GamerScore {
            get {
                return this.gamerScoreField;
            }
            set {
                this.gamerScoreField = value;
            }
        }
        
        /// <remarks/>
        public GamercardZones GamerZone {
            get {
                return this.gamerZoneField;
            }
            set {
                this.gamerZoneField = value;
            }
        }
        
        /// <remarks/>
        public RecentPlayerStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string GameTitleName {
            get {
                return this.gameTitleNameField;
            }
            set {
                this.gameTitleNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastMetDate {
            get {
                return this.lastMetDateField;
            }
            set {
                this.lastMetDateField = value;
            }
        }
        
        /// <remarks/>
        public string GameTitleTileUrl {
            get {
                return this.gameTitleTileUrlField;
            }
            set {
                this.gameTitleTileUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public enum GamercardZones {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Xbox_1,
        
        /// <remarks/>
        RR,
        
        /// <remarks/>
        Pro,
        
        /// <remarks/>
        Family,
        
        /// <remarks/>
        Underground,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public enum RecentPlayerStatus {
        
        /// <remarks/>
        Neutral,
        
        /// <remarks/>
        Preferred,
        
        /// <remarks/>
        Avoided,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Presence/")]
    public partial class FriendEx {
        
        private ulong xUIDField;
        
        private string gamerTagField;
        
        private uint friendStatusField;
        
        private uint onlineStateField;
        
        private uint lastSeenTitleField;
        
        private uint minutesSinceStateChangeField;
        
        private string richPresenceStringField;
        
        /// <remarks/>
        public ulong XUID {
            get {
                return this.xUIDField;
            }
            set {
                this.xUIDField = value;
            }
        }
        
        /// <remarks/>
        public string GamerTag {
            get {
                return this.gamerTagField;
            }
            set {
                this.gamerTagField = value;
            }
        }
        
        /// <remarks/>
        public uint FriendStatus {
            get {
                return this.friendStatusField;
            }
            set {
                this.friendStatusField = value;
            }
        }
        
        /// <remarks/>
        public uint OnlineState {
            get {
                return this.onlineStateField;
            }
            set {
                this.onlineStateField = value;
            }
        }
        
        /// <remarks/>
        public uint LastSeenTitle {
            get {
                return this.lastSeenTitleField;
            }
            set {
                this.lastSeenTitleField = value;
            }
        }
        
        /// <remarks/>
        public uint MinutesSinceStateChange {
            get {
                return this.minutesSinceStateChangeField;
            }
            set {
                this.minutesSinceStateChangeField = value;
            }
        }
        
        /// <remarks/>
        public string RichPresenceString {
            get {
                return this.richPresenceStringField;
            }
            set {
                this.richPresenceStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGamertagsFromXUIDSCompletedEventHandler(object sender, GetGamertagsFromXUIDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGamertagsFromXUIDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGamertagsFromXUIDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetXUIDSFromGamertagsCompletedEventHandler(object sender, GetXUIDSFromGamertagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXUIDSFromGamertagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXUIDSFromGamertagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPresenceInfoCompletedEventHandler(object sender, GetPresenceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPresenceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPresenceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PresenceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PresenceInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFriendsExCompletedEventHandler(object sender, GetFriendsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FriendEx[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FriendEx[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRecentPlayersCompletedEventHandler(object sender, GetRecentPlayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecentPlayer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecentPlayer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFriendsCompletedEventHandler(object sender, GetFriendsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FriendsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FriendsInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint ValidSeconds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\Query.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Query {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="QuerySoap", Namespace="http://websvc.xboxlive.com/Query/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WireData))]
    public partial class Query : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindFromIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXQSConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCreateSingleEliminationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionManageEntrantOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionTopologyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitionTopologySingleEliminationOperationCompleted;
        
        /// <remarks/>
        public Query() {
            this.Url = "http://xewbcaiis001:12000/query/query.asmx";
        }
        
        /// <remarks/>
        public event AddCompletedEventHandler AddCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event UpdateIdCompletedEventHandler UpdateIdCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event FindFromIdsCompletedEventHandler FindFromIdsCompleted;
        
        /// <remarks/>
        public event RemoveCompletedEventHandler RemoveCompleted;
        
        /// <remarks/>
        public event RemoveIdCompletedEventHandler RemoveIdCompleted;
        
        /// <remarks/>
        public event SelectCompletedEventHandler SelectCompleted;
        
        /// <remarks/>
        public event GetXQSConfigCompletedEventHandler GetXQSConfigCompleted;
        
        /// <remarks/>
        public event CompetitionCreateCompletedEventHandler CompetitionCreateCompleted;
        
        /// <remarks/>
        public event CompetitionCreateSingleEliminationCompletedEventHandler CompetitionCreateSingleEliminationCompleted;
        
        /// <remarks/>
        public event CompetitionSearchCompletedEventHandler CompetitionSearchCompleted;
        
        /// <remarks/>
        public event CompetitionManageEntrantCompletedEventHandler CompetitionManageEntrantCompleted;
        
        /// <remarks/>
        public event CompetitionCancelCompletedEventHandler CompetitionCancelCompleted;
        
        /// <remarks/>
        public event CompetitionTopologyCompletedEventHandler CompetitionTopologyCompleted;
        
        /// <remarks/>
        public event CompetitionTopologySingleEliminationCompletedEventHandler CompetitionTopologySingleEliminationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Add", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong Add(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            object[] results = this.Invoke("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdd(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void AddAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            this.AddAsync(titleId, webId, gamerTag, teamName, datasetId, attributes, null);
        }
        
        /// <remarks/>
        public void AddAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, object userState) {
            if ((this.AddOperationCompleted == null)) {
                this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
            }
            this.InvokeAsync("Add", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, this.AddOperationCompleted, userState);
        }
        
        private void OnAddOperationCompleted(object arg) {
            if ((this.AddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Update", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.Invoke("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.UpdateAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, attributes, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/UpdateId", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateId(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes) {
            this.Invoke("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateId(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes) {
            this.UpdateIdAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, entityId, attributes, null);
        }
        
        /// <remarks/>
        public void UpdateIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attributes, object userState) {
            if ((this.UpdateIdOperationCompleted == null)) {
                this.UpdateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIdOperationCompleted);
            }
            this.InvokeAsync("UpdateId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        entityId,
                        attributes}, this.UpdateIdOperationCompleted, userState);
        }
        
        private void OnUpdateIdOperationCompleted(object arg) {
            if ((this.UpdateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Search", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse Search(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            object[] results = this.Invoke("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearch(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            this.SearchAsync(titleId, datasetId, procIndex, page, resultsPerPage, specs, attributes, null);
        }
        
        /// <remarks/>
        public void SearchAsync(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/FindFromIds", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindFromIdsResponse FindFromIds(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds) {
            object[] results = this.Invoke("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds});
            return ((FindFromIdsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindFromIds(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindFromIdsResponse EndFindFromIds(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindFromIdsResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FindFromIdsAsync(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds) {
            this.FindFromIdsAsync(titleId, datasetId, procIndex, specs, entityIds, null);
        }
        
        /// <remarks/>
        public void FindFromIdsAsync(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds, object userState) {
            if ((this.FindFromIdsOperationCompleted == null)) {
                this.FindFromIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFromIdsOperationCompleted);
            }
            this.InvokeAsync("FindFromIds", new object[] {
                        titleId,
                        datasetId,
                        procIndex,
                        specs,
                        entityIds}, this.FindFromIdsOperationCompleted, userState);
        }
        
        private void OnFindFromIdsOperationCompleted(object arg) {
            if ((this.FindFromIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindFromIdsCompleted(this, new FindFromIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Remove", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Remove(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.Invoke("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemove(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemove(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes) {
            this.RemoveAsync(titleId, webId, gamerTag, teamName, datasetId, procIndex, attributes, null);
        }
        
        /// <remarks/>
        public void RemoveAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, uint procIndex, QueryAttribute[] attributes, object userState) {
            if ((this.RemoveOperationCompleted == null)) {
                this.RemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveOperationCompleted);
            }
            this.InvokeAsync("Remove", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        procIndex,
                        attributes}, this.RemoveOperationCompleted, userState);
        }
        
        private void OnRemoveOperationCompleted(object arg) {
            if ((this.RemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/RemoveId", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveId(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId) {
            this.Invoke("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveId(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId) {
            this.RemoveIdAsync(titleId, webId, gamerTag, teamName, datasetId, entityId, null);
        }
        
        /// <remarks/>
        public void RemoveIdAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, object userState) {
            if ((this.RemoveIdOperationCompleted == null)) {
                this.RemoveIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIdOperationCompleted);
            }
            this.InvokeAsync("RemoveId", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId}, this.RemoveIdOperationCompleted, userState);
        }
        
        private void OnRemoveIdOperationCompleted(object arg) {
            if ((this.RemoveIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/Select", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Select(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes) {
            this.Invoke("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSelect(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSelect(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SelectAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes) {
            this.SelectAsync(titleId, webId, gamerTag, teamName, datasetId, entityId, action, attributes, null);
        }
        
        /// <remarks/>
        public void SelectAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong entityId, uint action, QueryAttribute[] attributes, object userState) {
            if ((this.SelectOperationCompleted == null)) {
                this.SelectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectOperationCompleted);
            }
            this.InvokeAsync("Select", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        entityId,
                        action,
                        attributes}, this.SelectOperationCompleted, userState);
        }
        
        private void OnSelectOperationCompleted(object arg) {
            if ((this.SelectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/GetXQSConfig", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXQSConfig(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, ulong haveVersion) {
            object[] results = this.Invoke("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetXQSConfig(uint titleId, byte[] webId, ulong haveVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetXQSConfig(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXQSConfigAsync(uint titleId, byte[] webId, ulong haveVersion) {
            this.GetXQSConfigAsync(titleId, webId, haveVersion, null);
        }
        
        /// <remarks/>
        public void GetXQSConfigAsync(uint titleId, byte[] webId, ulong haveVersion, object userState) {
            if ((this.GetXQSConfigOperationCompleted == null)) {
                this.GetXQSConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXQSConfigOperationCompleted);
            }
            this.InvokeAsync("GetXQSConfig", new object[] {
                        titleId,
                        webId,
                        haveVersion}, this.GetXQSConfigOperationCompleted, userState);
        }
        
        private void OnGetXQSConfigOperationCompleted(object arg) {
            if ((this.GetXQSConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXQSConfigCompleted(this, new GetXQSConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCreate", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong CompetitionCreate(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            object[] results = this.Invoke("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCreate(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndCompetitionCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionCreateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes) {
            this.CompetitionCreateAsync(titleId, webId, gamerTag, teamName, datasetId, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionCreateAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionCreateOperationCompleted == null)) {
                this.CompetitionCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCreateOperationCompleted);
            }
            this.InvokeAsync("CompetitionCreate", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        attributes}, this.CompetitionCreateOperationCompleted, userState);
        }
        
        private void OnCompetitionCreateOperationCompleted(object arg) {
            if ((this.CompetitionCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCreateCompleted(this, new CompetitionCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCreateSingleElimination", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong CompetitionCreateSingleElimination(
                    uint titleId, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes) {
            object[] results = this.Invoke("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCreateSingleElimination(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public ulong EndCompetitionCreateSingleElimination(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionCreateSingleEliminationAsync(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes) {
            this.CompetitionCreateSingleEliminationAsync(titleId, webId, gamerTag, teamName, datasetId, cPrivateSlots, cPublicSlots, cMinimumPlayers, dtRegistrationOpen, dtRegistrationClose, dtCompetitionStart, dtRoundOneStart, dtRoundOneEnd, dwMatchReminderAdvanceMinutes, UnitOrMask, Interval, fTeamCompetition, dwTeamSize, additionalAttributes, null);
        }
        
        /// <remarks/>
        public void CompetitionCreateSingleEliminationAsync(
                    uint titleId, 
                    byte[] webId, 
                    string gamerTag, 
                    string teamName, 
                    uint datasetId, 
                    uint cPrivateSlots, 
                    uint cPublicSlots, 
                    uint cMinimumPlayers, 
                    System.DateTime dtRegistrationOpen, 
                    System.DateTime dtRegistrationClose, 
                    System.DateTime dtCompetitionStart, 
                    System.DateTime dtRoundOneStart, 
                    System.DateTime dtRoundOneEnd, 
                    uint dwMatchReminderAdvanceMinutes, 
                    uint UnitOrMask, 
                    uint Interval, 
                    bool fTeamCompetition, 
                    uint dwTeamSize, 
                    QueryAttribute[] additionalAttributes, 
                    object userState) {
            if ((this.CompetitionCreateSingleEliminationOperationCompleted == null)) {
                this.CompetitionCreateSingleEliminationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCreateSingleEliminationOperationCompleted);
            }
            this.InvokeAsync("CompetitionCreateSingleElimination", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        cPrivateSlots,
                        cPublicSlots,
                        cMinimumPlayers,
                        dtRegistrationOpen,
                        dtRegistrationClose,
                        dtCompetitionStart,
                        dtRoundOneStart,
                        dtRoundOneEnd,
                        dwMatchReminderAdvanceMinutes,
                        UnitOrMask,
                        Interval,
                        fTeamCompetition,
                        dwTeamSize,
                        additionalAttributes}, this.CompetitionCreateSingleEliminationOperationCompleted, userState);
        }
        
        private void OnCompetitionCreateSingleEliminationOperationCompleted(object arg) {
            if ((this.CompetitionCreateSingleEliminationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCreateSingleEliminationCompleted(this, new CompetitionCreateSingleEliminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionSearch", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionSearch(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            object[] results = this.Invoke("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionSearch(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionSearchAsync(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes) {
            this.CompetitionSearchAsync(titleId, datasetId, queryId, page, resultsPerPage, specs, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionSearchAsync(uint titleId, uint datasetId, uint queryId, uint page, uint resultsPerPage, QueryAttributeSpec[] specs, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionSearchOperationCompleted == null)) {
                this.CompetitionSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionSearchOperationCompleted);
            }
            this.InvokeAsync("CompetitionSearch", new object[] {
                        titleId,
                        datasetId,
                        queryId,
                        page,
                        resultsPerPage,
                        specs,
                        attributes}, this.CompetitionSearchOperationCompleted, userState);
        }
        
        private void OnCompetitionSearchOperationCompleted(object arg) {
            if ((this.CompetitionSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionSearchCompleted(this, new CompetitionSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionManageEntrant", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompetitionManageEntrant(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes) {
            this.Invoke("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionManageEntrant(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCompetitionManageEntrant(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CompetitionManageEntrantAsync(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes) {
            this.CompetitionManageEntrantAsync(titleId, webId, gamerTag, action, teamName, datasetId, competitionId, attributes, null);
        }
        
        /// <remarks/>
        public void CompetitionManageEntrantAsync(uint titleId, byte[] webId, string gamerTag, uint action, string teamName, uint datasetId, ulong competitionId, QueryAttribute[] attributes, object userState) {
            if ((this.CompetitionManageEntrantOperationCompleted == null)) {
                this.CompetitionManageEntrantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionManageEntrantOperationCompleted);
            }
            this.InvokeAsync("CompetitionManageEntrant", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        action,
                        teamName,
                        datasetId,
                        competitionId,
                        attributes}, this.CompetitionManageEntrantOperationCompleted, userState);
        }
        
        private void OnCompetitionManageEntrantOperationCompleted(object arg) {
            if ((this.CompetitionManageEntrantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionManageEntrantCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionCancel", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompetitionCancel(uint titleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId) {
            this.Invoke("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionCancel(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCompetitionCancel(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CompetitionCancelAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId) {
            this.CompetitionCancelAsync(titleId, webId, gamerTag, teamName, datasetId, competitionId, null);
        }
        
        /// <remarks/>
        public void CompetitionCancelAsync(uint titleId, byte[] webId, string gamerTag, string teamName, uint datasetId, ulong competitionId, object userState) {
            if ((this.CompetitionCancelOperationCompleted == null)) {
                this.CompetitionCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionCancelOperationCompleted);
            }
            this.InvokeAsync("CompetitionCancel", new object[] {
                        titleId,
                        webId,
                        gamerTag,
                        teamName,
                        datasetId,
                        competitionId}, this.CompetitionCancelOperationCompleted, userState);
        }
        
        private void OnCompetitionCancelOperationCompleted(object arg) {
            if ((this.CompetitionCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionCancelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionTopology", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionTopology(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs) {
            object[] results = this.Invoke("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionTopology(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionTopology(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionTopologyAsync(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs) {
            this.CompetitionTopologyAsync(titleId, datasetId, competitionId, page, resultsPerPage, startingEventId, endingEventId, specs, null);
        }
        
        /// <remarks/>
        public void CompetitionTopologyAsync(uint titleId, uint datasetId, ulong competitionId, uint page, uint resultsPerPage, long startingEventId, long endingEventId, QueryAttributeSpec[] specs, object userState) {
            if ((this.CompetitionTopologyOperationCompleted == null)) {
                this.CompetitionTopologyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionTopologyOperationCompleted);
            }
            this.InvokeAsync("CompetitionTopology", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        page,
                        resultsPerPage,
                        startingEventId,
                        endingEventId,
                        specs}, this.CompetitionTopologyOperationCompleted, userState);
        }
        
        private void OnCompetitionTopologyOperationCompleted(object arg) {
            if ((this.CompetitionTopologyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionTopologyCompleted(this, new CompetitionTopologyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Query/CompetitionTopologySingleElimination", RequestNamespace="http://websvc.xboxlive.com/Query/", ResponseNamespace="http://websvc.xboxlive.com/Query/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResponse CompetitionTopologySingleElimination(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs) {
            object[] results = this.Invoke("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs});
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompetitionTopologySingleElimination(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs}, callback, asyncState);
        }
        
        /// <remarks/>
        public SearchResponse EndCompetitionTopologySingleElimination(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SearchResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitionTopologySingleEliminationAsync(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs) {
            this.CompetitionTopologySingleEliminationAsync(titleId, datasetId, competitionId, originEventId, roundsForward, roundsBackward, topWidth, specs, null);
        }
        
        /// <remarks/>
        public void CompetitionTopologySingleEliminationAsync(uint titleId, uint datasetId, ulong competitionId, ulong originEventId, uint roundsForward, uint roundsBackward, uint topWidth, QueryAttributeSpec[] specs, object userState) {
            if ((this.CompetitionTopologySingleEliminationOperationCompleted == null)) {
                this.CompetitionTopologySingleEliminationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitionTopologySingleEliminationOperationCompleted);
            }
            this.InvokeAsync("CompetitionTopologySingleElimination", new object[] {
                        titleId,
                        datasetId,
                        competitionId,
                        originEventId,
                        roundsForward,
                        roundsBackward,
                        topWidth,
                        specs}, this.CompetitionTopologySingleEliminationOperationCompleted, userState);
        }
        
        private void OnCompetitionTopologySingleEliminationOperationCompleted(object arg) {
            if ((this.CompetitionTopologySingleEliminationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitionTopologySingleEliminationCompleted(this, new CompetitionTopologySingleEliminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class QueryAttribute : WireData {
        
        private object valueField;
        
        private uint idField;
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public uint Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(XRLObject2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindFromIdsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttributeSpec))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttribute))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class WireData {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindFromIdsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QueryAttributeSpec))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class XRLObject2 : WireData {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class FindFromIdsResponse : XRLObject2 {
        
        private uint returnedResultsField;
        
        private uint attribCountField;
        
        private QueryAttribute[] attribsField;
        
        /// <remarks/>
        public uint returnedResults {
            get {
                return this.returnedResultsField;
            }
            set {
                this.returnedResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint attribCount {
            get {
                return this.attribCountField;
            }
            set {
                this.attribCountField = value;
            }
        }
        
        /// <remarks/>
        public QueryAttribute[] attribs {
            get {
                return this.attribsField;
            }
            set {
                this.attribsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class SearchResponse : XRLObject2 {
        
        private uint totalResultsField;
        
        private uint returnedResultsField;
        
        private uint attribCountField;
        
        private QueryAttribute[] attribsField;
        
        /// <remarks/>
        public uint totalResults {
            get {
                return this.totalResultsField;
            }
            set {
                this.totalResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint returnedResults {
            get {
                return this.returnedResultsField;
            }
            set {
                this.returnedResultsField = value;
            }
        }
        
        /// <remarks/>
        public uint attribCount {
            get {
                return this.attribCountField;
            }
            set {
                this.attribCountField = value;
            }
        }
        
        /// <remarks/>
        public QueryAttribute[] attribs {
            get {
                return this.attribsField;
            }
            set {
                this.attribsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Query/")]
    public partial class QueryAttributeSpec : XRLObject2 {
        
        private uint typeField;
        
        private uint lenField;
        
        /// <remarks/>
        public uint type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public uint len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindFromIdsCompletedEventHandler(object sender, FindFromIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindFromIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindFromIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindFromIdsResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindFromIdsResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SelectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetXQSConfigCompletedEventHandler(object sender, GetXQSConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXQSConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXQSConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCreateCompletedEventHandler(object sender, CompetitionCreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCreateSingleEliminationCompletedEventHandler(object sender, CompetitionCreateSingleEliminationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionCreateSingleEliminationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionCreateSingleEliminationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionSearchCompletedEventHandler(object sender, CompetitionSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionManageEntrantCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionCancelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionTopologyCompletedEventHandler(object sender, CompetitionTopologyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionTopologyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionTopologyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompetitionTopologySingleEliminationCompletedEventHandler(object sender, CompetitionTopologySingleEliminationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitionTopologySingleEliminationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitionTopologySingleEliminationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResponse)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\common\wshelper\objd\i386\Messaging.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Messaging {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MessagingImplSoap", Namespace="http://tempuri.org/")]
    public partial class MessagingImpl : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMessageStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeTitleUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTitleUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTitleWideMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTitleWideMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTitleWideMessageDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumTitleWideMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMessageFlagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumUserTitlesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumMessagesOperationCompleted;
        
        /// <remarks/>
        public MessagingImpl() {
            this.Url = "http://xewbcaiis001:12000/messaging/messaging.asmx";
        }
        
        /// <remarks/>
        public event GetMessageStringCompletedEventHandler GetMessageStringCompleted;
        
        /// <remarks/>
        public event RevokeTitleUserMessageCompletedEventHandler RevokeTitleUserMessageCompleted;
        
        /// <remarks/>
        public event SendTitleUserMessageCompletedEventHandler SendTitleUserMessageCompleted;
        
        /// <remarks/>
        public event SendTitleWideMessageCompletedEventHandler SendTitleWideMessageCompleted;
        
        /// <remarks/>
        public event DeleteTitleWideMessageCompletedEventHandler DeleteTitleWideMessageCompleted;
        
        /// <remarks/>
        public event GetTitleWideMessageDetailsCompletedEventHandler GetTitleWideMessageDetailsCompleted;
        
        /// <remarks/>
        public event EnumTitleWideMessagesCompletedEventHandler EnumTitleWideMessagesCompleted;
        
        /// <remarks/>
        public event SetMessageFlagsCompletedEventHandler SetMessageFlagsCompleted;
        
        /// <remarks/>
        public event EnumUserTitlesCompletedEventHandler EnumUserTitlesCompleted;
        
        /// <remarks/>
        public event DeleteUserTitleCompletedEventHandler DeleteUserTitleCompleted;
        
        /// <remarks/>
        public event RevokeMessageCompletedEventHandler RevokeMessageCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event GetMessageDetailsCompletedEventHandler GetMessageDetailsCompleted;
        
        /// <remarks/>
        public event EnumMessagesCompletedEventHandler EnumMessagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetMessageString", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("StringData")]
        public string GetMessageString(uint TitleID, uint StringID, string Locale) {
            object[] results = this.Invoke("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMessageString(uint TitleID, uint StringID, string Locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMessageString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStringAsync(uint TitleID, uint StringID, string Locale) {
            this.GetMessageStringAsync(TitleID, StringID, Locale, null);
        }
        
        /// <remarks/>
        public void GetMessageStringAsync(uint TitleID, uint StringID, string Locale, object userState) {
            if ((this.GetMessageStringOperationCompleted == null)) {
                this.GetMessageStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStringOperationCompleted);
            }
            this.InvokeAsync("GetMessageString", new object[] {
                        TitleID,
                        StringID,
                        Locale}, this.GetMessageStringOperationCompleted, userState);
        }
        
        private void OnGetMessageStringOperationCompleted(object arg) {
            if ((this.GetMessageStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStringCompleted(this, new GetMessageStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/RevokeTitleUserMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint RevokeTitleUserMessage([System.Xml.Serialization.XmlElementAttribute("RecipResult")] WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("RevokeTitleUserMessage", new object[] {
                        RecipResult});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeTitleUserMessage(WCRecipientResult[] RecipResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeTitleUserMessage", new object[] {
                        RecipResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndRevokeTitleUserMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeTitleUserMessageAsync(WCRecipientResult[] RecipResult) {
            this.RevokeTitleUserMessageAsync(RecipResult, null);
        }
        
        /// <remarks/>
        public void RevokeTitleUserMessageAsync(WCRecipientResult[] RecipResult, object userState) {
            if ((this.RevokeTitleUserMessageOperationCompleted == null)) {
                this.RevokeTitleUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeTitleUserMessageOperationCompleted);
            }
            this.InvokeAsync("RevokeTitleUserMessage", new object[] {
                        RecipResult}, this.RevokeTitleUserMessageOperationCompleted, userState);
        }
        
        private void OnRevokeTitleUserMessageOperationCompleted(object arg) {
            if ((this.RevokeTitleUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeTitleUserMessageCompleted(this, new RevokeTitleUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendTitleUserMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, [System.Xml.Serialization.XmlElementAttribute("Recipient")] string[] Recipient, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] out WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment});
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTitleUserMessage(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendTitleUserMessage(System.IAsyncResult asyncResult, out WCRecipientResult[] RecipResult) {
            object[] results = this.EndInvoke(asyncResult);
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendTitleUserMessageAsync(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment) {
            this.SendTitleUserMessageAsync(Sender, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, null);
        }
        
        /// <remarks/>
        public void SendTitleUserMessageAsync(string Sender, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendTitleUserMessageOperationCompleted == null)) {
                this.SendTitleUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTitleUserMessageOperationCompleted);
            }
            this.InvokeAsync("SendTitleUserMessage", new object[] {
                        Sender,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, this.SendTitleUserMessageOperationCompleted, userState);
        }
        
        private void OnSendTitleUserMessageOperationCompleted(object arg) {
            if ((this.SendTitleUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTitleUserMessageCompleted(this, new SendTitleUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendTitleWideMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("LocalizedString")] WCLocalizedString[] LocalizedString, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, out ushort Delay, out uint MessageID) {
            object[] results = this.Invoke("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment});
            Delay = ((ushort)(results[1]));
            MessageID = ((uint)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTitleWideMessage(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendTitleWideMessage(System.IAsyncResult asyncResult, out ushort Delay, out uint MessageID) {
            object[] results = this.EndInvoke(asyncResult);
            Delay = ((ushort)(results[1]));
            MessageID = ((uint)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendTitleWideMessageAsync(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment) {
            this.SendTitleWideMessageAsync(Sender, SenderContext, SentTime, Region, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Description, Details, LocalizedString, Attachment, null);
        }
        
        /// <remarks/>
        public void SendTitleWideMessageAsync(string Sender, ulong SenderContext, System.DateTime SentTime, uint Region, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string Description, WCMessageDetails Details, WCLocalizedString[] LocalizedString, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendTitleWideMessageOperationCompleted == null)) {
                this.SendTitleWideMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTitleWideMessageOperationCompleted);
            }
            this.InvokeAsync("SendTitleWideMessage", new object[] {
                        Sender,
                        SenderContext,
                        SentTime,
                        Region,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Description,
                        Details,
                        LocalizedString,
                        Attachment}, this.SendTitleWideMessageOperationCompleted, userState);
        }
        
        private void OnSendTitleWideMessageOperationCompleted(object arg) {
            if ((this.SendTitleWideMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTitleWideMessageCompleted(this, new SendTitleWideMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteTitleWideMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags) {
            object[] results = this.Invoke("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTitleWideMessage(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteTitleWideMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTitleWideMessageAsync(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags) {
            this.DeleteTitleWideMessageAsync(TitleID, MessageID, Flags, null);
        }
        
        /// <remarks/>
        public void DeleteTitleWideMessageAsync(uint TitleID, uint MessageID, WCDeleteSysMsgFlags Flags, object userState) {
            if ((this.DeleteTitleWideMessageOperationCompleted == null)) {
                this.DeleteTitleWideMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTitleWideMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteTitleWideMessage", new object[] {
                        TitleID,
                        MessageID,
                        Flags}, this.DeleteTitleWideMessageOperationCompleted, userState);
        }
        
        private void OnDeleteTitleWideMessageOperationCompleted(object arg) {
            if ((this.DeleteTitleWideMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTitleWideMessageCompleted(this, new DeleteTitleWideMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetTitleWideMessageDetails", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint GetTitleWideMessageDetails(uint TitleID, uint MessageID, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.Invoke("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID});
            Summary = ((WCTitleWideMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleWideMessageDetails(uint TitleID, uint MessageID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndGetTitleWideMessageDetails(System.IAsyncResult asyncResult, out WCTitleWideMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCTitleWideMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleWideMessageDetailsAsync(uint TitleID, uint MessageID) {
            this.GetTitleWideMessageDetailsAsync(TitleID, MessageID, null);
        }
        
        /// <remarks/>
        public void GetTitleWideMessageDetailsAsync(uint TitleID, uint MessageID, object userState) {
            if ((this.GetTitleWideMessageDetailsOperationCompleted == null)) {
                this.GetTitleWideMessageDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleWideMessageDetailsOperationCompleted);
            }
            this.InvokeAsync("GetTitleWideMessageDetails", new object[] {
                        TitleID,
                        MessageID}, this.GetTitleWideMessageDetailsOperationCompleted, userState);
        }
        
        private void OnGetTitleWideMessageDetailsOperationCompleted(object arg) {
            if ((this.GetTitleWideMessageDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleWideMessageDetailsCompleted(this, new GetTitleWideMessageDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/EnumTitleWideMessages", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint EnumTitleWideMessages(uint TitleID, [System.Xml.Serialization.XmlElementAttribute("Summary")] out WCTitleWideMessageSummary[] Summary) {
            object[] results = this.Invoke("EnumTitleWideMessages", new object[] {
                        TitleID});
            Summary = ((WCTitleWideMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumTitleWideMessages(uint TitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumTitleWideMessages", new object[] {
                        TitleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndEnumTitleWideMessages(System.IAsyncResult asyncResult, out WCTitleWideMessageSummary[] Summary) {
            object[] results = this.EndInvoke(asyncResult);
            Summary = ((WCTitleWideMessageSummary[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void EnumTitleWideMessagesAsync(uint TitleID) {
            this.EnumTitleWideMessagesAsync(TitleID, null);
        }
        
        /// <remarks/>
        public void EnumTitleWideMessagesAsync(uint TitleID, object userState) {
            if ((this.EnumTitleWideMessagesOperationCompleted == null)) {
                this.EnumTitleWideMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumTitleWideMessagesOperationCompleted);
            }
            this.InvokeAsync("EnumTitleWideMessages", new object[] {
                        TitleID}, this.EnumTitleWideMessagesOperationCompleted, userState);
        }
        
        private void OnEnumTitleWideMessagesOperationCompleted(object arg) {
            if ((this.EnumTitleWideMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumTitleWideMessagesCompleted(this, new EnumTitleWideMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SetMessageFlags", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SetMessageFlags([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags) {
            object[] results = this.Invoke("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetMessageFlags(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSetMessageFlags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SetMessageFlagsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags) {
            this.SetMessageFlagsAsync(UserWebID, UserGamerTag, MessageID, SetFlags, UnsetFlags, null);
        }
        
        /// <remarks/>
        public void SetMessageFlagsAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, object userState) {
            if ((this.SetMessageFlagsOperationCompleted == null)) {
                this.SetMessageFlagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMessageFlagsOperationCompleted);
            }
            this.InvokeAsync("SetMessageFlags", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags}, this.SetMessageFlagsOperationCompleted, userState);
        }
        
        private void OnSetMessageFlagsOperationCompleted(object arg) {
            if ((this.SetMessageFlagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMessageFlagsCompleted(this, new SetMessageFlagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/EnumUserTitles", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint EnumUserTitles([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, [System.Xml.Serialization.XmlElementAttribute("Title")] out WCUserTitle[] Title) {
            object[] results = this.Invoke("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag});
            Title = ((WCUserTitle[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumUserTitles(byte[] UserWebID, string UserGamerTag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndEnumUserTitles(System.IAsyncResult asyncResult, out WCUserTitle[] Title) {
            object[] results = this.EndInvoke(asyncResult);
            Title = ((WCUserTitle[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void EnumUserTitlesAsync(byte[] UserWebID, string UserGamerTag) {
            this.EnumUserTitlesAsync(UserWebID, UserGamerTag, null);
        }
        
        /// <remarks/>
        public void EnumUserTitlesAsync(byte[] UserWebID, string UserGamerTag, object userState) {
            if ((this.EnumUserTitlesOperationCompleted == null)) {
                this.EnumUserTitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumUserTitlesOperationCompleted);
            }
            this.InvokeAsync("EnumUserTitles", new object[] {
                        UserWebID,
                        UserGamerTag}, this.EnumUserTitlesOperationCompleted, userState);
        }
        
        private void OnEnumUserTitlesOperationCompleted(object arg) {
            if ((this.EnumUserTitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumUserTitlesCompleted(this, new EnumUserTitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteUserTitle", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteUserTitle([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint TitleID) {
            object[] results = this.Invoke("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUserTitle(byte[] UserWebID, string UserGamerTag, uint TitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteUserTitle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserTitleAsync(byte[] UserWebID, string UserGamerTag, uint TitleID) {
            this.DeleteUserTitleAsync(UserWebID, UserGamerTag, TitleID, null);
        }
        
        /// <remarks/>
        public void DeleteUserTitleAsync(byte[] UserWebID, string UserGamerTag, uint TitleID, object userState) {
            if ((this.DeleteUserTitleOperationCompleted == null)) {
                this.DeleteUserTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserTitleOperationCompleted);
            }
            this.InvokeAsync("DeleteUserTitle", new object[] {
                        UserWebID,
                        UserGamerTag,
                        TitleID}, this.DeleteUserTitleOperationCompleted, userState);
        }
        
        private void OnDeleteUserTitleOperationCompleted(object arg) {
            if ((this.DeleteUserTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserTitleCompleted(this, new DeleteUserTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/RevokeMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint RevokeMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] SenderWebID, string SenderGamerTag, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeMessage(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndRevokeMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeMessageAsync(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult) {
            this.RevokeMessageAsync(SenderWebID, SenderGamerTag, RecipResult, null);
        }
        
        /// <remarks/>
        public void RevokeMessageAsync(byte[] SenderWebID, string SenderGamerTag, WCRecipientResult[] RecipResult, object userState) {
            if ((this.RevokeMessageOperationCompleted == null)) {
                this.RevokeMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeMessageOperationCompleted);
            }
            this.InvokeAsync("RevokeMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        RecipResult}, this.RevokeMessageOperationCompleted, userState);
        }
        
        private void OnRevokeMessageOperationCompleted(object arg) {
            if ((this.RevokeMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeMessageCompleted(this, new RevokeMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/SendMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint SendMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, [System.Xml.Serialization.XmlElementAttribute("Recipient")] string[] Recipient, WCMessageDetails Details, [System.Xml.Serialization.XmlElementAttribute("Attachment")] WCMessageAttachment[] Attachment, [System.Xml.Serialization.XmlElementAttribute("RecipResult")] out WCRecipientResult[] RecipResult) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment});
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMessage(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndSendMessage(System.IAsyncResult asyncResult, out WCRecipientResult[] RecipResult) {
            object[] results = this.EndInvoke(asyncResult);
            RecipResult = ((WCRecipientResult[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment) {
            this.SendMessageAsync(SenderWebID, SenderGamerTag, SenderContext, MessageFlags, SenderTitleID, ExpireMinutes, MessageType, Recipient, Details, Attachment, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(byte[] SenderWebID, string SenderGamerTag, ulong SenderContext, WCMessageFlags MessageFlags, uint SenderTitleID, ushort ExpireMinutes, WCMessageType MessageType, string[] Recipient, WCMessageDetails Details, WCMessageAttachment[] Attachment, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        SenderWebID,
                        SenderGamerTag,
                        SenderContext,
                        MessageFlags,
                        SenderTitleID,
                        ExpireMinutes,
                        MessageType,
                        Recipient,
                        Details,
                        Attachment}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/DeleteMessage", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint DeleteMessage([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMessage(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndDeleteMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags) {
            this.DeleteMessageAsync(UserWebID, UserGamerTag, MessageID, Flags, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(byte[] UserWebID, string UserGamerTag, uint MessageID, WCDeleteMsgFlags Flags, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        Flags}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Messaging/GetMessageDetails", RequestNamespace="http://websvc.xboxlive.com/Messaging/", ResponseNamespace="http://websvc.xboxlive.com/Messaging/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public uint GetMessageDetails([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, out WCMessageSummary Summary, out WCMessageDetails Details) {
            object[] results = this.Invoke("GetMessageDetails", new object[] {
                        UserWebID,
                        UserGamerTag,
                        MessageID,
                        SetFlags,
                        UnsetFlags});
            Summary = ((WCMessageSummary)(results[1]));
            Details = ((WCMessageDetails)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMessageDetails(byte[] UserWebID, string UserGamerTag, uint MessageID, WCMessageFlags SetFlags, WCMessageFlags UnsetFlags, System.AsyncCallbac