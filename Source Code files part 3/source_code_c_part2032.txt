      ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    
    }

    public class TeamCleanerVerifyTitle1 : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerVerifyTitle1(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Single Team: UserA is not on Team1. No change to Team1.")]
            class SingleTeamUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        //*****

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    

    
    
        [TestCase, Description("Single Team with Head Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamHeadRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamHeadRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // User Info
                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    
    }

    public class TeamCleanerVerifyTitle2 : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerVerifyTitle2(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Single Team: UserA is not on Team1. No change to Team1.")]
            class SingleTeamUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        //*****

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if (null == memberB) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberB.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberB.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if (null == memberD) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberD.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberD.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    

    
    
        [TestCase, Description("Single Team with Head Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamHeadRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamHeadRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team1.LoadMembersAndRecruits(userB);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userB);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                try 
                {
                    team2.LoadMembersAndRecruits(userD);

                    // Logoff users
                    m_TeamCleanerInfo.Logoff(userD);

                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (HResultException hre) 
                {
                    if (0x8015210B != hre.HR) 
                    {
                        throw hre;
                    }
                }
                catch (Exception e) 
                {
                    throw e;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\FuncRegisterTests.cs ===
using System;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.Database;

namespace XArbTest
{

	/// <summary>
	/// Functional Tests for Register Functionality
	/// </summary>
	/// <remarks>
	/// <Description>
	/// 	<p>
	///		The register suite implements test cases primarily targeting the API and functionality of Register.ashx.
	///
	///		All positive register functionality tests verify every call to Arb succeeded by performing the following standard verifications (unless otherwise noted):
	/// 		· Verify using Arb response information the machine PUIDs and the number of Xboxes registered match what was sent
	/// 		· Verify using Arb response information the PUID and flags for each user on each Xbox match what was sent
	/// 		· Verify using Debug Response the registration's title ID, session ID, session nonce, max session seconds, machine PUID, and flags match what was sent
	/// 		· Verify using Debug Response the actual team tickets count match what was sent
	/// 		· Verify using Debug Response the total number of Xboxes registered match what was sent
	/// 		· Verify using Debug Response the user's PUID, flags, and trust rating factor
	/// 	</p>
	/// </Description>
	/// </remarks>
    [TestGroup, Owner("kbayer"), TestFrequency("Regression")]
	public class FuncRegisterTests : TestNode
	{
		/// <summary>
		///		Register Tests: P_XDelayCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Set X-Delay with xmgmt to 700 and then register 4 users on the local client
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///			Verify X-Delay in response header is present and set correctly to 700
		///		</Verify>
		/// </remarks>
		class P_XDelayCase : XArbTestBase
		{
			public P_XDelayCase()
			{
				Name = "P_XDelayCase";
				Desc = "Tests the XDelay Feature";
			}
			override protected void Execute()
			{
				//Test doesn't apply to inhouse servers
				if (XRLRegister.fFrontDoor==false)
				{
					ResultCode=TEST_RESULTS.NOT_EXECUTED;
					return;
				}

				int Xdelay= 700;
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,4,0);
				
				// Set X-Delay to 700ms 
				SendFDXmgmtCmd("exec :xarb SetXDelay "+myRegister.titleId.ToString("X")+" Register "+Xdelay);
				
				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					
				}
				else
					ResultCode=TEST_RESULTS.PASSED;

				SendFDXmgmtCmd("exec :xarb ReloadThrottleConfig");
				if(myRegister.XDelay!=Xdelay)
				{
					throw new Exception("Expected X-Delay="+Xdelay+" but recived :"+myRegister.XDelay);
					
				}

				
			}
		}

		/// <summary>
		///		Register Tests: P_MainlineCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register 4 users on the local client
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MainlineCase : XArbTestBase
		{
			public P_MainlineCase()
			{
				Name = "P_MainlineCase";
				Desc = "The typical mainline case that exposes most options";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,4,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}


		/// <summary>
		///		Register Tests: N_ProtocolInvalidVersionCheck
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with an invalid protocol version
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ProtocolInvalidVersionCheck : XArbTestBase
		{
			public N_ProtocolInvalidVersionCheck()
			{
				Name = "N_ProtocolInvalidVersionCheck";
				Desc = "Checks that the protocol version is enforced";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set and invalid protocol version
				if (myRegister.protocolVersion==System.UInt16.MaxValue)
				{
					myRegister.protocolVersion-=1;
				}
				else
				{
					myRegister.protocolVersion+=1;
				}

				//Execute and check error
				if (false==ExecuteAndCheckError(myRegister,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: PN_FlagPermutations
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register a user with each of the possible combinations of flags (IsTournament, TimeExtendable, HostForwardsPackets, TeamMembershipInfoIncluded
		///				SessionIsFreeForAll, and PublisherBasedTournament)
        ///			NOTE:  Most of these flags are obsolete, but I'm leaving them in the tests for now, because the code to support them
        ///			still exists in the server.  The TeamMembership flags have been removed from this test because the infrastructure to support
        ///			it is no longer present.
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///			OR
		///			Verify the server returns XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS for known invalid permutations
		///		</Verify>
		/// </remarks>
		class PN_FlagPermutations : XArbTestBase
		{
			public PN_FlagPermutations()
			{
				Name = "PN_FlagPermutations";
				Desc = "Test flag permutations";
			}
			override protected void Execute()
			{

				XRLRegister myRegister = null;

				for (ushort i=0; i<=XRLRegister.Flags.flagMask+1;i++)
				{
					//Construct request
                    if ((i & XRLRegister.Flags.TeamMembershipInfoIncluded) != XRLRegister.Flags.TeamMembershipInfoIncluded)
                    {
                        myRegister = BuildXRLRegister(null, 1, 0);

                        //Set the flag
                        myRegister.flags = i;

                        //If the flags exceed the max or if there publisher based flag does not have required istournament flag
                        if ((myRegister.flags > XRLRegister.Flags.flagMask) ||
                            (((myRegister.flags & XRLRegister.Flags.PublisherBasedTournament) == XRLRegister.Flags.PublisherBasedTournament) && ((myRegister.flags & XRLRegister.Flags.IsTournament) != XRLRegister.Flags.IsTournament)))
                        {
                            //Execute and check for error
                            if (false == ExecuteAndCheckError(myRegister, HResult.XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS))
                            {
                                ResultCode = TEST_RESULTS.FAILED;
                                return;
                            }
                        }
                        else
                        {
                            //Execute and verify
                            if (false == ExecuteAndVerify(myRegister))
                            {
                                ResultCode = TEST_RESULTS.FAILED;
                                return;
                            }
                        }
                    }
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MaxSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the maximum session ID value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify registeration succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxSessionId : XArbTestBase
		{
			public P_MaxSessionId()
			{
				Name = "P_MaxSessionId";
				Desc = "Use max SessionId";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session id to max value
				myRegister.sessionId=System.UInt64.MaxValue;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MinSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the minimum session ID value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MinSessionId : XArbTestBase
		{
			public P_MinSessionId()
			{
				Name = "P_MinSessionId";
				Desc = "Use min SessionId";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session id to min value
				myRegister.sessionId=System.UInt64.MinValue;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MaxNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the maximum session nonce value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxNonce : XArbTestBase
		{
			public P_MaxNonce()
			{
				Name = "P_MaxNonce";
				Desc = "Use max SessionNonce";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session nonce to max value
				myRegister.sessionNonce=System.UInt64.MaxValue;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MinNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the minimum session nonce value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MinNonce : XArbTestBase
		{
			public P_MinNonce()
			{
				Name = "P_MinNonce";
				Desc = "Use min SessionNonce";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session nonce to min value
				myRegister.sessionNonce=System.UInt64.MinValue;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MaxMaxSessionSeconds
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the maximum session seconds (3600) allowed for maxSessionSeconds
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxMaxSessionSeconds : XArbTestBase
		{
			public P_MaxMaxSessionSeconds()
			{
				Name = "P_MaxMaxSessionSeconds";
				Desc = "Use max MaxSessionSeconds";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set max session seconds to max value
				myRegister.maxSessionSeconds=XArbGlobal.maxSessionSeconds;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MinMaxSessionSeconds
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the minimum session seconds (UInt16.MinValue) allowed for maxSessionSeconds
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MinMaxSessionSeconds : XArbTestBase
		{
			public P_MinMaxSessionSeconds()
			{
				Name = "P_MinMaxSessionSeconds";
				Desc = "Use min MaxSessionSeconds";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set max session seconds to min value
				myRegister.maxSessionSeconds=System.UInt16.MinValue;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: N_TooBigMaxSessionSeconds
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register using the more than the maximum session seconds value allowed for the maximum session seconds
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_TooBigMaxSessionSeconds : XArbTestBase
		{
			public N_TooBigMaxSessionSeconds()
			{
				Name = "N_TooBigMaxSessionSeconds";
				Desc = "Use max+1 MaxSessionSeconds";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set max session seconds to max + 1
				myRegister.maxSessionSeconds=XArbGlobal.maxSessionSeconds;
				myRegister.maxSessionSeconds++;

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_MaxRegistrations
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with the maximum number of Xboxes (255) with the maximum number of users (4) each
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxRegistrations : XArbTestBase
		{
			public P_MaxRegistrations()
			{
				Name = "P_MaxRegistrations";
				Desc = "Use the max number of xboxes with the max number of users";
			}
			override protected void Execute()
			{
				uint userIndex=0;
				XRLRegister myRegister=null;

				for (uint i=0; i<XArbGlobal.maxXboxes; i++)
				{
					//Construct request
					if (null==myRegister)
					{
                        myRegister = BuildXRLRegister(null,4,ref userIndex);
					}
					else{
                        myRegister = BuildXRLRegister(myRegister,4,ref userIndex);
					}

					//Execute and verify
					if (false==ExecuteAndVerify(myRegister))
					{
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}

				}

				ResultCode=TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Register Tests: N_TooManyRegistrations
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with one more than the maximum number of Xboxes with the maximum number of users
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_TOO_MANY_XBOXES_IN_SESSION
		///		</Verify>
		/// </remarks>
		class N_TooManyRegistrations : XArbTestBase
		{
			public N_TooManyRegistrations()
			{
				Name = "N_TooManyRegistrations";
				Desc = "Use the max number of xboxes + 1 with the max number of users";
			}
			override protected void Execute()
			{

				uint userIndex=0;

				XRLRegister myRegister=null;

				for (uint i=0; i<XArbGlobal.maxXboxes; i++)
				{
					//Construct request
					if (null==myRegister)
					{
                        myRegister = BuildXRLRegister(null,4,ref userIndex);
					}
					else
					{
                        myRegister = BuildXRLRegister(myRegister,4,ref userIndex);
					}

					//Execute and verify
					if (false==ExecuteAndVerify(myRegister))
					{
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}
				
				}

				//Construct new request
                myRegister = BuildXRLRegister(myRegister,4,XArbGlobal.maxUsers);

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister,HResult.XONLINE_E_ARBITRATION_TOO_MANY_XBOXES_IN_SESSION))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: N_MisMatchedFlags
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with 2 sessions with mismatched flags
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REGISTRATION_FLAGS_MISMATCH
		///		</Verify>
		/// </remarks>
		class N_MisMatchedFlags : XArbTestBase
		{
			public N_MisMatchedFlags()
			{
				Name = "N_MisMatchedFlags";
				Desc = "Use 2 sessions with mismatched flags";
			}
			override protected void Execute()
			{
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct second request
                XRLRegister myRegister2 = BuildXRLRegister(myRegister,1,ref userIndex);

				//Screw up the flags
				if (myRegister2.flags==System.UInt16.MaxValue)
				{
					myRegister2.flags--;
				}
				else
				{
					myRegister2.flags++;
				}

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister2,HResult.XONLINE_E_ARBITRATION_REGISTRATION_FLAGS_MISMATCH))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: N_MisMatchedMaxSessionSeconds
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with 2 sessions with mismatched MaxSessionSeconds
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REGISTRATION_SESSION_TIME_MISMATCH
		///		</Verify>
		/// </remarks>
		class N_MisMatchedMaxSessionSeconds : XArbTestBase
		{
			public N_MisMatchedMaxSessionSeconds()
			{
				Name = "N_MisMatchedMaxSessionSeconds";
				Desc = "Use 2 sessions with mismatched MaxSessionSeconds";
			}
			override protected void Execute()
			{
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct second request
                XRLRegister myRegister2 = BuildXRLRegister(myRegister,1,ref userIndex);

				//Screw up max session seconds
				if (myRegister2.maxSessionSeconds==System.UInt16.MaxValue)
				{
					myRegister2.maxSessionSeconds--;
				}
				else
				{
					myRegister2.maxSessionSeconds++;
				}

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister2,HResult.XONLINE_E_ARBITRATION_REGISTRATION_SESSION_TIME_MISMATCH))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: N_BadTitleId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with a bad title ID
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SERVICE_UNAVAILABLE
		///		</Verify>
		/// </remarks>
		class N_BadTitleId : XArbTestBase
		{
			public N_BadTitleId()
			{
				Name = "N_BadTitleId";
				Desc = "Use a bad TitleId";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Screw up title id
				if (myRegister.titleId==System.UInt32.MaxValue)
				{
					myRegister.titleId--;
				}
				else
				{
					myRegister.titleId++;
				}

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister,HResult.XONLINE_E_ARBITRATION_SERVICE_UNAVAILABLE))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: N_RegisterTooLate
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Try to register an xbox after someone has already reported a stats bundle
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REGISTRATION_TOO_LATE
		///		</Verify>
		/// </remarks>
		class N_RegisterTooLate : XArbTestBase
		{
			public N_RegisterTooLate()
			{
				Name = "N_RegisterTooLate";
				Desc = "Try to register an xbox after someone has already reported a stats bundle";
			}
			override protected void Execute()
			{
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle=MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Registers 4 users to guarantee that a majority/minority quorum is not reach with 1 report
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[3] = BuildXRLRegister(registers[0],1,ref userIndex);

				//Results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct new request
                XRLRegister myRegister = BuildXRLRegister(registers[0],1,ref userIndex);

				//Execute and check for error
				if (false==ExecuteAndCheckError(myRegister,HResult.XONLINE_E_ARBITRATION_REGISTRATION_TOO_LATE))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_RegisterAfterTimeExtend
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register after a session has been time extended:
		///				Register a user and console
		///				Time extend the session
		///				Register another user and console
		/// 	</Description>
		///		<Verify>
		///			Verify registration succeeds
		///		</Verify>
		/// </remarks>
		class P_RegisterAfterTimeExtend : XArbTestBase
		{
			public P_RegisterAfterTimeExtend()
			{
				Name = "P_RegisterAfterTimeExtend";
				Desc = "Register after a session has been time extended";
			}
			override protected void Execute()
			{
				uint userIndex=0;

				//Construct requst
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Execute time extend
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct new requst
                myRegister = BuildXRLRegister(myRegister,1,ref userIndex);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Register Tests: P_OneRegistrationTimesout
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Check that a single session registration times out after deterministic period of time:
		///				Register a user and console for a session with maxSessionSeconds set to 5
		///				Sleep for maxSessionSeconds (5) + XArbGlobal.serverSessionTimeoutExtensionSeconds (60) + 1 extra second
		/// 	</Description>
		///		<Verify>
		///			Verify the session is no longer found on the server through the DebugResult API
		///		</Verify>
		/// </remarks>
		class P_OneRegistrationTimesout : XArbTestBase
		{
			public P_OneRegistrationTimesout()
			{
				Name = "P_OneRegistrationTimesout";
				Desc = "Check that a single session registration times out after deterministic period of time";
			}
			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set max session seconds to something short
				myRegister.maxSessionSeconds=5;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Sleep the session time and extension away
				Thread.Sleep(1000*(myRegister.maxSessionSeconds+XArbGlobal.serverSessionTimeoutExtensionSeconds+1));

				//Verify that session is gone through debug result
				XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myRegister);
				if (null!=myDebugResultResponse)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}
	
		/// <summary>
		/// 	Register Tests: P_ResponseChecksForXboxesAndUsers
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Register maximum number of Xboxes (255) and maximum number of users (4) per box
		/// 	</Description>
		/// 	<Verify>
		///			Verify registration succeeds
		/// 	</Verify>
		/// </remarks>
		class P_ResponseChecksForXboxesAndUsers : XArbTestBase
		{
			public P_ResponseChecksForXboxesAndUsers()
			{
				Name = "P_ResponseChecksForXboxesAndUsers";
				Desc = "Check the response for everything but trust ordering of xboxes";
			}
			override protected void Execute()
			{

				uint userIndex=0;

				XRLRegister myRegister=null;
				ulong[] machinePuid = new ulong[XArbGlobal.maxXboxes];

				//Register max xboxes
				for (uint i=0; i<XArbGlobal.maxXboxes; i++)
				{
					//Construct request and store machine puid
					if (null==myRegister)
					{
                        myRegister = BuildXRLRegister(null,4,ref userIndex);
					}
					else
					{
                        myRegister = BuildXRLRegister(myRegister,4,ref userIndex);
					}
					machinePuid[i]=myRegister.machinePuid;

					//Execute and verify
					if (false==ExecuteAndVerify(myRegister))
					{
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}

					//Loop on number of xboxes registered
					for (uint x=0; x<i+1; x++)
					{
						//Check machine puid and number of users
						if ((myRegister.Response.registeredXbox[x].puid!=machinePuid[x])||
							(myRegister.Response.registeredXbox[x].registeredUserLen!=4))
						{
							ResultCode=TEST_RESULTS.FAILED;
							return;
						}

						//Loop on number of users on that box.
						for (uint u=0; u<myRegister.Response.registeredXbox[x].registeredUserLen; u++)
						{
							//Check user puids
                            if (myRegister.Response.registeredXbox[x].registeredUser[u].userId != XArbGlobal.defaultUserPuids.IndexToPuid(x * 4 + u))
							{
								ResultCode=TEST_RESULTS.FAILED;
								return;
							}
						}
					}
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Register Tests: P_ResponseCheckEqualTrust
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Register with boxes of equal trust
		/// 	</Description>
		/// 	<Verify>
		/// 		Verify registration succeeds
		///			Verify the trustworthyness of both boxes equals 0
		/// 	</Verify>
		/// </remarks>
		class P_ResponseCheckEqualTrust : XArbTestBase
		{
			public P_ResponseCheckEqualTrust()
			{
				Name = "P_ResponseCheckEqualTrust";
				Desc = "Check the response trust rating for boxes of equal trust";
			}

			override protected void Execute()
			{
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct new request
                myRegister = BuildXRLRegister(myRegister,1,ref userIndex);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that trustworthyness matches in response
				if ((myRegister.Response.registeredXbox[0].trustworthyness!=0)||
					(myRegister.Response.registeredXbox[1].trustworthyness!=0))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Register Tests: P_ResponseCheckSecondBoxHigherTrust
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Register the second box with higher trust than the first box
		/// 	</Description>
		/// 	<Verify>
		/// 		Verify registration succeeds
		///			Verify that the second box is more trustworthy than the first box
		///			Verify that the first box has a trustworthy rating of 0
		/// 	</Verify>
		/// </remarks>
		class P_ResponseCheckSecondBoxHigherTrust : XArbTestBase
		{
			public P_ResponseCheckSecondBoxHigherTrust()
			{
				Name = "P_ResponseCheckSecondBoxHigherTrust";
				Desc = "Check the response trust rating when the second xbox registered has higher trust";
			}

			override protected void Execute()
			{

				//NOTE: Even though a Fermi function is applied to trust before comparison it is relational when talking about 1 user per box
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Set trust low
				myRegister.userTrust[0]=0.1f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that trustworthyness of 1st box is 0
				if (myRegister.Response.registeredXbox[0].trustworthyness!=0)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct new request
                myRegister = BuildXRLRegister(myRegister,1,ref userIndex);

				//Set trust higher than first box
				myRegister.userTrust[0]=0.2f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that second box is more trustworthy than first box and that first box is set to a rating of 0
				if ((myRegister.Response.registeredXbox[0].trustworthyness>=myRegister.Response.registeredXbox[1].trustworthyness)||
					(myRegister.Response.registeredXbox[0].trustworthyness!=0))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}


				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Register Tests: P_ResponseCheckFirstBoxHigherTrust
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Register the first box with higher trust than the second box
		/// 	</Description>
		/// 	<Verify>
		/// 		Verify registration succeeds
		///			Verify that the first box is more trustworthy than the second box
		///			Verify that the second box has a trustworthy rating of 0
		/// 	</Verify>
		/// </remarks>
		class P_ResponseCheckFirstBoxHigherTrust : XArbTestBase
		{
			public P_ResponseCheckFirstBoxHigherTrust()
			{
				Name = "P_ResponseCheckFirstBoxHigherTrust";
				Desc = "Check the response trust rating when the first xbox registered has higher trust";
			}

			override protected void Execute()
			{

				//NOTE: Even though a Fermi function is applied to trust before comparison it is relational when talking about 1 user per box
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,ref userIndex);

				//Set first boxes trust high
				myRegister.userTrust[0]=0.2f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Check that first trust rating is 0
				if (myRegister.Response.registeredXbox[0].trustworthyness!=0)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct new request
                myRegister = BuildXRLRegister(myRegister,1,ref userIndex);

				//Set trust low
				myRegister.userTrust[0]=0.1f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that first box is more trustworthy than second box and that second box is set to a rating of 0
				if ((myRegister.Response.registeredXbox[0].trustworthyness<=myRegister.Response.registeredXbox[1].trustworthyness)||
					(myRegister.Response.registeredXbox[1].trustworthyness!=0))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Register Tests: P_ResponseCheckUnevenPlayersTrust
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Register the first box with 2 users of uneven trust (0.1f and 0.3f) and the second box 1 user of high trust (0.3f)
		/// 	</Description>
		/// 	<Verify>
		/// 		Verify registration succeeds
		///			Verify that the second box is more trustworthy than the first box
		///			Verify that the first box has a trustworthy rating of 0
		/// 	</Verify>
		/// </remarks>
		class P_ResponseCheckUnevenPlayersTrust : XArbTestBase
		{
			public P_ResponseCheckUnevenPlayersTrust()
			{
				Name = "P_ResponseCheckUnevenPlayersTrust";
				Desc = "Check the response trust rating when there are different number of users on each box";
			}

			override protected void Execute()
			{
				//NOTE: Even though the Fermi function is run on the avg trust of all users per box before comparison
				//there is no way the users on box 1 can have a better trust rating then the 1 user on box 2
				uint userIndex=0;

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,ref userIndex);

				//Set trust for user on that box low
				myRegister.userTrust[0]=0.1f;
				myRegister.userTrust[1]=0.3f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that first xbox register get trust of 0
				if (myRegister.Response.registeredXbox[0].trustworthyness!=0)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct new request
                myRegister = BuildXRLRegister(myRegister,1,ref userIndex);

				//Set trust high
				myRegister.userTrust[0]=0.3f;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Verify that second xbox has higher trust and first box is set to 0
				if ((myRegister.Response.registeredXbox[0].trustworthyness>=myRegister.Response.registeredXbox[1].trustworthyness)||
					(myRegister.Response.registeredXbox[0].trustworthyness!=0))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public FuncRegisterTests()
		{
			
            AddChild(new P_MainlineCase());
            AddChild(new N_ProtocolInvalidVersionCheck());
            AddChild(new PN_FlagPermutations());
            AddChild(new P_MaxSessionId());
            AddChild(new P_MinSessionId());
            AddChild(new P_MaxNonce());
            AddChild(new P_MinNonce());
            AddChild(new P_MaxMaxSessionSeconds());
            AddChild(new P_MinMaxSessionSeconds());
            AddChild(new N_TooBigMaxSessionSeconds());
            AddChild(new P_MaxRegistrations());
            AddChild(new N_TooManyRegistrations());
            AddChild(new N_MisMatchedFlags());
            AddChild(new N_MisMatchedMaxSessionSeconds());
            AddChild(new N_BadTitleId());
            AddChild(new P_RegisterAfterTimeExtend());
            AddChild(new P_OneRegistrationTimesout());
            AddChild(new N_RegisterTooLate());
            AddChild(new P_ResponseChecksForXboxesAndUsers());
            AddChild(new P_ResponseCheckEqualTrust());
            AddChild(new P_ResponseCheckFirstBoxHigherTrust());
            AddChild(new P_ResponseCheckSecondBoxHigherTrust());
            AddChild(new P_ResponseCheckUnevenPlayersTrust());
            AddChild(new P_XDelayCase());
			
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\FuncTimeExtendTests.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;

namespace XArbTest
{
	/// <summary>
	/// Functional Tests for Time Extend Functionality
	/// </summary>
	/// <remarks>
	/// <Description>
	/// 	<p>
	///		The time extend suite implements test cases primarily targeting the API and functionality of TimeExtend.ashx.
	///
	///		All positive time extend functionality tests verify every call to Arb succeeded by performing the following standard verifications (unless otherwise noted):
	/// 		· Verify using Arb response information the machine PUIDs and the number of Xboxes registered match what was sent
	/// 		· Verify using Arb response information the PUID and flags for each user on each Xbox match what was sent
	/// 		· Verify using Debug Response the registration's title ID, session ID, session nonce, max session seconds, machine PUID, and flags match what was sent
	/// 		· Verify using Debug Response the actual team tickets count match what was sent
	/// 		· Verify using Debug Response the total number of Xboxes registered match what was sent
	/// 		· Verify using Debug Response the user's PUID, flags, and trust rating factor
	/// 	</p>
	/// </Description>
	/// </remarks>
    [TestGroup, Owner("kbayer"), TestFrequency("Regression")]
	public class FuncTimeExtendTests : TestNode
	{
		/// <summary>
		///		Time Extend Tests: P_XDelayCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Set X-Delay with xmgmt 800 and then register 1 users on the local client
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///			Verify X-Delay in response header is present and set correctly
		///		</Verify>
		/// </remarks>
		class P_XDelayCase : XArbTestBase
		{
			public P_XDelayCase()
			{
				Name = "P_XDelayCase";
				Desc = "Tests the XDelay Feature";
			}

			override protected void Execute()
			{
				//Test doesn't apply to inhouse servers
				if (XRLTimeExtend.fFrontDoor==false)
				{
					ResultCode=TEST_RESULTS.NOT_EXECUTED;
					return;
				}

				int Xdelay= 800;
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set flags to time extendable
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,10);

				// Set X-Delay to 800ms 
				SendFDXmgmtCmd("e :xarb SetXDelay "+myTimeExtend.titleId.ToString("X")+" TimeExtend "+Xdelay);
				
				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Sleep for session + extension
				System.Threading.Thread.Sleep(1000*(myTimeExtend.maxSessionSecondsFromNow+XArbGlobal.serverSessionTimeoutExtensionSeconds+1));

				//Verify session is gone
				XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);

				if (myDebugResultResponse!=null)
				{
					ResultCode=TEST_RESULTS.FAILED;
					
				}
				else 
					ResultCode=TEST_RESULTS.PASSED;

				SendFDXmgmtCmd("e :xarb ReloadThrottleConfig");
				if(myTimeExtend.XDelay!=Xdelay)
				{
					throw new Exception("Expected X-Delay="+Xdelay+" but recived :"+myTimeExtend.XDelay);
					
				}
			}
		}


		/// <summary>
		///		Time Extend Tests: P_MainlineCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend a normal session with 1 user
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///			Verify the session is gone after the time extension expires
		///		</Verify>
		/// </remarks>
		class P_MainlineCase : XArbTestBase
		{
			public P_MainlineCase()
			{
				Name = "P_MainlineCase";
				Desc = "The typical mainline case that exposes most options";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set flags to time extendable
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,10);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Sleep for session + extension
				System.Threading.Thread.Sleep(1000*(myTimeExtend.maxSessionSecondsFromNow+XArbGlobal.serverSessionTimeoutExtensionSeconds+1));

				//Verify session is gone
				XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);

				if (myDebugResultResponse!=null)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_ProtocolInvalidVersionCheck
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with an invalid protocol version
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ProtocolInvalidVersionCheck : XArbTestBase
		{
			public N_ProtocolInvalidVersionCheck()
			{
				Name = "N_ProtocolInvalidVersionCheck";
				Desc = "Checks that the protocol version is enforced";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Screw up the protocol version
				if (myTimeExtend.protocolVersion==System.UInt16.MaxValue)
				{
					myTimeExtend.protocolVersion-=1;
				}
				else
				{
					myTimeExtend.protocolVersion+=1;
				}

				//Execute and check error
				if (false==ExecuteAndCheckError(myTimeExtend,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: PN_FlagPermutations
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register a user with each of the possible combinations of flags (currently there are none)
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///			OR
		///			Verify the server returns XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS for known invalid permutations
		///		</Verify>
		/// </remarks>
		class PN_FlagPermutations : XArbTestBase
		{
			public PN_FlagPermutations()
			{
				Name = "PN_FlagPermutations";
				Desc = "Test all flag permutations";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set flag to time extendable
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Since we know the max flag value; we increment from 0 to that valid for all valid combinations
				for (ushort i=0; i<=XRLTimeExtend.Flags.flagMask+1;i++)
				{
					//Set the flag
					myTimeExtend.flags=i;

					if (myTimeExtend.flags>XRLTimeExtend.Flags.flagMask)
					{
						//Execute and check error
						if (false==ExecuteAndCheckError(myTimeExtend,HResult.XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS))
						{
							ResultCode=TEST_RESULTS.FAILED;
							return;
						}					
					}
					else
					{
						//Execute and verify
						if (false==ExecuteAndVerify(myTimeExtend))
						{
							ResultCode=TEST_RESULTS.FAILED;
							return;
						}
					}
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_BadTitleId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Register with a bad title ID
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND (for front doors) or S_FALSE (for INH)
		///		</Verify>
		/// </remarks>
		class N_BadTitleId : XArbTestBase
		{
			public N_BadTitleId()
			{
				Name = "N_BadTitleId";
				Desc = "Use bad TitleId";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Set a bad titleid
				myTimeExtend.titleId=0;

				//Execute and check error
				uint hr=HResult.S_OK;
				if (XRLTimeExtend.fFrontDoor)
				{
					hr=HResult.XONLINE_E_ARBITRATION_SESSION_NOT_FOUND;
				}
				else
				{
					hr=HResult.S_FALSE;
				}
				if (false==ExecuteAndCheckError(myTimeExtend,hr))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_BadSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend with a bad session ID
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND (for front doors) or S_FALSE (for INH)
		///		</Verify>
		/// </remarks>
		class N_BadSessionId : XArbTestBase
		{
			public N_BadSessionId()
			{
				Name = "N_BadSessionId";
				Desc = "Use bad SessionId";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Screw up session id
				if (myTimeExtend.sessionId==System.UInt64.MaxValue)
				{
					myTimeExtend.sessionId--;
				}
				else
				{
					myTimeExtend.sessionId++;
				}

				//Execute and check error
				uint hr=HResult.S_OK;
				if (XRLTimeExtend.fFrontDoor)
				{
					hr=HResult.XONLINE_E_ARBITRATION_SESSION_NOT_FOUND;
				}
				else
				{
					hr=HResult.S_FALSE;
				}
				if (false==ExecuteAndCheckError(myTimeExtend,hr))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_BadSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend with a bad session nonce
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND (for front doors) or S_FALSE (for INH)
		///		</Verify>
		/// </remarks>
		class N_BadNonce : XArbTestBase
		{
			public N_BadNonce()
			{
				Name = "N_BadNonce";
				Desc = "Use bad nonce";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Screw up session nonce
				if (myTimeExtend.sessionNonce==System.UInt64.MaxValue)
				{
					myTimeExtend.sessionNonce--;
				}
				else
				{
					myTimeExtend.sessionNonce++;
				}

				//Execute and check error
				uint hr=HResult.S_OK;
				if (XRLTimeExtend.fFrontDoor)
				{
					hr=HResult.XONLINE_E_ARBITRATION_SESSION_NOT_FOUND;
				}
				else
				{
					hr=HResult.S_FALSE;
				}
				if (false==ExecuteAndCheckError(myTimeExtend,hr))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				ResultCode=TEST_RESULTS.PASSED;
			}
		}
		
		/// <summary>
		///		Time Extend Tests: P_MaxSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the maximum session ID value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxSessionId : XArbTestBase
		{
			public P_MaxSessionId()
			{
				Name = "P_MaxSessionId";
				Desc = "Use max SessionId";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set max session id
				myRegister.sessionId=System.UInt64.MaxValue;

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MinSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the minimum session ID value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MinSessionId : XArbTestBase
		{
			public P_MinSessionId()
			{
				Name = "P_MinSessionId";
				Desc = "Use min SessionId";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session id to max
				myRegister.sessionId=System.UInt64.MinValue;

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MaxNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the maximum session nonce value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxNonce : XArbTestBase
		{
			public P_MaxNonce()
			{
				Name = "P_MaxNonce";
				Desc = "Use max SessionNonce";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session nonce to max
				myRegister.sessionNonce=System.UInt64.MaxValue;

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MinNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the minimum session nonce value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MinNonce : XArbTestBase
		{
			public P_MinNonce()
			{
				Name = "P_MinNonce";
				Desc = "Use min SessionNonce";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set session nonce to min
				myRegister.sessionNonce=System.UInt64.MinValue;

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MinMaxSessionsSecondsFromNow
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the minimum seconds allowed (UInt16.MinValue) for the maxSessionSecondsFromNow value
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MinMaxSessionsSecondsFromNow : XArbTestBase
		{
			public P_MinMaxSessionsSecondsFromNow()
			{
				Name = "P_MinMaxSessionsSecondsFromNow";
				Desc = "Use min maxSessionSecondsFromNow";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request with min session seconds from now
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,System.UInt16.MinValue);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MaxMaxSessionsSecondsFromNow
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using the maximum seconds allowed (3600) for the maxSessionSecondsFromNow value
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxMaxSessionsSecondsFromNow : XArbTestBase
		{
			public P_MaxMaxSessionsSecondsFromNow()
			{
				Name = "P_MaxMaxSessionsSecondsFromNow";
				Desc = "Use max maxSessionSecondsFromNow";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request with max session seconds from now
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.maxSessionSeconds);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_TooBigMaxSessionsSecondsFromNow
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using more than the maximum seconds allowed (3600 + 1) for the maxSessionSecondsFromNow value
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_TooBigMaxSessionsSecondsFromNow : XArbTestBase
		{
			public N_TooBigMaxSessionsSecondsFromNow()
			{
				Name = "N_TooBigMaxSessionsSecondsFromNow";
				Desc = "Use max+1 maxSessionsSecondsFromNow";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request with too large max session seconds from now
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,(ushort)(XArbGlobal.maxSessionSeconds+1));

				//Execute and check error
				if (false==ExecuteAndCheckError(myTimeExtend,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_SessionNotTimeExtendable
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend a session that is not time extendable
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_TIME_EXTENSION_NOT_ALLOWED
		///		</Verify>
		/// </remarks>
		class N_SessionNotTimeExtendable : XArbTestBase
		{
			public N_SessionNotTimeExtendable()
			{
				Name = "N_SessionNotTimeExtendable";
				Desc = "Send time extend for a session that is not time extendable";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Unset time extend flag
				unchecked{myRegister.flags&= (ushort)(~XRLRegister.Flags.TimeExtendable);}

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and check error
				if (false==ExecuteAndCheckError(myTimeExtend,HResult.XONLINE_E_ARBITRATION_TIME_EXTENSION_NOT_ALLOWED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_ShrinkSessionTime
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using a maxSessionSecondsFromNow (5) that is smaller than original maxSessionSeconds (20)
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_ShrinkSessionTime : XArbTestBase
		{
			public P_ShrinkSessionTime()
			{
				Name = "P_ShrinkSessionTime";
				Desc = "Use maxSessionSecondsFromNow that is smaller than original maxSessionSeconds";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Set max session seconds to know value
				myRegister.maxSessionSeconds=20;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request with max session seconds from now set to lower than know value
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,5);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_ExpandSessionTime
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend using a maxSessionSecondsFromNow (35) that is larger than original maxSessionSeconds (20)
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_ExpandSessionTime : XArbTestBase
		{
			public P_ExpandSessionTime()
			{
				Name = "P_ExpandSessionTime";
				Desc = "Use maxSessionSecondsFromNow that is larger than original maxSessionSeconds";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Set max session seconds to know value
				myRegister.maxSessionSeconds=20;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request with max session seconds from now set to larger than know value
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,35);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_LastInExtendsSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend with the last box to register
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_LastInExtendsSession : XArbTestBase
		{
			public P_LastInExtendsSession()
			{
				Name = "P_LastInExtendsSession";
				Desc = "Last box to register extends session";
			}
			override protected void Execute()
			{

				XRLRegister myRegister = null;
				for (uint i=0; i<4; i++)
				{
					//Construct request
					if (myRegister==null)
					{
                        myRegister = BuildXRLRegister(null,1,i);
					}
					else
					{
                        myRegister = BuildXRLRegister(myRegister,1,i);
					}

					//Set time extend flag
					myRegister.flags|=XRLRegister.Flags.TimeExtendable;

					//Execute and verify
					if (false==ExecuteAndVerify(myRegister))
					{
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_FirstInExtendsSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend with the first box to register
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_FirstInExtendsSession : XArbTestBase
		{
			public P_FirstInExtendsSession()
			{
				Name = "P_FirstInExtendsSession";
				Desc = "First box to register extends session";
			}
			override protected void Execute()
			{

				XRLRegister firstRegister = null;
				XRLRegister myRegister = null;
				for (uint i=0; i<4; i++)
				{
					//Store first registration
					if (myRegister==null)
					{
                        firstRegister = myRegister = BuildXRLRegister(null,1,i);
					}
					else
					{
                        myRegister = BuildXRLRegister(myRegister,1,i);
					}

					//Set time extend flag
					myRegister.flags|=XRLRegister.Flags.TimeExtendable;

					//Execute and verify
					if (false==ExecuteAndVerify(myRegister))
					{
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(firstRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_MultipleTimeExtends
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend twice
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_MultipleTimeExtends : XArbTestBase
		{
			public P_MultipleTimeExtends()
			{
				Name = "P_MultipleTimeExtends";
				Desc = "Extend session time more than once";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow*2);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: P_ExtendWithinExtensionWindow
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend the session after the maxSessionSeconds (10) is expired but not before SessionTimeoutExtensionSeconds (60) is expired
		/// 	</Description>
		///		<Verify>
		///			Verify time extend succeeds
		///		</Verify>
		/// </remarks>
		class P_ExtendWithinExtensionWindow : XArbTestBase
		{
			public P_ExtendWithinExtensionWindow()
			{
				Name = "P_ExtendWithinExtensionWindow";
				Desc = "Extend the session after the maxSessionSeconds is expired but not before SessionTimeoutExtensionSeconds is expired";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Set max session seconds to short value
				myRegister.maxSessionSeconds=10;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Wait til session times out and we are into the extension time
				System.Threading.Thread.Sleep(1000*myRegister.maxSessionSeconds);

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and verify
				if (false==ExecuteAndVerify(myTimeExtend))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_ExtendExpiredSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend a session that has passed the SessionTimeoutExtensionSeconds (60) mark
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND
		///		</Verify>
		/// </remarks>
		class N_ExtendExpiredSession : XArbTestBase
		{
			public N_ExtendExpiredSession()
			{
				Name = "N_ExtendExpiredSession";
				Desc = "Try to extend a session that has expired";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Set max session seconds to 0
				myRegister.maxSessionSeconds=0;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Wait for timeout extension period + 1 second
				System.Threading.Thread.Sleep(1000*(XArbGlobal.serverSessionTimeoutExtensionSeconds+1));

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Execute and check error
				uint hr=HResult.S_OK;
				if (XRLTimeExtend.fFrontDoor)
				{
					hr=HResult.XONLINE_E_ARBITRATION_SESSION_NOT_FOUND;
				}
				else
				{
					hr=HResult.S_FALSE;
				}
				if (false==ExecuteAndCheckError(myTimeExtend,hr))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
								
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Time Extend Tests: N_InvalidMachineAccount
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Time extend attempt by an Xbox not in the session
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND
		///		</Verify>
		/// </remarks>
		class N_InvalidMachineAccount : XArbTestBase
		{
			public N_InvalidMachineAccount()
			{
				Name = "N_InvalidMachineAccount";
                Desc = "Have a machine not in the session try to extend time.  Fails due to bug 175188";
			}
			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Set time extend flag
				myRegister.flags|=XRLRegister.Flags.TimeExtendable;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLTimeExtend myTimeExtend = BuildXRLTimeExtend(myRegister,XArbGlobal.defaultMaxSessionSecondsFromNow);

				//Screw up machine puid
                myTimeExtend.machinePuid=RandGen.NextPuid();

				//Execute and check error
				if (false==ExecuteAndCheckError(myTimeExtend,HResult.XONLINE_E_ARBITRATION_NEED_TO_REGISTER_FIRST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public FuncTimeExtendTests()
		{
            AddChild(new P_MainlineCase());
            AddChild(new N_ProtocolInvalidVersionCheck());
            AddChild(new PN_FlagPermutations());
            AddChild(new N_BadTitleId());
            AddChild(new N_BadSessionId());
            AddChild(new N_BadNonce());
            AddChild(new P_MaxSessionId());
            AddChild(new P_MinSessionId());
            AddChild(new P_MaxNonce());
            AddChild(new P_MinNonce());
            AddChild(new P_MaxMaxSessionsSecondsFromNow());
            AddChild(new P_MinMaxSessionsSecondsFromNow());
            AddChild(new N_TooBigMaxSessionsSecondsFromNow());
            AddChild(new N_SessionNotTimeExtendable());
            AddChild(new P_ShrinkSessionTime());
            AddChild(new P_ExpandSessionTime());
            AddChild(new P_LastInExtendsSession());
            AddChild(new P_FirstInExtendsSession());
            AddChild(new P_MultipleTimeExtends());
            AddChild(new P_ExtendWithinExtensionWindow());
            AddChild(new N_ExtendExpiredSession());
            AddChild(new N_InvalidMachineAccount());
            AddChild(new P_XDelayCase());
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\FuncReportResultTests.cs ===
using System;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;

namespace XArbTest
{
	/// <summary>
	/// Functional Tests for Report Results Functionality
	/// </summary>
	/// <remarks>
	/// <Description>
	/// 	<p>
	///		The report results suite implements test cases primarily targeting the API and functionality of ReportResult.ashx.
	///
	///		All positive report results functionality tests verify every call to Arb succeeded by performing the following standard verifications (unless otherwise noted):
	/// 		· Verify using Arb response information the machine PUIDs and the number of Xboxes registered match what was sent
	/// 		· Verify using Arb response information the PUID and flags for each user on each Xbox match what was sent
	/// 		· Verify using Debug Response the registration's title ID, session ID, session nonce, max session seconds, machine PUID, and flags match what was sent
	/// 		· Verify using Debug Response the actual team tickets count match what was sent
	/// 		· Verify using Debug Response the total number of Xboxes registered match what was sent
	/// 		· Verify using Debug Response the user's PUID, flags, and trust rating factor
	/// 	</p>
	/// </Description>
	/// </remarks>
    [TestGroup, Owner("kbayer"), TestFrequency("Regression")]
	public class FuncReportResultTests : TestNode
	{
		/// <summary>
		///		Report Result Tests: P_XDelayCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Set X-Delay with xmgmt to 900 and then register 4 users/Xboxes
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///			Verify X-Delay in response header is present and set correctly
		///		</Verify>
		/// </remarks>
		class P_XDelayCase : XArbTestBase
		{
			public P_XDelayCase()
			{
				Name = "P_XDelayCase";
				Desc = "Tests the XDelay Feature";
			}
			override protected void Execute()
			{
				//Test doesn't apply to inhouse servers
				if (XRLReportResult.fFrontDoor==false)
				{
					ResultCode=TEST_RESULTS.NOT_EXECUTED;
					return;
				}

				int Xdelay= 900;
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				TournamentBundle queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.IsTournament;
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[1].flags|=XRLRegister.Flags.IsTournament;
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
				registers[2].flags|=XRLRegister.Flags.IsTournament;
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);
				registers[3].flags|=XRLRegister.Flags.IsTournament;

				//results
				results[0] = BuildXRLReportResult(registers[0],null,queryBundle,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],null,queryBundle,null,null,null,null);
				results[2] = BuildXRLReportResult(registers[2],null,queryBundle,null,null,null,null);
				results[3] = BuildXRLReportResult(registers[3],null,queryBundle,null,null,null,null);

				// Set X-Delay to 900ms 
				SendFDXmgmtCmd("e :xarb SetXDelay "+registers[0].titleId.ToString("X")+" ReportResult "+Xdelay);
				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					
				}
				else 
					ResultCode=TEST_RESULTS.PASSED;

				SendFDXmgmtCmd("e :xarb ReloadThrottleConfig");
				if(results[0].XDelay!=Xdelay)
				{
					throw new Exception("Expected X-Delay="+Xdelay+" but recived :"+results[0].XDelay);
					
				}

				
			}
		}

		/// <summary>
		///		Report Result Tests: N_PostResultsTwice
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with lost connectivity info using both TCP and UDP
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED for both reports
		///		</Verify>
		/// </remarks>
		class N_PostResultsTwice : XArbTestBase
		{
			public N_PostResultsTwice()
			{
				Name = "N_PostResultsTwice";
				Desc = "Put a machine puid in the list of boxes I lost connectivity to that is not in the session first using tcp and then using UDP make sure we get same error back";
			}

			override protected void Execute()
			{

				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				ulong[] mpuids=new ulong[1];
                mpuids[0]=RandGen.NextPuid();
				LostConnectivityInfo lci = MakeLostConnectivityInfo(mpuids);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,lci);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				// resubmit 
				results[0].transport = FDTransaction.Transports.UDP;
				if((results[0].Execute()==true) && (results[0].XErr==HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					ResultCode=TEST_RESULTS.PASSED;
					return;
				}

				ResultCode=TEST_RESULTS.FAILED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MainlineCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 4 Xboxes
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MainlineCase : XArbTestBase
		{
			public P_MainlineCase()
			{
				Name = "P_MainlineCase";
				Desc = "The typical mainline case that exposes most options";
			}
			override protected void Execute()
			{
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				TournamentBundle queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.IsTournament;
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[1].flags|=XRLRegister.Flags.IsTournament;
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
				registers[2].flags|=XRLRegister.Flags.IsTournament;
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);
				registers[3].flags|=XRLRegister.Flags.IsTournament;

				//results
				results[0] = BuildXRLReportResult(registers[0],null,queryBundle,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],null,queryBundle,null,null,null,null);
				results[2] = BuildXRLReportResult(registers[2],null,queryBundle,null,null,null,null);
				results[3] = BuildXRLReportResult(registers[3],null,queryBundle,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MajQ_4Users_4UDP_4Reports
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 4 Xboxes all with majority quorum and using UDP
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MajQ_4Users_4UDP_4Reports : XArbTestBase
		{
			public P_MajQ_4Users_4UDP_4Reports()
			{
				Name = "P_MajQ_4Users_4UDP_4Reports";
				Desc = "All users in a session report with UDP";
			}
			override protected void Execute()
			{
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,null,null,null);
				results[2] = BuildXRLReportResult(registers[2],statsBundle,null,null,null,null,null);
				results[3] = BuildXRLReportResult(registers[3],statsBundle,null,null,null,null,null);
				results[0].transport=results[1].transport=results[2].transport=results[3].transport=FDTransaction.Transports.UDP;

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MajQ_4Users_1UDP_4Reports
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 4 Xboxes with majority quorum, 3 TCP and 1 UDP
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MajQ_4Users_1UDP_4Reports : XArbTestBase
		{
			public P_MajQ_4Users_1UDP_4Reports()
			{
				Name = "P_MajQ_4Users_1UDP_4Reports";
				Desc = "One user in a session reports with UDP";
			}
			override protected void Execute()
			{
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,null,null,null);
				results[2] = BuildXRLReportResult(registers[2],statsBundle,null,null,null,null,null);
				results[3] = BuildXRLReportResult(registers[3],statsBundle,null,null,null,null,null);
				results[0].transport=FDTransaction.Transports.UDP;

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MajQ_4Users_1UDP_4Reports_Tournament
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 4 Xboxes with majority quorum, 3 TCP and 1 UDP in a tournament session
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MajQ_4Users_1UDP_4Reports_Tournament : XArbTestBase
		{
			public P_MajQ_4Users_1UDP_4Reports_Tournament()
			{
				Name = "P_MajQ_4Users_1UDP_4Reports_Tournament";
				Desc = "One user in a tournament session reports with UDP";
			}
			override protected void Execute()
			{
				const uint xboxes=4;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle tournamentBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
				registers[0].flags |= XRLRegister.Flags.IsTournament;
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[1].flags |= XRLRegister.Flags.IsTournament;
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
				registers[2].flags |= XRLRegister.Flags.IsTournament;
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);
				registers[3].flags |= XRLRegister.Flags.IsTournament;

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,tournamentBundle,null,null,null,null);
				results[0].flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
				results[0].transport=FDTransaction.Transports.UDP;
				results[1] = BuildXRLReportResult(registers[1],statsBundle,tournamentBundle,null,null,null,null);
				results[1].flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
				results[2] = BuildXRLReportResult(registers[2],statsBundle,tournamentBundle,null,null,null,null);
				results[2].flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
				results[3] = BuildXRLReportResult(registers[3],statsBundle,tournamentBundle,null,null,null,null);
				results[3].flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					System.Diagnostics.Debug.WriteLine(registers[0].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(registers[1].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(registers[2].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(registers[3].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(results[0].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(results[1].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(results[2].XErr.ToString());
					System.Diagnostics.Debug.WriteLine(results[3].XErr.ToString());
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_Prob_3Users_1UDP_1Report
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results from 1 user in a 3 Xbox session using UDP
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_Prob_3Users_1UDP_1Report : XArbTestBase
		{
			public P_Prob_3Users_1UDP_1Report()
			{
				Name = "P_Prob_3Users_1UDP_1Report";
				Desc = "One user in a session report with UDP";
			}
			override protected void Execute()
			{
				const uint xboxes=3;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
				registers[0].maxSessionSeconds=registers[1].maxSessionSeconds=registers[2].maxSessionSeconds=10;

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);
				results[0].transport=FDTransaction.Transports.UDP;

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_Prob_2Users_DiffBundles
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 2 Xboxes with 2 different bundles 50% each way
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_Prob_2Users_DiffBundles : XArbTestBase
		{
			public P_Prob_2Users_DiffBundles()
			{
				Name = "P_Prob_2Users_DiffBundles";
				Desc = "2 different bundles 50% each way";
			}
			override protected void Execute()
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle1 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				StatsBundle statsBundle2 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle1,null,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle2,null,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MajQ_2Users_DiffBundles
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for 2 Xboxes with 2 different bundles +50% towards 1 bundle
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MajQ_2Users_DiffBundles : XArbTestBase
		{
			public P_MajQ_2Users_DiffBundles()
			{
				Name = "P_MajQ_2Users_DiffBundles";
				Desc = "2 different bundles +50% towards 1 bundle";
			}
			override protected void Execute()
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle1 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				StatsBundle statsBundle2 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
				registers[0].userTrust[0]+=0.1f;
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle1,null,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle2,null,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MajQ_MaxUsers
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for max Xboxes (255) with max users (4 per Xbox, total of 1020) with a majority quorum
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MajQ_MaxUsers : XArbTestBase
		{
			public P_MajQ_MaxUsers()
			{
				Name = "P_MajQ_MaxUsers";
				Desc = "Max users Majority Quorum";
			}
			override protected void Execute()
			{
				const uint xboxes=XArbGlobal.maxXboxes;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Register max xboxes 
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,4,ref userIndex);
				for (uint i=1; i<XArbGlobal.maxXboxes; i++)
				{
                    registers[i] = BuildXRLRegister(registers[0],4,ref userIndex);
				}

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);
				for (uint i=1; i<XArbGlobal.maxXboxes; i++)
				{
					results[i] = BuildXRLReportResult(registers[i],statsBundle,null,null,null,null,null);
				}

				//Execute and verify
			
				if (false==ExecuteAndVerify(registers,results,HResult.S_OK, new TimeSpan(0,0,0,5,0)))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MinQ_3Users_1Report
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for a 3 Xbox session with a minority quorum of 1 Xbox
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MinQ_3Users_1Report : XArbTestBase
		{
			public P_MinQ_3Users_1Report()
			{
				Name = "P_MinQ_3Users_1Report";
				Desc = "Standard minority quorum";
			}
			override protected void Execute()
			{
				const uint xboxes=3;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[0].maxSessionSeconds=registers[1].maxSessionSeconds=registers[2].maxSessionSeconds=10;

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_ProtocolInvalidVersionCheck
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for a single Xbox with 2 users with an invalid protocol version
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ProtocolInvalidVersionCheck : XArbTestBase
		{
			public N_ProtocolInvalidVersionCheck()
			{
				Name = "N_ProtocolInvalidVersionCheck";
				Desc = "Checks that the protocol version is enforced";
			}

			override protected void Execute()
			{
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);

				//Screw up protocol version
				if (myReportResult.protocolVersion==System.UInt16.MaxValue)
				{
					myReportResult.protocolVersion--;
				}
				else
				{
					myReportResult.protocolVersion++;
				}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_BadTitleId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results for a single Xbox with 2 users using a bad title ID
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_SESSION_NOT_FOUND
		///		</Verify>
		/// </remarks>
		class N_BadTitleId : XArbTestBase
		{
			public N_BadTitleId()
			{
				Name = "N_BadTitleId";
				Desc = "Use bad TitleId";
			}

			override protected void Execute()
			{
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);

				//Screw up titleid
				if (myReportResult.titleId==System.UInt32.MaxValue)
				{
					myReportResult.titleId--;
				}
				else
				{
					myReportResult.titleId++;
				}

				//Execute and check error
				uint hr=HResult.S_OK;
				if (XRLReportResult.fFrontDoor)
				{
					hr=HResult.XONLINE_E_ARBITRATION_SESSION_NOT_FOUND;
				}
				else
				{
					hr=HResult.S_FALSE;
				}
				if (false==ExecuteAndCheckError(myReportResult,hr))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results using the maximum session ID value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxSessionId : XArbTestBase
		{
			public P_MaxSessionId()
			{
				Name = "P_MaxSessionId";
				Desc = "Use max session id";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				registers[0].sessionId=System.UInt64.MaxValue;
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MinSessionId
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results using the minimum session ID value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MinSessionId : XArbTestBase
		{
			public P_MinSessionId()
			{
				Name = "P_MinSessionId";
				Desc = "Use min session id";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				registers[0].sessionId=System.UInt64.MinValue;
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results using the maximum session nonce value of UInt64.MaxValue
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxSessionNonce : XArbTestBase
		{
			public P_MaxSessionNonce()
			{
				Name = "P_MaxSessionNonce";
				Desc = "Use max session nonce";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				registers[0].sessionNonce=System.UInt64.MaxValue;
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MinNonce
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results using the minimum session nonce value of UInt64.MinValue
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MinSessionNonce : XArbTestBase
		{
			public P_MinSessionNonce()
			{
				Name = "P_MinSessionNonce";
				Desc = "Use min session nonce";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				registers[0].sessionNonce=System.UInt64.MinValue;
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_ReportTwiceFromSameBox
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results twice from the same box
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REPORT_ALREADY_CALLED
		///		</Verify>
		/// </remarks>
		class N_ReportTwiceFromSameBox : XArbTestBase
		{
			public N_ReportTwiceFromSameBox()
			{
				Name = "N_ReportTwiceFromSameBox";
				Desc = "Report a bundle twice from same box";
			}

			override protected void Execute()
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes-1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,ref userIndex);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//xbox 2
                registers[1] = BuildXRLRegister(registers[0],2,ref userIndex);

				//Execute and verify registrations
				if ((false==ExecuteAndVerify(registers[0])) || (false==ExecuteAndVerify(registers[1])))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Report results from 1 user
				if (false==results[0].Execute())
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Execute and check error
				if (false==ExecuteAndCheckError(results[0],HResult.XONLINE_E_ARBITRATION_REPORT_ALREADY_CALLED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_InvalidNumUsers
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results from a single user/xbox session
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_1_XBOX_1_USER_SESSION_NOT_ALLOWED
		///		</Verify>
		/// </remarks>
		class N_InvalidNumUsers : XArbTestBase
		{
			public N_InvalidNumUsers()
			{
				Name = "N_InvalidNumUsers";
				Desc = "Register a single user on one xbox and have him try to submit stats";
			}

			override protected void Execute()
			{
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,1,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);				

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_1_XBOX_1_USER_SESSION_NOT_ALLOWED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_InvalidMachineAccount
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results from an Xbox that is not registered
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_NEED_TO_REGISTER_FIRST
		///		</Verify>
		/// </remarks>
		class N_InvalidMachineAccount : XArbTestBase
		{
			public N_InvalidMachineAccount()
			{
				Name = "N_InvalidMachineAccount";
                Desc = "Submit results from an xbox that is not registered. Fails due to bug 175188";
			}

			override protected void Execute()
			{
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);				
                myReportResult.machinePuid=RandGen.NextPuid();

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_NEED_TO_REGISTER_FIRST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_LostConnectivityToMyself
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results including lost connectivity to own Xbox
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_LostConnectivityToMyself : XArbTestBase
		{
			public N_LostConnectivityToMyself()
			{
				Name = "N_LostConnectivityToMyself";
				Desc = "Put own machine's puid in the list of boxes I lost connectivity to";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				ulong[] mpuids=new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				LostConnectivityInfo lci = MakeLostConnectivityInfo(mpuids);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,lci);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_LostConnectivityToXboxNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results including lost connectivity to an Xbox not in the session
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_LostConnectivityToXboxNotInSession : XArbTestBase
		{
			public N_LostConnectivityToXboxNotInSession()
			{
				Name = "N_LostConnectivityToXboxNotInSession";
				Desc = "Put a machine puid in the list of boxes I lost connectivity to that is not in the session";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				ulong[] mpuids=new ulong[1];
                mpuids[0]=RandGen.NextPuid();
				LostConnectivityInfo lci = MakeLostConnectivityInfo(mpuids);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,lci);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: N_Type1SuspiciousInfoXboxNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random machine puid in the list of boxes in type 1 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type1SuspiciousInfoXboxNotInSession : XArbTestBase
		{
			public N_Type1SuspiciousInfoXboxNotInSession()
			{
				Name = "N_Type1SuspiciousInfoXboxNotInSession";
				Desc = "Put a random machine puid in the list of boxes in type 1 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoXboxNotInSession runme = new SuspiciousInfoXboxNotInSession();
				ResultCode = runme.Execute(1);
			}
		}

		/// <summary>
		///		Report Result Tests: N_Type2SuspiciousInfoXboxNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random machine puid in the list of boxes in type 2 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type2SuspiciousInfoXboxNotInSession : XArbTestBase
		{
			public N_Type2SuspiciousInfoXboxNotInSession()
			{
				Name = "N_Type2SuspiciousInfoXboxNotInSession";
				Desc = "Put a random machine puid in the list of boxes in type 2 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoXboxNotInSession runme = new SuspiciousInfoXboxNotInSession();
				ResultCode = runme.Execute(2);
			}
		}

		/// <summary>
		///		Report Result Tests: N_Type3SuspiciousInfoXboxNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random machine puid in the list of boxes in type 3 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type3SuspiciousInfoXboxNotInSession : XArbTestBase
		{
			public N_Type3SuspiciousInfoXboxNotInSession()
			{
				Name = "N_Type3SuspiciousInfoXboxNotInSession";
				Desc = "Put a random machine puid in the list of boxes in type 3 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoXboxNotInSession runme = new SuspiciousInfoXboxNotInSession();
				ResultCode = runme.Execute(3);
			}
		}

		/// <summary>
		/// 	Report Result Helper: SuspiciousInfoXboxNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class SuspiciousInfoXboxNotInSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(uint type)
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				ulong[] mpuids=new ulong[1];
                mpuids[0]=RandGen.NextPuid();
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",mpuids,null);
				switch (type)
				{
					case 1:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,si,null,null,null);				
						break;
					case 2:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,si,null,null);				
						break;
					case 3:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,si,null);				
						break;
				}

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					return TEST_RESULTS.FAILED;
				}

				return TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: N_Type1SuspiciousInfoUserNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random user puid in the list of boxes in type 1 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type1SuspiciousInfoUserNotInSession : XArbTestBase
		{
			public N_Type1SuspiciousInfoUserNotInSession()
			{
				Name = "N_Type1SuspiciousInfoUserNotInSession";
				Desc = "Put a random user puid in the list of boxes in type 1 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoUserNotInSession runme = new SuspiciousInfoUserNotInSession();
				ResultCode = runme.Execute(1);
			}
		}

		/// <summary>
		///		Report Result Tests: N_Type2SuspiciousInfoUserNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random user puid in the list of boxes in type 2 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type2SuspiciousInfoUserNotInSession : XArbTestBase
		{
			public N_Type2SuspiciousInfoUserNotInSession()
			{
				Name = "N_Type2SuspiciousInfoUserNotInSession";
				Desc = "Put a random user puid in the list of boxes in type 2 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoUserNotInSession runme = new SuspiciousInfoUserNotInSession();
				ResultCode = runme.Execute(2);
			}
		}

		/// <summary>
		///		Report Result Tests: N_Type3SuspiciousInfoUserNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with random user puid in the list of boxes in type 3 suspicious info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_Type3SuspiciousInfoUserNotInSession : XArbTestBase
		{
			public N_Type3SuspiciousInfoUserNotInSession()
			{
				Name = "N_Type3SuspiciousInfoUserNotInSession";
				Desc = "Put a random user puid in the list of boxes in type 3 suspicious info";
			}

			override protected void Execute()
			{
				SuspiciousInfoUserNotInSession runme = new SuspiciousInfoUserNotInSession();
				ResultCode = runme.Execute(3);
			}
		}

		/// <summary>
		/// 	Report Result Helper: SuspiciousInfoUserNotInSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class SuspiciousInfoUserNotInSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(uint type)
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				ulong[] upuids=new ulong[1];
                upuids[0]=RandGen.NextPuid();
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",null,upuids);
				switch (type)
				{
					case 1:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,si,null,null,null);				
						break;
					case 2:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,si,null,null);				
						break;
					case 3:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,si,null);				
						break;
				}

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED))
				{
					return TEST_RESULTS.FAILED;
				}

				return TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxLostConnectivity
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with the maximum number of lost connectivity puids (254)
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxLostConnectivity : XArbTestBase
		{
			public P_MaxLostConnectivity()
			{
				Name = "P_MaxLostConnectivity";
				Desc = "Submit the max lost connectivity puids";
			}

			override protected void Execute()
			{
				const uint xboxes=XArbGlobal.maxXboxes;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				ulong[] machinePuid = new ulong[XArbGlobal.maxXboxes-1];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Register max xboxes and store all but 1 puid
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,4,ref userIndex);
				for (uint i=1; i<XArbGlobal.maxXboxes; i++)
				{
                    registers[i] = BuildXRLRegister(registers[0],4,ref userIndex);
					machinePuid[i-1]=registers[i].machinePuid;
				}

				//xbox 1
				LostConnectivityInfo lci = MakeLostConnectivityInfo(machinePuid);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,lci);

				//Execute and verify (no bundle expected to be submitted)
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_Type1MaxSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with the maximum amount of type 1 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_Type1MaxSuspiciousInfo : XArbTestBase
		{
			public P_Type1MaxSuspiciousInfo()
			{
				Name = "P_Type1MaxSuspiciousInfo";
				Desc = "Put max data into type 1 suspicious info";
			}

			override protected void Execute()
			{
				MaxSuspiciousInfo runme = new MaxSuspiciousInfo();
				ResultCode = runme.Execute(1);
			}
		}

		/// <summary>
		///		Report Result Tests: P_Type2MaxSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with the maximum amount of type 2 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_Type2MaxSuspiciousInfo : XArbTestBase
		{
			public P_Type2MaxSuspiciousInfo()
			{
				Name = "P_Type2MaxSuspiciousInfo";
				Desc = "Put max data into type 2 suspicious info";
			}

			override protected void Execute()
			{
				MaxSuspiciousInfo runme = new MaxSuspiciousInfo();
				ResultCode = runme.Execute(2);
			}
		}

		/// <summary>
		///		Report Result Tests: P_Type3MaxSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with the maximum amount of type 3 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_Type3MaxSuspiciousInfo : XArbTestBase
		{
			public P_Type3MaxSuspiciousInfo()
			{
				Name = "P_Type3MaxSuspiciousInfo";
				Desc = "Put max data into type 3 suspicious info";
			}

			override protected void Execute()
			{
				MaxSuspiciousInfo runme = new MaxSuspiciousInfo();
				ResultCode = runme.Execute(3);
			}
		}

		/// <summary>
		/// 	Report Result Helper: MaxSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class MaxSuspiciousInfo : XArbTestBase
		{
			override protected void Execute(){}
			public ServerTestFramework.TEST_RESULTS Execute(uint type)
			{
				const uint xboxes=XArbGlobal.maxXboxes;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				ulong[] machinePuid = new ulong[xboxes];
				ulong[] userPuid = new ulong[xboxes];

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//Register max xboxes and store them all along with first user
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,4,ref userIndex);
				machinePuid[0]=registers[0].machinePuid;
				userPuid[0]=registers[0].userPuid[0];
				for (uint i=1; i<XArbGlobal.maxXboxes; i++)
				{
                    registers[i] = BuildXRLRegister(registers[0],4,ref userIndex);
					machinePuid[i]=registers[i].machinePuid;
					userPuid[i]=registers[i].userPuid[0];
				}

				byte[] message = new byte[System.Byte.MaxValue];
				RandGen.NextBytes(message);
				SuspiciousInfo si = MakeSuspiciousInfo(message,machinePuid,userPuid);
				results[0] = null;
				switch(type)
				{
					case 1:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,si,null,null,null);
						break;
					case 2:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,si,null,null);
						break;
					case 3:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,si,null);
						break;
				}

				//Execute and verify (no bundle expected to be submitted)
				if (false==ExecuteAndVerify(registers,results))
				{
					return TEST_RESULTS.FAILED;
				}

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxStatsBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a maximum sized stats bundle (200,000 bytes)
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxStatsBundle : XArbTestBase
		{
			public P_MaxStatsBundle()
			{
				Name = "P_MaxStatsBundle";
				Desc = "Use max stats package";
			}

			override protected void Execute()
			{
				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.maxStatsBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_TooBigStatsBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a sized stats bundle larger than the max size (200,000 + 1 bytes)
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REPORT_TOO_LARGE
		///		</Verify>
		/// </remarks>
		class N_TooBigStatsBundle : XArbTestBase
		{
			public N_TooBigStatsBundle()
			{
				Name = "N_TooBigStatsBundle";
				Desc = "Use max + 1 stats package";
			}

			override protected void Execute()
			{

				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.maxStatsBundleSize+1);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);				
				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_REPORT_TOO_LARGE))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxTournamentBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a maximum sized tournament bundle (100,000 bytes)
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_MaxTournamentBundle : XArbTestBase
		{
			public P_MaxTournamentBundle()
			{
				Name = "P_MaxTournamentBundle";
				Desc = "Use max tournament package";
			}

			override protected void Execute()
			{

				const uint xboxes=1;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];

				TournamentBundle tournamentBundle = MakeTournamentBundle(XArbGlobal.maxTournamentBundleSize);

				//xbox 1
                registers[0] = BuildXRLRegister(null,2,0);
				registers[0].flags|=XRLRegister.Flags.IsTournament;
				results[0] = BuildXRLReportResult(registers[0],null,tournamentBundle,null,null,null,null);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_TooBigTournamentBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a sized tournament bundle larger than the max size (100,000 + 1)
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_REPORT_TOO_LARGE
		///		</Verify>
		/// </remarks>
		class N_TooBigTournamentBundle : XArbTestBase
		{
			public N_TooBigTournamentBundle()
			{
				Name = "N_TooBigTournamentBundle";
				Desc = "Use max + 1 tournament package";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);
				myRegister.flags|=XRLRegister.Flags.IsTournament;

				TournamentBundle queryBundle = MakeTournamentBundle(XArbGlobal.maxTournamentBundleSize+1);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,queryBundle,null,null,null,null);				

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_REPORT_TOO_LARGE))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: P_MaxEverything
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with every byte in the wiredata filled (max out all data fields)
		/// 	</Description>
		///		<Verify>
		///			Verify this client's machine and user registration information is correct in the response
		///			Verify the debug results match the details of the response
		///		</Verify>
		/// </remarks>
		class P_MaxEverything : XArbTestBase
		{
			public P_MaxEverything()
			{
				Name = "P_MaxEverything";
				Desc = "Sumbit report with every byte in the wiredata filled";
			}

			override protected void Execute()
			{
				const uint xboxes=XArbGlobal.maxXboxes;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				ulong[] machinePuid = new ulong[xboxes];
				ulong[] machinePuid2 = new ulong[xboxes-1];
				ulong[] userPuid = new ulong[xboxes];
	
				//Register max xboxes and store all but 1 puid
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,4,ref userIndex);
				machinePuid[0]=registers[0].machinePuid;
				userPuid[0]=registers[0].userPuid[0];
				registers[0].flags|=XRLRegister.Flags.IsTournament;
				for (uint i=1; i<XArbGlobal.maxXboxes; i++)
				{
                    registers[i] = BuildXRLRegister(registers[0],4,ref userIndex);
					machinePuid2[i-1]=registers[i].machinePuid;
					machinePuid[i]=registers[i].machinePuid;
					userPuid[i]=registers[i].userPuid[0];
					registers[i].flags|=XRLRegister.Flags.IsTournament;
				}

				//xbox 1
				byte[] message = new byte[System.Byte.MaxValue];
				RandGen.NextBytes(message);
				//BUGBUG 26651: Raise max allowed arbitration package size for Xbox 360 to 200K and also allow 100K tournament bundles
				// This bug will be fixed when comps releases Xbox 360 client APIs, this test case should update
				// to accommodate when it does.
				// The hardcoded 100000 should be XArbGlobal.maxStatsBundleSize (currently 200000)
				StatsBundle statsBundle = MakeStatsBundle(100000);
				TournamentBundle tournamentBundle = MakeTournamentBundle(XArbGlobal.maxTournamentBundleSize);
				LostConnectivityInfo lci = MakeLostConnectivityInfo(machinePuid2);
				SuspiciousInfo si = MakeSuspiciousInfo(message,machinePuid,userPuid);
				results[0] = BuildXRLReportResult(registers[0],statsBundle,tournamentBundle,si,si,si,lci);

				//Execute and verify (no bundle expected to be submitted)
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateXboxLostConnectivity
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results including duplicated lost connectivity info for an Xbox
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateXboxLostConnectivity : XArbTestBase
		{
			public N_DuplicateXboxLostConnectivity()
			{
				Name = "N_DuplicateXboxLostConnectivity";
				Desc = "Put a machine in lostConnectivityInfo twice";
			}

			override protected void Execute()
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//construct scenario
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,2,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],2,ref userIndex);
				ulong[] mpuids=new ulong[2];
				mpuids[0]=mpuids[1]=registers[1].machinePuid;
				LostConnectivityInfo lci = MakeLostConnectivityInfo(mpuids);

				results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,null,lci);				
				results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,null,null,lci);				

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateXboxType1SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 1 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateXboxType1SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateXboxType1SuspiciousInfo()
			{
				Name = "N_DuplicateXboxType1SuspiciousInfo";
				Desc = "Put a machine in type 1 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateXboxSuspiciousInfo runme = new DuplicateXboxSuspiciousInfo();
				ResultCode=runme.Execute(1);
			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateXboxType2SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 2 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateXboxType2SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateXboxType2SuspiciousInfo()
			{
				Name = "N_DuplicateXboxType2SuspiciousInfo";
				Desc = "Put a machine in type 2 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateXboxSuspiciousInfo runme = new DuplicateXboxSuspiciousInfo();
				ResultCode=runme.Execute(2);
			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateXboxType3SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 3 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateXboxType3SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateXboxType3SuspiciousInfo()
			{
				Name = "N_DuplicateXboxType3SuspiciousInfo";
				Desc = "Put a machine in type 3 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateXboxSuspiciousInfo runme = new DuplicateXboxSuspiciousInfo();
				ResultCode=runme.Execute(3);
			}
		}

		/// <summary>
		/// 	Report Result Helper: DuplicateXboxSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class DuplicateXboxSuspiciousInfo: XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(uint type)
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//construct scenario
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,2,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],2,ref userIndex);
				ulong[] mpuids=new ulong[2];
				mpuids[0]=mpuids[1]=registers[1].machinePuid;
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",mpuids,null);

				switch (type)
				{
					case 1:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,si,null,null,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,si,null,null,null);				
						break;
					case 2:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,si,null,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,si,null,null);				
						break;
					case 3:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,si,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,null,si,null);				
						break;
				}

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED))
				{
					return TEST_RESULTS.FAILED;
				}

				return TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateUserType1SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 1 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateUserType1SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateUserType1SuspiciousInfo()
			{
				Name = "N_DuplicateUserType1SuspiciousInfo";
				Desc = "Put a user in type 1 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateUserSuspiciousInfo runme = new DuplicateUserSuspiciousInfo();
				ResultCode=runme.Execute(1);
			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateUserType2SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 2 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateUserType2SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateUserType2SuspiciousInfo()
			{
				Name = "N_DuplicateUserType2SuspiciousInfo";
				Desc = "Put a user in type 2 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateUserSuspiciousInfo runme = new DuplicateUserSuspiciousInfo();
				ResultCode=runme.Execute(2);
			}
		}

		/// <summary>
		///		Report Result Tests: N_DuplicateUserType3SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with a duplicate Xbox in the type 3 suspicious info data
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED
		///		</Verify>
		/// </remarks>
		class N_DuplicateUserType3SuspiciousInfo : XArbTestBase
		{
			public N_DuplicateUserType3SuspiciousInfo()
			{
				Name = "N_DuplicateUserType3SuspiciousInfo";
				Desc = "Put a user in type 3 suspiciousInfo twice";
			}

			override protected void Execute()
			{
				DuplicateUserSuspiciousInfo runme = new DuplicateUserSuspiciousInfo();
				ResultCode=runme.Execute(3);
			}
		}

		/// <summary>
		/// 	Report Result Helper: DuplicateUserSuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class DuplicateUserSuspiciousInfo: XArbTestBase
		{
			
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(uint type)
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
	
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//construct scenario
				uint userIndex=0;
                registers[0] = BuildXRLRegister(null,2,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],2,ref userIndex);
				ulong[] upuids=new ulong[2];
				upuids[0]=upuids[1]=registers[1].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",null,upuids);

				switch (type)
				{
					case 1:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,si,null,null,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,si,null,null,null);				
						break;
					case 2:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,si,null,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,si,null,null);				
						break;
					case 3:
						results[0] = BuildXRLReportResult(registers[0],statsBundle,null,null,null,si,null);				
						results[1] = BuildXRLReportResult(registers[1],statsBundle,null,null,null,si,null);				
						break;
				}

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED))
				{
					return TEST_RESULTS.FAILED;
				}

				return TEST_RESULTS.PASSED;

			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingLostConnectivityInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with lostConnecectivityInfoSubmit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingLostConnectivityInfo : XArbTestBase
		{
			public N_MissingLostConnectivityInfo()
			{
				Name = "N_MissingLostConnectivityInfo";
				Desc = "Set lostConnectivityInfoSubmit flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.LostConnectivity;
				myReportResult.flags|=XRLReportResult.Flags.LostConnectivityInfoSubmit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingType1SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with SuspiciousInfo1Submit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingType1SuspiciousInfo : XArbTestBase
		{
			public N_MissingType1SuspiciousInfo()
			{
				Name = "N_MissingType1SuspiciousInfo";
				Desc = "Set type 1 suspiciousInfo flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.SuspiciousInfo1Submit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingType2SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with SuspiciousInfo2Submit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingType2SuspiciousInfo : XArbTestBase
		{
			public N_MissingType2SuspiciousInfo()
			{
				Name = "N_MissingType2SuspiciousInfo";
				Desc = "Set type 2 suspiciousInfo flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.SuspiciousInfo2Submit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingType3SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with SuspiciousInfo3Submit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingType3SuspiciousInfo : XArbTestBase
		{
			public N_MissingType3SuspiciousInfo()
			{
				Name = "N_MissingType3SuspiciousInfo";
				Desc = "Set type 3 suspiciousInfo flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.SuspiciousInfo3Submit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;				
			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingStatsBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with StatsBundleInfoSubmit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingStatsBundle : XArbTestBase
		{
			public N_MissingStatsBundle()
			{
				Name = "N_MissingStatsBundle";
				Desc = "Set statsBundle flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.StatsBundleInfoSubmit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		///		Report Result Tests: N_MissingTournamentBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with TournamentBundleInfoSubmit flagged but w/o the info
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_MissingTournamentBundle : XArbTestBase
		{
			public N_MissingTournamentBundle()
			{
				Name = "N_MissingTournamentBundle";
				Desc = "Set tournamentBundle flag but don't submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);
				myRegister.flags|=XRLRegister.Flags.IsTournament;

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Construct request
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,null);
				myReportResult.flags|=XRLReportResult.Flags.TournamentBundleInfoSubmit;

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraLostConnectivityInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with lost connectivity info without LostConnectivityInfoSubmit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraLostConnectivityInfo : XArbTestBase
		{
			public N_ExtraLostConnectivityInfo()
			{
				Name = "N_ExtraLostConnectivityInfo";
				Desc = "Do not set lostConnectivityInfo flag but submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				LostConnectivityInfo lci = MakeLostConnectivityInfo(upuids);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,null,lci);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.LostConnectivityInfoSubmit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraType1SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with type 1 SuspiciousInfo without SuspiciousInfo1Submit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraType1SuspiciousInfo : XArbTestBase
		{
			public N_ExtraType1SuspiciousInfo()
			{
				Name = "N_ExtraType1SuspiciousInfo";
				Desc = "Do not set type 1 suspiciousInfo flag but submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",null,null);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,si,null,null,null);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.SuspiciousInfo1Submit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraType2SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with type 2 SuspiciousInfo without SuspiciousInfo2Submit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraType2SuspiciousInfo : XArbTestBase
		{
			public N_ExtraType2SuspiciousInfo()
			{
				Name = "N_ExtraType2SuspiciousInfo";
				Desc = "Do not set type 2 suspiciousInfo flag but submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",null,null);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,si,null,null);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.SuspiciousInfo2Submit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraType3SuspiciousInfo
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with type 3 SuspiciousInfo without SuspiciousInfo3Submit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraType3SuspiciousInfo : XArbTestBase
		{
			public N_ExtraType3SuspiciousInfo()
			{
				Name = "N_ExtraType3SuspiciousInfo";
				Desc = "Do not set type 3 suspiciousInfo flag but submit the info";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("XARBTEST",null,null);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,null,null,null,si,null);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.SuspiciousInfo3Submit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraStatsBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with stats bundle but without StatsBundleInfoSubmit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraStatsBundle : XArbTestBase
		{
			public N_ExtraStatsBundle()
			{
				Name = "N_ExtraStatsBundle";
				Desc = "Do not set submitStatsBundle flag but submit the bundle";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,statsBundle,null,null,null,null,null);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.StatsBundleInfoSubmit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: N_ExtraTournamentBundle
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with tournament bundle but without TournamentBundleInfoSubmit set
		/// 	</Description>
		///		<Verify>
		///			Verify the server returns XONLINE_E_ARBITRATION_INVALID_REQUEST
		///		</Verify>
		/// </remarks>
		class N_ExtraTournamentBundle : XArbTestBase
		{
			public N_ExtraTournamentBundle()
			{
				Name = "N_ExtraTournamentBundle";
				Desc = "Do not set submitTournamentBundle flag but submit the bundle";
			}

			override protected void Execute()
			{
				//Construct request
                XRLRegister myRegister = BuildXRLRegister(null,2,0);

				//Execute and verify
				if (false==ExecuteAndVerify(myRegister))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}
				
				//Construct request
				ulong[] upuids=new ulong[1];
				upuids[0]=myRegister.userPuid[0];
				TournamentBundle tournamentBundle = MakeTournamentBundle(XArbGlobal.defaultStatsBundleSize);
				XRLReportResult myReportResult = BuildXRLReportResult(myRegister,null,tournamentBundle,null,null,null,null);
				unchecked{myReportResult.flags&= (ushort)~XRLReportResult.Flags.TournamentBundleInfoSubmit;}

				//Execute and check error
				if (false==ExecuteAndCheckError(myReportResult,HResult.XONLINE_E_ARBITRATION_INVALID_REQUEST))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}

		/// <summary>
		///		Report Result Tests: P_TeamStatsAndCompCase
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Report results with default stats (10 bytes) and tournament bundles (10 bytes)
		/// 	</Description>
		///		<Verify>
		///			Verify report results succeeds
		///		</Verify>
		/// </remarks>
		class P_TeamStatsAndCompCase : XArbTestBase
		{
			public P_TeamStatsAndCompCase()
			{
				Name = "P_TeamStatsAndCompCase";
				Desc = "The typical mainline case that exposes most options";
			}
			override protected void Execute()
			{
				const uint xboxes=2;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;

				TournamentBundle queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.IsTournament;
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[1].flags|=XRLRegister.Flags.IsTournament;

				//results
				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,null,null,null,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,queryBundle,null,null,null,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Report Result Helper: HELPERListen
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used to drain listeners
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class HELPERListen : XArbTestBase
		{
			public HELPERListen()
			{
				Name = "HELPERListen";
				Desc = "Just listen for requests for 30 seconds";
			}

			override protected void Execute()
			{
	
				System.Threading.Thread.Sleep(new TimeSpan(0,0,0,30,0));
				XArbGlobal.statsListener.ClearSlots();
				XArbGlobal.queryListener.ClearSlots();

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public FuncReportResultTests()
		{
            AddChild(new P_MainlineCase());
            AddChild(new P_MajQ_4Users_4UDP_4Reports());
            AddChild(new P_MajQ_4Users_1UDP_4Reports());
            AddChild(new P_MajQ_4Users_1UDP_4Reports_Tournament());
            AddChild(new P_Prob_3Users_1UDP_1Report());
            AddChild(new P_Prob_2Users_DiffBundles());
            AddChild(new P_MajQ_2Users_DiffBundles());
            AddChild(new P_MinQ_3Users_1Report());
            AddChild(new P_MajQ_MaxUsers());
            AddChild(new N_ProtocolInvalidVersionCheck());
            AddChild(new N_BadTitleId());
            AddChild(new P_MaxSessionId());
            AddChild(new P_MinSessionId());
            AddChild(new P_MaxSessionNonce());
            AddChild(new P_MinSessionNonce());
            AddChild(new N_ReportTwiceFromSameBox());
            AddChild(new N_InvalidNumUsers());
            AddChild(new N_InvalidMachineAccount());
            AddChild(new N_LostConnectivityToMyself());
            AddChild(new N_DuplicateXboxLostConnectivity());
            AddChild(new N_DuplicateXboxType1SuspiciousInfo());
            AddChild(new N_DuplicateXboxType2SuspiciousInfo());
            AddChild(new N_DuplicateXboxType3SuspiciousInfo());
            AddChild(new N_DuplicateUserType1SuspiciousInfo());
            AddChild(new N_DuplicateUserType2SuspiciousInfo());
            AddChild(new N_DuplicateUserType3SuspiciousInfo());
            AddChild(new N_LostConnectivityToXboxNotInSession());
            AddChild(new N_Type1SuspiciousInfoXboxNotInSession());
            AddChild(new N_Type2SuspiciousInfoXboxNotInSession());
            AddChild(new N_Type3SuspiciousInfoXboxNotInSession());
            AddChild(new N_Type1SuspiciousInfoUserNotInSession());
            AddChild(new N_Type2SuspiciousInfoUserNotInSession());
            AddChild(new N_Type3SuspiciousInfoUserNotInSession());
            AddChild(new P_MaxLostConnectivity());
            AddChild(new P_Type1MaxSuspiciousInfo());
            AddChild(new P_Type2MaxSuspiciousInfo());
            AddChild(new P_Type3MaxSuspiciousInfo());
            AddChild(new P_MaxEverything());
            AddChild(new N_MissingLostConnectivityInfo());
            AddChild(new N_MissingType1SuspiciousInfo());
            AddChild(new N_MissingType2SuspiciousInfo());
            AddChild(new N_MissingType3SuspiciousInfo());
            AddChild(new N_MissingStatsBundle());
            AddChild(new N_MissingTournamentBundle());
            AddChild(new N_ExtraLostConnectivityInfo());
            AddChild(new N_ExtraType1SuspiciousInfo());
            AddChild(new N_ExtraType2SuspiciousInfo());
            AddChild(new N_ExtraType3SuspiciousInfo());
            AddChild(new N_ExtraStatsBundle());
            AddChild(new N_ExtraTournamentBundle());
            AddChild(new P_MaxStatsBundle());
            AddChild(new P_MaxTournamentBundle());
            AddChild(new N_TooBigStatsBundle());
            AddChild(new N_TooBigTournamentBundle());
            AddChild(new P_XDelayCase());
            AddChild(new N_PostResultsTwice());
            AddChild(new P_TeamStatsAndCompCase());
            AddChild(new HELPERListen());
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\StressOption.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

namespace XArbTest
{
	/// <summary>
	/// Summary description for BundleOption.
	/// </summary>
	public class StressOption : System.Windows.Forms.Form
	{
		private System.Windows.Forms.Label label1;
		private System.Windows.Forms.Label label2;
		public System.Windows.Forms.TextBox textBox1;
		public System.Windows.Forms.TextBox textBox2;
		private System.Windows.Forms.Button button1;
		private System.Windows.Forms.Button button2;
		private System.Windows.Forms.GroupBox groupBox1;
		private System.Windows.Forms.Label label4;
		private System.Windows.Forms.Label label5;
		public System.Windows.Forms.TextBox textBox4;
		public System.Windows.Forms.TextBox textBox5;
		private System.Windows.Forms.GroupBox groupBox2;
		public System.Windows.Forms.CheckBox checkBox1;

		
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public StressOption()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.label1 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.textBox1 = new System.Windows.Forms.TextBox();
			this.textBox2 = new System.Windows.Forms.TextBox();
			this.button1 = new System.Windows.Forms.Button();
			this.button2 = new System.Windows.Forms.Button();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.textBox5 = new System.Windows.Forms.TextBox();
			this.textBox4 = new System.Windows.Forms.TextBox();
			this.label5 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.groupBox2 = new System.Windows.Forms.GroupBox();
			this.checkBox1 = new System.Windows.Forms.CheckBox();
			this.groupBox1.SuspendLayout();
			this.groupBox2.SuspendLayout();
			this.SuspendLayout();
			// 
			// label1
			// 
			this.label1.Location = new System.Drawing.Point(8, 24);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(88, 23);
			this.label1.TabIndex = 0;
			this.label1.Text = "Min Size";
			// 
			// label2
			// 
			this.label2.Location = new System.Drawing.Point(8, 56);
			this.label2.Name = "label2";
			this.label2.TabIndex = 1;
			this.label2.Text = "Max Size";
			// 
			// textBox1
			// 
			this.textBox1.Location = new System.Drawing.Point(128, 24);
			this.textBox1.Name = "textBox1";
			this.textBox1.TabIndex = 2;
			this.textBox1.Text = "";
			// 
			// textBox2
			// 
			this.textBox2.Location = new System.Drawing.Point(128, 56);
			this.textBox2.Name = "textBox2";
			this.textBox2.TabIndex = 3;
			this.textBox2.Text = "";
			// 
			// button1
			// 
			this.button1.Location = new System.Drawing.Point(32, 256);
			this.button1.Name = "button1";
			this.button1.TabIndex = 4;
			this.button1.Text = "OK";
			this.button1.Click += new System.EventHandler(this.button1_Click);
			// 
			// button2
			// 
			this.button2.Location = new System.Drawing.Point(160, 264);
			this.button2.Name = "button2";
			this.button2.TabIndex = 5;
			this.button2.Text = "Close";
			this.button2.Click += new System.EventHandler(this.button2_Click);
			// 
			// groupBox1
			// 
			this.groupBox1.Controls.Add(this.textBox5);
			this.groupBox1.Controls.Add(this.textBox4);
			this.groupBox1.Controls.Add(this.label5);
			this.groupBox1.Controls.Add(this.label4);
			this.groupBox1.Location = new System.Drawing.Point(16, 112);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.Size = new System.Drawing.Size(240, 100);
			this.groupBox1.TabIndex = 8;
			this.groupBox1.TabStop = false;
			this.groupBox1.Text = "Users per session";
			// 
			// textBox5
			// 
			this.textBox5.Location = new System.Drawing.Point(128, 64);
			this.textBox5.Name = "textBox5";
			this.textBox5.TabIndex = 3;
			this.textBox5.Text = "0";
			// 
			// textBox4
			// 
			this.textBox4.Location = new System.Drawing.Point(128, 24);
			this.textBox4.Name = "textBox4";
			this.textBox4.TabIndex = 2;
			this.textBox4.Text = "0";
			// 
			// label5
			// 
			this.label5.Location = new System.Drawing.Point(16, 64);
			this.label5.Name = "label5";
			this.label5.TabIndex = 1;
			this.label5.Text = "Max Users";
			// 
			// label4
			// 
			this.label4.Location = new System.Drawing.Point(16, 24);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(104, 23);
			this.label4.TabIndex = 0;
			this.label4.Text = "Min Users";
			// 
			// groupBox2
			// 
			this.groupBox2.Controls.Add(this.label1);
			this.groupBox2.Controls.Add(this.label2);
			this.groupBox2.Controls.Add(this.textBox1);
			this.groupBox2.Controls.Add(this.textBox2);
			this.groupBox2.Location = new System.Drawing.Point(16, 8);
			this.groupBox2.Name = "groupBox2";
			this.groupBox2.Size = new System.Drawing.Size(240, 88);
			this.groupBox2.TabIndex = 9;
			this.groupBox2.TabStop = false;
			this.groupBox2.Text = "Stats Bundle Size ";
			// 
			// checkBox1
			// 
			this.checkBox1.Checked = true;
			this.checkBox1.CheckState = System.Windows.Forms.CheckState.Checked;
			this.checkBox1.Location = new System.Drawing.Point(16, 224);
			this.checkBox1.Name = "checkBox1";
			this.checkBox1.Size = new System.Drawing.Size(232, 24);
			this.checkBox1.TabIndex = 10;
			this.checkBox1.Text = "Wait for UDP Receive";
			// 
			// StressOption
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(272, 302);
			this.Controls.Add(this.checkBox1);
			this.Controls.Add(this.groupBox2);
			this.Controls.Add(this.groupBox1);
			this.Controls.Add(this.button2);
			this.Controls.Add(this.button1);
			this.Name = "StressOption";
			this.Text = "Stress Options";
			this.groupBox1.ResumeLayout(false);
			this.groupBox2.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion

		private void button1_Click(object sender, System.EventArgs e)
		{
			int minval= Convert.ToInt32(textBox1.Text);
			int maxval= Convert.ToInt32(textBox2.Text);
			int minuser = Convert.ToInt32(textBox4.Text);
			int maxuser= Convert.ToInt32(textBox5.Text);
			if(minval<maxval && minuser<maxuser)
			{
				this.DialogResult= DialogResult.OK;
				this.Close();
			}
		}

		private void button2_Click(object sender, System.EventArgs e)
		{
			this.Close();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\MigrationMgr.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.Utilities;
using xonline.common.config;

using BucketLayout = System.Collections.Generic.List<XArbTest.Bucket>;
using MigrationState = XArbTest.MigrationMgr.MigrationState;

namespace XArbTest
{
    public abstract class Session : XArbTestBase
    {
        protected const ushort XBOXES = 2;  // Must be > 1 to support partially registered sessions
        protected const ushort USERS_PER_XBOX = 2;
        protected const ushort defaultMaxSessionSecs = 360;	// 6 minute sessions by default

        protected XRLRegister[] registers = new XRLRegister[XBOXES];
        protected XRLTimeExtend[] timeExtends = new XRLTimeExtend[XBOXES];
        protected XRLReportResult[] reportResults = new XRLReportResult[XBOXES];
        protected Bucket _bucket;

        public bool Registered = false;
        public bool TimeExtended = false;
        public bool Reported = false;

        public static MigrationState CurrentState = MigrationState.NotPlanned;

        public abstract void RegisterSession(Bucket bucket);
        public abstract void TimeExtendSession();
        public abstract void ReportSessionResults();

        protected override void Execute()
        {
            throw new UnexpectedTestResultException("Execute should not be called on a Session object");
        }
    }

    public class RegisteredSession : Session
    {
        public override void RegisterSession(Bucket bucket)
        {
            if (!Registered)
            {
                _bucket = bucket;
                // Create session
                DateTime now = DateTime.UtcNow;
                ushort maxSessionSecs = defaultMaxSessionSecs;
                if (_bucket.dt_migration_start > now)
                {
                    // Migration takes some time and we don't want the session to expire
                    //BUGBUG: This breaks if migration is more than aprox. 18 hours out
                    maxSessionSecs += (ushort)((_bucket.dt_migration_start - now).TotalSeconds);
                }
                uint userIndex = 0;
                registers[0] = BuildXRLRegister(null, USERS_PER_XBOX, ref userIndex, maxSessionSecs);
                registers[0].flags |= XRLRegister.Flags.TimeExtendable;
                registers[0].sessionId = CreateServerMappedSessionId(bucket.vc_server, bucket.i_bucket);
                for (int i = 1; i < registers.Length; i++)
                {
                    registers[i] = BuildXRLRegister(registers[i - 1], USERS_PER_XBOX, ref userIndex, maxSessionSecs);
                    registers[i].flags |= XRLRegister.Flags.TimeExtendable;
                }

                // Register all Xboxes
                foreach (XRLRegister register in registers)
                {
                    if (!register.Execute())
                    {
                        throw new UnexpectedTestResultException("Failed to register session:\n" + register.GetDumpString());
                    }
                }

                try
                {
                    // Verify server location
                    string targetServer = _bucket.vc_server;
                    if (CurrentState == MigrationState.Started || CurrentState == MigrationState.Completed)
                    {
                        targetServer = _bucket.vc_next_server;
                    }
                    System.Net.IPEndPoint serverIP = Global.XEnv.GetInterface(Interface.xarbInh, targetServer);
                    XRLDebugResult myDebugResult = GetDebugResult(registers[0], serverIP);
                    if (myDebugResult.Response == null)
                    {
                        throw new UnexpectedTestResultException("RegisteredSession::RegisterSession: Debug results not found:\n" + myDebugResult.GetDumpString());
                    }

                    Registered = true;
                }
                catch (Exception e)
                {
                    Global.RO.Error(e.Message);
                }
            }
        }

        public override void TimeExtendSession()
        {
            if (!TimeExtended)
            {
                for (int i = 0; i < timeExtends.Length; i++)
                {
                    //Construct request
                    timeExtends[i] = BuildXRLTimeExtend(registers[i], 10);

                    //Execute and verify
                    if (false == ExecuteAndVerify(timeExtends[i]))
                    {
                        throw new UnexpectedTestResultException("Failed to time extend session");
                    }
                }

                // Verify server location
                string targetServer = _bucket.vc_server;
                if (CurrentState == MigrationState.Started || CurrentState == MigrationState.Completed)
                {
                    targetServer = _bucket.vc_next_server;
                }
                foreach (XRLTimeExtend timeExtend in timeExtends)
                {
                    System.Net.IPEndPoint serverIP = Global.XEnv.GetInterface(Interface.xarbInh, targetServer);
                    XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(timeExtend, serverIP);
                    if (myDebugResultResponse == null)
                    {
                        //throw new UnexpectedTestResultException("Debug results not found");
                        Global.RO.Warn("Debug results not found");
                    }
                }
                TimeExtended = true;
            }
        }

        public override void ReportSessionResults()
        {
            if (!Reported)
            {
                for (int i = 0; i < reportResults.Length; i++)
                {
                    //Construct request
                    reportResults[i] = BuildXRLReportResult(registers[i], null, null, null, null, null, null);

                    //Execute and verify
                    if (!reportResults[i].Execute())
                    {
                        throw new UnexpectedTestResultException("Failed to report session results");
                    }
                }

                // Verify server location
                string targetServer = _bucket.vc_server;
                if (CurrentState == MigrationState.Started || CurrentState == MigrationState.Completed)
                {
                    targetServer = _bucket.vc_next_server;
                }
                foreach (XRLReportResult reportResult in reportResults)
                {
                    System.Net.IPEndPoint serverIP = Global.XEnv.GetInterface(Interface.xarbInh, targetServer);
                    XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(reportResult, serverIP);
                    if (myDebugResultResponse == null)
                    {
                        //throw new UnexpectedTestResultException("Debug results not found");
                        Global.RO.Warn("Debug results not found");
                    }
                }
                Reported = true;
            }
        }
    }

    public class SessionMgr
    {
        private ArrayList partiallyRegisteredSessions = new ArrayList();
        private ArrayList registeredSessions = new ArrayList();
        public static MigrationState CurrentState = MigrationState.NotPlanned;


        private class PartiallyRegisteredSession : Session
        {
            public override void RegisterSession(Bucket bucket)
            {
                _bucket = bucket;
                // Create session
                // Register 1st xbox
                // Verify server location
            }

            public override void TimeExtendSession()
            {
            }

            public override void ReportSessionResults()
            {
                // Register remaining xboxes
                // Progress play & verify server locations
            }
        }

        private void CreatePartiallyRegisteredSessions(BucketLayout buckets, int startIndex, int count)
        {
            for (int i = startIndex; i < startIndex + count; i++)
            {
                PartiallyRegisteredSession session = new PartiallyRegisteredSession();
                session.RegisterSession((Bucket)buckets[i]);
                partiallyRegisteredSessions.Add(session);
            }
        }
        /*
                private void CreateRegisteredSessions(BucketLayout buckets, int startIndex, int count)
                {
                    for (int i = startIndex; i < startIndex + count; i++)
                    {
                        RegisteredSession session = new RegisteredSession();
                        session.RegisterSession((Bucket)buckets[i]);
                        registeredSessions.Add(session);
                    }
                }
        */
        private class RegisterExecutorParams
        {
            public RegisteredSession Session;
            public Bucket Bucket;
        }

        private void RegisterExecutor(ref object Parameters)
        {
            RegisterExecutorParams execParams = (RegisterExecutorParams)Parameters;
            execParams.Session.RegisterSession(execParams.Bucket);
        }

        private void CreateRegisteredSessions(BucketLayout buckets, int startIndex, int count)
        {
            int defaultRegisterSessionsTheads = 8;

            SimpleJobMgr registerJobs = new SimpleJobMgr();
            SimpleJobMgr.ExecutorDelegate registerExector = new SimpleJobMgr.ExecutorDelegate(RegisterExecutor);
            for (int i = startIndex; i < startIndex + count; i++)
            {
                RegisterExecutorParams execParams = new RegisterExecutorParams();
                execParams.Session = new RegisteredSession();
                execParams.Bucket = (Bucket)buckets[i];
                registerJobs.AddJob(registerExector, execParams);
            }
            registerJobs.StartJobs(defaultRegisterSessionsTheads);
            while (!registerJobs.Empty())
            {
                SimpleJobMgr.Job job = registerJobs.GetCompletedJob();
                if (job.Exception != null)
                {
                    Global.RO.Error("SessionMgr::CreateRegisteredSessions: Register session failed with exception: " + job.Exception.ToString());
                    continue;
                }
                RegisterExecutorParams execParams = (RegisterExecutorParams)job.State;
                registeredSessions.Add(execParams.Session);
            }
        }

        private ArrayList GetDistinctServers(BucketLayout buckets)
        {
            ArrayList servers = new ArrayList();
            foreach (Bucket bucket in buckets)
            {
                if (!servers.Contains(bucket.vc_server))
                {
                    servers.Add(bucket.vc_server);
                }
            }
            return (servers);
        }

        private int GetBucketCountForServer(BucketLayout buckets, string serverName)
        {
            int count = 0;
            foreach (Bucket bucket in buckets)
            {
                if (bucket.vc_server == serverName)
                {
                    count++;
                }
            }
            return (count);
        }

        public void RegisterSessions(BucketLayout buckets)
        {
            Global.RO.Info("RegisterSessions starting");
            DateTime start = DateTime.UtcNow;
            int startIndex = 0;
            ArrayList servers = GetDistinctServers(buckets);
            foreach (string server in servers)
            {
                int count = GetBucketCountForServer(buckets, server);
                //BUGBUG: should be 50% partially registered, 50% registered
                // Currently 100% registered
                CreateRegisteredSessions(buckets, startIndex, count);
                startIndex += count;
            }
            TimeSpan delta = DateTime.UtcNow - start;
            Global.RO.Info("RegisterSessions complete in {0} seconds.", delta.TotalSeconds);
        }

        public void TimeExtendSomeSessions(BucketLayout buckets)
        {
            Global.RO.Info("TimeExtendSomeSessions starting");
            DateTime start = DateTime.UtcNow;
            int i = 0;
            foreach (Session session in registeredSessions)
            {
                if (i % 2 == 1)
                {
                    session.TimeExtendSession();
                }
                i++;
            }
            TimeSpan delta = DateTime.UtcNow - start;
            Global.RO.Info("TimeExtendSomeSessions complete in {0} seconds.", delta.TotalSeconds);
        }

        public void ReportSomeSessionsResults(BucketLayout buckets)
        {
            Global.RO.Info("ReportSomeSessionsResults starting");
            int i = 0;
            foreach (Session session in registeredSessions)
            {
                if (i % 2 == 1)
                {
                    session.ReportSessionResults();
                }
                i++;
            }
            Global.RO.Info("ReportSomeSessionsResults complete");
        }

        public void ReportAllSessionsResults(BucketLayout buckets)
        {
            Global.RO.Info("ReportAllSessionsResults starting");
            foreach (Session session in registeredSessions)
            {
                session.ReportSessionResults();
            }
            Global.RO.Info("ReportAllSessionsResults complete");
        }
    }


    public class Bucket
    {
        public int i_bucket;
        public string vc_server;
        public string vc_next_server;
        public DateTime dt_migration_start;
    }

    public sealed class MigrationMgr
    {
        private MigrationMgr() { }
        public static MigrationMgr Instance = new MigrationMgr();

        private static string _environmentName = null;
        public static string EnvironmentName
        {
            get
            {
                if (_environmentName == null)
                {
                    _environmentName = xonline.common.config.Config.Environment;
                }
                return (_environmentName);
            }
        }

        public enum MigrationState
        {
            NotPlanned = 0,
            Planned = 1,
            Started = 2,
            Completed = 3
        }

        public static BucketLayout GetCurrentBucketLayout()
        {
            BucketLayout buckets = new BucketLayout();
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            string sql = @"select i_bucket, vc_server, vc_next_server, dt_migration_start from t_interface_buckets";
            sql += " where vc_environment = '" + EnvironmentName + "' and vc_interface = 'xarbInh'";
            SqlDataReader reader;
            npdb.ReadData(sql, out reader);
            while (reader.Read())
            {
                Bucket bucket = new Bucket();
                bucket.i_bucket = reader.GetInt32(0);
                bucket.vc_server = reader.GetString(1);
                bucket.vc_next_server = reader.GetString(2);
                bucket.dt_migration_start = reader.GetDateTime(3);
                buckets.Add(bucket);
            }
            reader.Close();
            npdb.Close();
            return (buckets);
        }

        public static bool AreBucketsEquivalent(Bucket currentBucket, Bucket desiredState)
        {
            bool equiv = true;
            equiv = equiv && (currentBucket.i_bucket == desiredState.i_bucket);
            equiv = equiv && (currentBucket.vc_server == desiredState.vc_server);
            equiv = equiv && (currentBucket.vc_next_server == desiredState.vc_next_server);
            return (equiv);
        }

        public static bool AreBucketLayoutsEquivalent(BucketLayout currentLayout, BucketLayout desiredLayout)
        {
            if (currentLayout.Count != desiredLayout.Count)
            {
                return (false);
            }
            //BUGBUG: This assumes bucket layouts are always in sequential order
            for (int i = 0; i < currentLayout.Count; i++)
            {
                if (!AreBucketsEquivalent(currentLayout[i], desiredLayout[i]))
                {
                    return (false);
                }
            }
            return (true);
        }

        public static bool IsMigrationNeeded(BucketLayout desiredLayout)
        {
            return (!AreBucketLayoutsEquivalent(GetCurrentBucketLayout(), desiredLayout));
        }

        public static void SetBucket(Npdb npdb, Bucket bucket)
        {
            string sql = "update t_interface_buckets\r\n";
            sql += "set vc_next_server = '" + bucket.vc_next_server + "', dt_migration_start = '" + bucket.dt_migration_start.ToString("yyyy-M-d H:mm:ss:fff") + "'\r\n";
            sql += "where vc_environment = '" + EnvironmentName + "' and vc_interface = 'xarbinh' and i_bucket = " + bucket.i_bucket;

            //Global.RO.Debug("SetBucket: Updating bucket id {0}", bucket.i_bucket);
            int rowsAffected = npdb.IssueCommand(sql);
            if (rowsAffected != 2)
            {
                throw new UnexpectedTestResultException("SetBucket: (rowsAffected != 2); rowsAffected == " + rowsAffected);
            }
        }

        public static void ForceSetBucketLayout(BucketLayout buckets)
        {
            _SetBucketLayout(buckets, true);
        }

        public static void SetBucketLayout(BucketLayout buckets)
        {
            _SetBucketLayout(buckets, false);
        }

        private static void _SetBucketLayout(BucketLayout buckets, bool disableSafeties)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();
            npdb.IssueCommand("begin tran");

            try
            {
                foreach (Bucket bucket in buckets)
                {
                    if (!disableSafeties)
                    {
                        if (bucket.vc_server == bucket.vc_next_server)
                        {
                            //Global.RO.Debug("_SetBucketLayout: Not updating bucket id {0}", bucket.i_bucket);
                            continue;
                        }
                        if (bucket.dt_migration_start < DateTime.Now)
                        {
                            Global.RO.Error("_SetBucketLayout: Bucket migration time schedule for the past! Aborting...");
                            throw new UnexpectedTestResultException("_SetBucketLayout: bucket.dt_migration_start < DateTime.Now");
                        }
                    }
                    SetBucket(npdb, bucket);
                }
                npdb.IssueCommand("commit tran");
            }
            catch
            {
                try
                {
                    Global.RO.Error("Failed to update all buckets - attempting rollback");
                    npdb.IssueCommand("rollback tran");
                }
                catch
                { }
                throw;
            }
            finally
            {
                try
                {
                    npdb.Close();
                }
                catch
                { }
            }
        }

        public static bool SendXmgmtCmdByServerName(string serverName, string command, out string response)
        {
            return (SendXmgmtCmdByServerName(serverName, command, out response, XArbGlobal.defaultXmgmtRetries));
        }

        public static bool SendXmgmtCmdByServerName(string serverName, string command, out string response, int retries)
        {
            // HostNames only, no IPs in serverName
            IInterfaceInfo ifc = Config.GetInterface(serverName, Interface.xmgmtsrv);
            IPEndPoint ipEndPoint = new IPEndPoint(ifc.IPAddress, ifc.Port);
            int currentRetries = 0;
        retry:
            bool Succeeded = ManagementConsole.Execute(ipEndPoint, command, out response);
            if (!Succeeded && currentRetries < retries)
            {
                currentRetries++;
                goto retry;
            }
            else if (!Succeeded)
            {
                Global.RO.Warn("SendXmgmtCmdByServerName: Failed to execute xmgmt command after {0} retries", retries);
            }
            else if (response != null && response.Length > 1)
            {
                //Global.RO.Debug(response.Trim());
            }
            return (Succeeded);
        }

        const int IdxBucketID = 0;
        const int IdxSessionsCount = 1;
        const int IdxEmpty1 = 2;
        const int IdxMigrationState = 3;
        const int IdxEmpty2 = 4;
        const int IdxCurrentOwner = 5;

        public static string[] GetDistinctServerNames(BucketLayout buckets)
        {
            Hashtable serverHash = new Hashtable();
            foreach (Bucket bucket in buckets)
            {
                if (serverHash[bucket.vc_server] == null)
                {
                    serverHash[bucket.vc_server] = true;
                }
                if (serverHash[bucket.vc_next_server] == null)
                {
                    serverHash[bucket.vc_next_server] = true;
                }
            }
            string[] serverNames = new string[serverHash.Keys.Count];
            int i = 0;
            foreach (string serverName in serverHash.Keys)
            {
                serverNames[i] = serverName;
                i++;
            }
            return (serverNames);
        }

        class ServerBucketData
        {
            public int Bucket;
            public int Sessions;
            public MigrationState Migration;
            public bool Current;
        }

        public static Hashtable GetAllBucketsMigrationStatesFromServers(string[] serverNames)
        {
            Hashtable serverData = new Hashtable();
            foreach (string serverName in serverNames)
            {
                string command = "exec :xarbInh ListBuckets";
                string response = null;
                SendXmgmtCmdByServerName(serverName, command, out response);
                string[] bucketsInfo = response.Split('\n');
                // Skip the first 2 lines to account for the header
                for (int i = 2; i < bucketsInfo.Length - 1; i++)
                {
                    // Format: "Bucket\tSessions\t\tMigration\t\tCurrent\r\n"
                    string[] values = bucketsInfo[i].Split('\t');
                    ServerBucketData bucketData = new ServerBucketData();
                    bucketData.Bucket = int.Parse(values[IdxBucketID]);
                    bucketData.Sessions = int.Parse(values[IdxSessionsCount]);
                    bucketData.Migration = (MigrationState)Enum.Parse(typeof(MigrationState), values[IdxMigrationState], true);
                    bucketData.Current = bool.Parse(values[IdxCurrentOwner]);
                    if (serverData.ContainsKey(bucketData.Bucket))
                    {
                        //Global.RO.Error("GetAllBucketsMigrationStates: found multiple servers claiming the same bucket!");
                        //continue;
                        if (bucketData.Current != true)
                        {
                            continue;
                        }
                        // Out with the old, in with the new
                        serverData.Remove(bucketData.Bucket);
                    }
                    serverData.Add(bucketData.Bucket, bucketData);
                }
            }
            return (serverData);
        }

        public static bool VerifyAllBucketsMigrationState(BucketLayout buckets, MigrationState expectedState)
        {
            bool success = true;
            string[] serverNames = GetDistinctServerNames(buckets);
            Hashtable serverData = GetAllBucketsMigrationStatesFromServers(serverNames);
            foreach (Bucket bucket in buckets)
            {
                ServerBucketData serverBucketData = (ServerBucketData)serverData[bucket.i_bucket];
                if (serverBucketData == null)
                {
                    Global.RO.Info("No data found for bucket {0}", MigHelper.GetBucketDetails(bucket));
                }
                if (bucket.vc_server == bucket.vc_next_server)
                {
                    // No migration happened on this bucket
                    if (serverBucketData.Migration != MigrationState.NotPlanned)
                    {
                        success = false;
                        Global.RO.Error("Migration state check #1 failure: {0}; {1} != {2}",
                            MigHelper.GetBucketDetails(bucket),
                            serverBucketData.Migration.ToString(),
                            expectedState.ToString()
                            );
                    }
                    //BUGBUG: Commented out during test case development
                    //throw new UnexpectedTestResultException("Migration state check failure");
                    continue;
                }
                if (serverBucketData.Migration != expectedState)
                {
                    success = false;
                    Global.RO.Error("Migration state check #2 failure: {0}; {1} != {2}",
                        MigHelper.GetBucketDetails(bucket),
                        serverBucketData.Migration.ToString(),
                        expectedState.ToString()
                        );
                    //BUGBUG: Commented out during test case development
                    //throw new UnexpectedTestResultException("Migration state check failure");
                    continue;
                }
            }
            return success;
        }

        //BUGBUG: Assumes all buckets' migration start times are the same
        private static DateTime GetMigrationStartTime(BucketLayout buckets)
        {
            DateTime startTime = DateTime.UtcNow.AddMinutes(-234);
            bool found = false;
            foreach (Bucket bucket in buckets)
            {
                if (bucket.vc_server != bucket.vc_next_server)
                {
                    startTime = bucket.dt_migration_start;
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                //System.Diagnostics.Debug.Assert(false, "No bucket was found to be in migration ready state");
                throw new UnexpectedTestResultException("No bucket was found to be in migration ready state");
            }
            return (startTime);
        }

        //TODO: Add xmgmt support to check servers for migration status
        public static bool CheckForExistingMigration(BucketLayout buckets)
        {
            bool inMigration = false;
            foreach (Bucket bucket in buckets)
            {
                if (bucket.vc_server != bucket.vc_next_server)
                {
                    inMigration = true;
                }
            }
            return (inMigration);
        }

        public static void ConfigCacheRefresh()
        {
            Config.CheckForUpdates();
            Global.XEnv.ExecuteXmgmtCommand(Interface.xarb, "e :xarb configcacherefresh", XArbGlobal.defaultXmgmtRetries);
            Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh configcacherefresh", XArbGlobal.defaultXmgmtRetries);
            //Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh arbrefresh", XArbGlobal.defaultXmgmtRetries);
        }

        public void ExecuteMigration(BucketLayout newBucketLayout)
        {
            if (!IsMigrationNeeded(newBucketLayout))
            {
                Global.RO.Warn("ExecuteMigration called with bucket layout that already exists in DB.  No migration will actually occur.");
            }
            Global.RO.Info("Migration starting");
            // Make sure local cache is up to date
            Config.CheckForUpdates();

            //
            // 0: MigrationState.NotPlanned
            //
            // Current State:	0 - NotPlanned
            // Transitions to:	1 - Planned
            // When:			Server detects a bucket's vc_server != vc_server_next during
            //					a config cache refresh
            Global.RO.Info("Current State: 0 - Not Planned.  Transitioning to: 1 - Planned.");

            // Verify none of the buckets are already in a migration state
            if (VerifyAllBucketsMigrationState(newBucketLayout, MigrationState.NotPlanned))
            {
                NoiseMachine noiseMachine1 = new NoiseMachine();
                NoiseMachine noiseMachine2 = null;
                try
                {
                    noiseMachine1.Go();

                    // Initiate migration
                    SetBucketLayout(newBucketLayout);
                    // Reload IIS/INH config
                    ConfigCacheRefresh();

                    //
                    // 1: MigrationState.Planned
                    //
                    // Current State:	1 - Planned
                    // Transitions to:	2 - Started
                    // When:			Current time reaches dt_start_window + xarb_MigrationWaitWindowMinutes
                    Global.RO.Info("Current State: 1 - Planned.  Transitioning to: 2 - Started.");

                    // Migration starts at dt_migration_start + xarb_MigrationWaitWindowMinutes
                    DateTime startTime = GetMigrationStartTime(newBucketLayout);
                    TimeSpan delta = startTime - DateTime.UtcNow;
                    int sleepSecs = (int)delta.TotalSeconds;
                    sleepSecs += XArbGlobal.defaultMigWaitWindowMins * 60;
                    sleepSecs += 10;  // Safety buffer against out of sync timers
                    if (sleepSecs < 0)
                    {
                        throw new UnexpectedTestResultException("sleepSecs < 0, the migration plan is out of control!");
                    }
                    // Wait for transition to next state
                    Global.RO.Info("Sleeping for {0} seconds", sleepSecs);
                    Thread.Sleep(sleepSecs * 1000);

                    //
                    // 2: MigrationState.Started
                    //
                    // Current State:	2 - Started
                    // Transitions to:	3 - Complete
                    // When:			All sessions in a given migrating bucket are reported or expired
                    Global.RO.Info("Current State: 2 - Started.  Transitioning to: 3 - Completed.");

                    noiseMachine2 = new NoiseMachine();
                    noiseMachine2.Go();
                    Global.RO.Info("Sleeping for 10 seconds");
                    Thread.Sleep(10 * 1000);
                    noiseMachine1.Stop();
                    Global.RO.Info("Sleeping for 30 seconds");
                    Thread.Sleep(30 * 1000);

                    //
                    // 3: MigrationState.Completed
                    //
                    // Current State:	3 - Complete
                    // Transitions to:	bucket disappears on migrated-from server;
                    //					0 - NotPlanned on migrated-to server
                    // When:			Server detects a bucket's vc_server == vc_server_next during
                    //					the next config cache refresh
                    Global.RO.Info("Current State: 3 - Complete.  Transitioning to: 4 - Not Planned.");

                    ConfigCacheRefresh();
                    Global.RO.Info("Sleeping for 10 seconds");
                    Thread.Sleep(10 * 1000);

                    //
                    // 4: MigrationState.NotPlanned
                    //
                    // Current State:	0 - NotPlanned
                    // Transitions to:	N/A
                    // When:			N/A
                    Global.RO.Info("Current State: 4 - Not Planned.  Verifying all buckets...");

                    // Verify state has progressed to Completed
                    VerifyAllBucketsMigrationState(newBucketLayout, MigrationState.NotPlanned);
                }
                finally
                {
                    noiseMachine1.Stop();
                    if (noiseMachine2 != null)
                    {
                        noiseMachine2.Stop();
                    }
                }
            }

            //TODO: Verify current layout matches prediction from newBucketLayout
            Global.RO.Info("Migration complete");
        }

    }

    public class MigHelper
    {
        static string[] validServerNames = new string[3] { "XEPOOLINH006", "XEPOOLINH007", "XEPOOLINH008" };

        public static string[] GetServerNames(int numServerNames)
        {
            if (numServerNames > validServerNames.Length)
            {
                throw new UnexpectedTestResultException("Insufficient server names available to satisfy request");
            }
            // A request for -1 server names is a request for all server names
            if (numServerNames == -1)
            {
                numServerNames = validServerNames.Length;
            }

            string[] serverNames = new string[numServerNames];
            for (int i = 0; i < numServerNames; i++)
            {
                serverNames[i] = validServerNames[i];
            }
            return (serverNames);
        }

        public static void ForceBucketLayout(BucketLayout buckets)
        {
            // Hulk smash!
            MigrationMgr.SetBucketLayout(buckets);
            Global.XEnv.ExecuteXmgmtCommand(Interface.xarb, "e :xarb configcacherefresh", XArbGlobal.defaultXmgmtRetries);
            Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh configcacherefresh", XArbGlobal.defaultXmgmtRetries);
            foreach (Bucket bucket in buckets)
            {
                Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh resetmigrationstateforonebucket " + bucket.i_bucket, XArbGlobal.defaultXmgmtRetries);
            }

            //TODO:  Instead of requiring all buckets be in the NotPlanned state on all servers
            // it would be better to use the xmgmt command "resetmigrationstateforonebucket" to
            // reset the state on any buckets in migration - this would allow one test case
            // to fail and the next one to proceed with it's testing.
            //string[] serverNames = GetServerNames(-1);
            //MigrationMgr.VerifyAllBucketsMigrationState(serverNames, MigrationState.NotPlanned);
            //MigrationMgr.ForceSetBucketLayout(buckets);
            //Global.XEnv.ExecuteXmgmtCommand(Interface.xarb, "e :xarb configcacherefresh");
            //Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh configcacherefresh");
        }
        /*
                public static BucketLayout CreateBlockPatternLayout(string serverName, int bucketCount)
                {
                    string[] serverNames = new string[] { serverName };
                    return CreateBlockPatternLayout(serverNames, bucketCount);
                }

                public static BucketLayout CreateBlockPatternLayout(string[] serverNames, int bucketCount)
                {
                    BucketLayout newLayout = new BucketLayout(bucketCount);

                    int blockCount = serverNames.Length;
                    int blockStart = 0;
                    for (int currentBlock = 0; currentBlock < blockCount; currentBlock++)
                    {
                        //BUGBUG: I think this needs more intelligent rounding to handle fractions
                        int blockEnd = (int)(bucketCount / blockCount * (currentBlock + 1)) - 1;
                        for (int i = blockStart; i <= blockEnd; i++)
                        {
                            Bucket bucket = new Bucket();
                            bucket.i_bucket = i;
                            bucket.vc_server = serverNames[currentBlock];
                            bucket.vc_next_server = bucket.vc_server;
                            bucket.dt_migration_start = DateTime.UtcNow.AddHours(-1);
                            newLayout.Add(bucket);
                        }
                        blockStart = blockEnd + 1;
                    }
                    return(newLayout);
                }
        */

        public static BucketLayout CreateStepPatternLayout(string serverName, int bucketCount)
        {
            string[] serverNames = new string[] { serverName };
            return CreateStepPatternLayout(serverNames, bucketCount);
        }

        public static BucketLayout CreateStepPatternLayout(string[] serverNames, int bucketCount)
        {
            int serverNamesIdx = 0;
            BucketLayout newLayout = new BucketLayout(bucketCount);
            for (int i = 0; i < bucketCount; i++)
            {
                Bucket bucket = new Bucket();
                bucket.i_bucket = i;
                bucket.vc_server = serverNames[serverNamesIdx++];
                bucket.vc_next_server = bucket.vc_server;
                bucket.dt_migration_start = DateTime.UtcNow.AddHours(-1);
                newLayout.Add(bucket);
                if (serverNamesIdx == serverNames.Length)
                {
                    serverNamesIdx = 0;
                }
            }
            return (newLayout);
        }

        public static BucketLayout CreateTransitionLayout(BucketLayout currentLayout, BucketLayout desiredLayout, DateTime migStartTime)
        {
            if (currentLayout.Count != desiredLayout.Count)
            {
                //TODO: No time to accommodate extra buckets situations right now
                throw new UnexpectedTestResultException("Unable to create transition plan - counts do not match");
            }

            BucketLayout restorationLayout = new BucketLayout(desiredLayout.Count);
            for (int i = 0; i < desiredLayout.Count; i++)
            {
                Bucket currentBucket = currentLayout[i];
                Bucket desiredState = desiredLayout[i];
                //BUGBUG: Requiring to keep buckets in order in the array is cheap.
                // It would be better to hunt down matching buckets
                if (currentBucket.i_bucket != desiredState.i_bucket)
                {
                    throw new UnexpectedTestResultException("Unable to create restoration plan - orders do not match");
                }
                if (MigrationMgr.AreBucketsEquivalent(currentBucket, desiredState))
                {
                    restorationLayout.Add(currentBucket);
                }
                else
                {
                    Bucket transitionBucket = new Bucket();
                    transitionBucket.dt_migration_start = migStartTime;
                    transitionBucket.i_bucket = desiredState.i_bucket;
                    transitionBucket.vc_server = currentBucket.vc_server;
                    transitionBucket.vc_next_server = desiredState.vc_next_server;
                    restorationLayout.Add(transitionBucket);
                }
            }
            return (restorationLayout);
        }

        public static Bucket CopyBucket(Bucket srcBucket)
        {
            Bucket newBucket = new Bucket();
            newBucket.i_bucket = srcBucket.i_bucket;
            newBucket.vc_server = srcBucket.vc_server;
            newBucket.vc_next_server = srcBucket.vc_next_server;
            newBucket.dt_migration_start = srcBucket.dt_migration_start;
            return (newBucket);
        }

        public static Bucket CreateMigratedBucket(Bucket srcBucket, DateTime migStartTime, string toServer)
        {
            Bucket newBucket = new Bucket();
            newBucket.i_bucket = srcBucket.i_bucket;
            newBucket.vc_server = srcBucket.vc_server;
            newBucket.vc_next_server = toServer;
            newBucket.dt_migration_start = migStartTime;
            return (newBucket);
        }

        public static BucketLayout CreateServerMigrationLayout(BucketLayout srcLayout, DateTime migStartTime,
            string fromServer, string toServer)
        {
            BucketLayout newLayout = new BucketLayout(srcLayout.Count);
            foreach (Bucket srcBucket in srcLayout)
            {
                Bucket newBucket;
                if (srcBucket.vc_server == fromServer)
                {
                    newBucket = CreateMigratedBucket(srcBucket, migStartTime, toServer);
                }
                else
                {
                    newBucket = CopyBucket(srcBucket);
                }
                newLayout.Add(newBucket);
            }
            return (newLayout);
        }

        // Uses step-pattern algorithm
        public static BucketLayout CreateServerMigrationLayout(BucketLayout srcLayout, DateTime migStartTime,
            string fromServer, string[] toServers)
        {
            int serversIdx = 0;
            BucketLayout newLayout = new BucketLayout(srcLayout.Count);
            foreach (Bucket srcBucket in srcLayout)
            {
                Bucket newBucket = new Bucket();
                if (srcBucket.vc_server == fromServer)
                {
                    newBucket = CreateMigratedBucket(srcBucket, migStartTime, toServers[serversIdx++]);
                }
                else
                {
                    newBucket = CopyBucket(srcBucket);
                }
                if (serversIdx == toServers.Length)
                {
                    serversIdx = 0;
                }
                newLayout.Add(newBucket);
            }
            return (newLayout);
        }

        public static string GetBucketDetails(Bucket bucket)
        {
            string details = bucket.i_bucket + ": ";
            details += bucket.vc_server + ", ";
            details += bucket.vc_next_server + ", ";
            details += bucket.dt_migration_start;
            return (details);
        }

        public static void DbgSpewBucket(Bucket bucket)
        {
            Debug.WriteLine(GetBucketDetails(bucket));
        }

        public static void DbgSpewLayout(BucketLayout buckets)
        {
            System.Collections.Hashtable serverNames = new System.Collections.Hashtable();
            System.Collections.Hashtable fromServers = new System.Collections.Hashtable();
            System.Collections.Hashtable toServers = new System.Collections.Hashtable();
            foreach (Bucket bucket in buckets)
            {
                serverNames[bucket.vc_server] = (int)0;
                serverNames[bucket.vc_next_server] = (int)0;

                if (fromServers[bucket.vc_server] == null)
                {
                    fromServers[bucket.vc_server] = (int)0;
                }
                int count = (int)fromServers[bucket.vc_server];
                count++;
                fromServers[bucket.vc_server] = count;

                if (toServers[bucket.vc_next_server] == null)
                {
                    toServers[bucket.vc_next_server] = (int)0;
                }
                count = (int)toServers[bucket.vc_next_server];
                count++;
                toServers[bucket.vc_next_server] = count;

                DbgSpewBucket(bucket);
            }
            Debug.WriteLine("");
            Debug.WriteLine("Summary");
            Debug.WriteLine("-------");
            foreach (string serverName in serverNames.Keys)
            {
                string statistics = serverName;
                statistics += ": count(vc_server) = " + (fromServers[serverName] == null ? "0" : fromServers[serverName]);
                statistics += ", count(vc_next_server) = " + (toServers[serverName] == null ? "0" : toServers[serverName]);
                Debug.WriteLine(statistics);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\Stresstests.cs ===
using System;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;

namespace XArbTest
{
	/// <summary>
	/// 	Stress Tests: ArbRegister
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Register a session
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
	public class ArbRegister : TestNode
	{
        public override void Run()
        {
            ArbStressSession Sesssion = XArbSessionManager.GetNextSession();

            if (Sesssion == null)
            {
                throw new DidNotExecuteException("Unable to get next session.");
            }
            else if (!Sesssion.RegisterParticipant(1))
            {
                throw new UnexpectedTestResultException("RegisterParticipant failed");
            }
        }
	}

	/// <summary>
	/// 	Stress Tests: ArbTimeExtend
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Time extend a session
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
    public class ArbTimeExtend : TestNode
    {
        public override void  Run()
        {
            ArbStressSession Sesssion = XArbSessionManager.GetNextSessionToTimeExtend();
            if (Sesssion == null)
            {
                throw new DidNotExecuteException("Unable to get next session.");
            }
            // Call time extend on the session.
            else if (Sesssion.ExtendTime())
            {
                throw new UnexpectedTestResultException("ExtendTime failed");
            }
        }
    }

	/// <summary>
	/// 	Stress Tests: ReportNormalResults
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Report normal results
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
	public class ReportNormalResults : TestNode
	{
		public override void Run()
		{
			ArbStressSession Sesssion =XArbSessionManager.GetNextRegisteredSession();
			if(Sesssion==null)
			{
                throw new DidNotExecuteException("Unable to get next session.");
			}
			else
			{
				// Call time extend on the session.
				if(!Sesssion.ReportResults(Sesssion.GetStatsData(), Sesssion.IncludeQueryBundle ? Sesssion.GetStatsData2() : null, false))
                {
                    throw new UnexpectedTestResultException("ReportResults failed");
				}
			}
		}
	}

	/// <summary>
	/// 	Stress Tests: ReportDisConnectedResults
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Report results with disconnection
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
	public class ReportDisConnectedResults : TestNode
	{
		public override void Run()
		{
			ArbStressSession Sesssion =XArbSessionManager.GetNextRegisteredSession();
			if(Sesssion==null)
			{
                throw new DidNotExecuteException("Unable to get next session.");
			}
			else
			{
				//TODO: This was never implemented but was saying PASSED anyways
                throw new DidNotExecuteException("Not Implemented", new NotImplementedException());
			}
		}
	}

	/// <summary>
	/// 	Stress Tests: ReportUDPResults
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Report results using UDP
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
	public class ReportUDPResults : TestNode
	{
		public override void Run()
		{
			ArbStressSession Sesssion =XArbSessionManager.GetNextRegisteredSession();
			if(Sesssion==null)
			{
                throw new DidNotExecuteException("Unable to get next session.");
			}
			else
			{
				// Call report results using UDP
				if(!Sesssion.ReportResults(Sesssion.GetStatsData2(), Sesssion.IncludeQueryBundle ? Sesssion.GetStatsData2() : null, true))
				{
					throw new UnexpectedTestResultException("ReportUDPResults failed");
				}
			}
		}
	}

	/// <summary>
	/// 	Stress Tests: ReportProblematicResults
	/// </summary>
	/// <remarks>
	/// 	<Description>
	/// 		Report problematic results
	/// 	</Description>
	/// 	<Verify>
	/// 		Verify the server returns 200 (OK) and XErr indicates the call succeeded
	/// 	</Verify>
	/// </remarks>
	public class ReportProblematicResults : TestNode
	{
        public override void Run()
		{
			ArbStressSession Sesssion =XArbSessionManager.GetNextRegisteredSession();
			if(Sesssion==null)
			{
                throw new DidNotExecuteException("Unable to get next session.");
			}
			else
			{
				if(!Sesssion.ReportResults(Sesssion.GetStatsData2(), Sesssion.IncludeQueryBundle ? Sesssion.GetStatsData2() : null, false))
				{
                    throw new UnexpectedTestResultException("ReportProblematicResults failed");
				}
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\NoiseMachine.cs ===
using System;
using System.Collections.Generic;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService.Arbitration;
using xonline.common.config;

namespace XArbTest
{
    public class NoiseMachine : XArbTestBase
    {
        public const uint TotalThreads = 6;
        public const uint TotalBuckets = 420;

        private Thread[] NoiseThreads = new Thread[TotalThreads];
        private volatile bool ReportResultsAndStop = false;
        private uint CurrentTargetBucket = 0;

        private struct SessionAndTEInfo
        {
            public XRLRegister XrlRegister;
            public uint TimeExtensionsRemaining;

            public SessionAndTEInfo(XRLRegister xrlRegister, uint timeExtensionsRemaining)
            {
                XrlRegister = xrlRegister;
                TimeExtensionsRemaining = timeExtensionsRemaining;
            }
        }

        private object RegisteredSessionsLock = new object();
        private Queue<SessionAndTEInfo> RegisteredSessions = new Queue<SessionAndTEInfo>();

        private object ReportFirstSessionsLock = new object();
        private Queue<SessionAndTEInfo> ReportFirstSessions = new Queue<SessionAndTEInfo>();
        private ManualResetEvent ReportFirstSessionsEmpty = new ManualResetEvent(false);

        private ulong GetNewSessionID()
        {
            uint targetBucket;
            lock (this.GetType())
            {
                CurrentTargetBucket++;
                if (CurrentTargetBucket == TotalBuckets)
                {
                    CurrentTargetBucket = 0;
                }
                targetBucket = CurrentTargetBucket;
            }

            ulong sessionID;
            uint resultingBucket;
            do
            {
                sessionID = RandGen.NextUlong();
                resultingBucket = Config.GetBucketNum(Interface.xarbInh, sessionID);
            }
            while (resultingBucket != targetBucket);

            return sessionID;
        }

        private bool RegisterSession(out XRLRegister xrlRegister)
        {
            bool success = false;
            xrlRegister = null;
            try
            {
                xrlRegister = BuildXRLRegister(null, 4, 0);
                xrlRegister.sessionId = GetNewSessionID();
                xrlRegister.flags |= XRLRegister.Flags.TimeExtendable;
                success = xrlRegister.Execute();
            }
            catch
            {
            }
            return success;
        }

        private bool TimeExtend(XRLRegister xrlRegister)
        {
            bool success = true;
            try
            {
                XRLTimeExtend xrlTimeExtend = BuildXRLTimeExtend(xrlRegister, 10);
                success = xrlTimeExtend.Execute();
            }
            catch
            {
            }
            return success;
        }

        private bool ReportResult(XRLRegister xrlRegister)
        {
            bool success = true;
            try
            {
                XRLReportResult xrlReportResult = BuildXRLReportResult(xrlRegister,
                    null, null, null, null, null, null);
                success = xrlReportResult.Execute();
            }
            catch
            {
            }
            return success;
        }

        public void ThreadProc()
        {
            bool stop = false;
            while (!stop)
            {
                // 30% == Register
                // 50% == TimeExtend
                // 20% == ReportResults
                int val = RandGen.Next(1, 11);
                if (ReportResultsAndStop)
                {
                    val = 10;
                }
                if (val <= 3)
                {
                    XRLRegister xrlRegister;
                    if (RegisterSession(out xrlRegister))
                    {
                        lock (RegisteredSessionsLock)
                        {
                            RegisteredSessions.Enqueue(new SessionAndTEInfo(xrlRegister, 4));
                        }
                    }
                }
                else if (val > 3 && val < 9)
                {
                    // TimeExtend session
                    try
                    {
                        SessionAndTEInfo session;
                        XRLRegister xrlRegister;
                        lock (RegisteredSessionsLock)
                        {
                            session = RegisteredSessions.Dequeue();
                            xrlRegister = session.XrlRegister;
                        }
                        if (session.TimeExtensionsRemaining > 0)
                        {
                            if (TimeExtend(xrlRegister))
                            {
                                session.TimeExtensionsRemaining--;
                                lock (RegisteredSessionsLock)
                                {
                                    RegisteredSessions.Enqueue(session);
                                }
                            }
                        }
                        else
                        {
                            lock (ReportFirstSessionsLock)
                            {
                                ReportFirstSessions.Enqueue(session);
                            }
                        }
                    }
                    catch (InvalidOperationException) { }
                }
                else
                {
                    // ReportResults
                    SessionAndTEInfo session;
                    try
                    {
                        // Reporting sessions in the ReportFirstSessionIDs queue takes priority
                        lock (ReportFirstSessionsLock)
                        {
                            session = ReportFirstSessions.Dequeue();
                            if (ReportFirstSessions.Count == 0)
                            {
                                ReportFirstSessionsEmpty.Set();
                            }
                        }
                        ReportResult(session.XrlRegister);
                    }
                    catch (InvalidOperationException)
                    {
                        try
                        {
                            // ReportFirstSessionIDs is empty
                            lock (RegisteredSessionsLock)
                            {
                                session = RegisteredSessions.Dequeue();
                            }
                            ReportResult(session.XrlRegister);
                        }
                        catch (InvalidOperationException)
                        {
                            if (ReportResultsAndStop)
                            {
                                stop = true;
                            }
                        }
                    }
                }
            }
        }

        protected override void Execute()
        {
            Go();
        }

        public void Go()
        {
            Global.RO.Info("Noise machine starting");
            for (int i = 0; i < TotalThreads; i++)
            {
                NoiseThreads[i] = ThreadMaker.CreateThread(ThreadProc);
                NoiseThreads[i].Start();
            }
        }

        public void ReportAllCurrentSessions()
        {
            int sessionCount;
            lock (ReportFirstSessionsLock)
            {
                lock (RegisteredSessionsLock)
                {
                    for (int i = 0; i < RegisteredSessions.Count; i++)
                    {
                        ReportFirstSessions.Enqueue(RegisteredSessions.Dequeue());
                    }
                    sessionCount = ReportFirstSessions.Count;
                }
            }
            if (sessionCount != 0)
            {
                ReportFirstSessionsEmpty.WaitOne();
            }
        }

        public void Stop()
        {
            Global.RO.Info("Noise machine stopping");
            ReportResultsAndStop = true;
            for (int i = 0; i < TotalThreads; i++)
            {
                NoiseThreads[i].Join();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\XArbGlobal.cs ===
using System;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.UserAccount;
using xonline.common.config;

namespace XArbTest
{
	/// <summary>
	/// Global variables for this test suite
	/// </summary>
	internal static class XArbGlobal
	{
		//Listeners
		
		public const int statsPort = 100;
		public const int SlowstatsPort = 101;
		public const int queryPort = 102;
		public static XArbListener statsListener = new XArbListener(XArbListener.types.stats,statsPort,"Main",-1,-1);
		public static XArbListener slowstatsListener = new XArbListener(XArbListener.types.stats,SlowstatsPort,"SlowListner",200,-1);
		public static XArbListener queryListener = new XArbListener(XArbListener.types.query,queryPort);
		public static IPEndPoint statsEndPoint = null;
		public static IPEndPoint queryEndPoint = null;
		public static IPEndPoint slowstatsEndPoint=null;

		//TitleId
		public static TitleTrustConstants myTitleTrustConstants = new TitleTrustConstants(0xDEADBEEF,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));
		public static TitleTrustConstants StressTitleTrustConstants = new TitleTrustConstants(0xBADBEEF,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));
		public static TitleTrustConstants SlowStressTitleTrustConstants = new TitleTrustConstants(0xDEAD,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0L,0L,0L,0L,0L,0L,0L,0L,0,2.0,8.0,16.0,32.0,64.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));

		//API limits
		public const uint maxXboxes=255;
		public const uint maxUsers=4*maxXboxes;
		public const ushort maxSessionSeconds=3600;
		public const uint maxStatsBundleSize=200000;
		public const uint maxTournamentBundleSize=100000;

		//Test defaults
		public static float defaultUserTrust=(float)(myTitleTrustConstants.baseUserTrust+0.5);
		public const ushort defaultMaxSessionSeconds=60;
		public const ushort defaultMaxSessionSecondsFromNow=(ushort)(XArbGlobal.defaultMaxSessionSeconds+15);
		public const uint defaultUserFlags=0x00000670;
		public const byte defaultTicketSize=188;
		public const byte defaultStatsBundleSize=10;
		public const byte defaultTournamentBundleSize=10;
        public static ServerTestFramework.Database.BulkUserSet defaultUserPuids = null;
		public static TimeSpan defaultTimeout = new TimeSpan(0,0,0,30,0);
		public const int defaultXmgmtRetries = 2;
		public const int defaultMigWaitWindowMins = 1;
		public static TimeSpan defaultMigStartDelta = new TimeSpan(0, 1, 0); // Migration begins 1 minute from now

		//Server defaults
		public static ushort serverSessionTimeoutExtensionSeconds=60;

        public static void HealthCheckIis()
        {
            //Trigger each inhouse server to come online if not already (1 port)
            Console.WriteLine("Loading xarbinh process on each server.");
            XRLHealthARB.fFrontDoor = true;
            XRLHealthARB myHealthRequest = new XRLHealthARB();
            foreach (System.Net.IPEndPoint ServerEP in Global.XEnv.GetInterface(Interface.xarb))
            {
                myHealthRequest.Execute(ServerEP);
                if (myHealthRequest.httpStatus != HttpStatusCode.OK)
                {
                    Console.WriteLine("Unable to execute health URL on " + ServerEP.ToString() + " Error Code:" + myHealthRequest.httpStatus.ToString());
                }
            }
        }

        public static void HealthCheckInh()
        {
            //Trigger each inhouse server to come online if not already (1 port)
            Console.WriteLine("Loading xarbinh process on each server.");
            XRLHealthARB.fFrontDoor = false;
            XRLHealthARB myHealthRequest = new XRLHealthARB();
            foreach (System.Net.IPEndPoint ServerEP in Global.XEnv.GetInterface(Interface.xarbInh))
            {
                myHealthRequest.Execute(ServerEP);
                if (myHealthRequest.httpStatus != HttpStatusCode.OK)
                {
                    Console.WriteLine("Unable to execute health URL on " + ServerEP.ToString() + " Error Code:" + myHealthRequest.httpStatus.ToString());
                }
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\XArbStressGlobal.cs ===
using System;
using System.IO;
using System.Collections;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Presence;

namespace XArbTest
{
	/// <summary>
	/// Summary description for XArbStressGlobal.
	/// </summary>
	/// 
	public class ArbUsers
	{
		public ulong Puid=0;
		public ulong[] teams=null;
		public ArbUsers(ulong puid ,ulong[] Userteams)
		{
			Puid=puid;
			teams=Userteams;
		}
	}

	public class XArbSessionManager
	{
		public static bool IgnoreUPDRecive=false;
		public static int minUsersPerSession=4;
		public static int maxUsersPerSession=10;
		public static int minBundleSize=6000;
		public static int maxBundleSize=8000;
		private const int InPlaySize= 10000;
		protected static long UserIndex=0;
		public static uint UserPoolSize= 10000;
		protected static  ArbUsers[] _userlist;
		protected static  Queue _SessionsQ=new Queue();
		protected static Queue _SessionsInPlay=new Queue(InPlaySize);
		protected static Queue _SessionsInTimeExtend=new Queue();
		protected static Queue _RegisteredSessionsQ=new Queue();
		public static int ActiveSessions=200;
		public static RandomEx RandomGen = new RandomEx();
		private static ServerTestFramework.Database.BulkUserSet userSet;

		public static void InitStress()
		{
			ServerTestFramework.Database.UodbWS.CreateBulkUsers("ar", UserPoolSize, out userSet);

			//ulong _Mask =0x0009FFFFFFFFF000;
			_userlist= new ArbUsers[UserPoolSize];
			lock(_userlist)
			{
				RandomEx random= new RandomEx();
				for(uint i=0;i<UserPoolSize;i++)
				{
					ulong[] teams= null;
					int teamcount = random.Next(0,10);
					if(teamcount>5)
					{
						teams= new ulong[(teamcount-5)];
						for(int j=0;j<(teamcount-5);j++)
							teams[j]=0xFE00000000000000+(ulong)random.Next();
					}
					//_userlist[i]= new ArbUsers((_Mask-(ulong)i),teams);
					_userlist[i]= new ArbUsers(userSet.IndexToPuid(i), teams);
				}
			}

			RandomGen.NextBytes(ArbStressSession.statsdata);
			RandomGen.NextBytes(ArbStressSession.statsdata2);
		}

		public static ArbUsers GetNextUser()
		{
			ulong currentindex = (ulong)Interlocked.Increment(ref UserIndex);
			return _userlist[(int)(currentindex%(ulong)UserPoolSize)];
		}

		public static  ArbStressSession GetNextSession()
		{
			ArbStressSession _session=null;
			ArbStressSession DQSession=null;
			lock(_SessionsQ)
			{
				if(_SessionsQ.Count > 0)
				{
					ArbStressSession tmpsession=(ArbStressSession)_SessionsQ.Peek();
					if(tmpsession.CurrentMaxMembers<tmpsession.MaxMembersAllowed)
					{
						// This session has room for more registrations, we're good to go
						tmpsession.CurrentMaxMembers++;
						_session= tmpsession;
					}
					else
					{
						// No room for more people, this session needs to be put into the _SessionsInPlay queue
						DQSession=(ArbStressSession)_SessionsQ.Dequeue();
					}
				}
				if(_session == null)
				{
					// Either no session found or the one found is being put into the play queue so make a new session
					//5% of the time use slow title.
					if(RandomGen.Next(1,21)<=18)
						_session= new ArbStressSession(0xBADBEEF,RandomGen.Next(minUsersPerSession,maxUsersPerSession),RandomGen.Next(1,11)>9?true:false);
					else
						_session= new ArbStressSession(0xDEAD,RandomGen.Next(minUsersPerSession,maxUsersPerSession),RandomGen.Next(1,11)>9?true:false);
					_SessionsQ.Enqueue(_session);
				}
			}

			if(DQSession!=null)
			{
				// The session we looked at in _SessionsQ was full up on members, time to put it into play
				DQSession.CurrentState=(int)ArbStressSession.States.Play;
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(DQSession);
				}
			}

			return _session;
		}

		public static ArbStressSession GetNextSessionToTimeExtend()
		{
			ArbStressSession _session = null;
			ArbStressSession DQSession= null;
			lock(_SessionsInTimeExtend)
			{
				if(_SessionsInTimeExtend.Count>0)
				{
					ArbStressSession tmp =(ArbStressSession)_SessionsInTimeExtend.Peek();
					if(tmp.CanTimeExtend())
					{
						_session =tmp;
					}
					else
					{
						DQSession =(ArbStressSession)_SessionsInTimeExtend.Dequeue();
					}
				}

				if( _session==null) 
				{
					lock(_SessionsInPlay)
					{
						if(_SessionsInPlay.Count>0)
						{
							_session = (ArbStressSession)_SessionsInPlay.Dequeue();
							if (_session.CurrentMembersRegistered <= 0)
							{
								_SessionsInPlay.Enqueue(_session);
								_session = null;
							}
						}
					}
					if(_session!=null)
					{
						_SessionsInTimeExtend.Enqueue(_session);
					}
				}
			}

			if(DQSession !=null)
			{
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(DQSession);
				}
			}
			return _session;
		}

		public static  ArbStressSession GetNextRegisteredSession()
		{
			ArbStressSession _session = null;
			lock(_RegisteredSessionsQ)
			{
				while(_RegisteredSessionsQ.Count>0)
				{
					ArbStressSession tmpSession=(ArbStressSession)_RegisteredSessionsQ.Peek();
					if(tmpSession.MachineIndexToPost<tmpSession.MaxMembersAllowed)
					{
						tmpSession.MachineIndexToPost++;
						_session=tmpSession;
						break;
					}
					else
					{
						// later put this into verify Queue.
						_RegisteredSessionsQ.Dequeue();
					}
				}
				if(_RegisteredSessionsQ.Count<=0)
				{
					lock(_SessionsInPlay)
					{ 
						if(_SessionsInPlay.Count>XArbSessionManager.ActiveSessions)
						{
							_RegisteredSessionsQ = _SessionsInPlay;
							_SessionsInPlay = new Queue(InPlaySize);
						}
					}
				}
			}
			return _session;
		}
	/*	public static  void AddSession(ArbStressSession Session)
		{// this function determines which queue the object should go to and adds to appropriate queue.
			if(Session.CurrentState == (int)ArbStressSession.States.Registration)
			{
				lock(_SessionsQ)
				{
					_SessionsQ.Enqueue(Session);
				}
			}
			else if(Session.CurrentState == (int)ArbStressSession.States.Registration)
			{
				lock(_SessionsInPlay)
				{
					_SessionsInPlay.Enqueue(Session);
				}
			}
			else if(Session.CurrentState == (int)ArbStressSession.States.Reporting)
			{
				lock(_RegisteredSessionsQ)
				{
					_RegisteredSessionsQ.Enqueue(Session);
				}
			}
		}
*/

	}


	public class ArbStressSession : ArbSessionBase
	{
		public int CurrentIndex=-1; //is index sis used when Reporting results.
		protected ArrayList Users= new ArrayList();
		protected ArrayList teams= new ArrayList();
		protected Stressbundle tournamentdata = null;
		public int MaxMembersAllowed;
		public int CurrentMaxMembers=0;
		public int CurrentMembersRegistered=0;
		public Queue CurrentRegisteredOnlyXboxes = Queue.Synchronized(new Queue());
		public int MachineIndexToPost=0;
		public int CurrentState=(int)ArbStressSession.States.Registration;
		private long StartTime=DateTime.Now.Ticks;
		public int SessionTTL = 600; // session play time 10 min.
		private int TimeExtendCount=0;
		private byte[] RandomStatsData = null;
		public bool IncludeQueryBundle=false;
		public static  byte[] statsdata = new byte[XArbSessionManager.maxBundleSize * 2];
		public static  byte[] statsdata2 = new byte[10];
		public enum States:int
		{
			Registration,
			Play,
			Reporting,
			Verification
		};
		public RandomEx random= new RandomEx();

		public int GetTimeInQueue()
		{
			TimeSpan timeinSesssion =new TimeSpan(DateTime.Now.Ticks-StartTime);
			return timeinSesssion.Seconds;
		}

		public ArbStressSession(uint title,int MaxMembers,bool AddQueryB):base(title)
		{
			MaxMembersAllowed =MaxMembers;
			IncludeQueryBundle=AddQueryB;
			string sessionIdNonce = this.SessionId.ToString("X16")+ this.SessionNonce.ToString("X16");
			XArbListener.Stressht.Add(sessionIdNonce,null);

			int size = random.Next(XArbSessionManager.minBundleSize,XArbSessionManager.maxBundleSize);
			RandomStatsData = new byte[size];
			System.Array.Copy(statsdata, random.Next(XArbSessionManager.maxBundleSize), this.RandomStatsData, 0, size);
		}
			
		public bool CanTimeExtend()
		{
			bool retval= false;
			lock(this)
			{
				TimeExtendCount++;
				if(TimeExtendCount<=MaxMembersAllowed)
				{
					retval= true;
				}
			}
			return retval;
		}

		private static XRLRegister SrcXRLRegister = new XRLRegister();

		public bool RegisterParticipant(int UserCount)
		{
			Machine xbox = new Machine();
			lock(this)
			{
				this.machines.Add(xbox);
			}
			XRLRegister register = SrcXRLRegister.DeepClone();
			//XRLRegister register = new XRLRegister();
			register.sessionId=this.SessionId;
			register.sessionNonce= this.SessionNonce;
			register.machinePuid= xbox.MachinePuid;
			register.maxSessionSeconds=(ushort)this.SessionTTL;

			if(IncludeQueryBundle)
				register.flags =XRLRegister.Flags.SessionIsFreeForAll|XRLRegister.Flags.TimeExtendable|XRLRegister.Flags.IsTournament;
			else
				register.flags =XRLRegister.Flags.SessionIsFreeForAll|XRLRegister.Flags.TimeExtendable;

			for(int i = 0; i < UserCount; i++)
			{
				ArbUsers user = XArbSessionManager.GetNextUser();
				register.userPuid[i] = user.Puid;
				lock(Users)
				{
					Users.Add(user.Puid);
				}

				register.userFlag[i]=0;
				register.userTrust[i]=XArbGlobal.defaultUserTrust;
			}

			register.titleId=this.TitleId;

			bool retval=false;
			try
			{
				retval=register.Execute();
				if (!retval)
				{
					Global.RO.Error("Register failed for {0}:{1}(Xbox ID: {2}): {3}", register.sessionId.ToString("X"),
						register.sessionNonce.ToString("X"), register.machinePuid, register.GetDumpString());
				}
				else
				{
					CurrentRegisteredOnlyXboxes.Enqueue(xbox);
					Interlocked.Increment(ref CurrentMembersRegistered);
				}
			}
			catch(Exception e)
			{
				Global.RO.Error("Port = "+register.Slot.port);
				Global.RO.Error(e.ToString());
			}
			return retval;
		}

		private static XRLTimeExtend SrcXRLTimeExtend = new XRLTimeExtend();
		
		public bool ExtendTime()
		{
			XRLTimeExtend myTimeExtend = SrcXRLTimeExtend.DeepClone();
			//XRLTimeExtend myTimeExtend = new XRLTimeExtend();
			//Machine xbox1 = (Machine)machines[0];
			Machine xbox1 = (Machine)CurrentRegisteredOnlyXboxes.Peek();
			myTimeExtend.machinePuid=xbox1.MachinePuid;
			myTimeExtend.sessionId= SessionId;
			myTimeExtend.sessionNonce=SessionNonce;
			myTimeExtend.titleId=TitleId;
			myTimeExtend.flags=0;
			myTimeExtend.maxSessionSecondsFromNow=(ushort)this.SessionTTL;
			myTimeExtend.ReceiveTimeOut=200;
			myTimeExtend.IgnoreUDPReceive=XArbSessionManager.IgnoreUPDRecive;

			bool retval=false;
			try
			{
				retval=myTimeExtend.Execute();
				if (!retval)
				{
					Global.RO.Error("Time Extend failed for {0}:{1}(Xbox ID: {2}): {3}", myTimeExtend.sessionId.ToString("X"),
						myTimeExtend.sessionNonce.ToString("X"), myTimeExtend.machinePuid, myTimeExtend.GetDumpString());
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine("Port = "+myTimeExtend.Slot.port);
				System.Console.WriteLine(e);
			}

			return retval;
		}
		
		public byte[] GetStatsData()
		{
			Stressbundle Statsdata = new Stressbundle();
			Statsdata.Users =new ulong[Users.Count];
			for (int i=0; i < Users.Count; i++)
			{
				Statsdata.Users[i] = (ulong)Users[i];
			}
			int size = random.Next(XArbSessionManager.minBundleSize,XArbSessionManager.maxBundleSize);
			//Statsdata.randamdata = new byte[size];
			//random.NextBytes(Statsdata.randamdata);
			//System.Array.Copy(statsdata, random.Next(XArbSessionManager.maxBundleSize), Statsdata.randamdata, 0, size);
			Statsdata.randamdata = new byte[RandomStatsData.Length];
			System.Array.Copy(RandomStatsData, 0, Statsdata.randamdata, 0, RandomStatsData.Length);
			return (byte[])Statsdata;
		}

		public byte[] GetStatsData2()
		{
			Stressbundle Statsdata = new Stressbundle();
			Statsdata.Users = new ulong[Users.Count];
			for (int i=0; i< Users.Count; i++)
			{
				Statsdata.Users[i]= (ulong)Users[i];
			}
			Statsdata.randamdata = statsdata2;

			return (byte[])Statsdata;
		}

		private static XRLReportResult SrcXRLReportResult = new XRLReportResult();

		public bool ReportResults(byte[] Statsbundle, byte[] tournamentbundle, bool IsUDP)
		{
			int index= Interlocked.Increment(ref CurrentIndex);
			Machine xbox= (Machine)machines[index];
			XRLReportResult myResults = SrcXRLReportResult.DeepClone();
			//XRLReportResult myResults = new XRLReportResult();
			if(TitleId==0xBADBEEF)
				myResults.AlternateStatsDestination=XArbGlobal.statsEndPoint;
			else
				myResults.AlternateStatsDestination=XArbGlobal.slowstatsEndPoint;
			myResults.AlternateQueryDestination=XArbGlobal.queryEndPoint;
			myResults.machinePuid = xbox.MachinePuid;
			myResults.sessionId = SessionId;
			myResults.sessionNonce = SessionNonce;
			myResults.titleId = TitleId;

			// We cannot submit more then 1048 bites in an UDP Request. if we submit more then 1048 the server will IGnore it.
			// thats why we do not attach any bundle for UDP.
			if(IsUDP)
			{
				myResults.transport=FDTransaction.Transports.UDP;
				myResults.IgnoreUDPReceive=XArbSessionManager.IgnoreUPDRecive;
			}
			else
			{
				myResults.transport=FDTransaction.Transports.TCP;
			}
			if (Statsbundle != null)
			{
				myResults.flags |= XRLReportResult.Flags.StatsBundleInfoSubmit;
				myResults.statsBundle = new StatsBundle();
				myResults.statsBundle.bundle=Statsbundle;
			}

			if (tournamentbundle != null)
			{
				myResults.flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
				myResults.tournamentBundle = new TournamentBundle();
				myResults.tournamentBundle.bundle=tournamentbundle;
			}

			bool retval=false;
			try
			{
				retval=myResults.Execute();
				if (!retval)
				{
					Global.RO.Error("ReportResults failed for {0}:{1}: {2}", myResults.sessionId.ToString("X"),
						myResults.sessionNonce.ToString("X"), myResults.GetDumpString());
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine("Port = "+myResults.Slot.port);
				System.Console.WriteLine(e);
			}

			return retval ;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\XArbTest.cs ===
using System;
using System.Net;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;
using System.Windows.Forms;
using xonline.common.config;

[assembly: RootNode(typeof(XArbTest.XArbTest))]

namespace XArbTest
{
    /// <summary>
    /// <TestSuite>Arbitration Server Test Plan</TestSuite>
    ///    <Tester>Michael Fisher</Tester>
    ///    <Developer>Steve Lamb</Developer>
    ///    <PM>Patrick O'Kelley</PM>
    ///    <Status>Draft</Status>
    /// </summary>
    ///    <remarks>
    ///    <Goal>No goals!</Goal>
    ///    <NonGoal>Having goals</NonGoal>
    ///    <Description>
    ///        <p>
    ///        The Arbitration server consists of a front door server component and an in-house server component.  Inbound packets are both TCP and UDP (for SOS messages)
    ///        and a UDP to TCP packet adapter is installed on each Arb FD.  Upon receiving a packet, the FD uses a private hashing algorithm and potentially server migration
    ///        information from NPDB to determine which INH server to forward the packet on to.  Each INH server "owns" specific arbitrated sessions and maintains session-specific
    ///        state in-memory.  An successful arbitrated session consists of calls from clients to Register at the beginning of a session, an optional call to TimeExtend if needed during,
    ///        and ReportResult at the end.  On the basis of a number of factors related to the data reported and the manner in which it's reported, Arbitration updates each user's
    ///        User Trust Rating, which are flushed to UODB nightly.
    ///        </p>
    ///        <p>
    ///        Arbitration test cases are modeled on expected usage scenarios as well as abstract API testing methodology.  A typical test case will exercise some aspect of the
    ///        functionality under test and verify it a number of ways, including by examing the server response (200/OK), test-only DebugReponse info, and validating various details
    ///        in the response packets.  While it is possible to send cases directly to the INH servers for debugging purposes, it is expected that routine testing will use the FDs.
    ///        </p>
    /// </Description>
    /// </remarks>
    [Owner("kbayer"), TestFrequency("Regression"), TestCasePriority(3)]
    public class XArbTest : TestNode
    {
        public XArbTest()
        {
            //functional tests
            foreach (TestNode n in GetTests())
            {
                AddChild(n);
            }

            //stress tests
            foreach (System.Type t in GetStressTests())
            {
                TestNode n=TestNode.ConstructFromType(t);
                AddChild(n, false, true);
            }
        }

        //TODO: This has not worked in years since STFRunner was deprecated.  Please implement it as an STFGui plugin if you still desire this functionality.
        /*override public void AddCustomMenus()
        {
            CustomMenu.Add(new CustomMenu("Start Listner Option...",new EventHandler(XArbGlobal.statsListener.OptionHandler)));
            CustomMenu.Add(new CustomMenu("Query Listner Option...",new EventHandler(XArbGlobal.queryListener.OptionHandler)));
            CustomMenu.Add(new CustomMenu("Start Slow Listner Option... ",new EventHandler(XArbGlobal.slowstatsListener.OptionHandler)));
            CustomMenu.Add(new CustomMenu("Stress Option... ",new EventHandler(this.StressOption)));
        }*/

        public void StressOption(Object sender, System.EventArgs e)
        {
            StressOption tmp = new StressOption();
            tmp.textBox1.Text=XArbSessionManager.minBundleSize.ToString();
            tmp.textBox2.Text=XArbSessionManager.maxBundleSize.ToString();
            tmp.textBox4.Text =XArbSessionManager.minUsersPerSession.ToString();
            tmp.textBox5.Text =XArbSessionManager.maxUsersPerSession.ToString();
            if(XArbSessionManager.IgnoreUPDRecive==false)
                tmp.checkBox1.Checked= true;
            if(tmp.ShowDialog()==DialogResult.OK)
            {
                XArbSessionManager.minBundleSize= Convert.ToInt32(tmp.textBox1.Text);
                XArbSessionManager.maxBundleSize= Convert.ToInt32(tmp.textBox2.Text);
                XArbSessionManager.minUsersPerSession =Convert.ToInt32(tmp.textBox4.Text);
                XArbSessionManager.maxUsersPerSession =Convert.ToInt32(tmp.textBox5.Text);
                if(tmp.checkBox1.Checked== true)
                    XArbSessionManager.IgnoreUPDRecive=false;
                else
                    XArbSessionManager.IgnoreUPDRecive=true;
            }
        }

        public override void PreRun(RUN_TYPE runType)
        {
            InternalInitialize(runType == RUN_TYPE.FUNCTIONAL);
        }

        public void InternalInitialize(bool ISFunctional)
        {
            XArbGlobal.statsListener.Go();
            XArbGlobal.statsListener.SetXError(HResult.XONLINE_E_STAT_LEADERBOARD_READONLY);

            if(!ISFunctional)
            {
                XArbGlobal.slowstatsListener.Go();
                XArbGlobal.slowstatsListener.SetXError(HResult.XONLINE_E_STAT_LEADERBOARD_READONLY);
            }
            XArbGlobal.queryListener.Go();

            try
            {
                //Create set of users

                if(ISFunctional)
                {
                    Console.WriteLine("Populating or creating a set of global arbitration test users.");
                    if (XArbGlobal.defaultUserPuids == null)
                    {
                        UacsCommon uac=new UacsCommon();
                        ServerTestFramework.Database.UodbWS.CreateBulkUsers("ar", XArbGlobal.maxUsers + 4, out XArbGlobal.defaultUserPuids);
                        //Set Title Trust Constants
                        Console.WriteLine("Updating or creating title constants in UODB and then running ReloadTitleParameters management commands.");

                        if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.myTitleTrustConstants))
                            Console.WriteLine("Unable to create/update my title id in UODB");
                    }
                    else
                    {
                        Console.WriteLine("Using existing users");
                    }

                    if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.myTitleTrustConstants))
                        Console.WriteLine("Unable to create/update my title id in UODB");

                }
                else
                {
                    XArbListener.IsStress = true;
                    Console.WriteLine("Populating or creating a set of global arbitration test users.");
                    XArbSessionManager.InitStress();
                    //Set Title Trust Constants
                    Console.WriteLine("Updating or creating title constants in UODB and then running ReloadTitleParameters management commands.");
                        if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.StressTitleTrustConstants))
                        Console.WriteLine("Unable to create/update my title id in UODB");
                    //SlowStressTitleTrustConstants
                    if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.SlowStressTitleTrustConstants))
                        Console.WriteLine("Unable to create/update my title id in UODB");
                }

                if(ISFunctional)
                {
                    if (UseFrontDoors())
                    {
                        //Trigger each front door and each port to come online if not already (120 Ports)
                        XArbGlobal.HealthCheckIis();
                    }
                    else
                    {
                        Console.WriteLine("By-passing xarb process load on front doors.");
                    }

                    //Trigger each inhouse server to come online if not already (1 port)
                    XArbGlobal.HealthCheckInh();
                }

                //Determine if default endpoint is fd or inh
                bool fFrontDoor = UseFrontDoors();

                //Switch XRLPayload static machine type indicators
                XRLRegister.fFrontDoor=fFrontDoor;
                XRLHealthARB.fFrontDoor=fFrontDoor;
                XRLDebugResult.fFrontDoor=fFrontDoor;
                XRLTimeExtend.fFrontDoor=fFrontDoor;
                XRLReportResult.fFrontDoor=fFrontDoor;

                //Use management command to reload title constants
                Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "exec :xarbInh ReloadTitleParameters");

                //Get the local interface to listen
                IPAddress myIp=null;
                Global.RO.Info("Found arb on " +
                    Global.XEnv.GetVirtualInterface(VirtualInterface.xarb).Address.ToString());
                LocalInterface.GetBestMatchByConnecting(Global.XEnv.GetVirtualInterface(VirtualInterface.xarb), out myIp);
                Global.RO.Info("GetBestMatch returned myIp = " + (myIp == null ? "null" : myIp.ToString()));
                XArbGlobal.statsEndPoint = new IPEndPoint(myIp,XArbGlobal.statsPort);
                XArbGlobal.slowstatsEndPoint = new IPEndPoint(myIp,XArbGlobal.SlowstatsPort);
                XArbGlobal.queryEndPoint = new IPEndPoint(myIp,XArbGlobal.queryPort);
            }
            catch
            {
                XArbGlobal.statsListener.Stop();
                if(!ISFunctional)
                {
                    XArbGlobal.slowstatsListener.Stop();
                }
                XArbGlobal.queryListener.Stop();
                throw;
            }
        }

        private bool UseFrontDoors()
        {
            //Determine if default endpoint is fd or inh
            bool UseFDs = true;
            System.Net.IPEndPoint defaultEP = Global.XEnv.GetVirtualInterface(VirtualInterface.xarb);
            // Check if xarb interface was overridden to point to an xarbInh server (by-passing FDs)
            foreach (System.Net.IPEndPoint serverEP in Global.XEnv.GetInterface(Interface.xarbInh))
            {
                if (serverEP.Address.Equals(defaultEP.Address) && serverEP.Port == defaultEP.Port)
                {
                    UseFDs = false;
                }
            }
            return(UseFDs);
        }

        public override void PostRun(RUN_TYPE runType)
        {
            InternalDeInitialize(runType ==  RUN_TYPE.FUNCTIONAL);
        }

        public void InternalDeInitialize(bool ISFunctional)
        {
            XArbGlobal.queryListener.Stop();
            XArbGlobal.statsListener.Stop();

            if(!ISFunctional)
            {
                XArbGlobal.slowstatsListener.Stop();

            }

            Thread.Sleep(100);
            while (XArbGlobal.queryListener.IsAlive)
            {
                Console.WriteLine("query listener thread state: "+XArbGlobal.queryListener.TaskThread.ThreadState.ToString());
                Thread.Sleep(100);
            }

            while (XArbGlobal.statsListener.IsAlive)
            {
                Console.WriteLine("stats listener thread state: "+XArbGlobal.statsListener.TaskThread.ThreadState.ToString());
                Thread.Sleep(100);
            }


        }

        public System.Collections.Generic.List<TestNode> GetTests()
        {
            System.Collections.Generic.List<TestNode> TestGroups=new System.Collections.Generic.List<TestNode>();

            // Initialize test groups
            TestGroups.Add(new FuncTrustTests());
            TestGroups.Add(new FuncRegisterTests());
            TestGroups.Add(new FuncTimeExtendTests());
            TestGroups.Add(new FuncReportResultTests());
            //TestGroups.Add(new FuncMigration());
            TestGroups.Add(new ConfigSettings());

            return TestGroups;
        }

        public System.Collections.Generic.List<System.Type> GetStressTests()
        {
            System.Collections.Generic.List<System.Type> Tests = new System.Collections.Generic.List<System.Type>();
            Tests.Add(typeof(ArbRegister));
            Tests.Add(typeof(ArbTimeExtend));
            Tests.Add(typeof(ReportNormalResults));
            Tests.Add(typeof(ReportDisConnectedResults));
            Tests.Add(typeof(ReportUDPResults));
            Tests.Add(typeof(ReportProblematicResults));

            return Tests;

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\FuncTrustTests.cs ===
using System;
using System.Reflection;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Arbitration;

namespace XArbTest
{
	/// <summary>
	/// Functional Tests for Trust Functionality
	/// </summary>
	/// <remarks>
	/// <Description>
	/// 	<p>
	///		The trust suite implements test cases exercising specific aspects the underlying algorithms used to calculate a user trust rating factor (TRF).
	///
	///		All trust functionality tests verify every call to Arb succeeded by performing the following standard verifications (unless otherwise noted):
	/// 		· Verify using Arb response information the machine PUIDs and the number of Xboxes registered match what was sent
	/// 		· Verify using Arb response information the PUID and flags for each user on each Xbox match what was sent
	/// 		· Verify using Debug Response the registration's title ID, session ID, session nonce, max session seconds, machine PUID, and flags match what was sent
	/// 		· Verify using Debug Response the actual team tickets count match what was sent
	/// 		· Verify using Debug Response the total number of Xboxes registered match what was sent
	/// 		· Verify using Debug Response the user's PUID, flags, and trust rating factor
	///
	///		Additionally each test takes a snapshot of the various users' TRFs after results are reported, calculates what those values ought to be, and then verifies
	///		the actual results with the predicted results.
	///
	///		The title for each test case describes every trust rating variable that's effected and the scenario it's happening under (min/max values, lost connectivity, etc).
	///		The names of variables (ex: C1, TS, or SF) come from the Arbitration Dev Spec, which is checked into SD.  Please consult that document for the meaning
	///		and function of each variable.
	/// 	</p>
	/// </Description>
	/// </remarks>
    [TestGroup, Owner("kbayer"), TestFrequency("Regression")]
	public class FuncTrustTests : TestNode
	{
		const uint defaultWatermark=20;
		const double defaultCWatermark=20.0f;
		static TimeSpan defaultStale = new TimeSpan(0,12,0,0,0);
		static int defaultGameplay = 2; 

		/// <summary>
		///		Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_0
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Submit an arbitrated session with a majority quorum reporting suspicious info with 0 for all UTR values
		/// 	</Description>
		///		<Verify>
		///			Verify user trust ratings are updated to expected values
		///		</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_0 : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_0()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_0";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(0.0f,0,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		///		Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Min
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Submit an arbitrated session with a majority quorum reporting suspicious info with max UTR user values and 0 for all UTR session values
		/// 	</Description>
		///		<Verify>
		///			Verify user trust ratings are updated to expected values
		///		</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Min : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Min()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Min";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(System.Single.MaxValue,0,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		///		Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Normal
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Submit an arbitrated session with a majority quorum reporting suspicious info with 20 for all UTR values
		/// 	</Description>
		///		<Verify>
		///			Verify user trust ratings are updated to expected values
		///		</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Normal : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Normal()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Normal";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		///		Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Max
		/// </summary>
		/// <remarks>
		/// 	<Description>
		///			Submit an arbitrated session with a majority quorum reporting suspicious info with max UTR values
		/// 	</Description>
		///		<Verify>
		///			Verify user trust ratings are updated to expected values
		///		</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Max : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Max()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Max";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(System.Single.MaxValue,System.Int32.MaxValue,defaultStale,defaultGameplay,false,false);
			}
		}
	
		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ShortBaseSessionTime
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum reporting suspicious info with a short gameplay time
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ShortBaseSessionTime : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ShortBaseSessionTime()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ShortBaseSessionTime";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,System.Convert.ToInt32(Math.Max(1,XArbGlobal.myTitleTrustConstants.baseSessionTime-1)),false,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum reporting suspicious info with a gameplay time equal to base session time
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,System.Convert.ToInt32(XArbGlobal.myTitleTrustConstants.baseSessionTime),false,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum reporting suspicious info with a gameplay time longer than the base session time
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ExceedBaseSessionTime : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ExceedBaseSessionTime()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ExceedBaseSessionTime";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,System.Convert.ToInt32(XArbGlobal.myTitleTrustConstants.baseSessionTime*2),false,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_UserComp
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum reporting suspicious info for a competition
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_UserComp : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_UserComp()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_UserComp";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,true,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_PubComp
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum reporting suspicious info for a publisher-based competition
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_PubComp : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_PubComp()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_PubComp";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,true);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_10YR
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum whose UTR values were last changed 10 years ago reporting suspicious info
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_10YR : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_10YR()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_10YR";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,new TimeSpan(3650,0,0,0,0),defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_0
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum whose UTR values were last changed at the start of the session reporting suspicious info
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_0 : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_0()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_0";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,new TimeSpan(0,0,0,0,0),defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_5D
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a majority quorum whose UTR values were last changed 5 days ago reporting suspicious info
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_5D : XArbTestBase
		{
			public P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_5D()
			{
				Name = "P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_5D";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_SuccessfullyArbitratedSession runme = new P_SuccessfullyArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,new TimeSpan(5,0,0,0,0),defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_SuccessfullyArbitratedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_SuccessfullyArbitratedSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 2;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,si,si,si,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,queryBundle,si,si,si,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,gameplayTime))
				{
					return TEST_RESULTS.FAILED;
				}

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c1_SuccessfulSessionCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i]);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C2_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_MinorityReport
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session with a minority (2 of 3 failing to report) quorum reporting suspicious info
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C2_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_MinorityReport : XArbTestBase
		{
			public P_C2_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_MinorityReport()
			{
				Name = "P_C2_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_MinorityReport";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_MinoritySession runme = new P_MinoritySession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_MinoritySession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_MinoritySession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 3;
				double sessionSeconds=0.0;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[2].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				registers[2].flags|=XRLRegister.Flags.TimeExtendable;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
					registers[2].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[2].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,si,si,si,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.S_OK,gameplayTime,out sessionSeconds))
				{
					return TEST_RESULTS.FAILED;
				}

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c2_MinoritySessionCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i],sessionSeconds);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
					if (i!=0)
					{
						utrPrediction[i].totalSessionDisconnects=Math.Min(utrPrediction[i].totalSessionDisconnects+1,System.Int32.MaxValue);
						TrustModifiedIncrement(ref utrPrediction[i].c6_DisconnectCount,registers[i],sessionSeconds);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C5_C7_C8_C9_TS_SB_SX_SS_SF_UDPReport
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session using both TCP and UDP with a majority quorum reporting suspicious info
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C5_C7_C8_C9_TS_SB_SX_SS_SF_UDPReport : XArbTestBase
		{
			public P_C5_C7_C8_C9_TS_SB_SX_SS_SF_UDPReport()
			{
				Name = "P_C5_C7_C8_C9_TS_SB_SX_SS_SF_UDPReport";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_UDPReportArbitratedSession runme = new P_UDPReportArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_UDPReportArbitratedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_UDPReportArbitratedSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 2;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,si,si,si,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,queryBundle,si,si,si,null);
				results[1].transport=FDTransaction.Transports.UDP;

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,gameplayTime))
				{
					return TEST_RESULTS.FAILED;
				}

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c5_UDPReportCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i]);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C4_C7_C8_C9_TS_SB_SX_SS_SF_MixedBundles
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session reporting suspicious info and differing stats bundles
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C4_C7_C8_C9_TS_SB_SX_SS_SF_MixedBundles : XArbTestBase
		{
			public P_C4_C7_C8_C9_TS_SB_SX_SS_SF_MixedBundles()
			{
				Name = "P_C4_C7_C8_C9_TS_SB_SX_SS_SF_MixedBundles";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_MultipleBundleArbitratedSession runme = new P_MultipleBundleArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_MultipleBundleArbitratedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_MultipleBundleArbitratedSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 2;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle1 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				StatsBundle statsBundle2 = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				results[0] = BuildXRLReportResult(registers[0],statsBundle1,queryBundle,si,si,si,null);
				results[1] = BuildXRLReportResult(registers[1],statsBundle2,queryBundle,si,si,si,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,gameplayTime))
				{
					return TEST_RESULTS.FAILED;
				}

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c4_ProblematicSessionCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i]);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C4_C7_C8_C9_TS_SB_SX_SS_SF_LostConnectivity
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit an arbitrated session reporting suspicious info and the first Xbox reporting lost connection to the second Xbox
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C4_C7_C8_C9_TS_SB_SX_SS_SF_LostConnectivity : XArbTestBase
		{
			public P_C4_C7_C8_C9_TS_SB_SX_SS_SF_LostConnectivity()
			{
				Name = "P_C4_C7_C8_C9_TS_SB_SX_SS_SF_LostConnectivity";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_LostConnectivityArbitratedSession runme = new P_LostConnectivityArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_LostConnectivityArbitratedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_LostConnectivityArbitratedSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 2;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[xboxes];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				LostConnectivityInfo lci = new LostConnectivityInfo();
				lci.xboxPuid=new ulong[1];
				lci.xboxPuid[0]=registers[1].machinePuid;

				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,si,si,si,lci);
				results[1] = BuildXRLReportResult(registers[1],statsBundle,queryBundle,si,si,si,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,gameplayTime))
				{
					return TEST_RESULTS.FAILED;
				}

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c4_ProblematicSessionCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i]);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: P_C3_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_FailedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Submit a 4-Xbox normal arbitrated session from just a single Xbox with insufficent TRF to consistute a minority quorum
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class P_C3_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_FailedSession : XArbTestBase
		{
			public P_C3_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_FailedSession()
			{
				Name = "P_C3_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_FailedSession";
				Desc = "Make sure that this variable is modified correctly";
			}
			override protected void Execute()
			{
				P_FailedArbitratedSession runme = new P_FailedArbitratedSession();
				ResultCode=runme.Execute(defaultCWatermark,defaultWatermark,defaultStale,defaultGameplay,false,false);
			}
		}

		/// <summary>
		/// 	Trust Helper: P_FailedArbitratedSession
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Helper class used by test cases
		/// 	</Description>
		/// 	<Verify>
		///			N/A
		/// 	</Verify>
		/// </remarks>
		class P_FailedArbitratedSession : XArbTestBase
		{
			override protected void Execute(){}

			public ServerTestFramework.TEST_RESULTS Execute(double c_watermark, uint total_session_watermark, TimeSpan stale, int gameplay, bool comp, bool compPub)
			{
				const int users = 4;
				TimeSpan gameplayTime = new TimeSpan(0,0,0,gameplay,0);
				double sessionSeconds=0.0;

				//Prepare db
				if (false==PrepareUserTrustRating(users,c_watermark,total_session_watermark,stale))
				{
					return TEST_RESULTS.FAILED;
				}

				//Before Snapshot
				UserTrustRatings[] utrBefore=null;
				if (false==GetFlushedTrust(users,out utrBefore))
				{
					return TEST_RESULTS.FAILED;
				}
				
				//Scenario
				const uint xboxes=users;
				XRLReportResult[] results = new XRLReportResult[1];
				XRLRegister[] registers = new XRLRegister[xboxes];
				uint userIndex=0;
				StatsBundle statsBundle = MakeStatsBundle(XArbGlobal.defaultStatsBundleSize);
				TournamentBundle queryBundle = null;

				//registers
                registers[0] = BuildXRLRegister(null,1,ref userIndex);
                registers[1] = BuildXRLRegister(registers[0],1,ref userIndex);
                registers[2] = BuildXRLRegister(registers[1],1,ref userIndex);
                registers[3] = BuildXRLRegister(registers[2],1,ref userIndex);
				registers[0].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[1].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[2].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[3].flags|=XRLRegister.Flags.SessionIsFreeForAll;
				registers[0].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].flags|=XRLRegister.Flags.TimeExtendable;
				registers[2].flags|=XRLRegister.Flags.TimeExtendable;
				registers[3].flags|=XRLRegister.Flags.TimeExtendable;
				registers[1].userTrust[0]+=0.5f;
				registers[2].userTrust[0]+=0.5f;
				registers[3].userTrust[0]+=0.5f;
				if ((true==comp)||(true==compPub))
				{
					registers[0].flags|=XRLRegister.Flags.IsTournament;
					registers[1].flags|=XRLRegister.Flags.IsTournament;
					registers[2].flags|=XRLRegister.Flags.IsTournament;
					registers[3].flags|=XRLRegister.Flags.IsTournament;
				}
				if (true==compPub)
				{
					registers[0].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[1].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[2].flags|=XRLRegister.Flags.PublisherBasedTournament;
					registers[3].flags|=XRLRegister.Flags.PublisherBasedTournament;
				}

				//results
				ulong[] mpuids = new ulong[1];
				mpuids[0]=registers[0].machinePuid;
				ulong[] upuids = new ulong[1];
				upuids[0]=registers[0].userPuid[0];
				SuspiciousInfo si = MakeSuspiciousInfo("somethings suspicious",mpuids,upuids);

				if ((true==comp) || (true==compPub))
				{
					queryBundle = MakeTournamentBundle(XArbGlobal.defaultTournamentBundleSize);
				}
				results[0] = BuildXRLReportResult(registers[0],statsBundle,queryBundle,si,si,si,null);

				//Execute and verify
				if (false==ExecuteAndVerify(registers,results,HResult.S_OK,gameplayTime,out sessionSeconds))
				{
					return TEST_RESULTS.FAILED;
				}

				//Wait for failed session to timeout
				System.Threading.Thread.Sleep(new TimeSpan(0,0,0,registers[0].maxSessionSeconds+XArbGlobal.serverSessionTimeoutExtensionSeconds+10,0));

				//After Snapshot
				UserTrustRatings[] utrAfter=null;
				if (false==GetFlushedTrust(users,out utrAfter))
				{
					return TEST_RESULTS.FAILED;
				}

				//Make a predictions
				UserTrustRatings[] utrPrediction=new UserTrustRatings[users];
				for (int i=0; i<users; i++)
				{
					utrPrediction[i]=utrBefore[i].MemberwiseClone();
					utrPrediction[i].changeDatetime=utrAfter[i].changeDatetime;
					DecayCVars(utrPrediction[i],utrBefore[i],utrAfter[i]);
					TrustModifiedIncrement(ref utrPrediction[i].c3_FailedSessionCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c7_Type1SuspiciousCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c8_Type2SuspiciousCount,registers[i],sessionSeconds);
					TrustModifiedIncrement(ref utrPrediction[i].c9_Type3SuspiciousCount,registers[i],sessionSeconds);
					utrPrediction[i].totalSessions=Math.Min(utrPrediction[i].totalSessions+1,System.Int32.MaxValue);
					if ((true==comp) || (true==compPub))
					{
						utrPrediction[i].totalCompetitions=Math.Min(utrPrediction[i].totalCompetitions+1,System.Int32.MaxValue);
					}
					if (i!=0)
					{
						TrustModifiedIncrement(ref utrPrediction[i].c6_DisconnectCount,registers[i],sessionSeconds);
						utrPrediction[i].totalSessionDisconnects=Math.Min(utrPrediction[i].totalSessionDisconnects+1,System.Int32.MaxValue);
					}
				}
				utrPrediction[0].sessionBase=Math.Min(utrPrediction[0].sessionBase+1,System.Int32.MaxValue);
				utrPrediction[0].sessionXboxCount=Math.Min(utrPrediction[0].sessionXboxCount+xboxes,System.Int32.MaxValue);
				utrPrediction[0].sessionSeconds=Math.Min(utrPrediction[0].sessionSeconds+System.Convert.ToUInt32(gameplayTime.TotalSeconds),System.Int32.MaxValue);
				utrPrediction[0].sessionFreeForAll=Math.Min(utrPrediction[0].sessionFreeForAll+1,System.Int32.MaxValue);

				//Check prediction
				if (false==CompareTrustPrediction(utrPrediction,utrAfter))
					return TEST_RESULTS.FAILED;

				return TEST_RESULTS.PASSED;
			}
		}

		/// <summary>
		/// 	Trust Tests: NightlyProcessing
		/// </summary>
		/// <remarks>
		/// 	<Description>
		/// 		Use Xmgmt PerformTrustSummation to perform a trust summation on the user trust ratings to adjust the weights and verify the results against predictions
		/// 	</Description>
		/// 	<Verify>
		///			Verify user trust ratings are updated to expected values
		/// 	</Verify>
		/// </remarks>
		class NightlyProcessing : XArbTestBase
		{
			public NightlyProcessing()
			{
				Name = "NightlyProcessing";
				Desc = "Simulate nightly processing";
			}
			override protected void Execute()
			{

				//Make sure that titletrustconstants are at least 24 hours old
				TitleTrustConstants backdatedTTC = new TitleTrustConstants();
				backdatedTTC = XArbGlobal.myTitleTrustConstants.MemberwiseClone();
				backdatedTTC.changeDatetime=UodbWS.GetUTCDate().Subtract(new TimeSpan(2,0,0,0,0));

				//No need to reload via management command since all we are changing is the datetime;
				if (false==UodbWS.SetTitleTrustConstants(backdatedTTC))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

                UodbWS.ClearUserTrustRatings(XArbGlobal.myTitleTrustConstants.titleId);

				//Create a simple utr for all parameters to summed
				uint factor = 4;
				UserTrustRatings utr = new UserTrustRatings(0L,XArbGlobal.myTitleTrustConstants.titleId,factor*2,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,factor,UodbWS.GetUTCDate());

				//Update all users with simple utr
                uint puidCount=XArbGlobal.defaultUserPuids.Count;
                for (uint i=0; i<puidCount;i++)
				{
                    utr.puid=XArbGlobal.defaultUserPuids.IndexToPuid(i);
					utr.titleId=XArbGlobal.myTitleTrustConstants.titleId;
					UodbWS.SetUserTrustRatings(utr);
				}

				//Delete the summation lock that prevent summation from being run more than every 24 hours
                UodbWS.ExecuteSQLNonQuery("DELETE FROM t_trust_update_lock", null);

				//Use management command to perform trust summation
				string response = null;
				if (!SendXmgmtCmdByIPEndPoint(Global.XEnv.GetInterface(xonline.common.config.Interface.xarbInh)[0], "exec :xarbInh PerformTrustSummation",out response))
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Get the actual summation
				TitleTrustConstants actual = new TitleTrustConstants();
				if (false==UodbWS.GetTitleTrustConstants(XArbGlobal.myTitleTrustConstants.titleId,out actual)){
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				//Make a prediction
				uint sumFactor = System.Convert.ToUInt32(factor * puidCount);
				TitleTrustConstants predict = new TitleTrustConstants();
				predict = XArbGlobal.myTitleTrustConstants.MemberwiseClone();
				predict.s1 = sumFactor*2;
				predict.s2 = sumFactor;
				predict.s3 = sumFactor;
				predict.s4 = sumFactor;
				predict.s5 = sumFactor;
				predict.s6 = sumFactor;
				predict.s7 = sumFactor;
				predict.s8 = sumFactor;
				predict.s9 = sumFactor;
				predict.totalSessions = System.Convert.ToUInt64(sumFactor);
				predict.totalSessionDisconnects = System.Convert.ToUInt64(sumFactor);
				predict.totalCompetitions = System.Convert.ToUInt64(sumFactor);
				predict.totalCompetitionNoShows = System.Convert.ToUInt64(sumFactor);
				predict.sessionBase = System.Convert.ToUInt64(sumFactor);
				predict.sessionXboxCount = System.Convert.ToUInt64(sumFactor);
				predict.sessionSeconds = System.Convert.ToUInt64(sumFactor);
				predict.sessionFreeForAll = System.Convert.ToUInt64(sumFactor);
				predict.totalUsers = System.Convert.ToUInt32(puidCount);

				double wSum = XArbGlobal.myTitleTrustConstants.w2+XArbGlobal.myTitleTrustConstants.w3+XArbGlobal.myTitleTrustConstants.w4+XArbGlobal.myTitleTrustConstants.w5+XArbGlobal.myTitleTrustConstants.w6+XArbGlobal.myTitleTrustConstants.w7+XArbGlobal.myTitleTrustConstants.w8+XArbGlobal.myTitleTrustConstants.w9;

				predict.r2 = (XArbGlobal.myTitleTrustConstants.w2 * predict.s1) / (wSum * predict.s2);
				predict.r3 = (XArbGlobal.myTitleTrustConstants.w3 * predict.s1) / (wSum * predict.s3);
				predict.r4 = (XArbGlobal.myTitleTrustConstants.w4 * predict.s1) / (wSum * predict.s4);
				predict.r5 = (XArbGlobal.myTitleTrustConstants.w5 * predict.s1) / (wSum * predict.s5);
				predict.r6 = (XArbGlobal.myTitleTrustConstants.w6 * predict.s1) / (wSum * predict.s6);
				predict.r7 = (XArbGlobal.myTitleTrustConstants.w7 * predict.s1) / (wSum * predict.s7);
				predict.r8 = (XArbGlobal.myTitleTrustConstants.w8 * predict.s1) / (wSum * predict.s8);
				predict.r9 = (XArbGlobal.myTitleTrustConstants.w9 * predict.s1) / (wSum * predict.s9);

				predict.k = predict.s1 / puidCount;

				bool dateChanged = false;
				Type type = typeof(TitleTrustConstants);
				foreach (FieldInfo field in type.GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
				{
					if (false==field.GetValue(actual).Equals(field.GetValue(predict)))
					{
						if (field.FieldType==typeof(System.DateTime))
						{
							dateChanged=true;
							continue;
						}
						ConsoleX.WriteLine(field.ToString()+"="+field.GetValue(predict)+"!="+field.GetValue(actual));
						ResultCode=TEST_RESULTS.FAILED;
						return;
					}
				}

				if (!dateChanged)
				{
					ResultCode=TEST_RESULTS.FAILED;
					return;
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public FuncTrustTests()
		{
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_0());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Min());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Normal());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_Max());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ShortBaseSessionTime());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_EqualBaseSessionTime());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_ExceedBaseSessionTime());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_UserComp());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_TC_PubComp());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_10YR());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_0());
            AddChild(new P_C1_C7_C8_C9_TS_SB_SX_SS_SF_DeltaT_5D());
            AddChild(new P_C5_C7_C8_C9_TS_SB_SX_SS_SF_UDPReport());
            AddChild(new P_C4_C7_C8_C9_TS_SB_SX_SS_SF_MixedBundles());
            AddChild(new P_C4_C7_C8_C9_TS_SB_SX_SS_SF_LostConnectivity());
            AddChild(new P_C3_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_FailedSession());
            AddChild(new P_C2_C6_C7_C8_C9_TS_TSD_SB_SX_SS_SF_MinorityReport());
            AddChild(new NightlyProcessing());

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xarbtest_none_12.4.56.0_none_1c140f2571d5df4c
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xarbtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.manifest
XP_MANIFEST_PATH=manifests\msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.cat
XP_CATALOG_PATH=manifests\msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.cat
XP_PAYLOAD_PATH=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xarbtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xarbtest_none_12.4.56.0_none_1c140f2571d5df4c
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xarbtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.manifest
XP_MANIFEST_PATH=manifests\msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.cat
XP_CATALOG_PATH=manifests\msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece.cat
XP_PAYLOAD_PATH=msil_xarbtest_no-public-key_12.4.56.0_x-ww_48b46ece
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xarbtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XBLCacheTest\MainClass.cs ===
using System;
using ServerTestFramework;

namespace XBLCacheTest
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XBLCacheTest\FuncGeneralMatrix.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;

using System.Collections;
using System.Diagnostics;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.xboxcom;

namespace XBLCacheTest
{
    /// General Test case
    /// This API works 
    [TestGroup, Description("Sync settings request part deux")]
    public class FuncGeneralMatrix : TestNode
    {
        private const uint TITLE_ID = 0xFFED0000;

        private const uint GAMER_TYPE = 0x10040001;
        private const uint CONTROLLER_INVERSION = 0x10040002;
        private const uint CONTROLLER_VIBRATION = 0x10040003;
        private const uint GAMER_TILE_PATH = 0x23e80004;

        public static void SetUpSyncSettingsReq(SyncSettingsRequest syncReq, uint titleID, ulong userID1)
        {
            syncReq.TitleId = titleID;
            syncReq.UserId = userID1;
            syncReq.Version = new DateTime(2002, 11, 15);
        
            syncReq.Settings = new UserSetting[3];
        
            syncReq.Settings[0] = new UserSetting();
            syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
            syncReq.Settings[0].UserId = userID1;
            syncReq.Settings[0].SettingId = GAMER_TYPE;
            syncReq.Settings[0].Value = new byte[] { 0x1 };
        
            syncReq.Settings[1] = new UserSetting();
            syncReq.Settings[1].Source = XOn.XSOURCE_DEFAULT;
            syncReq.Settings[1].UserId = userID1;
            syncReq.Settings[1].SettingId = CONTROLLER_INVERSION;
            syncReq.Settings[1].Value = new byte[] { 0x2 };
        
            syncReq.Settings[2] = new UserSetting();
            syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
            syncReq.Settings[2].UserId = userID1;
            syncReq.Settings[2].SettingId = GAMER_TILE_PATH;
            syncReq.Settings[2].Value = Encoding.ASCII.GetBytes("e:\\image");
        }

        // Stats sync settings
        // Read settings - 2nd Request
        [TestCase, Description("Mainline Xbox Cache Layer Test")]
            class XBLCache2ndRequest : TestBase
        {
            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.PASSED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest profilesReq = new XrlRequest();
                profilesReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                profilesReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------

                Console.WriteLine("Adding some default settings...");        
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();
        
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                profilesReq.RequestOb = lcReq;

                profilesReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Send the Syn request
                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                syncResp.SetBytes(profilesReq.ResponseData);

                // Send it again
                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                //------------------- Read Settings Request -------------------

                Console.WriteLine("... and reading them back..");        
                ReadSettingsRequest readReq = new ReadSettingsRequest();
                readReq.UserId = userID1;
                readReq.TitleId = TITLE_ID;
                readReq.ForUserIds = new ulong[] { userID1 };
                readReq.SettingIds = new uint[] { GAMER_TYPE, CONTROLLER_INVERSION, GAMER_TILE_PATH };
        
                ReadSettingsResponse readResp = new ReadSettingsResponse();
            
                lcReq.XRL = readReq.GetXRL();
                lcReq.PostData = readReq.GetBytes();
            
                HTTPAuthData myHttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                // Now the profilesReq is a Read Settings Request
                profilesReq.RequestOb = lcReq;
                profilesReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                // Send the request
                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // Send it again
                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // Set the response payload
                readResp.SetBytes(profilesReq.ResponseData);
        
                try
                {
                    // Verify the results
                    Assert.AreEqual(readResp.SettingsLen, 3);
                    Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_TYPE);
                    Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
                    Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
                    Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
                    Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
                    Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );
                }
                catch
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
#endif
            }
        }
	

        // Linked account
        // Allow Anonymous access = 0
        // Should pass

        // Linked account
        // Allow Anonymous access = 1
        // Should pass

        // Unlinked account
        // Allow Anonymous access = 0
        // Should fail

        // Unlinked account
        // Allow Anonymous access = 1
        // Should pass

        // Request at time duration (cache miss)
        // Stats read settings used as mainline case
        [TestCase, Description("Cache Miss test, wait duration")]
            class XBLCacheDelayCacheMiss : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            private const uint GAMER_TYPE = 0x10040001;
            private const uint CONTROLLER_INVERSION = 0x10040002;
            private const uint CONTROLLER_VIBRATION = 0x10040003;
            private const uint GAMER_TILE_PATH = 0x23e80004;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.PASSED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest profilesReq = new XrlRequest();
                profilesReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                profilesReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------

                Console.WriteLine("Adding some default settings...");        
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();
        
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                profilesReq.RequestOb = lcReq;

                profilesReq.AuthData = HttpAuthData.GetBase64EncodedString();

                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                syncResp.SetBytes(profilesReq.ResponseData);

                //------------------- Read Settings Request -------------------

                Console.WriteLine("... and reading them back 60 seconds later..");        
                ReadSettingsRequest readReq = new ReadSettingsRequest();
                readReq.UserId = userID1;
                readReq.TitleId = TITLE_ID;
                readReq.ForUserIds = new ulong[] { userID1 };
                readReq.SettingIds = new uint[] { GAMER_TYPE, CONTROLLER_INVERSION, GAMER_TILE_PATH };
        
                ReadSettingsResponse readResp = new ReadSettingsResponse();
            
                lcReq.XRL = readReq.GetXRL();
                lcReq.PostData = readReq.GetBytes();
            
                HTTPAuthData myHttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                profilesReq.RequestOb = lcReq;
                profilesReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                // Send it off
                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // -- make the same reqeust again --
                System.Threading.Thread.Sleep(60000);
                Console.WriteLine("Waiting for the cache to timeout... 60 sec");

                if(profilesReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // Set the response payload
                readResp.SetBytes(profilesReq.ResponseData);

                try
                {
                    // Verify the results
                    Assert.AreEqual(readResp.SettingsLen, 3);
                    Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_TYPE);
                    Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
                    Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
                    Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
                    Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
                    Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );
                }
                catch
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
#endif
            }
        }


        // Title ID Doesn't exist
        // Stats read settings used as mainline case
        // We don't verify the TitleID is valid other than a non 0 ID
        /*
         * [TestCase, Description("TitleID doesn't exist")]
        class XBLCacheTitleIDDoesntExist : TestBase
        {
            private const uint TITLE_ID = 666;

            private const uint GAMER_TYPE = 0x10040001;
            private const uint CONTROLLER_INVERSION = 0x10040002;
            private const uint CONTROLLER_VIBRATION = 0x10040003;
            private const uint GAMER_TILE_PATH = 0x23e80004;

            protected override void Execute()
            {
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.PASSED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------

                Console.WriteLine("Adding some default settings...");        
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                uint hr = xrlReq.Send();
                if(hr != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                syncResp.SetBytes(xrlReq.ResponseData);

                //------------------- Read Settings Request -------------------

                Console.WriteLine("... and reading them back..");        
                ReadSettingsRequest readReq = new ReadSettingsRequest();
                readReq.UserId = userID1;
                readReq.TitleId = TITLE_ID;
                readReq.ForUserIds = new ulong[] { userID1 };
                readReq.SettingIds = new uint[] { GAMER_TYPE, CONTROLLER_INVERSION, GAMER_TILE_PATH };
        
                ReadSettingsResponse readResp = new ReadSettingsResponse();
            
                lcReq.XRL = readReq.GetXRL();
                lcReq.PostData = readReq.GetBytes();
            
                HTTPAuthData myHttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                xrlReq.RequestOb = lcReq;
                xrlReq.AuthData = myHttpAuthData.GetBase64EncodedString();

                // Send it off
                if(xrlReq.Send() != HResult.S_OK)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

                // Set the response payload
                readResp.SetBytes(xrlReq.ResponseData);

                try
                {
                    // Verify the results
                    Assert.AreEqual(readResp.SettingsLen, 3);
                    Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_TYPE);
                    Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
                    Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
                    Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
                    Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
                    Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
                    Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );
                }
                catch
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }

            }
        }
        */


        // Invalid TitleID
        // Stats read settings used as mainline case
        [TestCase, Description("Invalid TitleID")]
            class XBLCacheInvalidTitleID : TestBase
        {
            private const uint TITLE_ID = 0;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.FAILED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------

                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 503 from the front door.
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (503) Server Unavailable.") != -1)
                        ResultCode = TEST_RESULTS.PASSED;
                }
#endif
            }
        }


        // Invalid UserID
        // Stats read settings used as mainline case
        [TestCase, Description("Invalid UserID")]
            class XBLCacheInvalidUserID : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0;
                ResultCode = TEST_RESULTS.FAILED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------
       
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 from the front door.
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (500) Internal Server Error.") != -1)
                        ResultCode = TEST_RESULTS.PASSED;
                }
#endif
            }
        }


        // Invalid XRL
        // null, XRL not in DB
        [TestCase, Description("Invalid XRL")]
            class XBLCacheInvalidXRL : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.PASSED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Series of Invalid Requests -------------------
       
                // ***** Empty
                lcReq.XRL = "";
                byte[] rgbRandom = new byte[8];
                RandGen.NextBytes(rgbRandom);
                lcReq.PostData = rgbRandom;

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                // Map our live request to the profile Request
                xrlReq.RequestOb = lcReq;
                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 from the front door.
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (500) Internal Server Error.") == -1)
                        ResultCode = TEST_RESULTS.FAILED;
                }

                // ***** XRL doesn't exist in the db
                lcReq.XRL = "/foo/bar.ashx";
                RandGen.NextBytes(rgbRandom);
                lcReq.PostData = rgbRandom;

                // We can keep the HTTPAuth structure from our previous attempt

                // Map our xrl request to our new livecache request
                xrlReq.RequestOb = lcReq;
                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 from the front door.
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (500) Internal Server Error.") == -1)
                        ResultCode = TEST_RESULTS.FAILED;
                }
#endif
            }
        }

		
        // Valid XRL, bad PostData
        // Stats read settings used as mainline case
        [TestCase, Description("Valid XRL, bad Post Data")]
            class XBLCacheInvalidPostData: TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.FAILED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------
       
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                // Use some random set of data
                lcReq.XRL = syncReq.GetXRL();
                byte[] rgbRandom = new byte[syncReq.GetBytes().Length];
                RandGen.NextBytes(rgbRandom);
                lcReq.PostData = rgbRandom;

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 with an Internal Server Error
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (500) Internal Server Error.") != -1)
                        ResultCode = TEST_RESULTS.PASSED;
                }
#endif
            }
        }


        // Valid XRL, null PostData
        // Stats read settings used as mainline case
        [TestCase, Description("Valid XRL, null Post Data")]
            class XBLCacheNullPostData: TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.FAILED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------
       
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                // Use some random set of data
                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = null;

                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, userID1, TITLE_ID, (uint) XOService.Stats, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = HttpAuthData.GetBase64EncodedString();

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 with an Internal Server Error
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (503) Server Unavailable.") != -1)
                        ResultCode = TEST_RESULTS.PASSED;
                }
#endif
            }
        }


        // Valid XRL, Invalid Auth Data
        // Stats read settings used as mainline case
        [TestCase, Description("Valid XRL, invalid Auth Data")]
            class XBLCacheInvalidAuthData: TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                ResultCode = TEST_RESULTS.FAILED;

                uint partition = Config.GetBucketNum(Interface.livecache, userID1);
                IBucketServer bucket = Config.GetBucketServer(Interface.livecache, partition);

                XrlRequest xrlReq = new XrlRequest();
                xrlReq.TargetUrl = bucket.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();

                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = userID1;
                xrlReq.Path = lcReq.GetXRL();
               
                //------------------- Sync Settings Request -------------------
       
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
				
                SetUpSyncSettingsReq(syncReq, TITLE_ID, userID1);

                // Use some random set of data
                lcReq.XRL = syncReq.GetXRL();
                lcReq.PostData = syncReq.GetBytes();
            
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    
                xrlReq.RequestOb = lcReq;

                xrlReq.AuthData = "Some random crap";

                try
                {
                    xrlReq.Send();
                }
                    // This should return a 500 with an Internal Server Error
                catch(Exception e)
                {
                    if(e.ToString().IndexOf("The remote server returned an error: (500) Internal Server Error.") != -1)
                        ResultCode = TEST_RESULTS.PASSED;
                }
#endif
            }
        }


        // Valid XRL, Null Auth Data - Invalid Ref, We don't care if WireData doesn't catch it.
        // Stats read settings used as mainline case

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\xboxcom\MetadataEditorTest\MetadataEditorTest.cs ===
using System;
using ServerTestFramework;
using Microsoft.WebRunner;

namespace MetadataEditorTest
{
	public class MetadataEditorTest : TestSuite
	{
		public override void Initialize(System.Xml.XmlDocument config)
		{
			base.Initialize (config);

			// set up webrunner values
			Helpers.wrSDK.SearchLevel = 10;
			Helpers.wrSDK.SetTimeOutValue(60000);	// 1 minute
		}
	}

	public class Helpers
	{
		public static WebRunnerSDK wrSDK = new WebRunnerSDK ();
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\xboxcom\MetadataEditorTest\FuncValidationOnApproval.cs ===
using System;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using Microsoft.WebRunner;

namespace MetadataEditorTest
{
/*	/// <summary>
	/// Summary description for ValidationOnApproval.
	/// </summary>
	[TestGroup]
	public class ValidationOnApproval : TestNode
	{
		[TestCase]
		class Mainline: TestBase
		{
			protected override void Execute()
			{
				// What role do we play today?
				CMSRunner.Role = CMSRunner.Publisher;

				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Mainline Test";
				Data.Description = "This page is the result of the Metadata editor testing.";
				Data.Author = CMSRunner.Role.Username;
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = "MetadataEditorTest";
				Data.SearchBehavior = CMSRunner.SEARCH_DONTINCLUDE_DONTFOLLOW;
				Data.Keywords = "Test Metadata Editor Mainline";
				Data.BestBetKeywords = "Mainline Metadata";
				Data.PageRank = CMSRunner.RANK_INCREASED;
				Data.ShellDisplay = CMSRunner.SHELL_HIDDEN;
				Data.PubDate = "4/9/2004";

				// Try to run the testcase
				if (CMSRunner.DoTest ("Metadata_Mainline", Data, Prop))
					this.ResultCode = (CMSRunner.DoApprove ("Metadata_Mainline", Data, Prop)) ? 
						TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}
	}*/
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\xboxcom\MetadataEditorTest\FuncMetadataEditor.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using Microsoft.WebRunner;


namespace MetadataEditorTest
{
	[TestGroup]
	public class MetadataEditor : TestNode
	{
		static private Report RO = new Report (typeof (MetadataEditor).Name);
		private const string XMLFILE = "MetadataEditorTest.xml";
		static private CMSRunner.Properties Prop = new CMSRunner.Properties ();

		#region // Setup and cleanup methods
		// Sets up the test group
		[TestGroupSetup]
		public void Setup ()
		{
			// Load in the XML file info
			CMSRunner.LoadXML (XMLFILE);
		}
		[TestGroupTearDown]
		public void Shutdown ()
		{
		}
		#endregion

		[TestCase]
		class Mainline: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Mainline Test";
				Data.Description = "This page is the result of the Metadata editor testing.";
				Data.Author = CMSRunner.Author.Username;
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = "MetadataEditorTest";
				Data.SearchBehavior = CMSRunner.SEARCH_DONTINCLUDE_DONTFOLLOW;
				Data.Keywords = "Test Metadata Editor Mainline";
				Data.BestBetKeywords = "Mainline Metadata";
				Data.PageRank = CMSRunner.RANK_INCREASED;
				Data.ShellDisplay = CMSRunner.SHELL_HIDDEN;
				Data.PubDate = "4/9/2004";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Mainline", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		[TestCase]
		class Valid_RequiredFieldsOnly: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Required Fields Only Test";
				Data.Description = "This page is the result of the Metadata editor testing.";
				Data.Author = CMSRunner.Author.Username;;
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Keywords = "Test Metadata Editor Mainline";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_RequiredFieldsOnly", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}
	
		[TestCase]
		class Valid_TextFields_MinimumText: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "a";
				Data.Description = "b";
				Data.Author = "c";
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = "d";
				Data.Keywords = "e";
				Data.BestBetKeywords = "f";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_TextFields_MinimumText", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		[TestCase]
		class Valid_TextFields_MaximumText: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				RandomEx Rand = new RandomEx ();
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = Rand.GenerateRandomString ("Metadata Editor - Text Fields Maximim Lenght Test ", 80);
				Data.Description = Rand.GenerateRandomString ("This page is the result of the Metadata editor testing.", 256);
				Data.Author = Rand.GenerateRandomString (CMSRunner.Author.Username, 64);
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = Rand.GenerateRandomString ("MetadataEditorTest ", 100);
				Data.Keywords = Rand.GenerateRandomString ("One, Long, Keyword, ", 256);
				Data.BestBetKeywords = Rand.GenerateRandomString ("One, Long, Keyword, ", 256);

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_TextFields_MaximumText", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		[TestCase]
		class Valid_TextFields_Unicode: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				RandomEx Rand = new RandomEx ();
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "された更新プログラムに置き換わるもの";
				Data.Description = "含まれる過去の更新プログラム : このセキュリティ情報で提供される更新プログラムは、以前提供された更新プログラムに置き換わるものです。 置き換わる更新プログラムの一覧については、このセキュリティ情報の「よく寄せられる質問」をご覧下さい";
				Data.Author = "前提供された更新プログラムに置き換わるものです。 置";
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = "るものです。 置き換わる更新プロ";
				Data.Keywords = "過去の, 去の更, 提供され";
				Data.BestBetKeywords = "キュリティ情, は、以前提供され, 新プロ";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_TextFields_Unicode", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		[TestCase]
		class Valid_TextFields_SpecialCharacters: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Text Fields Special Characters Test";
				Data.Description = "This page is the result of the Metadata editor testing. \"This sentence is in quotes\"";
				Data.Author = "<table border=3 width=100><tr><td>Hahahahah</td></tr></table>";
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Keywords = "Test Metadata Editor Mainline";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Mainline", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}
		[TestCase]
		class Valid_DropDown_FirstSelection: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Valid Dropdown First Selection Test";
				Data.Description = "This page is the result of the Metadata editor testing.";
				Data.Author = CMSRunner.Author.Username;;
				Data.Category = CMSRunner.CATEGORY_GAMES;
				Data.Subcategory = "MetadataEditorTest";
				Data.SearchBehavior = CMSRunner.SEARCH_INCLUDE_FOLLOW;
				Data.Keywords = "Test Metadata Editor Mainline";
				Data.BestBetKeywords = "Mainline Metadata";
				Data.PageRank = CMSRunner.RANK_INCREASED;
				Data.ShellDisplay = CMSRunner.SHELL_FULL;
				Data.PubDate = "4/14/2004";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_DropDown_FirstSelection", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		[TestCase]
		class Valid_DropDown_LastSelection: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Valid Dropdown First Selection Test";
				Data.Description = "This page is the result of the Metadata editor testing.";
				Data.Author = CMSRunner.Author.Username;;
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = "MetadataEditorTest";
				Data.SearchBehavior = CMSRunner.SEARCH_DONTINCLUDE_DONTFOLLOW;
				Data.Keywords = "Test Metadata Editor Mainline";
				Data.BestBetKeywords = "Mainline Metadata";
				Data.PageRank = CMSRunner.RANK_DECREASED;
				Data.ShellDisplay = CMSRunner.SHELL_HIDDEN;
				Data.PubDate = "4/14/2004";

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoTest ("Metadata_Valid_DropDown_LastSelection", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}

		// We no longer enforce a 256 character limit on the description field
/*
		[TestCase]
		class Invalid_TextFields_TooMuchText: TestBase
		{
			protected override void Execute()
			{
				// Create some metadata
				RandomEx Rand = new RandomEx ();
				CMSRunner.Metadata Data = CMSRunner.InitializeMetadata ();
				Data.Title = "Metadata Editor - Text Fields Too Much Text Test";
				Data.Description = Rand.GenerateRandomString ("This page is the result of the Metadata editor testing.", 257);
				Data.Author = Rand.GenerateRandomString (CMSRunner.Author.Username, 65);
				Data.Category = CMSRunner.CATEGORY_SYSTEMS;
				Data.Subcategory = Rand.GenerateRandomString ("MetadataEditorTest ", 101);
				Data.Keywords = Rand.GenerateRandomString ("One, Long, Keyword, ", 257);
				Data.BestBetKeywords = Rand.GenerateRandomString ("One, Long, Keyword, ", 257);

				// What role do we play today?
				CMSRunner.Role = CMSRunner.Author;

				// Try to run the testcase
				this.ResultCode = (CMSRunner.DoNegativeTest ("Metadata_Invalid_TextFields_TooMuchText", Data, Prop)) ? 
					TEST_RESULTS.PASSED : TEST_RESULTS.FAILED;
			}
		}
*/
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XBLCacheTest\FuncCacheHit.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;

using System.Collections;
using System.Diagnostics;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.xboxcom;

namespace XBLCacheTest
{
    [TestGroup]
    public class FuncCacheHit : TestNode
    {
        // Get Terms of Use
        // /US/TermsOfUse.ini
        [TestCase, Description("XBLCache Get TOU")]
            class XBLCacheGetTOU : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                // Set-up XRL Request and LiveCacheRequest
                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	
                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Get the XRL and PostData
                lcReq.XRL = "/US/TermsOfUse.ini";
                lcReq.PostData = new byte[8];

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Base_Subscription, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Examine the response
                //myPCResp.SetBytes(profilesReqA.ResponseData);
                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Content Available Request - 38547
        // /xbos/ContentAvailable.ashx
        [TestCase, Description("XBLCache Content Available")]
            class XBLContentAvailableRequest : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Subscription Status Request structure
                ContentAvailableRequest myCAR = new ContentAvailableRequest();
                myCAR.titleId = TITLE_ID;
                myCAR.esrbRating = 1;	// TODO: Guessing
                myCAR.bitFilter = 0;
                myCAR.countryId = 0;	// TODO: I'm guessing here

                // Get the XRL and PostData
                lcReq.XRL = myCAR.Xrl;
                lcReq.PostData = myCAR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Billing_Offering, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Content Available Requests only get an HR back, there is no response structure - garyt
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myPCResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Offering Cancel - 38547
        // /xbos/OfferingCancel.ashx
        [TestCase, Description("XBLCache Offering Cancel")]
            class XBLOfferingCancel : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Subscription Status Request structure
                OfferingCancelRequest myOC = new OfferingCancelRequest();
                myOC.userPuid = puidA;
                myOC.offerId = 1;

                // Get the XRL and PostData
                lcReq.XRL = myOC.Xrl;
                lcReq.PostData = myOC.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Billing_Offering, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // TODO: Set up the Offering Cancel Request response
                // GetSubscriptionStatusResponse myGSSResp = new GetSubscriptionStatusResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myPCResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Offering Details - 38547
        // /xbos/OfferingDetails.ashx
        [TestCase, Description("XBLCache Get Offering Details")]
            class XBLCacheGetOfferingDetails : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Get Offering Details Request Structure
                OfferingDetailsRequest myOD = new OfferingDetailsRequest();
                myOD.userPuid = puidA;
                myOD.machinePuid = o.machinePuid;
                myOD.titleId = TITLE_ID;
                myOD.offerId = 1;			// TODO: I'm guessing here
                myOD.descriptionIndex = 0;	// TODO: I'm guessing here
                myOD.languageId = 1; 		// TODO: I'm guessing here

                // Get the XRL and PostData
                lcReq.XRL = myOD.Xrl;
                lcReq.PostData = myOD.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Billing_Offering, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Offering Details Request response
                OfferingDetailsResponse myODResp = new OfferingDetailsResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myPCResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Offering Enumerate - 38547
        // /xbos/OfferingEnumerate.ashx
        [TestCase, Description("XBLCache Enumerate Offers")]
            class XBLCacheEnumerateOffers : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Get Offering Enumerate Request Structure
                OfferingEnumerateRequest myOE = new OfferingEnumerateRequest();
                myOE.userPuid = puidA;
                myOE.titleId = TITLE_ID;
                myOE.esrbRating = 0; 
                myOE.offerType = 0;
                myOE.bitFilter = 0;
                myOE.descriptionIndex = 0;
                myOE.startingIndex = 0;
                myOE.maxResults = 0;

                // Get the XRL and PostData
                lcReq.XRL = myOE.Xrl;
                lcReq.PostData = myOE.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Billing_Offering, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Offering Enumerate Request response
                OfferingEnumerateResponse myOEResp = new OfferingEnumerateResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                myOEResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Offering Purchase - 38547
        // /xbos/OfferingPurchase.ashx
        [TestCase, Description("XBLCache Offering Purchase")]
            class XBLCacheOfferingPurchase : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Get Offering Enumerate Request Structure
                OfferingPurchaseRequest myOP = new OfferingPurchaseRequest();
                myOP.userPuid = puidA;
                myOP.machinePuid = o.machinePuid;
                myOP.titleId = TITLE_ID;
                myOP.offerId = 0;

                // Get the XRL and PostData
                lcReq.XRL = myOP.Xrl;
                lcReq.PostData = myOP.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.Billing_Offering, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // No response other than an HR

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Accept Friends Request
        // /xpnfront/AcceptFriendRequest.srf - TODO: No XRLObject2 instance exists

        // Answer Game Invite - ???
        // /xpnfront/AnswerGameInvite.srf - TODO: No XRLObject2 instance exists

        // Cancel Friends Request
        // /xpnfront/CancelFriendRequest.srf - TODO: No XRLObject2 instance exists

        // Cancel Game Invite
        // /xpnfront/CancelGameInvite.srf - TODO: No XRLObject2 instance exists

        // Get Friends list
        // /xpnfront/GetFriends.srf - TODO: No XRLObject2 instance exists
        [TestCase, Description("XBLCache Get Friends List Request")]
            class XBLCacheGetFriendsList : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Send Freinds Request Structure
                // TODO: Structure Doesn't exist yet
                //OfferingDetailsRequest myOD = new OfferingDetailsRequest();

                // Get the XRL and PostData
                // lcReq.XRL = myFR.Xrl;
                // lcReq.PostData = myFR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.PresNotification, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Friends Request response
                // OfferingDetailsResponse myFRResp = new OfferingDetailsResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myFRResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Send Friends Request
        // /xpnfront/SendFriendRequest.srf - TODO: No XRLObject2 instance exists
        [TestCase, Description("XBLCache Send Friend Request")]
            class XBLCacheSendFriendRequest : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Send Freinds Request Structure
                // TODO: Structure Doesn't exist yet
                //OfferingDetailsRequest myOD = new OfferingDetailsRequest();

                // Get the XRL and PostData
                //				lcReq.XRL = myFR.Xrl;
                //				lcReq.PostData = myFR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.PresNotification, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Friends Request response
                // OfferingDetailsResponse myFRResp = new OfferingDetailsResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myFRResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Send Game Invite
        // /xpnfront/SendGameInvite.srf - TODO: No XRLObject2 instance exists

        // Messaging?
        // /xpnfront/xmessaging.srf - TODO: No XRLObject2 instance exists

        // Notification?
        // /xpnfront/xnotification.srf - TODO: No XRLObject2 instance exists

        // Enumerate Units - Not Supported
        // /xstats/statunitenum.ashx

        // Get Unit stats - Not Supported
        // /xstats/statunitget.ashx	

        // Stats sync settings
        // /xstats/syncsettings.ashx
        // Read settings
        // /xstats/readsettings.ashx
        [TestCase, Description("XBLCache Sync and Read Settings")]
            class XBLCacheSyncReadSettings : TestBase
        {
            private const uint TITLE_ID = XOn.WEB_TITLE_ID;

            private const uint GAMER_TYPE = 0x10040001;
            private const uint CONTROLLER_INVERSION = 0x10040002;
            private const uint CONTROLLER_VIBRATION = 0x10040003;
            private const uint XPROFILE_GAMER_STOCK_TILE_URL = 0x4064000F;

            protected override void Execute()
            {
                ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
                uint hr;

                Console.WriteLine("Adding some default settings...");      
  
                SyncSettingsRequest syncReq = new SyncSettingsRequest();
                syncReq.TitleId = TITLE_ID;
                syncReq.UserId = userID1;
                syncReq.StartinIndex = 0;
                syncReq.Version = new DateTime(2002, 11, 15);
        
                syncReq.Settings = new UserSetting[3];
        
                syncReq.Settings[0] = new UserSetting();
                syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
                syncReq.Settings[0].UserId = userID1;
                syncReq.Settings[0].SettingId = GAMER_TYPE;
                syncReq.Settings[0].Value = new byte[] { 0x1 };
        
                syncReq.Settings[1] = new UserSetting();
                syncReq.Settings[1].Source = XOn.XSOURCE_DEFAULT;
                syncReq.Settings[1].UserId = userID1;
                syncReq.Settings[1].SettingId = CONTROLLER_INVERSION;
                syncReq.Settings[1].Value = new byte[] { 0x2 };
        
                syncReq.Settings[2] = new UserSetting();
                syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
                syncReq.Settings[2].UserId = userID1;
                syncReq.Settings[2].SettingId = XPROFILE_GAMER_STOCK_TILE_URL;
                syncReq.Settings[2].Value = Encoding.ASCII.GetBytes("e:\\image");

        
                SyncSettingsResponse syncResp = new SyncSettingsResponse();    

                LivecacheRequest lcReq = new LivecacheRequest(userID1, LcserviceId.SyncSettings, syncReq);
                hr = lcReq.Send();

                syncResp.SetBytes(lcReq.ResponseData);

                Assert.AreEqual(hr, ServerTestFramework.LiveService.HResult.S_OK);

                //----------------------------------------------------------

                Console.WriteLine("... and reading them back..");
        
                ReadSettingsRequest readReq = new ReadSettingsRequest();
                readReq.UserId = userID1;
                readReq.TitleId = TITLE_ID;
                readReq.ForUserIds = new ulong[] { userID1 };
                readReq.SettingIds = new uint[] { GAMER_TYPE, CONTROLLER_INVERSION, XPROFILE_GAMER_STOCK_TILE_URL };
        
                ReadSettingsResponse readResp = new ReadSettingsResponse();
            
                LivecacheRequest lcReq2 = new LivecacheRequest(userID1, LcserviceId.ReadSettings, readReq);
                hr = lcReq2.Send();

                Assert.AreEqual(hr, HResult.S_OK);

                readResp.SetBytes(lcReq2.ResponseData);
        
                Assert.AreEqual(readResp.SettingsLen, 3);
                Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_TYPE);
                Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
                Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
                Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
                Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
                Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
                Assert.AreEqual(readResp.Settings[2].SettingId, XPROFILE_GAMER_STOCK_TILE_URL);
                Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
                Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );
        
                ResultCode = TEST_RESULTS.PASSED;
            }
        }
	

        // Enumerate Leaderboard
        // /xstats/xstatsenumlb.ashx - TODO: No XRLObject2 instance exists

        // Find Rating		
        // /xstats/xstatsfindrating.ashx - TODO: No XRLObject2 instance exists
		
        // Get Stats Info
        // /xstats/xstatsget.ashx - TODO: No XRLObject2 instance exists
		
        // Accept Terms of Use
        // /xuacs/accepttou.ashx - TODO: No XRLObject2 instance exists
		
        // Change Camertag
        // /xuacs/changegamertag.ashx
        [TestCase, Description("XBLCache Change Gamer Tag")]
            class XBLCacheChangeGamerTag : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Change Gamer Tag Request structure
                ChangeGamertagRequest  myCGR = new ChangeGamertagRequest();
                myCGR.userPuid = puidA;
                myCGR.machinePuid = o.machinePuid;
                myCGR.gamertag = "a"+new Random().Next().ToString();
                myCGR.gamertagLength = (ushort)myCGR.gamertag.Length;

                // Get the XRL and PostData
                lcReq.XRL = myCGR.Xrl;
                lcReq.PostData = myCGR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Payment Info Request response
                ChangeGamertagResponse myCGResp = new ChangeGamertagResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                myCGResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Create Owner Account
        // /xuacs/createowneracct.ashx
        [TestCase, Description("XBLCache Create Owner Account")]
            class XBLCacheCreateOwnerAccount : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Change Gamer Tag Request structure
                CreateAccountRequest  myCARReq = new CreateAccountRequest();
                myCARReq.activationCode = "1111111111111111111111111";
                myCARReq.activationCodeLength = (ushort) myCARReq.activationCode.Length;
                myCARReq.bankCode = "First Tech";
                myCARReq.bankCodeLength = (ushort)myCARReq.bankCode.Length;
                myCARReq.branchCode = "FT1";
                myCARReq.branchCodeLength = (ushort)myCARReq.branchCode.Length;
                myCARReq.cardExpiration = DateTime.Now;
                myCARReq.cardExpiration.AddYears(1);
                myCARReq.cardHolder = "Bill Clinton";
                myCARReq.cardHolderLength = (ushort)myCARReq.cardHolder.Length;
                myCARReq.cardNumber = "4111111111111111";
                myCARReq.cardNumberLength = (ushort)myCARReq.cardNumber.Length;
                myCARReq.cardTypeId = 0;
                myCARReq.checkDigits = "111";
                myCARReq.checkDigitsLength = (ushort)myCARReq.checkDigits.Length;
                myCARReq.city = "Lost Angeles";
                myCARReq.cityLength = (ushort)myCARReq.city.Length;
                myCARReq.countryId = 1;
                myCARReq.email = "billc@expres.gov";
                myCARReq.emailLength = (ushort)myCARReq.email.Length;
                myCARReq.firstName = "Bill";
                myCARReq.firstNameLength = (ushort)myCARReq.firstName.Length;
                myCARReq.lastName = "Clinton";
                myCARReq.lastNameLength = (ushort)myCARReq.lastName.Length;
                myCARReq.msSpam = 0;
                myCARReq.partnerSpam = 1;
                myCARReq.phoneNumber = "4256666666";
                myCARReq.phoneNumberLength = (ushort)myCARReq.phoneNumber.Length;
                myCARReq.phonePrefix = "425";
                myCARReq.phonePrefixLength = (ushort)myCARReq.phonePrefix.Length;
                myCARReq.postalCode = "90210";
                myCARReq.postalCodeLength = (ushort)myCARReq.postalCode.Length;
                myCARReq.state = "California";
                myCARReq.stateLength = (ushort)myCARReq.state.Length;
                myCARReq.street1 = "1 Foo";
                myCARReq.street1Length = (ushort)myCARReq.street1.Length;
                myCARReq.titleId = TITLE_ID;

                // Get the XRL and PostData
                lcReq.XRL = myCARReq.Xrl;
                lcReq.PostData = myCARReq.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Payment Info Request response
                CreateAccountResponse myCAResp = new CreateAccountResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                myCAResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Get Payment Info
        // /xuacs/getpaymentinfo.ashx
        [TestCase, Description("XBLCache Get Payment Info")]
            class XBLCacheGetPaymentInfo : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Subscription Status Request structure
                GetPaymentInfoRequest myGPIR = new GetPaymentInfoRequest();
                myGPIR.userPuid = puidA;
                // myGPIR.accountPin

                // Get the XRL and PostData
                lcReq.XRL = myGPIR.Xrl;
                lcReq.PostData = myGPIR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Payment Info Request response
                GetPaymentInfoResponse myGPIRResp = new GetPaymentInfoResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                myGPIRResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Get Subscription Status
        // /xuacs/getsubscriptionstatus.ashx
        [TestCase, Description("XBLCache Get Subscription Status")]
            class XBLCacheGetSubscriptionStatus : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Subscription Status Request structure
                GetSubscriptionStatusRequest myGSS = new GetSubscriptionStatusRequest();
                myGSS.userPuid = puidA;
                myGSS.machinePuid = o.machinePuid;
                myGSS.titleId = TITLE_ID;
                myGSS.serviceId = (uint)XOService.User_Account;
                myGSS.languageId = 1;		// TODO: I'm guessing here

                // Get the XRL and PostData
                lcReq.XRL = myGSS.Xrl;
                lcReq.PostData = myGSS.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Subscription Status Request response
                GetSubscriptionStatusResponse myGSSResp = new GetSubscriptionStatusResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //myPCResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Link Web Account
        // /xuacs/linkwebaccount.ashx
        [TestCase, Description("XBLCache Link Web Account")]
        class XBLCacheLinkWebAccount : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Subscription Status Request structure
                byte[] newWebID = new byte[8];
                RandGen.NextBytes(newWebID);

                XRLLinkWebAccount myLWA = new XRLLinkWebAccount();
                myLWA.webIdLen = 8;
                myLWA.webId = newWebID;
                myLWA.webIdIsOwner = 1;
                myLWA.gamertagLen = o.gamertagLen;
                myLWA.gamertag = o.gamertag;
                myLWA.phonePrefix = o.phonePrefix;
                myLWA.phonePrefixLen = o.phonePrefixLen;
                myLWA.phoneNumber = o.phoneNumber;
                myLWA.phoneNumberLen = o.phoneNumberLen;
                myLWA.phoneExtension = o.phoneExtension;
                myLWA.phoneExtensionLen = o.phoneExtensionLen;
                myLWA.postalCode = o.postalCode;
                myLWA.postalCodeLen = o.postalCodeLen;
                myLWA.cardHolder = o.cardHolder;
                myLWA.cardHolderLen = o.cardHolderLen;
                myLWA.cardNumber = o.cardNumber;
                myLWA.cardNumberLen = o.cardNumberLen;

                // Get the XRL and PostData
                lcReq.XRL = "/xuacs/linkwebaccount.ashx";
                lcReq.PostData = myLWA.GetBytes();

                // Set up the Subscription Status Request response
                XRLLinkWebAccountResponse myLWAResp = new XRLLinkWebAccountResponse();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Link User Info Request response
                // XRLLinkWebAccountResponse myLWAResp = new XRLLinkWebAccountResponse();
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();

                // Examine the response
                //myLWAResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }


        // Reserve Gamertag name
        // /xuacs/reservename.ashx - TODO: No XRLObject2 instance exists

        // Set Payment Info
        // /xuacs/setpaymentinfo.ashx
        [TestCase, Description("XBLCache Set Payment Info")]
            class XBLCacheSetPaymentInfo : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Change Gamer Tag Request structure
                SetPaymentInfoRequest  mySPIR = new SetPaymentInfoRequest();
                mySPIR.bankCode = "First Tech";
                mySPIR.bankCodeLength = (ushort)mySPIR.bankCode.Length;
                mySPIR.branchCode = "FT1";
                mySPIR.branchCodeLength = (ushort)mySPIR.branchCode.Length;
                mySPIR.cardExpiration = DateTime.Now;
                mySPIR.cardExpiration.AddYears(1);
                mySPIR.cardHolder = "Bill Clinton";
                mySPIR.cardHolderLength = (ushort)mySPIR.cardHolder.Length;
                mySPIR.cardNumber = "4111111111111111";
                mySPIR.cardNumberLength = (ushort)mySPIR.cardNumber.Length;
                mySPIR.cardTypeId = 0;
                mySPIR.checkDigits = "111";
                mySPIR.checkDigitsLength = (ushort)mySPIR.checkDigits.Length;
                mySPIR.city = "Lost Angeles";
                mySPIR.cityLength = (ushort)mySPIR.city.Length;
                mySPIR.countryId = 1;
                mySPIR.email = "billc@expres.gov";
                mySPIR.emailLength = (ushort)mySPIR.email.Length;
                mySPIR.firstName = "Bill";
                mySPIR.firstNameLength = (ushort)mySPIR.firstName.Length;
                mySPIR.lastName = "Clinton";
                mySPIR.lastNameLength = (ushort)mySPIR.lastName.Length;
                mySPIR.msSpam = 0;
                mySPIR.partnerSpam = 1;
                mySPIR.phoneNumber = "4256666666";
                mySPIR.phoneNumberLength = (ushort)mySPIR.phoneNumber.Length;
                mySPIR.phonePrefix = "425";
                mySPIR.phonePrefixLength = (ushort)mySPIR.phonePrefix.Length;
                mySPIR.postalCode = "90210";
                mySPIR.postalCodeLength = (ushort)mySPIR.postalCode.Length;
                mySPIR.state = "California";
                mySPIR.stateLength = (ushort)mySPIR.state.Length;
                mySPIR.street1 = "1 Foo";
                mySPIR.street1Length = (ushort)mySPIR.street1.Length;
                mySPIR.userPuid =puidA;

                // Get the XRL and PostData
                lcReq.XRL = mySPIR.Xrl;
                lcReq.PostData = mySPIR.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Payment Info Request response
                // SetPaymentInfoResponse mySPIResp = new SetPaymentInfoResponse();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //mySPIResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }

        // Set User PIN
        // /xuacs/setuserpin.ashx - TODO: No XRLObject2 instance exists

        // Set User Settings 2 - Set User Setteings 1 is obsolete
        // /xuacs/setusersettings2.ashx
        [TestCase, Description("XBLCache Set User Settings 2")]
            class XBLCacheSetUserSettings2 : TestBase
        {
            private const uint TITLE_ID = 0xFFED0000;

            protected override void Execute()
            {
#if LIVECACHE_UPDATE
                ResultCode = TEST_RESULTS.PASSED;
                uint HR = 0;

                // Create User A
                Owner o = UACS.GenerateOwner();
                System.UInt64 puidA = UACS.CreateUser(o);

                // Cache setup step - get buckets
                uint partitionA = Config.GetBucketNum(xonline.common.config.Interface.livecache, puidA);
                xonline.common.config.IBucketServer bucketA = Config.GetBucketServer(xonline.common.config.Interface.livecache, partitionA);

                XrlRequest profilesReqA = new XrlRequest();
                profilesReqA.TargetUrl = bucketA.CurrentServer.Url;	

                LiveCacheRequest lcReq = new LiveCacheRequest();
                lcReq.TitleId = TITLE_ID;
                lcReq.UserId = puidA;
                profilesReqA.Path = lcReq.GetXRL();

                // Set up Change Gamer Tag Request structure
                SetUserSettings2Request  mySUS2Req = new SetUserSettings2Request();
                // mySUS2Req.tier = 0;
                // mySUS2Req.userFlags = 0;
                // mySUS2Req.userPrivileges = 
                mySUS2Req.userPuid = puidA;

                // Get the XRL and PostData
                lcReq.XRL = mySUS2Req.Xrl;
                lcReq.PostData = mySUS2Req.GetBytes();

                // Set up the HTTP request
                HTTPAuthData HttpAuthData = new HTTPAuthData( 0, 0, 0, puidA, TITLE_ID, (uint) XOService.User_Account, 0 );
                lcReq.AuthData = HttpAuthData.GetBase64EncodedString();

                // Set up the Get Payment Info Request response
                //				SetUserSettings2Response mySPIResp = new SetUserSettings2Response();    
                profilesReqA.RequestOb = lcReq;
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                // And Go...
                HR = profilesReqA.Send();
				
                Assert.AreEqual(HR, ServerTestFramework.LiveService.HResult.S_OK);

                // Now do the Authdata call
                profilesReqA.AuthData = HttpAuthData.GetBase64EncodedString();
                HR = profilesReqA.Send();

                // Examine the response
                //				mySPIResp.SetBytes(profilesReqA.ResponseData);

                if(HR != ServerTestFramework.LiveService.HResult.S_OK)
                    ResultCode = TEST_RESULTS.FAILED;
#endif
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\xboxcom\MetadataEditorTest\CMSRunner.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using Microsoft.WebRunner;

namespace MetadataEditorTest
{
	/// <summary>
	/// Summary description for CMSRunner.
	/// </summary>
	public class CMSRunner
	{
		static private Report _RO = new Report (typeof (CMSRunner).Name);
		static private User _Role;
		static public User Author = new User ();
		static public User Publisher = new User ();
		static private string _AuthURL;

		static public User Role
		{
			get { return _Role; }
			set { _Role = value; }
		}

		#region // Some string constants
		static public string SITE_NAME						= "Xbox.com";
		static public string CATEGORY_GAMES					= "Games";
		static public string CATEGORY_SYSTEMS				= "Systems";
		static public string SEARCH_INCLUDE_FOLLOW			= "Include page in search and follow links";
		static public string SEARCH_INCLUDE_DONTFOLLOW		= "Include page in search but don't follow links";
		static public string SEARCH_DONTINCLUDE_FOLLOW		= "Don't include page in search but follow links";
		static public string SEARCH_DONTINCLUDE_DONTFOLLOW	= "Don't include page in search and don't follow links";
		static public string RANK_INCREASED					= "Increased";
		static public string RANK_NORMAL					= "Normal";
		static public string RANK_DECREASED					= "Decreased";
		static public string SHELL_FULL						= "Full";
		static public string SHELL_DISABLED					= "Disabled";
		static public string SHELL_HIDDEN					= "Hidden";
		#endregion

		// Contains all data used to populate the metadata editor
		public class Metadata
		{
			public string Title;
			public string Description;
			public string Author;
			public string Category;
			public string SearchBehavior;
			public string Subcategory;
			public string Keywords;
			public string BestBetKeywords;
			public string PageRank;
			public string ShellDisplay;
			public string PubDate;
		}

		// Contains all variables and constants
		public class Properties
		{
			public User CurrentUser;
			public string AuthURL;
		}

		// Contains user information
		public class User
		{
			public string Username;
			public string Password;
		}

		static public void LoadXML (string sFilename)
		{
			_RO.Info ("Reading XML data from " + sFilename);

			// Load the XML file
			XmlConfigFile Config = new XmlConfigFile (sFilename);
			Author.Username = Config["/MetadataEditor/author/username"];
			Author.Password = Config["/MetadataEditor/author/password"];
			Publisher.Username = Config["/MetadataEditor/publisher/username"];
			Publisher.Password = Config["/MetadataEditor/publisher/password"];
			_AuthURL = Config["/MetadataEditor/urls/authmain"];

			// Set the default user role
			Role = Author;
		}

		static private string _GenerateTitleFromMetadata (Metadata Data)
		{
			// Title have one of two formats:
			// SiteName | PageTitle
			// or
			// SiteName | Subcategory - PageTitle
			string sTitle = String.Format ("{0} | ", SITE_NAME);

			// Figure out if we have a subcategory
			string sSubcategory;
			if (null != Data.Subcategory)
				sSubcategory = String.Format ("{0} - ", Data.Subcategory);
			else
				sSubcategory = String.Empty;

			// Finally bring it all together
			sTitle = String.Format ("{0}{1}{2}", sTitle, sSubcategory, Data.Title);

			// Done
			return sTitle;
		}

		/// <summary>
		/// Creates a new flex page.  Throws and exception if any step fails
		/// </summary>
		static private void _CreateNewFlexPage (Properties Prop)
		{
			Helpers.wrSDK.CleanUp (true, false, false);

			// Set the credentials for the Auth site
			if (!Helpers.wrSDK.SetCredentials (@"username=" + Role.Username + "&&password=" + Role.Password))
				throw new Exception ("Cannot set credentials for user: " + Role.Username);

			// Launch IE with the Auth site as a front page
			if (!Helpers.wrSDK.StartApplication (AppObj.IE, _AuthURL))
				throw new Exception ("Cannot start IE");

			// Switch to the edit site and create a new page
			if (!Helpers.wrSDK.Click (HTMLUIObj.Link, "id=SwitchToPresentationUnpublishedAnchor"))
				throw new Exception ("Cannot switch to Edit Site");
			if (!Helpers.wrSDK.Click (HTMLUIObj.Link, "id=CreateNewPageAnchor"))
				throw new Exception ("Cannot click on \"Create New Page\" link");

			// Attach to the popup window and select the FlexPage template
			if (!Helpers.wrSDK.FindIE("title=Microsoft Content Management Server "))
				throw new Exception ("Cannot find template selector page!");

//"tag=input&&type=submit&&value=Search&&exactmatch=false&&order=0
			if (!Helpers.wrSDK.Click(HTMLUIObj.Link, "id=Gallery2_{E4D1912B-9DD3-11D1-B44E-006097071264}"))
					throw new Exception ("Cannot click on Template link");

			if (!Helpers.wrSDK.Click(HTMLUIObj.Image,"src=iconSelectTemplate.gif&&order=2&&exactmatch=false"))
				throw new Exception ("Cannot click on FlexPage template image link");

			// Attach back to the main page
			if (!Helpers.wrSDK.FindIE("title="+SITE_NAME))
				throw new Exception ("Cannot find the editing window");
		}

		/// <summary>
		/// Depending on the data in the Metadata class, it populates the metadata editor
		/// Note: It assumes that an instance of IE is attached and is the metadata editor
		/// is visible
		/// </summary>
		/// <param name="Data">Data to populate the editor with</param>
		static private void _PopulateMetadataEditor (Metadata Data)
		{
			// Write the page title?
			if (Data.Title != null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "TextToInput=" + Data.Title + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_title"))
					throw new Exception ("Could not enter title");

			// Write the page description
			if (Data.Description != null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextArea, "TextToInput=" + Data.Description + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_description"))
					throw new Exception ("Could not enter description");

			// Write the page Author
			if (Data.Author != null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "TextToInput=" + Data.Author + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_author"))
					throw new Exception ("Could not enter author");

			// Select category
			if (Data.Category != null)
				if (!Helpers.wrSDK.Click (HTMLUIObj.Select, "TextToInput=" + Data.Category + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_category"))
					throw new Exception ("Could not select category");
			
			// Write the page sub-category
			if (Data.Subcategory != null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "TextToInput=" + Data.Subcategory + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_subcategory"))
					throw new Exception ("Could not enter subcategory");

			// Select search behavior
			if (Data.SearchBehavior != null)
				if (!Helpers.wrSDK.Click (HTMLUIObj.Select, "TextToInput=" + Data.SearchBehavior + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_robots"))
					throw new Exception ("Could not select search behavior");
			
			// Write the page keywords
			if (Data.Keywords != null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "TextToInput=" + Data.Keywords + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_keywords"))
					throw new Exception ("Could not enter keywords");

			// Write the page best bet keywords
			if (Data.BestBetKeywords!= null)
				if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "TextToInput=" + Data.BestBetKeywords + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_rank-words"))
					throw new Exception ("Could not enter best bet keywords");

			// Select page rank
			if (Data.PageRank != null)
				if (!Helpers.wrSDK.Click (HTMLUIObj.Select, "TextToInput=" + Data.PageRank+ "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_rank-document"))
					throw new Exception ("Could not select search behavior");
			
			// Select shell display
			if (Data.ShellDisplay != null)
				if (!Helpers.wrSDK.Click (HTMLUIObj.Select, "TextToInput=" + Data.ShellDisplay + "&&id=MetadataPlaceHolder1_AuthoringModeControlsContainer_shellState"))
					throw new Exception ("Could not select search behavior");
		}

		/// <summary>
		/// Saves a page
		/// Note: It assumes that an instance of IE is attached and is the metadata editor
		/// is visible
		/// </summary>
		/// <param name="Data">Page Title</param>
		static private void _SaveFlexPage (string Name, Metadata Data)
		{
			// Click in the "Save New Page" link
			if (!Helpers.wrSDK.Click (HTMLUIObj.Link, "id=AuthoringSaveNewAnchor"))
				throw new Exception ("Cannot click on the 'Save New Page' link");

			// Attach to the popup window
			if (!Helpers.wrSDK.FindIE("title= Microsoft Content Management Server "))
				throw new Exception ("Cannot find 'Save New Page' dialog!");
//			if (!Helpers.wrSDK.AttachTo(Win32Special.Window, "name=Microsoft Content Management Server&&exactmatch=false"))
//				throw new Exception ("Cannot attach to the 'Save New Page' dialog");

			// Set the name
			if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "id=NC_intxtName&&TextToInput=" + Name))
				throw new Exception ("Cannot enter page name");

			// Set the display name
			if (!Helpers.wrSDK.InputText (HTMLUIObj.TextBox, "id=NC_intxtDisplayName&&TextToInput=" + Data.Title))
				throw new Exception ("Cannot enter page display name");

			// Click on the Ok button
			if (!Helpers.wrSDK.Click (HTMLUIObj.Button, "tag=button&&id=OKButton"))
				throw new Exception ("Cannot click the Ok to save page");

			// Reattach to the IE window
			if (!Helpers.wrSDK.FindIE("title=" + _GenerateTitleFromMetadata (Data)))
				throw new Exception ("Cannot find the editing window");
//			if (!Helpers.wrSDK.AttachTo(Win32Special.Window, "name=" + DisplayName + "&&ExactMatch=false"))
//				throw new Exception ("Cannot re-attach to editing window");
		}
		/// <summary>
		/// Verifies that the data metadata in inside the html
		/// Note: It assumes that an instance of IE is attached and is the page
		/// is visible
		/// </summary>
		static private void _VerifyMetadata (Metadata Data)
		{
			// Get the page title
			if (Data.Title != null)
				if (_GenerateTitleFromMetadata (Data) != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=title&&AttributeToGet=InnerHTML"))
					throw new Exception ("The title is wrong");

			// Get the page description
			if (Data.Description != null)
				if (Data.Description != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=description&&AttributeToGet=content"))
					throw new Exception ("The description is wrong");

			// Get the page Author
			if (Data.Author != null)
				if (Data.Author != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=author&&AttributeToGet=content"))
					throw new Exception ("The author is wrong");

			// Get category
			if (Data.Category != null)
				if (Data.Category != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=category&&AttributeToGet=content"))
					throw new Exception ("The category is wrong");
			
			// Get the page sub-category
			if (Data.Subcategory != null)
				if (Data.Subcategory != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=subcategory&&AttributeToGet=content"))
					throw new Exception ("The subcategory is wrong");
			
			// Get the page keywords
			if (Data.Keywords != null)
				if (Data.Keywords != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=keywords&&AttributeToGet=content"))
					throw new Exception ("They keywords are wrong");

			// Get the page best bet keywords
			if (Data.BestBetKeywords!= null)
				if (Data.BestBetKeywords != Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=rank-words&&AttributeToGet=content"))
					throw new Exception ("The best bet keywords are wrong");

			// Verify page rank
			if (Data.PageRank != null)
			{
				// Get the rank
				string sRank = Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=rank-document&&AttributeToGet=content");

				// Was it right?
				if (sRank == "+2" && Data.PageRank != RANK_INCREASED || sRank == "-2" && Data.PageRank != RANK_DECREASED)
					throw new Exception ("The page rank was wrong");
			}
		}

		/// <summary>
		/// Verifies that the data metadata in inside the html
		/// Note: It assumes that an instance of IE is attached and is the page
		/// is visible
		/// </summary>
		static void _NegativeVerifyMetadata (Metadata Data)
		{
			// Get the page description
			if (Data.Description != null)
				if (Data.Description == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=description&&AttributeToGet=content"))
					throw new Exception ("The description should not match");

			// Get the page Author
			if (Data.Author != null)
				if (Data.Author == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=author&&AttributeToGet=content"))
					throw new Exception ("The author should not match");

			// Get category
			if (Data.Category != null)
				if (Data.Category == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=category&&AttributeToGet=content"))
					throw new Exception ("The category should not match");
			
			// Get the page sub-category
			if (Data.Subcategory != null)
				if (Data.Subcategory == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=subcategory&&AttributeToGet=content"))
					throw new Exception ("The subcategory should not match");
			
			// Get the page keywords
			if (Data.Keywords != null)
				if (Data.Keywords == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=keywords&&AttributeToGet=content"))
					throw new Exception ("They keywords should not match");

			// Get the page best bet keywords
			if (Data.BestBetKeywords!= null)
				if (Data.BestBetKeywords == Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=rankwords&&AttributeToGet=content"))
					throw new Exception ("The best bet keywords should not match");

			// Verify page rank
			if (Data.PageRank != null)
			{
				// Get the rank
				string sRank = Helpers.wrSDK.GetHTMLAttribute(HTMLUIObj.ByTag, "tag=meta&&name=rankdocument&&AttributeToGet=content");

				// Was it right?
				if (sRank == "+2" && Data.PageRank == RANK_INCREASED || sRank == "-2" && Data.PageRank == RANK_DECREASED)
					throw new Exception ("The page rank should not match");
			}
		}

		/// <summary>
		/// Deletes the current page
		/// Note: It assumes that an instance of IE is attached and the page
		/// is visible
		/// </summary>
		static private void _DeletePage ()
		{
			Helpers.wrSDK.Click(HTMLUIObj.Link, "id=DeleteAnchor");
			Helpers.wrSDK.Click(Win32UIObj.PushButton, "name=OK");
		}

		static public Metadata InitializeMetadata ()
		{
			// Create new metadata and set all data to null
			Metadata Data = new Metadata ();
			Data.Author = null;
			Data.BestBetKeywords = null;
			Data.Description = null;
			Data.Keywords = null;
			Data.Subcategory = null;
			Data.Title = null;
			Data.Category = null;
			Data.PageRank = null;
			Data.SearchBehavior = null;
			Data.ShellDisplay = null;
			Data.PubDate = null;

			// Done
			return Data;
		}

		/// <summary>
		/// This method does all the hard work of running the test
		/// </summary>
		/// <param name="Data">An instance of th metadata class that contains all
		/// the values needed to populate the metadata editor</param>
		/// <returns>true if successful, false otherwise</returns>
		static public bool DoTest (string Filename, Metadata Data, Properties Prop)
		{
			// Results...  This time, we're optimistic... I mean, what could go wrong?
			bool bSuccess = true;

			// Try to run the testcase
			try
			{
				// Create a new flex page and enter some metadata
				_CreateNewFlexPage (Prop);
				_PopulateMetadataEditor (Data);
				_SaveFlexPage (Filename, Data);
				_VerifyMetadata (Data);
				_DeletePage ();
				Helpers.wrSDK.CleanUp (true, false, false);
			}

				// Crap, something went bad
			catch (Exception e)
			{
				// Well?  What was it?
				_RO.Error (e.Message);

				// I guess we fail now
				bSuccess = false;
			}

			// Done
			return bSuccess;
		}

		/// <summary>
		/// This method does all the hard work of running the test
		/// </summary>
		/// <param name="Data">An instance of th metadata class that contains all
		/// the values needed to populate the metadata editor</param>
		/// <returns>true if successful, false otherwise</returns>
		static public bool DoNegativeTest (string Filename, Metadata Data, Properties Prop)
		{
			// Results...  This time, we're optimistic... I mean, what could go wrong?
			bool bSuccess = true;

			// Try to run the testcase
			try
			{
				// Create a new flex page and enter some metadata
				_CreateNewFlexPage (Prop);
				_PopulateMetadataEditor (Data);
				_SaveFlexPage (Filename, Data);
				_NegativeVerifyMetadata (Data);
				_DeletePage ();
				Helpers.wrSDK.CleanUp (true, false, false);
			}

				// Crap, something went bad
			catch (Exception e)
			{
				// Well?  What was it?
				_RO.Error (e.Message);

				// I guess we fail now
				bSuccess = false;
			}

			// Done
			return bSuccess;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\XArbTestBase.cs ===
using System;
using System.Reflection;
using System.Net;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.Presence;
using xonline.common.config;


namespace XArbTest
{
    /// <summary>
    /// 	Helper: XArbTestBase
    /// </summary>
    /// <remarks>
    /// 	<Description>
    /// 		Base class used by all test cases
    /// 	</Description>
    /// 	<Verify>
    /// 		N/A
    /// 	</Verify>
    /// </remarks>
    abstract public class XArbTestBase : TestBase
    {
        protected RandomEx RandGen = new RandomEx();

        class ArbSlot
        {
            public StatsBundle statsBundle = null;
            public TournamentBundle tournamentBundle = null;
            public float TRF = 0.0f;
        };

        private static IPEndPoint memstaticEndPoint = new IPEndPoint(0L, 0);

        //Register Helper Functions
        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, ref uint userStartIndex)
        {
            return BuildXRLRegister(myRegister, userCount, ref userStartIndex, XArbGlobal.defaultMaxSessionSeconds);
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, ref uint userStartIndex, ushort maxSessionSecs)
        {
            XRLRegister retRegister = BuildXRLRegister(myRegister, userCount, userStartIndex, maxSessionSecs);
            if (null != retRegister)
            {
                userStartIndex += userCount;
            }
            return retRegister;
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, uint userStartIndex)
        {
            return BuildXRLRegister(myRegister, userCount, userStartIndex, XArbGlobal.defaultMaxSessionSeconds);
        }

        protected XRLRegister BuildXRLRegister(XRLRegister myRegister, uint userCount, uint userStartIndex, ushort maxSessionSecs)
        {
            XRLRegister myRequest = null;

            //Check params
            if ((userCount > 4) || (userStartIndex + userCount > XArbGlobal.defaultUserPuids.Count))
            {
                return null;
            }

            //Populate users from global list
            myRequest = new XRLRegister();
            for (uint i = 0; i < userCount; i++)
            {
                myRequest.userPuid[i] = (ulong)XArbGlobal.defaultUserPuids.IndexToPuid(userStartIndex + i);
                myRequest.userFlag[i] = XArbGlobal.defaultUserFlags;
                myRequest.userTrust[i] = XArbGlobal.defaultUserTrust;
            }

            if (null == myRegister)
            {
                myRequest.sessionId = RandGen.NextUlong();
                myRequest.sessionNonce = RandGen.NextUlong();
            }
            else
            {
                myRequest.sessionId = myRegister.sessionId;
                myRequest.sessionNonce = myRegister.sessionNonce;
            }
            myRequest.machinePuid = RandGen.NextPuid();
            myRequest.titleId = XArbGlobal.myTitleTrustConstants.titleId;
            myRequest.maxSessionSeconds = maxSessionSecs;
            myRequest.flags = 0;

            return myRequest;
        }

        protected bool ExecuteAndVerify(XRLRegister myRegister)
        {
            uint xboxIndex = 0;
            uint xboxTotal = 0;

            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myRegister);
            if (myDebugResultResponse != null)
            {
                xboxIndex = xboxTotal = (uint)myDebugResultResponse.xboxInfoLen;
            }

            if (!ExecuteRegisterAndVerifyRegisterResponse(myRegister, xboxIndex, xboxTotal))
            {
                Global.RO.Error("XArbTestBase::ExecuteAndVerify: ExecuteRegisterAndVerifyRegisterResponse failed");
                return false;
            }
            if (!ExecuteDebugResultAndVerifyRegisterInfo(myRegister, xboxIndex, xboxTotal + 1))
            {
                Global.RO.Error("XArbTestBase::ExecuteAndVerify: ExecuteDebugResultAndVerifyRegisterInfo failed");
                return false;
            }
            return true;
        }

        protected bool ExecuteAndCheckError(XRLRegister myRegister, uint hr)
        {
            if (HResult.Succeeded(hr))
            {
                if ((false == myRegister.Execute()) ||
                    (myRegister.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myRegister.Execute()) ||
                    (myRegister.XErr != hr))
                {
                    return false;
                }
            }

            return true;

        }

        private bool ExecuteRegisterAndVerifyRegisterResponse(XRLRegister myRegister, uint xboxRegisterIndex, uint totalXboxesRegistered)
        {
            if ((true != myRegister.Execute()) ||
                (myRegister.Response.registeredXbox[xboxRegisterIndex].puid != myRegister.machinePuid) ||
                (myRegister.Response.registeredXbox.GetLength(0) != totalXboxesRegistered + 1))
            {
                return false;
            }
            for (uint i = 0; i < myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUserLen; i++)
            {
                if ((myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUser[i].userId != myRegister.userPuid[i]) ||
                    (myRegister.Response.registeredXbox[xboxRegisterIndex].registeredUser[i].flags != myRegister.userFlag[i]))
                {
                    return false;
                }
            }

            return true;
        }

        private bool ExecuteDebugResultAndVerifyRegisterInfo(XRLRegister myRegister, uint xboxRegisterIndex, uint totalXboxesRegistered)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myRegister);
            if (null == myDebugResultResponse)
            {
                return false;
            }

            if ((myRegister.titleId != myDebugResultResponse.titleId) ||
                (myRegister.sessionId != myDebugResultResponse.sessionId) ||
                (myRegister.sessionNonce != myDebugResultResponse.sessionNonce) ||
                (myRegister.maxSessionSeconds != myDebugResultResponse.maxSessionSeconds) ||
                (myRegister.machinePuid != myDebugResultResponse.xboxInfo[xboxRegisterIndex].xboxID) ||
                (myRegister.flags != myDebugResultResponse.flags))
            {
                return false;
            }


            if ((totalXboxesRegistered != 0) && (totalXboxesRegistered != myDebugResultResponse.xboxInfoLen))
            {
                return false;
            }

            for (uint i = 0; i < myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrustLen; i++)
            {
                if ((myRegister.userPuid[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].qwUserID) ||
                    (myRegister.userFlag[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].dwUserFlags) ||
                    (myRegister.userTrust[i] != myDebugResultResponse.xboxInfo[xboxRegisterIndex].userXUIDAndTrust[i].userTrust))
                {
                    return false;
                }
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLRegister myRequest)
        {
            return GetDebugResultResponse(myRequest, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLRegister myRequest, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = GetDebugResult(myRequest, endPoint);
            if (myDebugResult == null)
            {
                return (null);
            }
            return (myDebugResult.Response);
        }

        protected XRLDebugResult GetDebugResult(XRLRegister myRequest)
        {
            return GetDebugResult(myRequest, null);
        }

        protected XRLDebugResult GetDebugResult(XRLRegister myRequest, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myRequest.titleId;
            myDebugResult.sessionId = myRequest.sessionId;
            myDebugResult.sessionNonce = myRequest.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        //TimeExtend Helper Functions
        protected XRLTimeExtend BuildXRLTimeExtend(XRLRegister myRegister, ushort maxSessionSecondsFromNow)
        {
            XRLTimeExtend myTimeExtend = null;
            myTimeExtend = new XRLTimeExtend();
            if (null == myTimeExtend)
            {
                return null;
            }
            myTimeExtend.machinePuid = myRegister.machinePuid;
            myTimeExtend.sessionId = myRegister.sessionId;
            myTimeExtend.sessionNonce = myRegister.sessionNonce;
            myTimeExtend.titleId = myRegister.titleId;
            myTimeExtend.flags = 0;
            myTimeExtend.maxSessionSecondsFromNow = maxSessionSecondsFromNow;
            return myTimeExtend;
        }

        protected bool ExecuteAndVerify(XRLTimeExtend myTimeExtend)
        {
            //Get the current time extend count
            uint timeExtendCount = 0;
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);
            if (myDebugResultResponse != null)
            {
                for (uint i = 0; i < myDebugResultResponse.xboxInfoLen; i++)
                {
                    if (myTimeExtend.machinePuid == myDebugResultResponse.xboxInfo[i].xboxID)
                    {
                        timeExtendCount = myDebugResultResponse.xboxInfo[i].timeExtendCount;
                        break;
                    }
                }
            }

            if ((false == ExecuteTimeExtend(myTimeExtend)) ||
                (false == ExecuteDebugResultAndVerifyTimeExtendInfo(myTimeExtend, ++timeExtendCount)))
            {
                return false;
            }
            return true;
        }
        protected bool ExecuteAndCheckError(XRLTimeExtend myTimeExtend, uint hr)
        {
            if (HResult.Succeeded(hr))
            {
                if ((false == myTimeExtend.Execute()) ||
                    (myTimeExtend.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myTimeExtend.Execute()) ||
                    (myTimeExtend.XErr != hr))
                {
                    return false;
                }
            }

            return true;
        }

        private bool ExecuteTimeExtend(XRLTimeExtend myTimeExtend)
        {
            if (false == myTimeExtend.Execute())
            {
                return false;
            }

            return true;
        }

        private bool ExecuteDebugResultAndVerifyTimeExtendInfo(XRLTimeExtend myTimeExtend, uint timeExtendCount)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(myTimeExtend);

            if (myDebugResultResponse == null)
            {
                return false;
            }

            if ((myTimeExtend.titleId != myDebugResultResponse.titleId) ||
                (myTimeExtend.sessionId != myDebugResultResponse.sessionId) ||
                (myTimeExtend.sessionNonce != myDebugResultResponse.sessionNonce))
            {
                return false;
            }

            bool found = false;
            for (uint i = 0; i < myDebugResultResponse.xboxInfoLen; i++)
            {
                if (myTimeExtend.machinePuid == myDebugResultResponse.xboxInfo[i].xboxID)
                {
                    if (timeExtendCount != myDebugResultResponse.xboxInfo[i].timeExtendCount)
                    {
                        return false;
                    }
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                return false;
            }

            if (myDebugResultResponse.secondsLeftTillTimeout <= myTimeExtend.maxSessionSecondsFromNow + XArbGlobal.serverSessionTimeoutExtensionSeconds - 5)
            {
                return false;
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLTimeExtend myTimeExtend)
        {
            return GetDebugResultResponse(myTimeExtend, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLTimeExtend myTimeExtend, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myTimeExtend.titleId;
            myDebugResult.sessionId = myTimeExtend.sessionId;
            myDebugResult.sessionNonce = myTimeExtend.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult.Response;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult.Response;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        //ReportResult Helper Functions
        protected XRLReportResult BuildXRLReportResult(XRLRegister myRegister, StatsBundle statsBundle, TournamentBundle tournamentBundle, SuspiciousInfo type1SuspiciousInfo, SuspiciousInfo type2SuspiciousInfo, SuspiciousInfo type3SuspiciousInfo, LostConnectivityInfo lostConnectivityInfo)
        {
            XRLReportResult myResults = new XRLReportResult();

            myResults.AlternateStatsDestination = XArbGlobal.statsEndPoint;
            myResults.AlternateQueryDestination = XArbGlobal.queryEndPoint;
            myResults.machinePuid = myRegister.machinePuid;
            myResults.sessionId = myRegister.sessionId;
            myResults.sessionNonce = myRegister.sessionNonce;
            myResults.titleId = myRegister.titleId;

            if (null != statsBundle)
            {
                myResults.flags |= XRLReportResult.Flags.StatsBundleInfoSubmit;
                myResults.statsBundle = statsBundle;
            }

            if (null != tournamentBundle)
            {
                myResults.flags |= XRLReportResult.Flags.TournamentBundleInfoSubmit;
                myResults.tournamentBundle = tournamentBundle;
            }

            if (null != type1SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo1Submit;
                myResults.type1SuspiciousInfo = type1SuspiciousInfo;
            }

            if (null != type2SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo2Submit;
                myResults.type2SuspiciousInfo = type2SuspiciousInfo;
            }

            if (null != type3SuspiciousInfo)
            {
                myResults.flags |= XRLReportResult.Flags.SuspiciousInfo3Submit;
                myResults.type3SuspiciousInfo = type3SuspiciousInfo;
            }

            if (null != lostConnectivityInfo)
            {
                myResults.flags |= XRLReportResult.Flags.LostConnectivityInfoSubmit;
                myResults.flags |= XRLReportResult.Flags.LostConnectivity;
                myResults.lostConnectivityInfo = lostConnectivityInfo;
            }

            return myResults;
        }

        private bool Arbitrate(XRLRegister[] registers, XRLReportResult[] results, out StatsBundle statsBundle, out TournamentBundle tournamentBundle, out TimeSpan timeout)
        {
            //Initialize out params
            statsBundle = null;
            tournamentBundle = null;
            timeout = XArbGlobal.defaultTimeout;

            //Anything to arbitrate?
            if ((null == results) || (null == results[0])) return true;

            //You can't have a single xbox and single user arbitrated
            if (registers.GetLength(0) == 1)
            {
                uint i = 0;
                for (uint u = 0; u < registers[0].userPuid.GetLength(0); u++)
                {
                    if (registers[0].userPuid[u] != 0)
                    {
                        i++;
                    }
                }
                if (i < 2)
                {
                    return true;
                }
            }

            //Calculate total TRF for session
            float totalTRF = 0.0f;
            if (false == CalculateTotalTRF(registers, out totalTRF))
            {
                return false;
            }

            //Calculate majority and minority quorums
            double majorityQuorum = totalTRF * 0.5;
            double minorityQuorum = totalTRF * XArbGlobal.myTitleTrustConstants.minorityQuorum;

            //Pull out all unique bundles and combinations and accumulate TRF for each
            ArbSlot[] slots = new ArbSlot[XArbGlobal.maxXboxes];
            uint slotSize = 0;
            bool match = false;
            foreach (XRLReportResult r in results)
            {
                //Skip N/A reports
                if ((null == r.statsBundle) && (null == r.tournamentBundle)) continue;

                match = false;
                for (uint i = 0; i < slotSize; i++)
                {
                    if ((true == CompareBundles(r.statsBundle, slots[i].statsBundle)) &&
                        (true == CompareBundles(r.tournamentBundle, slots[i].tournamentBundle)))
                    {
                        slots[i].TRF += CalculateXboxTRF(FindRegisterViaMachinePuid(registers, r.machinePuid));
                        match = true;
                    }
                }
                if (false == match)
                {
                    slots[slotSize] = new ArbSlot();
                    slots[slotSize].statsBundle = r.statsBundle;
                    slots[slotSize].tournamentBundle = r.tournamentBundle;
                    slots[slotSize++].TRF = CalculateXboxTRF(FindRegisterViaMachinePuid(registers, r.machinePuid));
                }
            }

            //Get best TRF in list and store the index
            float bestTRF = 0.0f;
            int bestIndex = -1;
            for (int i = 0; i < slotSize; i++)
            {
                if (slots[i].TRF > bestTRF)
                {
                    bestTRF = slots[i].TRF;
                    bestIndex = i;
                }
            }

            if (bestIndex == -1)
            {
                return true;
            }

            //ConsoleX.ClearLine();
            //ConsoleX.Write("TRF: "+totalTRF.ToString("G5")+" MajQ: "+majorityQuorum.ToString("G5")+" MinQ: "+minorityQuorum.ToString("G5")+" Unique: "+(slotSize)+" BestTRF: "+bestTRF.ToString("g5")+" BestIndex: "+bestIndex+" PreCalc: ");
            //Do we have a majority Quorum?
            if (bestTRF > majorityQuorum)
            {
                statsBundle = slots[bestIndex].statsBundle;
                tournamentBundle = slots[bestIndex].tournamentBundle;
                //ConsoleX.WriteLine("majority quorum");
                return true;
            }

            //No majority quorum found, are we problematic too?
            bool problematic = false;
            if (false == IsSessionProblematic(results, out problematic))
            {
                return false;
            }
            if (true == problematic)
            {
                //ConsoleX.WriteLine("problematic");
                return true;
            }

            //Do we need to session to timeout to get a minority quorum?
            if (registers.Length != results.Length)
            {
                timeout = new TimeSpan(0, 0, 0, registers[0].maxSessionSeconds + XArbGlobal.serverSessionTimeoutExtensionSeconds + 10, 0);
            }

            //Session is not problematic, do we have a minority quorum?
            if (bestTRF > minorityQuorum)
            {
                statsBundle = slots[bestIndex].statsBundle;
                tournamentBundle = slots[bestIndex].tournamentBundle;
                //ConsoleX.WriteLine("minority quorum");
                return true;
            }

            //ConsoleX.WriteLine("no quorum");
            return true;
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, TimeSpan gameplayTime)
        {
            return ExecuteAndVerify(registers, results, HResult.S_OK, gameplayTime);
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results)
        {
            return ExecuteAndVerify(registers, results, HResult.S_OK, new TimeSpan(0, 0, 0, 0, 0));
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr)
        {
            return ExecuteAndVerify(registers, results, hr, new TimeSpan(0, 0, 0, 0, 0));
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr, TimeSpan gameplayTime)
        {
            double sessionSeconds;
            return ExecuteAndVerify(registers, results, hr, gameplayTime, out sessionSeconds);
        }
        protected bool ExecuteAndVerify(XRLRegister[] registers, XRLReportResult[] results, uint hr, TimeSpan gameplayTime, out double sessionSeconds)
        {
            sessionSeconds = 0.0;

            //Check parameters
            if ((null == results) || (null == results[0]) || (null == registers))
            {
                return false;
            }

            //Perform arbitration calculations and return bundles that get sumbitted
            StatsBundle arbStatsBundle = null;
            TournamentBundle arbQueryBundle = null;
            TimeSpan timeout;
            if (false == Arbitrate(registers, results, out arbStatsBundle, out arbQueryBundle, out timeout))
            {
                return false;
            }

            //Build time extend if we need it
            uint halfLife = (uint)(registers[0].maxSessionSeconds / 2);
            uint cycles = System.Convert.ToUInt32(gameplayTime.TotalSeconds) / halfLife;
            uint remainder = (System.Convert.ToUInt32(gameplayTime.TotalSeconds)) - (halfLife * cycles);

            XRLTimeExtend myTimeExtend = null;

            if (cycles > 0)
            {
                myTimeExtend = new XRLTimeExtend();
                myTimeExtend.titleId = registers[0].titleId;
                myTimeExtend.sessionId = registers[0].sessionId;
                myTimeExtend.sessionNonce = registers[0].sessionNonce;
                myTimeExtend.machinePuid = registers[0].machinePuid;
            }

            //Register xboxes
            foreach (XRLRegister r in registers)
            {
                //Execute and verify
                if (false == ExecuteAndVerify(r))
                {
                    return false;
                }
            }

            //Gameplay
            if (null != myTimeExtend)
            {
                for (uint i = 0; i < cycles; i++)
                {
                    System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, System.Convert.ToInt32(halfLife), 0));
                    if (false == myTimeExtend.Execute())
                    {
                        return false;
                    }
                }
            }
            System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, System.Convert.ToInt32(remainder), 0));

            //Clear the listeners
            XArbGlobal.statsListener.ClearSlots();
            XArbGlobal.queryListener.ClearSlots();

            //Submit the reports
            foreach (XRLReportResult r in results)
            {
                if (HResult.Failed(hr))
                {
                    if ((true == r.Execute()) || (r.XErr != hr))
                    {
                        return false;
                    }
                }
                else
                {
                    if ((false == r.Execute()) || ((r.XErr != hr) && (r.XErr != HResult.XONLINE_S_ARBITRATION_DIFFERENT_RESULTS_DETECTED)))
                    {
                        return false;
                    }
                }
            }

            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(registers[0]);
            if (null != myDebugResultResponse)
            {
                sessionSeconds = myDebugResultResponse.sessionSeconds;
            }

            XArbListener.SlotData slot = null;

            //If we expect a stats bundle back lets check it else let's make sure we didn't get one
            if (null != arbStatsBundle)
            {
                Global.RO.Debug("Verify stats bundle received using timeout == {0}", timeout);
                if (false == XArbGlobal.statsListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, timeout))
                {
                    Global.RO.Error("Failed to find expected response in Stats listener.");
                    return false;
                }
                if (false == CompareBundles(arbStatsBundle.bundle, slot.bundle))
                {
                    return false;
                }
                if (false == ValidateAuthData(registers, slot))
                {
                    return false;
                }
            }
            else
            {
                if (true == XArbGlobal.statsListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, new TimeSpan(0, 0, 0, 1, 0)))
                {
                    return false;
                }
            }

            //If we expect a query bundle back lets check it else let's make sure we didn't get one
            if (null != arbQueryBundle)
            {
                Global.RO.Debug("Verify query bundle received using timeout == {0}", timeout);
                if (!XArbGlobal.queryListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, timeout))
                {
                    throw new UnexpectedTestResultException("Failed to find expected response in Query listener.");
                }
                if (!CompareBundles(arbQueryBundle.bundle, slot.bundle))
                {
                    throw new UnexpectedTestResultException("Query bundles do not match.");
                }
                if (!ValidateAuthData(registers, slot))
                {
                    throw new UnexpectedTestResultException("Failed to validate auth data.");
                }
            }
            else
            {
                if (XArbGlobal.queryListener.GetSlot(results[0].sessionId, results[0].sessionNonce, out slot, new TimeSpan(0, 0, 0, 1, 0)))
                {
                    return false;
                }
            }

            return true;
        }
        protected bool ExecuteAndCheckError(XRLReportResult myReportResult, uint hr)
        {

            if (HResult.Succeeded(hr))
            {
                if ((false == myReportResult.Execute()) ||
                    (myReportResult.XErr != hr))
                {
                    return false;
                }
            }
            else
            {
                if ((true == myReportResult.Execute()) ||
                    (myReportResult.XErr != hr))
                {
                    return false;
                }
            }

            return true;

        }

        private bool ExecuteReportResult(XRLReportResult myReportResult)
        {
            if (false == myReportResult.Execute())
            {
                return false;
            }

            return true;
        }

        private XRLRegister FindRegisterViaMachinePuid(XRLRegister[] registers, ulong machinePuid)
        {
            if (null == registers)
            {
                return null;
            }

            foreach (XRLRegister r in registers)
            {
                if (r.machinePuid == machinePuid)
                {
                    return r;
                }
            }

            return null;
        }

        private float CalculateXboxTRF(XRLRegister register)
        {
            if ((null == register) || (null == register.userTrust) || (null == register.userPuid))
            {
                return 0.0f;
            }
            float xboxTrust = 0.0f;
            for (uint i = 0; i < register.userTrust.GetLength(0); i++)
            {
                if (register.userPuid[i] != 0)
                {
                    xboxTrust += (float)(XArbGlobal.myTitleTrustConstants.baseUserTrust + Fermi(register.userTrust[i], XArbGlobal.myTitleTrustConstants.k));
                }
            }
            return xboxTrust;
        }
        private bool CalculateTotalTRF(XRLRegister[] registers, out float totalTRF)
        {
            totalTRF = 0.0f;
            if (null == registers)
            {
                return false;
            }

            foreach (XRLRegister r in registers)
            {
                if (null == r.userTrust)
                {
                    return false;
                }
                totalTRF += CalculateXboxTRF(r);
            }

            return true;
        }

        private bool IsSessionProblematic(XRLReportResult[] results, out bool problematic)
        {
            problematic = false;

            if ((null == results) || (null == results[0]))
            {
                return false;
            }

            //Find first valid result package
            XRLReportResult valid = null;
            foreach (XRLReportResult r in results)
            {
                if ((null != r.statsBundle) || (null != r.tournamentBundle))
                {
                    valid = r;
                    break;
                }
            }
            if (null == valid)
            {
                return true;
            }

            foreach (XRLReportResult r in results)
            {
                if ((r.transport == FDTransaction.Transports.UDP) && ((r.statsBundle != null) || (r.tournamentBundle != null)))
                {
                    problematic = true;
                }

                //Check for problematic issues with lost connectivity submits
                if (null != r.lostConnectivityInfo)
                {
                    foreach (ulong lciPuid in r.lostConnectivityInfo.xboxPuid)
                    {
                        foreach (XRLReportResult x in results)
                        {
                            if ((lciPuid == x.machinePuid) && ((x.statsBundle != null) || (x.tournamentBundle != null)))
                            {
                                problematic = true;
                                return true;
                            }
                        }
                    }
                }

                //Skip compare for non bundle submits
                if ((null == r.statsBundle) && (null == r.tournamentBundle))
                {
                    continue;
                }

                //Compare bundles
                if ((false == CompareBundles(r.statsBundle, valid.statsBundle)) ||
                    (false == CompareBundles(r.tournamentBundle, valid.tournamentBundle)))
                {
                    problematic = true;
                    return true;
                }

            }
            return true;
        }

        private bool CompareBundles(StatsBundle b1, StatsBundle b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }
            if ((null == b1) || (null == b2))
            {
                return false;
            }
            return CompareBundles(b1.bundle, b2.bundle);
        }

        private bool CompareBundles(TournamentBundle b1, TournamentBundle b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }
            if ((null == b1) || (null == b2))
            {
                return false;
            }
            return CompareBundles(b1.bundle, b2.bundle);
        }

        private bool CompareBundles(byte[] b1, byte[] b2)
        {
            if ((null == b1) && (null == b2))
            {
                return true;
            }

            if ((null == b1) || (null == b2))
            {
                return false;
            }

            if (b1.GetLength(0) != b2.GetLength(0))
            {
                return false;
            }

            for (uint i = 0; i < b1.GetLength(0); i++)
            {
                if (b1[i] != b2[i])
                {
                    return false;
                }
            }
            return true;
        }

        private bool ValidateAuthData(XRLRegister[] registers, XArbListener.SlotData slot)
        {

            //Store each register XUIDAndTrust in hash table
            Hashtable authDataHash = new Hashtable();
            foreach (XRLRegister r in registers)
            {
                for (int i = 0; i < r.userPuid.Length; i++)
                {
                    if (r.userPuid[i] != 0)
                    {
                        XUIDAndTrust xt = new XUIDAndTrust();
                        xt.dwUserFlags = r.userFlag[i];
                        xt.qwUserID = r.userPuid[i];
                        xt.userTrust = r.userTrust[i];
                        authDataHash[r.userPuid[i]] = xt;
                    }
                }
            }

            //How many users are in slot data?
            int slotUsersCount = 0;
            if ((null != slot) && (null != slot.authData) && (null != slot.authData.users))
            {
                slotUsersCount = slot.authData.users.Length;
            }

            //Do the number of users match?
            if (authDataHash.Count != slotUsersCount)
            {
                return false;
            }

            //Do we have 0 users?
            if ((authDataHash.Count == 0) && (slotUsersCount == 0))
            {
                return true;
            }

            //Make sure the XUIDAndTrust match
            XUIDAndTrust[] slotUsers = slot.authData.users;
            foreach (XUIDAndTrust slotUser in slotUsers)
            {
                XUIDAndTrust regUser = (XUIDAndTrust)authDataHash[slotUser.qwUserID];
                if (0 != regUser.CompareTo(slotUser))
                {
                    return false;
                }
            }

            return true;
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLReportResult myReportResult)
        {
            return GetDebugResultResponse(myReportResult, null);
        }

        protected XRLDebugResultResponse GetDebugResultResponse(XRLReportResult myReportResult, IPEndPoint endPoint)
        {
            XRLDebugResult myDebugResult = null;
            myDebugResult = new XRLDebugResult();
            myDebugResult.titleId = myReportResult.titleId;
            myDebugResult.sessionId = myReportResult.sessionId;
            myDebugResult.sessionNonce = myReportResult.sessionNonce;
            if (endPoint == null)
            {
                if (myDebugResult.Execute())
                {
                    return myDebugResult.Response;
                }
            }
            else
            {
                bool fFrontDoor = XRLRegister.fFrontDoor;
                XRLDebugResult.fFrontDoor = false;
                try
                {
                    if (myDebugResult.Execute(endPoint))
                    {
                        return myDebugResult.Response;
                    }
                }
                finally
                {
                    XRLDebugResult.fFrontDoor = fFrontDoor;
                }
            }
            return null;
        }

        protected StatsBundle MakeStatsBundle(uint size)
        {
            StatsBundle statsBundle = new StatsBundle();
            statsBundle.bundle = new byte[size];
            RandGen.NextBytes(statsBundle.bundle);
            return statsBundle;
        }

        protected TournamentBundle MakeTournamentBundle(uint size)
        {
            TournamentBundle queryBundle = new TournamentBundle();
            queryBundle.bundle = new byte[size];
            RandGen.NextBytes(queryBundle.bundle);
            return queryBundle;
        }

        protected LostConnectivityInfo MakeLostConnectivityInfo(ulong[] puids)
        {
            LostConnectivityInfo lci = new LostConnectivityInfo();
            lci.xboxPuid = puids;
            return lci;
        }

        protected SuspiciousInfo MakeSuspiciousInfo(byte[] message, ulong[] mpuids, ulong[] upuids)
        {
            if (message.GetLength(0) > System.Byte.MaxValue)
            {
                return null;
            }
            SuspiciousInfo si = new SuspiciousInfo();
            si.relatedXbox = mpuids;
            si.relatedUser = upuids;
            si.message = message;

            return si;
        }

        protected SuspiciousInfo MakeSuspiciousInfo(string message, ulong[] mpuids, ulong[] upuids)
        {
            if (message.Length > System.Byte.MaxValue)
            {
                return null;
            }
            SuspiciousInfo si = new SuspiciousInfo();
            si.relatedXbox = mpuids;
            si.relatedUser = upuids;
            System.Text.ASCIIEncoding AE = new System.Text.ASCIIEncoding();
            si.message = AE.GetBytes(message);

            return si;
        }


        protected bool GetFlushedTrust(uint users, out UserTrustRatings[] utr)
        {
            utr = null;
            if (0 == users) return false;

            Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xarbInh, "exec :xarbInh FlushTrustUpdates");
            System.Threading.Thread.Sleep(new TimeSpan(0, 0, 0, 1, 0));

            utr = new UserTrustRatings[users];
            for (int i = 0; i < users; i++)
            {
                if (false == UodbWS.GetUserTrustRatings(XArbGlobal.defaultUserPuids.IndexToPuid((uint)i), XArbGlobal.myTitleTrustConstants.titleId, out utr[i]))
                {
                    return false;
                }
            }

            return true;
        }

        protected bool DecayCVars(UserTrustRatings utr, UserTrustRatings utrBefore, UserTrustRatings utrAfter)
        {
            TimeSpan deltaT = utrAfter.changeDatetime - utrBefore.changeDatetime;
            utr.c1_SuccessfulSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c2_MinoritySessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c3_FailedSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c4_ProblematicSessionCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c5_UDPReportCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c6_DisconnectCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c7_Type1SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c8_Type2SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);
            utr.c9_Type3SuspiciousCount *= Decay(System.Convert.ToUInt32(deltaT.TotalSeconds), XArbGlobal.myTitleTrustConstants.lambda);

            return true;
        }
        protected bool TrustModifiedIncrement(ref double target, XRLRegister register)
        {
            XRLDebugResultResponse myDebugResultResponse = GetDebugResultResponse(register);
            if (null == myDebugResultResponse)
            {
                return false;
            }
            return TrustModifiedIncrement(ref target, register, myDebugResultResponse.sessionSeconds);
        }

        protected bool TrustModifiedIncrement(ref double target, XRLRegister register, double sessionSeconds)
        {
            if (register == null) return false;
            double amp = 1.0;
            if ((register.flags & XRLRegister.Flags.IsTournament) == XRLRegister.Flags.IsTournament)
            {
                amp = XArbGlobal.myTitleTrustConstants.userCompetitionAmp;
            }
            if ((register.flags & XRLRegister.Flags.PublisherBasedTournament) == XRLRegister.Flags.PublisherBasedTournament)
            {
                amp = XArbGlobal.myTitleTrustConstants.publisherCompetitionAmp;
            }
            target += TrustMod(sessionSeconds, XArbGlobal.myTitleTrustConstants.baseSessionTime) * (float)amp;
            return true;
        }

        protected bool CompareTrustPrediction(UserTrustRatings[] prediction, UserTrustRatings[] actual)
        {
            if ((null == prediction) || (null == actual) || (prediction.Length != actual.Length)) return false;

            for (int i = 0; i < prediction.Length; i++)
            {
                Type type = typeof(UserTrustRatings);
                foreach (FieldInfo field in type.GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
                {
                    if (false == field.GetValue(actual[i]).Equals(field.GetValue(prediction[i])))
                    {
                        double percentDiff = 0.0;
                        if (field.FieldType == typeof(double))
                        {
                            double d1 = (double)field.GetValue(actual[i]);
                            double d2 = (double)field.GetValue(prediction[i]);
                            if ((d1 == 0.0) || (d2 == 0.0))
                            {
                                percentDiff = (d1 + d2);
                            }
                            else
                            {
                                percentDiff = Math.Abs(d2 - d1) / d2;
                            }
                            if (percentDiff < 0.000001)
                            {
                                continue;
                            }
                        }
                        //ConsoleX.WriteLine("user="+i+" "+field.ToString()+"="+field.GetValue(prediction[i])+"!="+field.GetValue(actual[i]));
                        return false;
                    }
                }
            }

            return true;
        }

        protected bool PrepareUserTrustRating(uint users, double c_watermark, uint total_session_watermark, TimeSpan stale)
        {
            if (users == 0) return false;

            UserTrustRatings utr = new UserTrustRatings();
            utr.changeDatetime = UodbWS.GetUTCDate();
            utr.changeDatetime = utr.changeDatetime.Subtract(stale);
            utr.c1_SuccessfulSessionCount = c_watermark;
            utr.c2_MinoritySessionCount = c_watermark;
            utr.c3_FailedSessionCount = c_watermark;
            utr.c4_ProblematicSessionCount = c_watermark;
            utr.c5_UDPReportCount = c_watermark;
            utr.c6_DisconnectCount = c_watermark;
            utr.c7_Type1SuspiciousCount = c_watermark;
            utr.c8_Type2SuspiciousCount = c_watermark;
            utr.c9_Type3SuspiciousCount = c_watermark;
            utr.sessionBase = total_session_watermark;
            utr.sessionFreeForAll = total_session_watermark;
            utr.sessionSeconds = total_session_watermark;
            utr.sessionXboxCount = total_session_watermark;
            utr.totalCompetitionNoShows = total_session_watermark;
            utr.totalCompetitions = total_session_watermark;
            utr.totalSessionDisconnects = total_session_watermark;
            utr.totalSessions = total_session_watermark;

            for (int i = 0; i < users; i++)
            {
                utr.puid = XArbGlobal.defaultUserPuids.IndexToPuid((uint)i);
                utr.titleId = XArbGlobal.myTitleTrustConstants.titleId;
                if (false == UodbWS.SetUserTrustRatings(utr))
                {
                    return false;
                }
            }

            return true;
        }


        protected static void HexDump(string label, byte[] b)
        {
            Console.Write(label + ": ");
            for (int c = 0; c < b.GetLength(0); c++)
            {
                Console.Write(b[c].ToString("X2"));
            }
            Console.WriteLine();
        }

        public static double Fermi(double x, double k)
        {
            return 1 / (1 + Math.Exp((-x) / k));
        }

        public static float TrustMod(double sessionSeconds, uint baseSessionTime)
        {
            if (0 == baseSessionTime) return 1.0f;
            return (float)(1.0 + Math.Log(Math.Max(1.0, sessionSeconds / baseSessionTime)));
        }

        public static double Decay(uint deltaT, uint lambda)
        {
            return Math.Exp(-((double)deltaT / (double)lambda));
        }

        public void SendFDXmgmtCmd(string cmd)
        {
            Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xarb, cmd);
        }
        public static string GetbucketServer(uint bucketid)
        {

            IBucketServer bucket = Config.GetBucketServer(Interface.xarbInh, bucketid);
            return (bucket.CurrentServerName);
        }

        public static string GetServerBySessionId(ulong sessionId)
        {
            uint partition = Config.GetBucketNum(Interface.xarbInh, sessionId);
            IBucketServer bucket = Config.GetBucketServer(Interface.xarbInh, partition);
            return (bucket.CurrentServerName);
        }

        public static bool SendXmgmtCmdByIPEndPoint(System.Net.IPEndPoint serverEP, string command, out string response)
        {
            string serverName = System.Net.Dns.GetHostEntry(serverEP.Address).HostName.Split('.')[0];
            return (SendXmgmtCmdByServerName(serverName, command, out response));
        }

        public static bool SendXmgmtCmdByServerName(string serverName, string command, out string response)
        {
            // HostNames only, no IPs in serverName
            IInterfaceInfo ifc = Config.GetInterface(serverName, Interface.xmgmtsrv);
            IPEndPoint ipEndPoint = new IPEndPoint(ifc.IPAddress, ifc.Port);
            bool Succeeded = ManagementConsole.Execute(ipEndPoint, command, out response);
            if (response != null && response.Length > 1)
            {
                Global.RO.Debug(response.Trim());
            }
            return (Succeeded);
        }

        public static ulong CreateServerMappedSessionId(string targetServerName, int targetBucket)
        {
            targetServerName = targetServerName.ToLower();
            ulong sessionId;
            string actualServerName = "";
            do
            {
                sessionId = ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.NextUlong();
                uint foundBucket = Config.GetBucketNum(Interface.xarbInh, sessionId);
                if (foundBucket == targetBucket)
                {
                    IBucketServer ibucket = Config.GetBucketServer(Interface.xarbInh, foundBucket);
                    actualServerName = ibucket.CurrentServerName;
                }
            } while (actualServerName.ToLower().Trim() != targetServerName.ToLower().Trim());
            return (sessionId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\LBStressBase.cs ===
using System;
using System.Threading;
using System.Text;

namespace XeStatsStress
{


	public class statsStressUser
	{
		public ulong UserPuid;
		public uint IterationCount;
		public ulong Rating ;
		public ulong RatingDelta ;
		public statsStressUser(ulong puid , uint itcount,ulong pindx ,ulong Idx )
		{
			UserPuid= puid;
			IterationCount = itcount;
			if(Idx%2>0)
			{
				// number is odd
				if(Array.BinarySearch(rgPrimes,Idx)>0)
				{
					Rating = 10000000-(pindx+Idx)*7+itcount*3 ;
					if (itcount!=0)
						RatingDelta = Rating -(100000-(pindx+Idx)*7+(itcount-1)*3 );
				}
				else
				{
					Rating = (pindx+Idx)*59+itcount*7 ;
					if (itcount!=0)
						RatingDelta = Rating-((pindx+Idx)*59+(itcount-1)*7);
				}
			}
			else
			{
				Rating= (pindx+Idx)*rgPrimes[itcount%300];
				if (itcount!=0)
					RatingDelta = Rating - (pindx*((itcount-1)%300));
			}

			if(itcount==0)
				RatingDelta = Rating;
		}


		static ulong[] rgPrimes = {59, 73, 97, 109, 137, 157, 179, 197, 227, 241, 269, 283, 313, 347,

									  367, 389, 419, 439, 461, 487, 509, 547, 571, 599, 617, 643, 661, 691, 727, 751,

									  773, 811, 829, 859, 883, 919, 947, 977, 1009, 1031, 1051, 1087, 1103, 1129, 1171, 1201,

									  1229, 1259, 1289, 1303, 1327, 1381, 1427, 1447, 1471, 1489, 1523, 1553, 1579, 1607, 1621, 1663,

									  1697, 1723, 1753, 1787, 1823, 1867, 1879, 1913, 1951, 1993, 2011, 2039, 2081, 2099, 2131, 2153,

									  2207, 2239, 2269, 2293, 2333, 2351, 2381, 2399, 2437, 2467, 2521, 2549, 2591, 2621, 2659, 2683,

									  2699, 2719, 2749, 2789, 2803, 2843, 2879, 2909, 2953, 2971, 3019, 3049, 3083, 3121, 3169, 3203,

									  3229, 3259, 3307, 3329, 3359, 3389, 3433, 3463, 3499, 3529, 3547, 3581, 3613, 3637, 3673, 3701,

									  3733, 3769, 3803, 3847, 3877, 3911, 3929, 3967, 4007, 4027, 4073, 4099, 4133, 4159, 4217, 4241,

									  4261, 4289, 4339, 4373, 4421, 4451, 4483, 4517, 4549, 4591, 4637, 4651, 4679, 4723, 4759, 4793,

									  4817, 4877, 4919, 4943, 4969, 4999, 5003, 5023, 5077, 5101, 5147, 5179, 5227, 5261, 5297, 5333,

									  5387, 5413, 5437, 5471, 5501, 5521, 5563, 5591, 5647, 5659, 5693, 5737, 5779, 5807, 5839, 5857,

									  5879, 5923, 5981, 6029, 6053, 6089, 6121, 6151, 6199, 6221, 6263, 6287, 6317, 6343, 6367, 6397,

									  6451, 6491, 6551, 6571, 6607, 6659, 6689, 6709, 6761, 6791, 6827, 6857, 6883, 6917, 6961, 6983,

									  7013, 7043, 7103, 7129, 7187, 7213, 7243, 7297, 7331, 7369, 7433, 7477, 7499, 7529, 7549, 7577,

									  7603, 7643, 7681, 7703, 7741, 7789, 7829, 7873, 7901, 7933, 7963, 8017, 8069, 8093, 8123, 8171,

									  8219, 8237, 8273, 8297, 8353, 8387, 8429, 8461, 8521, 8543, 8597, 8627, 8663, 8689, 8713, 8741,

									  8779, 8819, 8839, 8867, 8929, 8963, 9001, 9029, 9059, 9109, 9151, 9181, 9209, 9241, 9283, 9323,

									  9349, 9397, 9421, 9439, 9473, 9511, 9547, 9613, 9631, 9677, 9719, 9743, 9781, 9811, 9839, 9871,

									  9907, 9941 };
	}
	
	public class LBGroup
	{
		uint[] LBids ;
		ulong CurrentUserIdxA=0;
		ulong CurrentUserIdxB=0;
		ulong MaxFA=10000;
		uint IterationCount=0;
		uint ReadReqWindowSz=100000;
		ulong BaseUser=0;
		ulong MaxFB;
		ReaderWriterLock rwl = new ReaderWriterLock();


		public LBGroup(uint[] ids,ulong _BaseUser, uint rwSize,ulong UCount)
		{
			LBids = ids;
			ReadReqWindowSz=rwSize;
			MaxFB=UCount/MaxFA;
			BaseUser =_BaseUser;
		}
		
		
		public uint[] GetLBids()
		{
			return LBids;
		}

		public statsStressUser GetUserToWrite()
		{
			ulong FactA;
			ulong FactB;

			try
			{
				rwl.AcquireWriterLock(60000);
				FactA = CurrentUserIdxA++;
				FactB =CurrentUserIdxB*MaxFA;
				if(CurrentUserIdxA>MaxFA)
				{
					CurrentUserIdxB++;
					CurrentUserIdxA=0;
					if(CurrentUserIdxB> MaxFB)
					{
						CurrentUserIdxB=0;
						IterationCount++;
					}
				}
			}
			finally
			{
				rwl.ReleaseWriterLock();
			}

			ulong puid = BaseUser+FactA+FactB;
			statsStressUser tmp = new statsStressUser(puid,IterationCount,FactB,FactA);
			return tmp;
		}

		public statsStressUser GetUserToRead(RandomEx rand)
		{
			int NoOfUsersWritten =(int)(CurrentUserIdxB*MaxFA)+(int)CurrentUserIdxA;
			int uidx = rand.Next( (int)(NoOfUsersWritten<ReadReqWindowSz?0:(NoOfUsersWritten-ReadReqWindowSz)),(int)NoOfUsersWritten);
			ulong Afactor = (ulong)uidx%MaxFA;
			ulong Bfactor = (ulong) uidx-Afactor;
			statsStressUser tmp= new statsStressUser(BaseUser+Afactor+Bfactor,IterationCount,Bfactor,Afactor); 

			return tmp;
		}

		

	}

	unsafe public class RandomEx
	{
		protected	Random	randGen;

		static private int		seed=0;
		static private int		initialSeed=0;

		static RandomEx()
		{
			initialSeed = (int)DateTime.Now.Ticks;
			seed = initialSeed;
		}

		public RandomEx()
		{
			lock (this.GetType())
			{
				randGen=new Random(seed++);
			}
		}

		public int Next()
		{
			return randGen.Next();
		}

		public int	Next(int maximum)
		{
			return randGen.Next(maximum);
		}

		public int	Next(int minimum, int maximum)
		{
			return randGen.Next(minimum, maximum);
		}

		public float Next(float maximum)
		{
			return (float)randGen.NextDouble() * maximum;
		}

		public ulong NextUlong()
		{
			ulong retValue;
			byte []bytes=new byte[8];
			randGen.NextBytes(bytes);
			fixed (byte *p=bytes)
			{
				retValue=*(ulong*)p;
			}
			return retValue;
		}

		public ulong NextPuid()
		{
			return (ulong)(randGen.NextDouble()*5000000000)+(ulong) 0x9500000000000;
		}

		public ulong NextTeamPuid()
		{
			return (ulong)(randGen.NextDouble()*5000000000) | (ulong) 0xFEFE000000000000;
		}

		public double NextDouble()
		{
			return randGen.NextDouble();
		}

		public bool	NextBool()
		{
			return randGen.Next()>(Int32.MaxValue/2);
		}

		public void NextBytes(byte[] buffer)
		{
			randGen.NextBytes(buffer);
		}

		static public int GetInstanceCount()
		{
			return seed - initialSeed;
		}

		// these characters can be used to create random names
		static string	validChars="0123456789aeiou";
		static int		validCharCount=validChars.Length;
		/// <summary>
		/// Generates a random ASCII string
		/// </summary>
		/// <param name="MaxLength">Length of string to generate</param>
		/// <returns></returns>
		public string GenerateRandomString(int MaxLength)
		{
			long i;
			StringBuilder Name;
		
			/*
				* I need two classes of users - ones whose gamertag can be changed,
				* and ones that will always have the same tag.
				* For this reason, some user names will begin with RMA, and some will begin with RMB
				*/
		
			if (randGen.Next()<Int32.MaxValue/2)
				Name=new StringBuilder("RMA");
			else
				Name=new StringBuilder("RMB");
			//	Add some random characters
			for (i=Name.Length; i<MaxLength; i++)
			{
				Name.Append(validChars[randGen.Next(validCharCount)]);
			}
			return Name.ToString(0,MaxLength);
		}

		/// <summary>
		/// Like GenerateRandomString, but with specified prefix.
		/// </summary>
		/// <param name="MaxLength"></param>
		/// <returns></returns>
		public string GenerateRandomString(string prefix, int MaxLength)
		{
			long i;
			StringBuilder Name;
			Name=new StringBuilder( prefix );

			//	Add some random characters
			for (i=Name.Length; i<MaxLength; i++)
			{
				Name.Append(validChars[randGen.Next(validCharCount)]);
			}
			return Name.ToString(0,MaxLength);
		}

		/// <summary>
		/// Unlike GenerateRandomString, there is no prefix with this version.
		/// </summary>
		/// <param name="MaxLength"></param>
		/// <returns></returns>
		public string GenerateRandomNameString(int MaxLength)
		{
			long i;
			StringBuilder Name=new StringBuilder();

			//	Add some random characters
			for (i=Name.Length; i<MaxLength; i++)
			{
				Name.Append(validChars[randGen.Next(validCharCount)]);
			}
			return Name.ToString(0,MaxLength);
		}

		/// <summary>
		/// Generates a random UTF string
		/// </summary>
		/// <param name="MaxLength">Length of string to generate</param>
		/// <returns></returns>
		public string GenerateRandomUTFString(int MaxLength)
		{
			long i;
			StringBuilder Name=new StringBuilder("R");
			//	Add some time dependent chatacters
			for (i=Name.Length; i<MaxLength; i++)
			{
				Name.Append((char) randGen.Next(30000,32000));
			}
			return Name.ToString();
		}


		/// <summary>
		/// This will generate, like, a totally, like, random string, dude.
		/// 
		/// The entire string is composed of chars in the 32..255 range
		/// </summary>
		/// <param name="MaxLength"></param>
		/// <returns></returns>
		public string GenerateTotallyRandomString(int MaxLength)
		{
			StringBuilder Name=new StringBuilder(MaxLength);
			//	Add some time dependent chatacters
			for (int i=0; i<MaxLength; i++)
			{
				Name.Append((char) randGen.Next(32,127));
			}
			return Name.ToString();
		}

		/// <summary>
		/// This will generate a random blob of bytes ranging from 0x0-0xff
		/// </summary>
		/// <param name="MaxLength"></param>
		/// <returns></returns>
		public byte[] GenerateRandomBlob(int MaxLength)
		{
			byte[] blob = new byte[MaxLength];
			randGen.NextBytes(blob);
			return blob;
		}


		/// <summary>
		/// Returns an Int32 that logarithmically tends towards 0
		/// </summary>
		#region Random number distribution
		// (calculated from 10,000,000 samples)
		//49.99799
		//25.00818
		//12.49884
		// 6.25495
		// 3.12409
		// 1.55705
		// 0.77807
		// 0.39020
		// 0.19451
		// 0.09827
		// 0.04867
		// 0.02443
		// 0.01233
		// 0.00618
		// 0.00315
		// 0.00151
		// 0.00084
		// 0.00034
		// 0.00019
		// 0.00011
		// 0.00005
		// 0.00001
		// 0.00003
		// 0.00001
		#endregion
		public int NextLog()
		{
			return(int)(31 - Math.Log(randGen.Next() + 1, 2));
		}

		public string GenerateRandomName()
		{
			return GenerateRandomString(15);
		}

		public ulong GenerateRandomPuid()
		{
			ulong puid = (ulong)randGen.Next();
			puid = puid << 32;
			puid |= (uint)randGen.Next();

			return puid;
		}

		public string GenerateUnicodeString( int length )
		{
			return GeneratePrefixedUnicodeString( "", length, true );
		}

		public string GenerateUnicodeString( int length, bool noSpaces )
		{
			return GeneratePrefixedUnicodeString( "", length, noSpaces );
		}

		public string GenerateUnicodeString( int minLength, int maxLength )
		{
			return GeneratePrefixedUnicodeString( "", minLength, maxLength, true );
		}

		public string GenerateUnicodeString( int minLength, int maxLength, bool noSpaces )
		{
			return GeneratePrefixedUnicodeString( "", minLength, maxLength, noSpaces );
		}

		public string GeneratePrefixedUnicodeString( string prefix, int minLength, int maxLength )
		{
			return GeneratePrefixedUnicodeString( prefix, minLength, maxLength, true );
		}

		public string GeneratePrefixedUnicodeString( string prefix, int minLength, int maxLength, bool noSpaces )
		{
			if( maxLength < minLength )
				throw new ArgumentException( "Max Length is less than Min length" );
			if( prefix.Length > minLength )
				throw new ArgumentException( "Prefix is longer that speicified min length" );
			
			int length = randGen.Next( minLength, maxLength+1 );
			return GeneratePrefixedUnicodeString( prefix, length, noSpaces );
		}

		public string GeneratePrefixedUnicodeString( string prefix, int length )
		{
			return GeneratePrefixedUnicodeString( prefix, length, true );
		}

		public string GeneratePrefixedUnicodeString( string prefix, int length, bool noSpaces )
		{
			if( prefix.Length > length )
				throw new ArgumentException( "Prefix length is greater than speicified length" );

			StringBuilder sb = new StringBuilder( prefix );
			while( sb.Length < length )
			{
				// Pick any but Control Codes (0x0000  0x001F) and "Specials" (0xFFF0  0xFFFF0
				char c = (char) randGen.Next( 0x20, 0xFFF0 ); 
				
				// Check for Deprecated Format Characters (0x206A  0x206F) 
				if( (c >= 0x206A) && (c <= 0x206F) )
					continue;

				// Check for Surrogates Area (0xD800  0xDFFF) 
				if( (c >= 0xD800) && (c <= 0xDFFF) )
					continue;

				// Check for Private Use Area (0xE000  0xF8FF) 
				if( (c >= 0xE000) && (c <= 0xF8FF) )
					continue;

				// Check for other "Special" (0xFEFF) 
				if( c == 0xFEFF )
					continue;

				sb.Append( c );
			}
			return sb.ToString();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\xboxcom\MetadataEditorTest\XmlConfigFile.cs ===
using System;
using System.Xml;

namespace MetadataEditorTest
{
	/// <summary>
	/// This class facilitates the reading of an XML config file that contains
	/// data that depends on the enviroment that it is running againt.  For
	/// example: usernames may be different in TestNet vs. PreProd vs. BVTNet,
	/// etc.
	/// 
	/// The format of the XML file is expected to be as such:
	// <config>
	//      <environ>[EnvironmentName]</environ>
	//      <[EnvironmentName1]>
	//           <value1></value1>
	//           <value2></value2>
	//           <value3></value3>
	//      </[EnvironmentName1]>
	//      <[EnvironmentName2]>
	//           <value1></value1>
	//           <value2></value2>
	//           <value3></value3>
	//      </[EnvironmentName2]>
	// </config>
	///
	/// A practical example would be:
	// <config>
	//      <environ>TestNet</environ>
	//      <TestNet>
	//           <username>TestUser</username>
	//      </TestNet>
	//      <PreProd>
	//           <username>PreProdUser</username>
	//      </PreProd>
	// </config>
	/// </summary>
	public class XmlConfigFile
	{
		// P R I V A T E   M E M B E R S //////////////////////////////////////
		private XmlDocument _Doc = null;
		private string _Environment;

		// P U B L I C   M E M B E R S ////////////////////////////////////////

		/// <summary>
		/// Constructor reads in the config file and determines the environment
		/// to run on based on the "environ" tag
		/// </summary>
		/// <param name="Filename">name of the config file</param>
		public XmlConfigFile (string Filename)
		{
			// Load the file
			_Doc = new XmlDocument ();
			_Doc.Load (Filename);

			// Read in the environment
			XmlNode xmlEnvironment;
			xmlEnvironment = _Doc.SelectSingleNode ("/config/environ");
			if (null != xmlEnvironment)
				_Environment = "/config/" + xmlEnvironment.InnerText;
			else
				throw new XmlException ("Could not determine which environment to read");
		}

		/// <summary>
		/// Accessor method used to read the needed data, it automatically takes care of
		/// reading from the right environment.  It's used like this:
		/// 
		/// XmlConfigFile Config = new Config ("MyConfigFile.xml");
		/// string SomeSetting = Config["/Auth/Username"];
		/// 
		/// </summary>
		public string this [string NodeName]
		{
			get
			{
				return ReadNode (_Environment + NodeName);
			}
		}

		/// <summary>
		/// Method used to read the needed data
		/// </summary>
		/// <param name="NodeName">name of the config file</param>
		/// <returns>The node's inner text</returns>
		public string ReadNode (string NodeName)
		{
			// Make sure that the XmlDocument's intialized and loaded
			if (null == _Doc)
				throw new XmlException ("XmlConfigFile not intialized");

			// Read in the wanted node
			XmlNode xmlData = _Doc.SelectSingleNode (NodeName);
			if (null == xmlData)
				throw new XmlException ("Cannot read " + NodeName + " in " + _Environment);
			else
				return xmlData.InnerText;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\Protocol\BundledAuth.cs ===
using System;
using System.IO;

namespace XeStatsStress.Protocol
{
    public class BundledAuthData
    {
        public string HTTP_HEADER_BUNDLED_AUTH_DATA = "BundledAuthData";
        public ushort HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION = 1;

        public BundledAuthData(uint paramTitleID, XUIDAndTrust[] paramUsers)
        {
            titleID = paramTitleID;
            users = paramUsers;
        }

        public BundledAuthData(string base64EncodedString)
        {
            BinaryReader reader = new BinaryReader(new MemoryStream(Convert.FromBase64String(base64EncodedString)));
            ushort wBundledAuthDataVersion;

            wBundledAuthDataVersion = reader.ReadUInt16();
            if (wBundledAuthDataVersion != HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION)
            {
                throw new Exception("BundledAuthData: Auth data version ("
                    + wBundledAuthDataVersion + ") is incorrect!");
            }
            users = new XUIDAndTrust[reader.ReadUInt16()];
            titleID = reader.ReadUInt32();
            for (int i = 0; i < users.Length; ++i)
            {
                users[i] = new XUIDAndTrust(reader.ReadUInt64(), reader.ReadUInt32(), reader.ReadSingle());
            }
        }

        public string GetBase64EncodedString()
        {
            MemoryStream memStream = new MemoryStream(users.Length * 16 + 8);

            BinaryWriter writer = new BinaryWriter(memStream);

            writer.Write(HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION);
            writer.Write((ushort)users.Length);
            writer.Write(titleID);
            for (int i = 0; i < users.Length; ++i)
            {
                writer.Write(users[i].qwUserID);
                writer.Write(users[i].dwUserFlags);
                writer.Write(users[i].userTrust);
            }

            return Convert.ToBase64String(memStream.ToArray());
        }

        public readonly uint titleID;
        public XUIDAndTrust[] users;

        public void VerifyTitleId(uint titleId)
        {
            if (titleId != titleID)
            {
                throw new Exception("BundleAuthData.Verify: Title ID *" + titleId.ToString("X") + "* (Bundle says " + titleID.ToString("X") + ") cannot be verfied.");
            }
        }
    }

    public struct XUIDAndTrust : IComparable
    {
        private const uint XONLINE_USER_GUEST_MASK = 0x00000003;
        private const uint XONLINE_USER_VOICE_NOT_ALLOWED = 0x00010000;
        private const uint XONLINE_USER_PURCHASE_NOT_ALLOWED = 0x00020000;
        private const uint XONLINE_USER_COUNTRY_MASK = 0x0000FF00;

        public ulong qwUserID;
        public uint dwUserFlags;
        public float userTrust;

        public XUIDAndTrust(ulong userID, uint userFlags, float paramUserTrust)
        {
            qwUserID = userID;
            dwUserFlags = userFlags;
            userTrust = paramUserTrust;
        }

        public int CompareTo(object obj)
        {
            return qwUserID.CompareTo(((XUIDAndTrust)obj).qwUserID);
        }

        public uint GuestNumber()
        {
            return dwUserFlags & XONLINE_USER_GUEST_MASK;
        }

        public bool IsGuest()
        {
            return (GuestNumber() != 0);
        }

        public byte UserCountry()
        {
            return (byte)((dwUserFlags & XONLINE_USER_COUNTRY_MASK) >> 8);
        }

        public bool CanPurchase()
        {
            return ((dwUserFlags & (XONLINE_USER_GUEST_MASK | XONLINE_USER_PURCHASE_NOT_ALLOWED)) == 0);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\StatsMain.cs ===
using System;
using System.Net;
using System.IO;
using System.Net.Sockets;
using livetest.core;
using XeStatsStress.Protocol;
using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;

namespace XeStatsStress
{


	public class WorkerGlobal
	{
		// vip 10.20.1.13 iis1 10.20.202.51
		static public IPAddress Address    =  IPAddress.Parse("10.20.1.13");
		static public ushort Port          = 11070;
		static public ushort DriectPort          = 10070;
	}

	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class StatsMain : HttpWorker
	{
		public static LBGroup lbgs = new LBGroup(new uint[]{1},23456789,10000,20000);
		static string [] Postheaders = new string[]{"Content-Type","xon/7","User-Agent","7/0.10.4715","BundledAuthData",""};
		static string [] Readheaders = new string[]{"Content-Type","xon/7","User-Agent","7/0.10.4715"};
		protected RandomEx rand = new RandomEx();
		CSGInfo Slot ;
		statsReadReqBuilder reqdata = null;

		

		public StatsMain(): base(0x10000)
		{
			Global gb = new Global();
			gb.OnPluginLoaded();
			Slot=GlobalFakeSG.FakeSG.GetSlot();

			// create and cache read request
			uint title = 255;
			reqdata = new statsReadReqBuilder(title,rand);
			reqdata.Addviews(lbgs,2,30);
		}

		public void WriteStats()
		{

			PostRequestBuilder statsdata = new PostRequestBuilder(255,rand,2,2);
			statsdata.AddReplaceProc(lbgs,2,30);

			StatsPostRequest req = statsdata.getPostReq();
			string header = statsdata.getAuthheader();
			
			

			Postheaders[5]= header;
			AppendRequest("POST", "/xstats/statpost.ashx", Postheaders ,(uint) statsdata.ReqSize);
			//copy the req in the _Buffer 
			MemoryStream ms = new MemoryStream(_Buffer,(int)_BufferCount,statsdata.ReqSize+2);
			req.WriteStream(new BinaryWriter(ms));
			if( statsdata.ReqSize != ms.Position)
				throw new Exception("statsdata.ReqSize != ms.Position");
			_BufferCount +=(uint)ms.Position;
			

			
			StartSend(
				WorkerGlobal.Address, 
				WorkerGlobal.Port, 
				new HttpWorker.Callback(this.VerifyWriteStats));

		}

		public void VerifyWriteStats()
		{
			if(this._HttpStatus != 200)
			 System.Console.WriteLine("WriteStats failed HTTP status = " +this._HttpStatus.ToString());
		}

		public override void CompleteConnect(IAsyncResult ar)
		{
			StatsMain tmp = (StatsMain)ar.AsyncState;

			Slot.port = (ushort) ((IPEndPoint)tmp._Socket.LocalEndPoint).Port;
			GlobalFakeSG.FakeSG.PutSlot( ref Slot, ((IPEndPoint)tmp._Socket.LocalEndPoint).Address );


			base.CompleteConnect(ar);
		}

		public void ReadStats()
		{
			uint title = 255;
			StatsReadRequest req = reqdata.getReadReq(lbgs);

			AppendRequest("POST", "/xstats/xstatread.ashx", Readheaders ,(uint) reqdata.ReqSize);

			Slot.userPuid0=reqdata.calleruserid;
			Slot.titleId = title;
			
			MemoryStream ms = new MemoryStream(_Buffer,(int)_BufferCount,reqdata.ReqSize+2);
			req.WriteStream(new BinaryWriter(ms));
			if( reqdata.ReqSize != ms.Position)
				throw new Exception("statsdata.ReqSize != ms.Position");
			_BufferCount +=(uint)ms.Position;
			

			
			StartSend(
				WorkerGlobal.Address, 
				WorkerGlobal.DriectPort, 
				new HttpWorker.Callback(this.VerifyReadStats));

			
			

		}

		public void VerifyReadStats()
		{
			if(this._HttpStatus == 200)
			{
				/*MemoryStream ms = new MemoryStream(_Buffer,(int)_HeaderLength,(int)_ContentLength);
				StatsReadResponse resp = (new StatsReadResponse()).ReadStream(ms);
				System.Console.WriteLine(" passed ");
				*/
			}
			else
				System.Console.WriteLine("ReadStats failed HTTP status = " +this._HttpStatus.ToString());

		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\Protocol\XRLStatsPost.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;

namespace XeStatsStress.Protocol
{
	public class PostRequestBuilder
	{
		uint titleid ;
		ushort ratingid =0xFFFE;
		ushort NoOfWrites =63;
		ushort SumofAllAttrib =64;
		RandomEx rand ;
		StatsProcCall[] Procs = null;
		int procIdx=0;
		XUIDAndTrust[]  xuids= null;
		int Uidx=0;
		public int ReqSize=6;
		int replacebasesize = 21;

		public PostRequestBuilder(uint title,RandomEx _rand,int pcount,int ucount)
		{
			titleid = title;
			rand=_rand;
			Procs = new StatsProcCall[pcount];
			xuids = new XUIDAndTrust[ucount];
		}


		public string getAuthheader()
		{
			BundledAuthData authData = new BundledAuthData(titleid,xuids);
			return authData.GetBase64EncodedString();
		}
		public StatsPostRequest getPostReq()
		{
			StatsPostRequest req = new StatsPostRequest(titleid,Procs);
			return req;
		}
		// use this function only for replace , min , max and increment for first time only
		public object[] getStatsParam(int count, ulong rating)
		{
			int id=1;
			object[] newparams = new object[count*2];
			newparams[0] = (short)ratingid;
			newparams[1]= rating;
			newparams[2] = (short)NoOfWrites;
			newparams[3]= (long)0;
			
			double sum=0;
			for( int i=4;i<(newparams.Length-2);i=i+2)
			{
				if( id%2 ==0)
				{
					newparams[i]= (short)id;
					newparams[i+1]= (long)0xAAAAAAAA;
				}
				else
				{
					newparams[i]= (short)id;
					newparams[i+1]= (double)(rand.NextDouble()% 10000);
					sum+=(double)newparams[i+1];
				}
				id++;

			}

			newparams[newparams.Length-2] = (short)SumofAllAttrib;
			newparams[newparams.Length-1]= sum;

			return newparams;

		}

		public void AddReplaceProc(LBGroup lbs,int usercount, int AttCount)
		{
			
			for(int i=0;i<usercount;i++)
			{
				statsStressUser user = lbs.GetUserToWrite();
				xuids[Uidx++] = new XUIDAndTrust(user.UserPuid,0,0);
				uint[] lbids = lbs.GetLBids();
				for(int j=0;j<lbids.Length;j++)
				{
					StatsProcCall replace = new StatsProcCall(StatProcIDs.Replace);
					object[] procparams; 

					if(user.IterationCount==0)
					{
						procparams= getStatsParam(AttCount,user.Rating);
						ReqSize+= replacebasesize+(AttCount*12);
					}
					else
					{
						int id=1;
						int actatt =  AttCount/2;
						procparams = new object[actatt*2];
						procparams[0] = (short)ratingid;
						procparams[1]= user.Rating;
						procparams[2] = (short)NoOfWrites;
						procparams[3]= (long)(user.IterationCount);
						double sum=0;
						for( int k=4;k<(procparams.Length-2);k=k+2)
						{
							procparams[k]= (short)id;
							procparams[k+1]= (double)(rand.NextDouble()%10000);
							sum +=(double)procparams[k+1];
							
							id= id+2;
						}
						procparams[procparams.Length-2] = (short)SumofAllAttrib;
						procparams[procparams.Length-1]= sum;
						ReqSize+= replacebasesize+(actatt*12);
					}
					replace.BuildPlayerStats((int)lbids[j],user.UserPuid,0,procparams);
					Procs[procIdx++]=replace;
					
				}


			}
		}
		public void AddIncrementProc(LBGroup lbs,int usercount, int AttCount)
		{
			for(int i=0;i<usercount;i++)
			{
				statsStressUser user = lbs.GetUserToWrite();
				xuids[Uidx++] = new XUIDAndTrust(user.UserPuid,0,0);
				uint[] lbids = lbs.GetLBids();
				for(int j=0;j<lbids.Length;j++)
				{
					StatsProcCall increment = new StatsProcCall(StatProcIDs.Add);
					object[] procparams; 

					if(user.IterationCount==0)
					{
						procparams= getStatsParam(AttCount,user.Rating);
						ReqSize+= replacebasesize+(AttCount*12);
					}
					else
					{
						int id=1;
						int actatt =  AttCount/2;
						procparams = new object[actatt*2];
						procparams[0] = (short)ratingid;
						procparams[1]= user.RatingDelta;
						procparams[2] = (short)NoOfWrites;
						procparams[3]= (long)1 ;// (user.IterationCount);
						double sum=0;
						for( int k=4;k<(procparams.Length-2);k=k+2)
						{
							procparams[k]= (short)id;
							procparams[k+1]= (double)(rand.NextDouble()%1000);
							sum +=(double)procparams[k+1];
							
							id= id+2;
						}
						procparams[procparams.Length-2] = (short)SumofAllAttrib;
						procparams[procparams.Length-1]= sum;
						ReqSize+= replacebasesize+(actatt*12);
					}
					increment.BuildPlayerStats((int)lbids[j],user.UserPuid,0,procparams);
					Procs[procIdx++]=increment;
					
				}


			}
		}

		// add all other procs here.

		
	}


	/// <summary>
	/// in the hash table  Musigma  and elo procs  will use zero was user ID
	/// </summary>
	/// 
	public class StatsPostRequest
	{
		public uint		TitleID=1234;
		protected ushort	ProcCallsLen=0;
		StatsProcCall[] ProcCalls = null;
		

		public  StatsPostRequest(uint Titleid,StatsProcCall[] Procs)
		{
			TitleID=Titleid;
			ProcCalls = Procs;
		}

		static public StatsPostRequest ReadStream(BinaryReader reader)
		{
			ushort len = reader.ReadUInt16();
			StatsProcCall[] ProcCalls = new StatsProcCall[len];
			for(ushort i=0;i<len;i++)
			{
				ProcCalls[i] = StatsProcCall.ReadStream(reader);
				
			}
			StatsPostRequest tmp = new StatsPostRequest(reader.ReadUInt32(),ProcCalls);
			return tmp;

		}

		public void WriteStream(BinaryWriter writer)
		{
			writer.Write(TitleID);
			ProcCallsLen = (ushort)ProcCalls.Length;
			writer.Write(ProcCallsLen);
			for(int i=0; i<ProcCalls.Length;i++)
			{
				ProcCalls[i].WriteStream(writer);
				
			}

		}


	
		
		
	}

	public  class StatsProcCall
	{
		public ushort ProcID;
		public ushort ParamsLen=0;
		public StatParam[] Params;

		static public StatsProcCall ReadStream(BinaryReader reader)
		{
			StatsProcCall tmp = new StatsProcCall(reader.ReadUInt16());
		
			tmp.ParamsLen =reader.ReadUInt16();
			tmp.Params = new StatParam[tmp.ParamsLen];
			for(int i=0;i<tmp.ParamsLen;i++)
			{
				tmp.Params[i]= StatParam.ReadStream(reader);
			}
			return tmp;

		}

		public void WriteStream(BinaryWriter writer)
		{
			writer.Write(ProcID);
			writer.Write(ParamsLen);
			for(int i=0;i< Params.Length;i++)
				Params[i].WriteStream(writer);

		}


		public StatsProcCall(ushort Procid)
		{
			ProcID=Procid;
		}

		
		public void  BuildConditional(int lbid, ulong puid,byte Condition,short StatID,object Value)
		{
			StatsProcBuilder _Condition = new StatsProcBuilder();
			_Condition.AddParam(new StatParamPuid(puid));
			_Condition.AddParam(new StatParam(lbid));
			_Condition.AddParam(new StatParam(Condition));
			_Condition.AddParam(new StatParam(StatID));

			
			if(Value is int)
			{
				_Condition.AddParam(new StatParam((int)Value));
			}
			else if(Value is long)
			{
				_Condition.AddParam(new StatParam((long)Value));
			}
			else if(Value is double)
			{
				_Condition.AddParam(new StatParam((double)Value));
			}
			else
			{
				throw new Exception("Invalid type of param[i]");
			}

			
			Params = _Condition.GetParams();
			ParamsLen = (ushort)Params.Length;


		}
	
		public void  BuildPlayerStats(int lbid, ulong puid,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder();
			_Player.AddParam(new StatParamPuid(puid));
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));

			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is short)
				{
					_Player.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Player.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Player.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is ulong)
				{
					_Player.AddParam(new StatParam((long)(ulong)param[i]));
				}
				else if(param[i] is double)
				{
					_Player.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Player.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Params = _Player.GetParams();
			ParamsLen = (ushort)Params.Length;
		}

		public void  BuildMuSigmaStats(int lbid, short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder();
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));

			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is ulong)
				{
					_Player.AddParam(new StatParamPuid((ulong)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}

			Params = _Player.GetParams();
			ParamsLen = (ushort)Params.Length;
		}

		public void  BuildELOPlayer(int lbid, ulong puid1,ulong puid2,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder();
			_Player.AddParam(new StatParamPuid(puid1));
			_Player.AddParam(new StatParamPuid(puid2));
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));
			
			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is byte)
				{
					_Player.AddParam(new StatParam((byte)param[i]));
				}
				else if(param[i] is short)
				{
					_Player.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Player.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Player.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is double)
				{
					_Player.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Player.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Params = _Player.GetParams();
			ParamsLen = (ushort)Params.Length;
		}

		public class StatsProcBuilder
		{
			protected ArrayList Params = new ArrayList();

			public StatsProcBuilder()
			{
				
			}
			public void  AddParam(StatParam param)
			{
				Params.Add(param);
			}

			public StatParam[] GetParams()
			{

				StatParam[]	tempParams = new StatParam[Params.Count];
				for (int i=0;i<Params.Count;i++)
				{
					tempParams[i]=(StatParam)Params[i];
				}

				return tempParams;

			}

		}

	}

	public class StatParam
	{
		public byte         _bParamType = 0;
		public object       _data = null;

		public StatParam()
		{
		}
        
		public static StatParam ReadStream(BinaryReader reader)   
		{
			StatParam tmp = new StatParam();
			tmp._bParamType = reader.ReadByte();
          
			switch(tmp._bParamType)
			{
				case StatParamTypes.Int8:
					tmp._data = (object) reader.ReadByte(); // BUGBUG: sign?
					break;
				case StatParamTypes.Int16:
					tmp._data = (object) reader.ReadInt16();
					break;
				case StatParamTypes.Int32:
					tmp._data = (object) reader.ReadInt32();
					break;
				case StatParamTypes.Int64:
					tmp._data = (object) reader.ReadInt64();
					break;
				case StatParamTypes.Float:
					tmp._data = (object) reader.ReadDouble();
					break;
				case StatParamTypes.Utf8string:
				{
					ushort strsize = reader.ReadUInt16();
                   
					if(strsize > ProtocolConstant.MaxUtf8StringParamSize)
					{
						throw new Exception( 
							"Utf8String parameter size greater than allowed max (" + 
							ProtocolConstant.MaxUtf8StringParamSize + ")");
					}

					tmp._data = (object) Encoding.UTF8.GetString(reader.ReadBytes(strsize));
					break;
				}
				case StatParamTypes.Puid:
					tmp._data = (object) reader.ReadUInt64();
					break;
				default:
					throw new Exception( 
						"Invalid parameter type " + tmp._bParamType.ToString());
			}
			return tmp;
		}

		public void WriteStream(BinaryWriter writer)
		{
			
			writer.Write(_bParamType);
           
			switch(_bParamType)
			{
				case StatParamTypes.Int8:
					writer.Write((byte)_data);
					break;
				case StatParamTypes.Int16:
					writer.Write((short)_data);
					break;
				case StatParamTypes.Int32:
					writer.Write((int)_data);
					break;
				case StatParamTypes.Int64:
					writer.Write((long)_data);
					break;
				case StatParamTypes.Float:
					writer.Write((double)_data);
					break;
				case StatParamTypes.Utf8string:
				{
					byte[] encstring = Encoding.UTF8.GetBytes((string)_data);
					writer.Write((ushort) encstring.Length);
					writer.Write(encstring);
					break;
				}
				case StatParamTypes.Puid:
					writer.Write((ulong)_data);
					break;
				default:
					throw new Exception(
						"Invalid parameter type " + _bParamType.ToString());
			}
		}

		

		public StatParam(int udata)
		{
			_bParamType=StatParamTypes.Int32;
			_data =(object)udata;
		}
		public StatParam(short sdata)
		{
			_bParamType=StatParamTypes.Int16;
			_data =(object)sdata;
		}
		public StatParam(double ddata)
		{
			_bParamType=StatParamTypes.Float;
			_data =(object)ddata;
		}
		public StatParam(long ldata)
		{
			_bParamType=StatParamTypes.Int64;
			_data =(object)ldata;
		}
		public StatParam(byte bdata)
		{
			_bParamType=StatParamTypes.Int8;
			_data =(object)bdata;
		}
		public StatParam(string sdata)
		{
			_bParamType=StatParamTypes.Utf8string;
			_data =(object)sdata;
		}
		
	}

	public class StatParamPuid : StatParam
	{
		public StatParamPuid(ulong puid)
		{
			_bParamType=StatParamTypes.Puid;
			_data =(object)puid;
		}

	}

	public class StatContitions 
	{
		public const byte Equal				= 1;
		public const byte Greater			= 2;
		public const byte GreaterOREqual	= 3;
		public const byte Less		        = 4;
		public const byte LessOREqual       = 5;
		public const byte Exist			    = 6;
		public const byte NotExist          = 7;
		public const byte NotEqual          = 8;
	}

	public class StatParamTypes 
	{
		public const byte Null         = 0;
		public const byte Int8         = 1;
		public const byte Int16        = 2;
		public const byte Int32        = 3;
		public const byte Int64        = 4;
		public const byte Float        = 5;
		public const byte Utf8string   = 6;
		public const byte Puid         = 7;
	}
    
	public class StatProcIDs
	{
		public const ushort Replace     = 0x8001;
		public const ushort ReplaceUnit = 0x8002;
		public const ushort Add			= 0x8003;
		public const ushort AddUnit		= 0x8004;
		public const ushort Elo			= 0x8005;
		public const ushort EloUnit		= 0x8006;
		public const ushort CondPlayer		= 0x8007;
		public const ushort CondUnit		= 0x8008;
		public const ushort Min         = 0x8009;
		public const ushort Max         = 0x800B;
		public const ushort MuSigma     = 0x800D;
		
	}

	public class ProtocolConstant
	{
		public const uint   MaxNicknameLength = 31;
		public const uint   MaxSpecsPerRequest = 101;
		public const uint   MaxSpecsPerSetDataRequest = 20;
		public const uint   MaxAttrPerSpec = 70;
		public const string AttachStorageDomain = "Stats";
        
		// BUGBUG: review V2 protocol parameters:
		public const uint   MaxProcedureCount = 64;
		public const uint   MaxUtf8StringParamSize = 1024;
		public const uint   MaxStatPostParamCount = 256;
		public const uint   MaxStatUnitGetSpecs   = 5;
	}




}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XeStatsStress\Protocol\XRLStatsRead.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;

namespace XeStatsStress.Protocol
{

		public class statsReadReqBuilder
		{
			ushort ratingid =0xFFFE;
			ushort NoOfWrites =63;
			ushort SumofAllAttrib =64;
			public uint titleid ;
			public ulong calleruserid = 0;
			StatsReadRequest ReadReq = null;
			public int ReqSize=20;
			RandomEx rand;
			
			public ushort[] getStatsParam(int count)
			{
				ushort id=1;
				ushort[]  Columns = new ushort[count];
				Columns[0] = (ushort)ratingid;
				Columns[1] = (ushort)NoOfWrites;
							
				for( int i=2;i<(count-1);i++)
				{
					Columns[i]= id;
					id++;
				}
				Columns[count-1] = (ushort)SumofAllAttrib;

				return Columns;

			}

			public statsReadReqBuilder(uint title,RandomEx _rand)
			{
				titleid = title;
				rand=_rand;
			}

			public StatsReadRequest getReadReq(LBGroup lbs)
			{

				ulong[] Users=  ReadReq.Users;
				for(int i=0;i<Users.Length;i++)
				{
					Users[i] = lbs.GetUserToRead(rand).UserPuid;
					
				}
				calleruserid=Users[0];

				return ReadReq;
			}

			public void Addviews(LBGroup lbs,int usercount, int AttCount)
			{
				ulong[] Users = new ulong[usercount];
				uint[] lbids = lbs.GetLBids();
				StatsSpec[] Specs = new StatsSpec[lbids.Length];

				for(int i=0;i<usercount;i++)
				{
					Users[i] = lbs.GetUserToRead(rand).UserPuid;
					
				}
				calleruserid=Users[0];
				
				ushort[] statsparams = getStatsParam(AttCount);
				
				for(int j=0;j<lbids.Length;j++)
				{
					Specs[j] = new StatsSpec(lbids[j],statsparams);
				}
				ReqSize += 8*usercount+2*AttCount;

				ReadReq = new StatsReadRequest(titleid,Users,Specs);

			}

		}

		/// <summary>
		/// Summary description for XRLStatsRead.
		/// </summary>
		public class StatsReadRequest
		{
			public uint TitleId;
			public uint UsersLen;
			public ulong[] Users = null;
			public uint SpecsLen;
			public StatsSpec[] Specs = null;

			public StatsReadRequest(uint title, ulong[] puids ,StatsSpec[] statspecs)
			{
				TitleId=title;
				Users=puids;
				Specs=statspecs;

			}


			public void WriteStream(BinaryWriter writer)
			{
				writer.Write(TitleId);
				writer.Write((uint)Users.Length);
				for(int i=0;i<Users.Length;i++)
					writer.Write(Users[i]);
				writer.Write((uint)Specs.Length);
				for(int i=0;i<Specs.Length;i++)
					Specs[i].WriteStream(writer);
			}
		}


		public class StatsSpec
		{
			public uint ViewId;
			public uint ColumnIdsLen = 0;
			public ushort[] ColumnIds = null;

			public StatsSpec(uint view ,ushort[] columns)
			{
				ViewId= view;
				ColumnIdsLen=(uint) columns.Length;
				ColumnIds=columns;
			}
			public void WriteStream(BinaryWriter writer)
			{
				writer.Write(ViewId);
				writer.Write((uint)ColumnIds.Length);
				for(int i=0;i<ColumnIds.Length;i++)
					writer.Write(ColumnIds[i]);
			}

		
		}


		public class StatsReadResponse
		{
			public uint xResult =0;
			public uint ResultsLen = 0;
			public StatsResultSet[] Results = null;

			public StatsReadResponse ReadStream(MemoryStream  RespStream)
			{
			
				BinaryReader reader = new BinaryReader(RespStream);
				ResultsLen= reader.ReadUInt32();
				Results = new StatsResultSet[ResultsLen];
				for(int count =0 ; count< ResultsLen; count++ )
				{
					Results[count] = new StatsResultSet().ReadStream(reader);
				
				}
				
		
				return this;
			}
		}


		public class StatsResultSet 
		{
			public ulong ViewId;
			public uint ViewSize = 0;
			public uint RowsLen = 0;
			public StatsRow[] Rows = null;

			public StatsResultSet ReadStream(BinaryReader reader)
			{
				ViewId= reader.ReadUInt64();
				ViewSize=reader.ReadUInt32();
				RowsLen=reader.ReadUInt32();
				Rows = new StatsRow[RowsLen];
				for( int i=0;i< RowsLen;i++)
				{
					Rows[i] = (new StatsRow()).ReadStream(reader);
				}
				return this;
			}
		}

		public class StatsRow 
		{
			public ulong Puid = 0;
			public uint  Rank   = 0;
			public ulong Rating = 0;
			public uint GamerTagLen= 0;
			public string GamerTag = null;
			public uint ColumnsLen = 0;
			public XRLAttr[] Columns = null;

			public StatsRow ReadStream(BinaryReader binaryReader)
			{
				Puid= binaryReader.ReadUInt64();
				Rank= binaryReader.ReadUInt32();
				Rating=binaryReader.ReadUInt64();
				GamerTagLen=binaryReader.ReadUInt32();
				char[] rawBytes = binaryReader.ReadChars( (int)GamerTagLen );
				GamerTag = new string( rawBytes );
				ColumnsLen=binaryReader.ReadUInt32();
				Columns = new XRLAttr[ColumnsLen];
				for(int count=0;count<ColumnsLen;count++)
				{
					Columns[count]= new XRLAttr().ReadStream(binaryReader);
				}

				return this;
			}
		}

		public class XRLAttr
		{
			ushort id;
			byte type;
			object Data= null;

			public XRLAttr ReadStream(BinaryReader binaryReader)
			{
				id = binaryReader.ReadUInt16();
				type = binaryReader.ReadByte();
				switch (type)
				{
					case(byte)StatParamTypes.Null:
						binaryReader.ReadByte();
						break;
					case(byte)StatParamTypes.Int32:
						Data = binaryReader.ReadInt32();
						break;
					case(byte)StatParamTypes.Int64:
						Data = binaryReader.ReadInt64();
						break;
					case(byte)StatParamTypes.Float:
						Data = binaryReader.ReadDouble();
						break;
					case(byte)StatParamTypes.Utf8string:
						short len = binaryReader.ReadInt16();
						Data = binaryReader.ReadChars(len);
						break;
				}
				return this;
			
			}
		}



	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\Dialogs\AddModifyImageDialog.cs ===
namespace ServerTestFramework.xlast.XLASTAuto.Dialogs
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IAddModifyImageDialogControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IAddModifyImageDialogControls
    {
        TextBox FriendlyNameTextBox  {get;}
        TextBox PathTextBox  {get;}
        Button PathBrowseButton  {get;}
        Button OKButton  {get;}
        Button CancelButton  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: AddModifyImageDialog
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add dialog functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/5/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class AddModifyImageDialog : Dialog, IAddModifyImageDialogControls
    {


#region "Strings"
        public class Strings
        {
            public const string DialogTitle = "xlastui.dll:5:16251:0";  // Add/Modify Image
            public const string PathBrowse = ";...;Win32DialogItemString;xlastui.dll;16251;17462";  // ...
            public const string OK = ";OK;Win32DialogItemString;xlastui.dll;16251;1";  // OK
            public const string Cancel = ";Cancel;Win32DialogItemString;xlastui.dll;16251;2";  // Cancel
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            public const int FriendlyNameTextBox = 0x4434;
            public const int PathTextBox = 0x4435;
            public const int PathBrowseButton = 0x4436;
            public const int OKButton = 0x1;
            public const int CancelButton = 0x2;
        }

#endregion

#region "Member Variables"
        private TextBox m_cachedFriendlyNameTextBox;
        private TextBox m_cachedPathTextBox;
        private Button m_cachedPathBrowseButton;
        private Button m_cachedOKButton;
        private Button m_cachedCancelButton;

        private const int Timeout = 3000;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  TODO: Add a description for your constructor.
        ///  </summary>
        //  <param name="app">Window object owning the dialog.</param>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public AddModifyImageDialog(XenonandLiveAuthoringSubmissionToolApp app) : 
                base(app, Init(app))
        {
            // TODO: Add Constructor logic here. 
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  This function will attempt to find a showing instance of the dialog.
        ///  </summary>
        ///  <returns>The dialog's Window</returns>
        ///  <param name="app">Window owning the dialog.</param>)
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        private static Window Init(XenonandLiveAuthoringSubmissionToolApp app)
        {
            // First check if the dialog is already up.
            Window tempWindow = null;
            try
            {
                tempWindow = new Window(app.GetIntlStr(Strings.DialogTitle), StringMatchSyntax.ExactMatch, WindowClassNames.Alert, StringMatchSyntax.ExactMatch, app.MainWindow, Timeout);
            }
            catch (Exceptions.WindowNotFoundException ex)
            {
                // TODO:  Uncomment the following code and apply the appropriate command for invoking the dialog.
                // 
                // app.DTE.ExecuteCmd(Commands.COMMAND_NAME_HERE);
                // 
                // tempWindow = new Window(Strings.DialogTitle, Utilities.StringMatchSyntax.ExactMatch, strDialogClass, Utilities.StringMatchSyntax.ExactMatch, app.MainWindow, timeOut);
                // if (tempWindow != null)
                // 	return tempWindow;
                // 
                // throw new Window.Exceptions.WindowNotFoundException("Init function could not find or bring up the dialog with a title of " + Strings.DialogTitle + ".");
                // 
            }
            return tempWindow;
        }

#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this dialog
        ///  </summary>
        ///  <value>An interface that groups all of the dialog's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IAddModifyImageDialogControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control FriendlyName
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string FriendlyNameText
        {
            get
            {
                return Controls.FriendlyNameTextBox.Text;
            }
            set
            {
                Controls.FriendlyNameTextBox.Text = value;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control Path
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string PathText
        {
            get
            {
                return Controls.PathTextBox.Text;
            }
            set
            {
                Controls.PathTextBox.Text = value;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the FriendlyNameTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddModifyImageDialogControls.FriendlyNameTextBox
        {
            get
            {
                if ((m_cachedFriendlyNameTextBox == null))
                {
                    m_cachedFriendlyNameTextBox = new TextBox(this, ControlIDs.FriendlyNameTextBox);
                }
                return m_cachedFriendlyNameTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the PathTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddModifyImageDialogControls.PathTextBox
        {
            get
            {
                if ((m_cachedPathTextBox == null))
                {
                    m_cachedPathTextBox = new TextBox(this, ControlIDs.PathTextBox);
                }
                return m_cachedPathTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the PathBrowseButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddModifyImageDialogControls.PathBrowseButton
        {
            get
            {
                if ((m_cachedPathBrowseButton == null))
                {
                    m_cachedPathBrowseButton = new Button(this, ControlIDs.PathBrowseButton);
                }
                return m_cachedPathBrowseButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the OKButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddModifyImageDialogControls.OKButton
        {
            get
            {
                if ((m_cachedOKButton == null))
                {
                    m_cachedOKButton = new Button(this, ControlIDs.OKButton);
                }
                return m_cachedOKButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the CancelButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddModifyImageDialogControls.CancelButton
        {
            get
            {
                if ((m_cachedCancelButton == null))
                {
                    m_cachedCancelButton = new Button(this, ControlIDs.CancelButton);
                }
                return m_cachedCancelButton;
            }
        }

#endregion

#region "Methods"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button PathBrowse
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickPathBrowse()
        {
            Controls.PathBrowseButton.Click();
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button OK
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickOK()
        {
            Controls.OKButton.Click();
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button Cancel
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickCancel()
        {
            Controls.CancelButton.Click();
        }

#endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\XenonandLiveAuthoringSubmissionToolApp.cs ===
namespace ServerTestFramework.xlast.XLASTAuto
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IXenonandLiveAuthoringSubmissionToolAppControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IXenonandLiveAuthoringSubmissionToolAppControls
    {
        
        // TODO: Rename this interface method.  Intuitive name not found by Class Maker Tool.
        Toolbar Toolbar2  {get;}
        
        // TODO: Rename this interface method.  Intuitive name not found by Class Maker Tool.
        StatusBar StatusBar3  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: XenonandLiveAuthoringSubmissionToolApp
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add app. window functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/4/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class XenonandLiveAuthoringSubmissionToolApp : App, IXenonandLiveAuthoringSubmissionToolAppControls
    {


#region "Strings"
        /// -----------------------------------------------------------
        /// <summary>
        ///  Discover the path to the app on this system
        ///  </summary>
        ///  <remarks>TODO: Add code to get the right path.
        ///  <returns>the path to the Apps exe file.</returns>
        /// -----------------------------------------------------------
        private static string GetExePath()
        {
            XenonandLiveAuthoringSubmissionToolApp.ActiveWindow = new Window(WindowType.Active);
            return System.Environment.GetEnvironmentVariable("XEDK") + @"\bin\win32\xlast.exe";
        }
        
        public class Strings
        {
            //public const string DialogTitle = ";Xenon and Live Authoring Submission Tool;Win32DialogItemString;xlastui.dll;1100;1141"; // Xenon and Live Authoring Submission Tool
			public const string DialogTitle = "Xbox 360 and Live Authoring Submission Tool"; // Xenon and Live Authoring Submission Tool
			public const string DialogTitleFileOpened = "Xbox 360 and Live Authoring Submission Tool - "; // followed by filename.xlast
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            
            // TODO: You may wish to rename this ID.  Intuitive name not found by Dialog Class Maker
            public const int Toolbar2 = 0xE800;
            
            // TODO: You may wish to rename this ID.  Intuitive name not found by Dialog Class Maker
            public const int StatusBar3 = 0xE801;
        }

#endregion

#region "Member Variables"
        private Toolbar m_cachedToolbar2;
        private StatusBar m_cachedStatusBar3;

        private const int Timeout = 3000;
        protected internal static Window ActiveWindow;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Creates an XLAST app by executing using the XEDK system variable.
        ///  </summary>
        //  <param/>
        ///  <history>
        /// 	[trevorm] 4/4/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public XenonandLiveAuthoringSubmissionToolApp() : 
                base(XenonandLiveAuthoringSubmissionToolApp.GetExePath())
        {
        }

		/// -----------------------------------------------------------------------------
		///  <summary>
		///  Creates an XLAST app by executing the exePath passed in.
		///  </summary>
		//  <param name="exePath">path to the XLast executable</param>
		///  <history>
		/// 	[trevorm] 4/4/2005 Created
		///  </history>
		/// -----------------------------------------------------------------------------
		public XenonandLiveAuthoringSubmissionToolApp(string exePath) : 
			base(exePath)
		{
		}

		/// -----------------------------------------------------------------------------
		///  <summary>
		///  Attaches to an existing xlast app with the current window handle.
		///  </summary>
		//  <param name="window">Handle to an XLast already created.</param>
		///  <history>
		/// 	[trevorm] 4/4/2005 Created
		///  </history>
		/// -----------------------------------------------------------------------------
		public XenonandLiveAuthoringSubmissionToolApp(Window window) : 
			base(window)
		{
		}

		/// -----------------------------------------------------------------------------
		///  <summary>
		///  Attaches to an existing xlast app with the current xlastFilename open. The dialog title changes when a file is open
		///  </summary>
		/// <param name="path">filename of the XLAST file currently open</param>
		/// <param name="alreadyUp">Boolean specifying if XLAST is already up</param>
		///  <history>
		/// 	[trevorm] 4/4/2005 Created
		///  </history>
		/// -----------------------------------------------------------------------------
		public XenonandLiveAuthoringSubmissionToolApp(string xlastFilename, bool alreadyUp) : 
			base(Init(Strings.DialogTitleFileOpened + xlastFilename, alreadyUp))
		{
		}

		/// -----------------------------------------------------------------------------
		///  <summary>
		///  Attaches to an existing xlast app with no file open. The dialog title changes when a file is open
		///  </summary>
		/// <param name="alreadyUp">Boolean specifying if XLAST is already up</param>
		///  <history>
		/// 	[trevorm] 4/4/2005 Created
		///  </history>
		/// -----------------------------------------------------------------------------
		public XenonandLiveAuthoringSubmissionToolApp(bool alreadyUp) : 
			base(Init(Strings.DialogTitle, alreadyUp))
		{
		}

		///-----------------------------------------------------------------------------
		/// <summary>
		/// Returns the mainwindow of the XLast. If the app is not
		/// already up then it brings up a new instance of the XLAST
		/// </summary>
		/// <param name="path">filename of the XLAST file currently open</param>
		/// <param name="alreadyUp">Boolean specifying if XLAST is already up</param>
		/// <returns>MainWindow of XLAST app</returns>
		/// <history>
		/// 	[trevorm] 4/4/2005 Created
		/// </history>
		///-----------------------------------------------------------------------------
		private static Window Init(string dialogTitle, bool alreadyUp)
		{
			if(alreadyUp == false)
			{
				return new App(XenonandLiveAuthoringSubmissionToolApp.GetExePath()).MainWindow;
			}
			else
			{
				return new Window(dialogTitle, StringMatchSyntax.ExactMatch);
				//return new Window(dialogTitle, StringMatchSyntax.ExactMatch, "Afx:00400000:8:00010013:00000000:001A056D", StringMatchSyntax.ExactMatch, new Desktop(), 6000);
			}
		}


#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this app. window
        ///  </summary>
        ///  <value>An interface that groups all of the app. window's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/4/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IXenonandLiveAuthoringSubmissionToolAppControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the Toolbar2 control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/4/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Toolbar IXenonandLiveAuthoringSubmissionToolAppControls.Toolbar2
        {
            get
            {
                if ((m_cachedToolbar2 == null))
                {
                    m_cachedToolbar2 = new Toolbar(this.MainWindow, ControlIDs.Toolbar2.ToString());
                }
                return m_cachedToolbar2;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the StatusBar3 control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/4/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        StatusBar IXenonandLiveAuthoringSubmissionToolAppControls.StatusBar3
        {
            get
            {
                if ((m_cachedStatusBar3 == null))
                {
                    m_cachedStatusBar3 = new StatusBar(this.MainWindow, ControlIDs.StatusBar3);
                }
                return m_cachedStatusBar3;
            }
        }

#endregion

#region "Functions"
		///-----------------------------------------------------------------------------
		/// <summary>
		/// Closes XLAST app and handles the save dialog if specified to do so
		/// </summary>
		/// <param name="handleSaveAlert">Boolean specifying to handle the save dialog</param>
		/// <param name="timeout">Timeout for the app to close</param>
		/// <history>
		/// 	[trevorm] 4/4/2005 Created
		/// </history>
		///-----------------------------------------------------------------------------
		internal void Quit(bool handleSaveAlert)
		{
			Quit(handleSaveAlert,3000);
		}

		///-----------------------------------------------------------------------------
		/// <summary>
		/// Closes XLAST app and handles the save dialog if specified to do so
		/// </summary>
		/// <param name="handleSaveAlert">Boolean specifying to handle the save dialog</param>
		/// <param name="timeout">Timeout for the app to close</param>
		/// <history>
		/// 	[trevorm] 4/4/2005 Created
		/// </history>
		///-----------------------------------------------------------------------------
		internal void Quit(bool handleSaveAlert, int timeout)
		{
			Alert alert = QuitStart();
			if((alert != null) && (handleSaveAlert == true))
			{
				alert.Controls.NoButton.Click();
			}
	
			Sleeper s = new Sleeper(timeout);
			while( this.IsRunning && (s.IsExpired == false))
			{
				s.Sleep();
			}
			if( this.IsRunning && (s.IsExpired == false))
			{
				throw new Maui.Core.App.Exceptions.CantQuitAppException("XLAST is still running after timeout has expired");
			}
		}

		///-----------------------------------------------------------------------------
		/// <summary>
		/// Initiate app close and returns any dialog that pops up
		/// </summary>
		/// <history>
		/// 	[trevorm] 4/4/2005 Created
		/// </history>
		///-----------------------------------------------------------------------------
		private Alert QuitStart()
		{
			Sleeper quitSleeper = new Sleeper(5000);
			Alert objAlert = null;
			try
			{
				this.SendKeys("%{F4}");
			}
			catch (Window.Exceptions.WindowNotFoundException)
			{
				// We expect this exception since we've shut it down
			}


			while ((objAlert == null) && (quitSleeper.IsNotExpired) && this.IsRunning)
			{
				try
				{
					objAlert = Alert.HandleAlert("", AlertAction.NoAction, this.MainWindow, 200);
				}
				catch (Window.Exceptions.WindowNotFoundException)
				{
					// We expect this exception since we've shut it down
				}
				catch (Window.Exceptions.InvalidHWndException)
				{
					// We expect this exception since we've shut it down
				}

				quitSleeper.Sleep();
			}

			if (objAlert != null)
				return objAlert;

			if (this.IsRunning)
				throw new Exceptions.CantQuitAppException("Closing app timed out. Consider using KillProcess instead of Quit.");

			return null;
		}

		/// <summary>
		///		Launches the New Project Wizard and returns a handle to the dialog.
		/// </summary>
		/// <history>
		/// 	[trevorm] 4/5/2005 Created
		/// </history>
		public Dialogs.NewGameConfigurationProjectWizardDialog LaunchNewProjectWizard()
		{
			Dialogs.NewGameConfigurationProjectWizardDialog wizard;
			Commands.FileNew.Execute(this);

			Dialogs.CreateaNewProjectDialog project = new Dialogs.CreateaNewProjectDialog(this);
			project.Controls.ChooseAProjectTypeListBox.SelectItem(Dialogs.CreateaNewProjectDialog.Strings.GameConfigurationPackage, false);
			project.ClickOK();

			wizard = new XLASTAuto.Dialogs.NewGameConfigurationProjectWizardDialog(this);
			return wizard;
		}

		/// <summary>
		///		Launches the New Project Wizard and returns a handle to the dialog.
		/// </summary>
		/// <history>
		/// 	[trevorm] 4/5/2005 Created
		/// </history>
		public void CreateNewProject(string name, string dir, string titleID, string gamename, string locale)
		{
			string sError = "";
			Dialogs.NewGameConfigurationProjectWizardDialog wizard = LaunchNewProjectWizard();
			wizard.ClickNext();

			wizard.Controls.GameConfigurationProjectNameTextBox.Text = name;
			wizard.Controls.ProjectDirectoryTextBox.Text = dir;
			wizard.Controls.TitleIDOfGameTextBox.Text = titleID;
			wizard.Controls.NameOfGameTextBox.Text = gamename;
			wizard.Controls.DefaultLocaleComboBox.SelectByText(locale);
			wizard.ClickNext();

			try
			{
				sError = wizard.Controls.ErrorStringStaticControl.Text;
			}
			catch(System.Exception)
			{
				// we shouldn't see this control unless there was an error
			}
			if(sError.Length > 0)
				throw new System.ArgumentException(sError);

			wizard.ClickFinish();
		}

		#endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\Dialogs\AddNewContextDialog.cs ===
namespace ServerTestFramework.xlast.XLASTAuto.Dialogs
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IAddNewContextDialogControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IAddNewContextDialogControls
    {
        TextBox NameTextBox  {get;}
        Button OKButton  {get;}
        Button CancelButton  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: AddNewContextDialog
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add dialog functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/5/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class AddNewContextDialog : Dialog, IAddNewContextDialogControls
    {


#region "Strings"
        public class Strings
        {
			public const string DialogTitle = ";Add New Context;Win32String;xlastui.dll;16812";
            public const string OK = ";OK;Win32DialogItemString;xlastui.dll;16195;1";  // OK
            public const string Cancel = ";Cancel;Win32DialogItemString;xlastui.dll;16195;2";  // Cancel
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            public const int NameTextBox = 0x41A0;
            public const int OKButton = 0x1;
            public const int CancelButton = 0x2;
        }

#endregion

#region "Member Variables"
        private TextBox m_cachedNameTextBox;
        private Button m_cachedOKButton;
        private Button m_cachedCancelButton;

        private const int Timeout = 3000;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  TODO: Add a description for your constructor.
        ///  </summary>
        //  <param name="app">XenonandLiveAuthoringSubmissionToolApp object owning the dialog.</param>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public AddNewContextDialog(XenonandLiveAuthoringSubmissionToolApp app) : 
                base(app, Init(app))
        {
            // TODO: Add Constructor logic here. 
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  This function will attempt to find a showing instance of the dialog.
        ///  </summary>
        ///  <returns>The dialog's Window</returns>
        ///  <param name="app">XenonandLiveAuthoringSubmissionToolApp owning the dialog.</param>)
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        private static Window Init(XenonandLiveAuthoringSubmissionToolApp app)
        {
            // First check if the dialog is already up.
            Window tempWindow = null;
            try
            {
                tempWindow = new Window(app.GetIntlStr(Strings.DialogTitle), StringMatchSyntax.ExactMatch, WindowClassNames.Alert, StringMatchSyntax.ExactMatch, app.MainWindow, Timeout);
            }
            catch (Exceptions.WindowNotFoundException ex)
            {
                // TODO:  Uncomment the following code and apply the appropriate command for invoking the dialog.
                // 
                // app.DTE.ExecuteCmd(Commands.COMMAND_NAME_HERE);
                // 
                // tempWindow = new Window(Strings.DialogTitle, Utilities.StringMatchSyntax.ExactMatch, strDialogClass, Utilities.StringMatchSyntax.ExactMatch, app.MainWindow, timeOut);
                // if (tempWindow != null)
                // 	return tempWindow;
                // 
                // throw new Window.Exceptions.WindowNotFoundException("Init function could not find or bring up the dialog with a title of " + Strings.DialogTitle + ".");
                // 
            }
            return tempWindow;
        }

#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this dialog
        ///  </summary>
        ///  <value>An interface that groups all of the dialog's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IAddNewContextDialogControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control Name
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string NameText
        {
            get
            {
                return Controls.NameTextBox.Text;
            }
            set
            {
                Controls.NameTextBox.Text = value;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the NameTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddNewContextDialogControls.NameTextBox
        {
            get
            {
                if ((m_cachedNameTextBox == null))
                {
                    m_cachedNameTextBox = new TextBox(this, ControlIDs.NameTextBox);
                }
                return m_cachedNameTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the OKButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewContextDialogControls.OKButton
        {
            get
            {
                if ((m_cachedOKButton == null))
                {
                    m_cachedOKButton = new Button(this, ControlIDs.OKButton);
                }
                return m_cachedOKButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the CancelButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewContextDialogControls.CancelButton
        {
            get
            {
                if ((m_cachedCancelButton == null))
                {
                    m_cachedCancelButton = new Button(this, ControlIDs.CancelButton);
                }
                return m_cachedCancelButton;
            }
        }

#endregion

#region "Methods"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button OK
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickOK()
        {
            Controls.OKButton.Click();
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button Cancel
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickCancel()
        {
            Controls.CancelButton.Click();
        }

#endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\Dialogs\AddNewAchievementDialog.cs ===
namespace ServerTestFramework.xlast.XLASTAuto.Dialogs
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IAddNewAchievementDialogControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IAddNewAchievementDialogControls
    {
        TextBox NameTextBox  {get;}
        Button OKButton  {get;}
        Button CancelButton  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: AddNewAchievementDialog
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add dialog functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/5/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class AddNewAchievementDialog : Dialog, IAddNewAchievementDialogControls
    {


#region "Strings"
        public class Strings
        {
			public const string DialogTitle = ";Add New Achievement;Win32String;xlastui.dll;16813";
            public const string OK = ";OK;Win32DialogItemString;xlastui.dll;16195;1";  // OK
            public const string Cancel = ";Cancel;Win32DialogItemString;xlastui.dll;16195;2";  // Cancel
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            public const int NameTextBox = 0x41A0;
            public const int OKButton = 0x1;
            public const int CancelButton = 0x2;
        }

#endregion

#region "Member Variables"
        private TextBox m_cachedNameTextBox;
        private Button m_cachedOKButton;
        private Button m_cachedCancelButton;

        private const int Timeout = 3000;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  TODO: Add a description for your constructor.
        ///  </summary>
        //  <param name="app">XenonandLiveAuthoringSubmissionToolApp object owning the dialog.</param>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public AddNewAchievementDialog(XenonandLiveAuthoringSubmissionToolApp app) : 
                base(app, Init(app))
        {
            // TODO: Add Constructor logic here. 
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  This function will attempt to find a showing instance of the dialog.
        ///  </summary>
        ///  <returns>The dialog's Window</returns>
        ///  <param name="app">XenonandLiveAuthoringSubmissionToolApp owning the dialog.</param>)
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        private static Window Init(XenonandLiveAuthoringSubmissionToolApp app)
        {
            // First check if the dialog is already up.
            Window tempWindow = null;
            try
            {
                tempWindow = new Window(app.GetIntlStr(Strings.DialogTitle), StringMatchSyntax.ExactMatch, WindowClassNames.Alert, StringMatchSyntax.ExactMatch, app.MainWindow, Timeout);
            }
            catch (Exceptions.WindowNotFoundException ex)
            {
                // TODO:  Uncomment the following code and apply the appropriate command for invoking the dialog.
                // 
                // app.DTE.ExecuteCmd(Commands.COMMAND_NAME_HERE);
                // 
                // tempWindow = new Window(Strings.DialogTitle, Utilities.StringMatchSyntax.ExactMatch, strDialogClass, Utilities.StringMatchSyntax.ExactMatch, app.MainWindow, timeOut);
                // if (tempWindow != null)
                // 	return tempWindow;
                // 
                // throw new Window.Exceptions.WindowNotFoundException("Init function could not find or bring up the dialog with a title of " + Strings.DialogTitle + ".");
                // 
            }
            return tempWindow;
        }

#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this dialog
        ///  </summary>
        ///  <value>An interface that groups all of the dialog's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IAddNewAchievementDialogControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control Name
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string NameText
        {
            get
            {
                return Controls.NameTextBox.Text;
            }
            set
            {
                Controls.NameTextBox.Text = value;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the NameTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddNewAchievementDialogControls.NameTextBox
        {
            get
            {
                if ((m_cachedNameTextBox == null))
                {
                    m_cachedNameTextBox = new TextBox(this, ControlIDs.NameTextBox);
                }
                return m_cachedNameTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the OKButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewAchievementDialogControls.OKButton
        {
            get
            {
                if ((m_cachedOKButton == null))
                {
                    m_cachedOKButton = new Button(this, ControlIDs.OKButton);
                }
                return m_cachedOKButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the CancelButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewAchievementDialogControls.CancelButton
        {
            get
            {
                if ((m_cachedCancelButton == null))
                {
                    m_cachedCancelButton = new Button(this, ControlIDs.CancelButton);
                }
                return m_cachedCancelButton;
            }
        }

#endregion

#region "Methods"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button OK
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickOK()
        {
            Controls.OKButton.Click();
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button Cancel
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickCancel()
        {
            Controls.CancelButton.Click();
        }

#endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\Dialogs\AddNewLeaderboardColumnStringDialog.cs ===
namespace ServerTestFramework.xlast.XLASTAuto.Dialogs
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IAddNewLeaderboardColumnStringDialogControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IAddNewLeaderboardColumnStringDialogControls
    {
        TextBox NameTextBox  {get;}
        Button OKButton  {get;}
        Button CancelButton  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: AddNewLeaderboardColumnStringDialog
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add dialog functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/5/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class AddNewLeaderboardColumnStringDialog : Dialog, IAddNewLeaderboardColumnStringDialogControls
    {


#region "Strings"
        // TODO: Remove unused definitions.
        public class Strings
        {
			public const string DialogTitle = ";Add New Leaderboard Column;Win32String;xlastui.dll;16816";
            public const string OK = ";OK;Win32DialogItemString;xlastui.dll;16195;1";  // OK
            public const string Cancel = ";Cancel;Win32DialogItemString;xlastui.dll;16195;2";  // Cancel
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            public const int NameTextBox = 0x41A0;
            public const int OKButton = 0x1;
            public const int CancelButton = 0x2;
        }

#endregion

#region "Member Variables"
        private TextBox m_cachedNameTextBox;
        private Button m_cachedOKButton;
        private Button m_cachedCancelButton;

        private const int Timeout = 3000;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  TODO: Add a description for your constructor.
        ///  </summary>
        //  <param name="app">XenonandLiveAuthoringSubmissionToolApp object owning the dialog.</param>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public AddNewLeaderboardColumnStringDialog(XenonandLiveAuthoringSubmissionToolApp app) : 
                base(app, Init(app))
        {
            // TODO: Add Constructor logic here. 
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  This function will attempt to find a showing instance of the dialog.
        ///  </summary>
        ///  <returns>The dialog's Window</returns>
        ///  <param name="app">XenonandLiveAuthoringSubmissionToolApp owning the dialog.</param>)
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        private static Window Init(XenonandLiveAuthoringSubmissionToolApp app)
        {
            // First check if the dialog is already up.
            Window tempWindow = null;
            try
            {
                tempWindow = new Window(app.GetIntlStr(Strings.DialogTitle), StringMatchSyntax.ExactMatch, WindowClassNames.Alert, StringMatchSyntax.ExactMatch, app.MainWindow, Timeout);
            }
            catch (Exceptions.WindowNotFoundException ex)
            {
                // TODO:  Uncomment the following code and apply the appropriate command for invoking the dialog.
                // 
                // app.DTE.ExecuteCmd(Commands.COMMAND_NAME_HERE);
                // 
                // tempWindow = new Window(Strings.DialogTitle, Utilities.StringMatchSyntax.ExactMatch, strDialogClass, Utilities.StringMatchSyntax.ExactMatch, app.MainWindow, timeOut);
                // if (tempWindow != null)
                // 	return tempWindow;
                // 
                // throw new Window.Exceptions.WindowNotFoundException("Init function could not find or bring up the dialog with a title of " + Strings.DialogTitle + ".");
                // 
            }
            return tempWindow;
        }

#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this dialog
        ///  </summary>
        ///  <value>An interface that groups all of the dialog's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IAddNewLeaderboardColumnStringDialogControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control Name
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string NameText
        {
            get
            {
                return Controls.NameTextBox.Text;
            }
            set
            {
                Controls.NameTextBox.Text = value;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the NameTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddNewLeaderboardColumnStringDialogControls.NameTextBox
        {
            get
            {
                if ((m_cachedNameTextBox == null))
                {
                    m_cachedNameTextBox = new TextBox(this, ControlIDs.NameTextBox);
                }
                return m_cachedNameTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the OKButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewLeaderboardColumnStringDialogControls.OKButton
        {
            get
            {
                if ((m_cachedOKButton == null))
                {
                    m_cachedOKButton = new Button(this, ControlIDs.OKButton);
                }
                return m_cachedOKButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the CancelButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewLeaderboardColumnStringDialogControls.CancelButton
        {
            get
            {
                if ((m_cachedCancelButton == null))
                {
                    m_cachedCancelButton = new Button(this, ControlIDs.CancelButton);
                }
                return m_cachedCancelButton;
            }
        }

#endregion

#region "Methods"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button OK
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickOK()
        {
            Controls.OKButton.Click();
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to click on button Cancel
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual void ClickCancel()
        {
            Controls.CancelButton.Click();
        }

#endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XLASTAuto\Dialogs\AddNewLeaderboardDialog.cs ===
namespace ServerTestFramework.xlast.XLASTAuto.Dialogs
{


    using Maui.Core;
    using Maui.Core.WinControls;
    using Maui.Core.Utilities;
    using System.ComponentModel;


#region "IAddNewLeaderboardDialogControls interface definition"
    
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface IAddNewLeaderboardDialogControls
    {
        TextBox NameTextBox  {get;}
        Button OKButton  {get;}
        Button CancelButton  {get;}
    }

#endregion

    /// -----------------------------------------------------------------------------
    /// Project		: Maui
    /// Class		: AddNewLeaderboardDialog
    ///  Copyright (C) 2002, Microsoft Corporation
    /// -----------------------------------------------------------------------------
    ///  <summary>
    ///  TODO: Add dialog functionality description here.
    ///  </summary>
    ///  <history>
    /// 	[trevorm] 4/5/2005 Created
    ///  </history>
    /// -----------------------------------------------------------------------------
    public class AddNewLeaderboardDialog : Dialog, IAddNewLeaderboardDialogControls
    {


#region "Strings"
        public class Strings
        {
			public const string DialogTitle = ";Add New Leaderboard;Win32String;xlastui.dll;16815";
            public const string OK = ";OK;Win32DialogItemString;xlastui.dll;16195;1";  // OK
            public const string Cancel = ";Cancel;Win32DialogItemString;xlastui.dll;16195;2";  // Cancel
        }

#endregion

#region "Control IDs"
        public class ControlIDs
        {
            public const int NameTextBox = 0x41A0;
            public const int OKButton = 0x1;
            public const int CancelButton = 0x2;
        }

#endregion

#region "Member Variables"
        private TextBox m_cachedNameTextBox;
        private Button m_cachedOKButton;
        private Button m_cachedCancelButton;

        private const int Timeout = 3000;

#endregion

#region "Constructor and Init function"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  TODO: Add a description for your constructor.
        ///  </summary>
        //  <param name="app">XenonandLiveAuthoringSubmissionToolApp object owning the dialog.</param>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public AddNewLeaderboardDialog(XenonandLiveAuthoringSubmissionToolApp app) : 
                base(app, Init(app))
        {
            // TODO: Add Constructor logic here. 
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  This function will attempt to find a showing instance of the dialog.
        ///  </summary>
        ///  <returns>The dialog's Window</returns>
        ///  <param name="app">XenonandLiveAuthoringSubmissionToolApp owning the dialog.</param>)
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        private static Window Init(XenonandLiveAuthoringSubmissionToolApp app)
        {
            // First check if the dialog is already up.
            Window tempWindow = null;
            try
            {
                tempWindow = new Window(app.GetIntlStr(Strings.DialogTitle), StringMatchSyntax.ExactMatch, WindowClassNames.Alert, StringMatchSyntax.ExactMatch, app.MainWindow, Timeout);
            }
            catch (Exceptions.WindowNotFoundException ex)
            {
                // TODO:  Uncomment the following code and apply the appropriate command for invoking the dialog.
                // 
                // app.DTE.ExecuteCmd(Commands.COMMAND_NAME_HERE);
                // 
                // tempWindow = new Window(Strings.DialogTitle, Utilities.StringMatchSyntax.ExactMatch, strDialogClass, Utilities.StringMatchSyntax.ExactMatch, app.MainWindow, timeOut);
                // if (tempWindow != null)
                // 	return tempWindow;
                // 
                // throw new Window.Exceptions.WindowNotFoundException("Init function could not find or bring up the dialog with a title of " + Strings.DialogTitle + ".");
                // 
            }
            return tempWindow;
        }

#endregion

#region "Properties"
        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the raw controls for this dialog
        ///  </summary>
        ///  <value>An interface that groups all of the dialog's control properties together</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual IAddNewLeaderboardDialogControls Controls
        {
            get
            {
                return this;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Routine to set/get the text in control Name
        ///  </summary>
        ///  <value>TODO: specify the value</value>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        public virtual string NameText
        {
            get
            {
                return Controls.NameTextBox.Text;
            }
            set
            {
                Controls.NameTextBox.Text = value;
            }
        }


        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the NameTextBox control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        TextBox IAddNewLeaderboardDialogControls.NameTextBox
        {
            get
            {
                if ((m_cachedNameTextBox == null))
                {
                    m_cachedNameTextBox = new TextBox(this, ControlIDs.NameTextBox);
                }
                return m_cachedNameTextBox;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the OKButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewLeaderboardDialogControls.OKButton
        {
            get
            {
                if ((m_cachedOKButton == null))
                {
                    m_cachedOKButton = new Button(this, ControlIDs.OKButton);
                }
                return m_cachedOKButton;
            }
        }

        /// -----------------------------------------------------------------------------
        ///  <summary>
        ///  Exposes access to the CancelButton control
        ///  </summary>
        ///  <history>
        /// 	[trevorm] 4/5/2005 Created
        ///  </history>
        /// -----------------------------------------------------------------------------
        Button IAddNewLeaderboardDialogControls.CancelButton
        {
            get
            {
                if ((m_cachedCancelButton == null))
                {
                    m_cachedCancelButton = new Button(this, ControlIDs.CancelButton);
                }
                return m_cachedCancelButton;
            }
        }

#endregion

#region "Methods"
        /// -------------------------------------------------