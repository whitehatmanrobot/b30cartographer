****
 * verify that no expressions in comments are added. *
 *****************************************************/
void CAutoPaneIDETest::VerifyExpressionsInCommentsNotAdded(void)
	{
	LogTestHeader("VerifyExpressionsInCommentsNotAdded");
	EXPECT_TRUE(src.Find("int before_comments = 0;"));
	EXPECT_TRUE(dbg.SetNextStatement());
	// next few lines are commented symbols, then more code.
	EXPECT_TRUE(dbg.StepOver());
	uivar.Activate();
	EXPECT_SUCCESS(uivar.GetAllFields(expr_info_actual, 1, ROW_ALL));
	FillExprInfo(expr_info_expected[0], NOT_EXPANDABLE, "int", "before_comments", "0");
	EXPECT_TRUE(ExprInfoIs(expr_info_actual, expr_info_expected, 1));
	RestoreFocusToSrcWnd();
	}


/****************************************************
 * verify that duplicate expressions are not added. *
 ****************************************************/
void CAutoPaneIDETest::VerifyDupExpressionsNotAdded(void)
	{
	LogTestHeader("VerifyDupExpressionsNotAdded");
	EXPECT_TRUE(src.Find("int before_comments = 0;"));
	EXPECT_TRUE(dbg.SetNextStatement());
	// next few lines are commented symbols, then more code.
	EXPECT_TRUE(dbg.StepOver());
	uivar.Activate();
	EXPECT_SUCCESS(uivar.GetAllFields(expr_info_actual, 1, ROW_ALL));
	FillExprInfo(expr_info_expected[0], NOT_EXPANDABLE, "int", "before_comments", "0");
	EXPECT_TRUE(ExprInfoIs(expr_info_actual, expr_info_expected, 1));
	RestoreFocusToSrcWnd();
	}


/***********************************************************
 * verify that no expressions with error values are added. *
 ***********************************************************/
void CAutoPaneIDETest::VerifyExpressionsWithErrorValsNotAdded(void)
	{
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\tmplates\tmplcase.h ===
///////////////////////////////////////////////////////////////////////////////
//	TMPLCASE.H
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CTemplatesIDETest Class
//

#ifndef __TMPLCASE_H__
#define __TMPLCASE_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\dbgset.h"
#include "tmplsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CTemplatesIDETest class

class CTemplatesIDETest : public CDebugTestSet
	
	{
	DECLARE_TEST(CTemplatesIDETest, CTemplatesSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);

	// Tests
	public:
		void StepIntoAndOutOfTemplateFunction(void);
		void StepOverTemplateFunction(void);
		void StepToCursorInTemplateFunction(void);
		void SetBreakpointOnLineInTemplateFunctionWhileDebugging(void);
		void SetBreakpointOnLineInTemplateFunctionWhileNotDebugging(void);
		void VerifyTemplateParameterOnStack(void);
		void GoToDisassemblyFromWithinTemplateFunction(void);
		void StepIntoSpecificTemplateFunction(void);

		void SetNextStatementInTemplateFunction(void);
		void StepToCursorInTemplateFunctionInStack(void);
		void EvaluateSTLObjectWithLongName(void);
		void StepToCursorInTemplateFunctionToStartDebugging(void);
		void HitBreakpointOnAmbiguousTemplateFunction(void);
		void HitBreakpointOnNonAmbiguousTemplateFunction(void);
		void DisableBreakpointInTemplateFunctionAndVerifyNotHit(void);
		void ToggleOffBreakpointInTemplateFunctionAndVerifyNotHit(void);
	};

#endif //__TMPLCASE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\tmplates\tmplcase.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	TMPLCASE.CPP
//											 
//	Created by :			
//		VCBU QA		
//
//	Description :								 
//		Implementation of the CTemplatesIDETest Class

#include "stdafx.h"
#include "tmplcase.h"	

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
IMPLEMENT_TEST(CTemplatesIDETest, CDebugTestSet, "Templates", -1, CTemplatesSubSuite)
									   
												 
void CTemplatesIDETest::PreRun(void)
{
	// call the base class
	CTest::PreRun();
}


void CTemplatesIDETest::Run(void)
	
{
	/******************
	 * INITIALIZATION *
	 ******************/

	if(!InitProject("tmplates\\tmplates"))
	{
		m_pLog->RecordInfo("ERROR: could not init tmplates project");
		return;
	}

	EXPECT_TRUE(dbg.StepInto(2));

	/*********
	 * TESTS *
	 *********/
	StepIntoAndOutOfTemplateFunction();
	StepOverTemplateFunction();
	StepToCursorInTemplateFunction();
	SetBreakpointOnLineInTemplateFunctionWhileDebugging();
	SetBreakpointOnLineInTemplateFunctionWhileNotDebugging();
	VerifyTemplateParameterOnStack();
	GoToDisassemblyFromWithinTemplateFunction();
	StepIntoSpecificTemplateFunction();
	SetNextStatementInTemplateFunction();
	StepToCursorInTemplateFunctionInStack();
	StepToCursorInTemplateFunctionToStartDebugging();	
	HitBreakpointOnNonAmbiguousTemplateFunction();
	HitBreakpointOnAmbiguousTemplateFunction();
	DisableBreakpointInTemplateFunctionAndVerifyNotHit();
	ToggleOffBreakpointInTemplateFunctionAndVerifyNotHit();
	EvaluateSTLObjectWithLongName();
//end of tests
	EXPECT_TRUE(dbg.Go(NULL, NULL, NULL, ASSUME_NORMAL_TERMINATION));
}


void CTemplatesIDETest::StepIntoAndOutOfTemplateFunction(void)
{
	
	LogTestHeader("StepIntoAndOutOfTemplateFunction");
	EXPECT_TRUE(src.Find("intObject.func(1);"));
	EXPECT_TRUE(dbg.SetNextStatement());

	// step into and verify source, stack.
	EXPECT_TRUE(dbg.StepInto(1, NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<int>::func(int 1)"));
	
	// step out of and verify source, stack.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //1", "WinMain("));
}


void CTemplatesIDETest::StepOverTemplateFunction(void)
{
	LogTestHeader("StepOverTemplateFunction");
	EXPECT_TRUE(src.Find("intObject.func(2);"));
	EXPECT_TRUE(dbg.SetNextStatement());
	// step over and verify source, stack
	EXPECT_TRUE(dbg.StepOver(1, NULL, "while(0); //2", "WinMain("));
}


void CTemplatesIDETest::StepToCursorInTemplateFunction(void)
{
	LogTestHeader("StepToCursorInTemplateFunction");
	EXPECT_TRUE(src.Find("charObject.func('b');"));
	EXPECT_TRUE(dbg.SetNextStatement());
	// step to cursor and resolve source line ambiguity
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	EXPECT_TRUE(dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT));
	// choose the second (<char>) entry to resolve the ambiguity 
	EXPECT_TRUE(dbg.ResolveSourceLineAmbiguity(2));
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	// verity the line and function
	EXPECT_TRUE(dbg.CurrentLineIs("// first line of template function 'func'"));
	EXPECT_TRUE(stk.CurrentFunctionIs("SomeReallyLongSymbolName<char>::func(char 98)"));
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //b", "WinMain("));
}


void CTemplatesIDETest::SetBreakpointOnLineInTemplateFunctionWhileDebugging(void)

{
	LogTestHeader("SetBreakpointOnLineInTemplateFunctionWhileDebugging");
	// set a bp within a template function
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	EXPECT_VALIDBP(bps.SetBreakpoint());
	// set ip to function a place before all instances of the template.
	EXPECT_TRUE(src.Find("intObject.func(1);"));
	EXPECT_TRUE(dbg.SetNextStatement());

	// verify that the bp is hit for each instance of the template
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<int>::func(int 1)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<int>::func(int 2)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 98)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 99)"));
	
	// step out to WinMain and clear breakpoint to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //c", "WinMain("));
	EXPECT_TRUE(bps.ClearAllBreakpoints());
}


void CTemplatesIDETest::SetBreakpointOnLineInTemplateFunctionWhileNotDebugging(void)

{
	LogTestHeader("SetBreakpointOnLineInTemplateFunctionWhileNotDebugging");
	EXPECT_TRUE(dbg.StopDebugging());
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	// set a bp within a template function
	EXPECT_VALIDBP(bps.SetBreakpoint());
	
	// verify that the bp is hit for each instance of the template
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<int>::func(int 1)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<int>::func(int 2)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 98)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 99)"));
	
	// step out to WinMain and clear breakpoint to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //c", "WinMain("));
	EXPECT_TRUE(bps.ClearAllBreakpoints());
}


void CTemplatesIDETest::VerifyTemplateParameterOnStack(void)

{
	LogTestHeader("VerifyTemplateParameterOnStack");
	EXPECT_TRUE(src.Find("FuncWithTemplateClassParam(intObject);"));
	EXPECT_TRUE(dbg.SetNextStatement());
	
	// step into and verify stack.
	EXPECT_TRUE(dbg.StepInto(1, NULL, 
		"// first line of FuncWithTemplateClassParam",
		"FuncWithTemplateClassParam(SomeReallyLongSymbolName<int> {...})"));
	
	// step out to WinMain to set up next test.
	CString strline;
	Frame frm( stk.GetFunction(1) );
	LOG->Comment("Frame no 1: %s",frm);
	frm.GetLineNumber(strline);
	strline = "@" + strline;
	LOG->Comment("Line to go from frame no 1: %s",strline);
	EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, "WinMain("));
	//EXPECT_TRUE(dbg.AtLine("while(0); //intObject") );
	EXPECT_TRUE(dbg.VerifyCurrentLine(strline) );
}


void CTemplatesIDETest::GoToDisassemblyFromWithinTemplateFunction(void)

{
	LogTestHeader("GoToDisassemblyFromWithinTemplateFunction");
	EXPECT_TRUE(src.Find("intObject.func(1);"));
	src.AttachActiveEditor();
	EXPECT_TRUE(dbg.SetNextStatement());

	// step into template function and go to disassembly (will need to resolve ambiguity).
	EXPECT_TRUE(dbg.StepInto(1, NULL,
		"// first line of template function 'func'",
		"SomeReallyLongSymbolName<int>::func(int 1)"));
//	EXPECT_TRUE(dbg.SetSteppingMode(ASM)); //Goto DAM from menu works in IP context - not ambiguous
	src.TypeTextAtCursor("{HOME}+{F10}",FALSE);
	Sleep(2000);
	MST.WMenu("Go To Disassembly"); //only Goto DAM from source context is ambiguous
	// choose the first (<int>) entry to resolve the ambiguity. 
	EXPECT_TRUE(dbg.ResolveSourceLineAmbiguity(1));
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	// restore source mode
	EXPECT_TRUE(dbg.SetSteppingMode(SRC));
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //1", "WinMain("));
}



void CTemplatesIDETest::StepIntoSpecificTemplateFunction(void)
{
	int nline;
	LogTestHeader("StepIntoSpecific Member of TemplateClass");
	
	EXPECT_TRUE(src.Find("charObject.func('c');"));
	src.AttachActiveEditor();
	EXPECT_TRUE(dbg.SetNextStatement());
	src.TypeTextAtCursor("{Home}",FALSE);
	nline = UIWB.GetEditorCurPos(GECP_LINE); /*GetLineNumber()*/
	EXPECT_TRUE(src.Find("func")); //only function name shld be highlighted
	EXPECT_TRUE(nline == UIWB.GetEditorCurPos(GECP_LINE) ); //line # didn't change
	src.TypeTextAtCursor("+{F10}", FALSE);Sleep(2000);
	MST.WMenu("Ste&p into SomeReallyLongSymbolName<char>::func");
	//no ambiguity here
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	EXPECT_TRUE(dbg.CurrentLineIs("{ // first line of template function 'func'") );
	// step out to WinMain to set up next test.
	EXPECT_TRUE( (nline=stk.NavigateStack(1)) > 0); //check where we are going to step out
	CString strnumber;strnumber.Format("@%d",nline);
	EXPECT_TRUE(dbg.StepOut(1, NULL, strnumber));


	LogTestHeader("StepIntoSpecific Specialization of TemplateFunction");
	
	EXPECT_TRUE(src.Find("globaltemplatefunc(global_float"));
	EXPECT_TRUE(dbg.SetNextStatement());
	src.TypeTextAtCursor("{Home}",FALSE);
	nline = UIWB.GetEditorCurPos(GECP_LINE); /*GetLineNumber()*/
	EXPECT_TRUE(src.Find("globaltemplatefunc")); //only function name shld be highlighted
	EXPECT_TRUE(nline == UIWB.GetEditorCurPos(GECP_LINE) ); //line # didn't change
	src.TypeTextAtCursor("+{F10}", FALSE);Sleep(2000);
	MST.WMenu("Ste&p into globaltemplatefunc");
	//no ambiguity here
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	EXPECT_TRUE(dbg.CurrentLineIs("{ // first line of float specialization of globaltemplatefunc") );
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "globaltemplatefunc(global_float"));
}

void CTemplatesIDETest::SetNextStatementInTemplateFunction(void)

{
	LogTestHeader("SetNextStatementInTemplateFunction");
	EXPECT_TRUE(src.Find("intObject.func(1);"));
	EXPECT_TRUE(dbg.SetNextStatement());
	
	// step into and verify source, stack.
	EXPECT_TRUE(dbg.StepInto(2, NULL,
		"m_Type = var;", 
		"SomeReallyLongSymbolName<int>::func(int 1)"));

	// set next statement and verify source and stack
	EXPECT_TRUE(src.Find("in template function 'func'"));
	EXPECT_TRUE(dbg.SetNextStatement());
	EXPECT_TRUE(dbg.ResolveSourceLineAmbiguity(1));
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	EXPECT_TRUE(dbg.CurrentLineIs("// in template function 'func'"));
	EXPECT_TRUE(stk.CurrentFunctionIs("SomeReallyLongSymbolName<int>::func(int 1)"));
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //1", "WinMain("));
}


void CTemplatesIDETest::StepToCursorInTemplateFunctionInStack(void)
{
	LogTestHeader("StepToCursorInTemplateFunctionInStack");
	EXPECT_TRUE(src.Find("intObject.func(2);"));
	EXPECT_TRUE(dbg.SetNextStatement());

	// run to a function that was called by a template function
	EXPECT_TRUE(src.Find("void globalfunc(void){}"));
	EXPECT_TRUE(dbg.StepToCursor());
	// navigate to the template function
	EXPECT_TRUE(stk.NavigateStack("SomeReallyLongSymbolName<int>::func(int 2)")>0);
	EXPECT_TRUE(stk.NavigateStack(0)>0); //return to EIP
	// run to the template function in the stack, verify source and stack.
	// no ambiguity here
	EXPECT_TRUE(stk.RunToFrame("SomeReallyLongSymbolName<int>::func(int 2)", 0));
	EXPECT_TRUE(dbg.CurrentLineIs("// in template function 'func'"));
	EXPECT_TRUE(stk.CurrentFunctionIs("SomeReallyLongSymbolName<int>::func(int 2)"));
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //2", "WinMain("));
}


void CTemplatesIDETest::StepToCursorInTemplateFunctionToStartDebugging(void)
{
	LogTestHeader("StepToCursorInTemplateFunctionToStartDebugging");
	EXPECT_TRUE(dbg.StopDebugging());
	// step to cursor into the template function to start debugging..
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	EXPECT_TRUE(dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT));
	// choose the second (<char>) entry to resolve the ambiguity 
	EXPECT_TRUE(dbg.ResolveSourceLineAmbiguity(2));
	EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
	// verity the line and function
	EXPECT_TRUE(dbg.CurrentLineIs("// first line of template function 'func'"));
	EXPECT_TRUE(stk.CurrentFunctionIs("SomeReallyLongSymbolName<char>::func(char 98)"));
	// step out to WinMain to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //b", "WinMain("));
}


void CTemplatesIDETest::HitBreakpointOnNonAmbiguousTemplateFunction(void)

{
	LogTestHeader("HitBreakpointOnNonAmbiguousTemplateFunction");
	// set a bp on a template function
	EXPECT_VALIDBP(bps.SetBreakpoint("globaltemplatefunc(int)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of globaltemplatefunc", 
		"globaltemplatefunc(int 1)"));
	
	// step out to WinMain to set up next test.
	CString strline;
	Frame frm( stk.GetFunction(1) );
	LOG->Comment("Frame no 1: %s",frm);
	frm.GetLineNumber(strline);
	strline = "@" + strline;
	LOG->Comment("Line to go from frame no 1: %s",strline);
	EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, "WinMain("));
	//EXPECT_TRUE(dbg.AtLine("while(0); //::1") );
	EXPECT_TRUE(dbg.VerifyCurrentLine(strline) );

	EXPECT_TRUE(bps.ClearAllBreakpoints());
}


void CTemplatesIDETest::HitBreakpointOnAmbiguousTemplateFunction(void)

{
	LogTestHeader("HitBreakpointOnAmbiguousTemplateFunction");
	// set a bp on a template function (char)
	EXPECT_VALIDBP(bps.SetAmbiguousBreakpoint("globaltemplatefunc", 4)); //TODO: choose it from string (char) rather than position in the list
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of globaltemplatefunc", 
		"globaltemplatefunc(char 97)"));
	
	// step out to WinMain to set up next test.
	CString strline;
	Frame frm( stk.GetFunction(1) );
	LOG->Comment("Frame no 1: %s",frm);
	frm.GetLineNumber(strline);
	strline = "@" + strline;
	LOG->Comment("Line to go from frame no 1: %s",strline);
	EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, "WinMain("));
	//EXPECT_TRUE(dbg.AtLine("while(0); //::a") );
	EXPECT_TRUE(dbg.VerifyCurrentLine(strline) );

	EXPECT_TRUE(bps.ClearAllBreakpoints());
}


void CTemplatesIDETest::DisableBreakpointInTemplateFunctionAndVerifyNotHit(void)

{
	LogTestHeader("DisableBreakpointInTemplateFunctionAndVerifyNotHit");
	// set a bp within a template function
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	bp *pbp = bps.SetBreakpoint();
	// two bp's were set, disable one of them (<int>)
	// TODO(michma): two bps were set but we only get one bp object.
	// the first one gets disabled because of the way cafe indexes bp
	// objects. we need a disable breakpoint function that takes indexes.
	EXPECT_TRUE(bps.DisableBreakpoint(pbp));
	// set ip to function a place before the breakpoints.
	EXPECT_TRUE(src.Find("intObject.func(1);"));
	EXPECT_TRUE(dbg.SetNextStatement());

	// verify that the bp is hit for each instance of the template not disabled (<char>)
	// the other earlier ones (<int>) should get passed up.
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 98)"));
	EXPECT_TRUE(dbg.Go(NULL, 
		"// first line of template function 'func'", 
		"SomeReallyLongSymbolName<char>::func(char 99)"));
	
	// step out to WinMain and clear breakpoint to set up next test.
	EXPECT_TRUE(dbg.StepOut(1, NULL, "while(0); //c", "WinMain("));
	EXPECT_TRUE(bps.ClearAllBreakpoints());
}


void CTemplatesIDETest::ToggleOffBreakpointInTemplateFunctionAndVerifyNotHit(void)

{
	LogTestHeader("ToggleOffBreakpointInTemplateFunctionAndVerifyNotHit");
	// toggle on a bp within a template function
	EXPECT_TRUE(src.Find("// first line of template function 'func'"));
	EXPECT_VALIDBP(bps.SetBreakpoint());
	// toggle it off.
	// TODO(michma): SetBreakpoint isn't smart enough to know when we're
	// toggling a bp off. we shouldn't be getting back a valid bp.
	EXPECT_VALIDBP(bps.SetBreakpoint());
	// go and make sure we don't hit the breakpoints we just toggled off.
	EXPECT_TRUE(dbg.Go(NULL, NULL, NULL, WAIT_FOR_TERMINATION));
	// step past prolog of WinMain to set up next test.
	EXPECT_TRUE(dbg.StepInto(2));
}


void CTemplatesIDETest::EvaluateSTLObjectWithLongName(void)
{
	LogTestHeader("EvaluateSTLObjectWithLongName");
	EXPECT_TRUE(cxx.ExpressionValueIs("STLObjectWithLongName._Tr", "{...}"));
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\loccase.h ===
///////////////////////////////////////////////////////////////////////////////
//	LOCCASE.H
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CLocalsCases Class
//

#ifndef __LOCCASE_H__
#define __LOCCASE_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\DbgTestBase.h"
#include "varssub.h"

///////////////////////////////////////////////////////////////////////////////
//	CLocalsCases class

class CLocalsCases : public CDbgTestBase
{
	DECLARE_TEST(CLocalsCases, CVarsWndSubSuite)

// Data
private:
	// the base name of the localized directories and files we will use.
	CString m_strProjBase;
	// the location of the unlocalized sources, under which the projects we will use will be located.
	CString m_strSrcDir;
	// the locations of the dll and exe projects, and their localized sources, that we will use for this test.
	CString m_strExeDir;


	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);

	// Test cases
	public:
		void VerifyLocPaneWhenVariablesChangeViaExec(void);
		void VerifyLocPaneWhenVariablesChangeViaMemoryWindow(void);
		void VerifyLocPaneWhenVariablesChangeViaWatchWindow(void);
		void VerifyLocPaneWhenVariablesChangeViaLocalsWindow(void);
		void VerifyLocPaneWhenVariablesChangeViaQuickWatchWindow(void);
		void VerifyThatFunctionArgumentsAppearWhenPrologReached(void);
		void VerifyThatLocalsAppearAfterExecutingProlog(void);
		void NavigateStackToParentFunctionAndBack(void);
		void CheckLocalsWhenSwitchToThisAutoAndBack(void);
		void VerifyThatLocalsUpdatesViaRegisterWindow(void);
		void StepThroughFunctionWithNoArguments(void);
		void StepThroughPrologWithThisPaneActive(void);

	// Data
	private:
		EXPR_INFO expr_info_actual[8], expr_info_expected[8];
		int m_TestNumber;
		int m_TotalNumberOfTests;
		CString m_strLogInfo;
	};

#endif //__LOCCASE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\loccase.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	LOCCASE.CPP
//											 
//	Created by :			
//		VCBU QA		
//
//	Description :								 
//		TestWizard Generated script.	 

#include "stdafx.h"
#include "loccase.h"	

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
										   
IMPLEMENT_TEST(/*999,*/ CLocalsCases, CDbgTestBase, "Locals", -1, CVarsWndSubSuite)


// each function that runs a test has this prototype.
typedef void (CLocalsCases::*PTR_TEST_FUNC)(void); 

// Information about a test to be put in the test header
#define LOGTESTHEADER(strTestName) 	m_strLogInfo.Format("# - %d.  %s. Total # - %d, Passed - %d %%", ++m_TestNumber, strTestName, m_TotalNumberOfTests, (m_TestNumber*100)/m_TotalNumberOfTests);  \
									LogTestHeader(m_strLogInfo);


// we randomly pick out of the following list of tests and run them.
// insert functions for new tests to the end of the list.

PTR_TEST_FUNC tests[] = {
	&CLocalsCases::NavigateStackToParentFunctionAndBack,
	&CLocalsCases::VerifyThatLocalsUpdatesViaRegisterWindow,				
	&CLocalsCases::VerifyLocPaneWhenVariablesChangeViaExec,
//TODO dklem (07/29/980 make this test available when bug #5190 is fixed
	&CLocalsCases::VerifyLocPaneWhenVariablesChangeViaMemoryWindow,
	&CLocalsCases::VerifyLocPaneWhenVariablesChangeViaWatchWindow,
	&CLocalsCases::VerifyLocPaneWhenVariablesChangeViaLocalsWindow,
	&CLocalsCases::VerifyLocPaneWhenVariablesChangeViaQuickWatchWindow,
	&CLocalsCases::VerifyThatFunctionArgumentsAppearWhenPrologReached,	
	&CLocalsCases::VerifyThatLocalsAppearAfterExecutingProlog,			
	&CLocalsCases::CheckLocalsWhenSwitchToThisAutoAndBack,
	&CLocalsCases::StepThroughFunctionWithNoArguments,					
	&CLocalsCases::StepThroughPrologWithThisPaneActive,					

};

void CLocalsCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CLocalsCases::Run(void)
	
	{
	/******************
	 * INITIALIZATION *
	 ******************/


	// the base name of the localized directories and files we will use.
	if(GetSystem() & SYSTEM_DBCS)
		m_strProjBase = "[\\]^{|}Aa`@~ Locals Application";
	else
		m_strProjBase = "Locals Application";

	// the location of the unlocalized sources, under which the projects we will use will be located.
	m_strSrcDir = GetCWD() + "src\\locpane";
	// the locations of the dll and exe projects, and their localized sources, that we will use for this test.
	m_strExeDir = m_strSrcDir + "\\" + m_strProjBase + " exe";

	// clean-up the exe project from the last run.
	KillFiles(m_strExeDir + "\\Debug\\", "*.*");
	RemoveDirectory(m_strExeDir + "\\Debug");
	KillFiles(m_strExeDir + "\\", "*.*");
	RemoveDirectory(m_strExeDir);

	// set the options for the exe project we are building for this test.
	CProjWizOptions *pWin32AppWizOpt = new(CWin32AppWizOptions);
	pWin32AppWizOpt->m_strLocation = m_strSrcDir;
	pWin32AppWizOpt->m_strName = m_strProjBase + " exe";	
	
	// create the exe project.
	EXPECT_SUCCESS(prj.New(pWin32AppWizOpt));
	// create a new localized exe source file in the project dir from the unlocalized exe source file.
	CopyFile(m_strSrcDir + "\\" + "Locals Application.cpp", m_strExeDir + "\\" + m_strProjBase + " exe.cpp", FALSE);
	// make it writable so it can be cleaned up later.
	SetFileAttributes(m_strExeDir + "\\" + m_strProjBase + " exe.cpp", FILE_ATTRIBUTE_NORMAL);
	// add the source to the project.
	EXPECT_SUCCESS(prj.AddFiles(m_strProjBase + " exe.cpp"));
	// build the project.
	EXPECT_SUCCESS(prj.Build());

	// all tests expect the ide to be in this initial state.
	EXPECT_TRUE(dbg.StepOver());

	m_TestNumber = 0;
	m_TotalNumberOfTests = sizeof(tests) / sizeof(PTR_TEST_FUNC);
	
	// we only want to randomly run each test once.
	RandomNumberCheckList rncl(sizeof(tests) / sizeof(PTR_TEST_FUNC));
	// indexes into the test function array.
	int iTest;
	
	if(CMDLINE->GetBooleanValue("random", TRUE))
	{
		// randomly run each test once.
		while((iTest = rncl.GetNext()) != -1)
			(this->*(tests[iTest]))();
	}
	else
	{
		// run each test in sequence.
		for(iTest = 0; iTest < sizeof(tests) / sizeof(PTR_TEST_FUNC); iTest++)
			(this->*(tests[iTest]))();
	}

	dbg.StopDebugging(ASSUME_NORMAL_TERMINATION) ;
} 

	/*********
	 * TESTS *
	 *********/

void CLocalsCases::VerifyLocPaneWhenVariablesChangeViaExec(void)
{
	LOGTESTHEADER("VerifyLocPaneWhenVariablesChangeViaExec");
	
	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* First line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());
	LogTestHeader("Check that initial values are correct");
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustInt", "1965", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("chJustChar", "97 'a'", "char", NOT_EXPANDABLE));

	// Now do 2 steps over and begin test 
	EXPECT_TRUE(dbg.StepOver(2));
	// Check that initial values change via execution
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustInt", "1966", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("chJustChar", "98 'b'", "char", NOT_EXPANDABLE));
}


void CLocalsCases::VerifyLocPaneWhenVariablesChangeViaMemoryWindow(void)
{
	LOGTESTHEADER("VerifyLocPaneWhenVariablesChangeViaMemoryWindow");
	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* First line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	// Open Memory window
	EXPECT_TRUE(mem.Enable());
	EXPECT_TRUE(mem.SetMemoryData("chJustChar", 'e', MEM_FORMAT_ASCII));
	EXPECT_TRUE(locals.VerifyLocalInfo("chJustChar", "101 'e'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(mem.Disable());
}

void CLocalsCases::VerifyLocPaneWhenVariablesChangeViaWatchWindow(void)
{
	LOGTESTHEADER("VerifyLocPaneWhenVariablesChangeViaWatchWindow");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* First line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Change Watch Window
	EXPECT_TRUE(watch.AddWatch("nJustInt"));
	EXPECT_TRUE(watch.SetWatchValue("nJustInt", "1993"));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustInt", "1993", "int", NOT_EXPANDABLE));
}

void CLocalsCases::VerifyLocPaneWhenVariablesChangeViaLocalsWindow(void)
{
	LOGTESTHEADER("VerifyLocPaneWhenVariablesChangeViaLocalsWindow");
	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* First line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Change Locals Window
	EXPECT_TRUE(locals.SetLocalValue("nJustInt", "1974"));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustIntRef", "1974", "int &", NOT_EXPANDABLE));
}

void CLocalsCases::VerifyLocPaneWhenVariablesChangeViaQuickWatchWindow(void)
{

	LOGTESTHEADER("VerifyLocPaneWhenVariablesChangeViaQuickWatchWindow");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* First line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Change Quick Watch Window
	EXPECT_TRUE(uiqw.Activate());
	EXPECT_TRUE(uiqw.SetExpression("dJustDouble"));
	EXPECT_TRUE(uiqw.Recalc());
	EXPECT_TRUE(uiqw.SetNewValue("3.141592"));
	EXPECT_TRUE(uiqw.Recalc());
	EXPECT_TRUE(NULL ==uiqw.Close());
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustDouble", "3.1415920000000", "double", NOT_EXPANDABLE));
	

}

void CLocalsCases::VerifyThatFunctionArgumentsAppearWhenPrologReached(void)
{
	LOGTESTHEADER("VerifyThatFunctionArgumentsAppearWhenPrologReached");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Second line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Step into function
	EXPECT_TRUE(dbg.StepInto(1));
	EXPECT_TRUE(locals.LocalsCountIs(1));
	EXPECT_TRUE(locals.VerifyLocalInfo("chArg", "98 'b'", "char", NOT_EXPANDABLE));
}

void CLocalsCases::VerifyThatLocalsAppearAfterExecutingProlog(void)
{

	LOGTESTHEADER("VerifyThatLocalsAppearAfterExecutingProlog");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Second line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Step into function and execute prolog
	EXPECT_TRUE(dbg.StepInto(2));
	EXPECT_TRUE(locals.LocalsCountIs(3));
	EXPECT_TRUE(locals.VerifyLocalInfo("chArg", "98 'b'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustLocalInt", "UNKNOWN", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustLocalDouble", "UNKNOWN", "double", NOT_EXPANDABLE));
}


void CLocalsCases::NavigateStackToParentFunctionAndBack(void)
{

	LOGTESTHEADER("NavigateStackToParentFunctionAndBack");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Second line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Step into function and execute prolog
	EXPECT_TRUE(dbg.StepInto(2));
	EXPECT_TRUE(stk.NavigateStack("WinMain"));
	EXPECT_TRUE(locals.LocalsCountIs(8));
	EXPECT_TRUE(locals.VerifyLocalInfo("hInstance", "UNKNOWN", "HINSTANCE__ *", COLLAPSED));
	EXPECT_TRUE(locals.VerifyLocalInfo("hPrevInstance", "UNKNOWN", "HINSTANCE__ *", COLLAPSED));
	EXPECT_TRUE(locals.VerifyLocalInfo("lpCmdLine", "UNKNOWN", "char *", COLLAPSED));
	EXPECT_TRUE(locals.VerifyLocalInfo("nCmdShow", "1", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustDouble", "2.9200000000000", "double", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("chJustChar", "98 'b'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustIntRef", "1966", "int &", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustInt", "1966", "int", NOT_EXPANDABLE));

	EXPECT_TRUE(stk.NavigateStack("FuncWithArg"));
	EXPECT_TRUE(locals.LocalsCountIs(3));
	EXPECT_TRUE(locals.VerifyLocalInfo("chArg", "98 'b'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustLocalInt", "UNKNOWN", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustLocalDouble", "UNKNOWN", "double", NOT_EXPANDABLE));

}

void CLocalsCases::CheckLocalsWhenSwitchToThisAutoAndBack(void)
{
	
	LOGTESTHEADER("CheckLocalsWhenSwitchToThisAutoAndBack");	

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Second line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Step into function and execute prolog
	EXPECT_TRUE(dbg.StepInto(2));
	uivar.Activate();
	EXPECT_TRUE(ERROR_SUCCESS == uivar.SetPane(PANE_THIS)); 
	Sleep(500);
	EXPECT_TRUE(ERROR_SUCCESS == uivar.SetPane(PANE_LOCALS));
	EXPECT_TRUE(locals.LocalsCountIs(3));
	EXPECT_TRUE(locals.VerifyLocalInfo("chArg", "98 'b'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustLocalInt", "UNKNOWN", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustLocalDouble", "UNKNOWN", "double", NOT_EXPANDABLE));

//TODO dklem (07/29/980 make this test available when Atuto pan is available
	uivar.Activate();
	EXPECT_TRUE(ERROR_SUCCESS == uivar.SetPane(PANE_AUTO));
	Sleep(500);
	EXPECT_TRUE(ERROR_SUCCESS == uivar.SetPane(PANE_LOCALS));
	EXPECT_TRUE(locals.LocalsCountIs(3));
	EXPECT_TRUE(!locals.LocalDoesNotExist("chArg"));
	EXPECT_TRUE(!locals.LocalDoesNotExist("nJustLocalInt"));
	EXPECT_TRUE(!locals.LocalDoesNotExist("dJustLocalDouble"));


}

void CLocalsCases::VerifyThatLocalsUpdatesViaRegisterWindow(void)
{

	LOGTESTHEADER("VerifyThatLocalsUpdatesViaRegisterWindow");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Last FuncWithArg line */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	//Step into function and return
	EXPECT_TRUE(dbg.StepInto(1));
	EXPECT_TRUE(regs.Enable());
	EXPECT_TRUE(regs.SetRegister(EAX, "00000079"));
	EXPECT_TRUE(dbg.StepInto(1));
	EXPECT_TRUE(locals.VerifyLocalInfo("chJustChar", "121 'y'", "char", NOT_EXPANDABLE));
}


void CLocalsCases::StepThroughFunctionWithNoArguments(void)
{
	LOGTESTHEADER("StepThroughFunctionWithNoArguments");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Third line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	EXPECT_TRUE(dbg.StepInto(1));
	EXPECT_TRUE(locals.LocalsCountIs(0));
	EXPECT_TRUE(dbg.StepInto(1));
	EXPECT_TRUE(locals.LocalsCountIs(0));

}

void CLocalsCases::StepThroughPrologWithThisPaneActive(void)
{
	LOGTESTHEADER("StepThroughPrologWithThisPaneActive");

	// Restart and Go to the line at which we want to begin our tests
	EXPECT_TRUE(dbg.Restart());
	EXPECT_TRUE(src.Find("/* Second line for tests */", FALSE, FALSE, FALSE, 0 /*FD_DOWN*/)); 
	EXPECT_TRUE(dbg.StepToCursor());

	uivar.Activate();
	EXPECT_TRUE(ERROR_SUCCESS == uivar.SetPane(PANE_THIS)); 
	EXPECT_TRUE(dbg.StepInto(2));
	EXPECT_TRUE(locals.LocalsCountIs(3));
	EXPECT_TRUE(locals.VerifyLocalInfo("chArg", "98 'b'", "char", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("nJustLocalInt", "UNKNOWN", "int", NOT_EXPANDABLE));
	EXPECT_TRUE(locals.VerifyLocalInfo("dJustLocalDouble", "UNKNOWN", "double", NOT_EXPANDABLE));
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\varssub.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	VARSSUB.CPP
//
//	Created by :			
//		VCBU QA		
//
//	Description :
//		implementation of the CVarsWndSubSuite class
//

#include "stdafx.h"
#include "varssub.h"
#include "afxdllx.h"
#include "..\cleanup.h"

#include "autocase.h"
#include "loccase.h"
#include "thiscase.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

/////////////////////////////////////////////////////////////////////////////
// CVarsWndSubSuite

IMPLEMENT_SUBSUITE(CVarsWndSubSuite, CIDESubSuite, "Variables Window", "VCQA Debugger")

BEGIN_TESTLIST(CVarsWndSubSuite)
	TEST(CAutoPaneIDETest, RUN)
	TEST(CLocalsCases, RUN)
	TEST(CThisPaneIDETest, DONTRUN)	//	TODO : dverma : thispane currently is not implemented
END_TESTLIST()

void CVarsWndSubSuite::CleanUp(void)
	{
	::CleanUp("autopane");
	}

///////////////////////////////////////////////////////////////////////////////
//	SubSuite initialization
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\thiscase.h ===
///////////////////////////////////////////////////////////////////////////////
//	THISCASE.H
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CThisPaneIDETest Class
//

#ifndef __THISCASE_H__
#define __THISCASE_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

//#include "..\dbgset.h"
#include "..\..\DbgTestBase.h"
#include "varssub.h"

///////////////////////////////////////////////////////////////////////////////
//	CThisPaneIDETest class

class CThisPaneIDETest : public CDbgTestBase
{
	DECLARE_TEST(CThisPaneIDETest, CVarsWndSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);

	// Test cases
	private:

	// Data
	private:
		EXPR_INFO expr_info_actual[8], expr_info_expected[8];
	};

#endif //__THISCASE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\varssub.h ===
///////////////////////////////////////////////////////////////////////////////
//	VARSSUB.H
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CVarsWndSubSuite class
//

#ifndef __SNIFF_H__
#define __SNIFF_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

///////////////////////////////////////////////////////////////////////////////
// CVarsWndSubSuite class

class CVarsWndSubSuite : public CIDESubSuite
{
public:
	DECLARE_SUBSUITE(CVarsWndSubSuite)
	DECLARE_TESTLIST()
protected:
	void CleanUp(void);
};

#endif //__SNIFF_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\cleanup.h ===
void CleanUp(LPCSTR szDirName);
void OurKillFile(LPCSTR szPathName, LPCSTR szFileName = NULL);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\varswnd\thiscase.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	THISCASE.CPP
//											 
//	Created by :			
//		VCBU QA		
//
//	Description :								 
//		TestWizard Generated script.	 

#include "stdafx.h"
#include "thiscase.h"	

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
										   
IMPLEMENT_TEST(CThisPaneIDETest, CDbgTestBase, "This Pane", -1, CVarsWndSubSuite)

												 
void CThisPaneIDETest::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CThisPaneIDETest::Run(void)
	
	{
	/******************
	 * INITIALIZATION *
	 ******************/
	if(!InitProject("thispane\\thispane"))
		{
		m_pLog->RecordInfo("ERROR: could not init thispane project");
		return;
		}

	// step passed prolog of WinMain().
	// this is the initial state each test expects.
	if(!dbg.StepOver(2))
		{
		m_pLog->RecordInfo("ERROR: could not step passed WinMain()'s prolog");
		return;
		}

	/*********
	 * TESTS *
	 *********/
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\watch\wchcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	WCHCASES.CPP
//
//  Created by:			Date:
//			MichMa			10/19/94
//
//  Description:
//		Watch Window Breadth Test

#include "stdafx.h"
#include "wchcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CWatchCases, CDebugTestSet, "Watch", -1, CCORESubSuite)

void CWatchCases::PreRun(void)
{
	// call the base class
	CTest::PreRun();

}

void CWatchCases::Run()
												
	{
	EXPR_INFO watch_info_actual[10], watch_info_expected[10];
	CString str;

	XSAFETY;

	// get the project into the initial debugging state

	file.Open("test.exe");
	bp.SetBreakpoint("break_here", "test.cpp");
	dbg.Go();
	/*
	// verify that watch window is empty after start debugging new project	

	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// add existing int variable to watch window

	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "1");
	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// change value of int variable to an illegal value
	// verify that ESC cancels edit

	MST.DoKeys("{HOME}{TAB 2}a{ENTER}");
	str = "";
	MST.WEditText("", str);
	EXPECT_TRUE(str == "a");
	MST.DoKeys("{ESC}");
	EXPECT_TRUE(!MST.WEditExists(""));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// change value of int variable to another legal value
	
	EXPECT_SUCCESS(watch.SetValue("2", 1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "2");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify watch window updated when int variable changes via execution

	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "3");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify watch window updated when int variable changes via memory window

	mem.Activate();
	mem.GoToAddress("i");
	mem.SetCurrentData("0400");
 	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "4");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify watch window updated when int variable changes via locals window

	var.Activate();
	var.Locals();
	var.SetValue("5", 7);
 	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "5");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// delete int variable

	EXPECT_SUCCESS(watch.Delete(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "", "", "");
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));
	*/
	// add existing CString variable to watch window without /s format specifier
	dbg.StepOver();
	watch.Activate();
	EXPECT_SUCCESS(watch.SetName("cstring", 1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  COLLAPSED, "CString", "cstring", "{\"abc\"}");

	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify that value of CString variable root cannot be edited

	MST.DoKeys("{HOME}{TAB 2}");
	MST.WEditText("", str);
	EXPECT_TRUE(str == "");
	MST.DoKeys("{ESC}");

	// expand CString variable

	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "CString", "cstring", "{\"abc\"}");

	FillExprInfo(watch_info_expected[1], 
				  COLLAPSED, "char *", "m_pchData", "ADDRESS \"abc\"");

	FillExprInfo(watch_info_expected[2], 
				  NOT_EXPANDABLE, "int", "m_nDataLength", "3");

	FillExprInfo(watch_info_expected[3], 
				  NOT_EXPANDABLE, "int", "m_nAllocLength", "3");

	FillExprInfo(watch_info_expected[4], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 5));
	
	// verify that value of m_pchData member displays only address when editing

	MST.DoKeys("{HOME}{DOWN}{TAB}");
	MST.WEditText("", str);
	MST.DoKeys("{ESC}");
	EXPECT_TRUE(ValueIsAddress(str));
	EXPECT_TRUE(str.GetLength() == 10);

	// change value field of m_pchData member to another legal value
	
	EXPECT_SUCCESS(watch.SetValue("tchar_array", 2, NAME_NOT_EDITABLE));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	
	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "CString", "cstring", "{\"xyz\"}");

	FillExprInfo(watch_info_expected[1], 
				  COLLAPSED, "char *", "m_pchData", "ADDRESS \"xyz\"");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 5));
	
	// expand m_pchData member of CString (has unnamed members)

	EXPECT_SUCCESS(watch.Expand(2));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[1], 
				  EXPANDED, "char *", "m_pchData", "ADDRESS \"xyz\"");

	FillExprInfo(watch_info_expected[2], 
				  NOT_EXPANDABLE, "char", "---", "120 'x'");

	FillExprInfo(watch_info_expected[3], 
				  NOT_EXPANDABLE, "int", "m_nDataLength", "3");

	FillExprInfo(watch_info_expected[4], 
				  NOT_EXPANDABLE, "int", "m_nAllocLength", "3");

	FillExprInfo(watch_info_expected[5], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));

	// verify all value fields updated when expanded CString variable changes
	// via execution

	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "CString", "cstring", "\"1234\"");

	FillExprInfo(watch_info_expected[1], 
				  EXPANDED, "char *", "m_pchData", "ADDRESS \"1234\"");

	FillExprInfo(watch_info_expected[2], 
				  NOT_EXPANDABLE, "char", "---", "49 '1'");

	FillExprInfo(watch_info_expected[3], 
				  NOT_EXPANDABLE, "int", "m_nDataLength", "4");

	FillExprInfo(watch_info_expected[4], 
				  NOT_EXPANDABLE, "int", "m_nAllocLength", "4");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));

	// verify expanded CString variable isn't deleted by trying to delete one
	// of its members

	EXPECT_SUCCESS(watch.Delete(2));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));

	// collapse CString variable

	EXPECT_SUCCESS(watch.Collapse(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  COLLAPSED, "CString", "cstring", "{\"1234\"}");

	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify value field updated when collapsed CString variable changes
	// via execution

	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

 	FillExprInfo(watch_info_expected[0], 
				  COLLAPSED, "CString", "cstring", "{\"5678\"}");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// delete collapsed CString variable

	EXPECT_SUCCESS(watch.Delete(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "", "", "");
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// delete expanded, CString variable by deleting only root name 
	// (i.e. top row only)

	EXPECT_SUCCESS(watch.SetName("cstring", 1));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.Delete(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// delete expanded, CString variable by deleting entire object
	// (i.e. all rows)
	
	EXPECT_SUCCESS(watch.SetName("cstring", 1));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.Delete(1, 4));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// add existing TCHAR arrray to watch window without /s format specifier

	EXPECT_SUCCESS(watch.SetName("tchar_array", 1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], COLLAPSED, "char *", "tchar_array", "ADDRESS \"xyz\"");
	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify that value of TCHAR array root level cannot be edited

	MST.DoKeys("{HOME}{TAB 2}");
	str = "{\"xyz\"}";
	EXPECT_TRUE(!MST.WEditExists(str));
	MST.DoKeys("{ESC}");

	// expand TCHAR array
	
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "char *", "tchar_array", "ADDRESS {\"xyz\"}");

	FillExprInfo(watch_info_expected[1], 
				  NOT_EXPANDABLE, "char", "[0]", "120 'x'");

	FillExprInfo(watch_info_expected[2], 
				  NOT_EXPANDABLE, "char", "[1]", "121 'y'");

	FillExprInfo(watch_info_expected[3], 
				  NOT_EXPANDABLE, "char", "[2]", "122 'z'");

	FillExprInfo(watch_info_expected[4], 
				  NOT_EXPANDABLE, "char", "[3]", "0 ''");

	FillExprInfo(watch_info_expected[5], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));
	
	// verify that value of TCHAR array element displays only int value when editing

	MST.DoKeys("{HOME}{DOWN}{TAB}");
	MST.WEditText("", str);
	MST.DoKeys("{ESC}");
	EXPECT_TRUE(str == "120");

	// change value of TCHAR array element to another legal value
	
	EXPECT_SUCCESS(watch.SetValue("p", 2, NAME_NOT_EDITABLE));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "char *", "tchar_array", "ADDRESS {\"pyz\"}");

	FillExprInfo(watch_info_expected[1], 
				  NOT_EXPANDABLE, "char", "[0]", "112 'p'");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));
	
	// verify all value fields updated when expanded TCHAR array changes via execution

	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  EXPANDED, "char *", "tchar_array", "ADDRESS {\"pdz\"}");

	FillExprInfo(watch_info_expected[2], 
				  NOT_EXPANDABLE, "char", "[1]", "100 'd'");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));

	// verify expanded TCHAR array isn't deleted by trying to delete one
	// of its elements

	EXPECT_SUCCESS(watch.Delete(2));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 6));

	// collapse TCHAR array

	EXPECT_SUCCESS(watch.Collapse(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  COLLAPSED, "char *", "tchar_array", "ADDRESS \"pdz\"");

	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// verify value field updated when collapsed TCHAR array changes via execution

	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));

	FillExprInfo(watch_info_expected[0], 
				  COLLAPSED, "char *", "tchar_array", "ADDRESS {\"pdq\"}");

	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// delete collapsed TCHAR array variable

	EXPECT_SUCCESS(watch.Delete(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "", "", "");
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// delete expanded TCHAR array by deleting only root name (i.e. top row only)

	EXPECT_SUCCESS(watch.SetName("tchar_array", 1));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.Delete(1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// delete expanded TCHAR array by deleting entire object (i.e. all rows)

	EXPECT_SUCCESS(watch.SetName("tchar_array", 1));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.Delete(1, 5));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// add existing struct variable to watch window

	EXPECT_SUCCESS(watch.SetName("a_struct", 1));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], COLLAPSED, "A_STRUCT", "a_struct", "{...}");
	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
 	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));
	EXPECT_SUCCESS(watch.Delete(1));

	// with local int, local expanded CString, and local expanded TCHAR array, and global
	// float in watch window, step into a function.
	
	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.SetName("cstring", 2));
	EXPECT_SUCCESS(watch.SetName("tchar_array", 3));
	EXPECT_SUCCESS(watch.SetName("f", 4));
	EXPECT_SUCCESS(watch.Expand(3));
	EXPECT_SUCCESS(watch.Expand(2));
 	dbg.StepInto();
 	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "---", "i", "---");
	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "---", "cstring", "---");
	FillExprInfo(watch_info_expected[2], NOT_EXPANDABLE, "---", "tchar_array", "---");
	FillExprInfo(watch_info_expected[3], NOT_EXPANDABLE, "float", "f", "1.000000");
	FillExprInfo(watch_info_expected[4], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 5));

	// with out-of-scope int, expanded CString, and expanded TCHAR array and global float 
	// in the watch window, navigate the stack to the parent function, and back

 	stack.NavigateStack("WinMain");
 	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[5], NOT_EXPANDABLE, "int", "i", "5");
	FillExprInfo(watch_info_expected[6], COLLAPSED, "CString", "cstring", "{\"5678\"}");
	FillExprInfo(watch_info_expected[7], COLLAPSED, "char *", "tchar_array", "ADDRESS \"pdq\"");
	FillExprInfo(watch_info_expected[8], NOT_EXPANDABLE, "float", "f", "1.000000");
	FillExprInfo(watch_info_expected[9], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[5], 5));
	stack.NavigateStack("func");
 	EXPECT_TRUE(watch.Activate());
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 5));

	// with global float in watch window, verify all fields updated when int, expanded CString, and expanded TCHAR
	// array come back into scope

 	dbg.StepOut();
 	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[5], 5));
	EXPECT_SUCCESS(watch.Delete(1, 4));

	// with int variable in all panes and unique variable in each pane, 
	// verify all panes updated when all variables change via execution

	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.SetName("cstring", 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH2));	
	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.SetName("tchar_array", 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH3));
	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.SetName("float", 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH4));
	EXPECT_SUCCESS(watch.SetName("i", 1));
	EXPECT_SUCCESS(watch.SetName("a_struct", 2));
	dbg.StepOver();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH1));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "1");
	FillExprInfo(watch_info_expected[1], COLLAPSED, "CString", "cstring", "{\"abc\"}");
	FillExprInfo(watch_info_expected[2], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 3));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH2));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[3], NOT_EXPANDABLE, "int", "i", "1");
	FillExprInfo(watch_info_expected[4], COLLAPSED, "char *", "tchar_array", "ADDRESS \"xyz\"");
	FillExprInfo(watch_info_expected[5], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[3], 3));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH3));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[6], NOT_EXPANDABLE, "int", "i", "1");
	FillExprInfo(watch_info_expected[7], NOT_EXPANDABLE, "float", "f", "2.000000");
	FillExprInfo(watch_info_expected[8], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[6], 3));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH4));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[9], NOT_EXPANDABLE, "int", "i", "1");
	FillExprInfo(watch_info_expected[10], COLLAPSED, "A_STRUCT", "a_struct", "{...}");
	FillExprInfo(watch_info_expected[11], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[9], 3));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH1));	
	
	// verify that watch window status of all panes is preserved if project is closed and re-opened

	dbg.StopDebugging();
	file.Close();
	file.Close();
	file.Open("test.exe");
	bp.ClearAllBreakpoints();
	bp.SetBreakpoint("break_here_too", "test.cpp");
	dbg.Go();
	EXPECT_TRUE(watch.Activate());
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH1));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 3));
	EXPECT_SUCCESS(watch.Delete(1, 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH2));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[3], 3));	
	EXPECT_SUCCESS(watch.Delete(1, 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH3));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[6], 3));
	EXPECT_SUCCESS(watch.Delete(1, 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH4));	
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, &watch_info_expected[9], 3));
	EXPECT_SUCCESS(watch.Delete(1, 2));
	EXPECT_SUCCESS(watch.SetPane(PANE_WATCH1));	
	
	// add expression composed of multiple variables to watch window

	EXPECT_SUCCESS(watch.SetName("((i * tchar_array[0]) + cstring.m_pchData - a_struct.i) / f"));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "((i * tchar_array[0]) + cstring.m_pchData - a_struct.i) / f", "100");
	FillExprInfo(watch_info_expected[1], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));
	EXPECT_SUCCESS(watch.Delete(1));	

	// add non-existent variable to watch window	

	EXPECT_SUCCESS(watch.SetName("non-existent var"));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "---", "non-existent var", "---");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));
	EXPECT_SUCCESS(watch.Delete(1));	

	// add function call to watch window

	EXPECT_SUCCESS(watch.SetName("func()"));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "---", "func()", "---");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));
	EXPECT_SUCCESS(watch.Delete(1));	

	// change name field from expanded CString variable to existing int variable

	EXPECT_SUCCESS(watch.SetName("cstring"));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.SetName("i"));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "int", "i", "1");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// change name field from expanded TCHAR array to existing int variable

	EXPECT_SUCCESS(watch.SetName("tchar_array"));
	EXPECT_SUCCESS(watch.Expand(1));
	EXPECT_SUCCESS(watch.SetName("i"));
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 2));

	// delete int variable, expanded CString variable, and expanded TCHAR array all at once
	// by only selecting root level of each variable

	EXPECT_SUCCESS(watch.SetName("i"));
	EXPECT_SUCCESS(watch.SetName("cstring"));
	EXPECT_SUCCESS(watch.SetName("tchar_array"));
	EXPECT_SUCCESS(watch.Expand(3));
	EXPECT_SUCCESS(watch.Expand(2));
	EXPECT_SUCCESS(watch.SelectRows(1));
	EXPECT_SUCCESS(watch.SelectRows(2));
	EXPECT_SUCCESS(watch.SelectRows(6));
	EXPECT_SUCCESS(watch.Delete());
	EXPECT_SUCCESS(watch.GetAllFields(watch_info_actual, 1, ROW_ALL));
	FillExprInfo(watch_info_expected[0], NOT_EXPANDABLE, "", "", "");
	EXPECT_TRUE(ExprInfoIs(watch_info_actual, watch_info_expected, 1));

	// verify that virtual object is updated when derived type changes
	// verify all keyboard controls
	// change from docked view to mdi view and back

	XSAFETY;
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Core\watch\wchcases.h ===
///////////////////////////////////////////////////////////////////////////////
//	WCHCASES.H
//
//	Created by :			Date :
//		MichMa					10/19/94
//
//	Description :
//		Declaration of the CWatchCases class
//

#ifndef __WCHCASES_H__
#define __WCHCASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "dbgset.h"

///////////////////////////////////////////////////////////////////////////////
//	CWatchCases class

class CWatchCases : public CDebugTestSet
	{
		DECLARE_TEST(CWatchCases, CCORESubSuite)

	// Data
	private:
		COFile file;
		CODebug dbg;
		COBreakpoints bp;
		COStack stack;
		UIMemory mem;
		UIWatch watch;
		UIVariables var;

	// Operations (test cases)
	public:
		virtual void PreRun(void);
		virtual void Run();
	};

#endif //__WCHCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\stdafx.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.CPP
//
//	Created by :			:
//		VCBU QA		
//
//	Description :
//		source file that includes just the standard include
//
//		stdafx.pch will be the pre-compiled header
//		stdafx.obj will contain the pre-compiled type information
//

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\stdafx.h ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.H
//
//	Created by :			Date :
//		VCBU QA		
//
//	Description :
//		Precompiled header for the test
//
//		Includes core CAFE headers, as contained in the utility headers
//		for the Workbench and all of the workbench's areas.
//

#ifndef __STDAFX_H__
#define __STDAFX_H__

#include <afxwin.h>			// MFC core and standard components
#include <winperf.h>		// skipped in windows.h due to WIN32_LEAN_AND_MEAN
#include <afxext.h> 		// MFC extensions
#include <afxtempl.h>

#include "test.h"
#include "subsuite.h"
#include "support.h"


#endif //__STDAFX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\ecset.h ===
// ecset.h
//
//	Created by		Date
//		YefimS		7/2/97
//
//	Description
//		Definition of base class containing common data and methods for all
//		Edit And Continue Test Sets.


#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#ifndef __ECSET_H__
#define __ECSET_H__

extern int ReturnCode;
extern bp  * ReturnBP;

#define VERIFY_TEST_SUCCESS(TestCase)\
	TestCase == ERROR_SUCCESS
#define EXPECT_TRUE(f)    ((f)?LogResult(__LINE__, PASSED,#f):LogResult(__LINE__, FAILED,#f));
#define EXPECT_SUCCESS(f) (((ReturnCode=(f))==0)?LogResult(__LINE__, PASSED,#f):LogResult(__LINE__, FAILED,#f,ReturnCode));
#define EXPECT_VALIDBP(f) (((ReturnBP=(f))!=NULL)?LogResult(__LINE__, PASSED,#f):LogResult(__LINE__, FAILED,#f));
#define EXPECT_TRUE_COMMENT(f,comment) ((f)?LogResult(__LINE__, PASSED,#f,0,#comment):LogResult(__LINE__, FAILED,#f,0,#comment));

#define ABORT_SUBTEST() THROW( new CSubTestException )

#define EXPECT_SUBTEST_OLD(f)  if(f) { LogResult(__LINE__, PASSED,#f);} \
				else { LogResult(__LINE__, FAILED,#f); ABORT_SUBTEST(); }

#define EXPECT_SUBTEST(f)   if(f) { LogResult(__LINE__, PASSED,#f);} \
							else {LogResult(__LINE__, FAILED,#f); }

class CSubTestException : public CException {
	DECLARE_DYNAMIC( CSubTestException );
};

#define InitProject SetProject
#define RestoreFocusToSrcWnd() MST.DoKeys("{ESC}")

enum ProjType
{
	PT_EXE,
	PT_EXT,
	PT_INT
};

enum TestType
{
	TT_TEST,
	TT_SUBTEST,
	TT_TESTCASE
};

enum StartEndTest
{
	START_TEST,
	END_TEST
};

typedef enum 
{
	EC_NO_STACK_FRAME, 
	EC_CURRENT_FRAME_AFTER_IP, 
	EC_CURRENT_FRAME_BEFORE_IP, 
	EC_CURRENT_FRAME_AT_IP, 
	EC_PARENT_FRAME_AFTER_IP, 
	EC_PARENT_FRAME_BEFORE_IP
} EC_EDIT_TYPE;

///////////////////////////////////////////////////////////////////////////////
//	class CECTestSet used as base for debugging tests

class CECTestSet : public CTest
{
//	DECLARE_TEST(CECTestSet, CIDESubSuite)
	DECLARE_DYNAMIC(CECTestSet)
	friend class CStartEndTest;

public:	
	// since this class is a base class for tests, it must have a ctor
	// that takes all test parameters for proper base class initialization
	CECTestSet(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);
//	CECTestSet() {};

protected: // data
	CString	m_strProjectDir;
	CString	m_strSrcDir;
	CString	m_strProjectName;
	CString	m_strProjectLoc;
	CString	m_szErrorText;
	int m_platform;
	ProjType m_projType;

	COSource src;
	COProject proj;
	CODebug dbg;
	COExpEval cxx;
	COBreakpoints bps;
	COStack stk;
	UIMemory uimem;
	COMemory mem;
	UIVariables uivar;
	COBrowse browse;
	COFile file;
	UIWatch uiwatch;
	UIQuickWatch uiqw;
	COLocals locals;

	typedef enum {PROJECT_EXE, PROJECT_DLL} PROJECT_TYPE;
	typedef enum {fDefault, fBuildOnly} PROJECT_FLAGS;

public:

	BOOL SetProject(LPCSTR projName, PROJECT_TYPE projType = PROJECT_EXE,
					PROJECT_FLAGS = fDefault,LPCSTR cfgName=NULL);
	BOOL PrepareProject(LPCSTR projName);
	BOOL IsProjectReady(ProjType projType);

	BOOL StartDebugging(void);
	BOOL StopDbgCloseProject(void);

	// shorthand method of filling EXPR_INFO object.
	void FillExprInfo(EXPR_INFO &expr_info, int state, LPCSTR type, LPCSTR name, LPCSTR value);

	// compares two EXPR_INFO objects
	BOOL ExprInfoIs(EXPR_INFO * expr_info_actual, EXPR_INFO * expr_info_expected, 
					int total_rows = 1);

	// tells whether string represents an address as displayed in an ee window.
	// for example: 0x1234abcd "xyz"
	// support function for ExprInfoIs()
	BOOL ValueIsAddress(CString str);

	void LogResult(int line, int result,LPCSTR szoperation, int code=0, LPCSTR szComment="");
	LPCSTR HomeDir(void);
	LPCSTR FullPath(LPCSTR szAddPath);
	void LogTestHeader(LPCSTR test_desc_str, TestType testtype = TT_TEST);
	void LogTestStartEnd(LPCSTR test_desc_str, StartEndTest startend = START_TEST);
	void LogSubTestHeader(LPCSTR test_desc_str);
	void LogTestBegin(LPCSTR test_desc_str);
	void LogTestEnd(LPCSTR test_desc_str);
	void LogTestEnd(LPCSTR test_desc_str, CTimeSpan elapsed_time, bool timing);

	void VerifyLocalsWndString(LPCSTR strType, LPCSTR strName,  LPCSTR strValue, int lineNumber = 1);
	BOOL LocalsWndStringIs(LPCSTR strType, LPCSTR strName,  LPCSTR strValue, int lineNumber = 1);
	CString GetBldLog();
	BOOL VerifyBuildOccured( BOOL iBuild );
	int VerifyBuildString( LPCSTR verifyString, BOOL fExist = TRUE );
	int VerifyDebugOutputString( LPCSTR verifyString, BOOL fExist = TRUE  );
	void VerifyECSuccess();

	BOOL CopyProjectSources( LPCSTR szSRCFileLoc, LPCSTR szProjLoc );
	void RemoveTestFiles( CString szProjLoc );

	BOOL ModifyCodeLine(LPCSTR szFind, LPCSTR szReplace);
	BOOL ModifyCode(LPCSTR szFind, LPCSTR szReplace, int nLines = 1);
	BOOL IsMsgBox(CString strMsg, CString strBtn);
};


class CStartEndTest
{

public:	
	// since this class is a base class for tests, it must have a ctor
	// that takes all test parameters for proper base class initialization
	CStartEndTest(LPCSTR testName, CECTestSet *test, bool timing = FALSE);
	~CStartEndTest();

protected: // data
	CString	m_testName;
	bool m_timing;
	CTime m_startTime;
	CTime m_endTime;
	CECTestSet *m_Test;
};


extern char szecEditTypes[6][256];


#endif	// __ECSET_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\cleanup.cpp ===
#include "stdafx.h"
#include <afxwin.h>
#include "cleanup.h"


void CleanUp(LPCSTR szDirName)
	
{

	char psz[_MAX_DIR];
	GetCurrentDirectory(_MAX_DIR - 1, psz);
	CString strPath;
	strPath = (CString)"src\\" + szDirName + "\\";

	OurKillFile(strPath, "*.dsp");
	OurKillFile(strPath, "*.dsw");
	OurKillFile(strPath, "*.opt");
	OurKillFile(strPath, "*.plg");
	OurKillFile(strPath, "*.ncb");
	OurKillFile(strPath, "*.mak");
	OurKillFile(strPath, "*.lnk");
	OurKillFile(strPath, "*.mdp");
	OurKillFile(strPath, "*.pdb");
	OurKillFile(strPath, "*.obj");
	OurKillFile(strPath, "*.ilk");
	OurKillFile(strPath, "*.dll");
	OurKillFile(strPath, "*.exe");
	OurKillFile(strPath, "*.pch");
	OurKillFile(strPath, "*.idb");
	OurKillFile(strPath, "*.tmp");

	OurKillFile(strPath + "\\Debug\\", "*.*");
	RemoveDirectory(strPath + "\\Debug");
}


void OurKillFile(LPCSTR szPathName, LPCSTR szFileName /* NULL */)

	{
	WIN32_FIND_DATA ffdImgFile;
	HANDLE hFile;
	CString str, strPattern, strPath = szPathName;

	if(szFileName != NULL)
		
		{
		if((strPath.Right(1) != "\\") && (szFileName[0] != '\\'))
			strPath += "\\";

		strPattern = strPath + szFileName; 
		}

	else
		strPattern = strPath;

	hFile = FindFirstFile(strPattern, &ffdImgFile);
	
	if(hFile != INVALID_HANDLE_VALUE)
		{
		do
			{
			str = strPath + ffdImgFile.cFileName;
			DeleteFile(str);
			} while(FindNextFile(hFile, &ffdImgFile));
		}

	FindClose(hFile);
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\BreakpointsCases.h ===
///////////////////////////////////////////////////////////////////////////////
//	BreakpointsCases.h
//
//	Created by:	MichMa		Date: 3/12/98
//
//	Description:
//		Declaration of the CECBreakpointsCases Class
//

#ifndef __BREAKPOINTSCASES_H__
#define __BREAKPOINTSCASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "BreakpointsSubsuite.h"


class CLocationTest 

{
public:

	BOOL m_bTestDone;
	EC_EDIT_TYPE m_ecEditType;
	CLocationTest(void){}

	CLocationTest(CLocationTest &LocationTestSrc)
	{
		m_bTestDone = LocationTestSrc.m_bTestDone;
		m_ecEditType = LocationTestSrc.m_ecEditType;
	}

	const CLocationTest& operator=(const CLocationTest &LocationTestSrc)
	{
		m_bTestDone = LocationTestSrc.m_bTestDone;
		m_ecEditType = LocationTestSrc.m_ecEditType;
		return *this;
	}
};


class CDataTest 

{
public:

	BOOL m_bTestDone;
	BOOL m_bConditional;
	EC_EDIT_TYPE m_ecEditType;
	CDataTest(void){}

	CDataTest(CDataTest &DataTestSrc)
	{
		m_bTestDone = DataTestSrc.m_bTestDone;
		m_ecEditType = DataTestSrc.m_ecEditType;
		m_bConditional = DataTestSrc.m_bConditional;
	}

	const CDataTest& operator=(const CDataTest &DataTestSrc)
	{
		m_bTestDone = DataTestSrc.m_bTestDone;
		m_ecEditType = DataTestSrc.m_ecEditType;
		m_bConditional = DataTestSrc.m_bConditional;
		return *this;
	}
};


///////////////////////////////////////////////////////////////////////////////
//	CECBreakpointsCases class

class CECBreakpointsCases : public CECTestSet

{
	DECLARE_TEST(CECBreakpointsCases, CECBreakpointsSubsuite)

private:
	// Data
	CString m_strProjBase;
	CString m_strSrcFullPath;
	CString m_strProjDirFullPath;

public:

	// Operations
	virtual void PreRun(void);
	virtual void Run();

	// Utilities
	void InitTests(void);
	BOOL GetBackToStartOfWinMain(void);
	void ApplyCodeChanges(void);

	// location test functions.
	BOOL DoTest(CLocationTest &LocationTest);
	void AddCodeToSource(EC_EDIT_TYPE ecEditType);

	// data test functions.
	BOOL DoTest(CDataTest &DataTest);
	void AddLocalToSource(CDataTest &DataTest);
	BOOL SetDataBreakpoint(CDataTest &DataTest);
};

#endif //__BREAKPOINTSCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\BreakpointsSubsuite.h ===
///////////////////////////////////////////////////////////////////////////////
//	BreakpointsSubsuite.h
//
//	Created by: MichMa		Date: 3/12/98
//
//	Description:
//		Declaration of the CECBreakpointsSubsuite class
//

#ifndef __BREAKPOINTSSUBSUITE_H__
#define __BREAKPOINTSSUBSUITE_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif


///////////////////////////////////////////////////////////////////////////////
// CECBreakpointsSubsuite class

class CECBreakpointsSubsuite : public CIDESubSuite
{
public:
	DECLARE_SUBSUITE(CECBreakpointsSubsuite)
	DECLARE_TESTLIST()
};


#endif //__BREAKPOINTSSUBSUITE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\BreakpointsSubsuite.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	BreakpointsSubsuite.cpp
//
//	Created by: MichMa		Date: 3/12/98			
//
//	Description:
//		implementation of the CECBreakpointsSubsuite class
//

#include "stdafx.h"
#include "BreakpointsSubsuite.h"
#include "afxdllx.h"

#include "..\cleanup.h"
#include "BreakpointsCases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;


/////////////////////////////////////////////////////////////////////////////
// CECBreakpointsSubsuite

IMPLEMENT_SUBSUITE(CECBreakpointsSubsuite, CIDESubSuite, "Edit & Continue: Breakpoints", "VCQA Debugger")

BEGIN_TESTLIST(CECBreakpointsSubsuite)
	TEST(CECBreakpointsCases, RUN)
END_TESTLIST()
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\breakpoints\BreakpointsCases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	BreakpointsCases.cpp
//											 
//	Created by:			Date:			
//		MichMa				3/12/98	
//
//	Description:								 
//		Implementation of CECBreakpointsCases		 

#include "stdafx.h"
#include "BreakpointsCases.h"
#include "..\cleanup.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
							   
IMPLEMENT_TEST(CECBreakpointsCases, CECTestSet, "Edit & Continue: Breakpoints", -1, CECBreakpointsSubsuite)


void CECBreakpointsCases::PreRun(void)
{
	// call the base class
	CTest::PreRun();
}


// tests for hitting location breakpoints set on new code.
CArray<CLocationTest, CLocationTest> LocationTests;
// tests for hitting data breakpoints set on new locals.
CArray<CDataTest, CDataTest> DataTests;
// tracks how many tests have been performed.
int giTestsPerformed = 0;


void CECBreakpointsCases::Run()

{
	// setup some paths we will use.
	if(GetSystem() & SYSTEM_DBCS)
		m_strProjBase = "[\\]^{|}Aa`@~ ec breakpoints app";
	else
		m_strProjBase = "ec breakpoints app";

	m_strSrcFullPath = GetCWD() + "src\\ec breakpoints app";
	m_strProjDirFullPath = m_strSrcFullPath + "\\" + m_strProjBase;

	// clean-up from the last run.
	OurKillFile(m_strProjDirFullPath + "\\Debug\\", "*.*");
	RemoveDirectory(m_strProjDirFullPath + "\\Debug");
	OurKillFile(m_strProjDirFullPath + "\\", "*.*");

	// set the options for the project we are building for this test.
	CProjWizOptions *pWin32AppWizOpt = new(CWin32AppWizOptions);
	pWin32AppWizOpt->m_strLocation = m_strSrcFullPath;
	pWin32AppWizOpt->m_strName = m_strProjBase;	
	
	// create the project.
	EXPECT_SUCCESS(proj.New(pWin32AppWizOpt));

	// create a new exe source file (to be edited) from the base exe source file.
	CopyFile(m_strSrcFullPath + "\\" + "base exe.cpp", m_strProjDirFullPath + "\\" + m_strProjBase + " exe.cpp", FALSE);
	// this appears to be a win32 timing problem. when running the test over the net, the server seems to keep the file 
	// locked even after CopyFile returns. an immediate call to SetFileAttributes will fail with a sharing violation.
	// so we wait a second here to make sure the server is totally finished processing the CopyFile request.
	Sleep(1000);
	// make the source file writable so we can edit it.
	SetFileAttributes(m_strProjDirFullPath + "\\" + m_strProjBase + " exe.cpp", FILE_ATTRIBUTE_NORMAL);

	// add source to the project.
	EXPECT_SUCCESS(proj.AddFiles(m_strProjBase + " exe.cpp"));
	// build the project.
	EXPECT_SUCCESS(proj.Build());
	// get the project into the intial debugging state.
	EXPECT_TRUE(dbg.StepInto());
	// attach the COSource object to the source file that the debugger opened.
	EXPECT_SUCCESS(src.AttachActive());
	
	// initialize info for the tests to perform.
	InitTests();
	// we only want to randomly do each test once.
	RandomNumberCheckList rnclTests(LocationTests.GetSize() + DataTests.GetSize());
	// the index of the next randomly selected test.
	int iTest;
	// flags whether or not a selected test was done.
	BOOL bTestDone;

	// the ranges of the different types of breakpoints tests within the random number checklist.
	int iLocationTestsStart = 0;
	int iLocationTestsEnd = LocationTests.GetSize() - 1;
	int iDataTestsStart = LocationTests.GetSize();
	int iDataTestsEnd = iDataTestsStart + DataTests.GetSize() - 1;
 
	// randomly do each test once.
	while((iTest = rnclTests.GetNext()) != -1)
	
	{
		// check if the test index selected is within the range of a CLocationTest test.
		if((iTest >= iLocationTestsStart) && (iTest <= iLocationTestsEnd) && (LocationTests.GetSize() > 0))
			bTestDone = DoTest(LocationTests[iTest - iLocationTestsStart]);
		// check if the test index selected is within the range of a CDataTest test.
		else if((iTest >= iDataTestsStart) && (iTest <= iDataTestsEnd) && (DataTests.GetSize() > 0))
			bTestDone = DoTest(DataTests[iTest - iDataTestsStart]);

		// if we were able to do the test, reset the debugger to the inital state.
		if(bTestDone)
			{EXPECT_TRUE(GetBackToStartOfWinMain());}
		// if we were unable to do the test at this time, make its index available again.
		else
			rnclTests.UndoLast();
	}

	// clean up.
	EXPECT_TRUE(dbg.StopDebugging());
	EXPECT_SUCCESS(proj.Close());
}


void CECBreakpointsCases::InitTests(void)

{	
	//******************************* LOCATION TESTS ********************************

	CLocationTest LocationTest;
	LocationTest.m_bTestDone = FALSE;

	// break on new code.
	LocationTest.m_ecEditType = EC_NO_STACK_FRAME;
	LocationTests.Add(LocationTest);
	
	LocationTest.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	LocationTests.Add(LocationTest); 
	
	LocationTest.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	LocationTests.Add(LocationTest); 

	LocationTest.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	LocationTests.Add(LocationTest); 
	
	LocationTest.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	LocationTests.Add(LocationTest); 

	LocationTest.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	LocationTests.Add(LocationTest); 

	//******************************* DATA TESTS ********************************

	CDataTest DataTest;
	DataTest.m_bTestDone = FALSE;
	DataTest.m_bConditional = FALSE;

	// data breakpoint on new local.
	DataTest.m_ecEditType = EC_NO_STACK_FRAME;
	DataTests.Add(DataTest);
	
	DataTest.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	DataTests.Add(DataTest); 
	
	DataTest.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	DataTests.Add(DataTest); 

	// conditional breakpoint on new local.
	DataTest.m_bConditional = TRUE;

	DataTest.m_ecEditType = EC_NO_STACK_FRAME;
	DataTests.Add(DataTest);
	
	DataTest.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	DataTests.Add(DataTest); 
	
	DataTest.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	DataTests.Add(DataTest); 

	DataTest.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	DataTests.Add(DataTest); 

	DataTest.m_bConditional = FALSE;
}


//********************************** LOCATION TESTS *********************************

BOOL CECBreakpointsCases::DoTest(CLocationTest &LocationTest)

{
	// this test will be performed.
	giTestsPerformed++;

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Breaking on new code using edit type \"%s\".", 
					   giTestsPerformed, szecEditTypes[LocationTest.m_ecEditType]);
	
	// each type of edit requires different steps.
	switch(LocationTest.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// insert the code after the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code after the first line of the function.
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the new code after the first line of the function.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			// step out of the edited function.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed on the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc1()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("WinMain"));
			// reset the ip to the call into the edited function.
			EXPECT_TRUE(src.Find("ExeFunc1();"));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code before the last line of the function.
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			// step out of the edited function.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed on the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc1()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("WinMain"));
			// reset the ip to the call into the edited function.
			EXPECT_TRUE(src.Find("ExeFunc1();"));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc2()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code before the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc2()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code after the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddCodeToSource(LocationTest.m_ecEditType);
			// set a bp on the new code.
			EXPECT_VALIDBP(bps.SetBreakpoint());
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed in the correct place.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc2()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("ExeFunc1"));
			// step out of the edited function so we can re-enter it to hit the bp.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed in the correct place.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc1()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("WinMain"));
			// reset the ip to the call into the edited function.
			EXPECT_TRUE(src.Find("ExeFunc1();"));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}
	}

	// hit the bp on the new code.
	EXPECT_TRUE(dbg.Go());
	// verify the debugger landed in the right place.
	EXPECT_TRUE(dbg.CurrentLineIs((CString)"while(0); // " + szecEditTypes[LocationTest.m_ecEditType]));
	EXPECT_TRUE(stk.CurrentFunctionIs("ExeFunc1"));
	// clear the breakpoint.
	EXPECT_TRUE(bps.ClearAllBreakpoints());
	// test was able to execute.
	LocationTest.m_bTestDone = TRUE;
	return TRUE;
}


void CECBreakpointsCases::AddCodeToSource(EC_EDIT_TYPE ecEditType)

{
	// set the cursor up according to the type of edit being performed.
	switch(ecEditType)
	{
		case EC_NO_STACK_FRAME:
		case EC_CURRENT_FRAME_AFTER_IP:
		case EC_CURRENT_FRAME_BEFORE_IP:
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			src.TypeTextAtCursor("{END}{ENTER}");
			break;
		}
		case EC_CURRENT_FRAME_AT_IP:
		{
			src.TypeTextAtCursor("{TAB}");
			break;
		}
		case EC_PARENT_FRAME_AFTER_IP:
		{
			src.TypeTextAtCursor("{HOME}{ENTER}{UP}{TAB}");
			break;
		}
	}

	// insert the code.
	src.TypeTextAtCursor("while(0);", TRUE);
	// append a comment stating the edit type for later use.
	src.TypeTextAtCursor((CString)" // " + szecEditTypes[ecEditType]);

	// editing at the current ip requires an Enter here to separate it from the next line,
	// and also an Up to put the cursor on the line added.
	if(ecEditType == EC_CURRENT_FRAME_AT_IP)
		src.TypeTextAtCursor("{ENTER}{UP}");
}


//********************************** DATA TESTS *********************************

BOOL CECBreakpointsCases::DoTest(CDataTest &DataTest)

{
	// this test will be performed.
	giTestsPerformed++;

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Hitting %s breakpoint on new local using edit type \"%s\".", 
					   giTestsPerformed, DataTest.m_bConditional ? "conditional" : "data", 
					   szecEditTypes[DataTest.m_ecEditType]);
	
	// each type of edit requires different steps.
	switch(DataTest.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// insert the local after the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the local after the first line of the function.
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the new code after the first line of the function.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			// step out of the edited function.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed on the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc1()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("WinMain"));
			// reset the ip to the call into the edited function.
			EXPECT_TRUE(src.Find("ExeFunc1();"));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code before the last line of the function.
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc2()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code before the last line of the function to edit.
			EXPECT_TRUE(src.Find("last line of ExeFunc1()"));
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			// TODO(michma - 3/21/98): due to product bug 31357 we need to step out to edited function before setting bp.
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc2()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the code after the first line of the function to edit.
			EXPECT_TRUE(src.Find("first line of ExeFunc1()"));
			AddLocalToSource(DataTest);
			// do the e&c and set the breakpoint.
			ApplyCodeChanges();
			EXPECT_TRUE(SetDataBreakpoint(DataTest));
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed in the correct place.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc2()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("ExeFunc1"));
			// step out of the edited function so we can re-enter it to hit the bp.
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger landed in the correct place.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to ExeFunc1()"));
			EXPECT_TRUE(stk.CurrentFunctionIs("WinMain"));
			// reset the ip to the call into the edited function.
			EXPECT_TRUE(src.Find("ExeFunc1();"));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}
	}

	// hit the bp on the new code.
	EXPECT_TRUE(dbg.Go());

	// create the name of the local added depending on the breakpoint type.
	CString strLocal;

	if(DataTest.m_bConditional)
		strLocal = (CString)"localConditionalBp" + szecEditTypes[DataTest.m_ecEditType];
	else
		strLocal = (CString)"localDataBp" + szecEditTypes[DataTest.m_ecEditType];

	// verify the debugger landed in the right place.
	EXPECT_TRUE(dbg.CurrentLineIs((CString)"while(0); // line after " + strLocal + " set to 1."));
	EXPECT_TRUE(stk.CurrentFunctionIs("ExeFunc1"));
	// verify that the new local has the correct value.
	EXPECT_TRUE(cxx.ExpressionValueIs(strLocal, 1));
	// clear the breakpoint.
	EXPECT_TRUE(bps.ClearAllBreakpoints());
	// test was able to execute.
	DataTest.m_bTestDone = TRUE;
	return TRUE;
}


void CECBreakpointsCases::AddLocalToSource(CDataTest &DataTest)

{
	// set the cursor up according to the type of edit being performed.
	switch(DataTest.m_ecEditType)
	{
		case EC_NO_STACK_FRAME:
		case EC_CURRENT_FRAME_AFTER_IP:
		case EC_CURRENT_FRAME_BEFORE_IP:
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			src.TypeTextAtCursor("{END}{ENTER}");
			break;
		}
		case EC_CURRENT_FRAME_AT_IP:
		{
			src.TypeTextAtCursor("{TAB}");
			break;
		}
		case EC_PARENT_FRAME_AFTER_IP:
		{
			src.TypeTextAtCursor("{HOME}{ENTER}{UP}{TAB}");
			break;
		}
	}

	CString strLocal;

	// create the name of the local to add depending on the breakpoint type.
	if(DataTest.m_bConditional)
		strLocal = (CString)"localConditionalBp" + szecEditTypes[DataTest.m_ecEditType];
	else
		strLocal = (CString)"localDataBp" + szecEditTypes[DataTest.m_ecEditType];
	
	// insert the local.
	src.TypeTextAtCursor((CString)"int " + strLocal + " = 0;{ENTER}");

	// editing at the current ip requires a Tab here to align it with the previous line.
	if(DataTest.m_ecEditType == EC_CURRENT_FRAME_AT_IP)
		src.TypeTextAtCursor("{TAB}");
	
	// insert an assignment for the local.
	src.TypeTextAtCursor(strLocal + " = 1;{ENTER}");

	// editing at the current ip requires a Tab here to align it with the previous line.
	if(DataTest.m_ecEditType == EC_CURRENT_FRAME_AT_IP)
		src.TypeTextAtCursor("{TAB}");
	
	// insert a line after the assignment so we can verify that we broke in the right place.
	src.TypeTextAtCursor((CString)"while(0); // line after " + strLocal + " set to 1.", TRUE); 

	// editing at the current ip requires an Enter here to separate it from the next line.
	if(DataTest.m_ecEditType == EC_CURRENT_FRAME_AT_IP)
		src.TypeTextAtCursor("{ENTER}");
}


BOOL CECBreakpointsCases::SetDataBreakpoint(CDataTest &DataTest)

{
	if(DataTest.m_bConditional)
	
	{
		// put the cursor on the line where the breakpoint will be hit.
		CString strLocal = (CString)"localConditionalBp" + szecEditTypes[DataTest.m_ecEditType];
		EXPECT_TRUE(src.Find((CString)"while(0); // line after " + strLocal + " set to 1."));
		int iLine = src.GetCurrentLine();

		return bps.SetBreakpoint(
			iLine,
			(CString)"{ExeFunc1,,} " + strLocal + " == 1",
			COBP_TYPE_IF_EXP_TRUE, 0) != NULL;
	}	
	
	else
	{
		return bps.SetBreakOnExpr(
			(CString)"{ExeFunc1,,} localDataBp" + szecEditTypes[DataTest.m_ecEditType]+ " == 1", 
			COBP_TYPE_IF_EXP_TRUE) != NULL;
	}
}


//******************************* MISC FUNCTIONS *******************************

BOOL CECBreakpointsCases::GetBackToStartOfWinMain(void)

{
	/*
	if(!stk.CurrentFunctionIs("WinMain"))
		EXPECT_TRUE(stk.RunToFrame("WinMain"));
	
	EXPECT_TRUE(src.Find("first line of WinMain()"));
	EXPECT_TRUE(dbg.SetNextStatement());

	if(dbg.AtSymbol("WinMain"))
		return TRUE;
	else
		return FALSE;
	*/
	/*
	dbg.StopDebugging();
	proj.WaitUntilBuildDone(1);
	proj.RebuildAll();
	dbg.StepInto();
	*/
	return dbg.Restart();
}


// TODO(michma): this needs its own CODebug function.
void CECBreakpointsCases::ApplyCodeChanges(void)
{
	MST.DoKeys("%dy");
	proj.WaitUntilBuildDone();
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\ecset.cpp ===
//
// dbgset.cpp
//
//	Created by		Date
//		TomSe		9/2/94
//
//	Description
//		Definition of base class containing common data and methods for all
//		Debug Test Sets.


#include "stdafx.h"
#include "ecset.h"
#include "guitarg.h"

IMPLEMENT_DYNAMIC( CSubTestException, CException );

//IMPLEMENT_TEST(CECTestSet, CTest, "EC base class", -1, CIDESubSuite)
IMPLEMENT_DYNAMIC(CECTestSet, CTest)

CECTestSet::CECTestSet(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CTest(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}

BOOL CECTestSet::SetProject(LPCSTR projName, PROJECT_TYPE projType /* PROJECT_EXE */, PROJECT_FLAGS flags /* fDefault */, LPCSTR cfgName /*NULL*/)
{
	const char* const THIS_FUNCTION = "SetProject()";
	CString projPathAndName = projName;
	int iName = projPathAndName.ReverseFind('\\');
	if( iName < 0 )
	{
		m_strProjectDir = FullPath("src");
		m_strProjectName = projName;
	}
	else
	{
		m_strProjectDir = (CString)FullPath("src") + "\\" + projPathAndName.Left(iName);
		m_strProjectName = projPathAndName.Mid(iName + 1);
	}

	CIDESubSuite* pSubSuite=(CIDESubSuite*)GetSubSuite();
	ASSERT(pSubSuite->IsKindOf(RUNTIME_CLASS(CIDESubSuite))); //our tests are IDE tests only
	// get the toolset environment settings.
	CSettings *settingsToolsetEnv = pSubSuite->GetToolset()->GetEnvSettings();
	// build the path, lib, and include environment strings.

	CString cstrPathEnv = settingPathEnv + CString("=") + settingsToolsetEnv->GetTextValue(settingPathEnv);
	CString cstrLibEnv = settingLibEnv + CString("=") + settingsToolsetEnv->GetTextValue(settingLibEnv);
 	CString cstrIncludeEnv = settingIncludeEnv + CString("=") + settingsToolsetEnv->GetTextValue(settingIncludeEnv);

	// get windows and system dir and append to path environment string.
	CString cstrWindowsDir, cstrSystemDir;
	// each dir is prepended with a semi-colon as a separator. 
	char chDirBuf[MAX_PATH] = ";";
 	GetWindowsDirectory(&chDirBuf[1], MAX_PATH);	// &chDirBuf[0] = ';'
	cstrWindowsDir = chDirBuf;
	GetSystemDirectory(&chDirBuf[1], MAX_PATH);		// &chDirBuf[0] = ';'
	cstrSystemDir = chDirBuf;
	cstrPathEnv += cstrWindowsDir + cstrSystemDir;

	// nmake's environment block.
	char chNmakeEnv[1024];
	// pointer to navigate through block.
	char *pchNmakeEnv = chNmakeEnv;

	// put the path, lib, and include environment strings into the block.
	// each string is terminated by null.
	strcpy(pchNmakeEnv, cstrPathEnv);
	pchNmakeEnv += strlen(pchNmakeEnv) + 1;
	strcpy(pchNmakeEnv, cstrLibEnv);
	pchNmakeEnv += strlen(pchNmakeEnv) + 1;
	strcpy(pchNmakeEnv, cstrIncludeEnv);
	// block is terminated by additional null.
	pchNmakeEnv[strlen(pchNmakeEnv) + 1] = 0;
 
	// to find nmake.exe in the toolset path environment, 
	// we'll use cstrPathFrag to search	for and extract directories
	// from cstrPathEnv	(minus first 5 characters which are "PATH=").
	CString cstrPathFrag = cstrPathEnv.Mid(5);
	// stores dir extracted from cstrPathFrag.
	CString cstrDir;
	// stores index of next semi-colon (dir separator) in cstrPathEnv.
	int indexSemi;
	// handle to nmake.exe returned by FindFirstFile().
	HANDLE hNmake;
	// FindFirstFile param.
	WIN32_FIND_DATA fdFindData;

	while(1)
		
		{
		// find the next semi-colon which terminates the next dir to search.
		indexSemi = cstrPathFrag.Find(';');

		// if a semi-colon was found, extract the dir it terminates. otherwise
		// we are at the final dir in the path environment. 
		if(indexSemi != -1)
			cstrDir = cstrPathFrag.Left(indexSemi);
		else
			cstrDir = cstrPathFrag;
			
		// only want to search dirs at least 3 chars long. for example:
		// path  = C:\;
		// index = 0123
		if(cstrDir.GetLength() >= 3)
			hNmake = FindFirstFile(cstrDir + "\\nmake.exe", &fdFindData);
  		
		// stop searching if nmake was found in cstrPathFrag.
		if(hNmake != INVALID_HANDLE_VALUE)
			break;

		// if no semi-colon was found or it was the last char in the path, 
		// then we just searched the final dir in the environment string, 
		// but still haven't found nmake. 
	 	if((indexSemi == -1) || (cstrPathFrag.GetLength() == (indexSemi + 1)))
			{
			m_pLog->RecordInfo("ERROR in %s: could not find nmake.exe in path environment "
							   "specified by CAFE.", THIS_FUNCTION);
			return FALSE;
			}
		else
			// advance to the start of the next dir after the semi-colon.
			cstrPathFrag = cstrPathFrag.Mid(indexSemi + 1);
		}


	// determine the configuration switch that we need to pass to nmake.
	// also set platform member value for easy access by tests.
	if(cfgName==NULL)
	switch(GetUserTargetPlatforms())
		{
        case PLATFORM_WIN32_ALPHA:
            cfgName = "alpha";
            m_platform = PLATFORM_WIN32_ALPHA;
            break;
		case PLATFORM_WIN32_X86:
			cfgName = "x86";
			m_platform = PLATFORM_WIN32_X86;
			break;
		}

	// project name and configuration switch we will pass to nmake.
	CString cstrProjAndConfig = "\"" + m_strProjectName + ".mak\" CFG=" + cfgName;
	if( UIWB.GetPcodeSwitch() )
		cstrProjAndConfig += " PCODE=yes";
	// CreateProcess() params.
   	STARTUPINFO siStartInfo;
	PROCESS_INFORMATION piProcInfo;
	// this is the minium initialization of STARTUPINFO required for CreateProcess() to work.
	memset(&siStartInfo, 0, sizeof(STARTUPINFO));
	siStartInfo.cb = sizeof(STARTUPINFO);
	siStartInfo.wShowWindow = SW_SHOWDEFAULT;
	// fully qualified nmake.exe cmd line (cstrDir is directory we found nmake in earlier).
	char chNmakeCmdLine[MAX_PATH];
	strcpy(chNmakeCmdLine, cstrDir + "\\nmake.exe /a /f " + cstrProjAndConfig);
	
	// before spawning nmake make sure Debugger is not running, so vc50.pdb is released
	if(dbg.GetDebugState() != NotDebugging)
		dbg.StopDebugging();

	// spawn nmake in the project dir.
	BOOL bRet = CreateProcess(NULL, chNmakeCmdLine, NULL, NULL, TRUE, 0, chNmakeEnv,
							  m_strProjectDir, &siStartInfo, &piProcInfo);
	
	// verify that nmake was successfully spawned.						  
	if(!bRet)
		{
		m_pLog->RecordInfo("ERROR in %s: nmake.exe found but could not be spawned.", THIS_FUNCTION);
		return FALSE;
		}

	// nmake's exit code returned by GetExitCodeProcess().
	DWORD dwNmakeExitCode;

	// wait up to 60 minutes for nmake to terminate.
	for(int i = 0; i < 3600; i++)
		
		{
		Sleep(1000);
		// get nmake's exit code (if it has finished).
		GetExitCodeProcess(piProcInfo.hProcess, &dwNmakeExitCode);
		
		// keep sleeping if nmake is still running.
		if(dwNmakeExitCode != STILL_ACTIVE)
			break;
		}

	// verify that nmake finished within the allotted time.
	if(i == 3600)
		{
		m_pLog->RecordInfo("ERROR in %s: after 60 minutes nmake is still running.", THIS_FUNCTION);
		return FALSE;
		}

	// verify that nmake was successful in building the executable.
	if(dwNmakeExitCode != 0)
		{
		m_pLog->RecordInfo("ERROR in %s: nmake.exe returned error code %d.", THIS_FUNCTION, dwNmakeExitCode);
		return FALSE;
		}

	// wait until nmake's window has gone away.
	if(!MST.WFndWndWait("nmake.exe", FW_PART + FW_NOEXIST, 5))
		{
		m_pLog->RecordInfo("ERROR in %s: after 5 seconds nmake's window still exists.", THIS_FUNCTION);
		return FALSE;
		}

	// stop here if we only want to build.
	if(flags & fBuildOnly)
		return TRUE;

	// project exe has same base as makefile (i.e. xxx.mak/xxx.exe/xxx.dll)
	// we want to strip out any prepended path and just use the file name
	// because we use this name to set the remote path, and the host
	// path will usually not match the remote path.
	CString cstrProjectExe = m_strProjectName.Right(m_strProjectName.GetLength() -
							 m_strProjectName.ReverseFind('\\') - 1) + 
							 ((projType == PROJECT_EXE) ? ".exe" : ".dll");


	// we need to make sure the debugger isn't running on a previous project
	// or COWorkSpace::CloseAllWindows will fail.
	if(dbg.GetDebugState() != NotDebugging)
		dbg.StopDebugging();

	// we need to close all windows before opening the exe or COProject::Open will fail.
 	COWorkSpace ws;
	ws.CloseAllWindows();

	// open the executable.	
	if(proj.Open(m_strProjectDir + "\\" + cstrProjectExe) != ERROR_SUCCESS)
		{
		m_pLog->RecordInfo("ERROR in %s: could not open \"%s\".", THIS_FUNCTION, 
							m_strProjectDir + "\\" + cstrProjectExe);
		return FALSE;
		}

	// allows us to access ide's connection settings via pconnec.
	COConnection *pconnec = pSubSuite->GetIDE()->GetConnectionInfo();
//	COConnection *pconnec = GetSubSuite()->GetIDE()->GetConnectionInfo();

	// set the connection as specified by the user.
	if(pconnec->SetAll() != ERROR_SUCCESS)
		{
		m_pLog->RecordInfo("ERROR in %s: could not set connection settings.", THIS_FUNCTION);
		return FALSE;
		}
	
	// if indicated, set the remote path and copy the executable to the remote machine.
	if(pconnec->GetUserConnections() != CONNECTION_LOCAL)
		
		{
		if(proj.SetRemotePath(cstrProjectExe) != ERROR_SUCCESS)
			{
			m_pLog->RecordInfo("ERROR in %s: could not set remote path using \"%s\".", 
							   THIS_FUNCTION, cstrProjectExe);
			return FALSE;
			}
		
		if(proj.UpdateRemoteFile(m_strProjectDir + "\\" + cstrProjectExe) != ERROR_SUCCESS)
			{
			m_pLog->RecordInfo("ERROR in %s: could not update remote file using \"%s\".", 
							   THIS_FUNCTION, m_strProjectDir + "\\" + cstrProjectExe);
			return FALSE;
			}
		}
	
	return TRUE;
}


BOOL CECTestSet::PrepareProject(LPCSTR projName)
{
	const char* const THIS_FUNCTION = "PrepareProject()";
	CString projPathAndName = projName;
	int iName = projPathAndName.ReverseFind('\\');
	if( iName < 0 )
	{
		m_strProjectDir = FullPath("apps");
		m_strProjectName = projName;
	}
	else
	{
		m_strProjectDir = (CString)FullPath("apps") + "\\" + projPathAndName.Left(iName);
		m_strProjectName = projPathAndName.Mid(iName + 1);
	}


	// project exe has same base as makefile (i.e. xxx.mak/xxx.exe/xxx.dll)
	// we want to strip out any prepended path and just use the file name
	// because we use this name to set the remote path, and the host
	// path will usually not match the remote path.
/*	CString cstrProjectExe = m_strProjectName.Right(m_strProjectName.GetLength() -
							 m_strProjectName.ReverseFind('\\') - 1) + 
							 ((projType == PROJECT_EXE) ? ".exe" : ".dll");
*/
	CString cstrProjectExe = m_strProjectName;

	// we need to make sure the debugger isn't running on a previous project
	// or COWorkSpace::CloseAllWindows will fail.
	if(dbg.GetDebugState() != NotDebugging)
		dbg.StopDebugging();

	// we need to close all windows before opening the exe or COProject::Open will fail.
 	COWorkSpace ws;
	ws.CloseAllWindows();

	// open the executable.	
	if(proj.Open(m_strProjectDir + "\\" + cstrProjectExe) != ERROR_SUCCESS)
		{
		m_pLog->RecordInfo("ERROR in %s: could not open \"%s\".", THIS_FUNCTION, 
							m_strProjectDir + "\\" + cstrProjectExe);
		return FALSE;
		}

	CIDESubSuite* pSubSuite=(CIDESubSuite*)GetSubSuite();
	ASSERT(pSubSuite->IsKindOf(RUNTIME_CLASS(CIDESubSuite))); //our tests are IDE tests only

	// allows us to access ide's connection settings via pconnec.
	COConnection *pconnec = pSubSuite->GetIDE()->GetConnectionInfo();
//	COConnection *pconnec = GetSubSuite()->GetIDE()->GetConnectionInfo();

	// set the connection as specified by the user.
	if(pconnec->SetAll() != ERROR_SUCCESS)
		{
		m_pLog->RecordInfo("ERROR in %s: could not set connection settings.", THIS_FUNCTION);
		return FALSE;
		}
	
	// if indicated, set the remote path and copy the executable to the remote machine.
	if(pconnec->GetUserConnections() != CONNECTION_LOCAL)
		
		{
		if(proj.SetRemotePath(cstrProjectExe) != ERROR_SUCCESS)
			{
			m_pLog->RecordInfo("ERROR in %s: could not set remote path using \"%s\".", 
							   THIS_FUNCTION, cstrProjectExe);
			return FALSE;
			}
		
		if(proj.UpdateRemoteFile(m_strProjectDir + "\\" + cstrProjectExe) != ERROR_SUCCESS)
			{
			m_pLog->RecordInfo("ERROR in %s: could not update remote file using \"%s\".", 
							   THIS_FUNCTION, m_strProjectDir + "\\" + cstrProjectExe);
			return FALSE;
			}
		}
	
	return TRUE;
}


/*
** start debugging and do some initialization.  
*/

BOOL CECTestSet::StartDebugging(void)
{
	BOOL bSuccess; 
	COSource src;	

	bps.ClearAllBreakpoints();		// Clear All Breakpoints Just in case.
	dbg.StepOver(1);				// Start debugging session with initial trace.
	src.AttachActiveEditor();		// WinslowF
	bSuccess = dbg.AtSymbol("WinMain");

	// attach to the editor window the debugger opened
	bSuccess &= src.AttachActiveEditor();

	UIWB.SetMemoryFormat(MEM_FORMAT_BYTE); 
	dbg.SetSteppingMode(SRC); 		
	return bSuccess;
}


BOOL CECTestSet::StopDbgCloseProject(void)
{
	if (dbg.GetDebugState() != NotDebugging)
		dbg.StopDebugging();
	UIWB.CloseAllWindows();
	proj.Close();						

	return TRUE;
}


int ReturnCode =0;
bp  * ReturnBP =0;

void CECTestSet::LogResult(int line, int result,LPCSTR szoperation, int code /* 0 */, LPCSTR szComment /* "" */)

	{
	CString szOpCom = (CString)szoperation + "  " + szComment;
	if(result == PASSED)
		m_pLog->RecordSuccess("%s", szOpCom);
	else
		{
		CString szextra;
		char chbuf[24];
		szextra = szextra + "Error Code = " + itoa(code, chbuf, 10);
		m_pLog->RecordFailure("LINE %d %s", line, szextra + szOpCom);
		}
	}


//
//	Returns the current directory of the first time this function was called.
//
LPCSTR CECTestSet::HomeDir()
{
	static CString szCurDir;

	if( szCurDir.IsEmpty() )
	{
		char* psz = szCurDir.GetBufferSetLength(_MAX_DIR);

		GetCurrentDirectory(_MAX_DIR - 1, psz);
		szCurDir.ReleaseBuffer(-1);
		if( szCurDir.Right(1) != '\\' )
			szCurDir += "\\";
	}
 	return szCurDir;
}

//
//	Returns the fully qualified path with szAddPath appended to the breadth dir.	
//
LPCSTR CECTestSet::FullPath( LPCSTR szAddPath )
{
	static CString szFilespec;

	szFilespec = HomeDir();
	szFilespec += szAddPath;

	return szFilespec;
}


void CECTestSet::FillExprInfo(EXPR_INFO &expr_info, 
								 int state, LPCSTR type, LPCSTR name, LPCSTR value)

	{
	expr_info.state = state;
	expr_info.type = type;
	expr_info.name = name;
	expr_info.value = value;
	}


BOOL CECTestSet::ExprInfoIs(EXPR_INFO * expr_info_actual, EXPR_INFO * expr_info_expected, 
							   int total_rows /* 1 */)
	
	{
	for(int i = 0; i < total_rows; i++)

		{
		if(expr_info_actual[i].state != expr_info_expected[i].state)
			
			{
			m_pLog->RecordFailure("ERROR in ExprInfoIs(): state is %d instead of %d", 
								  expr_info_actual[i].state, expr_info_expected[i].state);

			return FALSE;
			}

		if(expr_info_actual[i].type != expr_info_expected[i].type)
			
			{
			m_pLog->RecordFailure("ERROR in ExprInfoIs(): type is %s instead of %s", 
								  expr_info_actual[i].type, expr_info_expected[i].type);

			return FALSE;
			}

		if(expr_info_actual[i].name != expr_info_expected[i].name)
			
			{
			m_pLog->RecordFailure("ERROR in ExprInfoIs(): name is %s instead of %s", 
								  expr_info_actual[i].name, expr_info_expected[i].name);

			return FALSE;
			}

		if(expr_info_expected[i].value.Mid(0, 7) != "UNKNOWN") 

			{
			BOOL value_tests_passed;

			if(expr_info_expected[i].value.Mid(0, 7) == "ADDRESS")
				
				{
				value_tests_passed = ValueIsAddress(expr_info_actual[i].value);

				// is extra data besides address expected? (ex. peek at string)
				if(expr_info_expected[i].value != "ADDRESS")
				
					{
					// user must supply extra data to avoid CString assert.
					EXPECT(expr_info_expected[i].value.GetLength() > 8);

					// make sure actual string is long enough so we avoid CString assert.
					if(expr_info_actual[i].value.GetLength() > 10)
					{
						// verify extra data is correct.
						if(expr_info_actual[i].value.Mid(10) ==  (" " + expr_info_expected[i].value.Mid(8)))
							value_tests_passed=TRUE;	
					}
					else
						// actual string wasn't long enough to contain extra data.
						value_tests_passed = FALSE;
					}
				}	 
	
			else	
				value_tests_passed = expr_info_actual[i].value == expr_info_expected[i].value;

			if(!value_tests_passed)
				
				{
				m_pLog->RecordFailure("ERROR in ExprInfoIs(): value is %s instead of %s", 
									  expr_info_actual[i].value, expr_info_expected[i].value);

				return FALSE;
				}
			}
		}

	return TRUE;
	}


BOOL CECTestSet::ValueIsAddress(CString str)
	{
	return (str.Mid(0, 2) == "0x") && 
		   (str.Mid(2).SpanIncluding("0123456789abcdef").GetLength() == 8);
	}


void CECTestSet::LogTestHeader(LPCSTR test_desc_str, TestType testtype /* TT_TEST */)
{
	if( testtype == TT_TEST )
		m_pLog->RecordInfo("");
	m_pLog->RecordInfo("");
	CString strTestType;
    switch (testtype)
    {
		case TT_TEST:
			strTestType = "TEST";
			break;

		case TT_SUBTEST:
			strTestType = "SubTest";
			break;

		case TT_TESTCASE:
			strTestType = "TestCase";
			break;
	}

	m_pLog->RecordInfo("%s:: %s", strTestType, test_desc_str);
}

void CECTestSet::LogTestStartEnd(LPCSTR test_desc_str, StartEndTest startend /* START_TEST */)
{
	CString strTest = "END";

	if( startend == START_TEST)
	{
		strTest = "START";
		m_pLog->RecordInfo("");
	}
 
	strTest += "***TEST";

	m_pLog->RecordInfo("%s: %s", strTest, test_desc_str);
}

void CECTestSet::LogTestBegin(LPCSTR test_desc_str)
{
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("BEGIN***TEST: %s", test_desc_str);
}

void CECTestSet::LogTestEnd(LPCSTR test_desc_str)
{
	m_pLog->RecordInfo("END***TEST: %s", test_desc_str);
}

void CECTestSet::LogTestEnd(LPCSTR test_desc_str, CTimeSpan elapsed_time, bool timing /* FALSE */)
{
//	GetLog()->RecordInfo("***TEST elapsed time %s", elapsed_time.Format("%H:%M:%S"));
	if( timing )
	{
		m_pLog->RecordInfo("END***TEST: %s  elapsed time %s", test_desc_str, elapsed_time.Format("%H:%M:%S"));
	}
	else
	{
		m_pLog->RecordInfo("END***TEST: %s", test_desc_str);
	}
}

void CECTestSet::LogSubTestHeader(LPCSTR test_desc_str)
{
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("SubTest: %s", test_desc_str);
}

void CECTestSet::VerifyLocalsWndString(LPCSTR strType, LPCSTR strName,  LPCSTR strValue, int lineNumber)
{
	uivar.Activate();
	EXPECT_TRUE(uivar.SetPane(PANE_LOCALS) == ERROR_SUCCESS);

	EXPR_INFO expr_info;
	uivar.GetAllFields(&expr_info, lineNumber, 1);
	CString csType = expr_info.type;
	CString csName = expr_info.name;
	CString csValue = expr_info.value;


	WriteLog( (csType == strType && csName == strName && 
		csValue.Find(strValue) >= 0) ? PASSED : FAILED,
		"Current Locals line: \"%s %s %s \" Expectation: \"%s %s %s \"", 
		(LPCSTR)csType, (LPCSTR)csName, (LPCSTR)csValue, 
		(LPCSTR)strType, (LPCSTR)strName, (LPCSTR)strValue );
}

BOOL CECTestSet::LocalsWndStringIs(LPCSTR strType, LPCSTR strName,  LPCSTR strValue, int lineNumber)
{
	uivar.Activate();
	EXPECT_TRUE(uivar.SetPane(PANE_LOCALS) == ERROR_SUCCESS);
	BOOL ret = FALSE;

	EXPR_INFO expr_info;
	if(uivar.GetAllFields(&expr_info, lineNumber, 1)!=ERROR_SUCCESS)
		return FALSE;
	if(strcmp(strType, expr_info.type)==0 &&
	   strcmp(strName, expr_info.name)==0 &&
	   strstr(strValue,expr_info.value)!=NULL)
		ret = TRUE;

	return ret;
}

BOOL CECTestSet::CopyProjectSources( LPCSTR szSRCFileLoc, LPCSTR szProjLoc )
{
	CString szPattern		= (CString)szSRCFileLoc + "*.*";

	// Copy sources to the project directory
	WIN32_FIND_DATA ffdImgFile;
    HANDLE hFile = FindFirstFile(szPattern, &ffdImgFile);
    if( hFile != INVALID_HANDLE_VALUE )
    {
        do
        {
			CopyFile( (CString)szSRCFileLoc + ffdImgFile.cFileName, (CString)szProjLoc + ffdImgFile.cFileName, FALSE );
			SetFileAttributes((CString)szProjLoc + ffdImgFile.cFileName, FILE_ATTRIBUTE_NORMAL );
		}
        while( FindNextFile(hFile, &ffdImgFile) );
        EXPECT( GetLastError() == ERROR_NO_MORE_FILES );
		return TRUE;
    }
	else
	{
		m_pLog->RecordFailure("Could not copy sources from %s to %s", szSRCFileLoc, szProjLoc);
		return FALSE;
	}
}

void CECTestSet::RemoveTestFiles( CString szProjLoc )
{
	KillAllFiles( szProjLoc, TRUE );
}
	
BOOL CECTestSet::ModifyCodeLine(LPCSTR szFind, LPCSTR szReplace)
{
	if( src.Find(szFind) )
	{
//		MST.DoKeys("{Delete}");
/* src.TypeTextAtCursor(szReplace, FALSE); doesn't work as well as InsertText():
 for some reason it cannot get the editor 
*/
		MST.DoKeys(szReplace, TRUE);
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

BOOL CECTestSet::ModifyCode(LPCSTR szFind, LPCSTR szReplace, int nLines /* 1 */)
{
	CString cStr = szReplace;
	CString str1;

	if( src.Find(szFind) )
	{
		MST.DoKeys("{Home}");
		for( int i = 1; i < nLines; i++ )
		{	
			MST.DoKeys("+{down}");
		}
		MST.DoKeys("+{End}");
		int length = cStr.GetLength();
		if( length <= 0)
		{
			MST.DoKeys("{Delete}");
			return TRUE;
		}

		int right;
		while( length )
		{
			right = cStr.Find("{Enter}");
			if( right < 0)
			{
				MST.DoKeys(cStr, TRUE);
				return TRUE;
			}
			else 
			{
				str1 = cStr.Mid(0, right);
				MST.DoKeys(str1, TRUE);
				MST.DoKeys("{Enter}");
				if( length = (length - right - 7) )
				{
					cStr = cStr.Mid(right + 7, length);
				}
			}
		}
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

BOOL CECTestSet::IsMsgBox(CString strMsg, CString strBtn)
{	
	if( WaitMsgBoxText( strMsg, 10 ) )
	{
		MST.WButtonClick( strBtn );
		return TRUE;
	}
	else
		return FALSE;
}

CString CECTestSet::GetBldLog()
{
	CString BuildRecord;
	CString str;
	
	// Get build data
	UIWB.DoCommand(IDM_WINDOW_ERRORS,DC_ACCEL);  // goto output window
	MST.DoKeys("^{END}");			// goto end
	MST.DoKeys("+^{HOME}");			// select whole build record
	MST.DoKeys("^c");				// copy it
	GetClipText(BuildRecord);       // get text from clipboard
	MST.DoKeys("{ESC}");            // return focus from output window
	BuildRecord.MakeLower();
	return (BuildRecord);
	
};


BOOL CECTestSet::VerifyBuildOccured( BOOL iBuild )
{
	// iBuild == TRUE  -  project should be rebuilt
	// iBuild == FALSE  -  project should not be rebuilt

	// Get the output window contents
	CString szBldLog = GetBldLog();
	if (szBldLog == "")
	{
		m_pLog->RecordFailure("Incorrect build: Output window is empty");
		return FALSE;
	}

	int iFoundCompiling = szBldLog.Find ("compiling");	// International ?
	int iFoundLinking = szBldLog.Find ("linking");		// International ?

	if( iBuild )
	{
		if( (iFoundCompiling < 0) && (iFoundLinking < 0) )
		{
			m_pLog->RecordFailure("Incorrect build: can't find 'Compiling' or 'Linking");
			return FALSE;
		}
	}
	else
	{
		if ( (iFoundCompiling > 0) || (iFoundLinking > 0) )
		{
			m_pLog->RecordFailure("Nothing change, the project shouldn't be rebuilt.");
			return FALSE;
		}
	}

	return TRUE;
}

int CECTestSet::VerifyBuildString( LPCSTR verifyString, BOOL fExist /* TRUE */ )
{
	int iFoundString;

	// Get the output window contents
	CString szBldLog = GetBldLog();
	CString testString = verifyString;

	// For some reason the output window text is always lower case when extracted.

	testString.MakeLower();
	iFoundString = szBldLog.Find(testString);

	if ( (iFoundString < 0) && fExist )
	{
		m_pLog->RecordFailure("Can't find %s", verifyString);
	}
	
	if ( (iFoundString >= 0) && !fExist )
	{
		m_pLog->RecordFailure("Found %s : it should not be there", verifyString);
	}

	return iFoundString;
}

int CECTestSet::VerifyDebugOutputString( LPCSTR verifyString, BOOL fExist /* TRUE */ )
{
	int iFoundString;
	CString csLog;
	CString testString = verifyString;

	// Get the output window contents
	// TODO(michma): mismatch with CODebug here. need to merge?
	dbg.SetDebugOutputPane(IDSS_PANE_DEBUG_OUTPUT);
	MST.DoKeys("^{END}");			// goto end
	MST.DoKeys("+^{HOME}");			// select whole build record
	MST.DoKeys("^c");				// copy it
	GetClipText(csLog);       // get text from clipboard
	MST.DoKeys("{ESC}");            // return focus from output window
	csLog.MakeLower();

	// For some reason the output window text is always lower case when extracted.
	testString.MakeLower();
	iFoundString = csLog.Find(testString);

	if ( (iFoundString < 0) && fExist )
	{
		m_pLog->RecordFailure("Can't find %s", verifyString);
	}
	
	if ( (iFoundString >= 0) && !fExist )
	{
		m_pLog->RecordFailure("Found %s : it should not be there", verifyString);
	}

	return iFoundString;
}

void CECTestSet::VerifyECSuccess()
{
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
//		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
}

CStartEndTest::CStartEndTest(LPCSTR testName, CECTestSet *test, bool timing /*=FALSE*/)
{
	m_testName = testName;
	m_Test = test;
	if( timing )
	{
		m_startTime = CTime::GetCurrentTime();
		m_timing = TRUE;
		m_Test->LogTestBegin( m_testName );
	}
}

CStartEndTest::~CStartEndTest()
{
	if( m_timing )
	{
		m_endTime = CTime::GetCurrentTime();
		CTimeSpan elapsed_time(m_endTime - m_startTime);
		m_Test->LogTestEnd( m_testName, elapsed_time, m_timing );
	}
	else
		m_Test->LogTestEnd( m_testName );
}


char szecEditTypes[6][256] =
{
	"EC_NO_STACK_FRAME",
	"EC_CURRENT_FRAME_AFTER_IP",
	"EC_CURRENT_FRAME_BEFORE_IP",
	"EC_CURRENT_FRAME_AT_IP", 
	"EC_PARENT_FRAME_AFTER_IP", 
	"EC_PARENT_FRAME_BEFORE_IP"
};

BOOL CECTestSet::IsProjectReady(ProjType projType)
{
	switch (projType)
	{
	case PT_EXE:
		m_strProjectName = "ecconsol";
		break;
	case PT_EXT:
		m_strProjectName = "ecwinapp";
		break;
	case PT_INT:
		m_strProjectName = "ecmfcapp";
		break;
	}
	
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	if (projType == PT_INT)	  // MFC app
		RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	if (projType == PT_INT)	   // MFC app
	{
		CreateDirectory(m_strProjectLoc + "res\\", 0);          
		EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );
	}
	if (projType == PT_EXE)	   // EXE consol app
	{
		if( SetProject(szProjPathName) )
			return TRUE;
	}
	else
	{
		int iWaitForBuild = 3;	// Minutes to wait for the build to complete
		if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
		{
			proj.SetExeForDebugSession(m_strProjectName + ".exe");
			return TRUE;
		}
	}
	return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\stdafx.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.CPP
//
//	Created by :			:
//		VCBU QA		
//
//	Description :
//		source file that includes just the standard include
//
//		stdafx.pch will be the pre-compiled header
//		stdafx.obj will contain the pre-compiled type information
//

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\stdafx.h ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.H
//
//	Created by :			Date :
//		VCBU QA		
//
//	Description :
//		Precompiled header for the test
//
//		Includes core CAFE headers, as contained in the utility headers
//		for the Workbench and all of the workbench's areas.
//

#ifndef __STDAFX_H__
#define __STDAFX_H__

#include <afxwin.h>			// MFC core and standard components
#include <winperf.h>		// skipped in windows.h due to WIN32_LEAN_AND_MEAN
#include <afxext.h> 		// MFC extensions
#include <afxtempl.h>

#include "test.h"
#include "subsuite.h"
#include "support.h"


#endif //__STDAFX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\localssub.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	localssub.cpp
//
//	Created by: MichMa		Date: 10/22/97			
//
//	Description:
//		implementation of the CECLocalsSubSuite class
//

#include "stdafx.h"
#include "localssub.h"
#include "afxdllx.h"

#include "..\cleanup.h"
#include "localscases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;


/////////////////////////////////////////////////////////////////////////////
// CLocalsSubSuite

IMPLEMENT_SUBSUITE(CECLocalsSubSuite, CIDESubSuite, "Edit & Continue: Locals", "VCQA Debugger")

BEGIN_TESTLIST(CECLocalsSubSuite)
	TEST(CECLocalsCases, RUN)
END_TESTLIST()
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\localssub.h ===
///////////////////////////////////////////////////////////////////////////////
//	localssub.h
//
//	Created by: MichMa		Date: 10/22/97
//
//	Description:
//		Declaration of the CECLocalsSubSuite class
//

#ifndef __LOCALSSUB_H__
#define __LOCALSSUB_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif


///////////////////////////////////////////////////////////////////////////////
// CECLocalsSubSuite class

class CECLocalsSubSuite : public CIDESubSuite
{
public:
	DECLARE_SUBSUITE(CECLocalsSubSuite)
	DECLARE_TESTLIST()
};


#endif //__LOCALSSUB_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\localscases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	localscases.cpp
//											 
//	Created by:			Date:			
//		MichMa				10/22/97	
//
//	Description:								 
//		Implementation of CECLocalsCases		 

#include "stdafx.h"
#include "localscases.h"
#include "..\cleanup.h"
#include "assert.h"	

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
							   
IMPLEMENT_TEST(CECLocalsCases, CECTestSet, "Edit & Continue: Locals", -1, CECLocalsSubSuite)


void CECLocalsCases::PreRun(void)
{
	// call the base class
	CTest::PreRun();
}


// tests for adding locals.
CArray<CAddTest, CAddTest> AddTests;
// tests for changing the assignment value of locals.
CArray<CValueTest, CValueTest> ValueTests;
// tests for changing the type of locals.
CArray<CTypeTest, CTypeTest> TypeTests;
// tests for removing locals.
CArray<CRemoveTest, CRemoveTest> RemoveTests;

// the functions that can be edited.
CArray<CFunc, CFunc> Funcs;
// used as the value for the int pointer tests.
CString strGlobalIntAddress;
// tracks how many tests have been performed.
int giTestsPerformed = 0;


void CECLocalsCases::Run()

{
	// setup some paths we will use.
	if(GetSystem() & SYSTEM_DBCS)
		m_strProjBase = "[\\]^{|}Aa`@~ ec locals app";
	else
		m_strProjBase = "ec locals app";

	m_strSrcFullPath = GetCWD() + "src\\ec locals app";
	m_strProjDirFullPath = m_strSrcFullPath + "\\" + m_strProjBase;

	// clean-up from the last run.
	OurKillFile(m_strProjDirFullPath + "\\Debug\\", "*.*");
	RemoveDirectory(m_strProjDirFullPath + "\\Debug");
	OurKillFile(m_strProjDirFullPath + "\\", "*.*");

	// set the options for the project we are building for this test.
	CProjWizOptions *pWin32AppWizOpt = new(CWin32AppWizOptions);
	pWin32AppWizOpt->m_strLocation = m_strSrcFullPath;
	pWin32AppWizOpt->m_strName = m_strProjBase;	
	
	// create the project.
	EXPECT_SUCCESS(proj.New(pWin32AppWizOpt));

	// create a new exe source file (to be edited) from the base exe source file.
	CopyFile(m_strSrcFullPath + "\\" + "base exe.cpp", m_strProjDirFullPath + "\\" + m_strProjBase + " exe.cpp", FALSE);
	// this appears to be a win32 timing problem. when running the test over the net, the server seems to keep the file 
	// locked even after CopyFile returns. an immediate call to SetFileAttributes will fail with a sharing violation.
	// so we wait a second here to make sure the server is totally finished processing the CopyFile request.
	Sleep(1000);
	// make the source file writable so we can edit it.
	SetFileAttributes(m_strProjDirFullPath + "\\" + m_strProjBase + " exe.cpp", FILE_ATTRIBUTE_NORMAL);
	
	// add source to the project.
	EXPECT_SUCCESS(proj.AddFiles(m_strProjBase + " exe.cpp"));
	// build the project.
	EXPECT_SUCCESS(proj.Build());
	// get the project into the intial debugging state.
	EXPECT_TRUE(dbg.StepInto());
	// get the initial address of the global int for any int pointer tests that happen before the next restart.
	EXPECT_TRUE(cxx.GetExpressionValue("&intGlobal", strGlobalIntAddress)); 
	
	// initialize info for the tests to perform and the functions to perform them in.
	InitTests();
	InitFuncs();

	// we only want to randomly do each test once.
	RandomNumberCheckList rnclTests(AddTests.GetSize() + 
									ValueTests.GetSize() + 
									TypeTests.GetSize() + 
									RemoveTests.GetSize());
	
	// the index of the next randomly selected test.
	int iTest;
	// flags whether or not a selected test was done.
	BOOL bTestDone;

	// the ranges of the different types of locals tests within the random number checklist.
	int iAddTestsStart = 0;
	int iAddTestsEnd = AddTests.GetSize() - 1;
	int iValueTestsStart = iAddTestsEnd + 1;
	int iValueTestsEnd = iValueTestsStart + ValueTests.GetSize() - 1;
	int iTypeTestsStart = iValueTestsEnd + 1;
	int iTypeTestsEnd = iTypeTestsStart + TypeTests.GetSize() - 1;
	int iRemoveTestsStart = iTypeTestsEnd + 1;
	int iRemoveTestsEnd = iRemoveTestsStart + RemoveTests.GetSize() - 1;

	// randomly do each test once.
	while((iTest = rnclTests.GetNext()) != -1)
	
	{
		// check if the test index selected is within the range of an Add test.
		if((iTest >= iAddTestsStart) && (iTest <= iAddTestsEnd) && (AddTests.GetSize() > 0))
			bTestDone = DoTest(AddTests[iTest - iAddTestsStart]);
		// check if the test index selected is within the range of a Value test.
		else if((iTest >= iValueTestsStart) && (iTest <= iValueTestsEnd) && (ValueTests.GetSize() > 0))
			bTestDone = DoTest(ValueTests[iTest - iValueTestsStart]);
		// check if the test index selected is within the range of a Type test.
		else if((iTest >= iTypeTestsStart) && (iTest <= iTypeTestsEnd) && (TypeTests.GetSize() > 0))
			bTestDone = DoTest(TypeTests[iTest - iTypeTestsStart]);
		// check if the test index selected is within the range of a Remove test.
		else if((iTest >= iRemoveTestsStart) && (iTest <= iRemoveTestsEnd) && (RemoveTests.GetSize() > 0))
			bTestDone = DoTest(RemoveTests[iTest - iRemoveTestsStart]);

		// if we were able to do the test, reset the debugger to the inital state.
		if(bTestDone)
			{EXPECT_TRUE(GetBackToStartOfWinMain());}
		// if we were unable to do the test at this time, make its index available again.
		else
			rnclTests.UndoLast();
	}

	// clean up.
	EXPECT_TRUE(dbg.StopDebugging());
	EXPECT_SUCCESS(proj.Close());
}


void CECLocalsCases::InitFuncs(void)

{
	CFunc Func;
	Func.m_strFile = m_strProjBase + " exe.cpp";

	Func.m_strName = "WinMain";
	Func.m_strChild = "ExeFunc1";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc1";
	Func.m_strChild = "ExeFunc6";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc2";
	Func.m_strChild = "ExeFunc7";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc3";
	Func.m_strChild = "ExeFunc8";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc4";
	Func.m_strChild = "ExeFunc9";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc5";
	Func.m_strChild = "ExeFunc10";
	Funcs.Add(Func);

	Func.m_strChild = "";

	Func.m_strName = "ExeFunc6";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc7";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc8";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc9";
	Funcs.Add(Func);

	Func.m_strName = "ExeFunc10";
	Funcs.Add(Func);
}


void CECLocalsCases::InitTests(void)

{	
	//******************************* ADD TESTS ********************************

	CAddTest AddTest;
	AddTest.m_bTestDone = FALSE;
	AddTest.m_Local.m_bUsesCtorDtor = FALSE;

	// add an int variable.
	AddTest.m_Local.m_strType = "int";
	AddTest.m_Local.m_strName = "intLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	// add a second int variable since the value and type tests use int vars.
	// we want to make sure enough int vars are provided for those tests.
	AddTest.m_Local.m_strType = "int";
	AddTest.m_Local.m_strName = "intLocal2";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	// add an enum variable.
	AddTest.m_Local.m_strType = "ENUM1";
	AddTest.m_Local.m_strName = "ENUM1Local";
	AddTest.m_Local.m_strValue = "ENUM1_VAL1";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 
	
	// add a derived class instance.
	// TODO(michma): add initialization and verification of member.
	AddTest.m_Local.m_strType = "CDerived";
	AddTest.m_Local.m_strName = "CDerivedLocal";
	AddTest.m_Local.m_strValue = "";
	AddTest.m_Local.m_ExprState = COLLAPSED;
	AddTest.m_Local.m_strVerifyValue = "{...}";
	AddTest.m_Local.m_bUsesCtorDtor = TRUE;
	AddTest.m_Local.m_strCodeLines.Add("CDerivedLocal.m_intCDerived = 0;");

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_strVerifyValue = "";
	AddTest.m_Local.m_bUsesCtorDtor = FALSE;
	AddTest.m_Local.m_strCodeLines.RemoveAll();

	// add a union variable.
	// TODO(michma): add initialization and verification of member.
	AddTest.m_Local.m_strType = "UNION1";
	AddTest.m_Local.m_strName = "UNION1Local";
	AddTest.m_Local.m_strValue = "";
	AddTest.m_Local.m_ExprState = COLLAPSED;
	AddTest.m_Local.m_strVerifyValue = "{...}";
	AddTest.m_Local.m_strCodeLines.Add("UNION1Local.m_intUNION1 = 0;");

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";
	AddTest.m_Local.m_strCodeLines.RemoveAll();

	// TODO(michma): add a member of type double to a local union.

	// add an unsigned int variable.
	AddTest.m_Local.m_strType = "unsigned int";
	AddTest.m_Local.m_strName = "unsignedintLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	// add an __int64 variable.
	AddTest.m_Local.m_strType = "__int64";
	AddTest.m_Local.m_strName = "int64Local";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	// add a char variable.
	AddTest.m_Local.m_strType = "char";
	AddTest.m_Local.m_strName = "charLocal";
	AddTest.m_Local.m_strValue = "'a'";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;
	AddTest.m_Local.m_strVerifyValue = "97 'a'";

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_strVerifyValue = "";

	// add an unsigned char variable.
	AddTest.m_Local.m_strType = "unsigned char";
	AddTest.m_Local.m_strName = "unsignedcharLocal";
	AddTest.m_Local.m_strValue = "'a'";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;
	AddTest.m_Local.m_strVerifyValue = "97 'a'";

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_strVerifyValue = "";

	// add a short variable.
	AddTest.m_Local.m_strType = "short";
	AddTest.m_Local.m_strName = "shortLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	// add an unsigned short variable.
	AddTest.m_Local.m_strType = "unsigned short";
	AddTest.m_Local.m_strName = "unsignedshortLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);
	
	// add a long variable.
	AddTest.m_Local.m_strType = "long";
	AddTest.m_Local.m_strName = "longLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	// add an unsigned long variable.
	AddTest.m_Local.m_strType = "unsigned long";
	AddTest.m_Local.m_strName = "unsignedlongLocal";
	AddTest.m_Local.m_strValue = "0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	// add a float variable.
	AddTest.m_Local.m_strType = "float";
	AddTest.m_Local.m_strName = "floatLocal";
	AddTest.m_Local.m_strValue = "0.0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;
	AddTest.m_Local.m_strVerifyValue = "0.000000";

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";

	// add a double variable.
	AddTest.m_Local.m_strType = "double";
	AddTest.m_Local.m_strName = "doubleLocal";
	AddTest.m_Local.m_strValue = "0.0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;
	AddTest.m_Local.m_strVerifyValue = "0.00000000000000";

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";

	// add a long double variable.
	AddTest.m_Local.m_strType = "long double";
	AddTest.m_Local.m_strName = "longdoubleLocal";
	AddTest.m_Local.m_strValue = "0.0";
	AddTest.m_Local.m_ExprState = NOT_EXPANDABLE;
	AddTest.m_Local.m_strVerifyType = "double";
	AddTest.m_Local.m_strVerifyValue = "0.00000000000000";

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyType = "";
	AddTest.m_Local.m_strVerifyValue = "";
	
	// add a base class instance.
	// TODO(michma): add initialization and verification of member.
	AddTest.m_Local.m_strType = "CBase";
	AddTest.m_Local.m_strName = "CBaseLocal";
	AddTest.m_Local.m_strValue = "";
	AddTest.m_Local.m_ExprState = COLLAPSED;
	AddTest.m_Local.m_strVerifyValue = "{...}";
	AddTest.m_Local.m_bUsesCtorDtor = TRUE;
	AddTest.m_Local.m_strCodeLines.Add("CBaseLocal.m_intCBase = 0;");

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";
	AddTest.m_Local.m_bUsesCtorDtor = FALSE;
	AddTest.m_Local.m_strCodeLines.RemoveAll();

	// add a struct instance.
	// TODO(michma): add initialization and verification of member.
	AddTest.m_Local.m_strType = "STRUCT1";
	AddTest.m_Local.m_strName = "STRUCT1Local";
	AddTest.m_Local.m_strValue = "";
	AddTest.m_Local.m_ExprState = COLLAPSED;
	AddTest.m_Local.m_strVerifyValue = "{...}";
	AddTest.m_Local.m_strCodeLines.Add("STRUCT1Local.m_intSTRUCT1 = 0;");

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";
	AddTest.m_Local.m_strCodeLines.RemoveAll();

	// add an int pointer.
	AddTest.m_Local.m_strType = "int *";
	AddTest.m_Local.m_strName = "pintLocal";
	AddTest.m_Local.m_strValue = "&intGlobal";
	AddTest.m_Local.m_ExprState = COLLAPSED;
	AddTest.m_Local.m_strVerifyValue = strGlobalIntAddress;

	AddTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	AddTests.Add(AddTest);
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 
	
	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	AddTests.Add(AddTest); 

	AddTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	AddTests.Add(AddTest);

	AddTest.m_Local.m_strVerifyValue = "";

	//******************************* VALUE TESTS ********************************

	CValueTest ValueTest;
	ValueTest.m_bTestDone = FALSE;
	ValueTest.m_bAddAssignment = FALSE;

	// change the value assignment of an int variable to its top boundary.
	ValueTest.m_Local.m_strType = "int";
	ValueTest.m_Local.m_strValue = "2147483647";
	
	ValueTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	ValueTests.Add(ValueTest);
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	// add a value assignment to the declaration of an int variable.
	ValueTest.m_Local.m_strType = "int";
	ValueTest.m_Local.m_strValue = "1";
	ValueTest.m_bAddAssignment = TRUE;
	
	ValueTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	ValueTests.Add(ValueTest);

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	// TODO(michma - 2/22/98): this case isn't possible, is it? you can't put the ip at a simple declaration.
	//ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	//ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_bAddAssignment = FALSE;

	// change the value assignment of an int variable to its low boundary.
	ValueTest.m_Local.m_strType = "int";
	ValueTest.m_Local.m_strValue = "-2147483648";
	
	ValueTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	ValueTests.Add(ValueTest);

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	// remove the value assignment of an int variable.
	ValueTest.m_Local.m_strType = "int";
	ValueTest.m_Local.m_strValue = "";
	ValueTest.m_Local.m_strVerifyValue = "UNKNOWN";
	
	ValueTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	ValueTests.Add(ValueTest);

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	// TODO(michma - 2/23/98): we can't undo this case, so disable it for now (see TODO above).
	//ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	//ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest);
	
	ValueTest.m_Local.m_strVerifyValue = "";

	// change the value assignment of an int variable to 0.
	ValueTest.m_Local.m_strType = "int";
	ValueTest.m_Local.m_strValue = "0";
	
	ValueTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	ValueTests.Add(ValueTest);
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 
	
	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	ValueTests.Add(ValueTest); 

	ValueTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	ValueTests.Add(ValueTest); 

	//******************************* TYPE TESTS ********************************
/*
	CTypeTest TypeTest;
	TypeTest.m_bTestDone = FALSE;

	// change the type of an int variable to __int64.
	TypeTest.m_Local.m_strType = "int";
	TypeTest.m_strNewType = "__int64";
	
	TypeTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	TypeTests.Add(TypeTest);
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	// change the type of a long double variable to a short.
	TypeTest.m_Local.m_strType = "long double";
	TypeTest.m_strNewType = "short";
	TypeTest.m_Local.m_strVerifyType = "";
	TypeTest.m_Local.m_strVerifyValue = "0";
	
	TypeTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	TypeTests.Add(TypeTest);
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_strVerifyValue = "";

	// change the type of an int variable to float.
	TypeTest.m_Local.m_strType = "int";
	TypeTest.m_strNewType = "float";
	TypeTest.m_Local.m_strVerifyValue = "0.000000";
	
	TypeTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	TypeTests.Add(TypeTest);
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_strVerifyValue = "";

	// change the type of an __int64 variable to char.
	TypeTest.m_Local.m_strType = "__int64";
	TypeTest.m_strNewType = "char";
	TypeTest.m_Local.m_strVerifyValue = "0 ''";
	
	TypeTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	TypeTests.Add(TypeTest);
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	// change the type of an short variable to long double.
	TypeTest.m_Local.m_strType = "short";
	TypeTest.m_strNewType = "long double";
	TypeTest.m_Local.m_strVerifyType = "double";
	TypeTest.m_Local.m_strVerifyValue = "0.00000000000000";
	
	TypeTest.m_Local.m_ecEditType = EC_NO_STACK_FRAME;
	TypeTests.Add(TypeTest);
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 
	
	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	TypeTests.Add(TypeTest); 

	TypeTest.m_Local.m_strVerifyValue = "";

	//******************************* REMOVE TESTS *****************************
	
	CRemoveTest RemoveTest;
	RemoveTest.m_bTestDone = FALSE;
	RemoveTest.m_bLeaveReferences = FALSE;

	// remove one or more locals, including references.
	RemoveTest.m_ecEditType = EC_NO_STACK_FRAME;
	RemoveTests.Add(RemoveTest);
	
	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	RemoveTests.Add(RemoveTest); 
	
	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	RemoveTests.Add(RemoveTest); 

	// TODO(michma): this isn't finished yet.
	// remove a local and leave the references.
	RemoveTest.m_bLeaveReferences = TRUE;

	RemoveTest.m_ecEditType = EC_NO_STACK_FRAME;
	RemoveTests.Add(RemoveTest);
	
	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_AFTER_IP;
	RemoveTests.Add(RemoveTest); 
	
	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_BEFORE_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_CURRENT_FRAME_AT_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_PARENT_FRAME_AFTER_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_ecEditType = EC_PARENT_FRAME_BEFORE_IP;
	RemoveTests.Add(RemoveTest); 

	RemoveTest.m_bLeaveReferences = FALSE;
*/
}


//********************************** ADD TESTS *********************************

BOOL CECLocalsCases::DoTest(CAddTest &AddTest)

{
	// randomly select a function in which to perform the test. the function must not already have the local in it.
	CFunc &Func = Funcs[RandomlySelectFunctionToEdit(AddTest)];
	// this test will be performed.
	giTestsPerformed++;

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Adding local \"%s\" to function \"%s\" using edit type \"%s\".", 
					   giTestsPerformed, AddTest.m_Local.m_strName, Func.m_strName, 
					   szecEditTypes[AddTest.m_Local.m_ecEditType]);
	
	// each type of edit requires different steps.
	switch(AddTest.m_Local.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// insert the local after the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			AddLocalToSource(AddTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the local after the first line of the function.
			AddLocalToSource(AddTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:

		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// insert the local after the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()", FALSE, FALSE, FALSE, FIND_UP));
			AddLocalToSource(AddTest.m_Local);

			// when adding locals that use constructors/destructors (classes), we get a message about the new local
			// not being available until the function is re-entered..
			if(AddTest.m_Local.m_bUsesCtorDtor)
			{
				// step out of the function (handle message about only disasm being available).
				EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, NULL, NOWAIT));
				EXPECT_TRUE(dbg.HandleMsg(MSG_EC_DELAYED_DUE_TO_CTOR_DTOR));
				EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
			}
			// TODO(michma): sometimes get "execution point changed..." message doing step out.
			// TODO(michma): step out fails, so apply go changes first then step out.
			else
				EXPECT_TRUE(dbg.StepOut());

			// verify the debugger landed on the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + Func.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			// reset the ip to the call into the.edited function.
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// insert the local before the last line of the function.
			AddLocalToSource(AddTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// insert the local before the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			AddLocalToSource(AddTest.m_Local);
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify we are back in the edited function on the correct line.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// insert the local after the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			AddLocalToSource(AddTest.m_Local);

			// when adding locals that use constructors/destructors (classes), e&c requires re-entrance to see changes.
			if(AddTest.m_Local.m_bUsesCtorDtor)
			{
				// record the parent (3rd frame from the top) of the edited function for later comparison.
				CString strParentFunc = stk.GetFunction(2, TRUE);
				// step out of the child function (handle message about only disasm being available).
				EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, NULL, NOWAIT));
				EXPECT_TRUE(dbg.HandleMsg(MSG_EC_DELAYED_DUE_TO_CTOR_DTOR));
				EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
				// step out of the edited function so we can re-enter it to see the new local.
				EXPECT_TRUE(dbg.StepOut());
				EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
				// get back into source mode and reset the ip to the call into the.edited function.
				dbg.SetSteppingMode(SRC);
				EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
				EXPECT_TRUE(dbg.SetNextStatement());
			}
			// adding locals that don't use constructors/destructors requires no re-entrance to see the locals.
			else
			{
				// step out of the child function.
				EXPECT_TRUE(dbg.StepOut());
				// verify the debugger is at the correct line and function.
				EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + FuncChild.m_strName + "()"));
				EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			}

			break;
		}
	}

	// run to the last line of the function to verify locals.
	// TODO(michma): randomly select either step to cursor or bp.
	EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
	EXPECT_TRUE(dbg.StepToCursor());
	// verify the debugger stopped at the correct line and function.
	EXPECT_TRUE(dbg.CurrentLineIs("last line of " + Func.m_strName + "()"));
	EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
	// record that this local is now in this function (for verification later).
	Func.m_Locals.Add(AddTest.m_Local);

	// if the edit was made before the ip, then the value of the local just added is unknown for 
	// this first verification. so for locals that are actually initialized with a value, we need to substitute 
	// "UKNOWN" for their value this one time. the assigned value is stored in a temp variable for restoration later.
	// note that variables using contructors or destructors are a special case since we must re-enter the edited function
	// to see source, and they aren't initialized with values anyway.
	CString strTempValue;
	CString strTempVerifyValue;
	int iLastLocalAdded = Func.m_Locals.GetSize() - 1;

	if((Func.m_Locals[iLastLocalAdded].m_ecEditType == EC_CURRENT_FRAME_BEFORE_IP) || 
	   (Func.m_Locals[iLastLocalAdded].m_ecEditType == EC_PARENT_FRAME_BEFORE_IP))
	{
		if((Func.m_Locals[iLastLocalAdded].m_strVerifyValue != "") && 
		   (Func.m_Locals[iLastLocalAdded].m_strVerifyValue != "{...}"))
		{
			strTempVerifyValue = Func.m_Locals[iLastLocalAdded].m_strVerifyValue;
			Func.m_Locals[iLastLocalAdded].m_strVerifyValue = "UNKNOWN";
		}
		else if(Func.m_Locals[iLastLocalAdded].m_strValue != "")
		{
			strTempValue = Func.m_Locals[iLastLocalAdded].m_strValue;
			Func.m_Locals[iLastLocalAdded].m_strValue = "UNKNOWN";
		}
	}

	// verify the locals in the function.
	VerifyFunctionLocals(Func);
	
	// if we had to substitute a temporary value (see if block above), restore the original value.
	if(strTempVerifyValue != "")
		Func.m_Locals[iLastLocalAdded].m_strVerifyValue = strTempVerifyValue;
	else if(strTempValue != "")
		Func.m_Locals[iLastLocalAdded].m_strValue = strTempValue;

	// test was able to execute.
	AddTest.m_bTestDone = TRUE;
	return TRUE;
}


int CECLocalsCases::RandomlySelectFunctionToEdit(CAddTest &AddTest)

{
	// we only want to randomly check each function for suitability once.
	RandomNumberCheckList rnclFuncs(Funcs.GetSize());
	// the random number generated to index into the Funcs array.
	int iFunc;
		
	// randomly check each function for suitability once.
	while((iFunc = rnclFuncs.GetNext()) != -1)
	
	{
		// certain combinations of edit types and functions/callstacks are not compatible.
		if((!((AddTest.m_Local.m_ecEditType == EC_NO_STACK_FRAME) && 
			  (Funcs[iFunc].m_strName == "WinMain"))) &&

		   (!((AddTest.m_Local.m_ecEditType == EC_CURRENT_FRAME_BEFORE_IP) && 
			  (Funcs[iFunc].m_strName == "WinMain"))) &&

		   (!((AddTest.m_Local.m_ecEditType == EC_PARENT_FRAME_BEFORE_IP) && 
			  (Funcs[iFunc].m_strName == "WinMain"))) &&

		   (!((AddTest.m_Local.m_ecEditType == EC_PARENT_FRAME_AFTER_IP) &&
			  (Funcs[iFunc].m_strChild == ""))) &&

		   (!((AddTest.m_Local.m_ecEditType == EC_PARENT_FRAME_BEFORE_IP) &&
			  (Funcs[iFunc].m_strChild == ""))) &&

		   (!((AddTest.m_Local.m_ecEditType == EC_CURRENT_FRAME_AT_IP) &&
			  (Funcs[iFunc].m_strName == "WinMain") && 
			  (AddTest.m_Local.m_bUsesCtorDtor))))

		{
			// make sure a local of the specified name doesn't already exist in this function.
			for(int iLocal = 0; iLocal < Funcs[iFunc].m_Locals.GetSize(); iLocal++)
			{
				// if we find the local already in the function, start over by selecting a new function.
				if(Funcs[iFunc].m_Locals[iLocal].m_strName == AddTest.m_Local.m_strName)
					break;
			}

			// if the function doesn't already have the local in it, return its index.
			if(iLocal == Funcs[iFunc].m_Locals.GetSize())
				return iFunc;
		}
	}
	
	// we should always find a function to add the local to. Add tests are not dependent on other tests.
	ASSERT(0);
	return -1;
}


void CECLocalsCases::AddLocalToSource(CECLocal &Local)

{
	// set the cursor up according to the type of edit being performed.
	switch(Local.m_ecEditType)
	{
		case EC_NO_STACK_FRAME:
		case EC_CURRENT_FRAME_AFTER_IP:
		case EC_CURRENT_FRAME_BEFORE_IP:
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			src.TypeTextAtCursor("{END}{ENTER}");
			break;
		}
		case EC_CURRENT_FRAME_AT_IP:
		{
			src.TypeTextAtCursor("{TAB}");
			break;
		}
		case EC_PARENT_FRAME_AFTER_IP:
		{
			src.TypeTextAtCursor("{HOME}{ENTER}{UP}{TAB}");
			break;
		}
	}

	// insert the type and name of the local.
	src.TypeTextAtCursor(Local.m_strType + " " + Local.m_strName);
	
	// append a value assignment if applicable.
	if(Local.m_strValue != "")
		src.TypeTextAtCursor(" = " + Local.m_strValue);
	
	// complete the statement and append a comment stating the edit type for later use.
	src.TypeTextAtCursor((CString)";{TAB}// " + szecEditTypes[Local.m_ecEditType]);

	// check if there are extra code lines to add.
	if(Local.m_strCodeLines.GetSize() > 0)
			
	{
		// add all the extra code lines.
		for(int iCodeLine = 0; iCodeLine < Local.m_strCodeLines.GetSize(); iCodeLine++)

		{
			src.TypeTextAtCursor("{ENTER}");

			// editing at the current ip requires a Tab before the first extra code line to align the
			// extra code lines with the initial line.
			if((Local.m_ecEditType == EC_CURRENT_FRAME_AT_IP) && (iCodeLine == 0))
				src.TypeTextAtCursor("{TAB}");
			
			src.TypeTextAtCursor(Local.m_strCodeLines[iCodeLine]);
		}
	}

	// editing at the current ip requires an Enter here to separate it from the next line.
	if(Local.m_ecEditType == EC_CURRENT_FRAME_AT_IP)
		src.TypeTextAtCursor("{ENTER}");
}


//******************************* VALUE TESTS ********************************

BOOL CECLocalsCases::DoTest(CValueTest &ValueTest)

{
	// randomly select an index for a function in which to perform the test.
	// the function must already have the local to change in it.
	int iLocalToChange;
	int iFunc = RandomlySelectFunctionToEdit(ValueTest, &iLocalToChange);

	// if a suitable function wasn't found, abort. the test may be tried again later.
	if(iFunc < 0)
		return FALSE;

	// this test will be performed.
	giTestsPerformed++;
	// get the CFunc object for the index chosen.
	CFunc &Func = Funcs[iFunc];
	// get the name of the local we are changing.
	ValueTest.m_Local.m_strName = Func.m_Locals[iLocalToChange].m_strName;

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Changing value of local \"%s\" in function \"%s\" to value \"%s\" using edit type \"%s\".", 
					   giTestsPerformed, ValueTest.m_Local.m_strName, Func.m_strName, 
					   ValueTest.m_Local.m_strValue, szecEditTypes[ValueTest.m_Local.m_ecEditType]);
	
	// each type of edit requires different steps.
	switch(ValueTest.m_Local.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName));
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName));
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName, FALSE, FALSE, FALSE, FIND_UP));
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// step out of the function and verify debugger lands in the right spot.
			// TODO(michma): sometimes get "execution point changed..." message doing step out.
			// TODO(michma): step out fails, so apply go changes first then step out.
			ApplyCodeChanges();	
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger is at the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + Func.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			// set the next statement to the call into the edited function.
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName));
			// run to the local assignment.
			EXPECT_TRUE(dbg.StepToCursor());
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
		
			// if we are removing the assignment from a local, then the point of execution will be moved because
			// there will no longer be code at that line, and we'll get a message about that.
			if(ValueTest.m_Local.m_strValue == "")
				EXPECT_TRUE(dbg.HandleMsg(MSG_EC_POINT_OF_EXECUTION_MOVED));

			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName));
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify we are back in the edited function.
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local assignment to change within the function.
			EXPECT_TRUE(src.Find(ValueTest.m_Local.m_strType + " " + ValueTest.m_Local.m_strName));
			// replace the assignment to one using the new value.
			ReplaceLocalAssignmentInSource(ValueTest.m_Local);
			// step out of the child function and verify the debugger landed in correct spot. 
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// step out of the edited function and verify the debugger landed in the correct spot.
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + Func.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			// set the next statement back to the call into the edited function.
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}
	}

	// run to the last line of the function to verify locals.
	// we need to call this function because in the case of EC_CURRENT_FRAME_AT_IP we may already be at the last line.
	EXPECT_TRUE(RunToLastLineOfFunc(Func.m_strName, ValueTest.m_Local.m_ecEditType));
	// verify the debugger stopped at the correct line and function.
	EXPECT_TRUE(dbg.CurrentLineIs("last line of " + Func.m_strName + "()"));
	EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
	// record the value change in the local's entry within the function.
	Func.m_Locals[iLocalToChange].m_strValue = ValueTest.m_Local.m_strValue;
	Func.m_Locals[iLocalToChange].m_strVerifyValue = ValueTest.m_Local.m_strVerifyValue;
	// verify the locals in the function.
	VerifyFunctionLocals(Func);
	// the test was able to execute.
	ValueTest.m_bTestDone = TRUE;
	return TRUE;
}


int CECLocalsCases::RandomlySelectFunctionToEdit(CValueTest &ValueTest, int *piLocalToChange)

{
	// we only want to randomly check each function for suitability once.
	RandomNumberCheckList rnclFuncs(Funcs.GetSize());
	// the random number generated to index into the Funcs array.
	int iFunc;
		
	// randomly check each function for suitability once.
	while((iFunc = rnclFuncs.GetNext()) != -1)
	{
		// make sure an appropriate local already exists in this function.
		for(int iLocal = 0; iLocal < Funcs[iFunc].m_Locals.GetSize(); iLocal++)
		{
			// if the local meets all the criteria, return the function index and local index to change.
			if((Funcs[iFunc].m_Locals[iLocal].m_strType == ValueTest.m_Local.m_strType) &&
			   (Funcs[iFunc].m_Locals[iLocal].m_strValue != ValueTest.m_Local.m_strValue) &&
			   (Funcs[iFunc].m_Locals[iLocal].m_ecEditType == ValueTest.m_Local.m_ecEditType) &&
			   (!((Funcs[iFunc].m_Locals[iLocal].m_strValue == "") && !ValueTest.m_bAddAssignment)) &&
			   (!((Funcs[iFunc].m_Locals[iLocal].m_strValue != "") && ValueTest.m_bAddAssignment)))
			{	
				*piLocalToChange = iLocal;
				return iFunc;
			}
		}
	}

	// couldn't find a suitable function.
	return -1;
}


void CECLocalsCases::ReplaceLocalAssignmentInSource(CECLocal &Local)

{
	// select the local assignment to be replaced.
	src.TypeTextAtCursor("{HOME}+({END})");
	// insert the type and name of the local.
	src.TypeTextAtCursor(Local.m_strType + " " + Local.m_strName);
	
	// append a value assignment if there is one.
	if(Local.m_strValue != "")
		src.TypeTextAtCursor(" = " + Local.m_strValue);

	// finish the line, including a comment stating the edit type for later use.
	src.TypeTextAtCursor((CString)";{TAB}// " + szecEditTypes[Local.m_ecEditType]);
}


//******************************* TYPE TESTS ********************************

BOOL CECLocalsCases::DoTest(CTypeTest &TypeTest)

{
	// randomly select an index for a function in which to perform the test.
	// the function must already have the local to change in it.
	int iLocalToChange;
	int iFunc = RandomlySelectFunctionToEdit(TypeTest, &iLocalToChange);

	// if a suitable function wasn't found, abort. the test may be tried again later.
	if(iFunc < 0)
		return FALSE;

	// this test will be performed.
	giTestsPerformed++;
	// get the Func object for the index chosen.
	CFunc &Func = Funcs[iFunc];
	// get the name of the local we are changing.
	TypeTest.m_Local.m_strName = Func.m_Locals[iLocalToChange].m_strName;
	// get the value of the local we are changing.
	TypeTest.m_Local.m_strValue = Func.m_Locals[iLocalToChange].m_strValue;

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Changing type of local \"%s\" in function \"%s\" to type \"%s\" using edit type \"%s\".", 
					   giTestsPerformed, TypeTest.m_Local.m_strName, Func.m_strName, 
					   TypeTest.m_strNewType, szecEditTypes[TypeTest.m_Local.m_ecEditType]);
	
	// each type of edit requires different steps.
	switch(TypeTest.m_Local.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName));
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName));
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName, FALSE, FALSE, FALSE, FIND_UP));
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// step out of the function and verify debugger lands in the right spot.
			// TODO(michma): sometimes get "execution point changed..." message doing step out.
			// TODO(michma): step out fails, so apply go changes first then step out.
			ApplyCodeChanges();	
			EXPECT_TRUE(dbg.StepOut());
			// verify the debugger is at the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + Func.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			// set the next statement to the call into the edited function.
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName));
			// run to the local assignment.
			EXPECT_TRUE(dbg.StepToCursor());
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName));
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify we are back in the edited function.
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the local to change within the function.
			EXPECT_TRUE(src.Find(TypeTest.m_Local.m_strType + " " + TypeTest.m_Local.m_strName));
			// replace the type to one using the new type.
			ReplaceLocalTypeInSource(TypeTest);
			// step out of the child function and verify the debugger landed in correct spot. 
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// step out of the edited function and verify the debugger landed in the correct spot.
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(dbg.CurrentLineIs("line after call to " + Func.m_strName + "()"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			// set the next statement back to the call into the edited function.
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			break;
		}
	}

	// run to the last line of the function to verify locals.
	// we need to call this function because in the case of EC_CURRENT_FRAME_AT_IP we may already be at the last line.
	EXPECT_TRUE(RunToLastLineOfFunc(Func.m_strName, TypeTest.m_Local.m_ecEditType));
	// verify the debugger stopped at the correct line and function.
	EXPECT_TRUE(dbg.CurrentLineIs("last line of " + Func.m_strName + "()"));
	EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
	// record the type and value info in the local's entry within the function.
	Func.m_Locals[iLocalToChange].m_strType = TypeTest.m_strNewType;
	Func.m_Locals[iLocalToChange].m_strVerifyType = TypeTest.m_Local.m_strVerifyType;
	Func.m_Locals[iLocalToChange].m_strVerifyValue = TypeTest.m_Local.m_strVerifyValue;
	// verify the information for all the locals in the function.
	VerifyFunctionLocals(Func);
	// the test was able to execute.
	TypeTest.m_bTestDone = TRUE;
	return TRUE;
}


int CECLocalsCases::RandomlySelectFunctionToEdit(CTypeTest &TypeTest, int *piLocalToChange)

{
	// we only want to randomly check each function for suitability once.
	RandomNumberCheckList rnclFuncs(Funcs.GetSize());
	// the random number generated to index into the Funcs array.
	int iFunc;
		
	// randomly check each function for suitability once.
	while((iFunc = rnclFuncs.GetNext()) != -1)
	{
		// make sure an appropriate local already exists in this function.
		for(int iLocal = 0; iLocal < Funcs[iFunc].m_Locals.GetSize(); iLocal++)
		{
			// if the local meets all the criteria, return the function index and local index to change.
			if((Funcs[iFunc].m_Locals[iLocal].m_strType == TypeTest.m_Local.m_strType) &&
			   (Funcs[iFunc].m_Locals[iLocal].m_ecEditType == TypeTest.m_Local.m_ecEditType))
			{	
			 	*piLocalToChange = iLocal;
				return iFunc;
			}
		}
	}

	// couldn't find a suitable function.
	return -1;
}


void CECLocalsCases::ReplaceLocalTypeInSource(CTypeTest &TypeTest)

{
	// select the local assignment to be replaced.
	src.TypeTextAtCursor("{HOME}+({END})");
	// insert the type and name of the local.
	src.TypeTextAtCursor(TypeTest.m_strNewType + " " + TypeTest.m_Local.m_strName);
	
	// append a value assignment if there is one.
	if(TypeTest.m_Local.m_strValue != "")
		src.TypeTextAtCursor(" = " + TypeTest.m_Local.m_strValue);

	// finish the line, including a comment stating the edit type for later use.
	src.TypeTextAtCursor((CString)";{TAB}// " + szecEditTypes[TypeTest.m_Local.m_ecEditType]);
}


//********************************** REMOVE TESTS *********************************

BOOL CECLocalsCases::DoTest(CRemoveTest &RemoveTest)

{
	// we don't want to remove any locals that may later be needed for value tests.
	// therefore we don't perform the remove test if there are any remaining value tests that have the same edit type.
	for(int iTest = 0; iTest < ValueTests.GetSize(); iTest++)
	{
		if((ValueTests[iTest].m_Local.m_ecEditType == RemoveTest.m_ecEditType) && !ValueTests[iTest].m_bTestDone)
			return FALSE;
	}
	
	// randomly select an index for a function in which to perform the test.
	// the function must already have at least one local of the matching edit type in it.
	int iFunc = RandomlySelectFunctionToEdit(RemoveTest);

	// if a suitable function wasn't found, abort. the test may be tried again later.
	if(iFunc < 0)
		return FALSE;

	// this test will be performed.
	giTestsPerformed++;
	// get the Func object for the index chosen.
	CFunc &Func = Funcs[iFunc];

	// log the test header.
	m_pLog->RecordInfo("");
	m_pLog->RecordInfo("TEST %d: Removing locals of edit type \"%s\" from function \"%s\". Leave references == %s.",
					   giTestsPerformed, szecEditTypes[RemoveTest.m_ecEditType], Func.m_strName, 
					   RemoveTest.m_bLeaveReferences ? "TRUE" : "FALSE");
	
	// each type of edit requires different steps.
	switch(RemoveTest.m_ecEditType)
	
	{
		// edited function does not have an active stack frame.
		case EC_NO_STACK_FRAME: 
		{
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs after the ip.
		case EC_CURRENT_FRAME_AFTER_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active on top of the stack. edit occurs before the ip.
		case EC_CURRENT_FRAME_BEFORE_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// run to the last line of the function.
			EXPECT_TRUE(src.Find("last line of " + Func.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// record the parent function for later comparison.
			CString strParentFunc = stk.GetFunction(1, TRUE);
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()", FALSE, FALSE, FALSE, FIND_UP));
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			// step out of the function and set the next statement back to the call into the function.
			// TODO(michma): sometimes get "execution point changed..." message doing step out.
			// TODO(michma): step out fails, so apply go changes first then step out.
			ApplyCodeChanges();	
			EXPECT_TRUE(dbg.StepOut());
			EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
			EXPECT_TRUE(dbg.SetNextStatement());
			// verify the debugger is at the correct line and function.
			EXPECT_TRUE(dbg.CurrentLineIs(Func.m_strName + "();"));
			EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));
			break;
		}

		// edited function is active on top of the stack. edit occurs at the ip.
		case EC_CURRENT_FRAME_AT_IP:
		{
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// find the declaration of the first local with the matching edit type.
			EXPECT_TRUE(src.Find("EC_CURRENT_FRAME_AT_IP"));
			// run to the first local declaration to remove.
			EXPECT_TRUE(dbg.StepToCursor());
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			// TODO(michma): step to cursor fails sometimes, so apply code changes separately first.
			ApplyCodeChanges();
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs after the ip.
		case EC_PARENT_FRAME_AFTER_IP:
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			// step out of the child function.
			EXPECT_TRUE(dbg.StepOut());
			// verify we are back in the edited function.
			EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));
			break;
		}

		// edited function is active, but not on top of the stack. edit occurs before the ip.
		case EC_PARENT_FRAME_BEFORE_IP:
		
		{
			// get the child of the function to edit.
			CFunc &FuncChild = Funcs[GetFunctionIndexFromName(Func.m_strChild)];
			// TODO(michma): randomly select either step to cursor or bp.
			// open the file containing the child of the function to edit.
			EXPECT_SUCCESS(src.Open(FuncChild.m_strFile));
			// run to the first line of the child of the function to edit.
			EXPECT_TRUE(src.Find("first line of " + FuncChild.m_strName + "()"));
			EXPECT_TRUE(dbg.StepToCursor());
			// open the file containing the function to edit.
			EXPECT_SUCCESS(src.Open(Func.m_strFile));
			// find the first line of the function.
			EXPECT_TRUE(src.Find("first line of " + Func.m_strName + "()"));
			// remove the locals of the matching edit type.
			RemoveLocalsFromSource(Func, RemoveTest);
			
			// if we are removing any locals that have ctors/dtors, then we have to handle a special debugger message.
			BOOL bLocalUsingCtorDtorFound = FALSE;

			// loop through all the locals in the function, checking for one that uses a ctor/dtor.
			for(int iLocal = 0; iLocal < Func.m_Locals.GetSize(); iLocal++)
			{
				if(Func.m_Locals[iLocal].m_bUsesCtorDtor)
				{
					bLocalUsingCtorDtorFound = TRUE;
					break;
				}
			}

			if(bLocalUsingCtorDtorFound)
			{
				// step out of the child function (handle message about a local being removed).
				// we will end up in asm mode.
				EXPECT_TRUE(dbg.StepOut(1, NULL, NULL, NULL, NOWAIT));
				EXPECT_TRUE(dbg.HandleMsg(MSG_EC_LOCAL_VAR_REMOVED));
				EXPECT_TRUE(dbg.Wait(WAIT_FOR_BREAK));
				// record the parent function for later comparison.
				CString strParentFunc = stk.GetFunction(1, TRUE);
				// step out of the edited function and reset source mode.
				EXPECT_TRUE(dbg.StepOut());
				EXPECT_TRUE(dbg.SetSteppingMode(SRC));
				// set the next statement back to the call into the edited function.
				EXPECT_TRUE(src.Find(Func.m_strName + "();", FALSE, FALSE, FALSE, FIND_UP));
				EXPECT_TRUE(dbg.SetNextStatement());
				// verify the debugger is at the correct line and function.
				EXPECT_TRUE(dbg.CurrentLineIs(Func.m_strName + "();"));
				EXPECT_TRUE(stk.CurrentFunctionIs(strParentFunc));	
			}
			else
				// if no locals using ctors/dtors were found, then we can step out normally.
				dbg.StepOut();

			break;
		}
	}

	// run to the last line of the function to verify locals.
	// we need to call this function because in the case of EC_CURRENT_FRAME_AT_IP we may already be at the last line.
	EXPECT_TRUE(RunToLastLineOfFunc(Func.m_strName, RemoveTest.m_ecEditType));
	// verify the debugger stopped at the correct line and function.
	EXPECT_TRUE(dbg.CurrentLineIs("last line of " + Func.m_strName + "()"));
	EXPECT_TRUE(stk.CurrentFunctionIs(Func.m_strName));

	// loop through all the locals in the function.
	for(int iLocal = 0; iLocal < Func.m_Locals.GetSize(); iLocal++)
	{
		// if the local's edit type matches, remove it (for later comparison).
		if(Func.m_Locals[iLocal].m_ecEditType == RemoveTest.m_ecEditType)
			Func.m_Locals.RemoveAt(iLocal);
	}

	// verify the locals in the function.
	VerifyFunctionLocals(Func);
	// the test was able to execute.
	RemoveTest.m_bTestDone = TRUE;
	return TRUE;
}


int CECLocalsCases::RandomlySelectFunctionToEdit(CRemoveTest &RemoveTest)

{
	// we only want to randomly check each function for suitability once.
	RandomNumberCheckList rnclFuncs(Funcs.GetSize());
	// the random number generated to index into the Funcs array.
	int iFunc;
		
	// randomly check each function for suitability once.
	while((iFunc = rnclFuncs.GetNext()) != -1)
	
	{
		// make sure at least one appropriate local already exists in this function.
		for(int iLocal = 0; iLocal < Funcs[iFunc].m_Locals.GetSize(); iLocal++)
		{
			// if the local meets the criteria, return the function index.
			if(Funcs[iFunc].m_Locals[iLocal].m_ecEditType == RemoveTest.m_ecEditType)
				return iFunc;
		}
	}

	// couldn't find a suitable function.
	return -1;
}


void CECLocalsCases::RemoveLocalsFromSource(CFunc &Func, CRemoveTest &RemoveTest)

{
	// count of locals in the function that have a matching edit type.
	int iLocalCount = 0;

	// loop through all the locals in the function.
	for(int iLocal = 0; iLocal < Func.m_Locals.GetSize(); iLocal++)
	{
		// if the local's edit type matches, count it.
		if(Func.m_Locals[iLocal].m_ecEditType == RemoveTest.m_ecEditType)
			iLocalCount++;	
	}	
			
	// remove each local that has a matching edit type.
	for(int i = 0; i < iLocalCount; i++)

	{
		// find the declaration of the next local with the matching edit type.
		EXPECT_TRUE(src.Find(szecEditTypes[RemoveTest.m_ecEditType]));
		// grab the line for examination.
		src.SelectLines();
		CString strLine = src.GetSelectedText();
		// figure out which local the line declares.
		int iLocal = FindLocalInLine(strLine, Func);
		// delete the local declaration line.
		src.TypeTextAtCursor("{DEL}");

		// remove the references to the local if applicable (i.e. the e&c is supposed to succeed).
		if(!RemoveTest.m_bLeaveReferences)
			RemoveLocalReferencesFromSource(Func.m_Locals[iLocal]);
	}
}


int CECLocalsCases::FindLocalInLine(CString &strLine, CFunc &Func)

{
	// loop through all the locals in the function.
	for(int iLocal = 0; iLocal < Func.m_Locals.GetSize(); iLocal++)
	{
		// if the name of the local is found within the line, return its index.
		if(strLine.Find(Func.m_Locals[iLocal].m_strName) != -1)
			return iLocal;
	}

	// should never get here. we've already verified that this line declares a local in this function.
	ASSERT(0);
	return -1;
}


void CECLocalsCases::RemoveLocalReferencesFromSource(CECLocal &Local)
{
	// loop through all the code lines that reference the local.
	for(int iCodeLines = 0; iCodeLines < Local.m_strCodeLines.GetSize(); iCodeLines++)
	{
		// find the next code line that references the local.
		EXPECT_TRUE(src.Find(Local.m_strCodeLines[iCodeLines]));
		// select the line and delete it.
		src.SelectLines();
		src.TypeTextAtCursor("{DEL}");
	}
}


//******************************* MISC FUNCTIONS *******************************

BOOL CECLocalsCases::GetBackToStartOfWinMain(void)

{
	/*
	if(!stk.CurrentFunctionIs("WinMain"))
		EXPECT_TRUE(stk.RunToFrame("WinMain"));
	
	EXPECT_TRUE(src.Find("first line of WinMain()"));
	EXPECT_TRUE(dbg.SetNextStatement());

	if(dbg.AtSymbol("WinMain"))
		return TRUE;
	else
		return FALSE;
	*/
	
	dbg.StopDebugging();
	proj.WaitUntilBuildDone(1);
	proj.RebuildAll();
	dbg.StepInto();
	// TODO(michma - 3/23/98): can't restart after adding float local and doing e&c (bug 37170).
	//dbg.Restart();
	cxx.GetExpressionValue("&intGlobal", strGlobalIntAddress);

	for(int iFunc = 0; iFunc < Funcs.GetSize(); iFunc++)
	{
		for(int iLocal = 0; iLocal < Funcs[iFunc].m_Locals.GetSize(); iLocal++)
		{
			if(Funcs[iFunc].m_Locals[iLocal].m_strType == "int *")
				Funcs[iFunc].m_Locals[iLocal].m_strVerifyValue = strGlobalIntAddress;
		}
	}

	for(int iTest = 0; iTest < AddTests.GetSize(); iTest++)
	{
		if(AddTests[iTest].m_Local.m_strType == "int *")
			AddTests[iTest].m_Local.m_strVerifyValue = strGlobalIntAddress;
	}

	return TRUE;
}


void CECLocalsCases::VerifyFunctionLocals(CFunc &Func)

{
	CString strTmpValue;	
	CString strTmpType;	

	// verify all the expected locals in the function.
	for(int iLocal = 0; iLocal < Func.m_Locals.GetSize(); iLocal++)
	
	{
		// log info about the local being verified.
		m_pLog->RecordInfo("verifying local \"%s\" is in function \"%s\".",
			Func.m_Locals[iLocal].m_strName, Func.m_strName);	
	
		// if the type to verify is different than the type assigned, then load it into the appropriate
		// field as required by COLocals::VerifyLocalInfo. the type assigned is preserved in a temp variable.
		if(Func.m_Locals[iLocal].m_strVerifyType != "")
		{
			strTmpType = Func.m_Locals[iLocal].m_strType;	
			Func.m_Locals[iLocal].m_strType = Func.m_Locals[iLocal].m_strVerifyType;
		}

		// if the value to verify is different than the value assigned, then load it into the appropriate
		// field as required by COLocals::VerifyLocalInfo. the value assigned is preserved in a temp variable.
		if(Func.m_Locals[iLocal].m_strVerifyValue != "")
		{
			strTmpValue = Func.m_Locals[iLocal].m_strValue;	
			Func.m_Locals[iLocal].m_strValue = Func.m_Locals[iLocal].m_strVerifyValue;
		}
			
		// verify the locals info.
		EXPECT_TRUE(locals.VerifyLocalInfo(Func.m_Locals[iLocal]));

		// if the type to verify was different than the type assigned, then it was loaded into the appropriate
		// field as required by COLocals::VerifyLocalInfo. restore the type assigned as preserved in the temp variable.
		if(Func.m_Locals[iLocal].m_strVerifyType != "")
			Func.m_Locals[iLocal].m_strType = strTmpType;	

		// if the value to verify was different than the value assigned, then it was loaded into the appropriate
		// field as required by COLocals::VerifyLocalInfo. restore the value assigned as preserved in the temp variable.
		if(Func.m_Locals[iLocal].m_strVerifyValue != "")
			Func.m_Locals[iLocal].m_strValue = strTmpValue;	
	}
}


int CECLocalsCases::GetFunctionIndexFromName(LPCSTR szName)

{
	// loop through all the functions checking for the name.
	for(int iFunc = 0; iFunc < Funcs.GetSize(); iFunc++)
	{
		// if the names match, we've found the index.
		if(Funcs[iFunc].m_strName == szName)
			return iFunc;
	}

	// function name was not found in the list (should never get here).
	assert(0);
	return -1;
}


// TODO(michma): this needs its own CODebug function.
void CECLocalsCases::ApplyCodeChanges(void)
{
	MST.DoKeys("%dy");
	proj.WaitUntilBuildDone();
}


// for the EC_CURRENT_FRAME_AT_IP case, sometimes we may already be at the
// current line, so we need to check first before trying to run to it. this function encapsulates that.
BOOL CECLocalsCases::RunToLastLineOfFunc(LPCSTR szFunc, EC_EDIT_TYPE ecEditType)

{
	if((ecEditType != EC_CURRENT_FRAME_AT_IP) || !dbg.CurrentLineIs((CString)"last line of " + szFunc + "()"))
	{
		if(!src.Find((CString)"last line of " + szFunc + "()"))
			return FALSE;
		if(!dbg.StepToCursor())
			return FALSE;
	}

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\locals\localscases.h ===
///////////////////////////////////////////////////////////////////////////////
//	localscases.h
//
//	Created by:	MichMa		Date: 10/22/97
//
//	Description:
//		Declaration of the CECLocals3Cases Class
//

#ifndef __LOCALSCASES_H__
#define __LOCALSCASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "localssub.h"


class CECLocal : public CLocal

{
public:

	CString m_strVerifyValue;
	CString m_strVerifyType;
	BOOL m_bUsesCtorDtor;
	EC_EDIT_TYPE m_ecEditType;
	CStringArray m_strCodeLines;
	CECLocal(void){}
	
	CECLocal(CECLocal &ECLocalSrc)
	
	{
		m_strType = ECLocalSrc.m_strType;
		m_strName = ECLocalSrc.m_strName;
		m_strValue = ECLocalSrc.m_strValue;
		m_ExprState = ECLocalSrc.m_ExprState;
		m_strVerifyValue = ECLocalSrc.m_strVerifyValue;
		m_strVerifyType = ECLocalSrc.m_strVerifyType;
		m_bUsesCtorDtor = ECLocalSrc.m_bUsesCtorDtor;
		m_ecEditType = ECLocalSrc.m_ecEditType;

		for(int iCodeLine = 0; iCodeLine < ECLocalSrc.m_strCodeLines.GetSize(); iCodeLine++)
			m_strCodeLines.Add(ECLocalSrc.m_strCodeLines[iCodeLine]);
	}

	const CECLocal& operator=(const CECLocal& ECLocalSrc)
	
	{
		m_strType = ECLocalSrc.m_strType;
		m_strName = ECLocalSrc.m_strName;
		m_strValue = ECLocalSrc.m_strValue;
		m_ExprState = ECLocalSrc.m_ExprState;
		m_strVerifyValue = ECLocalSrc.m_strVerifyValue;
		m_strVerifyType = ECLocalSrc.m_strVerifyType;
		m_bUsesCtorDtor = ECLocalSrc.m_bUsesCtorDtor;
		m_ecEditType = ECLocalSrc.m_ecEditType;

		for(int iCodeLine = 0; iCodeLine < ECLocalSrc.m_strCodeLines.GetSize(); iCodeLine++)
			m_strCodeLines.Add(ECLocalSrc.m_strCodeLines[iCodeLine]);

		return *this;	
	}
};


class CFunc

{
public:

	CString m_strName;
	CString m_strFile;
	CString m_strChild;
	CArray<CECLocal, CECLocal> m_Locals;
	CFunc(void){}
	
	CFunc(CFunc &FuncSrc)
	
	{
		m_strName = FuncSrc.m_strName;
		m_strFile = FuncSrc.m_strFile;
		m_strChild = FuncSrc.m_strChild;

		for(int iLocal = 0; iLocal < FuncSrc.m_Locals.GetSize(); iLocal++)
			m_Locals.Add(FuncSrc.m_Locals[iLocal]);
	}

	const CFunc& operator=(const CFunc &FuncSrc)
	
	{
		m_strName = FuncSrc.m_strName;
		m_strFile = FuncSrc.m_strFile;
		m_strChild = FuncSrc.m_strChild;

		for(int iLocal = 0; iLocal < FuncSrc.m_Locals.GetSize(); iLocal++)
			m_Locals.Add(FuncSrc.m_Locals[iLocal]);

		return *this;	
	}
};


class CAddTest

{
public:

	BOOL m_bTestDone;
	CECLocal m_Local;
	CAddTest(void){}

	CAddTest(CAddTest &AddTestSrc)
	{
		m_bTestDone = AddTestSrc.m_bTestDone;
		m_Local = AddTestSrc.m_Local;
	}

	const CAddTest& operator=(const CAddTest &AddTestSrc)
	{
		m_bTestDone = AddTestSrc.m_bTestDone;
		m_Local = AddTestSrc.m_Local;
		return *this;
	}
};


class CValueTest

{
public:

	BOOL m_bTestDone;
	CECLocal m_Local;
	BOOL m_bAddAssignment;
	CValueTest(void){}

	CValueTest(CValueTest &ValueTestSrc)
	{
		m_bTestDone = ValueTestSrc.m_bTestDone;
		m_Local = ValueTestSrc.m_Local;
		m_bAddAssignment = ValueTestSrc.m_bAddAssignment;
	}

	const CValueTest& operator=(const CValueTest &ValueTestSrc)
	{
		m_bTestDone = ValueTestSrc.m_bTestDone;
		m_Local = ValueTestSrc.m_Local;
		m_bAddAssignment = ValueTestSrc.m_bAddAssignment;
		return *this;
	}
};


class CTypeTest

{
public:

	BOOL m_bTestDone;
	CECLocal m_Local;
	CString m_strNewType;
	CTypeTest(void){}

	CTypeTest(CTypeTest &TypeTestSrc)
	{
		m_bTestDone = TypeTestSrc.m_bTestDone;
		m_Local = TypeTestSrc.m_Local;
		m_strNewType = TypeTestSrc.m_strNewType;
	}

	const CTypeTest& operator=(const CTypeTest &TypeTestSrc)
	{
		m_bTestDone = TypeTestSrc.m_bTestDone;
		m_Local = TypeTestSrc.m_Local;
		m_strNewType = TypeTestSrc.m_strNewType;
		return *this;
	}
};


class CRemoveTest 

{
public:

	BOOL m_bTestDone;
	EC_EDIT_TYPE m_ecEditType;
	BOOL m_bLeaveReferences;
	CRemoveTest(void){}

	CRemoveTest(CRemoveTest &RemoveTestSrc)
	{
		m_bTestDone = RemoveTestSrc.m_bTestDone;
		m_ecEditType = RemoveTestSrc.m_ecEditType;
		m_bLeaveReferences = RemoveTestSrc.m_bLeaveReferences;
	}

	const CRemoveTest& operator=(const CRemoveTest &RemoveTestSrc)
	{
		m_bTestDone = RemoveTestSrc.m_bTestDone;
		m_ecEditType = RemoveTestSrc.m_ecEditType;
		m_bLeaveReferences = RemoveTestSrc.m_bLeaveReferences;
		return *this;
	}
};


///////////////////////////////////////////////////////////////////////////////
//	CECLocalsCases class

class CECLocalsCases : public CECTestSet

{
	DECLARE_TEST(CECLocalsCases, CECLocalsSubSuite)

private:
	// Data
	CString m_strProjBase;
	CString m_strSrcFullPath;
	CString m_strProjDirFullPath;

public:

	// Operations
	virtual void PreRun(void);
	virtual void Run();

	// Utilities
	void InitFuncs(void);
	void InitTests(void);
	void VerifyFunctionLocals(CFunc &Func);
	void ApplyCodeChanges(void);
	BOOL GetBackToStartOfWinMain(void);
	BOOL RunToLastLineOfFunc(LPCSTR szFunc, EC_EDIT_TYPE ecEditType);
	int GetFunctionIndexFromName(LPCSTR szName);

	// Add test functions.
	BOOL DoTest(CAddTest &AddTest);
	int RandomlySelectFunctionToEdit(CAddTest &AddTest);
	void AddLocalToSource(CECLocal &Local);

	// Value test functions.
	BOOL DoTest(CValueTest &ValueTest);
	int RandomlySelectFunctionToEdit(CValueTest &ValueTest, int *piLocalToChange);
	void ReplaceLocalAssignmentInSource(CECLocal &Local);

	// Type test functions.
	BOOL DoTest(CTypeTest &TypeTest);
	int RandomlySelectFunctionToEdit(CTypeTest &TypeTest, int *piLocalToChange);
	void ReplaceLocalTypeInSource(CTypeTest &TypeTest);

	// Remove test functions.
	BOOL DoTest(CRemoveTest &RemoveTest);
	int RandomlySelectFunctionToEdit(CRemoveTest &RemoveTest);
	int FindLocalInLine(CString &strLine, CFunc &Func);
	void RemoveLocalsFromSource(CFunc &Func, CRemoveTest &RemoveTest);
	void RemoveLocalReferencesFromSource(CECLocal &Local);
};

#endif //__LOCALSCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\add.h ===
///////////////////////////////////////////////////////////////////////////////
//	Add.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CAddingCodeTest Class
//

#ifndef __Add_H__
#define __Add_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "sniffsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CAddingCodeTest class

class CAddingCodeTest : public CECTestSet
{
//	DECLARE_TEST(CAddingCodeTest, CSniffSubSuite)
	DECLARE_DYNAMIC(CAddingCodeTest)

// Operations
public:
	virtual void PreRun(void);
	virtual void Run();
	CAddingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);

// Test Cases
protected:

	BOOL AddFunction();
	BOOL AddMemberFunction();
	BOOL AddFunctionCall();
	BOOL AddGlobal();
	BOOL AddDataMember();
	BOOL AddStaticVar();
	BOOL AddLocalVar();
	BOOL AddLocalObject();
	BOOL AddOperations();
	BOOL AddLoop();

};

///////////////////////////////////////////////////////////////////////////////
//	CAddingCodeTestEXE class

class CAddingCodeTestEXE : public CAddingCodeTest
{
	DECLARE_TEST(CAddingCodeTestEXE, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CAddingCodeTestEXT class

class CAddingCodeTestEXT : public CAddingCodeTest
{
	DECLARE_TEST(CAddingCodeTestEXT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CAddingCodeTestINT class

class CAddingCodeTestINT : public CAddingCodeTest
{
	DECLARE_TEST(CAddingCodeTestINT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

#endif //__Add_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\bp.h ===
///////////////////////////////////////////////////////////////////////////////
//	BP.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CBreakpointsTest Class
//

#ifndef __BP_H__
#define __BP_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "sniffsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CBreakpointsTest class

class CBreakpointsTest : public CECTestSet
{
//	DECLARE_TEST(CBreakpointsTest, CSniffSubSuite)
	DECLARE_DYNAMIC(CBreakpointsTest)

// Operations
public:
	virtual void PreRun(void);
	virtual void Run();
	CBreakpointsTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);

// Test Cases
protected:

	BOOL BPAtNewCodeLine();
	BOOL BPOnNewLocal();
	BOOL BPOnNewLocalWithCodition();

};

///////////////////////////////////////////////////////////////////////////////
//	CBreakpointsTestEXE class

class CBreakpointsTestEXE : public CBreakpointsTest
{
	DECLARE_TEST(CBreakpointsTestEXE, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CBreakpointsTestEXT class

class CBreakpointsTestEXT : public CBreakpointsTest
{
	DECLARE_TEST(CBreakpointsTestEXT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CBreakpointsTestINT class

class CBreakpointsTestINT : public CBreakpointsTest
{
	DECLARE_TEST(CBreakpointsTestINT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

#endif //__BP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\add.cpp ===
///////////////////////////////////////////////////////////////////////////
//	Add.CPP
//											 
//	Created by :			
//		VCBU QA		

#include <process.h>
#include "stdafx.h"
#include "Add.h"	

#if defined(_MIPS_) || defined(_ALPHA_)
#define _CHAIN_2 "chain_2"
#define _CHAIN_3 "chain_3"
#else
#define _CHAIN_2 "_chain_2"
#define _CHAIN_3 "_chain_3"
#endif

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
											   
//IMPLEMENT_TEST(CAddingCodeTest, CECTestSet, "EC Sniff AddingCode", -1, CSniffSubSuite)
IMPLEMENT_DYNAMIC(CAddingCodeTest, CECTestSet)
IMPLEMENT_TEST(CAddingCodeTestEXE, CAddingCodeTest, "EC Sniff AddingCode EXE", -1, CSniffSubSuite)
IMPLEMENT_TEST(CAddingCodeTestEXT, CAddingCodeTest, "EC Sniff AddingCode EXT", -1, CSniffSubSuite)
IMPLEMENT_TEST(CAddingCodeTestINT, CAddingCodeTest, "EC Sniff AddingCode INT", -1, CSniffSubSuite)
												 
CAddingCodeTest::CAddingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CECTestSet(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}
												 
void CAddingCodeTest::PreRun(void)
{
	// call the base class
	CTest::PreRun();
}

void CAddingCodeTest::Run()
{	 
	XSAFETY;
	EXPECT_TRUE( dbg.ToggleEditAndContinue(TOGGLE_ON) );
	
	XSAFETY;
	AddFunction();	 // 6 cases: 1 fails - #12795, 12799, 5 blocked.
	XSAFETY;
	AddMemberFunction(); // 2 cases:
	XSAFETY;
	AddFunctionCall(); // 8 cases: 1 fails - #12924, 12932, 7 blocked
	XSAFETY;
	AddGlobal();	 // 2 cases:
	XSAFETY;
	AddDataMember();   // 2 cases:
	XSAFETY;
	AddStaticVar();	   // 2 cases:
	XSAFETY;
	AddLocalVar();	   // 2 cases:
	XSAFETY;
	AddLocalObject();   // 2 cases: 1 fails - #13772 - crash
	XSAFETY;
	AddOperations();	// 4 cases: 1 fails - #13956, 3 blocked
	XSAFETY;
	AddLoop();	   // 2 cases: 1 fails - #13956, 1 blocked
	XSAFETY;

	COWorkSpace ws;
	ws.CloseAllWindows();
	XSAFETY;
}

void CAddingCodeTestEXE::Run()
{	 
	XSAFETY;

/*	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	if( SetProject(szProjPathName) )
	{
		CAddingCodeTest::Run();
	}
*/
	m_projType = PT_EXE;
	if (IsProjectReady(m_projType))
		CAddingCodeTest::Run();

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
		
}

void CAddingCodeTestEXT::Run()
{	 
	XSAFETY;
	
/*	m_strProjectName = "ecwinapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CAddingCodeTest::Run();
	}
*/
	m_projType = PT_EXT;
	if (IsProjectReady(m_projType))
		CAddingCodeTest::Run();

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

void CAddingCodeTestINT::Run()
{	 
	XSAFETY;

/*	m_strProjectName = "ecmfcapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	CreateDirectory(m_strProjectLoc + "res\\", 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CAddingCodeTest::Run();
	}
*/
	m_projType = PT_INT;
	if (IsProjectReady(m_projType))
		CAddingCodeTest::Run();

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}


///////////////////////////////////////////////////////////////////////////////
//	Test Cases
///////////////////////////////////////////////////////////////////////////////

BOOL CAddingCodeTest::AddFunction( )
{
// 	LogTestHeader( "AddFunction" );
	CStartEndTest se_test("AddFunction", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

// 	LogSubTestHeader( "Add a fuction using known return type" );
//	LogTestHeader( "Add a fuction using known return type", TT_TESTCASE );
 	LogTestBegin( "Add a fuction using known return type" );
	// Add func2 in testg.cpp
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int func();",
		"int func();{Enter}   int func2();", 1) );
	EXPECT_TRUE( ModifyCode("typedef int My_typedef;",
		"typedef int My_typedef;{Enter}   int func2(){Enter} { return 55; };", 1) );
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;{Enter}   Int = func2();", 1) );
	EXPECT_TRUE( src.Find("{ return 55; };") );
	dbg.StepToCursor(0);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
	{
		WriteLog(FAILED, "Msg box should not appear" );
//	m_pLog->RecordInfo( " Run an app and verify it ran " );
		MST.WButtonClick( "No" );
	}
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.CurrentLineIs( "{ return 55; };" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Int = func2();"));
	EXPECT_TRUE( dbg.StepOver(1, NULL, "if (Flag)"));
	EXPECT_TRUE( cxx.ExpressionValueIs("Int", 55) );
	dbg.StopDebugging();
 	LogTestEnd( "Add a fuction using known return type" );

	LogTestBegin( "Add a fuction using typedef return type" );
	// Start debugging again
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	// Add func3 in testg.cpp
//	EXPECT_TRUE( ModifyCode("int func();",
//		"int func();{Enter}   My_typedef func3();", 1) );
	EXPECT_TRUE( ModifyCode("typedef int My_typedef;",
		"typedef int My_typedef;{Enter}   My_typedef func3(){Enter} { return 99; };", 1) );
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;{Enter}   Mine = func3();", 1) );
	EXPECT_TRUE( src.Find("{ return 99; };") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "{ return 99; };" ) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func3") );
	EXPECT_TRUE( dbg.StepOut(1, NULL, "Mine = func3();", "TestG"));
	EXPECT_TRUE( dbg.StepOver(1));
	EXPECT_TRUE( cxx.ExpressionValueIs("Mine", 99) );
	LogTestEnd( "Add a fuction using typedef return type" );

	// Need a new application and use double  : will move to a different test
	LogTestBegin( "Add a fuction using new return type" );
	// Add long_double_func to based.cpp
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCode("int (*pfn222)();",
		"int (*pfn222)();{Enter}   long double * long_double_func(int addr);{Enter}   { return (long double *)addr; }", 1) );
	EXPECT_TRUE( ModifyCode("int *p_global_int2;",
		"int *p_global_int2;{Enter}   p_global_double = (double *)long_double_func((int)rg_global_int);", 1) );
	EXPECT_TRUE( src.Find("p_global_double = (double *)long_double_func((int)rg_global_int);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") ); // Check where should we be: main_Calls or TestG ?
	LogTestEnd( "Add a fuction using new return type" );

	// Backup changes and continue
	LogTestBegin( "Backup case: Remove 2 functions" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int func();",
		"int func();", 2) );
	EXPECT_TRUE( ModifyCode("typedef int My_typedef;",
		"typedef int My_typedef;", 5) );
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;", 3) );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCode("int (*pfn222)();",
		"int (*pfn222)();", 3) );
	EXPECT_TRUE( ModifyCode("int *p_global_int2;",
		"int *p_global_int2;", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
// TODO: Check where we should be at the time
	// Verify EC fails gracefully after removing the new function
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") ); 
	LogTestEnd( "Backup case: Remove 2 functions" );

	dbg.StopDebugging();
	if (IsProjectReady(m_projType))
		return (TRUE);
	else 
		return FALSE;
}

BOOL CAddingCodeTest::AddMemberFunction( )
{
// 	LogTestHeader( "AddMemberFunction" );
	CStartEndTest se_test("AddMemberFunction", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

 	LogTestBegin( "Add a member fuction" );
	// Add derID to derived class in cxx.cxx
	EXPECT_TRUE( ModifyCode("derived(); // c-tor",
		"derived(); // c-tor{Enter}   int derID() {return id;};", 1) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
 	LogTestEnd( "Add a member fuction" );

	// backup changes and continue
 	LogTestBegin( "Add a member fuction: Backup case" );
	EXPECT_TRUE( ModifyCode("derived(); // c-tor",
		"derived();", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Add a member fuction: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddFunctionCall( )
{
// 	LogTestHeader( "AddFunctionCall" );
	CStartEndTest se_test("AddFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

 	LogTestBegin( "Add a member fuction call to inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("Result=foo1.getCount();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Result=foo1.getCount();") );
	// Add a call to overloaded_func inside Test_func in cxx.cxx
	EXPECT_TRUE( ModifyCode("result = drv1.getCount();",
		"result = drv1.getCount();{Enter}   result = b.overloaded_func(1002);", 1) );
	EXPECT_TRUE( src.Find("result = b.overloaded_func(1002);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "result = b.overloaded_func(1002);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "result = drv1;"));
	EXPECT_TRUE( cxx.ExpressionValueIs("result", 1002) );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Add a member fuction call to inactive frame" );

 	LogTestBegin( "Add a member fuction call to active frame before IP: Invalid call" );
	EXPECT_TRUE( src.Find("Result=foo1.getCount();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Result=foo1.getCount();") );
	// Add a call to overloaded_func inside Test_func in cxx.cxx
	EXPECT_TRUE( ModifyCode("result = drv1.getCount();",
		"result = drv1.getCount();{Enter}   result = derived::getID(); // new call", 1) );
//ToDo: this generate compiler error: need to replace derived::getID() by something else
	EXPECT_TRUE( src.Find("result = derived::getID(); // new call") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully : this generates compiler error
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
 	LogTestEnd( "Add a member fuction call to active frame before IP: Invalid call" );

	// Backup the last change and add a valid call
 	LogTestBegin( "Add a member fuction call to active frame before IP: Valid call" );
	EXPECT_TRUE( ModifyCode("result = drv1.getCount();",
		"result = drv1.getCount();{Enter}   result = derived::static_func(); // new call", 2) );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "result = derived::static_func(); // new call" ) );
//	EXPECT_TRUE( dbg.StepOver(1, NULL, "result = b.overloaded_func(1002);"));
	EXPECT_TRUE( dbg.StepOver(1));
	EXPECT_TRUE( cxx.ExpressionValueIs("result", 9) );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Add a member fuction call to active frame before IP: Valid call" );

 	LogTestBegin( "Add a member fuction call to non-top active frame after IP" );
	// Add a call to fooclass::chain2_func inside Cxx_Tests in cxx.cxx
	EXPECT_TRUE( ModifyCode("int test_include = Test_func();",
		"int test_include = Test_func();{Enter}   Result = foo1.chain2_func();", 1) );
	EXPECT_TRUE( src.Find("Result = foo1.chain2_func();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests")	);
	dbg.Restart();
	dbg.SetSteppingMode(SRC);
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("Result = foo1.chain2_func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Result = foo1.chain2_func();", "Cxx_Tests" ) );
//	EXPECT_TRUE( dbg.CurrentLineIs( "Result = foo1.chain2_func();" ) );
//	EXPECT_TRUE( dbg.StepOver(1, NULL, "}"));
	EXPECT_TRUE( dbg.StepOver(1));
	EXPECT_TRUE( cxx.ExpressionValueIs("Result", 3) );
//	EXPECT_TRUE( VerifyBuildString( "foo.c" ) >= 0);  
 	LogTestEnd( "Add a member fuction call to non-top active frame after IP" );

 	LogTestBegin( "Add a fuction call to inactive frame" );
	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );
	// Add a call to func_1param in testg.cpp
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;{Enter}   Int = func_1param(1001);", 1) );
	EXPECT_TRUE( src.Find("Int = func_1param(1001);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "Int = func_1param(1001);" ) );
//	EXPECT_TRUE( dbg.StepOver(1, NULL, "if (Flag)"));
	EXPECT_TRUE( dbg.StepOver(1));
	EXPECT_TRUE( cxx.ExpressionValueIs("Int", 1001) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Add a fuction call to inactive frame" );
	
 	LogTestBegin( "Add a fuction call to active frame At IP" );
	// Add a call to func_2param in testg.cpp
	EXPECT_TRUE( ModifyCodeLine("Int = func_1param(1001);", "Long = func_2param(44, 55); Int = func_1param(1001);") );
	EXPECT_TRUE( src.Find("Long = func_2param(44, 55); Int = func_1param(1001);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( dbg.CurrentLineIs( "if (Flag)" ) );
//	EXPECT_TRUE( cxx.ExpressionValueIs("Long", 99) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Add a fuction call to active frame At IP" );
	
 	LogTestBegin( "Add a fuction call to active frame After IP" );
	// Add a call to foo_Include in testg.cpp
	EXPECT_TRUE( ModifyCode("Int = foo_Include(i);",
		"Int = foo_Include(i);{Enter}   Int = 3+foo_Include(i);", 1) );
	EXPECT_TRUE( src.Find("Int = 3+foo_Include(i);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "Int = 3+foo_Include(i);" ) );
//	EXPECT_TRUE( dbg.StepOver(1, NULL, "Int = recur_func();"));
	EXPECT_TRUE( dbg.StepOver(1));
	EXPECT_TRUE( cxx.ExpressionValueIs("Int", 3) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Add a fuction call to active frame After IP" );
	
 	LogTestBegin( "Add a fuction call to active non-top frame Before IP" );
	// Add a call to Based in calls.cpp while IP is in TestG
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( ModifyCode("int iCalls = Calls();",
		"int iCalls = Calls();{Enter}   Based(); // new call", 1) );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( VerifyBuildString( "calls.cpp" ) >= 0);  
 	LogTestEnd( "Add a fuction call to active non-top frame Before IP" );
	
	// Backup changes == remove all new function calls
 	LogTestBegin( "Backup case: Backup all changes and continue" );
	EXPECT_TRUE( ModifyCode("int iCalls = Calls();",
		"int iCalls = Calls();", 2) );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCode("result = drv1.getCount();",
		"result = drv1.getCount();", 3) );
	EXPECT_TRUE( ModifyCode("int test_include = Test_func();",
		"int test_include = Test_func();", 2) );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;", 2) );
	EXPECT_TRUE( ModifyCode("Int = foo_Include(i);",
		"Int = foo_Include(i);", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( VerifyBuildString( "calls.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "foo.c" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Backup case: Backup all changes and continue" );
	
	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddGlobal( )
{
// 	LogTestHeader( "AddGlobal" );
	CStartEndTest se_test("AddGlobal", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a Global" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int GlobalG;",
		"int GlobalG;{Enter}   __int64 Global64;", 1) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	LogTestEnd( "Add a Global" );

	// backup changes and continue debugging
	LogTestBegin( "Add a Global: backup case" );
	EXPECT_TRUE( ModifyCode("int GlobalG;",
		"int GlobalG;", 2) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Add a Global: backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddDataMember( )
{
// 	LogTestHeader( "AddDataMember" );
	CStartEndTest se_test("AddDataMember", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

 	LogTestBegin( "Add a data member" );
	// Add __int64* pi64 to derived class in cxx.cxx
	EXPECT_TRUE( ModifyCode("int id;",
		"int id;{Enter}   __int64* pi64;", 1) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);
 	LogTestEnd( "Add a data member" );
	
	// backup changes and continue debugging
 	LogTestBegin( "Add a data member: backup case" );
	EXPECT_TRUE( ModifyCode("int id;",
		"int id;", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "Result=foo1.getID(); // getID" ) );
 	LogTestEnd( "Add a data member: backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddStaticVar( )
{
// 	LogTestHeader( "AddStaticVar" );
	CStartEndTest se_test("AddStaticVar", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	bps.SetBreakpoint("TestG");
	EXPECT_TRUE( dbg.Go(NULL, NULL, "TestG") );

	LogTestBegin( "Add a Static var" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int func() {",
		"int func() {{Enter}   static __int64 statVar;", 1) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	LogTestEnd( "Add a Static var" );

	// backup changes and continue debugging
	LogTestBegin( "Add a Static var: Backup case" );
	EXPECT_TRUE( ModifyCode("int func() {",
		"int func() {", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	EXPECT_TRUE( dbg.CurrentLineIs( "char Char = 'f';" ) );
	LogTestEnd( "Add a Static var: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddLocalVar( )
{
// 	LogTestHeader( "AddLocalVar" );
	CStartEndTest se_test("AddLocalVar", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a local var to inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;{Enter}   double LocalVar;", 1) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add a local var to inactive frame" );

	// backup changes and continue debugging
	LogTestBegin( "Add a local var to inactive frame: Backup case" );
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;", 2) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	EXPECT_TRUE( dbg.CurrentLineIs( "char Char = 'f';" ) );	 // Can't be verified till active frame E&C is implemented
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add a local var to inactive frame: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddLocalObject( )
{
// 	LogTestHeader( "AddLocalObject" );
	CStartEndTest se_test("AddLocalObject", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

 	LogTestBegin( "Add a local object to inactive frame" );
	// Add __int64* pi64 to derived class in cxx.cxx
	EXPECT_TRUE( ModifyCode("derivedm drvm;",
		"derivedm drvm;{Enter}   derivedm drvm2;", 1) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
//		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
//		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Add a local object to inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Add a local object to inactive frame: Backup case" );
	EXPECT_TRUE( ModifyCode("derivedm drvm;",
		"derivedm drvm;", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
//		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
//		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Add a local object to inactive frame: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddOperations( )
{
// 	LogTestHeader( "AddOperations" );
	CStartEndTest se_test("AddOperations", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add operations to inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");

	LogTestHeader( "Add operations to inactive frame: modify a statement", TT_TESTCASE );
	EXPECT_TRUE( ModifyCodeLine("Union_local.Long = 999;", "Union_local.Long = 999 - Union_local.Int;") );
	EXPECT_TRUE( src.Find("Union_local.Long = 999 - Union_local.Int;") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "Union_local.Long = 999 - Union_local.Int;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Enum_local = one;") );
	EXPECT_TRUE( cxx.ExpressionValueIs("Union_local.Long", 994) );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
	bps.ClearAllBreakpoints();
	LogTestEnd( "Add operations to inactive frame" );

	// backup changes and continue debugging
	LogTestBegin( "Add operations to inactive frame: Backup case" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("Union_local.Long = 999 - Union_local.Int;", "Union_local.Long = 999;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add operations to inactive frame: Backup case" );

	LogTestBegin( "Add operations to inactive frame: add a new statement" );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCode("int j_1 = 5;",
		"int j_1 = 5;{Enter}   j_1 *= i_1;", 1) );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func1") );
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "j_1 *= i_1;" ) );
//	EXPECT_TRUE( dbg.StepOver(1, NULL, "Enum_local = one;") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "for (int i =0; i < 10; i++)	// func1") );
	EXPECT_TRUE( cxx.ExpressionValueIs("j_1", 25) );
	EXPECT_TRUE( dbg.StepOut() );
	LogTestEnd( "Add operations to inactive frame: add a new statement" );

	// backup changes and continue debugging
	LogTestBegin( "Add operations to inactive frame: add a new statement: Backup case" );
	EXPECT_TRUE( ModifyCode("int j_1 = 5;",
		"int j_1 = 5;", 2) );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	LogTestEnd( "Add operations to inactive frame: add a new statement: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CAddingCodeTest::AddLoop( )
{
// 	LogTestHeader( "AddLoop" );
	CStartEndTest se_test("AddLoop", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a for_loop to inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");

//	EXPECT_TRUE( ModifyCodeLine("Enum_local = one;",
//		"Enum_local = one;  for(Int=0; Int<5; Int++) { Union_local.Long += Int; };") );
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;{Enter}  for(Int=0; Int<5; Int++){Enter} { Union_local.Int += Int; };",
		1) );
	EXPECT_TRUE( src.Find("if (Flag)") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "if (Flag)" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("Union_local.Long", 1009) );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
	bps.ClearAllBreakpoints();
	LogTestEnd( "Add a for_loop to inactive frame" );

	// backup changes and continue debugging
	LogTestBegin( "Add a for_loop to inactive frame: Backup case" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
//	EXPECT_TRUE( ModifyCodeLine("Enum_local = one;  for(Int=0; Int<5; Int++) { Union_local.Long += Int; };",
//		"Enum_local = one;") );
	EXPECT_TRUE( ModifyCode("Enum_local = one;",
		"Enum_local = one;", 3) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add a for_loop to inactive frame: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\bp.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	bp.CPP
//											 
//	Created by :			
//		VCBU QA		

#include <process.h>
#include "stdafx.h"
#include "bp.h"	

#if defined(_MIPS_) || defined(_ALPHA_)
#define _CHAIN_2 "chain_2"
#define _CHAIN_3 "chain_3"
#else
#define _CHAIN_2 "_chain_2"
#define _CHAIN_3 "_chain_3"
#endif

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
											   
//IMPLEMENT_TEST(CBreakpointsTest, CECTestSet, "EC Sniff Breakpoints", -1, CSniffSubSuite)
IMPLEMENT_DYNAMIC(CBreakpointsTest, CECTestSet)
IMPLEMENT_TEST(CBreakpointsTestEXE, CBreakpointsTest, "EC Sniff Breakpoints EXE", -1, CSniffSubSuite)
IMPLEMENT_TEST(CBreakpointsTestEXT, CBreakpointsTest, "EC Sniff Breakpoints EXT", -1, CSniffSubSuite)
IMPLEMENT_TEST(CBreakpointsTestINT, CBreakpointsTest, "EC Sniff Breakpoints INT", -1, CSniffSubSuite)
												 
CBreakpointsTest::CBreakpointsTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CECTestSet(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}
												 
void CBreakpointsTest::PreRun(void)
{
	// call the base class
	CTest::PreRun();

}

void CBreakpointsTest::Run()
{	 
	XSAFETY;
	EXPECT_TRUE( dbg.ToggleEditAndContinue(TOGGLE_ON) );

	XSAFETY;
	BPAtNewCodeLine();	// 2 cases: 1 failed: # 13137/13568, 1 blocked
	XSAFETY;
	BPOnNewLocal();	  // 2 cases: 1 failed: # 14133, 1 blocked
	XSAFETY;
	BPOnNewLocalWithCodition();	  // 2 cases: 1 failed: # 14133, 1 blocked
	XSAFETY;

	COWorkSpace ws;
	ws.CloseAllWindows();
	XSAFETY;
}

void CBreakpointsTestEXE::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	if( SetProject(szProjPathName) )
	{
		CBreakpointsTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
		
}

void CBreakpointsTestEXT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecwinapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CBreakpointsTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

void CBreakpointsTestINT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecmfcapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	CreateDirectory(m_strProjectLoc + "res\\", 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CBreakpointsTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

///////////////////////////////////////////////////////////////////////////////
//	Test Cases
///////////////////////////////////////////////////////////////////////////////

BOOL CBreakpointsTest::BPAtNewCodeLine( )
{
// 	LogTestHeader( "BPAtNewCodeLine" );
	CStartEndTest se_test("BPAtNewCodeLine", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a new statement to inactive frame, set a breakpoint and GO" );

//	LogTestHeader( "Add operations to inactive frame: add a new statement", TT_TESTCASE );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCode("int j_1 = 5;",
		"int j_1 = 5;{Enter}   j_1 *= (i_1 + 2);", 1) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
	EXPECT_TRUE( dbg.CurrentLineIs( "Based();" ) );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("j_1 *= (i_1 + 2);") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	//VerifyECSuccess();
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
	if( WaitMsgBoxText("One or more breakpoints are not positioned on valid lines", 280) )
	{
		MST.WButtonClick( "OK" ); 
	}
*/
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func1") );
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "j_1 *= (i_1 + 2);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "for (int i =0; i < 10; i++)	// func1") );
	EXPECT_TRUE( cxx.ExpressionValueIs("j_1", 35) );
	EXPECT_TRUE( dbg.StepOut() );
	LogTestEnd( "Add a new statement to inactive frame, set a breakpoint and GO" );

	// backup changes and continue debugging
	LogTestBegin( "Add a new statement to inactive frame, set a breakpoint and GO: Backup case" );
	EXPECT_TRUE( ModifyCode("int j_1 = 5;",
		"int j_1 = 5;", 2) );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("One or more breakpoints are not positioned on valid lines", 280) )
	{
		MST.WButtonClick( "OK" ); 
	}
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("func1") );
//	EXPECT_TRUE( dbg.CurrentLineIs( "for (int i =0; i < 10; i++)	// func1" ) );
	EXPECT_TRUE( dbg.CurrentLineIs( "int j_1 = 5;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "for (int i =0; i < 10; i++)	// func1") );
	EXPECT_TRUE( cxx.ExpressionValueIs("j_1", 5) );
	LogTestEnd( "Add a new statement to inactive frame, set a breakpoint and GO: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CBreakpointsTest::BPOnNewLocal( )
{
// 	LogTestHeader( "BPOnNewLocal" );
	CStartEndTest se_test("BPOnNewLocal", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a local var to inactive frame and set a breakpoint" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;{Enter}   double LocalVar = 9.9;", 1) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	dbg.StepOver();
	EXPECT_TRUE( bps.SetBreakOnExpr("{TestG}LocalVar", COBP_TYPE_IF_EXP_CHANGED) != NULL );
	dbg.Go(NULL,NULL,NULL,0);
	if( WaitMsgBoxText("Break when '{TestG}LocalVar'", 280) )
	{
		WriteLog( PASSED, "The MsgBox \"Break when '{TestG}LocalVar'\" was found as expected" );
		MST.WButtonClick( "OK" ); 
	}
	else
	{
		WriteLog( FAILED, "The MsgBox \"Break when '{TestG}LocalVar'\" was not found" );
		EXPECT_TRUE( FALSE );	 	
	}
	EXPECT_TRUE( dbg.CurrentLineIs( "double LocalVar = 9.9;" ) );	
	EXPECT_TRUE( dbg.StepOver(1, NULL, "char Char = 'f';") );
	EXPECT_TRUE( cxx.ExpressionValueIs("LocalVar", 9.9) );
	bps.ClearAllBreakpoints();
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
	LogTestEnd( "Add a local var to inactive frame and set a breakpoint" );

	// backup changes and continue debugging
	LogTestBegin( "Add a local var to inactive frame and set a breakpoint: backup case" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add a local var to inactive frame and set a breakpoint: backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CBreakpointsTest::BPOnNewLocalWithCodition( )
{
// 	LogTestHeader( "BPOnNewLocalWithCodition" );
	CStartEndTest se_test("BPOnNewLocalWithCodition", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Add a local var to inactive frame and set a breakpoint" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;{Enter}   double LocalVar = 9.9;", 1) );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( bps.SetBreakOnExpr("{TestG}LocalVar", COBP_TYPE_IF_EXP_CHANGED, 3) != NULL );
//	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
	dbg.Go(NULL,NULL,NULL,0);
	if( WaitMsgBoxText("Break when '{TestG}LocalVar'", 280) )
	{
		WriteLog( PASSED, "The MsgBox \"Break when '{TestG}LocalVar'\" was found as expected" );
		MST.WButtonClick( "OK" ); 
	}
	else
	{
		WriteLog( FAILED, "The MsgBox \"Break when '{TestG}LocalVar'\" was not found" );
		EXPECT_TRUE( FALSE );	 	
	}
	bps.ClearAllBreakpoints();
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
	LogTestEnd( "Add a local var to inactive frame and set a breakpoint" );

	// backup changes and continue debugging
	LogTestBegin( "Add a local var to inactive frame and set a breakpoint: Backup case" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("int Local;",
		"int Local;", 2) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Add a local var to inactive frame and set a breakpoint: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\mix.h ===
///////////////////////////////////////////////////////////////////////////////
//	Mix.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CMixTest Class
//

#ifndef __Mix_H__
#define __Mix_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "sniffsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CMixTest class

class CMixTest : public CECTestSet
{
//	DECLARE_TEST(CMixTest, CSniffSubSuite)
	DECLARE_DYNAMIC(CMixTest)

// Operations
public:
	virtual void PreRun(void);
	virtual void Run();
	CMixTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);

// Test Cases
protected:

	BOOL EditHeaderExe();
	BOOL EditIncludeCpp();
	BOOL ECStopDebuggingLink();
	BOOL SyntaxError();

};

///////////////////////////////////////////////////////////////////////////////
//	CMixTestEXE class

class CMixTestEXE : public CMixTest
{
	DECLARE_TEST(CMixTestEXE, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CMixTestEXT class

class CMixTestEXT : public CMixTest
{
	DECLARE_TEST(CMixTestEXT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CMixTestINT class

class CMixTestINT : public CMixTest
{
	DECLARE_TEST(CMixTestINT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

#endif //__Mix_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\stdafx.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.CPP
//
//	Created by :			:
//		VCBU QA		
//
//	Description :
//		source file that includes just the standard include
//
//		stdafx.pch will be the pre-compiled header
//		stdafx.obj will contain the pre-compiled type information
//

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\stdafx.h ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.H
//
//	Created by :			Date :
//		VCBU QA		
//
//	Description :
//		Precompiled header for the test
//
//		Includes core CAFE headers, as contained in the utility headers
//		for the Workbench and all of the workbench's areas.
//

#ifndef __STDAFX_H__
#define __STDAFX_H__

#include <afxwin.h>			// MFC core and standard components
#include <winperf.h>		// skipped in windows.h due to WIN32_LEAN_AND_MEAN
#include <afxext.h> 		// MFC extensions
#include <afxtempl.h>

#include "test.h"
#include "subsuite.h"
#include "support.h"


#endif //__STDAFX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\mix.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	Mix.CPP
//											 
//	Created by :			
//		VCBU QA		

#include <process.h>
#include "stdafx.h"
#include "mix.h"	

#if defined(_MIPS_) || defined(_ALPHA_)
#define _CHAIN_2 "chain_2"
#define _CHAIN_3 "chain_3"
#else
#define _CHAIN_2 "_chain_2"
#define _CHAIN_3 "_chain_3"
#endif

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
											   
//IMPLEMENT_TEST(CMixTest, CECTestSet, "EC Sniff Mix", -1, CSniffSubSuite)
IMPLEMENT_DYNAMIC(CMixTest, CECTestSet)
IMPLEMENT_TEST(CMixTestEXE, CMixTest, "EC Sniff Mix EXE", -1, CSniffSubSuite)
IMPLEMENT_TEST(CMixTestEXT, CMixTest, "EC Sniff Mix EXT", -1, CSniffSubSuite)
IMPLEMENT_TEST(CMixTestINT, CMixTest, "EC Sniff Mix INT", -1, CSniffSubSuite)
												 
CMixTest::CMixTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CECTestSet(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}
												 
void CMixTest::PreRun(void)
{
	// call the base class
	CTest::PreRun();

}

void CMixTest::Run()
{	 
	XSAFETY;
	EXPECT_TRUE( dbg.ToggleEditAndContinue(TOGGLE_ON) );
	
	XSAFETY;
	EditHeaderExe();   // 2 cases:
	XSAFETY;
	EditIncludeCpp();  // 2 cases:
	XSAFETY;
	ECStopDebuggingLink();	// 2 cases: #8951 - fixed
	XSAFETY;
	SyntaxError();		// 2 cases:
	XSAFETY;
		
	COWorkSpace ws;
	ws.CloseAllWindows();
	XSAFETY;
}

void CMixTestEXE::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	if( SetProject(szProjPathName) )
	{
		CMixTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
		
}

void CMixTestEXT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecwinapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CMixTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

void CMixTestINT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecmfcapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	CreateDirectory(m_strProjectLoc + "res\\", 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CMixTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}


///////////////////////////////////////////////////////////////////////////////
//	Test Cases
///////////////////////////////////////////////////////////////////////////////

BOOL CMixTest::EditHeaderExe( )
{
//	LogTestBegin( "EditHeaderExe" );
	CStartEndTest se_test("EditHeaderExe", this, TRUE);
	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Edit a header file for exe: Case 1");
	UIWB.OpenFile( m_strProjectLoc + "testg.h");

	EXPECT_TRUE( ModifyCodeLine("number*=2;", "number*=4;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC ignores the change
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue", FALSE ) < 0);  
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp", FALSE ) < 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Edit a header file for exe: Case 1");

	// backup changes and continue debugging
	LogTestBegin( "Edit a header file for exe: Backup Case 1");
	UIWB.OpenFile( m_strProjectLoc + "testg.h");
	EXPECT_TRUE( ModifyCodeLine("number*=4;", "number*=2;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC ignores the change
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue", FALSE ) < 0);  
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp", FALSE ) < 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Edit a header file for exe: Backup Case 1");

	dbg.StopDebugging();
//	LogTestEnd( "EditHeaderExe");
	return (TRUE);
}

BOOL CMixTest::EditIncludeCpp( )
{
// 	LogTestBegin( "EditIncludeCpp" );
	CStartEndTest se_test("EditIncludeCpp", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

	LogTestBegin( "Edit a include cpp file for exe: Case1" );
	UIWB.OpenFile( m_strProjectLoc + "include.cpp");

	EXPECT_TRUE( ModifyCodeLine("iGlobal2 = 0;", "iGlobal2 = 9;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC ignores the change
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue", FALSE ) < 0);  
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx", FALSE ) < 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );
	LogTestEnd( "Edit a include cpp file for exe: Case1" );

	// backup changes and continue debugging
	LogTestBegin( "Edit a include cpp file for exe: Backup Case1" );
	UIWB.OpenFile( m_strProjectLoc + "include.cpp");
	EXPECT_TRUE( ModifyCodeLine("iGlobal2 = 9;", "iGlobal2 = 0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC ignores the change
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Cannot update current stack top frame", "OK") )
	{
		m_pLog->RecordInfo("OK on message box 'Cannot update current stack top frame'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue", FALSE ) < 0);  
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx", FALSE ) < 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );
	LogTestEnd( "Edit a include cpp file for exe: Backup Case1" );

	dbg.StopDebugging();
// 	LogTestEnd( "EditIncludeCpp" );
	return (TRUE);
}

BOOL CMixTest::ECStopDebuggingLink( )
{
	CStartEndTest se_test("ECStopDebuggingLink", this, TRUE);
// 	LogTestBegin( "ECStopDebuggingLink" );
//	CTime timeEnd, timeStart = CTime::GetCurrentTime();

 	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Double = func_3param(Int, Long, Real);") );

 	LogTestBegin( "EditContinue in inactive frame StopDebugging VerifyLink" );
	EXPECT_TRUE( ModifyCodeLine("f_3p = l_3p - i_3p;", "f_3p = l_3p - i_3p + 2;") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p++;", "func_3param"));
	EXPECT_TRUE( cxx.ExpressionValueIs("f_3p", 1001) );
 	bps.ClearAllBreakpoints();
	dbg.StopDebugging();
	// Verify link line
	// Verify changes are stiil in the obj
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("f_3p = l_3p - i_3p + 2;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "f_3p = l_3p - i_3p + 2;") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p++;", "func_3param"));
	EXPECT_TRUE( cxx.ExpressionValueIs("f_3p", 1001) );
 	LogTestEnd( "EditContinue in inactive frame StopDebugging VerifyLink" );

	// backup changes and continue debugging
 	LogTestBegin( "Backup case: EditContinue in inactive frame StopDebugging VerifyLink" );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "TestG"));
	EXPECT_TRUE( ModifyCodeLine("f_3p = l_3p - i_3p + 2;", "f_3p = l_3p - i_3p;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
 	LogTestEnd( "Backup case: EditContinue in inactive frame StopDebugging VerifyLink" );

	dbg.StopDebugging();
/*	timeEnd = CTime::GetCurrentTime();
	CTimeSpan elapsed_time(timeEnd - timeStart);
	GetLog()->RecordInfo("***TEST elapsed time %s", elapsed_time.Format("%H:%M:%S"));
 	LogTestEnd( "ECStopDebuggingLink" );
*/	return (TRUE);
}

BOOL CMixTest::SyntaxError( )
{
// 	LogTestBegin( "SyntaxError" );
	CStartEndTest se_test("SyntaxError", this, TRUE);

 	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Double = func_3param(Int, Long, Real);") );

 	LogTestBegin( "Syntax Error in inactive frame" );
	EXPECT_TRUE( ModifyCodeLine("i_3p++;", "i_3p  intParam;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "syntax error" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
 	LogTestEnd( "Syntax Error in inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Backup case: Syntax Error in inactive frame" );
	EXPECT_TRUE( ModifyCodeLine("i_3p  intParam;", "i_3p++;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
	EXPECT_TRUE( src.Find("i_3p++;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i_3p++;") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p += i_3p;", "func_3param"));
	EXPECT_TRUE( cxx.ExpressionValueIs("i_3p", 34) );
 	LogTestEnd( "Backup case: Syntax Error in inactive frame" );

	dbg.StopDebugging();
// 	LogTestEnd( "SyntaxError" );
	return (TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\sniffsub.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	SNIFFSUB.CPP
//
//	Created by :			
//		VCBU QA		
//
//	Description :
//		implementation of the CSniffSubSuite class
//

#include "stdafx.h"
#include "sniffsub.h"
#include "afxdllx.h"
#include "..\cleanup.h"

#include "modify.h"
#include "add.h"
#include "remove.h"
#include "bp.h"
#include "mix.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

/////////////////////////////////////////////////////////////////////////////
// CSniffSubSuite

IMPLEMENT_SUBSUITE(CSniffSubSuite, CIDESubSuite, "EditAndContinue Sniff", "VCQA Debugger")

BEGIN_TESTLIST(CSniffSubSuite)
	TEST(CModifyingCodeTestEXE, RUN)
	TEST(CModifyingCodeTestEXT, DONTRUN)
	TEST(CModifyingCodeTestINT, DONTRUN)
	TEST(CAddingCodeTestEXE, RUN)
	TEST(CAddingCodeTestEXT, DONTRUN)
	TEST(CAddingCodeTestINT, DONTRUN)
	TEST(CRemovingCodeTestEXE, RUN)
	TEST(CRemovingCodeTestEXT, DONTRUN)
	TEST(CRemovingCodeTestINT, DONTRUN)
	TEST(CBreakpointsTestEXE, RUN)
	TEST(CBreakpointsTestEXT, DONTRUN)
	TEST(CBreakpointsTestINT, DONTRUN)
	TEST(CMixTestEXE, RUN)
	TEST(CMixTestEXT, DONTRUN)
	TEST(CMixTestINT, DONTRUN)
END_TESTLIST()

void CSniffSubSuite::CleanUp(void)
	{
	::CleanUp("ecconsol");
	::CleanUp("ecwinapp");
	}

///////////////////////////////////////////////////////////////////////////////
//	SubSuite initialization

void CSniffSubSuite::SetUp(BOOL bCleanUp)
{
	fProjBuilt = FALSE;
	
	CSubSuite::SetUp(bCleanUp);

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\sniffsub.h ===
///////////////////////////////////////////////////////////////////////////////
//	sniffsub.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CSniffSubSuite class
//

#ifndef __SNIFFSUB_H__
#define __SNIFFSUB_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

///////////////////////////////////////////////////////////////////////////////
// CSniffSubSuite class

class CSniffSubSuite : public CIDESubSuite
{
public:
	DECLARE_SUBSUITE(CSniffSubSuite)
	DECLARE_TESTLIST()

public:
	void SetUp(BOOL bCleanUp);
	BOOL fProjBuilt;

protected:
	void CleanUp(void);
};

#endif //__SNIFFSUB_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\modify.cpp ===
////////////////////////////////////////////////////////////////////////////
//	Modify.CPP
//											 
//	Created by :			
//		VCBU QA		

#include <process.h>
#include "stdafx.h"
#include "Modify.h"	

#if defined(_MIPS_) || defined(_ALPHA_)
#define _CHAIN_2 "chain_2"
#define _CHAIN_3 "chain_3"
#else
#define _CHAIN_2 "_chain_2"
#define _CHAIN_3 "_chain_3"
#endif

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
											   
//IMPLEMENT_TEST(CModifyingCodeTest, CECTestSet, "EC Sniff ModifyingCode", -1, CSniffSubSuite)
IMPLEMENT_DYNAMIC(CModifyingCodeTest, CECTestSet)
IMPLEMENT_TEST(CModifyingCodeTestEXE, CModifyingCodeTest, "EC Sniff ModifyingCode EXE", -1, CSniffSubSuite)
IMPLEMENT_TEST(CModifyingCodeTestEXT, CModifyingCodeTest, "EC Sniff ModifyingCode EXT", -1, CSniffSubSuite)
IMPLEMENT_TEST(CModifyingCodeTestINT, CModifyingCodeTest, "EC Sniff ModifyingCode INT", -1, CSniffSubSuite)

CModifyingCodeTest::CModifyingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CECTestSet(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}
												 
void CModifyingCodeTest::PreRun(void)
{
	// call the base class
	CTest::PreRun();

}

void CModifyingCodeTest::Run()
{	 
	XSAFETY;
	EXPECT_TRUE( dbg.ToggleEditAndContinue(TOGGLE_ON) );
/*	XSAFETY;
	BOOL fSetProject;

	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strProjectName + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	if( !(GetSubSuite()->fProjBuilt) )
	{
		RemoveTestFiles( m_strProjectLoc );
		CreateDirectory(m_strProjectLoc, 0);          
		EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

		fSetProject = SetProject(szProjPathName);
//		fSetProject = SetProject("ecconsol\\ecconsol");
		if( fSetProject )
			GetSubSuite()->fProjBuilt = TRUE;
	}
	else
	{
//		fSetProject = PrepareProject("ecconsol\\ecconsol");
		fSetProject = PrepareProject(szProjPathName);
	}
//	if( SetProject("ecconsol\\ecconsol"))
	if( fSetProject )
	{	  
*/		XSAFETY;
		ModifyFunctionDeclaration();	 // 5 cases
		XSAFETY;
		ModifyFunctionName();			 //  2 cases
		XSAFETY;
		ModifyFunctionDefinition();	  //2 cases: #13137 - fixed
		XSAFETY;
		ModifyMemberFunctionDeclaration();	// 6 cases: #13174 - fixed
		XSAFETY;

		ReplaceFunctionCall();	//6 cases: #9485, #13187, #17148 - fixed.	 
		XSAFETY;
		ReplaceMemberFunctionCall();   //4 cases: #17162 - fixed
		XSAFETY;
		ModifyFunctionCall();		   //8 cases: #17148, #13187, #13568 - fixed
		XSAFETY;
		ModifyMemberFunctionCall();	  //6 cases: #9241, #13137 - fixed
		XSAFETY;
		ModifyGlobal();	 //14 cases #9485 - fixed
		XSAFETY;
		ModifyDataMember();	 //12 cases
		XSAFETY;
		ModifyStaticVar();	// 18 cases: //# 13530, #9744 - fixed
		XSAFETY;
		ModifyLocalVar(); //7 cases: #17148, #13137, #13652, #9851 - fixed
		XSAFETY;
		ModifyLocalFunctionPointer();	//6 cases: //#13568 - fixed
		XSAFETY;
		ModifyLocalPointer();	//4 cases: #13752 -fixed
		XSAFETY;
		ModifyLocalObject();  // 7 cases: //#13772 - fixed
		XSAFETY;
		ModifyOperations();	  //  6 cases: #13137, 13568 - fixed
		XSAFETY;
		ModifyLoop();	  // 6 cases: #13808 - fixed
		XSAFETY;

//	}
		
	COWorkSpace ws;
	ws.CloseAllWindows();
	XSAFETY;
}

void CModifyingCodeTestEXE::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
//	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
//	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strProjectName + "\\";
//	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

//	if( SetProject("ecconsol\\ecconsol"))
	if( SetProject(szProjPathName) )
	{
		CModifyingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
		
}

void CModifyingCodeTestEXT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecwinapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
//		EXPECT_TRUE( VERIFY_TEST_SUCCESS( prj.Build(iWaitForBuild)));
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CModifyingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

void CModifyingCodeTestINT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecmfcapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;
/*
	RemoveTestFiles( szProjResLoc );
	RemoveTestFiles( m_strProjLoc );

	CreateDirectory(m_strProjLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjLoc ) );
	CreateDirectory(szProjResLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szResFileLoc, szProjResLoc ) );
*/
	RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	CreateDirectory(m_strProjectLoc + "res\\", 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
//		EXPECT_TRUE( VERIFY_TEST_SUCCESS( prj.Build(iWaitForBuild)));
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CModifyingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}


///////////////////////////////////////////////////////////////////////////////
//	Test Cases
///////////////////////////////////////////////////////////////////////////////

BOOL CModifyingCodeTest::ModifyFunctionDeclaration( )
{
// 	LogTestHeader( "ModifyFunctionDeclaration" );
	CStartEndTest se_test("ModifyFunctionDeclaration", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

 	LogTestBegin( "Modify function's return type" );
	// Modify return type of "func_1param" declaration in testg.cpp
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("int func_1param(int);", "long func_1param(int);") );
	EXPECT_TRUE( src.Find("int func_1param(int Parameter)") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
//	if( WaitMsgBoxText("Do you want to save", 10) )
//		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// CString str = UIWB.GetStatusText();	// doesn't work now
	// Output window: overloaded function differs only by return type
	EXPECT_TRUE( VerifyBuildString( "overloaded function differs only by return type" ) >= 0);

	// Modify the definition to get in ssync with declaration
	EXPECT_TRUE( ModifyCodeLine("int func_1param(int Parameter)", "long func_1param(int Parameter)") );
	EXPECT_TRUE( src.Find("long func_1param(int Parameter)") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	// We should handle a dialog "One or more files are out of date..." and click "Cancel".
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue; build required" ) >= 0);
 	LogTestEnd( "Modify function's return type" );

	// Backup previuos changes
	EXPECT_TRUE( ModifyCodeLine("long func_1param(int);", "int func_1param(int);") );
	EXPECT_TRUE( ModifyCodeLine("long func_1param(int Parameter)", "int func_1param(int Parameter)") );

 	LogTestBegin( "Modify function's parameter type" );
//	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("long func_2param(int, long);", "long func_2param(long, long);") );
	EXPECT_TRUE( ModifyCodeLine("long func_2param(int intParam, long longParam)", "long func_2param(long intParam, long longParam)") );
	EXPECT_TRUE( src.Find("long func_2param(long intParam, long longParam)") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue; build required" ) >= 0);
 	LogTestEnd( "Modify function's parameter type" );

	// Backup changes
	EXPECT_TRUE( ModifyCodeLine("long func_2param(long, long);", "long func_2param(int, long);") );
	EXPECT_TRUE( ModifyCodeLine("long func_2param(long intParam, long longParam)", "long func_2param(int intParam, long longParam)") );

	LogTestBegin( "Add function's parameter" );
//	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("void nest_func();", "void nest_func(int);") );
	EXPECT_TRUE( ModifyCodeLine("void nest_func() {", "void nest_func(int par) {") );
	EXPECT_TRUE( ModifyCodeLine("nest_func(); // nest_func call line", "nest_func(5); // nest_func call line") );
	EXPECT_TRUE( src.Find("void nest_func(int par) {") );
//	dbg.StepToCursor(0);
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  // Better output should come, then we'll change it
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: void __cdecl nest_func(int)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl TestG(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image: void __cdecl nest_func(int)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing: nest_func" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	bps.ClearAllBreakpoints();
	LogTestEnd( "Add function's parameter" );

	// Backup changes and continue
	LogTestBegin( "Backup all changes and continue" );
	EXPECT_TRUE( ModifyCodeLine("void nest_func(int);", "void nest_func();") );
	EXPECT_TRUE( ModifyCodeLine("void nest_func(int par) {", "void nest_func() {") );
	EXPECT_TRUE( ModifyCodeLine("nest_func(5); // nest_func call line", "nest_func(); // nest_func call line") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
/*	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
*/	// Verify EC success (was: fails gracefully ) (uses a known return type)
//	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( !IsMsgBox("One or more errors occurred", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
	LogTestEnd( "Backup all changes and continue" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyFunctionName( )
{
// 	LogTestHeader( "ModifyFunctionName" );
	CStartEndTest se_test("ModifyFunctionName", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

 	LogTestBegin( "Modify function's name" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("int recur_func();", "int recur_func2();") );
	EXPECT_TRUE( ModifyCodeLine("int recur_func() {", "int recur_func2() {") );
	EXPECT_TRUE( ModifyCodeLine("recur_func(); // call line", "recur_func2(); // call line") );
	EXPECT_TRUE( ModifyCodeLine("Int = recur_func();", "Int = recur_func2();") );
	EXPECT_TRUE( src.Find("int recur_func2() {") );
//	dbg.StepToCursor(0);
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC fails gracefully 
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( dbg.CurrentLineIs( "int recur_func2() {" ) );
	bps.ClearAllBreakpoints();
//	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "TestG") );
 	LogTestEnd( "Modify function's name" );

	// Backup changes and continue
 	LogTestBegin( "Modify function's name: Backup case" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("int recur_func2();", "int recur_func();") );
	EXPECT_TRUE( ModifyCodeLine("recur_func2(); // call line", "recur_func(); // call line") );
	EXPECT_TRUE( ModifyCodeLine("Int = recur_func2();", "Int = recur_func();") );
	EXPECT_TRUE( ModifyCodeLine("int recur_func2() {", "int recur_func() {") );
//	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success (was: fails gracefully ) (uses a known return type)
//	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( !IsMsgBox("One or more errors occurred", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
	else
	{
		m_pLog->RecordInfo("Message box 'Could not perform a complete stack walk' didn't appear");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
 	LogTestEnd( "Modify function's name: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyFunctionDefinition( )
{
// 	LogTestHeader( "ModifyFunctionDefinition" );
	CStartEndTest se_test("ModifyFunctionDefinition", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Modify function's parameter name" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("double func_3param(int intParam, long longParam, float floatParam)", "double func_3param(int intParam, long longParam, float realParam)") );
	EXPECT_TRUE( ModifyCodeLine("double d_3p = intParam + longParam + floatParam;", "double d_3p = intParam + longParam + realParam;") );
//	EXPECT_TRUE( src.Find("double func_3param(int intParam, long longParam, float realParam)") );
	EXPECT_TRUE( src.Find("double d_3p = intParam + longParam + realParam;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
//	if( WaitMsgBoxText("Do you want to save", 10) )
//		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
	else
	{
		m_pLog->RecordInfo("Message box 'Could not perform a complete stack walk' didn't appear");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Verify EC success (inactive frame)
	EXPECT_TRUE( dbg.CurrentLineIs( "double d_3p = intParam + longParam + realParam;" ) );
	LogTestEnd( "Modify function's parameter name" );

	// Backup changes and continue
	LogTestBegin( "Modify function's parameter name: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("double func_3param(int intParam, long longParam, float realParam)", "double func_3param(int intParam, long longParam, float floatParam)") );
	EXPECT_TRUE( ModifyCodeLine("double d_3p = intParam + longParam + realParam;", "double d_3p = intParam + longParam + floatParam;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Verify EC success (active frame)
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Modify function's parameter name: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}


BOOL CModifyingCodeTest::ModifyMemberFunctionDeclaration( )
{
 	//LogTestHeader( "ModifyMemberFunctionDeclaration" );
	CStartEndTest se_test("ModifyMemberFunctionDeclaration", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

 	LogTestBegin( "Modify static member function return type" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("static int static_func() { return 9; };", "static __int64 static_func() { return 9; };") );
	EXPECT_TRUE( src.Find("static __int64 static_func() { return 9; };") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
//	if( WaitMsgBoxText("Do you want to save", 10) )
//		MST.WButtonClick( "No" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx", FALSE ) < 0);  
 	LogTestEnd( "Modify static member function return type" );

	// Backup changes
	EXPECT_TRUE( ModifyCodeLine("static __int64 static_func() { return 9; };", "static int static_func() { return 9; };") );

 	LogTestBegin( "Modify inline member function name" );
//	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("inline void inline_func()", "inline void inline_func2()") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("foo1.inline_func();", "foo1.inline_func2();") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( src.Find("inline void inline_func2()") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
 	LogTestEnd( "Modify inline member function name" );

	// Backup changes
	EXPECT_TRUE( ModifyCodeLine("inline void inline_func2()", "inline void inline_func()") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("foo1.inline_func2();", "foo1.inline_func();") );

 	LogTestBegin( "Modify overloaded member function" );
//	UIWB.OpenFile( m_strProjectLoc + "include.cpp");
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("int overloaded_func(int i){return i;}", "int overloaded_func(int i, long l){return i+l;}") );
	EXPECT_TRUE( ModifyCodeLine("pb->overloaded_func(1);", "pb->overloaded_func(1,22);") );
	EXPECT_TRUE( src.Find("int overloaded_func(int i, long l){return i+l;}") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0); 
 	LogTestEnd( "Modify overloaded member function" );

	// Backup changes
	EXPECT_TRUE( ModifyCodeLine("int overloaded_func(int i, long l){return i+l;}", "int overloaded_func(int i){return i;}") );
	EXPECT_TRUE( ModifyCodeLine("pb->overloaded_func(1,22);", "pb->overloaded_func(1);") );

 	LogTestBegin( "Modify virtual member function's parameter" );
//	UIWB.OpenFile( m_strProjectLoc + "include.h");
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("virtual int base1_virtual_func(int i); // base1", "virtual int base1_virtual_func(long i); // base1") );
	EXPECT_TRUE( ModifyCodeLine("virtual int base1_virtual_func(int i); // derivedm", "virtual int base1_virtual_func(long i); // derivedm") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("int base1::base1_virtual_func(int i)", "int base1::base1_virtual_func(long i)") );
	EXPECT_TRUE( ModifyCodeLine("int derivedm::base1_virtual_func(int i)", "int derivedm::base1_virtual_func(long i)") );
	EXPECT_TRUE( src.Find("int derivedm::base1_virtual_func(long i)") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0); 
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0); 
	// Backup changes
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("int base1::base1_virtual_func(long i)", "int base1::base1_virtual_func(int i)") );
	EXPECT_TRUE( ModifyCodeLine("int derivedm::base1_virtual_func(long i)", "int derivedm::base1_virtual_func(int i)") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("virtual int base1_virtual_func(long i); // base1", "virtual int base1_virtual_func(int i); // base1") );
	EXPECT_TRUE( ModifyCodeLine("virtual int base1_virtual_func(long i); // derivedm", "virtual int base1_virtual_func(int i); // derivedm") );
 	LogTestEnd( "Modify virtual member function's parameter" );

 	LogTestBegin( "Modify overridden member function" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("int base1_overridden_func(int i); // base1", "long base1_overridden_func(long l); // base1") );
	EXPECT_TRUE( ModifyCodeLine("int base1_overridden_func(int i); // derivedm", "long base1_overridden_func(long l); // derivedm") );
//	UIWB.OpenFile( m_strProjectLoc + "include.cpp");
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("int base1::base1_overridden_func(int i)", "long base1::base1_overridden_func(long l)") );
	EXPECT_TRUE( ModifyCodeLine("int derivedm::base1_overridden_func(int i)", "long derivedm::base1_overridden_func(long l)") );
	EXPECT_TRUE( src.Find("long derivedm::base1_overridden_func(long l)") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
//	EXPECT_TRUE( IsMsgBox("One or more files are out of date", "Cancel") );
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
 	LogTestEnd( "Modify overridden member function" );

	// Backup changes and continue
 	LogTestBegin( "Backup changes and continue" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("long base1::base1_overridden_func(long l)", "int base1::base1_overridden_func(int i)") );
	EXPECT_TRUE( ModifyCodeLine("long derivedm::base1_overridden_func(long l)", "int derivedm::base1_overridden_func(int i)") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.h");
	EXPECT_TRUE( ModifyCodeLine("long base1_overridden_func(long l); // base1", "int base1_overridden_func(int i); // base1") );
	EXPECT_TRUE( ModifyCodeLine("long base1_overridden_func(long l); // derivedm", "int base1_overridden_func(int i); // derivedm") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Backup changes and continue" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ReplaceFunctionCall( )
{
// 	LogTestHeader( "ReplaceFunctionCall" );
	CStartEndTest se_test("ReplaceFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

 	LogTestBegin( "Replace a function call in non active frame" );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("Int = func_1param(Local);", "Int = foo_Include(Local);") );
	EXPECT_TRUE( src.Find("Int = foo_Include(Local);") );
//	dbg.StepToCursor(0);
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
//	if( WaitMsgBoxText("Do you want to save", 10) )
//		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Int = foo_Include(Local);" ) );
	bps.ClearAllBreakpoints();
 	LogTestEnd( "Replace a function call in non active frame" );

 	LogTestBegin( "Replace a function call in active frame After IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
	EXPECT_TRUE( ModifyCodeLine("Int = foo_Include(i);", "Int = recur_func(); // replacement") );
	EXPECT_TRUE( src.Find("Double = func_3param(Int, Long, Real);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Double = func_3param(Int, Long, Real);" ) );
 	LogTestEnd( "Replace a function call in active frame After IP" );

 	LogTestBegin( "Replace a function call in active frame Before IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
	EXPECT_TRUE( ModifyCodeLine("Long = func_2param(Int, Long);", "Long = func_1param(Local);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);  //It should execute a cycle in the loop back to the same line
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Long = func_1param(Local);" ) );
 	LogTestEnd( "Replace a function call in active frame Before IP" );

 	LogTestBegin( "Replace a function call in active frame aT IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
	EXPECT_TRUE( ModifyCodeLine("Double = func_3param(Int, Long, Real);", "Double = func_2param(Int, Long);") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func_1param") );
 	LogTestEnd( "Replace a function call in active frame aT IP" );

	// #17148   // ToDo: do one more stepout to get rid of DAM: change the verification part
 	LogTestBegin( "Replace a function call in non-top active frame After IP" );
	EXPECT_TRUE( stk.FunctionIs("TestG",1)	);
	EXPECT_TRUE( ModifyCodeLine("Int = recur_func(); // initial call", "Int = check_func(Int,20);") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
//8044	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "Yes") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
//	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
//	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
//		MST.WButtonClick( "OK" );
//	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	dbg.StopDebugging();
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("Int = check_func(Int,20);") );
	dbg.StepToCursor(0);
	dbg.StepInto();  
	EXPECT_TRUE( stk.CurrentFunctionIs("check_func") );
 	LogTestEnd( "Replace a function call in non-top active frame After IP" );

	// Backup changes in testg.cpp
 	LogTestBegin( "Backup changes in testg.cpp" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("Int = foo_Include(Local);", "Int = func_1param(Local);") );
	EXPECT_TRUE( ModifyCodeLine("Int = recur_func(); // replacement", "Int = foo_Include(i);") );
	EXPECT_TRUE( ModifyCodeLine("Long = func_1param(Local);", "Long = func_2param(Int, Long);") );
	EXPECT_TRUE( ModifyCodeLine("Double = func_2param(Int, Long);", "Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( ModifyCodeLine("Int = check_func(Int,20);", "Int = recur_func(); // initial call") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success  ????
	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
 	LogTestEnd( "Backup changes in testg.cpp" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyFunctionCall( )
{
// 	LogTestHeader( "ModifyFunctionCall" );
	CStartEndTest se_test("ModifyFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

 	LogTestBegin( "Modify function call's parameters (var to value) in non active frame" );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("Int = func_1param(Local);", "Int = func_1param(5);") );
	EXPECT_TRUE( src.Find("Int = func_1param(5);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Int = func_1param(5);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Long = func_2param(Int, Long);") );
 	LogTestEnd( "Modify function call's parameters (var to value) in non active frame" );
	
 	LogTestBegin( "Modify function call's parameters in active frame aT IP" );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	EXPECT_TRUE( ModifyCodeLine("Double = func_3param(Int, Long, Real);", "Double = func_3param(5,999,1.5);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.CurrentLineIs( "Double = func_3param(5,999,1.5);" ) );
 	LogTestEnd( "Modify function call's parameters in active frame aT IP" );

	// change some params back to vars
 	LogTestBegin( "change some params back to vars" );
	EXPECT_TRUE( ModifyCodeLine("Double = func_3param(5,999,1.5);", "Double = func_3param(Int,555,Real);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Ldouble = func_3param(func_1param(Local), func_2param(Int, Long), Real);" ) );
 	LogTestEnd( "change some params back to vars" );

 	LogTestBegin( "Modify function call's parameters in active frame Before IP" );
	EXPECT_TRUE( dbg.StepOver(2, NULL, "Int = recur_func();") );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	EXPECT_TRUE( ModifyCodeLine("Int = foo_Include(i);", "Int = foo_Include(7);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.CurrentLineIs( "Int = foo_Include(7);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Int = recur_func();") );
 	LogTestEnd( "Modify function call's parameters in active frame Before IP" );
	
	// change param back to var
 	LogTestBegin( "change param back to var" );
	EXPECT_TRUE( ModifyCodeLine("Int = foo_Include(7);", "Int = foo_Include(Int);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "nest_func(); // nest_func call line" ) );
	dbg.StepToCursor(0);  // execute the changed call through loop cycle
	EXPECT_TRUE( dbg.CurrentLineIs( "nest_func(); // nest_func call line" ) );
 	LogTestEnd( "change param back to var" );

 	LogTestBegin( "Modify function call's parameters in non-top active frame Before IP" );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "nest_func") );
	EXPECT_TRUE( stk.FunctionIs("TestG",1)	);
	EXPECT_TRUE( ModifyCodeLine("Int = func_1param(5);", "Int = func_1param(recur_func());") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
//8044	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "Yes") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG")	);
	dbg.StopDebugging();
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
/*	EXPECT_TRUE( src.Find("Int = func_1param(recur_func());") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
*/	EXPECT_TRUE( src.Find("Int = func_1param(recur_func());") );
	dbg.StepToCursor(0);
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Long = func_2param(Int, Long);") );
	EXPECT_TRUE( cxx.ExpressionValueIs("Int", 9) );
 	LogTestEnd( "Modify function call's parameters in non-top active frame Before IP" );

 	LogTestBegin( "Modify function call's parameters in active frame After IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	EXPECT_TRUE( ModifyCodeLine("Int=0;  Int=check_func(Int,90);", "Int=0;  Int=check_func(90,Int);") );
	EXPECT_TRUE( src.Find("Int=0;  Int=check_func(90,Int);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "Int=check_func(90,Int);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "Void = (void*)Int;") );
 	LogTestEnd( "Modify function call's parameters in active frame After IP" );

	// Backup changes in testg.cpp
 	LogTestBegin( "Backup changes in testg.cpp" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("Double = func_3param(Int,555,Real);", "Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( ModifyCodeLine("Int = foo_Include(Int);", "Int = foo_Include(i);") );
	EXPECT_TRUE( ModifyCodeLine("Int = func_1param(recur_func());", "Int = func_1param(Local);") );
	EXPECT_TRUE( ModifyCodeLine("Int=0;  Int=check_func(90,Int);", "Int=0;  Int=check_func(Int,90);") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
 	LogTestEnd( "Backup changes in testg.cpp" );

	dbg.StopDebugging();
	
	return (TRUE);
}

BOOL CModifyingCodeTest::ReplaceMemberFunctionCall( )
{
// 	LogTestHeader( "ReplaceMemberFunctionCall" );
	CStartEndTest se_test("ReplaceMemberFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "foo.c");
	EXPECT_TRUE( src.Find("for(i=0; i<9; i++)") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "for(i=0; i<9; i++)") );
	EXPECT_TRUE( stk.CurrentFunctionIs("OtherMain") );

 	LogTestBegin( "Replace a member function call in non active frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("Result=fooclass::static_func();", "Result=foo1.chain2_func();") );
	EXPECT_TRUE( src.Find("Result=foo1.chain2_func();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
	EXPECT_TRUE( dbg.CurrentLineIs( "Result=foo1.chain2_func();" ) );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "fooclass::chain2_func") );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Cxx_Tests") );
 	LogTestEnd( "Replace a member function call in non active frame" );

 	LogTestBegin( "Replace a member function call in active frame After IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests")	);
	EXPECT_TRUE( ModifyCodeLine("foo1.inline_func();", "foo1.chain1_func(); // replacement") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
/*	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
*/	// Verify EC success
//	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
	if( WaitMsgBoxText("Point of execution moved", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests")	);
	dbg.StepOver(3);  // Do extra step since the previous one was ignored by E&C
//8044	EXPECT_TRUE( dbg.CurrentLineIs( "Result=foo1;" ) );
	dbg.StepOver();
	EXPECT_TRUE( cxx.ExpressionValueIs("Result", 0) );
 	LogTestEnd( "Replace a member function call in active frame After IP" );

 	LogTestBegin( "Replace a member function call in active frame Before IP" );
	EXPECT_TRUE( ModifyCodeLine("Result=foo1.getID(); // getID", "Result=foo1.getCount(); // getID") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);  //It should execute a cycle in the loop back to the same line  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.StepOver(2, NULL, "Result=foo1;") );
 	LogTestEnd( "Replace a member function call in active frame Before IP" );

	// Backup all changes in cxx.cxx  and continue
 	LogTestBegin( "Backup all changes in cxx.cxx  and continue" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("Result=foo1.chain2_func();", "Result=fooclass::static_func();") );
	EXPECT_TRUE( ModifyCodeLine("foo1.chain1_func();", "foo1.inline_func();") );
	EXPECT_TRUE( ModifyCodeLine("Result=foo1.getCount(); // getID", "Result=foo1.getID(); // getID") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);  //It should execute a cycle in the loop back to the same line  
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
 	LogTestEnd( "Backup all changes in cxx.cxx  and continue" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyMemberFunctionCall( )
{
//	LogTestHeader( "ModifyMemberFunctionCall" );
	CStartEndTest se_test("ModifyMemberFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("int test_include = Test_func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int test_include = Test_func();") );
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );

 	LogTestBegin( "Modify member function call's parameters in non active frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("b2.base2_virtual_func(1);", "b2.base2_virtual_func(ib1);") );
	EXPECT_TRUE( src.Find("b2.base2_virtual_func(ib1);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);    
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
/*	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "b2.base2_virtual_func(ib1);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "int iderived = drvm.derivedm_public_func(1+2);") );
 	LogTestEnd( "Modify member function call's parameters in non active frame" );

	LogTestBegin( "Modify member function call's parameters in active frame After IP" );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func2") );
	EXPECT_TRUE( ModifyCodeLine("iderived = drvm.base1_overloaded_func('C');", "iderived = drvm.base1_overloaded_func((char)ib2);") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);    
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("derivedm::derivedm_public_func") );
	LogTestEnd( "Modify member function call's parameters in active frame After IP" );
	
 	LogTestBegin( "Modify member function call's parameters in non-top active frame Before IP" );
//	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "nest_func") );
	EXPECT_TRUE( stk.FunctionIs("Test_func2",1)	);
	EXPECT_TRUE( ModifyCodeLine("ib1 = b1.base1_overridden_func(1);", "ib1 = b1.base1_overridden_func(8);") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);    
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
//	EXPECT_TRUE( IsMsgBox("Edit and Continue", "OK") );
	if( WaitMsgBoxText("Edit and Continue", 10) )
		MST.WButtonClick( "OK" );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func2")	);
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("ib1 = b1.base1_overridden_func(8);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( src.Find("ib1 = b1.base1_overridden_func(8);") );
	dbg.StepToCursor(0);
	EXPECT_TRUE( dbg.StepOver(1, NULL, "ib1 = b1.base1_virtual_func(1);") );
 	LogTestEnd( "Modify member function call's parameters in non-top active frame Before IP" );

 	LogTestBegin( "Modify member function call's parameters in active frame Before IP" );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Test_func") );
	EXPECT_TRUE( ModifyCodeLine("b.virtual_func(0);", "b.virtual_func(::global);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);    
/*	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( src.Find("b.virtual_func(::global);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "b.virtual_func(::global);") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "base *pb1 = new base;") );
 	LogTestEnd( "Modify member function call's parameters in active frame Before IP" );
	
 	LogTestBegin( "Modify member function call's parameters in active frame aT IP" );
	EXPECT_TRUE( src.Find("b.virtual_func(1);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "b.virtual_func(1);") );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	EXPECT_TRUE( ModifyCodeLine("b.virtual_func(1);", "b.virtual_func(b.m_public);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);    
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "Cancel") );
	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.CurrentLineIs( "b.virtual_func(b.m_public);" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "::global = 1;") );
 	LogTestEnd( "Modify member function call's parameters in active frame aT IP" );

	// Backup changes in cxx.cxx
 	LogTestBegin( "Backup changes in cxx.cxx" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("b2.base2_virtual_func(ib1);", "b2.base2_virtual_func(1);") );
	EXPECT_TRUE( ModifyCodeLine("iderived = drvm.base1_overloaded_func((char)ib2);", "iderived = drvm.base1_overloaded_func('C');") );
	EXPECT_TRUE( ModifyCodeLine("ib1 = b1.base1_overridden_func(8);", "ib1 = b1.base1_overridden_func(1);") );
	EXPECT_TRUE( ModifyCodeLine("b.virtual_func(::global);", "b.virtual_func(0);") );
	EXPECT_TRUE( ModifyCodeLine("b.virtual_func(b.m_public);", "b.virtual_func(1);") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);    
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	// Verify EC success
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
 	LogTestEnd( "Backup changes in cxx.cxx" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyGlobal( )
{
// 	LogTestHeader( "ModifyGlobal" );
	CStartEndTest se_test("ModifyGlobal", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	dbg.StepInto();
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");

	LogTestBegin( "Modify Global's type" );
	EXPECT_TRUE( ModifyCodeLine("int global = 0;", "long global = 0;") );
	EXPECT_TRUE( src.Find("base b = func_class();") );
//	dbg.StepToCursor(0);
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
	bps.ClearAllBreakpoints();
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Global's type" );

	// Backup the change
	LogTestBegin( "Modify Global's type: Backup case" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");  // extra
	EXPECT_TRUE( ModifyCodeLine("long global = 0;", "int global = 0;") );
// it hangs under CAFE	 #9485
	EXPECT_TRUE( src.Find("base b = func_class();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	LogTestEnd( "Modify Global's type: Backup case" );

	LogTestBegin( "Modify Global's type to pointer" );
	EXPECT_TRUE( ModifyCodeLine("int global = 0;", "int * global = (int *)0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	LogTestEnd( "Modify Global's type to pointer" );

	// Backup the change
	LogTestBegin( "Modify Global's type to pointer: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("int * global = (int *)0;", "int global = 0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	LogTestEnd( "Modify Global's type to pointer: Backup case" );

	LogTestBegin( "Modify Global's initialization value" );
	EXPECT_TRUE( ModifyCodeLine("int result = 0;", "int result = 99;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Global's initialization value" );

	// Backup the change
	LogTestBegin( "Modify Global's initialization value: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("int result = 99;", "int result = 0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
	LogTestEnd( "Modify Global's initialization value: Backup case" );

	LogTestBegin( "Modify Global's initialization value: Nothing to Var" );
	EXPECT_TRUE( ModifyCodeLine("int iGlobal;", "int iGlobal = result;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Global's initialization value: Nothing to Var" );

	// Backup the change
	LogTestBegin( "Modify Global's initialization value: Var to Nothing: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("int iGlobal = result;", "int iGlobal;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
	LogTestEnd( "Modify Global's initialization value: Var to Nothing: Backup case" );

	LogTestBegin( "Modify Global's initialization value: Nothing to Number" );
	EXPECT_TRUE( ModifyCodeLine("int iGlobal;", "int iGlobal = 5;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// Status bar: Could not complete "Edit & Continue"
	// Output window: Edit not supported by Edit and Continue; build required
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Global's initialization value: Nothing to Number" );

	// Backup the change
	LogTestBegin( "Modify Global's initialization value: Number to Nothing: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("int iGlobal = 5;", "int iGlobal;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
	LogTestEnd( "Modify Global's initialization value: Number to Nothing: Backup case" );

	LogTestBegin( "Modify Global pointer's type and value" );
	EXPECT_TRUE( ModifyCodeLine("int *piGlobal = &iGlobal;", "long *piGlobal = (long *)&result;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
//	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	LogTestEnd( "Modify Global pointer's type and value" );

	// Backup the change
	LogTestBegin( "Modify Global pointer's type and value: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("long *piGlobal = (long *)&result;", "int *piGlobal = &iGlobal;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
	LogTestEnd( "Modify Global pointer's type and value: Backup case" );

	LogTestBegin( "Modify Global's name" );
	EXPECT_TRUE( ModifyCodeLine("int global = 0;", "int Xglobal = 0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "undeclared identifier" ) >= 0);  
	LogTestEnd( "Modify Global's name" );

	LogTestBegin( "Modify Global's name: Backup case" );
	EXPECT_TRUE( ModifyCodeLine("int Xglobal = 0;", "int global = 0;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "stack walk" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl Test_func(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Global's name: Backup case" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyDataMember( )
{
// 	LogTestHeader( "ModifyDataMember" );
	CStartEndTest se_test("ModifyDataMember", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("base b = func_class();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "base b = func_class();") );

	LogTestBegin( "Modify Data Member's type: int to long" );
	// Case 1 
	EXPECT_TRUE( ModifyCodeLine("int m_protected;", "long m_protected;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	LogTestEnd( "Modify Data Member's type: int to long" );

	// Backup the change
	LogTestBegin( "Modify Data Member's type: long to int : Backup case" );
	EXPECT_TRUE( ModifyCodeLine("long m_protected;", "int m_protected;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func_class") );
	LogTestEnd( "Modify Data Member's type: long to int : Backup case" );

	// Case 2
	LogTestBegin( "Modify Data Member's type: float to double" );
	EXPECT_TRUE( ModifyCodeLine("float f;", "double f;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("func_class") );
	LogTestEnd( "Modify Data Member's type: float to double" );

	// Backup the change
	LogTestBegin( "Modify Data Member's type: Backup case: double to float" );
	EXPECT_TRUE( ModifyCodeLine("double f;", "float f;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	LogTestEnd( "Modify Data Member's type: Backup case: double to float" );

	// Case 3
	LogTestBegin( "Modify Data Member's type: char* to char" );
	EXPECT_TRUE( ModifyCodeLine("char *m_pchar;", "char m_pchar;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
	LogTestEnd( "Modify Data Member's type: char* to char" );

	// Backup the change
	LogTestBegin( "Modify Data Member's type: char to char* : Backup" );
	EXPECT_TRUE( ModifyCodeLine("char m_pchar;", "char *m_pchar;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	LogTestEnd( "Modify Data Member's type: char to char* : Backup" );

	// Case 4
	LogTestBegin( "Modify Data Member's type: static int to long" );
	EXPECT_TRUE( ModifyCodeLine("static int ref_cnt;", "long ref_cnt;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
	LogTestEnd( "Modify Data Member's type: static int to long" );

	// Backup the change
	LogTestBegin( "Modify Data Member's type: long to static int : Backup" );
	EXPECT_TRUE( ModifyCodeLine("long ref_cnt;", "static int ref_cnt;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	LogTestEnd( "Modify Data Member's type: long to static int : Backup" );

	LogTestBegin( "Modify Data Member's name" );
	// Case 1
	EXPECT_TRUE( ModifyCodeLine("int m_protected;", "int m_prot;") );
	EXPECT_TRUE( src.Find("drv1.virtual_func1();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "undeclared identifier" ) >= 0);  
	LogTestEnd( "Modify Data Member's name" );

	// Backup the change
	LogTestBegin( "Modify Data Member's name: Backup" );
	EXPECT_TRUE( ModifyCodeLine("int m_prot;", "int m_protected;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("derived::derived") );
	LogTestEnd( "Modify Data Member's name: Backup" );

	// Case 2
	LogTestBegin( "Modify Data Member's name: Case 2" );
	EXPECT_TRUE( ModifyCodeLine("int i;", "int i_A;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "not supported by Edit and Continue" ) >= 0);  
	LogTestEnd( "Modify Data Member's name: Case 2" );

	// Backup the change
	LogTestBegin( "Modify Data Member's name: Case 2: Backup" );
	EXPECT_TRUE( ModifyCodeLine("int i_A;", "int i;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("derived::derived") );
	LogTestEnd( "Modify Data Member's name: Case 2: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyStaticVar( )
{
// 	LogTestHeader( "ModifyStaticVar" );
	CStartEndTest se_test("ModifyStaticVar", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	bps.SetBreakpoint("TestG");
	EXPECT_TRUE( dbg.Go(NULL, NULL, "TestG") );

	LogTestBegin( "Modify Static Var's type" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("static x=1;", "static unsigned long x=1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl TestG(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Static Var's type" );

	// Backup the change
	LogTestBegin( "Modify Static Var's type: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("static unsigned long x=1;", "static x=1;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Modify Static Var's type: Backup" );

	LogTestBegin( "Modify Static Var's Initialization value" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("static x=1;", "static x=6;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl TestG(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Static Var's Initialization value" );

	// Backup the change
	LogTestBegin( "Modify Static Var's Initialization value: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static x=6;", "static x=1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Modify Static Var's Initialization value: Backup" );

	LogTestBegin( "Modify Static Var's name" );
	EXPECT_TRUE( ModifyCode("static x=1;",
		"static y=1;{Enter}   y++;{Enter}   if (y<9){Enter}	   recur_func(); // call line{Enter}   return y;",
		5) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: int __cdecl TestG(void)" ) >= 0);
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Static Var's name" );

	// Backup the change
	LogTestBegin( "Modify Static Var's name: Backup" );
	EXPECT_TRUE( ModifyCode("static y=1;",
		"static x=1;{Enter}   x++;{Enter}   if (x<9){Enter}	   recur_func(); // call line{Enter}   return x;",
		5) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Modify Static Var's name: Backup" );

	dbg.StopDebugging();
	bps.ClearAllBreakpoints();

	// Start debugging
	bps.SetBreakpoint("Based");
	EXPECT_TRUE( dbg.Go(NULL, NULL, "Based") );

	LogTestBegin( "Modify Static Array's type" );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCodeLine("static int rg_static_int[26];", "static char rg_static_int[26];") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	LogTestEnd( "Modify Static Array's type" );

	// Backup the change
	LogTestBegin( "Modify Static Array's type: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static char rg_static_int[26];", "static int rg_static_int[26];") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Modify Static Array's type: Backup" );

	LogTestBegin( "Modify Static Array's dimension" );
	EXPECT_TRUE( ModifyCodeLine("static int rg_static_int[26];", "static int rg_static_int[10];") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: void __cdecl Based(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Static Array's dimension" );

	// Backup the change: false backup
	LogTestBegin( "Modify Static Array's dimension: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static int rg_static_int[10];", "static int rg_static_int[26];") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Modify Static Array's dimension: Backup" );

	// #13530
	LogTestBegin( "Modify Static Array's name" );
	EXPECT_TRUE( ModifyCode("static int rg_static_int[26];",
		"static int rg_static_intX[26];{Enter}	int *p_static = &rg_static_intX[0];{Enter}	rg_static_intX[2] = 32;{Enter}	return rg_static_intX[2];{Enter}",
		4) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "undeclared identifier" ) >= 0);  
	LogTestEnd( "Modify Static Array's name" );

	// Special case: "Backup" the change
	LogTestBegin( "Special case: False (corrupted) Backup the change" );
	EXPECT_TRUE( ModifyCode("static int rg_static_intX[26];",
		"static int rg_static_int[26];{Enter}	int *p_static = &rg_static_int[0];{Enter}	rg_static_int[2] = 32;{Enter}	return rg_static_int[2];{Enter}",
		4) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Special case: False (corrupted) Backup the change" );

	// Backup the change (real)
	LogTestBegin( "Modify Static Array's name: Real Backup the change" );
	EXPECT_TRUE( ModifyCode("static int rg_static_int[26];",
		"static int rg_static_int[26];{Enter}int *p_2 = &rg_static_int[1];{Enter}int *p_static = &rg_static_int[0];{Enter}rg_static_int[2] = 32;",
		4) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Modify Static Array's name: Real Backup the change" );

	LogTestBegin( "Modify Static Function Pointer's type" );
//	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCodeLine("static int (*pfn100)() = func1;", "static __int64 (*pfn100)() = func1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	LogTestEnd( "Modify Static Function Pointer's type" );

	// Backup the change
	LogTestBegin( "Modify Static Function Pointer's type: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static __int64 (*pfn100)() = func1;", "static int (*pfn100)() = func1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Modify Static Function Pointer's type: Backup" );

	LogTestBegin( "Modify Static Function Pointer's Initialization Value" );
	EXPECT_TRUE( ModifyCodeLine("static int (*pfn100)() = func1;", "static int (*pfn100)() = func3;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	LogTestEnd( "Modify Static Function Pointer's Initialization Value" );

	// Backup the change
	LogTestBegin( "Modify Static Function Pointer's Initialization Value: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static int (*pfn100)() = func3;", "static int (*pfn100)() = func1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
/*	if( IsMsgBox("Could not perform a complete stack walk", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Could not perform a complete stack walk'");
	}
*/	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	LogTestEnd( "Modify Static Function Pointer's Initialization Value: Backup" );

	LogTestBegin( "Modify Static Function Pointer's name" );
	EXPECT_TRUE( ModifyCodeLine("static int (*pfn100)() = func1;", "static int (*pfn100X)() = func1;") );
	EXPECT_TRUE( ModifyCodeLine("int i1 = pfn100() + 1;", "int i1 = pfn100X() + 1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
//	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Edited section exports: void __cdecl Based(void)" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Adding new function to image:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "Symbol changed or missing:" ) >= 0);
//	EXPECT_TRUE( VerifyDebugOutputString( "ENC: Undoing last edit-n-continue" ) >= 0);
	LogTestEnd( "Modify Static Function Pointer's name" );

	// Backup the change
	LogTestBegin( "Modify Static Function Pointer's name: Backup" );
	EXPECT_TRUE( ModifyCodeLine("static int (*pfn100X)() = func1;", "static int (*pfn100)() = func1;") );
	EXPECT_TRUE( ModifyCodeLine("int i1 = pfn100X() + 1;", "int i1 = pfn100() + 1;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	if( IsMsgBox("Point of execution moved", "OK") )
	{
		MST.WButtonClick( "OK" );
		m_pLog->RecordInfo("OK on message box 'Point of execution moved'");
	}
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based") );
	dbg.StepOut();
	dbg.SetSteppingMode(SRC);
	LogTestEnd( "Modify Static Function Pointer's name: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyLocalFunctionPointer( )
{
 //	LogTestHeader( "ModifyLocalFunctionPointer" );
	CStartEndTest se_test("ModifyLocalFunctionPointer", this, TRUE);
	bps.ClearAllBreakpoints();
	CString d_value;

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("p_global_char = &rg_global_char[1];") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "p_global_char = &rg_global_char[1];") );

	// #9851  Case sensitive name
 	LogTestBegin( "1 Modify Local function pointer's Initialization value in non active frame" );
	EXPECT_TRUE( ModifyCodeLine("int (*pfn101)() = func1;", "int (*pfn101)() = func3;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
 	LogTestEnd( "1 Modify Local function pointer's Initialization value in non active frame" );

// #13568
 	LogTestBegin( "2 Modify Local function pointer's Initialization value in non active frame" );
	EXPECT_TRUE( ModifyCodeLine("int (*pfn101)() = func3;", "int (*pfn101)() = (int(*)())func3;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.StepOver(1, NULL, "int i2 = pfn101() + 2;"));
	EXPECT_TRUE( cxx.GetExpressionValue("pfn101", d_value) );
	EXPECT_TRUE( d_value.Find("func3") >= 0 );
 	LogTestEnd( "2 Modify Local function pointer's Initialization value in non active frame" );

 	LogTestBegin( "1 Modify Local function pointer's type in active frame After IP" );
	EXPECT_TRUE( src.Find("int i1 = pfn100() + 1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int i1 = pfn100() + 1;") );
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( ModifyCodeLine("int (*pfn101)() = (int(*)())func3;", "__int64 (*pfn101)() = (int(*)())func3;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully 
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
 	LogTestEnd( "1 Modify Local function pointer's type in active frame After IP" );

	LogTestBegin( "2 Modify Local function pointer's type in active frame After IP" );
//	EXPECT_TRUE( src.Find("int i1 = pfn100() + 1;") );
//	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int i1 = pfn100() + 1;") );
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( ModifyCodeLine("__int64 (*pfn101)() = (int(*)())func3;", "__int64 (*pfn101)() = (__int64(*)())func3;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( !IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Based") );
	dbg.SetSteppingMode(SRC);
	EXPECT_TRUE( src.Find("int i1 = pfn100() + 1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int i1 = pfn100() + 1;") );
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( dbg.StepOver(3, NULL, "int *p_2 = &rg_static_int[1];"));
	EXPECT_TRUE( cxx.GetExpressionValue("pfn101", d_value) );
	EXPECT_TRUE( d_value.Find("func3") >= 0 );
	LogTestEnd( "2 Modify Local function pointer's type in active frame After IP" );

 	LogTestBegin( "Modify Local function pointer's name in active frame Before IP" );
	EXPECT_TRUE( ModifyCodeLine("__int64 (*pfn101)() = (__int64(*)())func3;", "__int64 (*pfn101X)() = (__int64(*)())func3;") );
	EXPECT_TRUE( ModifyCodeLine("int i2 = pfn101() + 2;", "int i2 = pfn101X() + 2;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT); // it executes next call to func2, so the new code is executed
	VerifyECSuccess();
	EXPECT_TRUE( dbg.StepOver(1, NULL, "int *p_2 = &rg_static_int[1];"));
 	LogTestEnd( "Modify Local function pointer's name in active frame Before IP" );

	// Backup the changes
 	LogTestBegin( "Backup the changes" );
	EXPECT_TRUE( ModifyCodeLine("__int64 (*pfn101X)() = (__int64(*)())func3;", "int (*pfn101)() = func1;") );
	EXPECT_TRUE( ModifyCodeLine("int i2 = pfn101X() + 2;", "int i2 = pfn101() + 2;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Backup the changes" );

	dbg.StopDebugging();
	return (TRUE);
}


BOOL CModifyingCodeTest::ModifyLocalPointer( )
{
 //	LogTestHeader( "ModifyLocalPointer" );
	CStartEndTest se_test("ModifyLocalPointer", this, TRUE);
	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");

 	LogTestBegin( "Modify Local pointer's Initialization value in non-top active frame After IP" );
	EXPECT_TRUE( src.Find("int i1 = pfn100() + 1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int i1 = pfn100() + 1;","func2" ) );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "func1") );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCodeLine("int *p_static = &rg_static_int[0];", "int *p_static = p_2;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( src.Find("int *p_static = p_2;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int *p_static = p_2;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "rg_static_int[2] = 32;" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("p_static == p_2", 1) );
 	LogTestEnd( "Modify Local pointer's Initialization value in non-top active frame After IP" );

	//	 #13752
 	LogTestBegin( "Modify Local pointer's type in non-active frame" );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Based" ) );
	EXPECT_TRUE( ModifyCodeLine("int *p_static = p_2;", "long *p_static = (long *)p_2;") );
	EXPECT_TRUE( src.Find("long *p_static = (long *)p_2;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "rg_static_int[2] = 32;" ) );
 	LogTestEnd( "Modify Local pointer's type in non-active frame" );

 	LogTestBegin( "Modify Local pointer's name in non-top active frame Before IP" );
	dbg.Restart();
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("i1 = func1();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i1 = func1(); // func2","func2" ) );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "func1") );
	EXPECT_TRUE( ModifyCodeLine("long *p_static = (long *)p_2;", "long *p_staticX = (long *)p_2;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	VerifyECSuccess();
//8044	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	dbg.Restart();
//	EXPECT_TRUE( stk.CurrentFunctionIs("func2") );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("long *p_staticX = (long *)p_2;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "long *p_staticX = (long *)p_2;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "rg_static_int[2] = 32;" ) );
 	LogTestEnd( "Modify Local pointer's name in non-top active frame Before IP" );

	// Backup the changes
 	LogTestBegin( "Backup the changes" );
	EXPECT_TRUE( ModifyCodeLine("long *p_staticX = (long *)p_2;", "int *p_static = &rg_static_int[0];") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Backup the changes" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyLocalVar( )
{
// 	LogTestHeader( "ModifyLocalVar" );
	CStartEndTest se_test("ModifyLocalVar", this, TRUE);
	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("i1 = func1(); // func2") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i1 = func1(); // func2") );

 	LogTestBegin( "Modify Local's name in non-active frame" );
	EXPECT_TRUE( ModifyCodeLine("int j_1 = 5;", "int k_1 = 5;") );
	EXPECT_TRUE( ModifyCodeLine("j_1 += i;", "k_1 += i;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.StepOver(1, NULL, "}", "func2" ) );
 	LogTestEnd( "Modify Local's name in non-active frame" );

	// # 13137
 	LogTestBegin( "Modify Local's Initialization value in active frame After IP" );
	EXPECT_TRUE( src.Find("i_1 = 5;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i_1 = 5;", "func1" ) );
	EXPECT_TRUE( ModifyCodeLine("int k_1 = 5;", "int k_1 = 90;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.StepOver(1, NULL, "for (int i =0; i < 10; i++)", "func1" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("k_1", 90) );
 	LogTestEnd( "Modify Local's Initialization value in active frame After IP" );

 	LogTestBegin( "Modify Local's type in active frame aT IP" );
	EXPECT_TRUE( src.Find("int k_1 = 90;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int k_1 = 90;", "func1" ) );
	EXPECT_TRUE( ModifyCodeLine("int k_1 = 90;", "short k_1 = 90;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Modify Local's type in active frame aT IP" );

 	LogTestBegin( "Modify Local's type in non-top active frame before IP" );
	dbg.Restart();
	dbg.SetSteppingMode(SRC);
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("ifn2 = pfn222();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "ifn2 = pfn222();", "Based" ) );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "func2") );
	EXPECT_TRUE( ModifyCodeLine("__int64 i64 = func3();", "long i64 = func3();") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//8044	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("Based")	);
	dbg.Restart();
	dbg.SetSteppingMode(SRC);
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("long i64 = func3();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "long i64 = func3();", "Based" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "for(i=0; i<26; i++) rg_global_int2[i] = 66;" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("i64", 3333) );
 	LogTestEnd( "Modify Local's type in non-top active frame before IP" );

 	LogTestBegin( "Modify Local's Initialization value in active frame before IP" );
	EXPECT_TRUE( ModifyCodeLine("long i64 = func3();", "long i64 = 35;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	dbg.Restart();
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("long i64 = 35;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "long i64 = 35;", "Based" ) );
	dbg.StepOver(1);
	EXPECT_TRUE( cxx.ExpressionValueIs("i64", 35) );
 	LogTestEnd( "Modify Local's Initialization value in active frame before IP" );

 	LogTestBegin( "Modify Local's name in active frame aT IP" );
	dbg.Restart();
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( src.Find("long i64 = 35;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "long i64 = 35;", "Based" ) );
	EXPECT_TRUE( ModifyCodeLine("long i64 = 35;", "long i64X = 35;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( cxx.ExpressionValueIs("i64X", 35) );
 	LogTestEnd( "Modify Local's name in active frame aT IP" );

	// Backup the changes
 	LogTestBegin( "Backup the changes" );
	EXPECT_TRUE( ModifyCodeLine("short k_1 = 90;", "int j_1 = 5;") );
	EXPECT_TRUE( ModifyCodeLine("k_1 += i;", "j_1 += i;") );
	EXPECT_TRUE( ModifyCodeLine("long i64X = 35;", "__int64 i64 = func3();") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Backup the changes" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyLocalObject( )
{
// 	LogTestHeader( "ModifyLocalObject" );
	CStartEndTest se_test("ModifyLocalObject", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("int test_include = Test_func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int test_include = Test_func();") );

 	LogTestBegin( "Modify Local object's Initialization value in active frame aT IP" );
	EXPECT_TRUE( src.Find("base* object = object1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "base* object = object1;") );
	EXPECT_TRUE( ModifyCodeLine("base* object = object1;", "base* object = object2;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "object = object2; // assignment" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("object == object2", 1) );
 	LogTestEnd( "Modify Local object's Initialization value in active frame aT IP" );

	// 13772 
 	LogTestBegin( "Modify Local object's name in non-top active frame Before IP" );
	EXPECT_TRUE( src.Find("obj.func('a');") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "obj.func('a');") );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "A_CLASS::func"));
	EXPECT_TRUE( ModifyCodeLine("base* object = object2;", "base* objectX = object2;") );
	EXPECT_TRUE( ModifyCodeLine("object = object2; // assignment", "objectX = object2; // assignment") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//8044	EXPECT_TRUE( IsMsgBox("Edit and Continue has applied", "OK") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// It goes to DAM
//	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
//	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests")	);
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Cxx_Tests"));
	dbg.Restart();
	dbg.SetSteppingMode(SRC);
 	LogTestEnd( "Modify Local object's name in non-top active frame Before IP" );

 	LogTestBegin( "Modify Local object's type in non-active frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("base* objectX = object2;", "derived1* objectX = object2;") );
	EXPECT_TRUE( src.Find("derived1* objectX = object2;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails : unrelated types
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( VerifyBuildString( "cannot convert" ) >= 0);  
	// backup changes
	EXPECT_TRUE( ModifyCodeLine("derived1* objectX = object2;", "base* objectX = object2;") );
 	LogTestEnd( "Modify Local object's type in non-active frame" );

 	LogTestBegin( "Modify Local object's Initialization value in non-active frame" );
	EXPECT_TRUE( ModifyCodeLine("base *pd = new derived;", "base *pd = pb;") );
	EXPECT_TRUE( src.Find("base *pd = pb;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "base *pd = pb;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "pd->m_public = 1;", "Test_func"));
 	LogTestEnd( "Modify Local object's Initialization value in non-active frame" );
 
 	LogTestBegin( "Modify Local object's type in active frame Before IP" );
	EXPECT_TRUE( src.Find("int ib2 = b2.base2_virtual_func(1);") );
	dbg.StepToCursor(0, NULL, "int ib2 = b2.base2_virtual_func(1);");
	EXPECT_TRUE( ModifyCodeLine("base2 b2;", "base1 b2;") );
	EXPECT_TRUE( ModifyCodeLine("int ib2 = b2.base2_virtual_func(1);", "int ib2 = b2.base1_virtual_func(1);") );
	EXPECT_TRUE( src.Find("base1 b2;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot apply code changes", "Yes") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "Yes") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
//			MST.WButtonClick( "OK" );
			MST.WButtonClick( "Yes" );
//	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	// It goes to DAM
//	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);  
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "derivedm drvm;"));
 	LogTestEnd( "Modify Local object's type in active frame Before IP" );

 	LogTestBegin( "Modify Local object's name in active frame After IP" );
	EXPECT_TRUE( src.Find("base1 b1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "base1 b1;") );
	EXPECT_TRUE( ModifyCodeLine("base1 b2;", "base1 b2X;") );
//	EXPECT_TRUE( ModifyCodeLine("derivedm drvm = b2;", "derivedm drvm = b2X;") );
	EXPECT_TRUE( ModifyCodeLine("int ib2 = b2.base1_virtual_func(1);", "int ib2 = b2X.base1_virtual_func(1);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	if( WaitMsgBoxText("Cannot complete Edit and Continue", 10) )
		MST.WButtonClick( "OK" );
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "int iderived = drvm.derivedm_public_func(1+2);"));
 	LogTestEnd( "Modify Local object's name in active frame After IP" );

	// Backup the changes
 	LogTestBegin( "Backup all the changes" );
	EXPECT_TRUE( ModifyCodeLine("base* objectX = object2;", "base* object = object1;") );
	EXPECT_TRUE( ModifyCodeLine("objectX = object2; // assignment", "object = object2; // assignment") );
//	EXPECT_TRUE( ModifyCodeLine("derivedm drvm = b2X;", "derivedm drvm;") );
	EXPECT_TRUE( ModifyCodeLine("base1 b2X;", "base2 b2;") );
	EXPECT_TRUE( ModifyCodeLine("int ib2 = b2X.base1_virtual_func(1);", "int ib2 = b2.base2_virtual_func(1);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
//	VerifyECSuccess();
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
//			MST.WButtonClick( "OK" );
			MST.WButtonClick( "Yes" );
	if( WaitMsgBoxText("The function on top of the call stack has been updated", 10) )
		MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
 	LogTestEnd( "Backup all the changes" );

	dbg.StopDebugging();

	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyOperations( )
{
// 	LogTestHeader( "ModifyOperations" );
	CStartEndTest se_test("ModifyOperations", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Double = func_3param(Int, Long, Real);") );

 	LogTestBegin( "Modify Operation in non-active frame" );
	EXPECT_TRUE( ModifyCodeLine("i_3p++;", "i_3p += intParam;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( src.Find("i_3p += intParam;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i_3p += intParam;") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p += i_3p;", "func_3param"));
	EXPECT_TRUE( cxx.ExpressionValueIs("i_3p", 50) );
 	LogTestEnd( "Modify Operation in non-active frame" );
 
 	LogTestBegin( "Modify Operation in active frame aT IP" );
	EXPECT_TRUE( src.Find("i_3p += intParam;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i_3p += intParam;") );
	EXPECT_TRUE( ModifyCodeLine("i_3p += intParam;", "i_3p--;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "l_3p += i_3p;" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("i_3p", 32) );
 	LogTestEnd( "Modify Operation in active frame aT IP" );
 
 	LogTestBegin( "Modify Operation in non-top active frame" );
	EXPECT_TRUE( src.Find("i_3p = func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "i_3p = func();") );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "func") );
	EXPECT_TRUE( ModifyCodeLine("l_3p += i_3p;", "l_3p -= i_3p;") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( src.Find("f_3p = l_3p - i_3p;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "f_3p = l_3p - i_3p;", "func_3param") );
	EXPECT_TRUE( cxx.ExpressionValueIs("l_3p", 967) );
 	LogTestEnd( "Modify Operation in non-top active frame" );
 
 	LogTestBegin( "Modify Operation in active frame Before IP" );
	EXPECT_TRUE( ModifyCodeLine("double d_3p = intParam + longParam + floatParam;", "double d_3p = (intParam + longParam) * floatParam;") );
	EXPECT_TRUE( src.Find("i_3p = func();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "i_3p = func();" ) );
	double d_value;
	EXPECT_TRUE( cxx.GetExpressionValue("d_3p", &d_value) );
	EXPECT_TRUE( d_value > 1333. );
 	LogTestEnd( "Modify Operation in active frame Before IP" );
 
 	LogTestBegin( "Modify Operation in active frame After IP" );
	EXPECT_TRUE( ModifyCodeLine("f_3p = l_3p - i_3p;", "f_3p += (l_3p / i_3p);") );
	EXPECT_TRUE( src.Find("l_3p++;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "l_3p++;" ) );
	float f_value;
	EXPECT_TRUE( cxx.GetExpressionValue("f_3p", &f_value) );
	EXPECT_TRUE( f_value < 50. );
 	LogTestEnd( "Modify Operation in active frame After IP" );
 
	// Backup the changes
 	LogTestBegin( "Backup the changes" );
	EXPECT_TRUE( ModifyCodeLine("i_3p--;", "i_3p++;") );
	EXPECT_TRUE( ModifyCodeLine("l_3p -= i_3p;", "l_3p += i_3p;") );
	EXPECT_TRUE( ModifyCodeLine("double d_3p = (intParam + longParam) * floatParam;", "double d_3p = intParam + longParam + floatParam;") );
	EXPECT_TRUE( ModifyCodeLine("f_3p += (l_3p / i_3p);", "f_3p = l_3p - i_3p;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Backup the changes" );

	dbg.StopDebugging();

	return (TRUE);
}

BOOL CModifyingCodeTest::ModifyLoop( )
{
// 	LogTestHeader( "ModifyLoop" );
	CStartEndTest se_test("ModifyLoop", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("if (Flag)") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "if (Flag)") );

 	LogTestBegin( "Modify if statement condition in active frame aT IP" );
	EXPECT_TRUE( ModifyCodeLine("if (Flag)", "if (Flag - 1)") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "for (Int=0; Int<3; Int++)" ) );
 	LogTestEnd( "Modify if statement condition in active frame aT IP" );
 
 	LogTestBegin( "Modify While loop condition in non-top active frame" );
	EXPECT_TRUE( src.Find("Mine=func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Mine=func();") );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "func") );
	EXPECT_TRUE( ModifyCodeLine("while (Local == 17)", "while (Local < 17)") );
	dbg.StepOut(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( src.Find("while (Local < 17)") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "while (Local < 17)") );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "else"));
 	LogTestEnd( "Modify While loop condition in non-top active frame" );
 
 	LogTestBegin( "Modify combination of if-do-while conditions in active frame After IP" );
	EXPECT_TRUE( ModifyCodeLine("if (1 < Local) do { GlobalG++; } while (Local == 0);", "if (1 < Local) do { GlobalG++; } while (GlobalG < 80);") );
	EXPECT_TRUE( src.Find("if (1 < Local) do { GlobalG++; } while (GlobalG < 80);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.CurrentLineIs( "if (1 < Local) do { GlobalG++; } while (GlobalG < 80);" ) );
	dbg.StepOver();
	EXPECT_TRUE( cxx.ExpressionValueIs("GlobalG", 80) );
 	LogTestEnd( "Modify combination of if-do-while conditions in active frame After IP" );

 	LogTestBegin( "Modify for loop conditions in active frame Before IP" );
	EXPECT_TRUE( ModifyCodeLine("for (Int=0; Int<3; Int++)", "for (Int=2; Int<3; Int++)") );
//	dbg.Restart();
	UIWB.Restart(NOWAIT);
	VerifyECSuccess();
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( src.Find("Local=17;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Local=17;") );
	EXPECT_TRUE( !cxx.ExpressionValueIs("Array1d[1]", 1) );
 	LogTestEnd( "Modify for loop conditions in active frame Before IP" );
 
 	LogTestBegin( "Modify While loop in non-active frame" );
	EXPECT_TRUE( src.Find("Double = func_3param(Int, Long, Real);") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "Double = func_3param(Int, Long, Real);", "TestG") );
	EXPECT_TRUE( ModifyCodeLine("}while(l_3p <1050);", "}while(l_3p <1060);") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
	EXPECT_TRUE( src.Find("return d_3p;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "return d_3p;") );
	EXPECT_TRUE( cxx.ExpressionValueIs("l_3p", 1060) );
 	LogTestEnd( "Modify While loop in non-active frame" );
 
	// Backup the changes
 	LogTestBegin( "Backup the changes" );
	EXPECT_TRUE( ModifyCodeLine("if (Flag - 1)", "if (Flag)") );
	EXPECT_TRUE( ModifyCodeLine("while (Local < 17)", "while (Local == 17)") );	  
	EXPECT_TRUE( ModifyCodeLine("if (1 < Local) do { GlobalG++; } while (GlobalG < 80);", "if (1 < Local) do { GlobalG++; } while (Local == 0);") );
	EXPECT_TRUE( ModifyCodeLine("for (Int=2; Int<3; Int++)", "for (Int=0; Int<3; Int++)") );
	EXPECT_TRUE( ModifyCodeLine("}while(l_3p <1060);", "}while(l_3p <1050);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC success
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "OK") );
	if (MST.WFndWndWait("Edit and Continue", FW_NOCASE | FW_FOCUS | FW_PART, 1))
			MST.WButtonClick( "OK" );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
 	LogTestEnd( "Backup the changes" );

	dbg.StopDebugging();

	return (TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\remove.h ===
///////////////////////////////////////////////////////////////////////////////
//	Remove.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CRemoveingCodeTest Class
//

#ifndef __Remove_H__
#define __Remove_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "sniffsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CRemovingCodeTest class

class CRemovingCodeTest : public CECTestSet
{
	DECLARE_DYNAMIC(CRemovingCodeTest)

// Operations
public:
	virtual void PreRun(void);
	virtual void Run();
	CRemovingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);

// Test Cases
protected:

	BOOL RemoveFunction();
	BOOL RemoveMemberFunction();
	BOOL RemoveFunctionCall();
	BOOL RemoveGlobal();
	BOOL RemoveDataMember();
	BOOL RemoveStaticVar();
	BOOL RemoveLocalVar();
	BOOL RemoveLocalObject();
	BOOL RemoveOperations();
	BOOL RemoveLoop();

};

///////////////////////////////////////////////////////////////////////////////
//	CRemovingCodeTestEXE class

class CRemovingCodeTestEXE : public CRemovingCodeTest
{
	DECLARE_TEST(CRemovingCodeTestEXE, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CRemovingCodeTestEXT class

class CRemovingCodeTestEXT : public CRemovingCodeTest
{
	DECLARE_TEST(CRemovingCodeTestEXT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CRemovingCodeTestINT class

class CRemovingCodeTestINT : public CRemovingCodeTest
{
	DECLARE_TEST(CRemovingCodeTestINT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

#endif //__Remove_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\modify.h ===
///////////////////////////////////////////////////////////////////////////////
//	Modify.h
//
//	Created by :			
//		VCBU QA
//
//	Description :
//		Declaration of the CModifyingCodeTest Class
//

#ifndef __Modify_H__
#define __Modify_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\ecset.h"
#include "sniffsub.h"

///////////////////////////////////////////////////////////////////////////////
//	CModifyingCodeTest class

class CModifyingCodeTest : public CECTestSet
{
//	DECLARE_TEST(CModifyingCodeTest, CSniffSubSuite)
	DECLARE_DYNAMIC(CModifyingCodeTest)

// Operations
public:
	virtual void PreRun(void);
	virtual void Run();
	CModifyingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename = NULL);

// Test Cases
protected:

	BOOL ModifyFunctionDeclaration();
	BOOL ModifyFunctionName();
	BOOL ModifyMemberFunctionDeclaration();
	BOOL ModifyFunctionDefinition();
	BOOL ReplaceFunctionCall();
	BOOL ModifyFunctionCall();
	BOOL ReplaceMemberFunctionCall();
	BOOL ModifyMemberFunctionCall();
	BOOL ModifyGlobal();
	BOOL ModifyDataMember();
	BOOL ModifyStaticVar();
	BOOL ModifyLocalVar();
	BOOL ModifyLocalFunctionPointer();
	BOOL ModifyLocalPointer();
	BOOL ModifyLocalObject();
	BOOL ModifyOperations();
	BOOL ModifyLoop();

};

///////////////////////////////////////////////////////////////////////////////
//	CModifyingCodeTestEXE class

class CModifyingCodeTestEXE : public CModifyingCodeTest
{
	DECLARE_TEST(CModifyingCodeTestEXE, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CModifyingCodeTestEXT class

class CModifyingCodeTestEXT : public CModifyingCodeTest
{
	DECLARE_TEST(CModifyingCodeTestEXT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

///////////////////////////////////////////////////////////////////////////////
//	CModifyingCodeTestINT class

class CModifyingCodeTestINT : public CModifyingCodeTest
{
	DECLARE_TEST(CModifyingCodeTestINT, CSniffSubSuite)

// Operations
public:
	virtual void Run();

// Test Cases
protected:


};

#endif //__Modify_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\EditContinue\sniff\remove.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	Remove.CPP
//											 
//	Created by :			
//		VCBU QA		

#include <process.h>
#include "stdafx.h"
#include "Remove.h"	

#if defined(_MIPS_) || defined(_ALPHA_)
#define _CHAIN_2 "chain_2"
#define _CHAIN_3 "chain_3"
#else
#define _CHAIN_2 "_chain_2"
#define _CHAIN_3 "_chain_3"
#endif

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
				 	 
											   
IMPLEMENT_DYNAMIC(CRemovingCodeTest, CECTestSet)
IMPLEMENT_TEST(CRemovingCodeTestEXE, CRemovingCodeTest, "EC Sniff RemovingCode EXE", -1, CSniffSubSuite)
IMPLEMENT_TEST(CRemovingCodeTestEXT, CRemovingCodeTest, "EC Sniff RemovingCode EXT", -1, CSniffSubSuite)
IMPLEMENT_TEST(CRemovingCodeTestINT, CRemovingCodeTest, "EC Sniff RemovingCode INT", -1, CSniffSubSuite)
												 
CRemovingCodeTest::CRemovingCodeTest(CSubSuite* pSubSuite, LPCSTR szName, int nExpectedCompares, LPCSTR szListFilename /*= NULL*/)
: CECTestSet(pSubSuite, szName, nExpectedCompares, szListFilename)
{
}
												 
void CRemovingCodeTest::PreRun(void)
{
	// call the base class
	CTest::PreRun();

}

void CRemovingCodeTest::Run()
{	 
	XSAFETY;
	EXPECT_TRUE( dbg.ToggleEditAndContinue(TOGGLE_ON) );
	
	XSAFETY;
	RemoveFunction();	// 4 cases:
	XSAFETY;
	RemoveMemberFunction();	 // 4 cases: 2 passed, 2 failed :#23545, #23547
	XSAFETY;
	RemoveFunctionCall();  // 4 cases: 1 fails: #13137, 13568, 3 blocked
	XSAFETY;
	RemoveGlobal();		 // 4 cases:
	XSAFETY;
	RemoveDataMember();	  // 2 cases:
	XSAFETY;
	RemoveStaticVar();	// 2 cases:
	XSAFETY;
	RemoveLocalVar();	// 2 cases: 1st passed, 2nd failed - #13137, 13568
	XSAFETY;
	RemoveLocalObject();  // 2 cases: 1st passed, 2nd failed - #13772 crash
	XSAFETY;
	RemoveOperations();	  // 4 cases: 1 fails: #13137, 13568, 3 blocked
	XSAFETY;
	RemoveLoop();	 // 2 cases: 1 fails: #13137, 13568, 1 blocked
	XSAFETY;

	COWorkSpace ws;
	ws.CloseAllWindows();
	XSAFETY;
}

void CRemovingCodeTestEXE::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecconsol";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	if( SetProject(szProjPathName) )
	{
		CRemovingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
		
}

void CRemovingCodeTestEXT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecwinapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CRemovingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}

void CRemovingCodeTestINT::Run()
{	 
	XSAFETY;

	m_strProjectName = "ecmfcapp";	//ToDo: We should get the name from file with all languages strings
	m_strSrcDir = "ecapp";	//ToDo: We should get the name from file with all languages strings
	m_strProjectLoc  = m_strCWD + "apps\\" + m_strProjectName + "\\";
	CString szSRCFileLoc	= m_strCWD + "src\\" + m_strSrcDir + "\\";
	CString szProjPathName	= (CString)("..\\apps\\") + m_strProjectName + "\\" + m_strProjectName;

	RemoveTestFiles( m_strProjectLoc + "res\\");
	RemoveTestFiles( m_strProjectLoc );
	CreateDirectory(m_strProjectLoc, 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc, m_strProjectLoc ) );
	CreateDirectory(m_strProjectLoc + "res\\", 0);          
	EXPECT_TRUE( CopyProjectSources( szSRCFileLoc + "res\\", m_strProjectLoc + "res\\" ) );

	int iWaitForBuild = 3;	// Minutes to wait for the build to complete
	if( PrepareProject(szProjPathName) && VERIFY_TEST_SUCCESS( proj.Build(iWaitForBuild)))
	{
		proj.SetExeForDebugSession(m_strProjectName + ".exe");
		CRemovingCodeTest::Run();
	}

	dbg.StopDebugging();
	proj.Close();
//	RemoveTestFiles( m_strProjectLoc );
}


///////////////////////////////////////////////////////////////////////////////
//	Test Cases
///////////////////////////////////////////////////////////////////////////////

BOOL CRemovingCodeTest::RemoveFunction( )
{
// 	LogTestHeader( "RemoveFunction" );
	CStartEndTest se_test("RemoveFunction", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

 	LogTestBegin( "Remove a fuction (definition, declaration and calls) from inactive frame" );
	// Remove nest_func (definition, declaration and call) in testg.cpp
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	//EXPECT_TRUE( ModifyCodeLine("void nest_func();", "//void nest_func();") );
	EXPECT_TRUE( ModifyCode("void nest_func() {",
		"/*void nest_func() {{Enter} if (func()){Enter}	func_1param (func());{Enter}};*/", 4) );
	//EXPECT_TRUE( ModifyCodeLine("nest_func(); // nest_func call line", "//nest_func(); // nest_func call line") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( stk.CurrentFunctionIs("main_Calls") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Remove a fuction (definition, declaration and calls) from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a fuction (definition, declaration and calls) from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	//EXPECT_TRUE( ModifyCodeLine("//void nest_func();", "void nest_func();") );
	EXPECT_TRUE( ModifyCode("/*void nest_func() {",
		"void nest_func() {{Enter} if (func()){Enter}	func_1param (func());{Enter}};", 4) );
	//EXPECT_TRUE( ModifyCodeLine("//nest_func(); // nest_func call line", "nest_func(); // nest_func call line") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
 	LogTestEnd( "Remove a fuction (definition, declaration and calls) from inactive frame: Backup" );

 	LogTestBegin( "Remove a fuction definition from inactive frame" );
	dbg.Restart();
	// Remove only definition of the nest_func in testg.cpp
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("void nest_func() {",
		"/*void nest_func() {{Enter} if (func()){Enter}	func_1param (func());{Enter}};*/", 4) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Remove a fuction definition from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a fuction definition from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("/*void nest_func() {",
		"void nest_func() {{Enter} if (func()){Enter}	func_1param (func());{Enter}};", 4) );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
 	LogTestEnd( "Remove a fuction definition from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveMemberFunction( )
{
// 	LogTestHeader( "RemoveMemberFunction" );
	CStartEndTest se_test("RemoveMemberFunction", this, TRUE);

	bps.ClearAllBreakpoints();

  	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("fooclass foo1;") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "fooclass foo1;") );

 	LogTestBegin( "Remove a member fuction (definition, declaration and calls) from inactive frame" );
	// Remove base::virtual_func3 (definition, declaration and call) in cxx.cxx
	EXPECT_TRUE( ModifyCodeLine("virtual int  virtual_func3(int ind) { return ind*2; };",
		"//virtual int  virtual_func3(int ind) { return ind*2; };") );
	EXPECT_TRUE( ModifyCodeLine("result = drv1.virtual_func3(9);",
		"//result = drv1.virtual_func3(9);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Cxx_Tests") );
 	LogTestEnd( "Remove a member fuction (definition, declaration and calls) from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a member fuction (definition, declaration and calls) from inactive frame: Backup" );
	EXPECT_TRUE( ModifyCodeLine("//virtual int  virtual_func3(int ind) { return ind*2; };",
		"virtual int  virtual_func3(int ind) { return ind*2; };") );
	EXPECT_TRUE( ModifyCodeLine("//result = drv1.virtual_func3(9);",
		"result = drv1.virtual_func3(9);") );
	EXPECT_TRUE( src.Find("int test_include = Test_func();") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "Test_func") );
 	LogTestBegin( "Remove a member fuction (definition, declaration and calls) from inactive frame: Backup" );

 	LogTestBegin( "Remove a member fuction definition from inactive frame" );
	dbg.Restart();
	// Remove only definition of inline_func in cxx.cxx
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( src.Find("int test_include = Test_func();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "int test_include = Test_func();") );
	EXPECT_TRUE( ModifyCodeLine("inline void inline_func() { private_value++; };",
		"inline void inline_func();") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Remove a member fuction definition from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a member fuction definition from inactive frame: Backup" );
	EXPECT_TRUE( ModifyCodeLine("inline void inline_func();",
		"inline void inline_func() { private_value++; };") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
 	LogTestEnd( "Remove a member fuction definition from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveFunctionCall( )
{
// 	LogTestHeader( "RemoveFunctionCall" );
	CStartEndTest se_test("RemoveFunctionCall", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	dbg.StepInto(1);

 	LogTestBegin( "Remove a fuction call from inactive frame" );
	// Remove a call to CFncInt64 in typetest.cpp
	UIWB.OpenFile( m_strProjectLoc + "typetest.cpp");
	EXPECT_TRUE( ModifyCodeLine("i64 = CFncInt64(i64);", "//i64 = CFncInt64(i64);") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "typetest.cpp" ) >= 0);  
 	LogTestEnd( "Remove a fuction call from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a fuction call from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "typetest.cpp");
	EXPECT_TRUE( ModifyCodeLine("//i64 = CFncInt64(i64);", "i64 = CFncInt64(i64);") );
	EXPECT_TRUE( src.Find("i64 = CFncInt64(i64);") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("Types_Tests") );
	EXPECT_TRUE( dbg.CurrentLineIs( "i64 = CFncInt64(i64);" ) );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "CFncInt64") );
 	LogTestEnd( "Remove a fuction call from inactive frame: Backup" );

 	LogTestBegin( "Remove a member fuction call from inactive frame" );
	dbg.Restart();
	// Remove a call to  base::virtual_func in cxx.cxx
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	EXPECT_TRUE( src.Find("TagCallOtherMain:") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "OtherMain();") );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("pb->overloaded_func('a');",
		"//pb->overloaded_func('a');") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("OtherMain") );
 	LogTestEnd( "Remove a member fuction call from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a member fuction call from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("//pb->overloaded_func('a');",
		"pb->overloaded_func('a');") );
	EXPECT_TRUE( src.Find("pb->overloaded_func('a');") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	EXPECT_TRUE( dbg.StepInto(1, NULL, NULL, "base::overloaded_func") );
 	LogTestEnd( "Remove a member fuction call from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveGlobal( )
{
 //	LogTestHeader( "RemoveGlobal" );
	CStartEndTest se_test("RemoveGlobal", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Remove a Global" );
 	LogTestHeader( "Remove Global: declaration and references", TT_TESTCASE );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("int GlobalG;",	"//int GlobalG;") );
	EXPECT_TRUE( ModifyCodeLine("GlobalG=77;",	"//GlobalG=77;") );
	EXPECT_TRUE( ModifyCodeLine("if (1 < Local) do { GlobalG++; } while (Local == 0);",	
		"//if (1 < Local) do { GlobalG++; } while (Local == 0);") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	LogTestEnd( "Remove a Global" );

	// backup changes and continue debugging
	LogTestBegin( "Remove a Global: backup" );
	EXPECT_TRUE( ModifyCodeLine("//int GlobalG;",	"int GlobalG;") );
	EXPECT_TRUE( ModifyCodeLine("//GlobalG=77;",	"GlobalG=77;") );
	EXPECT_TRUE( ModifyCodeLine("//if (1 < Local) do { GlobalG++; } while (Local == 0);",	
		"if (1 < Local) do { GlobalG++; } while (Local == 0);") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
	LogTestEnd( "Remove a Global: backup" );

 	LogTestBegin( "Remove Global declaration" );
	dbg.Restart();
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("int GlobalG;",	"//int GlobalG;") );
//	dbg.StepInto();
	EXPECT_TRUE( src.Find("int TestG()") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
//	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( IsMsgBox("One or more errors occurred", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
 	LogTestEnd( "Remove Global declaration" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove Global declaration: Backup" );
	EXPECT_TRUE( ModifyCodeLine("//int GlobalG;",	"int GlobalG;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("TestG") );
 	LogTestEnd( "Remove Global declaration: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveDataMember( )
{
// 	LogTestHeader( "RemoveDataMember" );
	CStartEndTest se_test("RemoveDataMember", this, TRUE);

	bps.ClearAllBreakpoints();

  	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	EXPECT_TRUE( src.Find("TagCallOtherMain:") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "OtherMain();") );

 	LogTestBegin( "Remove a data member from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	// Remove base::m_protected in cxx.cxx
	EXPECT_TRUE( ModifyCodeLine("char *m_pchar;",	"//char *m_pchar;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	// Verify EC fails gracefully
	if( WaitMsgBoxText("Do you want to save", 10) )
		MST.WButtonClick( "No" );
	EXPECT_TRUE( IsMsgBox("Cannot complete Edit and Continue", "No") );
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "Edit not supported by Edit and Continue" ) >= 0);  
	EXPECT_TRUE( stk.CurrentFunctionIs("dbg_main") );
 	LogTestEnd( "Remove a data member from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a data member from inactive frame: Backup" );
	EXPECT_TRUE( ModifyCodeLine("//char *m_pchar;",	"char *m_pchar;") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("OtherMain") );
 	LogTestEnd( "Remove a data member from inactive frame: Backup" );
 
	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveStaticVar( )
{
// 	LogTestHeader( "RemoveStaticVar" );
	CStartEndTest se_test("RemoveStaticVar", this, TRUE);

	bps.ClearAllBreakpoints();

  	// Start debugging
	EXPECT_TRUE( dbg.StepInto() );

 	LogTestBegin( "Remove a non-referenced static variable from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	// Remove static double z from dbg_main.c
	EXPECT_TRUE( ModifyCodeLine("static double z;",	"//static double z;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( dbg.Wait(WAIT_FOR_BREAK) );
//	EXPECT_TRUE( VerifyBuildString( "dbg_main.c" ) >= 0);  
 	LogTestEnd( "Remove a non-referenced static variable from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a non-referenced static variable from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	EXPECT_TRUE( ModifyCodeLine("//static double z;",	"static double z;") );
	EXPECT_TRUE( src.Find("TagCallChainMain:") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("dbg_main") );
	EXPECT_TRUE( dbg.CurrentLineIs( "ChainMain();" ) );
//	EXPECT_TRUE( VerifyBuildString( "dbg_main.c" ) >= 0);  
 	LogTestEnd( "Remove a non-referenced static variable from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveLocalVar( )
{
// 	LogTestHeader( "RemoveLocalVar" );
	CStartEndTest se_test("RemoveLocalVar", this, TRUE);

	bps.ClearAllBreakpoints();

  	// Start debugging
	EXPECT_TRUE( dbg.StepInto() );

 	LogTestBegin( "Remove a local variable from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	// Remove x variable from dbg_main.c
	EXPECT_TRUE( ModifyCodeLine("int x;",	"//int x;") );
	EXPECT_TRUE( ModifyCodeLine("x = y;",	"//x = y;") );
	dbg.StepOver(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "dbg_main.c" ) >= 0);  
 	LogTestEnd( "Remove a local variable from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a local variable from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	EXPECT_TRUE( ModifyCodeLine("//int x;",	"int x;") );
	EXPECT_TRUE( ModifyCodeLine("//x = y;",	"x = y;") );
	EXPECT_TRUE( src.Find("y = chain_x1(99);") );
//	dbg.StepToCursor(0);
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "dbg_main.c" ) >= 0);  
	EXPECT_TRUE( dbg.StepOver(1, NULL, "x = y;", "dbg_main"));
 	LogTestEnd( "Remove a local variable from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveLocalObject( )
{
 //	LogTestHeader( "RemoveLocalObject" );
	CStartEndTest se_test("RemoveLocalObject", this, TRUE);

	bps.ClearAllBreakpoints();

  	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "dbg_main.c");
	EXPECT_TRUE( src.Find("TagCallOtherMain:") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "OtherMain();") );

 	LogTestBegin( "Remove a local object from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	// Remove base* object in cxx.cxx
	EXPECT_TRUE( ModifyCodeLine("base* object = object1;",	"//base* object = object1;") );
	EXPECT_TRUE( ModifyCodeLine("object = object2; // assignment",	"//object = object2; // assignment") );
	dbg.StepInto(1, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("OtherMain") );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Remove a local object from inactive frame" );

	// backup changes and continue debugging
 	LogTestBegin( "Remove a local object from inactive frame: Backup" );
	UIWB.OpenFile( m_strProjectLoc + "cxx.cxx");
	EXPECT_TRUE( ModifyCodeLine("//base* object = object1;",	"base* object = object1;") );
	EXPECT_TRUE( ModifyCodeLine("//object = object2; // assignment",	"object = object2; // assignment") );
	EXPECT_TRUE( src.Find("object = object2; // assignment") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("Test_func") );
	EXPECT_TRUE( dbg.CurrentLineIs( "object = object2; // assignment" ) );
//	EXPECT_TRUE( VerifyBuildString( "cxx.cxx" ) >= 0);  
 	LogTestEnd( "Remove a local object from inactive frame: Backup" );
 
	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveOperations( )
{
// 	LogTestHeader( "RemoveOperations" );
	CStartEndTest se_test("RemoveOperations", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

//	LogSubTestHeader( "Remove operations from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");

	LogTestBegin( "Remove operations from inactive frame: modify a statement" );
	EXPECT_TRUE( ModifyCodeLine("f_3p = l_3p - i_3p;", "f_3p = l_3p;") );
	EXPECT_TRUE( src.Find("f_3p = l_3p;") );
//	dbg.StepToCursor();
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	bps.ClearAllBreakpoints();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "f_3p = l_3p;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p++;") );
	EXPECT_TRUE( cxx.ExpressionValueIs("f_3p", 1033) );
//	float d_value;
//	EXPECT_TRUE( cxx.GetExpressionValue("f_3p", d_value) );
//	EXPECT_TRUE( d_value > 1032.0 && d_value <= 1033.0);
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "TestG") );
//	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "main_Calls") );
//	bps.ClearAllBreakpoints();
	LogTestEnd( "Remove operations from inactive frame: modify a statement" );

	// backup changes and continue debugging
	LogTestBegin( "Remove operations from inactive frame: modify a statement: Backup" );
//	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCodeLine("f_3p = l_3p;", "f_3p = l_3p - i_3p;") );
	EXPECT_TRUE( src.Find("f_3p = l_3p - i_3p;") );
//	dbg.StepToCursor();
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "f_3p = l_3p - i_3p;" ) );
	EXPECT_TRUE( dbg.StepOver(1, NULL, "l_3p++;") );
	EXPECT_TRUE( cxx.ExpressionValueIs("f_3p", 999) );
//	EXPECT_TRUE( cxx.GetExpressionValue("f_3p", d_value) );
//	EXPECT_TRUE( d_value > 998.0 && d_value <= 999.0);
	bps.ClearAllBreakpoints();
	LogTestEnd( "Remove operations from inactive frame: modify a statement: Backup" );

	LogTestBegin( "Remove operations from inactive frame: remove a statement" );
	UIWB.OpenFile( m_strProjectLoc + "based.cpp");
	EXPECT_TRUE( ModifyCodeLine("i_1 = 5;", "//i_1 = 5;") );
	EXPECT_TRUE( src.Find("//i_1 = 5;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func1") );
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "int j_1 = 5;" ) );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "Based") );
	LogTestEnd( "Remove operations from inactive frame: remove a statement" );

	// backup changes and continue debugging
	LogTestBegin( "Remove operations from inactive frame: remove a statement: Backup" );
	EXPECT_TRUE( ModifyCodeLine("//i_1 = 5;", "i_1 = 5;") );
	EXPECT_TRUE( src.Find("i_1 = 5;") );
	dbg.StepToCursor(0, NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
//	EXPECT_TRUE( VerifyBuildString( "based.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.StepOver(1, NULL, "int j_1 = 5;", "func1") );
	EXPECT_TRUE( cxx.ExpressionValueIs("i_1", 5) );
	LogTestEnd( "Remove operations from inactive frame: remove a statement: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}

BOOL CRemovingCodeTest::RemoveLoop( )
{
//	LogTestHeader( "RemoveLoop" );
	CStartEndTest se_test("RemoveLoop", this, TRUE);

	bps.ClearAllBreakpoints();

	// Start debugging
	UIWB.OpenFile( m_strProjectLoc + "calls.cpp");
	EXPECT_TRUE( src.Find("iCalls = TestG();") );
	EXPECT_TRUE( dbg.StepToCursor(0, NULL, "iCalls = TestG();") );

	LogTestBegin( "Remove a do_while_loop from inactive frame" );
	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("do { //func_3param",
		"/*do { //func_3param{Enter}  l_3p++;{Enter}}while(l_3p <1050);*/",
		3) );
	EXPECT_TRUE( src.Find("return d_3p;") );
	DoKeys( KEY_TOGGLE_BREAKPOINT );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "return d_3p;" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("l_3p", 1033) );
	EXPECT_TRUE( dbg.StepOut(1, NULL, NULL, "TestG") );
	LogTestEnd( "Remove a do_while_loop from inactive frame" );

	// backup changes and continue debugging
	LogTestBegin( "Remove a do_while_loop from inactive frame: Backup" );
//	UIWB.OpenFile( m_strProjectLoc + "testg.cpp");
	EXPECT_TRUE( ModifyCode("/*do { //func_3param",
		"do { //func_3param{Enter}  l_3p++;{Enter}}while(l_3p <1050);",
		3) );
	dbg.Go(NULL, NULL, NULL, NOWAIT);
	VerifyECSuccess();
	EXPECT_TRUE( stk.CurrentFunctionIs("func_3param") );
//	EXPECT_TRUE( VerifyBuildString( "testg.cpp" ) >= 0);  
	EXPECT_TRUE( dbg.CurrentLineIs( "return d_3p;" ) );
	EXPECT_TRUE( cxx.ExpressionValueIs("l_3p", 1050) );
	bps.ClearAllBreakpoints();
	LogTestEnd( "Remove a do_while_loop from inactive frame: Backup" );

	dbg.StopDebugging();
	return (TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\assign.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "n.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} D;
	auto D D1;
	auto D D2;
	auto D D3;
	auto D D4;
	auto D D5;
	auto D D6;
	auto D D7;
	auto D D8;
	auto D D9;
	auto D D10;
	auto D D11;
	auto D D12;
	D1.c = 7;
	D2.sc = 8;
	D3.s = 9;
	D4.i = 10;
	D5.uc = 11;
	D6.us = 12;
	D7.ui = 13;
	D8.l = 14;
	D9.ul = 15;
	D10.f = 16;
	D11.d = 17;
	D12.ld = 18;
	{
	CHAR *Nc();
	SCHAR *Nsc();
	SHORT *Ns();
	INT *Ni();
	UCHAR *Nuc();
	USHORT *Nus();
	UINT *Nui();
	LONG *Nl();
	ULONG *Nul();
	FLOAT *Nf();
	DOUBLE *Nd();
	LDOUBLE *Nld();
	{
	*Nc() = 7;
	D1.c = *Nc();

	break_here:

	D1.c = 7;
	*Nc() = D1.c;
	*Nsc() = 8;
	D1.c = *Nsc();
	D1.c = 7;
	*Nsc() = D1.c;
	*Ns() = 9;
	D1.c = *Ns();
	D1.c = 7;
	*Ns() = D1.c;
	*Ni() = 10;
	D1.c = *Ni();
	D1.c = 7;
	*Ni() = D1.c;
	*Nuc() = 11;
	D1.c = *Nuc();
	D1.c = 7;
	*Nuc() = D1.c;
	*Nus() = 12;
	D1.c = *Nus();
	D1.c = 7;
	*Nus() = D1.c;
	*Nui() = 13;
	D1.c = *Nui();
	D1.c = 7;
	*Nui() = D1.c;
	*Nl() = 14;
	D1.c = *Nl();
	D1.c = 7;
	*Nl() = D1.c;
	*Nul() = 15;
	D1.c = *Nul();
	D1.c = 7;
	*Nul() = D1.c;
	*Nf() = 16;
	D1.c = *Nf();
	D1.c = 7;
	*Nf() = D1.c;
	*Nd() = 17;
	D1.c = *Nd();
	D1.c = 7;
	*Nd() = D1.c;
	*Nld() = 18;
	D1.c = *Nld();
	D1.c = 7;
	*Nld() = D1.c;
	*Nc() = 7;
	D2.sc = *Nc();
	D2.sc = 8;
	*Nc() = D2.sc;
	*Nsc() = 8;
	D2.sc = *Nsc();
	D2.sc = 8;
	*Nsc() = D2.sc;
	*Ns() = 9;
	D2.sc = *Ns();
	D2.sc = 8;
	*Ns() = D2.sc;
	*Ni() = 10;
	D2.sc = *Ni();
	D2.sc = 8;
	*Ni() = D2.sc;
	*Nuc() = 11;
	D2.sc = *Nuc();
	D2.sc = 8;
	*Nuc() = D2.sc;
	*Nus() = 12;
	D2.sc = *Nus();
	D2.sc = 8;
	*Nus() = D2.sc;
	*Nui() = 13;
	D2.sc = *Nui();
	D2.sc = 8;
	*Nui() = D2.sc;
	*Nl() = 14;
	D2.sc = *Nl();
	D2.sc = 8;
	*Nl() = D2.sc;
	*Nul() = 15;
	D2.sc = *Nul();
	D2.sc = 8;
	*Nul() = D2.sc;
	*Nf() = 16;
	D2.sc = *Nf();
	D2.sc = 8;
	*Nf() = D2.sc;
	*Nd() = 17;
	D2.sc = *Nd();
	D2.sc = 8;
	*Nd() = D2.sc;
	*Nld() = 18;
	D2.sc = *Nld();
	D2.sc = 8;
	*Nld() = D2.sc;
	*Nc() = 7;
	D3.s = *Nc();
	D3.s = 9;
	*Nc() = D3.s;
	*Nsc() = 8;
	D3.s = *Nsc();
	D3.s = 9;
	*Nsc() = D3.s;
	*Ns() = 9;
	D3.s = *Ns();
	D3.s = 9;
	*Ns() = D3.s;
	*Ni() = 10;
	D3.s = *Ni();
	D3.s = 9;
	*Ni() = D3.s;
	*Nuc() = 11;
	D3.s = *Nuc();
	D3.s = 9;
	*Nuc() = D3.s;
	*Nus() = 12;
	D3.s = *Nus();
	D3.s = 9;
	*Nus() = D3.s;
	*Nui() = 13;
	D3.s = *Nui();
	D3.s = 9;
	*Nui() = D3.s;
	*Nl() = 14;
	D3.s = *Nl();
	D3.s = 9;
	*Nl() = D3.s;
	*Nul() = 15;
	D3.s = *Nul();
	D3.s = 9;
	*Nul() = D3.s;
	*Nf() = 16;
	D3.s = *Nf();
	D3.s = 9;
	*Nf() = D3.s;
	*Nd() = 17;
	D3.s = *Nd();
	D3.s = 9;
	*Nd() = D3.s;
	*Nld() = 18;
	D3.s = *Nld();
	D3.s = 9;
	*Nld() = D3.s;
	*Nc() = 7;
	D4.i = *Nc();
	D4.i = 10;
	*Nc() = D4.i;
	*Nsc() = 8;
	D4.i = *Nsc();
	D4.i = 10;
	*Nsc() = D4.i;
	*Ns() = 9;
	D4.i = *Ns();
	D4.i = 10;
	*Ns() = D4.i;
	*Ni() = 10;
	D4.i = *Ni();
	D4.i = 10;
	*Ni() = D4.i;
	*Nuc() = 11;
	D4.i = *Nuc();
	D4.i = 10;
	*Nuc() = D4.i;
	*Nus() = 12;
	D4.i = *Nus();
	D4.i = 10;
	*Nus() = D4.i;
	*Nui() = 13;
	D4.i = *Nui();
	D4.i = 10;
	*Nui() = D4.i;
	*Nl() = 14;
	D4.i = *Nl();
	D4.i = 10;
	*Nl() = D4.i;
	*Nul() = 15;
	D4.i = *Nul();
	D4.i = 10;
	*Nul() = D4.i;
	*Nf() = 16;
	D4.i = *Nf();
	D4.i = 10;
	*Nf() = D4.i;
	*Nd() = 17;
	D4.i = *Nd();
	D4.i = 10;
	*Nd() = D4.i;
	*Nld() = 18;
	D4.i = *Nld();
	D4.i = 10;
	*Nld() = D4.i;
	*Nc() = 7;
	D5.uc = *Nc();
	D5.uc = 11;
	*Nc() = D5.uc;
	*Nsc() = 8;
	D5.uc = *Nsc();
	D5.uc = 11;
	*Nsc() = D5.uc;
	*Ns() = 9;
	D5.uc = *Ns();
	D5.uc = 11;
	*Ns() = D5.uc;
	*Ni() = 10;
	D5.uc = *Ni();
	D5.uc = 11;
	*Ni() = D5.uc;
	*Nuc() = 11;
	D5.uc = *Nuc();
	D5.uc = 11;
	*Nuc() = D5.uc;
	*Nus() = 12;
	D5.uc = *Nus();
	D5.uc = 11;
	*Nus() = D5.uc;
	*Nui() = 13;
	D5.uc = *Nui();
	D5.uc = 11;
	*Nui() = D5.uc;
	*Nl() = 14;
	D5.uc = *Nl();
	D5.uc = 11;
	*Nl() = D5.uc;
	*Nul() = 15;
	D5.uc = *Nul();
	D5.uc = 11;
	*Nul() = D5.uc;
	*Nf() = 16;
	D5.uc = *Nf();
	D5.uc = 11;
	*Nf() = D5.uc;
	*Nd() = 17;
	D5.uc = *Nd();
	D5.uc = 11;
	*Nd() = D5.uc;
	*Nld() = 18;
	D5.uc = *Nld();
	D5.uc = 11;
	*Nld() = D5.uc;
	*Nc() = 7;
	D6.us = *Nc();
	D6.us = 12;
	*Nc() = D6.us;
	*Nsc() = 8;
	D6.us = *Nsc();
	D6.us = 12;
	*Nsc() = D6.us;
	*Ns() = 9;
	D6.us = *Ns();
	D6.us = 12;
	*Ns() = D6.us;
	*Ni() = 10;
	D6.us = *Ni();
	D6.us = 12;
	*Ni() = D6.us;
	*Nuc() = 11;
	D6.us = *Nuc();
	D6.us = 12;
	*Nuc() = D6.us;
	*Nus() = 12;
	D6.us = *Nus();
	D6.us = 12;
	*Nus() = D6.us;
	*Nui() = 13;
	D6.us = *Nui();
	D6.us = 12;
	*Nui() = D6.us;
	*Nl() = 14;
	D6.us = *Nl();
	D6.us = 12;
	*Nl() = D6.us;
	*Nul() = 15;
	D6.us = *Nul();
	D6.us = 12;
	*Nul() = D6.us;
	*Nf() = 16;
	D6.us = *Nf();
	D6.us = 12;
	*Nf() = D6.us;
	*Nd() = 17;
	D6.us = *Nd();
	D6.us = 12;
	*Nd() = D6.us;
	*Nld() = 18;
	D6.us = *Nld();
	D6.us = 12;
	*Nld() = D6.us;
	*Nc() = 7;
	D7.ui = *Nc();
	D7.ui = 13;
	*Nc() = D7.ui;
	*Nsc() = 8;
	D7.ui = *Nsc();
	D7.ui = 13;
	*Nsc() = D7.ui;
	*Ns() = 9;
	D7.ui = *Ns();
	D7.ui = 13;
	*Ns() = D7.ui;
	*Ni() = 10;
	D7.ui = *Ni();
	D7.ui = 13;
	*Ni() = D7.ui;
	*Nuc() = 11;
	D7.ui = *Nuc();
	D7.ui = 13;
	*Nuc() = D7.ui;
	*Nus() = 12;
	D7.ui = *Nus();
	D7.ui = 13;
	*Nus() = D7.ui;
	*Nui() = 13;
	D7.ui = *Nui();
	D7.ui = 13;
	*Nui() = D7.ui;
	*Nl() = 14;
	D7.ui = *Nl();
	D7.ui = 13;
	*Nl() = D7.ui;
	*Nul() = 15;
	D7.ui = *Nul();
	D7.ui = 13;
	*Nul() = D7.ui;
	*Nf() = 16;
	D7.ui = *Nf();
	D7.ui = 13;
	*Nf() = D7.ui;
	*Nd() = 17;
	D7.ui = *Nd();
	D7.ui = 13;
	*Nd() = D7.ui;
	*Nld() = 18;
	D7.ui = *Nld();
	D7.ui = 13;
	*Nld() = D7.ui;
	*Nc() = 7;
	D8.l = *Nc();
	D8.l = 14;
	*Nc() = D8.l;
	*Nsc() = 8;
	D8.l = *Nsc();
	D8.l = 14;
	*Nsc() = D8.l;
	*Ns() = 9;
	D8.l = *Ns();
	D8.l = 14;
	*Ns() = D8.l;
	*Ni() = 10;
	D8.l = *Ni();
	D8.l = 14;
	*Ni() = D8.l;
	*Nuc() = 11;
	D8.l = *Nuc();
	D8.l = 14;
	*Nuc() = D8.l;
	*Nus() = 12;
	D8.l = *Nus();
	D8.l = 14;
	*Nus() = D8.l;
	*Nui() = 13;
	D8.l = *Nui();
	D8.l = 14;
	*Nui() = D8.l;
	*Nl() = 14;
	D8.l = *Nl();
	D8.l = 14;
	*Nl() = D8.l;
	*Nul() = 15;
	D8.l = *Nul();
	D8.l = 14;
	*Nul() = D8.l;
	*Nf() = 16;
	D8.l = *Nf();
	D8.l = 14;
	*Nf() = D8.l;
	*Nd() = 17;
	D8.l = *Nd();
	D8.l = 14;
	*Nd() = D8.l;
	*Nld() = 18;
	D8.l = *Nld();
	D8.l = 14;
	*Nld() = D8.l;
	*Nc() = 7;
	D9.ul = *Nc();
	D9.ul = 15;
	*Nc() = D9.ul;
	*Nsc() = 8;
	D9.ul = *Nsc();
	D9.ul = 15;
	*Nsc() = D9.ul;
	*Ns() = 9;
	D9.ul = *Ns();
	D9.ul = 15;
	*Ns() = D9.ul;
	*Ni() = 10;
	D9.ul = *Ni();
	D9.ul = 15;
	*Ni() = D9.ul;
	*Nuc() = 11;
	D9.ul = *Nuc();
	D9.ul = 15;
	*Nuc() = D9.ul;
	*Nus() = 12;
	D9.ul = *Nus();
	D9.ul = 15;
	*Nus() = D9.ul;
	*Nui() = 13;
	D9.ul = *Nui();
	D9.ul = 15;
	*Nui() = D9.ul;
	*Nl() = 14;
	D9.ul = *Nl();
	D9.ul = 15;
	*Nl() = D9.ul;
	*Nul() = 15;
	D9.ul = *Nul();
	D9.ul = 15;
	*Nul() = D9.ul;
	*Nf() = 16;
	D9.ul = *Nf();
	D9.ul = 15;
	*Nf() = D9.ul;
	*Nd() = 17;
	D9.ul = *Nd();
	D9.ul = 15;
	*Nd() = D9.ul;
	*Nld() = 18;
	D9.ul = *Nld();
	D9.ul = 15;
	*Nld() = D9.ul;
	*Nc() = 7;
	D10.f = *Nc();
	D10.f = 16;
	*Nc() = D10.f;
	*Nsc() = 8;
	D10.f = *Nsc();
	D10.f = 16;
	*Nsc() = D10.f;
	*Ns() = 9;
	D10.f = *Ns();
	D10.f = 16;
	*Ns() = D10.f;
	*Ni() = 10;
	D10.f = *Ni();
	D10.f = 16;
	*Ni() = D10.f;
	*Nuc() = 11;
	D10.f = *Nuc();
	D10.f = 16;
	*Nuc() = D10.f;
	*Nus() = 12;
	D10.f = *Nus();
	D10.f = 16;
	*Nus() = D10.f;
	*Nui() = 13;
	D10.f = *Nui();
	D10.f = 16;
	*Nui() = D10.f;
	*Nl() = 14;
	D10.f = *Nl();
	D10.f = 16;
	*Nl() = D10.f;
	*Nul() = 15;
	D10.f = *Nul();
	D10.f = 16;
	*Nul() = D10.f;
	*Nf() = 16;
	D10.f = *Nf();
	D10.f = 16;
	*Nf() = D10.f;
	*Nd() = 17;
	D10.f = *Nd();
	D10.f = 16;
	*Nd() = D10.f;
	*Nld() = 18;
	D10.f = *Nld();
	D10.f = 16;
	*Nld() = D10.f;
	*Nc() = 7;
	D11.d = *Nc();
	D11.d = 17;
	*Nc() = D11.d;
	*Nsc() = 8;
	D11.d = *Nsc();
	D11.d = 17;
	*Nsc() = D11.d;
	*Ns() = 9;
	D11.d = *Ns();
	D11.d = 17;
	*Ns() = D11.d;
	*Ni() = 10;
	D11.d = *Ni();
	D11.d = 17;
	*Ni() = D11.d;
	*Nuc() = 11;
	D11.d = *Nuc();
	D11.d = 17;
	*Nuc() = D11.d;
	*Nus() = 12;
	D11.d = *Nus();
	D11.d = 17;
	*Nus() = D11.d;
	*Nui() = 13;
	D11.d = *Nui();
	D11.d = 17;
	*Nui() = D11.d;
	*Nl() = 14;
	D11.d = *Nl();
	D11.d = 17;
	*Nl() = D11.d;
	*Nul() = 15;
	D11.d = *Nul();
	D11.d = 17;
	*Nul() = D11.d;
	*Nf() = 16;
	D11.d = *Nf();
	D11.d = 17;
	*Nf() = D11.d;
	*Nd() = 17;
	D11.d = *Nd();
	D11.d = 17;
	*Nd() = D11.d;
	*Nld() = 18;
	D11.d = *Nld();
	D11.d = 17;
	*Nld() = D11.d;
	*Nc() = 7;
	D12.ld = *Nc();
	D12.ld = 18;
	*Nc() = D12.ld;
	*Nsc() = 8;
	D12.ld = *Nsc();
	D12.ld = 18;
	*Nsc() = D12.ld;
	*Ns() = 9;
	D12.ld = *Ns();
	D12.ld = 18;
	*Ns() = D12.ld;
	*Ni() = 10;
	D12.ld = *Ni();
	D12.ld = 18;
	*Ni() = D12.ld;
	*Nuc() = 11;
	D12.ld = *Nuc();
	D12.ld = 18;
	*Nuc() = D12.ld;
	*Nus() = 12;
	D12.ld = *Nus();
	D12.ld = 18;
	*Nus() = D12.ld;
	*Nui() = 13;
	D12.ld = *Nui();
	D12.ld = 18;
	*Nui() = D12.ld;
	*Nl() = 14;
	D12.ld = *Nl();
	D12.ld = 18;
	*Nl() = D12.ld;
	*Nul() = 15;
	D12.ld = *Nul();
	D12.ld = 18;
	*Nul() = D12.ld;
	*Nf() = 16;
	D12.ld = *Nf();
	D12.ld = 18;
	*Nf() = D12.ld;
	*Nd() = 17;
	D12.ld = *Nd();
	D12.ld = 18;
	*Nd() = D12.ld;
	*Nld() = 18;
	D12.ld = *Nld();
	D12.ld = 18;
	*Nld() = D12.ld;
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\band.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "n.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} G, *pG = &G;
	pG->c = 7;
	pG->sc = 8;
	pG->s = 9;
	pG->i = 10;
	pG->uc = 11;
	pG->us = 12;
	pG->ui = 13;
	pG->l = 14;
	pG->ul = 15;
	pG->f = 16;
	pG->d = 17;
	pG->ld = 18;
	{
	CHAR *Nc();
	SCHAR *Nsc();
	SHORT *Ns();
	INT *Ni();
	UCHAR *Nuc();
	USHORT *Nus();
	UINT *Nui();
	LONG *Nl();
	ULONG *Nul();
	FLOAT *Nf();
	DOUBLE *Nd();
	LDOUBLE *Nld();
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\andif.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
    
    {
    auto struct {
        UINT b1: 1;
        UINT b2: 2;
        UINT b3: 3;
        UINT b4: 4;
        UINT b5: 5;
        UINT b6: 6;
        UINT b7: 7;
        UINT b8: 5;
        UINT b9: 4;
        UINT b10: 3;
        UINT b11: 2;
        UINT b12: 1;
        } K;
    K.b1 = 1;
    K.b2 = 2;
    K.b3 = 3;
    K.b4 = 4;
    K.b5 = 5;
    K.b6 = 6;
    K.b7 = 7;
    K.b8 = 5;
    K.b9 = 4;
    K.b10 = 3;
    K.b11 = 2;
    K.b12 = 1;
    {
    static struct H{
        CHAR c;
        SHORT s;
        INT i;
        UCHAR uc;
        USHORT us;
        UINT ui;
        LONG l;
        ULONG ul;
        FLOAT f;
        DOUBLE d;
        SCHAR sc;
        LDOUBLE ld;
        struct H *pH;
        } H, *ppH = &H;
    H.pH = &H;
    ppH->pH->c = 7;
    ppH->pH->sc = 8;
    ppH->pH->s = 9;
    ppH->pH->i = 10;
    ppH->pH->uc = 11;
    ppH->pH->us = 12;
    ppH->pH->ui = 13;
    ppH->pH->l = 14;
    ppH->pH->ul = 15;
    ppH->pH->f = 16;
    ppH->pH->d = 17;
    ppH->pH->ld = 18;
    {
	break_here:
	return 0;
    }}
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\bandeq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto CHAR Bc = 7;
	auto CHAR *pBc = &Bc;
	auto SCHAR Bsc = 8;
	auto SCHAR *pBsc = &Bsc;
	auto SHORT Bs = 9;
	auto SHORT *pBs = &Bs;
	auto INT Bi = 10;
	auto INT *pBi = &Bi;
	auto UCHAR Buc = 11;
	auto UCHAR *pBuc = &Buc;
	auto USHORT Bus = 12;
	auto USHORT *pBus = &Bus;
	auto UINT Bui = 13;
	auto UINT *pBui = &Bui;
	auto LONG Bl = 14;
	auto LONG *pBl = &Bl;
	auto ULONG Bul = 15;
	auto ULONG *pBul = &Bul;
	auto FLOAT Bf = 16;
	auto FLOAT *pBf = &Bf;
	auto DOUBLE Bd = 17;
	auto DOUBLE *pBd = &Bd;
	auto LDOUBLE Bld = 18;
	auto LDOUBLE *pBld = &Bld;
	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	*pBc = 7; **ppCc = 7;
	*pBc &= **ppCc;

	break_here:

	*pBc = 7;
	**ppCc = 7; *pBc = 7;
	**ppCc &= *pBc;
	**ppCc = 7;
	*pBc = 7; **ppCsc = 8;
	*pBc &= **ppCsc;
	*pBc = 7;
	**ppCsc = 8; *pBc = 7;
	**ppCsc &= *pBc;
	**ppCsc = 8;
	*pBc = 7; **ppCs = 9;
	*pBc &= **ppCs;
	*pBc = 7;
	**ppCs = 9; *pBc = 7;
	**ppCs &= *pBc;
	**ppCs = 9;
	*pBc = 7; **ppCi = 10;
	*pBc &= **ppCi;
	*pBc = 7;
	**ppCi = 10; *pBc = 7;
	**ppCi &= *pBc;
	**ppCi = 10;
	*pBc = 7; **ppCuc = 11;
	*pBc &= **ppCuc;
	*pBc = 7;
	**ppCuc = 11; *pBc = 7;
	**ppCuc &= *pBc;
	**ppCuc = 11;
	*pBc = 7; **ppCus = 12;
	*pBc &= **ppCus;
	*pBc = 7;
	**ppCus = 12; *pBc = 7;
	**ppCus &= *pBc;
	**ppCus = 12;
	*pBc = 7; **ppCui = 13;
	*pBc &= **ppCui;
	*pBc = 7;
	**ppCui = 13; *pBc = 7;
	**ppCui &= *pBc;
	**ppCui = 13;
	*pBc = 7; **ppCl = 14;
	*pBc &= **ppCl;
	*pBc = 7;
	**ppCl = 14; *pBc = 7;
	**ppCl &= *pBc;
	**ppCl = 14;
	*pBc = 7; **ppCul = 15;
	*pBc &= **ppCul;
	*pBc = 7;
	**ppCul = 15; *pBc = 7;
	**ppCul &= *pBc;
	**ppCul = 15;
	*pBsc = 8; **ppCc = 7;
	*pBsc &= **ppCc;
	*pBsc = 8;
	**ppCc = 7; *pBsc = 8;
	**ppCc &= *pBsc;
	**ppCc = 7;
	*pBsc = 8; **ppCsc = 8;
	*pBsc &= **ppCsc;
	*pBsc = 8;
	**ppCsc = 8; *pBsc = 8;
	**ppCsc &= *pBsc;
	**ppCsc = 8;
	*pBsc = 8; **ppCs = 9;
	*pBsc &= **ppCs;
	*pBsc = 8;
	**ppCs = 9; *pBsc = 8;
	**ppCs &= *pBsc;
	**ppCs = 9;
	*pBsc = 8; **ppCi = 10;
	*pBsc &= **ppCi;
	*pBsc = 8;
	**ppCi = 10; *pBsc = 8;
	**ppCi &= *pBsc;
	**ppCi = 10;
	*pBsc = 8; **ppCuc = 11;
	*pBsc &= **ppCuc;
	*pBsc = 8;
	**ppCuc = 11; *pBsc = 8;
	**ppCuc &= *pBsc;
	**ppCuc = 11;
	*pBsc = 8; **ppCus = 12;
	*pBsc &= **ppCus;
	*pBsc = 8;
	**ppCus = 12; *pBsc = 8;
	**ppCus &= *pBsc;
	**ppCus = 12;
	*pBsc = 8; **ppCui = 13;
	*pBsc &= **ppCui;
	*pBsc = 8;
	**ppCui = 13; *pBsc = 8;
	**ppCui &= *pBsc;
	**ppCui = 13;
	*pBsc = 8; **ppCl = 14;
	*pBsc &= **ppCl;
	*pBsc = 8;
	**ppCl = 14; *pBsc = 8;
	**ppCl &= *pBsc;
	**ppCl = 14;
	*pBsc = 8; **ppCul = 15;
	*pBsc &= **ppCul;
	*pBsc = 8;
	**ppCul = 15; *pBsc = 8;
	**ppCul &= *pBsc;
	**ppCul = 15;
	*pBs = 9; **ppCc = 7;
	*pBs &= **ppCc;
	*pBs = 9;
	**ppCc = 7; *pBs = 9;
	**ppCc &= *pBs;
	**ppCc = 7;
	*pBs = 9; **ppCsc = 8;
	*pBs &= **ppCsc;
	*pBs = 9;
	**ppCsc = 8; *pBs = 9;
	**ppCsc &= *pBs;
	**ppCsc = 8;
	*pBs = 9; **ppCs = 9;
	*pBs &= **ppCs;
	*pBs = 9;
	**ppCs = 9; *pBs = 9;
	**ppCs &= *pBs;
	**ppCs = 9;
	*pBs = 9; **ppCi = 10;
	*pBs &= **ppCi;
	*pBs = 9;
	**ppCi = 10; *pBs = 9;
	**ppCi &= *pBs;
	**ppCi = 10;
	*pBs = 9; **ppCuc = 11;
	*pBs &= **ppCuc;
	*pBs = 9;
	**ppCuc = 11; *pBs = 9;
	**ppCuc &= *pBs;
	**ppCuc = 11;
	*pBs = 9; **ppCus = 12;
	*pBs &= **ppCus;
	*pBs = 9;
	**ppCus = 12; *pBs = 9;
	**ppCus &= *pBs;
	**ppCus = 12;
	*pBs = 9; **ppCui = 13;
	*pBs &= **ppCui;
	*pBs = 9;
	**ppCui = 13; *pBs = 9;
	**ppCui &= *pBs;
	**ppCui = 13;
	*pBs = 9; **ppCl = 14;
	*pBs &= **ppCl;
	*pBs = 9;
	**ppCl = 14; *pBs = 9;
	**ppCl &= *pBs;
	**ppCl = 14;
	*pBs = 9; **ppCul = 15;
	*pBs &= **ppCul;
	*pBs = 9;
	**ppCul = 15; *pBs = 9;
	**ppCul &= *pBs;
	**ppCul = 15;
	*pBi = 10; **ppCc = 7;
	*pBi &= **ppCc;
	*pBi = 10;
	**ppCc = 7; *pBi = 10;
	**ppCc &= *pBi;
	**ppCc = 7;
	*pBi = 10; **ppCsc = 8;
	*pBi &= **ppCsc;
	*pBi = 10;
	**ppCsc = 8; *pBi = 10;
	**ppCsc &= *pBi;
	**ppCsc = 8;
	*pBi = 10; **ppCs = 9;
	*pBi &= **ppCs;
	*pBi = 10;
	**ppCs = 9; *pBi = 10;
	**ppCs &= *pBi;
	**ppCs = 9;
	*pBi = 10; **ppCi = 10;
	*pBi &= **ppCi;
	*pBi = 10;
	**ppCi = 10; *pBi = 10;
	**ppCi &= *pBi;
	**ppCi = 10;
	*pBi = 10; **ppCuc = 11;
	*pBi &= **ppCuc;
	*pBi = 10;
	**ppCuc = 11; *pBi = 10;
	**ppCuc &= *pBi;
	**ppCuc = 11;
	*pBi = 10; **ppCus = 12;
	*pBi &= **ppCus;
	*pBi = 10;
	**ppCus = 12; *pBi = 10;
	**ppCus &= *pBi;
	**ppCus = 12;
	*pBi = 10; **ppCui = 13;
	*pBi &= **ppCui;
	*pBi = 10;
	**ppCui = 13; *pBi = 10;
	**ppCui &= *pBi;
	**ppCui = 13;
	*pBi = 10; **ppCl = 14;
	*pBi &= **ppCl;
	*pBi = 10;
	**ppCl = 14; *pBi = 10;
	**ppCl &= *pBi;
	**ppCl = 14;
	*pBi = 10; **ppCul = 15;
	*pBi &= **ppCul;
	*pBi = 10;
	**ppCul = 15; *pBi = 10;
	**ppCul &= *pBi;
	**ppCul = 15;
	*pBuc = 11; **ppCc = 7;
	*pBuc &= **ppCc;
	*pBuc = 11;
	**ppCc = 7; *pBuc = 11;
	**ppCc &= *pBuc;
	**ppCc = 7;
	*pBuc = 11; **ppCsc = 8;
	*pBuc &= **ppCsc;
	*pBuc = 11;
	**ppCsc = 8; *pBuc = 11;
	**ppCsc &= *pBuc;
	**ppCsc = 8;
	*pBuc = 11; **ppCs = 9;
	*pBuc &= **ppCs;
	*pBuc = 11;
	**ppCs = 9; *pBuc = 11;
	**ppCs &= *pBuc;
	**ppCs = 9;
	*pBuc = 11; **ppCi = 10;
	*pBuc &= **ppCi;
	*pBuc = 11;
	**ppCi = 10; *pBuc = 11;
	**ppCi &= *pBuc;
	**ppCi = 10;
	*pBuc = 11; **ppCuc = 11;
	*pBuc &= **ppCuc;
	*pBuc = 11;
	**ppCuc = 11; *pBuc = 11;
	**ppCuc &= *pBuc;
	**ppCuc = 11;
	*pBuc = 11; **ppCus = 12;
	*pBuc &= **ppCus;
	*pBuc = 11;
	**ppCus = 12; *pBuc = 11;
	**ppCus &= *pBuc;
	**ppCus = 12;
	*pBuc = 11; **ppCui = 13;
	*pBuc &= **ppCui;
	*pBuc = 11;
	**ppCui = 13; *pBuc = 11;
	**ppCui &= *pBuc;
	**ppCui = 13;
	*pBuc = 11; **ppCl = 14;
	*pBuc &= **ppCl;
	*pBuc = 11;
	**ppCl = 14; *pBuc = 11;
	**ppCl &= *pBuc;
	**ppCl = 14;
	*pBuc = 11; **ppCul = 15;
	*pBuc &= **ppCul;
	*pBuc = 11;
	**ppCul = 15; *pBuc = 11;
	**ppCul &= *pBuc;
	**ppCul = 15;
	*pBus = 12; **ppCc = 7;
	*pBus &= **ppCc;
	*pBus = 12;
	**ppCc = 7; *pBus = 12;
	**ppCc &= *pBus;
	**ppCc = 7;
	*pBus = 12; **ppCsc = 8;
	*pBus &= **ppCsc;
	*pBus = 12;
	**ppCsc = 8; *pBus = 12;
	**ppCsc &= *pBus;
	**ppCsc = 8;
	*pBus = 12; **ppCs = 9;
	*pBus &= **ppCs;
	*pBus = 12;
	**ppCs = 9; *pBus = 12;
	**ppCs &= *pBus;
	**ppCs = 9;
	*pBus = 12; **ppCi = 10;
	*pBus &= **ppCi;
	*pBus = 12;
	**ppCi = 10; *pBus = 12;
	**ppCi &= *pBus;
	**ppCi = 10;
	*pBus = 12; **ppCuc = 11;
	*pBus &= **ppCuc;
	*pBus = 12;
	**ppCuc = 11; *pBus = 12;
	**ppCuc &= *pBus;
	**ppCuc = 11;
	*pBus = 12; **ppCus = 12;
	*pBus &= **ppCus;
	*pBus = 12;
	**ppCus = 12; *pBus = 12;
	**ppCus &= *pBus;
	**ppCus = 12;
	*pBus = 12; **ppCui = 13;
	*pBus &= **ppCui;
	*pBus = 12;
	**ppCui = 13; *pBus = 12;
	**ppCui &= *pBus;
	**ppCui = 13;
	*pBus = 12; **ppCl = 14;
	*pBus &= **ppCl;
	*pBus = 12;
	**ppCl = 14; *pBus = 12;
	**ppCl &= *pBus;
	**ppCl = 14;
	*pBus = 12; **ppCul = 15;
	*pBus &= **ppCul;
	*pBus = 12;
	**ppCul = 15; *pBus = 12;
	**ppCul &= *pBus;
	**ppCul = 15;
	*pBui = 13; **ppCc = 7;
	*pBui &= **ppCc;
	*pBui = 13;
	**ppCc = 7; *pBui = 13;
	**ppCc &= *pBui;
	**ppCc = 7;
	*pBui = 13; **ppCsc = 8;
	*pBui &= **ppCsc;
	*pBui = 13;
	**ppCsc = 8; *pBui = 13;
	**ppCsc &= *pBui;
	**ppCsc = 8;
	*pBui = 13; **ppCs = 9;
	*pBui &= **ppCs;
	*pBui = 13;
	**ppCs = 9; *pBui = 13;
	**ppCs &= *pBui;
	**ppCs = 9;
	*pBui = 13; **ppCi = 10;
	*pBui &= **ppCi;
	*pBui = 13;
	**ppCi = 10; *pBui = 13;
	**ppCi &= *pBui;
	**ppCi = 10;
	*pBui = 13; **ppCuc = 11;
	*pBui &= **ppCuc;
	*pBui = 13;
	**ppCuc = 11; *pBui = 13;
	**ppCuc &= *pBui;
	**ppCuc = 11;
	*pBui = 13; **ppCus = 12;
	*pBui &= **ppCus;
	*pBui = 13;
	**ppCus = 12; *pBui = 13;
	**ppCus &= *pBui;
	**ppCus = 12;
	*pBui = 13; **ppCui = 13;
	*pBui &= **ppCui;
	*pBui = 13;
	**ppCui = 13; *pBui = 13;
	**ppCui &= *pBui;
	**ppCui = 13;
	*pBui = 13; **ppCl = 14;
	*pBui &= **ppCl;
	*pBui = 13;
	**ppCl = 14; *pBui = 13;
	**ppCl &= *pBui;
	**ppCl = 14;
	*pBui = 13; **ppCul = 15;
	*pBui &= **ppCul;
	*pBui = 13;
	**ppCul = 15; *pBui = 13;
	**ppCul &= *pBui;
	**ppCul = 15;
	*pBl = 14; **ppCc = 7;
	*pBl &= **ppCc;
	*pBl = 14;
	**ppCc = 7; *pBl = 14;
	**ppCc &= *pBl;
	**ppCc = 7;
	*pBl = 14; **ppCsc = 8;
	*pBl &= **ppCsc;
	*pBl = 14;
	**ppCsc = 8; *pBl = 14;
	**ppCsc &= *pBl;
	**ppCsc = 8;
	*pBl = 14; **ppCs = 9;
	*pBl &= **ppCs;
	*pBl = 14;
	**ppCs = 9; *pBl = 14;
	**ppCs &= *pBl;
	**ppCs = 9;
	*pBl = 14; **ppCi = 10;
	*pBl &= **ppCi;
	*pBl = 14;
	**ppCi = 10; *pBl = 14;
	**ppCi &= *pBl;
	**ppCi = 10;
	*pBl = 14; **ppCuc = 11;
	*pBl &= **ppCuc;
	*pBl = 14;
	**ppCuc = 11; *pBl = 14;
	**ppCuc &= *pBl;
	**ppCuc = 11;
	*pBl = 14; **ppCus = 12;
	*pBl &= **ppCus;
	*pBl = 14;
	**ppCus = 12; *pBl = 14;
	**ppCus &= *pBl;
	**ppCus = 12;
	*pBl = 14; **ppCui = 13;
	*pBl &= **ppCui;
	*pBl = 14;
	**ppCui = 13; *pBl = 14;
	**ppCui &= *pBl;
	**ppCui = 13;
	*pBl = 14; **ppCl = 14;
	*pBl &= **ppCl;
	*pBl = 14;
	**ppCl = 14; *pBl = 14;
	**ppCl &= *pBl;
	**ppCl = 14;
	*pBl = 14; **ppCul = 15;
	*pBl &= **ppCul;
	*pBl = 14;
	**ppCul = 15; *pBl = 14;
	**ppCul &= *pBl;
	**ppCul = 15;
	*pBul = 15; **ppCc = 7;
	*pBul &= **ppCc;
	*pBul = 15;
	**ppCc = 7; *pBul = 15;
	**ppCc &= *pBul;
	**ppCc = 7;
	*pBul = 15; **ppCsc = 8;
	*pBul &= **ppCsc;
	*pBul = 15;
	**ppCsc = 8; *pBul = 15;
	**ppCsc &= *pBul;
	**ppCsc = 8;
	*pBul = 15; **ppCs = 9;
	*pBul &= **ppCs;
	*pBul = 15;
	**ppCs = 9; *pBul = 15;
	**ppCs &= *pBul;
	**ppCs = 9;
	*pBul = 15; **ppCi = 10;
	*pBul &= **ppCi;
	*pBul = 15;
	**ppCi = 10; *pBul = 15;
	**ppCi &= *pBul;
	**ppCi = 10;
	*pBul = 15; **ppCuc = 11;
	*pBul &= **ppCuc;
	*pBul = 15;
	**ppCuc = 11; *pBul = 15;
	**ppCuc &= *pBul;
	**ppCuc = 11;
	*pBul = 15; **ppCus = 12;
	*pBul &= **ppCus;
	*pBul = 15;
	**ppCus = 12; *pBul = 15;
	**ppCus &= *pBul;
	**ppCus = 12;
	*pBul = 15; **ppCui = 13;
	*pBul &= **ppCui;
	*pBul = 15;
	**ppCui = 13; *pBul = 15;
	**ppCui &= *pBul;
	**ppCui = 13;
	*pBul = 15; **ppCl = 14;
	*pBul &= **ppCl;
	*pBul = 15;
	**ppCl = 14; *pBul = 15;
	**ppCl &= *pBul;
	**ppCl = 14;
	*pBul = 15; **ppCul = 15;
	*pBul &= **ppCul;
	*pBul = 15;
	**ppCul = 15; *pBul = 15;
	**ppCul &= *pBul;
	**ppCul = 15;
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\cast.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	static struct H{
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		struct H *pH;
		} H, *ppH = &H;
	H.pH = &H;
	ppH->pH->c = 7;
	ppH->pH->sc = 8;
	ppH->pH->s = 9;
	ppH->pH->i = 10;
	ppH->pH->uc = 11;
	ppH->pH->us = 12;
	ppH->pH->ui = 13;
	ppH->pH->l = 14;
	ppH->pH->ul = 15;
	ppH->pH->f = 16;
	ppH->pH->d = 17;
	ppH->pH->ld = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\compl.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "m.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	CHAR Mc();
	SCHAR Msc();
	SHORT Ms();
	INT Mi();
	UCHAR Muc();
	USHORT Mus();
	UINT Mui();
	LONG Ml();
	ULONG Mul();
	FLOAT Mf();
	DOUBLE Md();
	LDOUBLE Mld();
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\eq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto CHAR Bc = 7;
	auto CHAR *pBc = &Bc;
	auto SCHAR Bsc = 8;
	auto SCHAR *pBsc = &Bsc;
	auto SHORT Bs = 9;
	auto SHORT *pBs = &Bs;
	auto INT Bi = 10;
	auto INT *pBi = &Bi;
	auto UCHAR Buc = 11;
	auto UCHAR *pBuc = &Buc;
	auto USHORT Bus = 12;
	auto USHORT *pBus = &Bus;
	auto UINT Bui = 13;
	auto UINT *pBui = &Bui;
	auto LONG Bl = 14;
	auto LONG *pBl = &Bl;
	auto ULONG Bul = 15;
	auto ULONG *pBul = &Bul;
	auto FLOAT Bf = 16;
	auto FLOAT *pBf = &Bf;
	auto DOUBLE Bd = 17;
	auto DOUBLE *pBd = &Bd;
	auto LDOUBLE Bld = 18;
	auto LDOUBLE *pBld = &Bld;
	{
	auto CHAR Ic[12];
	int x_0 = 0;
	auto SCHAR Isc[12];
	int x_1 = 1;
	auto SHORT Is[12];
	int x_2 = 2;
	auto INT Ii[12];
	int x_3 = 3;
	auto UCHAR Iuc[12];
	int x_4 = 4;
	auto USHORT Ius[12];
	int x_5 = 5;
	auto UINT Iui[12];
	int x_6 = 6;
	auto LONG Il[12];
	int x_7 = 7;
	auto ULONG Iul[12];
	int x_8 = 8;
	auto FLOAT If[12];
	int x_9 = 9;
	auto DOUBLE Id[12];
	int x_10 = 10;
	auto LDOUBLE Ild[12];
	int x_11 = 11;
	Ic[x_0] = 7;
	Isc[x_1] = 8;
	Is[x_2] = 9;
	Ii[x_3] = 10;
	Iuc[x_4] = 11;
	Ius[x_5] = 12;
	Iui[x_6] = 13;
	Il[x_7] = 14;
	Iul[x_8] = 15;
	If[x_9] = 16;
	Id[x_10] = 17;
	Ild[x_11] = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\defs.h ===
/* Suite++: The Plum Hall Validation Suite for C++
 * VERSION: 1
 * AND      The Plum Hall Validation Suite for C
 * VERSION: 3
 * Unpublished copyright (c) 1991, Plum Hall Inc (Editor)
 * DATE:    91/07/01
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#if HAS_PROTOTYPES
#define PARMS(x) x
#else
#define PARMS(X) ()
#endif	/* HAS_PROTOTYPES */

int ivalue PARMS((int));
long lvalue PARMS((long));
float fvalue PARMS((double));
double dvalue PARMS((double));

#if NEW_STYLE_FN_DEF
#define FN_DEF1(a1, d1) (d1)
#else /* !NEW_STYLE_FN_DEF */
#define FN_DEF1(a1, d1) (a1) d1;
#endif /* NEW_STYLE_FN_DEF */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\int.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include "defs.h"
#include "windows.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto unsigned int ui;
	static unsigned int * pui;
	auto unsigned int ** ppui;
	auto int i;
	static int * pi;
	auto int ** ppi;
	auto unsigned short us;
	static unsigned short * pus;
	auto unsigned short ** ppus;
	auto short s;
	static short * ps;
	auto short ** pps;
	auto unsigned char uc;
	static unsigned char * puc;
	auto unsigned char ** ppuc;
	auto char c;
	static char * pc;
	auto char ** ppc;
	auto unsigned long ul;
	static unsigned long * pul;
	auto unsigned long ** ppul;
	auto long l;
	static long * pl;
	auto long ** ppl;
	register int rint1;
	register int rint2;
	register int rint3;
	register int rint4;
	register int rint5;

	ui = ivalue(100);
	pui = &ui;
	ppui = &pui;
	i = ivalue(10);
	pi = &i;
	ppi = &pi;
	us = lvalue(33000);
	pus = &us;
	ppus = &pus;
	s = ivalue(13);
	ps = &s;
	pps = &ps;
	uc = ivalue(128);
	puc = &uc;
	ppuc = &puc;
	c = ivalue(20);
	pc = &c;
	ppc = &pc;
	ul = lvalue(65000L);
	pul = &ul;
	ppul = &pul;
	l = lvalue(97L);
	pl = &l;
	ppl = &pl;
	rint1 = ivalue(1);
	rint2 = ivalue(2);
	rint3 = ivalue(3);
	rint4 = ivalue(4);
	rint5 = ivalue(5);

	break_here:
	return 0;
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\lt.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "m.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	CHAR Mc();
	SCHAR Msc();
	SHORT Ms();
	INT Mi();
	UCHAR Muc();
	USHORT Mus();
	UINT Mui();
	LONG Ml();
	ULONG Mul();
	FLOAT Mf();
	DOUBLE Md();
	LDOUBLE Mld();
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\gt.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "o.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		UINT b1: 1;
		UINT b2: 2;
		UINT b3: 3;
		UINT b4: 4;
		UINT b5: 5;
		UINT b6: 6;
		UINT b7: 7;
		UINT b8: 5;
		UINT b9: 4;
		UINT b10: 3;
		UINT b11: 2;
		UINT b12: 1;
		} L, *pL = &L;
	pL->b1 = 1;
	pL->b2 = 2;
	pL->b3 = 3;
	pL->b4 = 4;
	pL->b5 = 5;
	pL->b6 = 6;
	pL->b7 = 7;
	pL->b8 = 5;
	pL->b9 = 4;
	pL->b10 = 3;
	pL->b11 = 2;
	pL->b12 = 1;
	{
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\div.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} D;
	auto D D1;
	auto D D2;
	auto D D3;
	auto D D4;
	auto D D5;
	auto D D6;
	auto D D7;
	auto D D8;
	auto D D9;
	auto D D10;
	auto D D11;
	auto D D12;
	D1.c = 7;
	D2.sc = 8;
	D3.s = 9;
	D4.i = 10;
	D5.uc = 11;
	D6.us = 12;
	D7.ui = 13;
	D8.l = 14;
	D9.ul = 15;
	D10.f = 16;
	D11.d = 17;
	D12.ld = 18;
	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} E;
	auto E E1, *pE1 = &E1;
	auto E E2, *pE2 = &E2;
	auto E E3, *pE3 = &E3;
	auto E E4, *pE4 = &E4;
	auto E E5, *pE5 = &E5;
	auto E E6, *pE6 = &E6;
	auto E E7, *pE7 = &E7;
	auto E E8, *pE8 = &E8;
	auto E E9, *pE9 = &E9;
	auto E E10, *pE10 = &E10;
	auto E E11, *pE11 = &E11;
	auto E E12, *pE12 = &E12;
	pE1->c = 7;
	pE2->sc = 8;
	pE3->s = 9;
	pE4->i = 10;
	pE5->uc = 11;
	pE6->us = 12;
	pE7->ui = 13;
	pE8->l = 14;
	pE9->ul = 15;
	pE10->f = 16;
	pE11->d = 17;
	pE12->ld = 18;
	{
	pE1->c = 14;
	D1.c = 7;

	break_here:

	D1.c = 14;
	pE1->c = 7;
	pE2->sc = 14;
	D1.c = 7;
	D1.c = 16;
	pE2->sc = 8;
	pE3->s = 14;
	D1.c = 7;
	D1.c = 18;
	pE3->s = 9;
	pE4->i = 14;
	D1.c = 7;
	D1.c = 20;
	pE4->i = 10;
	pE5->uc = 14;
	D1.c = 7;
	D1.c = 22;
	pE5->uc = 11;
	pE6->us = 14;
	D1.c = 7;
	D1.c = 24;
	pE6->us = 12;
	pE7->ui = 14;
	D1.c = 7;
	D1.c = 26;
	pE7->ui = 13;
	pE8->l = 14;
	D1.c = 7;
	D1.c = 28;
	pE8->l = 14;
	pE9->ul = 14;
	D1.c = 7;
	D1.c = 30;
	pE9->ul = 15;
	pE10->f = 14;
	D1.c = 7;
	D1.c = 32;
	pE10->f = 16;
	pE11->d = 14;
	D1.c = 7;
	D1.c = 34;
	pE11->d = 17;
	pE12->ld = 14;
	D1.c = 7;
	D1.c = 36;
	pE12->ld = 18;
	pE1->c = 16;
	D2.sc = 8;
	D2.sc = 14;
	pE1->c = 7;
	pE2->sc = 16;
	D2.sc = 8;
	D2.sc = 16;
	pE2->sc = 8;
	pE3->s = 16;
	D2.sc = 8;
	D2.sc = 18;
	pE3->s = 9;
	pE4->i = 16;
	D2.sc = 8;
	D2.sc = 20;
	pE4->i = 10;
	pE5->uc = 16;
	D2.sc = 8;
	D2.sc = 22;
	pE5->uc = 11;
	pE6->us = 16;
	D2.sc = 8;
	D2.sc = 24;
	pE6->us = 12;
	pE7->ui = 16;
	D2.sc = 8;
	D2.sc = 26;
	pE7->ui = 13;
	pE8->l = 16;
	D2.sc = 8;
	D2.sc = 28;
	pE8->l = 14;
	pE9->ul = 16;
	D2.sc = 8;
	D2.sc = 30;
	pE9->ul = 15;
	pE10->f = 16;
	D2.sc = 8;
	D2.sc = 32;
	pE10->f = 16;
	pE11->d = 16;
	D2.sc = 8;
	D2.sc = 34;
	pE11->d = 17;
	pE12->ld = 16;
	D2.sc = 8;
	D2.sc = 36;
	pE12->ld = 18;
	pE1->c = 18;
	D3.s = 9;
	D3.s = 14;
	pE1->c = 7;
	pE2->sc = 18;
	D3.s = 9;
	D3.s = 16;
	pE2->sc = 8;
	pE3->s = 18;
	D3.s = 9;
	D3.s = 18;
	pE3->s = 9;
	pE4->i = 18;
	D3.s = 9;
	D3.s = 20;
	pE4->i = 10;
	pE5->uc = 18;
	D3.s = 9;
	D3.s = 22;
	pE5->uc = 11;
	pE6->us = 18;
	D3.s = 9;
	D3.s = 24;
	pE6->us = 12;
	pE7->ui = 18;
	D3.s = 9;
	D3.s = 26;
	pE7->ui = 13;
	pE8->l = 18;
	D3.s = 9;
	D3.s = 28;
	pE8->l = 14;
	pE9->ul = 18;
	D3.s = 9;
	D3.s = 30;
	pE9->ul = 15;
	pE10->f = 18;
	D3.s = 9;
	D3.s = 32;
	pE10->f = 16;
	pE11->d = 18;
	D3.s = 9;
	D3.s = 34;
	pE11->d = 17;
	pE12->ld = 18;
	D3.s = 9;
	D3.s = 36;
	pE12->ld = 18;
	pE1->c = 20;
	D4.i = 10;
	D4.i = 14;
	pE1->c = 7;
	pE2->sc = 20;
	D4.i = 10;
	D4.i = 16;
	pE2->sc = 8;
	pE3->s = 20;
	D4.i = 10;
	D4.i = 18;
	pE3->s = 9;
	pE4->i = 20;
	D4.i = 10;
	D4.i = 20;
	pE4->i = 10;
	pE5->uc = 20;
	D4.i = 10;
	D4.i = 22;
	pE5->uc = 11;
	pE6->us = 20;
	D4.i = 10;
	D4.i = 24;
	pE6->us = 12;
	pE7->ui = 20;
	D4.i = 10;
	D4.i = 26;
	pE7->ui = 13;
	pE8->l = 20;
	D4.i = 10;
	D4.i = 28;
	pE8->l = 14;
	pE9->ul = 20;
	D4.i = 10;
	D4.i = 30;
	pE9->ul = 15;
	pE10->f = 20;
	D4.i = 10;
	D4.i = 32;
	pE10->f = 16;
	pE11->d = 20;
	D4.i = 10;
	D4.i = 34;
	pE11->d = 17;
	pE12->ld = 20;
	D4.i = 10;
	D4.i = 36;
	pE12->ld = 18;
	pE1->c = 22;
	D5.uc = 11;
	D5.uc = 14;
	pE1->c = 7;
	pE2->sc = 22;
	D5.uc = 11;
	D5.uc = 16;
	pE2->sc = 8;
	pE3->s = 22;
	D5.uc = 11;
	D5.uc = 18;
	pE3->s = 9;
	pE4->i = 22;
	D5.uc = 11;
	D5.uc = 20;
	pE4->i = 10;
	pE5->uc = 22;
	D5.uc = 11;
	D5.uc = 22;
	pE5->uc = 11;
	pE6->us = 22;
	D5.uc = 11;
	D5.uc = 24;
	pE6->us = 12;
	pE7->ui = 22;
	D5.uc = 11;
	D5.uc = 26;
	pE7->ui = 13;
	pE8->l = 22;
	D5.uc = 11;
	D5.uc = 28;
	pE8->l = 14;
	pE9->ul = 22;
	D5.uc = 11;
	D5.uc = 30;
	pE9->ul = 15;
	pE10->f = 22;
	D5.uc = 11;
	D5.uc = 32;
	pE10->f = 16;
	pE11->d = 22;
	D5.uc = 11;
	D5.uc = 34;
	pE11->d = 17;
	pE12->ld = 22;
	D5.uc = 11;
	D5.uc = 36;
	pE12->ld = 18;
	pE1->c = 24;
	D6.us = 12;
	D6.us = 14;
	pE1->c = 7;
	pE2->sc = 24;
	D6.us = 12;
	D6.us = 16;
	pE2->sc = 8;
	pE3->s = 24;
	D6.us = 12;
	D6.us = 18;
	pE3->s = 9;
	pE4->i = 24;
	D6.us = 12;
	D6.us = 20;
	pE4->i = 10;
	pE5->uc = 24;
	D6.us = 12;
	D6.us = 22;
	pE5->uc = 11;
	pE6->us = 24;
	D6.us = 12;
	D6.us = 24;
	pE6->us = 12;
	pE7->ui = 24;
	D6.us = 12;
	D6.us = 26;
	pE7->ui = 13;
	pE8->l = 24;
	D6.us = 12;
	D6.us = 28;
	pE8->l = 14;
	pE9->ul = 24;
	D6.us = 12;
	D6.us = 30;
	pE9->ul = 15;
	pE10->f = 24;
	D6.us = 12;
	D6.us = 32;
	pE10->f = 16;
	pE11->d = 24;
	D6.us = 12;
	D6.us = 34;
	pE11->d = 17;
	pE12->ld = 24;
	D6.us = 12;
	D6.us = 36;
	pE12->ld = 18;
	pE1->c = 26;
	D7.ui = 13;
	D7.ui = 14;
	pE1->c = 7;
	pE2->sc = 26;
	D7.ui = 13;
	D7.ui = 16;
	pE2->sc = 8;
	pE3->s = 26;
	D7.ui = 13;
	D7.ui = 18;
	pE3->s = 9;
	pE4->i = 26;
	D7.ui = 13;
	D7.ui = 20;
	pE4->i = 10;
	pE5->uc = 26;
	D7.ui = 13;
	D7.ui = 22;
	pE5->uc = 11;
	pE6->us = 26;
	D7.ui = 13;
	D7.ui = 24;
	pE6->us = 12;
	pE7->ui = 26;
	D7.ui = 13;
	D7.ui = 26;
	pE7->ui = 13;
	pE8->l = 26;
	D7.ui = 13;
	D7.ui = 28;
	pE8->l = 14;
	pE9->ul = 26;
	D7.ui = 13;
	D7.ui = 30;
	pE9->ul = 15;
	pE10->f = 26;
	D7.ui = 13;
	D7.ui = 32;
	pE10->f = 16;
	pE11->d = 26;
	D7.ui = 13;
	D7.ui = 34;
	pE11->d = 17;
	pE12->ld = 26;
	D7.ui = 13;
	D7.ui = 36;
	pE12->ld = 18;
	pE1->c = 28;
	D8.l = 14;
	D8.l = 14;
	pE1->c = 7;
	pE2->sc = 28;
	D8.l = 14;
	D8.l = 16;
	pE2->sc = 8;
	pE3->s = 28;
	D8.l = 14;
	D8.l = 18;
	pE3->s = 9;
	pE4->i = 28;
	D8.l = 14;
	D8.l = 20;
	pE4->i = 10;
	pE5->uc = 28;
	D8.l = 14;
	D8.l = 22;
	pE5->uc = 11;
	pE6->us = 28;
	D8.l = 14;
	D8.l = 24;
	pE6->us = 12;
	pE7->ui = 28;
	D8.l = 14;
	D8.l = 26;
	pE7->ui = 13;
	pE8->l = 28;
	D8.l = 14;
	D8.l = 28;
	pE8->l = 14;
	pE9->ul = 28;
	D8.l = 14;
	D8.l = 30;
	pE9->ul = 15;
	pE10->f = 28;
	D8.l = 14;
	D8.l = 32;
	pE10->f = 16;
	pE11->d = 28;
	D8.l = 14;
	D8.l = 34;
	pE11->d = 17;
	pE12->ld = 28;
	D8.l = 14;
	D8.l = 36;
	pE12->ld = 18;
	pE1->c = 30;
	D9.ul = 15;
	D9.ul = 14;
	pE1->c = 7;
	pE2->sc = 30;
	D9.ul = 15;
	D9.ul = 16;
	pE2->sc = 8;
	pE3->s = 30;
	D9.ul = 15;
	D9.ul = 18;
	pE3->s = 9;
	pE4->i = 30;
	D9.ul = 15;
	D9.ul = 20;
	pE4->i = 10;
	pE5->uc = 30;
	D9.ul = 15;
	D9.ul = 22;
	pE5->uc = 11;
	pE6->us = 30;
	D9.ul = 15;
	D9.ul = 24;
	pE6->us = 12;
	pE7->ui = 30;
	D9.ul = 15;
	D9.ul = 26;
	pE7->ui = 13;
	pE8->l = 30;
	D9.ul = 15;
	D9.ul = 28;
	pE8->l = 14;
	pE9->ul = 30;
	D9.ul = 15;
	D9.ul = 30;
	pE9->ul = 15;
	pE10->f = 30;
	D9.ul = 15;
	D9.ul = 32;
	pE10->f = 16;
	pE11->d = 30;
	D9.ul = 15;
	D9.ul = 34;
	pE11->d = 17;
	pE12->ld = 30;
	D9.ul = 15;
	D9.ul = 36;
	pE12->ld = 18;
	pE1->c = 32;
	D10.f = 16;
	D10.f = 14;
	pE1->c = 7;
	pE2->sc = 32;
	D10.f = 16;
	D10.f = 16;
	pE2->sc = 8;
	pE3->s = 32;
	D10.f = 16;
	D10.f = 18;
	pE3->s = 9;
	pE4->i = 32;
	D10.f = 16;
	D10.f = 20;
	pE4->i = 10;
	pE5->uc = 32;
	D10.f = 16;
	D10.f = 22;
	pE5->uc = 11;
	pE6->us = 32;
	D10.f = 16;
	D10.f = 24;
	pE6->us = 12;
	pE7->ui = 32;
	D10.f = 16;
	D10.f = 26;
	pE7->ui = 13;
	pE8->l = 32;
	D10.f = 16;
	D10.f = 28;
	pE8->l = 14;
	pE9->ul = 32;
	D10.f = 16;
	D10.f = 30;
	pE9->ul = 15;
	pE10->f = 32;
	D10.f = 16;
	D10.f = 32;
	pE10->f = 16;
	pE11->d = 32;
	D10.f = 16;
	D10.f = 34;
	pE11->d = 17;
	pE12->ld = 32;
	D10.f = 16;
	D10.f = 36;
	pE12->ld = 18;
	pE1->c = 34;
	D11.d = 17;
	D11.d = 14;
	pE1->c = 7;
	pE2->sc = 34;
	D11.d = 17;
	D11.d = 16;
	pE2->sc = 8;
	pE3->s = 34;
	D11.d = 17;
	D11.d = 18;
	pE3->s = 9;
	pE4->i = 34;
	D11.d = 17;
	D11.d = 20;
	pE4->i = 10;
	pE5->uc = 34;
	D11.d = 17;
	D11.d = 22;
	pE5->uc = 11;
	pE6->us = 34;
	D11.d = 17;
	D11.d = 24;
	pE6->us = 12;
	pE7->ui = 34;
	D11.d = 17;
	D11.d = 26;
	pE7->ui = 13;
	pE8->l = 34;
	D11.d = 17;
	D11.d = 28;
	pE8->l = 14;
	pE9->ul = 34;
	D11.d = 17;
	D11.d = 30;
	pE9->ul = 15;
	pE10->f = 34;
	D11.d = 17;
	D11.d = 32;
	pE10->f = 16;
	pE11->d = 34;
	D11.d = 17;
	D11.d = 34;
	pE11->d = 17;
	pE12->ld = 34;
	D11.d = 17;
	D11.d = 36;
	pE12->ld = 18;
	pE1->c = 36;
	D12.ld = 18;
	D12.ld = 14;
	pE1->c = 7;
	pE2->sc = 36;
	D12.ld = 18;
	D12.ld = 16;
	pE2->sc = 8;
	pE3->s = 36;
	D12.ld = 18;
	D12.ld = 18;
	pE3->s = 9;
	pE4->i = 36;
	D12.ld = 18;
	D12.ld = 20;
	pE4->i = 10;
	pE5->uc = 36;
	D12.ld = 18;
	D12.ld = 22;
	pE5->uc = 11;
	pE6->us = 36;
	D12.ld = 18;
	D12.ld = 24;
	pE6->us = 12;
	pE7->ui = 36;
	D12.ld = 18;
	D12.ld = 26;
	pE7->ui = 13;
	pE8->l = 36;
	D12.ld = 18;
	D12.ld = 28;
	pE8->l = 14;
	pE9->ul = 36;
	D12.ld = 18;
	D12.ld = 30;
	pE9->ul = 15;
	pE10->f = 36;
	D12.ld = 18;
	D12.ld = 32;
	pE10->f = 16;
	pE11->d = 36;
	D12.ld = 18;
	D12.ld = 34;
	pE11->d = 17;
	pE12->ld = 36;
	D12.ld = 18;
	D12.ld = 36;
	pE12->ld = 18;
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\ge.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} G, *pG = &G;
	pG->c = 7;
	pG->sc = 8;
	pG->s = 9;
	pG->i = 10;
	pG->uc = 11;
	pG->us = 12;
	pG->ui = 13;
	pG->l = 14;
	pG->ul = 15;
	pG->f = 16;
	pG->d = 17;
	pG->ld = 18;
	{
	static struct H{
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		struct H *pH;
		} H, *ppH = &H;
	H.pH = &H;
	ppH->pH->c = 7;
	ppH->pH->sc = 8;
	ppH->pH->s = 9;
	ppH->pH->i = 10;
	ppH->pH->uc = 11;
	ppH->pH->us = 12;
	ppH->pH->ui = 13;
	ppH->pH->l = 14;
	ppH->pH->ul = 15;
	ppH->pH->f = 16;
	ppH->pH->d = 17;
	ppH->pH->ld = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\lsh.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} G, *pG = &G;
	pG->c = 7;
	pG->sc = 8;
	pG->s = 9;
	pG->i = 10;
	pG->uc = 11;
	pG->us = 12;
	pG->ui = 13;
	pG->l = 14;
	pG->ul = 15;
	pG->f = 16;
	pG->d = 17;
	pG->ld = 18;
	{
	static int x[12] = {0,1,2,3,4,5,6,7,8,9,10,11};
	auto CHAR Pc[12];
	int x_0 = 0;
	auto SCHAR Psc[12];
	int x_1 = 1;
	auto SHORT Ps[12];
	int x_2 = 2;
	auto INT Pi[12];
	int x_3 = 3;
	auto UCHAR Puc[12];
	int x_4 = 4;
	auto USHORT Pus[12];
	int x_5 = 5;
	auto UINT Pui[12];
	int x_6 = 6;
	auto LONG Pl[12];
	int x_7 = 7;
	auto ULONG Pul[12];
	int x_8 = 8;
	auto FLOAT Pf[12];
	int x_9 = 9;
	auto DOUBLE Pd[12];
	int x_10 = 10;
	auto LDOUBLE Pld[12];
	int x_11 = 11;
	Pc[x[x_0]] = 7;
	Psc[x[x_1]] = 8;
	Ps[x[x_2]] = 9;
	Pi[x[x_3]] = 10;
	Puc[x[x_4]] = 11;
	Pus[x[x_5]] = 12;
	Pui[x[x_6]] = 13;
	Pl[x[x_7]] = 14;
	Pul[x[x_8]] = 15;
	Pf[x[x_9]] = 16;
	Pd[x[x_10]] = 17;
	Pld[x[x_11]] = 18;
	{
	pG->c = 7;
	Pc[x[x_0]] = 1;

	break_here:

	Pc[x[x_0]] = 7;
	pG->c = 1;
	pG->c = 7;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->c = 1;
	pG->c = 7;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->c = 1;
	pG->c = 7;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->c = 1;
	pG->c = 7;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->c = 1;
	pG->c = 7;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->c = 1;
	pG->c = 7;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->c = 1;
	pG->c = 7;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->c = 1;
	pG->c = 7;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->c = 1;
	pG->sc = 8;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->sc = 1;
	pG->sc = 8;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->sc = 1;
	pG->sc = 8;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->sc = 1;
	pG->sc = 8;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->sc = 1;
	pG->sc = 8;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->sc = 1;
	pG->sc = 8;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->sc = 1;
	pG->sc = 8;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->sc = 1;
	pG->sc = 8;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->sc = 1;
	pG->sc = 8;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->sc = 1;
	pG->s = 9;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->s = 1;
	pG->s = 9;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->s = 1;
	pG->s = 9;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->s = 1;
	pG->s = 9;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->s = 1;
	pG->s = 9;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->s = 1;
	pG->s = 9;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->s = 1;
	pG->s = 9;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->s = 1;
	pG->s = 9;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->s = 1;
	pG->s = 9;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->s = 1;
	pG->i = 10;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->i = 1;
	pG->i = 10;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->i = 1;
	pG->i = 10;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->i = 1;
	pG->i = 10;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->i = 1;
	pG->i = 10;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->i = 1;
	pG->i = 10;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->i = 1;
	pG->i = 10;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->i = 1;
	pG->i = 10;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->i = 1;
	pG->i = 10;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->i = 1;
	pG->uc = 11;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->uc = 1;
	pG->uc = 11;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->uc = 1;
	pG->uc = 11;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->uc = 1;
	pG->uc = 11;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->uc = 1;
	pG->uc = 11;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->uc = 1;
	pG->uc = 11;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->uc = 1;
	pG->uc = 11;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->uc = 1;
	pG->uc = 11;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->uc = 1;
	pG->uc = 11;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->uc = 1;
	pG->us = 12;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->us = 1;
	pG->us = 12;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->us = 1;
	pG->us = 12;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->us = 1;
	pG->us = 12;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->us = 1;
	pG->us = 12;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->us = 1;
	pG->us = 12;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->us = 1;
	pG->us = 12;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->us = 1;
	pG->us = 12;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->us = 1;
	pG->us = 12;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->us = 1;
	pG->ui = 13;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->ui = 1;
	pG->ui = 13;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->ui = 1;
	pG->ui = 13;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->ui = 1;
	pG->ui = 13;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->ui = 1;
	pG->ui = 13;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->ui = 1;
	pG->ui = 13;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->ui = 1;
	pG->ui = 13;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->ui = 1;
	pG->ui = 13;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->ui = 1;
	pG->ui = 13;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->ui = 1;
	pG->l = 14;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->l = 1;
	pG->l = 14;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->l = 1;
	pG->l = 14;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->l = 1;
	pG->l = 14;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->l = 1;
	pG->l = 14;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->l = 1;
	pG->l = 14;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->l = 1;
	pG->l = 14;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->l = 1;
	pG->l = 14;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->l = 1;
	pG->l = 14;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->l = 1;
	pG->ul = 15;
	Pc[x[x_0]] = 1;
	Pc[x[x_0]] = 7;
	pG->ul = 1;
	pG->ul = 15;
	Psc[x[x_1]] = 1;
	Psc[x[x_1]] = 8;
	pG->ul = 1;
	pG->ul = 15;
	Ps[x[x_2]] = 1;
	Ps[x[x_2]] = 9;
	pG->ul = 1;
	pG->ul = 15;
	Pi[x[x_3]] = 1;
	Pi[x[x_3]] = 10;
	pG->ul = 1;
	pG->ul = 15;
	Puc[x[x_4]] = 1;
	Puc[x[x_4]] = 11;
	pG->ul = 1;
	pG->ul = 15;
	Pus[x[x_5]] = 1;
	Pus[x[x_5]] = 12;
	pG->ul = 1;
	pG->ul = 15;
	Pui[x[x_6]] = 1;
	Pui[x[x_6]] = 13;
	pG->ul = 1;
	pG->ul = 15;
	Pl[x[x_7]] = 1;
	Pl[x[x_7]] = 14;
	pG->ul = 1;
	pG->ul = 15;
	Pul[x[x_8]] = 1;
	Pul[x[x_8]] = 15;
	pG->ul = 1;
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\le.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} F;
	F.c = 7;
	F.sc = 8;
	F.s = 9;
	F.i = 10;
	F.uc = 11;
	F.us = 12;
	F.ui = 13;
	F.l = 14;
	F.ul = 15;
	F.f = 16;
	F.d = 17;
	F.ld = 18;
	{
	auto CHAR Ac = 7;
	auto SCHAR Asc = 8;
	auto SHORT As = 9;
	auto INT Ai = 10;
	auto UCHAR Auc = 11;
	auto USHORT Aus = 12;
	auto UINT Aui = 13;
	auto LONG Al = 14;
	auto ULONG Aul = 15;
	auto FLOAT Af = 16;
	auto DOUBLE Ad = 17;
	auto LDOUBLE Ald = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\mix.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "defs.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	static float f1;
	auto float * pf1;
	static long stlong1;
	static float f2;
	auto float * pf2;
	static long stlong2;
	static float f3;
	static float * pf3;
	auto long stlong3;
	static float f4;
	static float * pf4;
	static long stlong4;
	static double d1;
	auto double * pd1;
	static long stlong5;
	static double d2;
	static double * pd2;
	static long stlong6;
	auto double d3;
	static double * pd3;
	static long stlong7;
	static double d4;
	static double * pd4;
	auto long stlong8;

	f1 = fvalue(1.100000E+000);
	pf1 = &f1;
	stlong1 = lvalue(1L);
	f2 = fvalue(2.200000E+000);
	pf2 = &f2;
	stlong2 = lvalue(2L);
	f3 = fvalue(3.300000E+000);
	pf3 = &f3;
	stlong3 = lvalue(3L);
	f4 = fvalue(4.400000E+000);
	pf4 = &f4;
	stlong4 = lvalue(4L);
	d1 = dvalue(1.100000000000000E+000);
	pd1 = &d1;
	stlong5 = lvalue(5L);
	d2 = dvalue(2.200000000000000E+000);
	pd2 = &d2;
	stlong6 = lvalue(6L);
	d3 = dvalue(3.300000000000000E+000);
	pd3 = &d3;
	stlong7 = lvalue(7L);
	d4 = dvalue(4.400000000000000E+000);
	pd4 = &d4;
	stlong8 = lvalue(8L);

	break_here:
	return 0;
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\ne.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} F;
	F.c = 7;
	F.sc = 8;
	F.s = 9;
	F.i = 10;
	F.uc = 11;
	F.us = 12;
	F.ui = 13;
	F.l = 14;
	F.ul = 15;
	F.f = 16;
	F.d = 17;
	F.ld = 18;
	{
	auto CHAR Jc[12][12];
	int x_0 = 0;
	int y_0 = 0;
	auto SCHAR Jsc[12][12];
	int x_1 = 1;
	int y_1 = 1;
	auto SHORT Js[12][12];
	int x_2 = 2;
	int y_2 = 2;
	auto INT Ji[12][12];
	int x_3 = 3;
	int y_3 = 3;
	auto UCHAR Juc[12][12];
	int x_4 = 4;
	int y_4 = 4;
	auto USHORT Jus[12][12];
	int x_5 = 5;
	int y_5 = 5;
	auto UINT Jui[12][12];
	int x_6 = 6;
	int y_6 = 6;
	auto LONG Jl[12][12];
	int x_7 = 7;
	int y_7 = 7;
	auto ULONG Jul[12][12];
	int x_8 = 8;
	int y_8 = 8;
	auto FLOAT Jf[12][12];
	int x_9 = 9;
	int y_9 = 9;
	auto DOUBLE Jd[12][12];
	int x_10 = 10;
	int y_10 = 10;
	auto LDOUBLE Jld[12][12];
	int x_11 = 11;
	int y_11 = 11;
	Jc[x_0][y_0] = 7;
	Jsc[x_1][y_1] = 8;
	Js[x_2][y_2] = 9;
	Ji[x_3][y_3] = 10;
	Juc[x_4][y_4] = 11;
	Jus[x_5][y_5] = 12;
	Jui[x_6][y_6] = 13;
	Jl[x_7][y_7] = 14;
	Jul[x_8][y_8] = 15;
	Jf[x_9][y_9] = 16;
	Jd[x_10][y_10] = 17;
	Jld[x_11][y_11] = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\lsheq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	static struct H{
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		struct H *pH;
		} H, *ppH = &H;
	H.pH = &H;
	ppH->pH->c = 7;
	ppH->pH->sc = 8;
	ppH->pH->s = 9;
	ppH->pH->i = 10;
	ppH->pH->uc = 11;
	ppH->pH->us = 12;
	ppH->pH->ui = 13;
	ppH->pH->l = 14;
	ppH->pH->ul = 15;
	ppH->pH->f = 16;
	ppH->pH->d = 17;
	ppH->pH->ld = 18;
	{
	**ppCc = 7; ppH->pH->c = 1;
	**ppCc <<= ppH->pH->c;

	break_here:

	**ppCc = 7; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCc = 1;
	ppH->pH->c <<= **ppCc;
	ppH->pH->c = 7; **ppCc = 1;
	**ppCc = 7; ppH->pH->sc = 1;
	**ppCc <<= ppH->pH->sc;
	**ppCc = 7; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCc = 1;
	ppH->pH->sc <<= **ppCc;
	ppH->pH->sc = 8; **ppCc = 1;
	**ppCc = 7; ppH->pH->s = 1;
	**ppCc <<= ppH->pH->s;
	**ppCc = 7; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCc = 1;
	ppH->pH->s <<= **ppCc;
	ppH->pH->s = 9; **ppCc = 1;
	**ppCc = 7; ppH->pH->i = 1;
	**ppCc <<= ppH->pH->i;
	**ppCc = 7; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCc = 1;
	ppH->pH->i <<= **ppCc;
	ppH->pH->i = 10; **ppCc = 1;
	**ppCc = 7; ppH->pH->uc = 1;
	**ppCc <<= ppH->pH->uc;
	**ppCc = 7; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCc = 1;
	ppH->pH->uc <<= **ppCc;
	ppH->pH->uc = 11; **ppCc = 1;
	**ppCc = 7; ppH->pH->us = 1;
	**ppCc <<= ppH->pH->us;
	**ppCc = 7; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCc = 1;
	ppH->pH->us <<= **ppCc;
	ppH->pH->us = 12; **ppCc = 1;
	**ppCc = 7; ppH->pH->ui = 1;
	**ppCc <<= ppH->pH->ui;
	**ppCc = 7; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCc = 1;
	ppH->pH->ui <<= **ppCc;
	ppH->pH->ui = 13; **ppCc = 1;
	**ppCc = 7; ppH->pH->l = 1;
	**ppCc <<= ppH->pH->l;
	**ppCc = 7; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCc = 1;
	ppH->pH->l <<= **ppCc;
	ppH->pH->l = 14; **ppCc = 1;
	**ppCc = 7; ppH->pH->ul = 1;
	**ppCc <<= ppH->pH->ul;
	**ppCc = 7; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCc = 1;
	ppH->pH->ul <<= **ppCc;
	ppH->pH->ul = 15; **ppCc = 1;
	**ppCsc = 8; ppH->pH->c = 1;
	**ppCsc <<= ppH->pH->c;
	**ppCsc = 8; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCsc = 1;
	ppH->pH->c <<= **ppCsc;
	ppH->pH->c = 7; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->sc = 1;
	**ppCsc <<= ppH->pH->sc;
	**ppCsc = 8; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCsc = 1;
	ppH->pH->sc <<= **ppCsc;
	ppH->pH->sc = 8; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->s = 1;
	**ppCsc <<= ppH->pH->s;
	**ppCsc = 8; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCsc = 1;
	ppH->pH->s <<= **ppCsc;
	ppH->pH->s = 9; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->i = 1;
	**ppCsc <<= ppH->pH->i;
	**ppCsc = 8; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCsc = 1;
	ppH->pH->i <<= **ppCsc;
	ppH->pH->i = 10; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->uc = 1;
	**ppCsc <<= ppH->pH->uc;
	**ppCsc = 8; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCsc = 1;
	ppH->pH->uc <<= **ppCsc;
	ppH->pH->uc = 11; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->us = 1;
	**ppCsc <<= ppH->pH->us;
	**ppCsc = 8; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCsc = 1;
	ppH->pH->us <<= **ppCsc;
	ppH->pH->us = 12; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->ui = 1;
	**ppCsc <<= ppH->pH->ui;
	**ppCsc = 8; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCsc = 1;
	ppH->pH->ui <<= **ppCsc;
	ppH->pH->ui = 13; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->l = 1;
	**ppCsc <<= ppH->pH->l;
	**ppCsc = 8; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCsc = 1;
	ppH->pH->l <<= **ppCsc;
	ppH->pH->l = 14; **ppCsc = 1;
	**ppCsc = 8; ppH->pH->ul = 1;
	**ppCsc <<= ppH->pH->ul;
	**ppCsc = 8; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCsc = 1;
	ppH->pH->ul <<= **ppCsc;
	ppH->pH->ul = 15; **ppCsc = 1;
	**ppCs = 9; ppH->pH->c = 1;
	**ppCs <<= ppH->pH->c;
	**ppCs = 9; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCs = 1;
	ppH->pH->c <<= **ppCs;
	ppH->pH->c = 7; **ppCs = 1;
	**ppCs = 9; ppH->pH->sc = 1;
	**ppCs <<= ppH->pH->sc;
	**ppCs = 9; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCs = 1;
	ppH->pH->sc <<= **ppCs;
	ppH->pH->sc = 8; **ppCs = 1;
	**ppCs = 9; ppH->pH->s = 1;
	**ppCs <<= ppH->pH->s;
	**ppCs = 9; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCs = 1;
	ppH->pH->s <<= **ppCs;
	ppH->pH->s = 9; **ppCs = 1;
	**ppCs = 9; ppH->pH->i = 1;
	**ppCs <<= ppH->pH->i;
	**ppCs = 9; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCs = 1;
	ppH->pH->i <<= **ppCs;
	ppH->pH->i = 10; **ppCs = 1;
	**ppCs = 9; ppH->pH->uc = 1;
	**ppCs <<= ppH->pH->uc;
	**ppCs = 9; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCs = 1;
	ppH->pH->uc <<= **ppCs;
	ppH->pH->uc = 11; **ppCs = 1;
	**ppCs = 9; ppH->pH->us = 1;
	**ppCs <<= ppH->pH->us;
	**ppCs = 9; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCs = 1;
	ppH->pH->us <<= **ppCs;
	ppH->pH->us = 12; **ppCs = 1;
	**ppCs = 9; ppH->pH->ui = 1;
	**ppCs <<= ppH->pH->ui;
	**ppCs = 9; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCs = 1;
	ppH->pH->ui <<= **ppCs;
	ppH->pH->ui = 13; **ppCs = 1;
	**ppCs = 9; ppH->pH->l = 1;
	**ppCs <<= ppH->pH->l;
	**ppCs = 9; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCs = 1;
	ppH->pH->l <<= **ppCs;
	ppH->pH->l = 14; **ppCs = 1;
	**ppCs = 9; ppH->pH->ul = 1;
	**ppCs <<= ppH->pH->ul;
	**ppCs = 9; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCs = 1;
	ppH->pH->ul <<= **ppCs;
	ppH->pH->ul = 15; **ppCs = 1;
	**ppCi = 10; ppH->pH->c = 1;
	**ppCi <<= ppH->pH->c;
	**ppCi = 10; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCi = 1;
	ppH->pH->c <<= **ppCi;
	ppH->pH->c = 7; **ppCi = 1;
	**ppCi = 10; ppH->pH->sc = 1;
	**ppCi <<= ppH->pH->sc;
	**ppCi = 10; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCi = 1;
	ppH->pH->sc <<= **ppCi;
	ppH->pH->sc = 8; **ppCi = 1;
	**ppCi = 10; ppH->pH->s = 1;
	**ppCi <<= ppH->pH->s;
	**ppCi = 10; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCi = 1;
	ppH->pH->s <<= **ppCi;
	ppH->pH->s = 9; **ppCi = 1;
	**ppCi = 10; ppH->pH->i = 1;
	**ppCi <<= ppH->pH->i;
	**ppCi = 10; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCi = 1;
	ppH->pH->i <<= **ppCi;
	ppH->pH->i = 10; **ppCi = 1;
	**ppCi = 10; ppH->pH->uc = 1;
	**ppCi <<= ppH->pH->uc;
	**ppCi = 10; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCi = 1;
	ppH->pH->uc <<= **ppCi;
	ppH->pH->uc = 11; **ppCi = 1;
	**ppCi = 10; ppH->pH->us = 1;
	**ppCi <<= ppH->pH->us;
	**ppCi = 10; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCi = 1;
	ppH->pH->us <<= **ppCi;
	ppH->pH->us = 12; **ppCi = 1;
	**ppCi = 10; ppH->pH->ui = 1;
	**ppCi <<= ppH->pH->ui;
	**ppCi = 10; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCi = 1;
	ppH->pH->ui <<= **ppCi;
	ppH->pH->ui = 13; **ppCi = 1;
	**ppCi = 10; ppH->pH->l = 1;
	**ppCi <<= ppH->pH->l;
	**ppCi = 10; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCi = 1;
	ppH->pH->l <<= **ppCi;
	ppH->pH->l = 14; **ppCi = 1;
	**ppCi = 10; ppH->pH->ul = 1;
	**ppCi <<= ppH->pH->ul;
	**ppCi = 10; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCi = 1;
	ppH->pH->ul <<= **ppCi;
	ppH->pH->ul = 15; **ppCi = 1;
	**ppCuc = 11; ppH->pH->c = 1;
	**ppCuc <<= ppH->pH->c;
	**ppCuc = 11; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCuc = 1;
	ppH->pH->c <<= **ppCuc;
	ppH->pH->c = 7; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->sc = 1;
	**ppCuc <<= ppH->pH->sc;
	**ppCuc = 11; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCuc = 1;
	ppH->pH->sc <<= **ppCuc;
	ppH->pH->sc = 8; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->s = 1;
	**ppCuc <<= ppH->pH->s;
	**ppCuc = 11; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCuc = 1;
	ppH->pH->s <<= **ppCuc;
	ppH->pH->s = 9; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->i = 1;
	**ppCuc <<= ppH->pH->i;
	**ppCuc = 11; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCuc = 1;
	ppH->pH->i <<= **ppCuc;
	ppH->pH->i = 10; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->uc = 1;
	**ppCuc <<= ppH->pH->uc;
	**ppCuc = 11; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCuc = 1;
	ppH->pH->uc <<= **ppCuc;
	ppH->pH->uc = 11; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->us = 1;
	**ppCuc <<= ppH->pH->us;
	**ppCuc = 11; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCuc = 1;
	ppH->pH->us <<= **ppCuc;
	ppH->pH->us = 12; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->ui = 1;
	**ppCuc <<= ppH->pH->ui;
	**ppCuc = 11; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCuc = 1;
	ppH->pH->ui <<= **ppCuc;
	ppH->pH->ui = 13; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->l = 1;
	**ppCuc <<= ppH->pH->l;
	**ppCuc = 11; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCuc = 1;
	ppH->pH->l <<= **ppCuc;
	ppH->pH->l = 14; **ppCuc = 1;
	**ppCuc = 11; ppH->pH->ul = 1;
	**ppCuc <<= ppH->pH->ul;
	**ppCuc = 11; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCuc = 1;
	ppH->pH->ul <<= **ppCuc;
	ppH->pH->ul = 15; **ppCuc = 1;
	**ppCus = 12; ppH->pH->c = 1;
	**ppCus <<= ppH->pH->c;
	**ppCus = 12; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCus = 1;
	ppH->pH->c <<= **ppCus;
	ppH->pH->c = 7; **ppCus = 1;
	**ppCus = 12; ppH->pH->sc = 1;
	**ppCus <<= ppH->pH->sc;
	**ppCus = 12; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCus = 1;
	ppH->pH->sc <<= **ppCus;
	ppH->pH->sc = 8; **ppCus = 1;
	**ppCus = 12; ppH->pH->s = 1;
	**ppCus <<= ppH->pH->s;
	**ppCus = 12; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCus = 1;
	ppH->pH->s <<= **ppCus;
	ppH->pH->s = 9; **ppCus = 1;
	**ppCus = 12; ppH->pH->i = 1;
	**ppCus <<= ppH->pH->i;
	**ppCus = 12; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCus = 1;
	ppH->pH->i <<= **ppCus;
	ppH->pH->i = 10; **ppCus = 1;
	**ppCus = 12; ppH->pH->uc = 1;
	**ppCus <<= ppH->pH->uc;
	**ppCus = 12; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCus = 1;
	ppH->pH->uc <<= **ppCus;
	ppH->pH->uc = 11; **ppCus = 1;
	**ppCus = 12; ppH->pH->us = 1;
	**ppCus <<= ppH->pH->us;
	**ppCus = 12; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCus = 1;
	ppH->pH->us <<= **ppCus;
	ppH->pH->us = 12; **ppCus = 1;
	**ppCus = 12; ppH->pH->ui = 1;
	**ppCus <<= ppH->pH->ui;
	**ppCus = 12; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCus = 1;
	ppH->pH->ui <<= **ppCus;
	ppH->pH->ui = 13; **ppCus = 1;
	**ppCus = 12; ppH->pH->l = 1;
	**ppCus <<= ppH->pH->l;
	**ppCus = 12; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCus = 1;
	ppH->pH->l <<= **ppCus;
	ppH->pH->l = 14; **ppCus = 1;
	**ppCus = 12; ppH->pH->ul = 1;
	**ppCus <<= ppH->pH->ul;
	**ppCus = 12; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCus = 1;
	ppH->pH->ul <<= **ppCus;
	ppH->pH->ul = 15; **ppCus = 1;
	**ppCui = 13; ppH->pH->c = 1;
	**ppCui <<= ppH->pH->c;
	**ppCui = 13; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCui = 1;
	ppH->pH->c <<= **ppCui;
	ppH->pH->c = 7; **ppCui = 1;
	**ppCui = 13; ppH->pH->sc = 1;
	**ppCui <<= ppH->pH->sc;
	**ppCui = 13; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCui = 1;
	ppH->pH->sc <<= **ppCui;
	ppH->pH->sc = 8; **ppCui = 1;
	**ppCui = 13; ppH->pH->s = 1;
	**ppCui <<= ppH->pH->s;
	**ppCui = 13; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCui = 1;
	ppH->pH->s <<= **ppCui;
	ppH->pH->s = 9; **ppCui = 1;
	**ppCui = 13; ppH->pH->i = 1;
	**ppCui <<= ppH->pH->i;
	**ppCui = 13; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCui = 1;
	ppH->pH->i <<= **ppCui;
	ppH->pH->i = 10; **ppCui = 1;
	**ppCui = 13; ppH->pH->uc = 1;
	**ppCui <<= ppH->pH->uc;
	**ppCui = 13; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCui = 1;
	ppH->pH->uc <<= **ppCui;
	ppH->pH->uc = 11; **ppCui = 1;
	**ppCui = 13; ppH->pH->us = 1;
	**ppCui <<= ppH->pH->us;
	**ppCui = 13; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCui = 1;
	ppH->pH->us <<= **ppCui;
	ppH->pH->us = 12; **ppCui = 1;
	**ppCui = 13; ppH->pH->ui = 1;
	**ppCui <<= ppH->pH->ui;
	**ppCui = 13; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCui = 1;
	ppH->pH->ui <<= **ppCui;
	ppH->pH->ui = 13; **ppCui = 1;
	**ppCui = 13; ppH->pH->l = 1;
	**ppCui <<= ppH->pH->l;
	**ppCui = 13; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCui = 1;
	ppH->pH->l <<= **ppCui;
	ppH->pH->l = 14; **ppCui = 1;
	**ppCui = 13; ppH->pH->ul = 1;
	**ppCui <<= ppH->pH->ul;
	**ppCui = 13; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCui = 1;
	ppH->pH->ul <<= **ppCui;
	ppH->pH->ul = 15; **ppCui = 1;
	**ppCl = 14; ppH->pH->c = 1;
	**ppCl <<= ppH->pH->c;
	**ppCl = 14; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCl = 1;
	ppH->pH->c <<= **ppCl;
	ppH->pH->c = 7; **ppCl = 1;
	**ppCl = 14; ppH->pH->sc = 1;
	**ppCl <<= ppH->pH->sc;
	**ppCl = 14; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCl = 1;
	ppH->pH->sc <<= **ppCl;
	ppH->pH->sc = 8; **ppCl = 1;
	**ppCl = 14; ppH->pH->s = 1;
	**ppCl <<= ppH->pH->s;
	**ppCl = 14; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCl = 1;
	ppH->pH->s <<= **ppCl;
	ppH->pH->s = 9; **ppCl = 1;
	**ppCl = 14; ppH->pH->i = 1;
	**ppCl <<= ppH->pH->i;
	**ppCl = 14; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCl = 1;
	ppH->pH->i <<= **ppCl;
	ppH->pH->i = 10; **ppCl = 1;
	**ppCl = 14; ppH->pH->uc = 1;
	**ppCl <<= ppH->pH->uc;
	**ppCl = 14; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCl = 1;
	ppH->pH->uc <<= **ppCl;
	ppH->pH->uc = 11; **ppCl = 1;
	**ppCl = 14; ppH->pH->us = 1;
	**ppCl <<= ppH->pH->us;
	**ppCl = 14; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCl = 1;
	ppH->pH->us <<= **ppCl;
	ppH->pH->us = 12; **ppCl = 1;
	**ppCl = 14; ppH->pH->ui = 1;
	**ppCl <<= ppH->pH->ui;
	**ppCl = 14; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCl = 1;
	ppH->pH->ui <<= **ppCl;
	ppH->pH->ui = 13; **ppCl = 1;
	**ppCl = 14; ppH->pH->l = 1;
	**ppCl <<= ppH->pH->l;
	**ppCl = 14; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCl = 1;
	ppH->pH->l <<= **ppCl;
	ppH->pH->l = 14; **ppCl = 1;
	**ppCl = 14; ppH->pH->ul = 1;
	**ppCl <<= ppH->pH->ul;
	**ppCl = 14; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCl = 1;
	ppH->pH->ul <<= **ppCl;
	ppH->pH->ul = 15; **ppCl = 1;
	**ppCul = 15; ppH->pH->c = 1;
	**ppCul <<= ppH->pH->c;
	**ppCul = 15; ppH->pH->c = 1;
	ppH->pH->c = 7; **ppCul = 1;
	ppH->pH->c <<= **ppCul;
	ppH->pH->c = 7; **ppCul = 1;
	**ppCul = 15; ppH->pH->sc = 1;
	**ppCul <<= ppH->pH->sc;
	**ppCul = 15; ppH->pH->sc = 1;
	ppH->pH->sc = 8; **ppCul = 1;
	ppH->pH->sc <<= **ppCul;
	ppH->pH->sc = 8; **ppCul = 1;
	**ppCul = 15; ppH->pH->s = 1;
	**ppCul <<= ppH->pH->s;
	**ppCul = 15; ppH->pH->s = 1;
	ppH->pH->s = 9; **ppCul = 1;
	ppH->pH->s <<= **ppCul;
	ppH->pH->s = 9; **ppCul = 1;
	**ppCul = 15; ppH->pH->i = 1;
	**ppCul <<= ppH->pH->i;
	**ppCul = 15; ppH->pH->i = 1;
	ppH->pH->i = 10; **ppCul = 1;
	ppH->pH->i <<= **ppCul;
	ppH->pH->i = 10; **ppCul = 1;
	**ppCul = 15; ppH->pH->uc = 1;
	**ppCul <<= ppH->pH->uc;
	**ppCul = 15; ppH->pH->uc = 1;
	ppH->pH->uc = 11; **ppCul = 1;
	ppH->pH->uc <<= **ppCul;
	ppH->pH->uc = 11; **ppCul = 1;
	**ppCul = 15; ppH->pH->us = 1;
	**ppCul <<= ppH->pH->us;
	**ppCul = 15; ppH->pH->us = 1;
	ppH->pH->us = 12; **ppCul = 1;
	ppH->pH->us <<= **ppCul;
	ppH->pH->us = 12; **ppCul = 1;
	**ppCul = 15; ppH->pH->ui = 1;
	**ppCul <<= ppH->pH->ui;
	**ppCul = 15; ppH->pH->ui = 1;
	ppH->pH->ui = 13; **ppCul = 1;
	ppH->pH->ui <<= **ppCul;
	ppH->pH->ui = 13; **ppCul = 1;
	**ppCul = 15; ppH->pH->l = 1;
	**ppCul <<= ppH->pH->l;
	**ppCul = 15; ppH->pH->l = 1;
	ppH->pH->l = 14; **ppCul = 1;
	ppH->pH->l <<= **ppCul;
	ppH->pH->l = 14; **ppCul = 1;
	**ppCul = 15; ppH->pH->ul = 1;
	**ppCul <<= ppH->pH->ul;
	**ppCul = 15; ppH->pH->ul = 1;
	ppH->pH->ul = 15; **ppCul = 1;
	ppH->pH->ul <<= **ppCul;
	ppH->pH->ul = 15; **ppCul = 1;
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\minus.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Bc = 7;
	auto CHAR *pBc = &Bc;
	auto SCHAR Bsc = 8;
	auto SCHAR *pBsc = &Bsc;
	auto SHORT Bs = 9;
	auto SHORT *pBs = &Bs;
	auto INT Bi = 10;
	auto INT *pBi = &Bi;
	auto UCHAR Buc = 11;
	auto UCHAR *pBuc = &Buc;
	auto USHORT Bus = 12;
	auto USHORT *pBus = &Bus;
	auto UINT Bui = 13;
	auto UINT *pBui = &Bui;
	auto LONG Bl = 14;
	auto LONG *pBl = &Bl;
	auto ULONG Bul = 15;
	auto ULONG *pBul = &Bul;
	auto FLOAT Bf = 16;
	auto FLOAT *pBf = &Bf;
	auto DOUBLE Bd = 17;
	auto DOUBLE *pBd = &Bd;
	auto LDOUBLE Bld = 18;
	auto LDOUBLE *pBld = &Bld;
	{
	auto struct {
		UINT b1: 1;
		UINT b2: 2;
		UINT b3: 3;
		UINT b4: 4;
		UINT b5: 5;
		UINT b6: 6;
		UINT b7: 7;
		UINT b8: 5;
		UINT b9: 4;
		UINT b10: 3;
		UINT b11: 2;
		UINT b12: 1;
		} K;
	K.b1 = 1;
	K.b2 = 2;
	K.b3 = 3;
	K.b4 = 4;
	K.b5 = 5;
	K.b6 = 6;
	K.b7 = 7;
	K.b8 = 5;
	K.b9 = 4;
	K.b10 = 3;
	K.b11 = 2;
	K.b12 = 1;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\m.h ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of this suite corresponds to official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

CHAR M_c = 0;
CHAR Mc(){ int i; if (M_c){i=M_c;M_c=0;} else i=7; return (CHAR)i;}
SCHAR M_sc = 0;
SCHAR Msc(){ int i; if (M_sc){i=M_sc;M_sc=0;} else i=8; return (SCHAR)i;}
SHORT M_s = 0;
SHORT Ms(){ int i; if (M_s){i=M_s;M_s=0;} else i=9; return (SHORT)i;}
INT M_i = 0;
INT Mi(){ int i; if (M_i){i=M_i;M_i=0;} else i=10; return (INT)i;}
UCHAR M_uc = 0;
UCHAR Muc(){ int i; if (M_uc){i=M_uc;M_uc=0;} else i=11; return (UCHAR)i;}
USHORT M_us = 0;
USHORT Mus(){ int i; if (M_us){i=M_us;M_us=0;} else i=12; return (USHORT)i;}
UINT M_ui = 0;
UINT Mui(){ int i; if (M_ui){i=M_ui;M_ui=0;} else i=13; return (UINT)i;}
LONG M_l = 0;
LONG Ml(){ int i; if (M_l){i=M_l;M_l=0;} else i=14; return (LONG)i;}
ULONG M_ul = 0;
ULONG Mul(){ int i; if (M_ul){i=M_ul;M_ul=0;} else i=15; return (ULONG)i;}
FLOAT M_f = 0;
FLOAT Mf(){ int i; if (M_f){i=M_f;M_f=0;} else i=16; return (FLOAT)i;}
DOUBLE M_d = 0;
DOUBLE Md(){ int i; if (M_d){i=M_d;M_d=0;} else i=17; return (DOUBLE)i;}
LDOUBLE M_ld = 0;
LDOUBLE Mld(){ int i; if (M_ld){i=M_ld;M_ld=0;} else i=18; return (LDOUBLE)i;}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\n.h ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of this suite corresponds to official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

CHAR *Nc(){ static CHAR i = 7; return &i;}
SCHAR *Nsc(){ static SCHAR i = 8; return &i;}
SHORT *Ns(){ static SHORT i = 9; return &i;}
INT *Ni(){ static INT i = 10; return &i;}
UCHAR *Nuc(){ static UCHAR i = 11; return &i;}
USHORT *Nus(){ static USHORT i = 12; return &i;}
UINT *Nui(){ static UINT i = 13; return &i;}
LONG *Nl(){ static LONG i = 14; return &i;}
ULONG *Nul(){ static ULONG i = 15; return &i;}
FLOAT *Nf(){ static FLOAT i = 16; return &i;}
DOUBLE *Nd(){ static DOUBLE i = 17; return &i;}
LDOUBLE *Nld(){ static LDOUBLE i = 18; return &i;}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\not.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} D;
	auto D D1;
	auto D D2;
	auto D D3;
	auto D D4;
	auto D D5;
	auto D D6;
	auto D D7;
	auto D D8;
	auto D D9;
	auto D D10;
	auto D D11;
	auto D D12;
	D1.c = 7;
	D2.sc = 8;
	D3.s = 9;
	D4.i = 10;
	D5.uc = 11;
	D6.us = 12;
	D7.ui = 13;
	D8.l = 14;
	D9.ul = 15;
	D10.f = 16;
	D11.d = 17;
	D12.ld = 18;
	{
	static int x[12] = {0,1,2,3,4,5,6,7,8,9,10,11};
	auto CHAR Pc[12];
	int x_0 = 0;
	auto SCHAR Psc[12];
	int x_1 = 1;
	auto SHORT Ps[12];
	int x_2 = 2;
	auto INT Pi[12];
	int x_3 = 3;
	auto UCHAR Puc[12];
	int x_4 = 4;
	auto USHORT Pus[12];
	int x_5 = 5;
	auto UINT Pui[12];
	int x_6 = 6;
	auto LONG Pl[12];
	int x_7 = 7;
	auto ULONG Pul[12];
	int x_8 = 8;
	auto FLOAT Pf[12];
	int x_9 = 9;
	auto DOUBLE Pd[12];
	int x_10 = 10;
	auto LDOUBLE Pld[12];
	int x_11 = 11;
	Pc[x[x_0]] = 7;
	Psc[x[x_1]] = 8;
	Ps[x[x_2]] = 9;
	Pi[x[x_3]] = 10;
	Puc[x[x_4]] = 11;
	Pus[x[x_5]] = 12;
	Pui[x[x_6]] = 13;
	Pl[x[x_7]] = 14;
	Pul[x[x_8]] = 15;
	Pf[x[x_9]] = 16;
	Pd[x[x_10]] = 17;
	Pld[x[x_11]] = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\o.h ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of this suite corresponds to official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

CHAR O_c = 0;
SCHAR O_sc = 0;
SHORT O_s = 0;
INT O_i = 0;
UCHAR O_uc = 0;
USHORT O_us = 0;
UINT O_ui = 0;
LONG O_l = 0;
ULONG O_ul = 0;
FLOAT O_f = 0;
DOUBLE O_d = 0;
LDOUBLE O_ld = 0;

	struct XX {
		CHAR c;
		SCHAR sc;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		LDOUBLE ld;
		};
	static struct XX x1;
	static struct XX x2 = {
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	}; 
struct XX Oc() { struct XX x1; x1=x2; if (O_c)x1.c=O_c; O_c=0; return(x1);}
struct XX Osc() { struct XX x1; x1=x2; if (O_sc)x1.sc=O_sc; O_sc=0; return(x1);}
struct XX Os() { struct XX x1; x1=x2; if (O_s)x1.s=O_s; O_s=0; return(x1);}
struct XX Oi() { struct XX x1; x1=x2; if (O_i)x1.i=O_i; O_i=0; return(x1);}
struct XX Ouc() { struct XX x1; x1=x2; if (O_uc)x1.uc=O_uc; O_uc=0; return(x1);}
struct XX Ous() { struct XX x1; x1=x2; if (O_us)x1.us=O_us; O_us=0; return(x1);}
struct XX Oui() { struct XX x1; x1=x2; if (O_ui)x1.ui=O_ui; O_ui=0; return(x1);}
struct XX Ol() { struct XX x1; x1=x2; if (O_l)x1.l=O_l; O_l=0; return(x1);}
struct XX Oul() { struct XX x1; x1=x2; if (O_ul)x1.ul=O_ul; O_ul=0; return(x1);}
struct XX Of() { struct XX x1; x1=x2; if (O_f)x1.f=O_f; O_f=0; return(x1);}
struct XX Od() { struct XX x1; x1=x2; if (O_d)x1.d=O_d; O_d=0; return(x1);}
struct XX Old() { struct XX x1; x1=x2; if (O_ld)x1.ld=O_ld; O_ld=0; return(x1);}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\orelse.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto CHAR Ac = 7;
	auto SCHAR Asc = 8;
	auto SHORT As = 9;
	auto INT Ai = 10;
	auto UCHAR Auc = 11;
	auto USHORT Aus = 12;
	auto UINT Aui = 13;
	auto LONG Al = 14;
	auto ULONG Aul = 15;
	auto FLOAT Af = 16;
	auto DOUBLE Ad = 17;
	auto LDOUBLE Ald = 18;
	{
	auto struct {
		UINT b1: 1;
		UINT b2: 2;
		UINT b3: 3;
		UINT b4: 4;
		UINT b5: 5;
		UINT b6: 6;
		UINT b7: 7;
		UINT b8: 5;
		UINT b9: 4;
		UINT b10: 3;
		UINT b11: 2;
		UINT b12: 1;
		} L, *pL = &L;
	pL->b1 = 1;
	pL->b2 = 2;
	pL->b3 = 3;
	pL->b4 = 4;
	pL->b5 = 5;
	pL->b6 = 6;
	pL->b7 = 7;
	pL->b8 = 5;
	pL->b9 = 4;
	pL->b10 = 3;
	pL->b11 = 2;
	pL->b12 = 1;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\or.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Ic[12];
	int x_0 = 0;
	auto SCHAR Isc[12];
	int x_1 = 1;
	auto SHORT Is[12];
	int x_2 = 2;
	auto INT Ii[12];
	int x_3 = 3;
	auto UCHAR Iuc[12];
	int x_4 = 4;
	auto USHORT Ius[12];
	int x_5 = 5;
	auto UINT Iui[12];
	int x_6 = 6;
	auto LONG Il[12];
	int x_7 = 7;
	auto ULONG Iul[12];
	int x_8 = 8;
	auto FLOAT If[12];
	int x_9 = 9;
	auto DOUBLE Id[12];
	int x_10 = 10;
	auto LDOUBLE Ild[12];
	int x_11 = 11;
	Ic[x_0] = 7;
	Isc[x_1] = 8;
	Is[x_2] = 9;
	Ii[x_3] = 10;
	Iuc[x_4] = 11;
	Ius[x_5] = 12;
	Iui[x_6] = 13;
	Il[x_7] = 14;
	Iul[x_8] = 15;
	If[x_9] = 16;
	Id[x_10] = 17;
	Ild[x_11] = 18;
	{
	static int x[12] = {0,1,2,3,4,5,6,7,8,9,10,11};
	auto CHAR Pc[12];
	int x_0 = 0;
	auto SCHAR Psc[12];
	int x_1 = 1;
	auto SHORT Ps[12];
	int x_2 = 2;
	auto INT Pi[12];
	int x_3 = 3;
	auto UCHAR Puc[12];
	int x_4 = 4;
	auto USHORT Pus[12];
	int x_5 = 5;
	auto UINT Pui[12];
	int x_6 = 6;
	auto LONG Pl[12];
	int x_7 = 7;
	auto ULONG Pul[12];
	int x_8 = 8;
	auto FLOAT Pf[12];
	int x_9 = 9;
	auto DOUBLE Pd[12];
	int x_10 = 10;
	auto LDOUBLE Pld[12];
	int x_11 = 11;
	Pc[x[x_0]] = 7;
	Psc[x[x_1]] = 8;
	Ps[x[x_2]] = 9;
	Pi[x[x_3]] = 10;
	Puc[x[x_4]] = 11;
	Pus[x[x_5]] = 12;
	Pui[x[x_6]] = 13;
	Pl[x[x_7]] = 14;
	Pul[x[x_8]] = 15;
	Pf[x[x_9]] = 16;
	Pd[x[x_10]] = 17;
	Pld[x[x_11]] = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\oreq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} D;
	auto D D1;
	auto D D2;
	auto D D3;
	auto D D4;
	auto D D5;
	auto D D6;
	auto D D7;
	auto D D8;
	auto D D9;
	auto D D10;
	auto D D11;
	auto D D12;
	D1.c = 7;
	D2.sc = 8;
	D3.s = 9;
	D4.i = 10;
	D5.uc = 11;
	D6.us = 12;
	D7.ui = 13;
	D8.l = 14;
	D9.ul = 15;
	D10.f = 16;
	D11.d = 17;
	D12.ld = 18;
	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} E;
	auto E E1, *pE1 = &E1;
	auto E E2, *pE2 = &E2;
	auto E E3, *pE3 = &E3;
	auto E E4, *pE4 = &E4;
	auto E E5, *pE5 = &E5;
	auto E E6, *pE6 = &E6;
	auto E E7, *pE7 = &E7;
	auto E E8, *pE8 = &E8;
	auto E E9, *pE9 = &E9;
	auto E E10, *pE10 = &E10;
	auto E E11, *pE11 = &E11;
	auto E E12, *pE12 = &E12;
	pE1->c = 7;
	pE2->sc = 8;
	pE3->s = 9;
	pE4->i = 10;
	pE5->uc = 11;
	pE6->us = 12;
	pE7->ui = 13;
	pE8->l = 14;
	pE9->ul = 15;
	pE10->f = 16;
	pE11->d = 17;
	pE12->ld = 18;
	{
	D1.c = 7; pE1->c = 7;
	D1.c |= pE1->c;

	break_here:

	D1.c = 7;
	pE1->c = 7; D1.c = 7;
	pE1->c |= D1.c;
	pE1->c = 7;
	D1.c = 7; pE2->sc = 8;
	D1.c |= pE2->sc;
	D1.c = 7;
	pE2->sc = 8; D1.c = 7;
	pE2->sc |= D1.c;
	pE2->sc = 8;
	D1.c = 7; pE3->s = 9;
	D1.c |= pE3->s;
	D1.c = 7;
	pE3->s = 9; D1.c = 7;
	pE3->s |= D1.c;
	pE3->s = 9;
	D1.c = 7; pE4->i = 10;
	D1.c |= pE4->i;
	D1.c = 7;
	pE4->i = 10; D1.c = 7;
	pE4->i |= D1.c;
	pE4->i = 10;
	D1.c = 7; pE5->uc = 11;
	D1.c |= pE5->uc;
	D1.c = 7;
	pE5->uc = 11; D1.c = 7;
	pE5->uc |= D1.c;
	pE5->uc = 11;
	D1.c = 7; pE6->us = 12;
	D1.c |= pE6->us;
	D1.c = 7;
	pE6->us = 12; D1.c = 7;
	pE6->us |= D1.c;
	pE6->us = 12;
	D1.c = 7; pE7->ui = 13;
	D1.c |= pE7->ui;
	D1.c = 7;
	pE7->ui = 13; D1.c = 7;
	pE7->ui |= D1.c;
	pE7->ui = 13;
	D1.c = 7; pE8->l = 14;
	D1.c |= pE8->l;
	D1.c = 7;
	pE8->l = 14; D1.c = 7;
	pE8->l |= D1.c;
	pE8->l = 14;
	D1.c = 7; pE9->ul = 15;
	D1.c |= pE9->ul;
	D1.c = 7;
	pE9->ul = 15; D1.c = 7;
	pE9->ul |= D1.c;
	pE9->ul = 15;
	D2.sc = 8; pE1->c = 7;
	D2.sc |= pE1->c;
	D2.sc = 8;
	pE1->c = 7; D2.sc = 8;
	pE1->c |= D2.sc;
	pE1->c = 7;
	D2.sc = 8; pE2->sc = 8;
	D2.sc |= pE2->sc;
	D2.sc = 8;
	pE2->sc = 8; D2.sc = 8;
	pE2->sc |= D2.sc;
	pE2->sc = 8;
	D2.sc = 8; pE3->s = 9;
	D2.sc |= pE3->s;
	D2.sc = 8;
	pE3->s = 9; D2.sc = 8;
	pE3->s |= D2.sc;
	pE3->s = 9;
	D2.sc = 8; pE4->i = 10;
	D2.sc |= pE4->i;
	D2.sc = 8;
	pE4->i = 10; D2.sc = 8;
	pE4->i |= D2.sc;
	pE4->i = 10;
	D2.sc = 8; pE5->uc = 11;
	D2.sc |= pE5->uc;
	D2.sc = 8;
	pE5->uc = 11; D2.sc = 8;
	pE5->uc |= D2.sc;
	pE5->uc = 11;
	D2.sc = 8; pE6->us = 12;
	D2.sc |= pE6->us;
	D2.sc = 8;
	pE6->us = 12; D2.sc = 8;
	pE6->us |= D2.sc;
	pE6->us = 12;
	D2.sc = 8; pE7->ui = 13;
	D2.sc |= pE7->ui;
	D2.sc = 8;
	pE7->ui = 13; D2.sc = 8;
	pE7->ui |= D2.sc;
	pE7->ui = 13;
	D2.sc = 8; pE8->l = 14;
	D2.sc |= pE8->l;
	D2.sc = 8;
	pE8->l = 14; D2.sc = 8;
	pE8->l |= D2.sc;
	pE8->l = 14;
	D2.sc = 8; pE9->ul = 15;
	D2.sc |= pE9->ul;
	D2.sc = 8;
	pE9->ul = 15; D2.sc = 8;
	pE9->ul |= D2.sc;
	pE9->ul = 15;
	D3.s = 9; pE1->c = 7;
	D3.s |= pE1->c;
	D3.s = 9;
	pE1->c = 7; D3.s = 9;
	pE1->c |= D3.s;
	pE1->c = 7;
	D3.s = 9; pE2->sc = 8;
	D3.s |= pE2->sc;
	D3.s = 9;
	pE2->sc = 8; D3.s = 9;
	pE2->sc |= D3.s;
	pE2->sc = 8;
	D3.s = 9; pE3->s = 9;
	D3.s |= pE3->s;
	D3.s = 9;
	pE3->s = 9; D3.s = 9;
	pE3->s |= D3.s;
	pE3->s = 9;
	D3.s = 9; pE4->i = 10;
	D3.s |= pE4->i;
	D3.s = 9;
	pE4->i = 10; D3.s = 9;
	pE4->i |= D3.s;
	pE4->i = 10;
	D3.s = 9; pE5->uc = 11;
	D3.s |= pE5->uc;
	D3.s = 9;
	pE5->uc = 11; D3.s = 9;
	pE5->uc |= D3.s;
	pE5->uc = 11;
	D3.s = 9; pE6->us = 12;
	D3.s |= pE6->us;
	D3.s = 9;
	pE6->us = 12; D3.s = 9;
	pE6->us |= D3.s;
	pE6->us = 12;
	D3.s = 9; pE7->ui = 13;
	D3.s |= pE7->ui;
	D3.s = 9;
	pE7->ui = 13; D3.s = 9;
	pE7->ui |= D3.s;
	pE7->ui = 13;
	D3.s = 9; pE8->l = 14;
	D3.s |= pE8->l;
	D3.s = 9;
	pE8->l = 14; D3.s = 9;
	pE8->l |= D3.s;
	pE8->l = 14;
	D3.s = 9; pE9->ul = 15;
	D3.s |= pE9->ul;
	D3.s = 9;
	pE9->ul = 15; D3.s = 9;
	pE9->ul |= D3.s;
	pE9->ul = 15;
	D4.i = 10; pE1->c = 7;
	D4.i |= pE1->c;
	D4.i = 10;
	pE1->c = 7; D4.i = 10;
	pE1->c |= D4.i;
	pE1->c = 7;
	D4.i = 10; pE2->sc = 8;
	D4.i |= pE2->sc;
	D4.i = 10;
	pE2->sc = 8; D4.i = 10;
	pE2->sc |= D4.i;
	pE2->sc = 8;
	D4.i = 10; pE3->s = 9;
	D4.i |= pE3->s;
	D4.i = 10;
	pE3->s = 9; D4.i = 10;
	pE3->s |= D4.i;
	pE3->s = 9;
	D4.i = 10; pE4->i = 10;
	D4.i |= pE4->i;
	D4.i = 10;
	pE4->i = 10; D4.i = 10;
	pE4->i |= D4.i;
	pE4->i = 10;
	D4.i = 10; pE5->uc = 11;
	D4.i |= pE5->uc;
	D4.i = 10;
	pE5->uc = 11; D4.i = 10;
	pE5->uc |= D4.i;
	pE5->uc = 11;
	D4.i = 10; pE6->us = 12;
	D4.i |= pE6->us;
	D4.i = 10;
	pE6->us = 12; D4.i = 10;
	pE6->us |= D4.i;
	pE6->us = 12;
	D4.i = 10; pE7->ui = 13;
	D4.i |= pE7->ui;
	D4.i = 10;
	pE7->ui = 13; D4.i = 10;
	pE7->ui |= D4.i;
	pE7->ui = 13;
	D4.i = 10; pE8->l = 14;
	D4.i |= pE8->l;
	D4.i = 10;
	pE8->l = 14; D4.i = 10;
	pE8->l |= D4.i;
	pE8->l = 14;
	D4.i = 10; pE9->ul = 15;
	D4.i |= pE9->ul;
	D4.i = 10;
	pE9->ul = 15; D4.i = 10;
	pE9->ul |= D4.i;
	pE9->ul = 15;
	D5.uc = 11; pE1->c = 7;
	D5.uc |= pE1->c;
	D5.uc = 11;
	pE1->c = 7; D5.uc = 11;
	pE1->c |= D5.uc;
	pE1->c = 7;
	D5.uc = 11; pE2->sc = 8;
	D5.uc |= pE2->sc;
	D5.uc = 11;
	pE2->sc = 8; D5.uc = 11;
	pE2->sc |= D5.uc;
	pE2->sc = 8;
	D5.uc = 11; pE3->s = 9;
	D5.uc |= pE3->s;
	D5.uc = 11;
	pE3->s = 9; D5.uc = 11;
	pE3->s |= D5.uc;
	pE3->s = 9;
	D5.uc = 11; pE4->i = 10;
	D5.uc |= pE4->i;
	D5.uc = 11;
	pE4->i = 10; D5.uc = 11;
	pE4->i |= D5.uc;
	pE4->i = 10;
	D5.uc = 11; pE5->uc = 11;
	D5.uc |= pE5->uc;
	D5.uc = 11;
	pE5->uc = 11; D5.uc = 11;
	pE5->uc |= D5.uc;
	pE5->uc = 11;
	D5.uc = 11; pE6->us = 12;
	D5.uc |= pE6->us;
	D5.uc = 11;
	pE6->us = 12; D5.uc = 11;
	pE6->us |= D5.uc;
	pE6->us = 12;
	D5.uc = 11; pE7->ui = 13;
	D5.uc |= pE7->ui;
	D5.uc = 11;
	pE7->ui = 13; D5.uc = 11;
	pE7->ui |= D5.uc;
	pE7->ui = 13;
	D5.uc = 11; pE8->l = 14;
	D5.uc |= pE8->l;
	D5.uc = 11;
	pE8->l = 14; D5.uc = 11;
	pE8->l |= D5.uc;
	pE8->l = 14;
	D5.uc = 11; pE9->ul = 15;
	D5.uc |= pE9->ul;
	D5.uc = 11;
	pE9->ul = 15; D5.uc = 11;
	pE9->ul |= D5.uc;
	pE9->ul = 15;
	D6.us = 12; pE1->c = 7;
	D6.us |= pE1->c;
	D6.us = 12;
	pE1->c = 7; D6.us = 12;
	pE1->c |= D6.us;
	pE1->c = 7;
	D6.us = 12; pE2->sc = 8;
	D6.us |= pE2->sc;
	D6.us = 12;
	pE2->sc = 8; D6.us = 12;
	pE2->sc |= D6.us;
	pE2->sc = 8;
	D6.us = 12; pE3->s = 9;
	D6.us |= pE3->s;
	D6.us = 12;
	pE3->s = 9; D6.us = 12;
	pE3->s |= D6.us;
	pE3->s = 9;
	D6.us = 12; pE4->i = 10;
	D6.us |= pE4->i;
	D6.us = 12;
	pE4->i = 10; D6.us = 12;
	pE4->i |= D6.us;
	pE4->i = 10;
	D6.us = 12; pE5->uc = 11;
	D6.us |= pE5->uc;
	D6.us = 12;
	pE5->uc = 11; D6.us = 12;
	pE5->uc |= D6.us;
	pE5->uc = 11;
	D6.us = 12; pE6->us = 12;
	D6.us |= pE6->us;
	D6.us = 12;
	pE6->us = 12; D6.us = 12;
	pE6->us |= D6.us;
	pE6->us = 12;
	D6.us = 12; pE7->ui = 13;
	D6.us |= pE7->ui;
	D6.us = 12;
	pE7->ui = 13; D6.us = 12;
	pE7->ui |= D6.us;
	pE7->ui = 13;
	D6.us = 12; pE8->l = 14;
	D6.us |= pE8->l;
	D6.us = 12;
	pE8->l = 14; D6.us = 12;
	pE8->l |= D6.us;
	pE8->l = 14;
	D6.us = 12; pE9->ul = 15;
	D6.us |= pE9->ul;
	D6.us = 12;
	pE9->ul = 15; D6.us = 12;
	pE9->ul |= D6.us;
	pE9->ul = 15;
	D7.ui = 13; pE1->c = 7;
	D7.ui |= pE1->c;
	D7.ui = 13;
	pE1->c = 7; D7.ui = 13;
	pE1->c |= D7.ui;
	pE1->c = 7;
	D7.ui = 13; pE2->sc = 8;
	D7.ui |= pE2->sc;
	D7.ui = 13;
	pE2->sc = 8; D7.ui = 13;
	pE2->sc |= D7.ui;
	pE2->sc = 8;
	D7.ui = 13; pE3->s = 9;
	D7.ui |= pE3->s;
	D7.ui = 13;
	pE3->s = 9; D7.ui = 13;
	pE3->s |= D7.ui;
	pE3->s = 9;
	D7.ui = 13; pE4->i = 10;
	D7.ui |= pE4->i;
	D7.ui = 13;
	pE4->i = 10; D7.ui = 13;
	pE4->i |= D7.ui;
	pE4->i = 10;
	D7.ui = 13; pE5->uc = 11;
	D7.ui |= pE5->uc;
	D7.ui = 13;
	pE5->uc = 11; D7.ui = 13;
	pE5->uc |= D7.ui;
	pE5->uc = 11;
	D7.ui = 13; pE6->us = 12;
	D7.ui |= pE6->us;
	D7.ui = 13;
	pE6->us = 12; D7.ui = 13;
	pE6->us |= D7.ui;
	pE6->us = 12;
	D7.ui = 13; pE7->ui = 13;
	D7.ui |= pE7->ui;
	D7.ui = 13;
	pE7->ui = 13; D7.ui = 13;
	pE7->ui |= D7.ui;
	pE7->ui = 13;
	D7.ui = 13; pE8->l = 14;
	D7.ui |= pE8->l;
	D7.ui = 13;
	pE8->l = 14; D7.ui = 13;
	pE8->l |= D7.ui;
	pE8->l = 14;
	D7.ui = 13; pE9->ul = 15;
	D7.ui |= pE9->ul;
	D7.ui = 13;
	pE9->ul = 15; D7.ui = 13;
	pE9->ul |= D7.ui;
	pE9->ul = 15;
	D8.l = 14; pE1->c = 7;
	D8.l |= pE1->c;
	D8.l = 14;
	pE1->c = 7; D8.l = 14;
	pE1->c |= D8.l;
	pE1->c = 7;
	D8.l = 14; pE2->sc = 8;
	D8.l |= pE2->sc;
	D8.l = 14;
	pE2->sc = 8; D8.l = 14;
	pE2->sc |= D8.l;
	pE2->sc = 8;
	D8.l = 14; pE3->s = 9;
	D8.l |= pE3->s;
	D8.l = 14;
	pE3->s = 9; D8.l = 14;
	pE3->s |= D8.l;
	pE3->s = 9;
	D8.l = 14; pE4->i = 10;
	D8.l |= pE4->i;
	D8.l = 14;
	pE4->i = 10; D8.l = 14;
	pE4->i |= D8.l;
	pE4->i = 10;
	D8.l = 14; pE5->uc = 11;
	D8.l |= pE5->uc;
	D8.l = 14;
	pE5->uc = 11; D8.l = 14;
	pE5->uc |= D8.l;
	pE5->uc = 11;
	D8.l = 14; pE6->us = 12;
	D8.l |= pE6->us;
	D8.l = 14;
	pE6->us = 12; D8.l = 14;
	pE6->us |= D8.l;
	pE6->us = 12;
	D8.l = 14; pE7->ui = 13;
	D8.l |= pE7->ui;
	D8.l = 14;
	pE7->ui = 13; D8.l = 14;
	pE7->ui |= D8.l;
	pE7->ui = 13;
	D8.l = 14; pE8->l = 14;
	D8.l |= pE8->l;
	D8.l = 14;
	pE8->l = 14; D8.l = 14;
	pE8->l |= D8.l;
	pE8->l = 14;
	D8.l = 14; pE9->ul = 15;
	D8.l |= pE9->ul;
	D8.l = 14;
	pE9->ul = 15; D8.l = 14;
	pE9->ul |= D8.l;
	pE9->ul = 15;
	D9.ul = 15; pE1->c = 7;
	D9.ul |= pE1->c;
	D9.ul = 15;
	pE1->c = 7; D9.ul = 15;
	pE1->c |= D9.ul;
	pE1->c = 7;
	D9.ul = 15; pE2->sc = 8;
	D9.ul |= pE2->sc;
	D9.ul = 15;
	pE2->sc = 8; D9.ul = 15;
	pE2->sc |= D9.ul;
	pE2->sc = 8;
	D9.ul = 15; pE3->s = 9;
	D9.ul |= pE3->s;
	D9.ul = 15;
	pE3->s = 9; D9.ul = 15;
	pE3->s |= D9.ul;
	pE3->s = 9;
	D9.ul = 15; pE4->i = 10;
	D9.ul |= pE4->i;
	D9.ul = 15;
	pE4->i = 10; D9.ul = 15;
	pE4->i |= D9.ul;
	pE4->i = 10;
	D9.ul = 15; pE5->uc = 11;
	D9.ul |= pE5->uc;
	D9.ul = 15;
	pE5->uc = 11; D9.ul = 15;
	pE5->uc |= D9.ul;
	pE5->uc = 11;
	D9.ul = 15; pE6->us = 12;
	D9.ul |= pE6->us;
	D9.ul = 15;
	pE6->us = 12; D9.ul = 15;
	pE6->us |= D9.ul;
	pE6->us = 12;
	D9.ul = 15; pE7->ui = 13;
	D9.ul |= pE7->ui;
	D9.ul = 15;
	pE7->ui = 13; D9.ul = 15;
	pE7->ui |= D9.ul;
	pE7->ui = 13;
	D9.ul = 15; pE8->l = 14;
	D9.ul |= pE8->l;
	D9.ul = 15;
	pE8->l = 14; D9.ul = 15;
	pE8->l |= D9.ul;
	pE8->l = 14;
	D9.ul = 15; pE9->ul = 15;
	D9.ul |= pE9->ul;
	D9.ul = 15;
	pE9->ul = 15; D9.ul = 15;
	pE9->ul |= D9.ul;
	pE9->ul = 15;
	
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\postdec.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} E;
	auto E E1, *pE1 = &E1;
	auto E E2, *pE2 = &E2;
	auto E E3, *pE3 = &E3;
	auto E E4, *pE4 = &E4;
	auto E E5, *pE5 = &E5;
	auto E E6, *pE6 = &E6;
	auto E E7, *pE7 = &E7;
	auto E E8, *pE8 = &E8;
	auto E E9, *pE9 = &E9;
	auto E E10, *pE10 = &E10;
	auto E E11, *pE11 = &E11;
	auto E E12, *pE12 = &E12;
	pE1->c = 7;
	pE2->sc = 8;
	pE3->s = 9;
	pE4->i = 10;
	pE5->uc = 11;
	pE6->us = 12;
	pE7->ui = 13;
	pE8->l = 14;
	pE9->ul = 15;
	pE10->f = 16;
	pE11->d = 17;
	pE12->ld = 18;
	{
	auto CHAR Jc[12][12];
	int x_0 = 0;
	int y_0 = 0;
	auto SCHAR Jsc[12][12];
	int x_1 = 1;
	int y_1 = 1;
	auto SHORT Js[12][12];
	int x_2 = 2;
	int y_2 = 2;
	auto INT Ji[12][12];
	int x_3 = 3;
	int y_3 = 3;
	auto UCHAR Juc[12][12];
	int x_4 = 4;
	int y_4 = 4;
	auto USHORT Jus[12][12];
	int x_5 = 5;
	int y_5 = 5;
	auto UINT Jui[12][12];
	int x_6 = 6;
	int y_6 = 6;
	auto LONG Jl[12][12];
	int x_7 = 7;
	int y_7 = 7;
	auto ULONG Jul[12][12];
	int x_8 = 8;
	int y_8 = 8;
	auto FLOAT Jf[12][12];
	int x_9 = 9;
	int y_9 = 9;
	auto DOUBLE Jd[12][12];
	int x_10 = 10;
	int y_10 = 10;
	auto LDOUBLE Jld[12][12];
	int x_11 = 11;
	int y_11 = 11;
	Jc[x_0][y_0] = 7;
	Jsc[x_1][y_1] = 8;
	Js[x_2][y_2] = 9;
	Ji[x_3][y_3] = 10;
	Juc[x_4][y_4] = 11;
	Jus[x_5][y_5] = 12;
	Jui[x_6][y_6] = 13;
	Jl[x_7][y_7] = 14;
	Jul[x_8][y_8] = 15;
	Jf[x_9][y_9] = 16;
	Jd[x_10][y_10] = 17;
	Jld[x_11][y_11] = 18;
	{
	pE1->c = 7;
	Jc[x_0][y_0] = 7;

	break_here:

	pE1->c = 7;
	Jsc[x_1][y_1] = 8;
	pE1->c = 7;
	Js[x_2][y_2] = 9;
	pE1->c = 7;
	Ji[x_3][y_3] = 10;
	pE1->c = 7;
	Juc[x_4][y_4] = 11;
	pE1->c = 7;
	Jus[x_5][y_5] = 12;
	pE1->c = 7;
	Jui[x_6][y_6] = 13;
	pE1->c = 7;
	Jl[x_7][y_7] = 14;
	pE1->c = 7;
	Jul[x_8][y_8] = 15;
	pE1->c = 7;
	Jf[x_9][y_9] = 16;
	pE1->c = 7;
	Jd[x_10][y_10] = 17;
	pE1->c = 7;
	Jld[x_11][y_11] = 18;
	pE2->sc = 8;
	Jc[x_0][y_0] = 7;
	pE2->sc = 8;
	Jsc[x_1][y_1] = 8;
	pE2->sc = 8;
	Js[x_2][y_2] = 9;
	pE2->sc = 8;
	Ji[x_3][y_3] = 10;
	pE2->sc = 8;
	Juc[x_4][y_4] = 11;
	pE2->sc = 8;
	Jus[x_5][y_5] = 12;
	pE2->sc = 8;
	Jui[x_6][y_6] = 13;
	pE2->sc = 8;
	Jl[x_7][y_7] = 14;
	pE2->sc = 8;
	Jul[x_8][y_8] = 15;
	pE2->sc = 8;
	Jf[x_9][y_9] = 16;
	pE2->sc = 8;
	Jd[x_10][y_10] = 17;
	pE2->sc = 8;
	Jld[x_11][y_11] = 18;
	pE3->s = 9;
	Jc[x_0][y_0] = 7;
	pE3->s = 9;
	Jsc[x_1][y_1] = 8;
	pE3->s = 9;
	Js[x_2][y_2] = 9;
	pE3->s = 9;
	Ji[x_3][y_3] = 10;
	pE3->s = 9;
	Juc[x_4][y_4] = 11;
	pE3->s = 9;
	Jus[x_5][y_5] = 12;
	pE3->s = 9;
	Jui[x_6][y_6] = 13;
	pE3->s = 9;
	Jl[x_7][y_7] = 14;
	pE3->s = 9;
	Jul[x_8][y_8] = 15;
	pE3->s = 9;
	Jf[x_9][y_9] = 16;
	pE3->s = 9;
	Jd[x_10][y_10] = 17;
	pE3->s = 9;
	Jld[x_11][y_11] = 18;
	pE4->i = 10;
	Jc[x_0][y_0] = 7;
	pE4->i = 10;
	Jsc[x_1][y_1] = 8;
	pE4->i = 10;
	Js[x_2][y_2] = 9;
	pE4->i = 10;
	Ji[x_3][y_3] = 10;
	pE4->i = 10;
	Juc[x_4][y_4] = 11;
	pE4->i = 10;
	Jus[x_5][y_5] = 12;
	pE4->i = 10;
	Jui[x_6][y_6] = 13;
	pE4->i = 10;
	Jl[x_7][y_7] = 14;
	pE4->i = 10;
	Jul[x_8][y_8] = 15;
	pE4->i = 10;
	Jf[x_9][y_9] = 16;
	pE4->i = 10;
	Jd[x_10][y_10] = 17;
	pE4->i = 10;
	Jld[x_11][y_11] = 18;
	pE5->uc = 11;
	Jc[x_0][y_0] = 7;
	pE5->uc = 11;
	Jsc[x_1][y_1] = 8;
	pE5->uc = 11;
	Js[x_2][y_2] = 9;
	pE5->uc = 11;
	Ji[x_3][y_3] = 10;
	pE5->uc = 11;
	Juc[x_4][y_4] = 11;
	pE5->uc = 11;
	Jus[x_5][y_5] = 12;
	pE5->uc = 11;
	Jui[x_6][y_6] = 13;
	pE5->uc = 11;
	Jl[x_7][y_7] = 14;
	pE5->uc = 11;
	Jul[x_8][y_8] = 15;
	pE5->uc = 11;
	Jf[x_9][y_9] = 16;
	pE5->uc = 11;
	Jd[x_10][y_10] = 17;
	pE5->uc = 11;
	Jld[x_11][y_11] = 18;
	pE6->us = 12;
	Jc[x_0][y_0] = 7;
	pE6->us = 12;
	Jsc[x_1][y_1] = 8;
	pE6->us = 12;
	Js[x_2][y_2] = 9;
	pE6->us = 12;
	Ji[x_3][y_3] = 10;
	pE6->us = 12;
	Juc[x_4][y_4] = 11;
	pE6->us = 12;
	Jus[x_5][y_5] = 12;
	pE6->us = 12;
	Jui[x_6][y_6] = 13;
	pE6->us = 12;
	Jl[x_7][y_7] = 14;
	pE6->us = 12;
	Jul[x_8][y_8] = 15;
	pE6->us = 12;
	Jf[x_9][y_9] = 16;
	pE6->us = 12;
	Jd[x_10][y_10] = 17;
	pE6->us = 12;
	Jld[x_11][y_11] = 18;
	pE7->ui = 13;
	Jc[x_0][y_0] = 7;
	pE7->ui = 13;
	Jsc[x_1][y_1] = 8;
	pE7->ui = 13;
	Js[x_2][y_2] = 9;
	pE7->ui = 13;
	Ji[x_3][y_3] = 10;
	pE7->ui = 13;
	Juc[x_4][y_4] = 11;
	pE7->ui = 13;
	Jus[x_5][y_5] = 12;
	pE7->ui = 13;
	Jui[x_6][y_6] = 13;
	pE7->ui = 13;
	Jl[x_7][y_7] = 14;
	pE7->ui = 13;
	Jul[x_8][y_8] = 15;
	pE7->ui = 13;
	Jf[x_9][y_9] = 16;
	pE7->ui = 13;
	Jd[x_10][y_10] = 17;
	pE7->ui = 13;
	Jld[x_11][y_11] = 18;
	pE8->l = 14;
	Jc[x_0][y_0] = 7;
	pE8->l = 14;
	Jsc[x_1][y_1] = 8;
	pE8->l = 14;
	Js[x_2][y_2] = 9;
	pE8->l = 14;
	Ji[x_3][y_3] = 10;
	pE8->l = 14;
	Juc[x_4][y_4] = 11;
	pE8->l = 14;
	Jus[x_5][y_5] = 12;
	pE8->l = 14;
	Jui[x_6][y_6] = 13;
	pE8->l = 14;
	Jl[x_7][y_7] = 14;
	pE8->l = 14;
	Jul[x_8][y_8] = 15;
	pE8->l = 14;
	Jf[x_9][y_9] = 16;
	pE8->l = 14;
	Jd[x_10][y_10] = 17;
	pE8->l = 14;
	Jld[x_11][y_11] = 18;
	pE9->ul = 15;
	Jc[x_0][y_0] = 7;
	pE9->ul = 15;
	Jsc[x_1][y_1] = 8;
	pE9->ul = 15;
	Js[x_2][y_2] = 9;
	pE9->ul = 15;
	Ji[x_3][y_3] = 10;
	pE9->ul = 15;
	Juc[x_4][y_4] = 11;
	pE9->ul = 15;
	Jus[x_5][y_5] = 12;
	pE9->ul = 15;
	Jui[x_6][y_6] = 13;
	pE9->ul = 15;
	Jl[x_7][y_7] = 14;
	pE9->ul = 15;
	Jul[x_8][y_8] = 15;
	pE9->ul = 15;
	Jf[x_9][y_9] = 16;
	pE9->ul = 15;
	Jd[x_10][y_10] = 17;
	pE9->ul = 15;
	Jld[x_11][y_11] = 18;
	pE10->f = 16;
	Jc[x_0][y_0] = 7;
	pE10->f = 16;
	Jsc[x_1][y_1] = 8;
	pE10->f = 16;
	Js[x_2][y_2] = 9;
	pE10->f = 16;
	Ji[x_3][y_3] = 10;
	pE10->f = 16;
	Juc[x_4][y_4] = 11;
	pE10->f = 16;
	Jus[x_5][y_5] = 12;
	pE10->f = 16;
	Jui[x_6][y_6] = 13;
	pE10->f = 16;
	Jl[x_7][y_7] = 14;
	pE10->f = 16;
	Jul[x_8][y_8] = 15;
	pE10->f = 16;
	Jf[x_9][y_9] = 16;
	pE10->f = 16;
	Jd[x_10][y_10] = 17;
	pE10->f = 16;
	Jld[x_11][y_11] = 18;
	pE11->d = 17;
	Jc[x_0][y_0] = 7;
	pE11->d = 17;
	Jsc[x_1][y_1] = 8;
	pE11->d = 17;
	Js[x_2][y_2] = 9;
	pE11->d = 17;
	Ji[x_3][y_3] = 10;
	pE11->d = 17;
	Juc[x_4][y_4] = 11;
	pE11->d = 17;
	Jus[x_5][y_5] = 12;
	pE11->d = 17;
	Jui[x_6][y_6] = 13;
	pE11->d = 17;
	Jl[x_7][y_7] = 14;
	pE11->d = 17;
	Jul[x_8][y_8] = 15;
	pE11->d = 17;
	Jf[x_9][y_9] = 16;
	pE11->d = 17;
	Jd[x_10][y_10] = 17;
	pE11->d = 17;
	Jld[x_11][y_11] = 18;
	pE12->ld = 18;
	Jc[x_0][y_0] = 7;
	pE12->ld = 18;
	Jsc[x_1][y_1] = 8;
	pE12->ld = 18;
	Js[x_2][y_2] = 9;
	pE12->ld = 18;
	Ji[x_3][y_3] = 10;
	pE12->ld = 18;
	Juc[x_4][y_4] = 11;
	pE12->ld = 18;
	Jus[x_5][y_5] = 12;
	pE12->ld = 18;
	Jui[x_6][y_6] = 13;
	pE12->ld = 18;
	Jl[x_7][y_7] = 14;
	pE12->ld = 18;
	Jul[x_8][y_8] = 15;
	pE12->ld = 18;
	Jf[x_9][y_9] = 16;
	pE12->ld = 18;
	Jd[x_10][y_10] = 17;
	pE12->ld = 18;
	Jld[x_11][y_11] = 18;
	
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\quest.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Jc[12][12];
	int x_0 = 0;
	int y_0 = 0;
	auto SCHAR Jsc[12][12];
	int x_1 = 1;
	int y_1 = 1;
	auto SHORT Js[12][12];
	int x_2 = 2;
	int y_2 = 2;
	auto INT Ji[12][12];
	int x_3 = 3;
	int y_3 = 3;
	auto UCHAR Juc[12][12];
	int x_4 = 4;
	int y_4 = 4;
	auto USHORT Jus[12][12];
	int x_5 = 5;
	int y_5 = 5;
	auto UINT Jui[12][12];
	int x_6 = 6;
	int y_6 = 6;
	auto LONG Jl[12][12];
	int x_7 = 7;
	int y_7 = 7;
	auto ULONG Jul[12][12];
	int x_8 = 8;
	int y_8 = 8;
	auto FLOAT Jf[12][12];
	int x_9 = 9;
	int y_9 = 9;
	auto DOUBLE Jd[12][12];
	int x_10 = 10;
	int y_10 = 10;
	auto LDOUBLE Jld[12][12];
	int x_11 = 11;
	int y_11 = 11;
	Jc[x_0][y_0] = 7;
	Jsc[x_1][y_1] = 8;
	Js[x_2][y_2] = 9;
	Ji[x_3][y_3] = 10;
	Juc[x_4][y_4] = 11;
	Jus[x_5][y_5] = 12;
	Jui[x_6][y_6] = 13;
	Jl[x_7][y_7] = 14;
	Jul[x_8][y_8] = 15;
	Jf[x_9][y_9] = 16;
	Jd[x_10][y_10] = 17;
	Jld[x_11][y_11] = 18;
	{
	auto struct {
		UINT b1: 1;
		UINT b2: 2;
		UINT b3: 3;
		UINT b4: 4;
		UINT b5: 5;
		UINT b6: 6;
		UINT b7: 7;
		UINT b8: 5;
		UINT b9: 4;
		UINT b10: 3;
		UINT b11: 2;
		UINT b12: 1;
		} K;
	K.b1 = 1;
	K.b2 = 2;
	K.b3 = 3;
	K.b4 = 4;
	K.b5 = 5;
	K.b6 = 6;
	K.b7 = 7;
	K.b8 = 5;
	K.b9 = 4;
	K.b10 = 3;
	K.b11 = 2;
	K.b12 = 1;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\preinc.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)
	
	{
	auto CHAR Bc = 7;
	auto CHAR *pBc = &Bc;
	auto SCHAR Bsc = 8;
	auto SCHAR *pBsc = &Bsc;
	auto SHORT Bs = 9;
	auto SHORT *pBs = &Bs;
	auto INT Bi = 10;
	auto INT *pBi = &Bi;
	auto UCHAR Buc = 11;
	auto UCHAR *pBuc = &Buc;
	auto USHORT Bus = 12;
	auto USHORT *pBus = &Bus;
	auto UINT Bui = 13;
	auto UINT *pBui = &Bui;
	auto LONG Bl = 14;
	auto LONG *pBl = &Bl;
	auto ULONG Bul = 15;
	auto ULONG *pBul = &Bul;
	auto FLOAT Bf = 16;
	auto FLOAT *pBf = &Bf;
	auto DOUBLE Bd = 17;
	auto DOUBLE *pBd = &Bd;
	auto LDOUBLE Bld = 18;
	auto LDOUBLE *pBld = &Bld;
	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} E;
	auto E E1, *pE1 = &E1;
	auto E E2, *pE2 = &E2;
	auto E E3, *pE3 = &E3;
	auto E E4, *pE4 = &E4;
	auto E E5, *pE5 = &E5;
	auto E E6, *pE6 = &E6;
	auto E E7, *pE7 = &E7;
	auto E E8, *pE8 = &E8;
	auto E E9, *pE9 = &E9;
	auto E E10, *pE10 = &E10;
	auto E E11, *pE11 = &E11;
	auto E E12, *pE12 = &E12;
	pE1->c = 7;
	pE2->sc = 8;
	pE3->s = 9;
	pE4->i = 10;
	pE5->uc = 11;
	pE6->us = 12;
	pE7->ui = 13;
	pE8->l = 14;
	pE9->ul = 15;
	pE10->f = 16;
	pE11->d = 17;
	pE12->ld = 18;
	{
	*pBc = 7;
	pE1->c = 7;

	break_here:

	*pBc = 7;
	pE2->sc = 8;
	*pBc = 7;
	pE3->s = 9;
	*pBc = 7;
	pE4->i = 10;
	*pBc = 7;
	pE5->uc = 11;
	*pBc = 7;
	pE6->us = 12;
	*pBc = 7;
	pE7->ui = 13;
	*pBc = 7;
	pE8->l = 14;
	*pBc = 7;
	pE9->ul = 15;
	*pBc = 7;
	pE10->f = 16;
	*pBc = 7;
	pE11->d = 17;
	*pBc = 7;
	pE12->ld = 18;
	*pBsc = 8;
	pE1->c = 7;
	*pBsc = 8;
	pE2->sc = 8;
	*pBsc = 8;
	pE3->s = 9;
	*pBsc = 8;
	pE4->i = 10;
	*pBsc = 8;
	pE5->uc = 11;
	*pBsc = 8;
	pE6->us = 12;
	*pBsc = 8;
	pE7->ui = 13;
	*pBsc = 8;
	pE8->l = 14;
	*pBsc = 8;
	pE9->ul = 15;
	*pBsc = 8;
	pE10->f = 16;
	*pBsc = 8;
	pE11->d = 17;
	*pBsc = 8;
	pE12->ld = 18;
	*pBs = 9;
	pE1->c = 7;
	*pBs = 9;
	pE2->sc = 8;
	*pBs = 9;
	pE3->s = 9;
	*pBs = 9;
	pE4->i = 10;
	*pBs = 9;
	pE5->uc = 11;
	*pBs = 9;
	pE6->us = 12;
	*pBs = 9;
	pE7->ui = 13;
	*pBs = 9;
	pE8->l = 14;
	*pBs = 9;
	pE9->ul = 15;
	*pBs = 9;
	pE10->f = 16;
	*pBs = 9;
	pE11->d = 17;
	*pBs = 9;
	pE12->ld = 18;
	*pBi = 10;
	pE1->c = 7;
	*pBi = 10;
	pE2->sc = 8;
	*pBi = 10;
	pE3->s = 9;
	*pBi = 10;
	pE4->i = 10;
	*pBi = 10;
	pE5->uc = 11;
	*pBi = 10;
	pE6->us = 12;
	*pBi = 10;
	pE7->ui = 13;
	*pBi = 10;
	pE8->l = 14;
	*pBi = 10;
	pE9->ul = 15;
	*pBi = 10;
	pE10->f = 16;
	*pBi = 10;
	pE11->d = 17;
	*pBi = 10;
	pE12->ld = 18;
	*pBuc = 11;
	pE1->c = 7;
	*pBuc = 11;
	pE2->sc = 8;
	*pBuc = 11;
	pE3->s = 9;
	*pBuc = 11;
	pE4->i = 10;
	*pBuc = 11;
	pE5->uc = 11;
	*pBuc = 11;
	pE6->us = 12;
	*pBuc = 11;
	pE7->ui = 13;
	*pBuc = 11;
	pE8->l = 14;
	*pBuc = 11;
	pE9->ul = 15;
	*pBuc = 11;
	pE10->f = 16;
	*pBuc = 11;
	pE11->d = 17;
	*pBuc = 11;
	pE12->ld = 18;
	*pBus = 12;
	pE1->c = 7;
	*pBus = 12;
	pE2->sc = 8;
	*pBus = 12;
	pE3->s = 9;
	*pBus = 12;
	pE4->i = 10;
	*pBus = 12;
	pE5->uc = 11;
	*pBus = 12;
	pE6->us = 12;
	*pBus = 12;
	pE7->ui = 13;
	*pBus = 12;
	pE8->l = 14;
	*pBus = 12;
	pE9->ul = 15;
	*pBus = 12;
	pE10->f = 16;
	*pBus = 12;
	pE11->d = 17;
	*pBus = 12;
	pE12->ld = 18;
	*pBui = 13;
	pE1->c = 7;
	*pBui = 13;
	pE2->sc = 8;
	*pBui = 13;
	pE3->s = 9;
	*pBui = 13;
	pE4->i = 10;
	*pBui = 13;
	pE5->uc = 11;
	*pBui = 13;
	pE6->us = 12;
	*pBui = 13;
	pE7->ui = 13;
	*pBui = 13;
	pE8->l = 14;
	*pBui = 13;
	pE9->ul = 15;
	*pBui = 13;
	pE10->f = 16;
	*pBui = 13;
	pE11->d = 17;
	*pBui = 13;
	pE12->ld = 18;
	*pBl = 14;
	pE1->c = 7;
	*pBl = 14;
	pE2->sc = 8;
	*pBl = 14;
	pE3->s = 9;
	*pBl = 14;
	pE4->i = 10;
	*pBl = 14;
	pE5->uc = 11;
	*pBl = 14;
	pE6->us = 12;
	*pBl = 14;
	pE7->ui = 13;
	*pBl = 14;
	pE8->l = 14;
	*pBl = 14;
	pE9->ul = 15;
	*pBl = 14;
	pE10->f = 16;
	*pBl = 14;
	pE11->d = 17;
	*pBl = 14;
	pE12->ld = 18;
	*pBul = 15;
	pE1->c = 7;
	*pBul = 15;
	pE2->sc = 8;
	*pBul = 15;
	pE3->s = 9;
	*pBul = 15;
	pE4->i = 10;
	*pBul = 15;
	pE5->uc = 11;
	*pBul = 15;
	pE6->us = 12;
	*pBul = 15;
	pE7->ui = 13;
	*pBul = 15;
	pE8->l = 14;
	*pBul = 15;
	pE9->ul = 15;
	*pBul = 15;
	pE10->f = 16;
	*pBul = 15;
	pE11->d = 17;
	*pBul = 15;
	pE12->ld = 18;
	*pBf = 16;
	pE1->c = 7;
	*pBf = 16;
	pE2->sc = 8;
	*pBf = 16;
	pE3->s = 9;
	*pBf = 16;
	pE4->i = 10;
	*pBf = 16;
	pE5->uc = 11;
	*pBf = 16;
	pE6->us = 12;
	*pBf = 16;
	pE7->ui = 13;
	*pBf = 16;
	pE8->l = 14;
	*pBf = 16;
	pE9->ul = 15;
	*pBf = 16;
	pE10->f = 16;
	*pBf = 16;
	pE11->d = 17;
	*pBf = 16;
	pE12->ld = 18;
	*pBd = 17;
	pE1->c = 7;
	*pBd = 17;
	pE2->sc = 8;
	*pBd = 17;
	pE3->s = 9;
	*pBd = 17;
	pE4->i = 10;
	*pBd = 17;
	pE5->uc = 11;
	*pBd = 17;
	pE6->us = 12;
	*pBd = 17;
	pE7->ui = 13;
	*pBd = 17;
	pE8->l = 14;
	*pBd = 17;
	pE9->ul = 15;
	*pBd = 17;
	pE10->f = 16;
	*pBd = 17;
	pE11->d = 17;
	*pBd = 17;
	pE12->ld = 18;
	*pBld = 18;
	pE1->c = 7;
	*pBld = 18;
	pE2->sc = 8;
	*pBld = 18;
	pE3->s = 9;
	*pBld = 18;
	pE4->i = 10;
	*pBld = 18;
	pE5->uc = 11;
	*pBld = 18;
	pE6->us = 12;
	*pBld = 18;
	pE7->ui = 13;
	*pBld = 18;
	pE8->l = 14;
	*pBld = 18;
	pE9->ul = 15;
	*pBld = 18;
	pE10->f = 16;
	*pBld = 18;
	pE11->d = 17;
	*pBld = 18;
	pE12->ld = 18;
	
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\plus.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} G, *pG = &G;
	pG->c = 7;
	pG->sc = 8;
	pG->s = 9;
	pG->i = 10;
	pG->uc = 11;
	pG->us = 12;
	pG->ui = 13;
	pG->l = 14;
	pG->ul = 15;
	pG->f = 16;
	pG->d = 17;
	pG->ld = 18;
	{
	auto CHAR Jc[12][12];
	int x_0 = 0;
	int y_0 = 0;
	auto SCHAR Jsc[12][12];
	int x_1 = 1;
	int y_1 = 1;
	auto SHORT Js[12][12];
	int x_2 = 2;
	int y_2 = 2;
	auto INT Ji[12][12];
	int x_3 = 3;
	int y_3 = 3;
	auto UCHAR Juc[12][12];
	int x_4 = 4;
	int y_4 = 4;
	auto USHORT Jus[12][12];
	int x_5 = 5;
	int y_5 = 5;
	auto UINT Jui[12][12];
	int x_6 = 6;
	int y_6 = 6;
	auto LONG Jl[12][12];
	int x_7 = 7;
	int y_7 = 7;
	auto ULONG Jul[12][12];
	int x_8 = 8;
	int y_8 = 8;
	auto FLOAT Jf[12][12];
	int x_9 = 9;
	int y_9 = 9;
	auto DOUBLE Jd[12][12];
	int x_10 = 10;
	int y_10 = 10;
	auto LDOUBLE Jld[12][12];
	int x_11 = 11;
	int y_11 = 11;
	Jc[x_0][y_0] = 7;
	Jsc[x_1][y_1] = 8;
	Js[x_2][y_2] = 9;
	Ji[x_3][y_3] = 10;
	Juc[x_4][y_4] = 11;
	Jus[x_5][y_5] = 12;
	Jui[x_6][y_6] = 13;
	Jl[x_7][y_7] = 14;
	Jul[x_8][y_8] = 15;
	Jf[x_9][y_9] = 16;
	Jd[x_10][y_10] = 17;
	Jld[x_11][y_11] = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\remain.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "m.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

    {
    typedef union {
        CHAR c;
        SHORT s;
        INT i;
        UCHAR uc;
        USHORT us;
        UINT ui;
        LONG l;
        ULONG ul;
        FLOAT f;
        DOUBLE d;
        SCHAR sc;
        LDOUBLE ld;
        } E;
    auto E E1, *pE1 = &E1;
    auto E E2, *pE2 = &E2;
    auto E E3, *pE3 = &E3;
    auto E E4, *pE4 = &E4;
    auto E E5, *pE5 = &E5;
    auto E E6, *pE6 = &E6;
    auto E E7, *pE7 = &E7;
    auto E E8, *pE8 = &E8;
    auto E E9, *pE9 = &E9;
    auto E E10, *pE10 = &E10;
    auto E E11, *pE11 = &E11;
    auto E E12, *pE12 = &E12;
    pE1->c = 7;
    pE2->sc = 8;
    pE3->s = 9;
    pE4->i = 10;
    pE5->uc = 11;
    pE6->us = 12;
    pE7->ui = 13;
    pE8->l = 14;
    pE9->ul = 15;
    pE10->f = 16;
    pE11->d = 17;
    pE12->ld = 18;
    {
    CHAR Mc();
    SCHAR Msc();
    SHORT Ms();
    INT Mi();
    UCHAR Muc();
    USHORT Mus();
    UINT Mui();
    LONG Ml();
    ULONG Mul();
    FLOAT Mf();
    DOUBLE Md();
    LDOUBLE Mld();
    {
	break_here:
	return 0;
    }}
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\remeq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

    {
    auto CHAR Bc = 7;
    auto CHAR *pBc = &Bc;
    auto SCHAR Bsc = 8;
    auto SCHAR *pBsc = &Bsc;
    auto SHORT Bs = 9;
    auto SHORT *pBs = &Bs;
    auto INT Bi = 10;
    auto INT *pBi = &Bi;
    auto UCHAR Buc = 11;
    auto UCHAR *pBuc = &Buc;
    auto USHORT Bus = 12;
    auto USHORT *pBus = &Bus;
    auto UINT Bui = 13;
    auto UINT *pBui = &Bui;
    auto LONG Bl = 14;
    auto LONG *pBl = &Bl;
    auto ULONG Bul = 15;
    auto ULONG *pBul = &Bul;
    auto FLOAT Bf = 16;
    auto FLOAT *pBf = &Bf;
    auto DOUBLE Bd = 17;
    auto DOUBLE *pBd = &Bd;
    auto LDOUBLE Bld = 18;
    auto LDOUBLE *pBld = &Bld;
    {
    auto struct {
        CHAR c;
        SHORT s;
        INT i;
        UCHAR uc;
        USHORT us;
        UINT ui;
        LONG l;
        ULONG ul;
        FLOAT f;
        DOUBLE d;
        SCHAR sc;
        LDOUBLE ld;
        } G, *pG = &G;
    pG->c = 7;
    pG->sc = 8;
    pG->s = 9;
    pG->i = 10;
    pG->uc = 11;
    pG->us = 12;
    pG->ui = 13;
    pG->l = 14;
    pG->ul = 15;
    pG->f = 16;
    pG->d = 17;
    pG->ld = 18;
    {
    *pBc = 7; pG->c = 7;
    *pBc %= pG->c;

	break_here:

    *pBc = 7;
    pG->c = 7; *pBc = 7;
    pG->c %= *pBc;
    pG->c = 7;
    *pBc = 7; pG->sc = 8;
    *pBc %= pG->sc;
    *pBc = 7;
    pG->sc = 8; *pBc = 7;
    pG->sc %= *pBc;
    pG->sc = 8;
    *pBc = 7; pG->s = 9;
    *pBc %= pG->s;
    *pBc = 7;
    pG->s = 9; *pBc = 7;
    pG->s %= *pBc;
    pG->s = 9;
    *pBc = 7; pG->i = 10;
    *pBc %= pG->i;
    *pBc = 7;
    pG->i = 10; *pBc = 7;
    pG->i %= *pBc;
    pG->i = 10;
    *pBc = 7; pG->uc = 11;
    *pBc %= pG->uc;
    *pBc = 7;
    pG->uc = 11; *pBc = 7;
    pG->uc %= *pBc;
    pG->uc = 11;
    *pBc = 7; pG->us = 12;
    *pBc %= pG->us;
    *pBc = 7;
    pG->us = 12; *pBc = 7;
    pG->us %= *pBc;
    pG->us = 12;
    *pBc = 7; pG->ui = 13;
    *pBc %= pG->ui;
    *pBc = 7;
    pG->ui = 13; *pBc = 7;
    pG->ui %= *pBc;
    pG->ui = 13;
    *pBc = 7; pG->l = 14;
    *pBc %= pG->l;
    *pBc = 7;
    pG->l = 14; *pBc = 7;
    pG->l %= *pBc;
    pG->l = 14;
    *pBc = 7; pG->ul = 15;
    *pBc %= pG->ul;
    *pBc = 7;
    pG->ul = 15; *pBc = 7;
    pG->ul %= *pBc;
    pG->ul = 15;
    *pBsc = 8; pG->c = 7;
    *pBsc %= pG->c;
    *pBsc = 8;
    pG->c = 7; *pBsc = 8;
    pG->c %= *pBsc;
    pG->c = 7;
    *pBsc = 8; pG->sc = 8;
    *pBsc %= pG->sc;
    *pBsc = 8;
    pG->sc = 8; *pBsc = 8;
    pG->sc %= *pBsc;
    pG->sc = 8;
    *pBsc = 8; pG->s = 9;
    *pBsc %= pG->s;
    *pBsc = 8;
    pG->s = 9; *pBsc = 8;
    pG->s %= *pBsc;
    pG->s = 9;
    *pBsc = 8; pG->i = 10;
    *pBsc %= pG->i;
    *pBsc = 8;
    pG->i = 10; *pBsc = 8;
    pG->i %= *pBsc;
    pG->i = 10;
    *pBsc = 8; pG->uc = 11;
    *pBsc %= pG->uc;
    *pBsc = 8;
    pG->uc = 11; *pBsc = 8;
    pG->uc %= *pBsc;
    pG->uc = 11;
    *pBsc = 8; pG->us = 12;
    *pBsc %= pG->us;
    *pBsc = 8;
    pG->us = 12; *pBsc = 8;
    pG->us %= *pBsc;
    pG->us = 12;
    *pBsc = 8; pG->ui = 13;
    *pBsc %= pG->ui;
    *pBsc = 8;
    pG->ui = 13; *pBsc = 8;
    pG->ui %= *pBsc;
    pG->ui = 13;
    *pBsc = 8; pG->l = 14;
    *pBsc %= pG->l;
    *pBsc = 8;
    pG->l = 14; *pBsc = 8;
    pG->l %= *pBsc;
    pG->l = 14;
    *pBsc = 8; pG->ul = 15;
    *pBsc %= pG->ul;
    *pBsc = 8;
    pG->ul = 15; *pBsc = 8;
    pG->ul %= *pBsc;
    pG->ul = 15;
    *pBs = 9; pG->c = 7;
    *pBs %= pG->c;
    *pBs = 9;
    pG->c = 7; *pBs = 9;
    pG->c %= *pBs;
    pG->c = 7;
    *pBs = 9; pG->sc = 8;
    *pBs %= pG->sc;
    *pBs = 9;
    pG->sc = 8; *pBs = 9;
    pG->sc %= *pBs;
    pG->sc = 8;
    *pBs = 9; pG->s = 9;
    *pBs %= pG->s;
    *pBs = 9;
    pG->s = 9; *pBs = 9;
    pG->s %= *pBs;
    pG->s = 9;
    *pBs = 9; pG->i = 10;
    *pBs %= pG->i;
    *pBs = 9;
    pG->i = 10; *pBs = 9;
    pG->i %= *pBs;
    pG->i = 10;
    *pBs = 9; pG->uc = 11;
    *pBs %= pG->uc;
    *pBs = 9;
    pG->uc = 11; *pBs = 9;
    pG->uc %= *pBs;
    pG->uc = 11;
    *pBs = 9; pG->us = 12;
    *pBs %= pG->us;
    *pBs = 9;
    pG->us = 12; *pBs = 9;
    pG->us %= *pBs;
    pG->us = 12;
    *pBs = 9; pG->ui = 13;
    *pBs %= pG->ui;
    *pBs = 9;
    pG->ui = 13; *pBs = 9;
    pG->ui %= *pBs;
    pG->ui = 13;
    *pBs = 9; pG->l = 14;
    *pBs %= pG->l;
    *pBs = 9;
    pG->l = 14; *pBs = 9;
    pG->l %= *pBs;
    pG->l = 14;
    *pBs = 9; pG->ul = 15;
    *pBs %= pG->ul;
    *pBs = 9;
    pG->ul = 15; *pBs = 9;
    pG->ul %= *pBs;
    pG->ul = 15;
    *pBi = 10; pG->c = 7;
    *pBi %= pG->c;
    *pBi = 10;
    pG->c = 7; *pBi = 10;
    pG->c %= *pBi;
    pG->c = 7;
    *pBi = 10; pG->sc = 8;
    *pBi %= pG->sc;
    *pBi = 10;
    pG->sc = 8; *pBi = 10;
    pG->sc %= *pBi;
    pG->sc = 8;
    *pBi = 10; pG->s = 9;
    *pBi %= pG->s;
    *pBi = 10;
    pG->s = 9; *pBi = 10;
    pG->s %= *pBi;
    pG->s = 9;
    *pBi = 10; pG->i = 10;
    *pBi %= pG->i;
    *pBi = 10;
    pG->i = 10; *pBi = 10;
    pG->i %= *pBi;
    pG->i = 10;
    *pBi = 10; pG->uc = 11;
    *pBi %= pG->uc;
    *pBi = 10;
    pG->uc = 11; *pBi = 10;
    pG->uc %= *pBi;
    pG->uc = 11;
    *pBi = 10; pG->us = 12;
    *pBi %= pG->us;
    *pBi = 10;
    pG->us = 12; *pBi = 10;
    pG->us %= *pBi;
    pG->us = 12;
    *pBi = 10; pG->ui = 13;
    *pBi %= pG->ui;
    *pBi = 10;
    pG->ui = 13; *pBi = 10;
    pG->ui %= *pBi;
    pG->ui = 13;
    *pBi = 10; pG->l = 14;
    *pBi %= pG->l;
    *pBi = 10;
    pG->l = 14; *pBi = 10;
    pG->l %= *pBi;
    pG->l = 14;
    *pBi = 10; pG->ul = 15;
    *pBi %= pG->ul;
    *pBi = 10;
    pG->ul = 15; *pBi = 10;
    pG->ul %= *pBi;
    pG->ul = 15;
    *pBuc = 11; pG->c = 7;
    *pBuc %= pG->c;
    *pBuc = 11;
    pG->c = 7; *pBuc = 11;
    pG->c %= *pBuc;
    pG->c = 7;
    *pBuc = 11; pG->sc = 8;
    *pBuc %= pG->sc;
    *pBuc = 11;
    pG->sc = 8; *pBuc = 11;
    pG->sc %= *pBuc;
    pG->sc = 8;
    *pBuc = 11; pG->s = 9;
    *pBuc %= pG->s;
    *pBuc = 11;
    pG->s = 9; *pBuc = 11;
    pG->s %= *pBuc;
    pG->s = 9;
    *pBuc = 11; pG->i = 10;
    *pBuc %= pG->i;
    *pBuc = 11;
    pG->i = 10; *pBuc = 11;
    pG->i %= *pBuc;
    pG->i = 10;
    *pBuc = 11; pG->uc = 11;
    *pBuc %= pG->uc;
    *pBuc = 11;
    pG->uc = 11; *pBuc = 11;
    pG->uc %= *pBuc;
    pG->uc = 11;
    *pBuc = 11; pG->us = 12;
    *pBuc %= pG->us;
    *pBuc = 11;
    pG->us = 12; *pBuc = 11;
    pG->us %= *pBuc;
    pG->us = 12;
    *pBuc = 11; pG->ui = 13;
    *pBuc %= pG->ui;
    *pBuc = 11;
    pG->ui = 13; *pBuc = 11;
    pG->ui %= *pBuc;
    pG->ui = 13;
    *pBuc = 11; pG->l = 14;
    *pBuc %= pG->l;
    *pBuc = 11;
    pG->l = 14; *pBuc = 11;
    pG->l %= *pBuc;
    pG->l = 14;
    *pBuc = 11; pG->ul = 15;
    *pBuc %= pG->ul;
    *pBuc = 11;
    pG->ul = 15; *pBuc = 11;
    pG->ul %= *pBuc;
    pG->ul = 15;
    *pBus = 12; pG->c = 7;
    *pBus %= pG->c;
    *pBus = 12;
    pG->c = 7; *pBus = 12;
    pG->c %= *pBus;
    pG->c = 7;
    *pBus = 12; pG->sc = 8;
    *pBus %= pG->sc;
    *pBus = 12;
    pG->sc = 8; *pBus = 12;
    pG->sc %= *pBus;
    pG->sc = 8;
    *pBus = 12; pG->s = 9;
    *pBus %= pG->s;
    *pBus = 12;
    pG->s = 9; *pBus = 12;
    pG->s %= *pBus;
    pG->s = 9;
    *pBus = 12; pG->i = 10;
    *pBus %= pG->i;
    *pBus = 12;
    pG->i = 10; *pBus = 12;
    pG->i %= *pBus;
    pG->i = 10;
    *pBus = 12; pG->uc = 11;
    *pBus %= pG->uc;
    *pBus = 12;
    pG->uc = 11; *pBus = 12;
    pG->uc %= *pBus;
    pG->uc = 11;
    *pBus = 12; pG->us = 12;
    *pBus %= pG->us;
    *pBus = 12;
    pG->us = 12; *pBus = 12;
    pG->us %= *pBus;
    pG->us = 12;
    *pBus = 12; pG->ui = 13;
    *pBus %= pG->ui;
    *pBus = 12;
    pG->ui = 13; *pBus = 12;
    pG->ui %= *pBus;
    pG->ui = 13;
    *pBus = 12; pG->l = 14;
    *pBus %= pG->l;
    *pBus = 12;
    pG->l = 14; *pBus = 12;
    pG->l %= *pBus;
    pG->l = 14;
    *pBus = 12; pG->ul = 15;
    *pBus %= pG->ul;
    *pBus = 12;
    pG->ul = 15; *pBus = 12;
    pG->ul %= *pBus;
    pG->ul = 15;
    *pBui = 13; pG->c = 7;
    *pBui %= pG->c;
    *pBui = 13;
    pG->c = 7; *pBui = 13;
    pG->c %= *pBui;
    pG->c = 7;
    *pBui = 13; pG->sc = 8;
    *pBui %= pG->sc;
    *pBui = 13;
    pG->sc = 8; *pBui = 13;
    pG->sc %= *pBui;
    pG->sc = 8;
    *pBui = 13; pG->s = 9;
    *pBui %= pG->s;
    *pBui = 13;
    pG->s = 9; *pBui = 13;
    pG->s %= *pBui;
    pG->s = 9;
    *pBui = 13; pG->i = 10;
    *pBui %= pG->i;
    *pBui = 13;
    pG->i = 10; *pBui = 13;
    pG->i %= *pBui;
    pG->i = 10;
    *pBui = 13; pG->uc = 11;
    *pBui %= pG->uc;
    *pBui = 13;
    pG->uc = 11; *pBui = 13;
    pG->uc %= *pBui;
    pG->uc = 11;
    *pBui = 13; pG->us = 12;
    *pBui %= pG->us;
    *pBui = 13;
    pG->us = 12; *pBui = 13;
    pG->us %= *pBui;
    pG->us = 12;
    *pBui = 13; pG->ui = 13;
    *pBui %= pG->ui;
    *pBui = 13;
    pG->ui = 13; *pBui = 13;
    pG->ui %= *pBui;
    pG->ui = 13;
    *pBui = 13; pG->l = 14;
    *pBui %= pG->l;
    *pBui = 13;
    pG->l = 14; *pBui = 13;
    pG->l %= *pBui;
    pG->l = 14;
    *pBui = 13; pG->ul = 15;
    *pBui %= pG->ul;
    *pBui = 13;
    pG->ul = 15; *pBui = 13;
    pG->ul %= *pBui;
    pG->ul = 15;
    *pBl = 14; pG->c = 7;
    *pBl %= pG->c;
    *pBl = 14;
    pG->c = 7; *pBl = 14;
    pG->c %= *pBl;
    pG->c = 7;
    *pBl = 14; pG->sc = 8;
    *pBl %= pG->sc;
    *pBl = 14;
    pG->sc = 8; *pBl = 14;
    pG->sc %= *pBl;
    pG->sc = 8;
    *pBl = 14; pG->s = 9;
    *pBl %= pG->s;
    *pBl = 14;
    pG->s = 9; *pBl = 14;
    pG->s %= *pBl;
    pG->s = 9;
    *pBl = 14; pG->i = 10;
    *pBl %= pG->i;
    *pBl = 14;
    pG->i = 10; *pBl = 14;
    pG->i %= *pBl;
    pG->i = 10;
    *pBl = 14; pG->uc = 11;
    *pBl %= pG->uc;
    *pBl = 14;
    pG->uc = 11; *pBl = 14;
    pG->uc %= *pBl;
    pG->uc = 11;
    *pBl = 14; pG->us = 12;
    *pBl %= pG->us;
    *pBl = 14;
    pG->us = 12; *pBl = 14;
    pG->us %= *pBl;
    pG->us = 12;
    *pBl = 14; pG->ui = 13;
    *pBl %= pG->ui;
    *pBl = 14;
    pG->ui = 13; *pBl = 14;
    pG->ui %= *pBl;
    pG->ui = 13;
    *pBl = 14; pG->l = 14;
    *pBl %= pG->l;
    *pBl = 14;
    pG->l = 14; *pBl = 14;
    pG->l %= *pBl;
    pG->l = 14;
    *pBl = 14; pG->ul = 15;
    *pBl %= pG->ul;
    *pBl = 14;
    pG->ul = 15; *pBl = 14;
    pG->ul %= *pBl;
    pG->ul = 15;
    *pBul = 15; pG->c = 7;
    *pBul %= pG->c;
    *pBul = 15;
    pG->c = 7; *pBul = 15;
    pG->c %= *pBul;
    pG->c = 7;
    *pBul = 15; pG->sc = 8;
    *pBul %= pG->sc;
    *pBul = 15;
    pG->sc = 8; *pBul = 15;
    pG->sc %= *pBul;
    pG->sc = 8;
    *pBul = 15; pG->s = 9;
    *pBul %= pG->s;
    *pBul = 15;
    pG->s = 9; *pBul = 15;
    pG->s %= *pBul;
    pG->s = 9;
    *pBul = 15; pG->i = 10;
    *pBul %= pG->i;
    *pBul = 15;
    pG->i = 10; *pBul = 15;
    pG->i %= *pBul;
    pG->i = 10;
    *pBul = 15; pG->uc = 11;
    *pBul %= pG->uc;
    *pBul = 15;
    pG->uc = 11; *pBul = 15;
    pG->uc %= *pBul;
    pG->uc = 11;
    *pBul = 15; pG->us = 12;
    *pBul %= pG->us;
    *pBul = 15;
    pG->us = 12; *pBul = 15;
    pG->us %= *pBul;
    pG->us = 12;
    *pBul = 15; pG->ui = 13;
    *pBul %= pG->ui;
    *pBul = 15;
    pG->ui = 13; *pBul = 15;
    pG->ui %= *pBul;
    pG->ui = 13;
    *pBul = 15; pG->l = 14;
    *pBul %= pG->l;
    *pBul = 15;
    pG->l = 14; *pBul = 15;
    pG->l %= *pBul;
    pG->l = 14;
    *pBul = 15; pG->ul = 15;
    *pBul %= pG->ul;
    *pBul = 15;
    pG->ul = 15; *pBul = 15;
    pG->ul %= *pBul;
    pG->ul = 15;

	return 0;
	}}
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\rsheq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} F;
	F.c = 7;
	F.sc = 8;
	F.s = 9;
	F.i = 10;
	F.uc = 11;
	F.us = 12;
	F.ui = 13;
	F.l = 14;
	F.ul = 15;
	F.f = 16;
	F.d = 17;
	F.ld = 18;
	{
	auto CHAR Ic[12];
	int x_0 = 0;
	auto SCHAR Isc[12];
	int x_1 = 1;
	auto SHORT Is[12];
	int x_2 = 2;
	auto INT Ii[12];
	int x_3 = 3;
	auto UCHAR Iuc[12];
	int x_4 = 4;
	auto USHORT Ius[12];
	int x_5 = 5;
	auto UINT Iui[12];
	int x_6 = 6;
	auto LONG Il[12];
	int x_7 = 7;
	auto ULONG Iul[12];
	int x_8 = 8;
	auto FLOAT If[12];
	int x_9 = 9;
	auto DOUBLE Id[12];
	int x_10 = 10;
	auto LDOUBLE Ild[12];
	int x_11 = 11;
	Ic[x_0] = 7;
	Isc[x_1] = 8;
	Is[x_2] = 9;
	Ii[x_3] = 10;
	Iuc[x_4] = 11;
	Ius[x_5] = 12;
	Iui[x_6] = 13;
	Il[x_7] = 14;
	Iul[x_8] = 15;
	If[x_9] = 16;
	Id[x_10] = 17;
	Ild[x_11] = 18;
	{
	F.c = 7; Ic[x_0] = 1;
	F.c >>= Ic[x_0];

	break_here:

	F.c = 7; Ic[x_0] = 1;
	Ic[x_0] = 7; F.c = 1;
	Ic[x_0] >>= F.c;
	Ic[x_0] = 7; F.c = 1;
	F.c = 7; Isc[x_1] = 1;
	F.c >>= Isc[x_1];
	F.c = 7; Isc[x_1] = 1;
	Isc[x_1] = 8; F.c = 1;
	Isc[x_1] >>= F.c;
	Isc[x_1] = 8; F.c = 1;
	F.c = 7; Is[x_2] = 1;
	F.c >>= Is[x_2];
	F.c = 7; Is[x_2] = 1;
	Is[x_2] = 9; F.c = 1;
	Is[x_2] >>= F.c;
	Is[x_2] = 9; F.c = 1;
	F.c = 7; Ii[x_3] = 1;
	F.c >>= Ii[x_3];
	F.c = 7; Ii[x_3] = 1;
	Ii[x_3] = 10; F.c = 1;
	Ii[x_3] >>= F.c;
	Ii[x_3] = 10; F.c = 1;
	F.c = 7; Iuc[x_4] = 1;
	F.c >>= Iuc[x_4];
	F.c = 7; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.c = 1;
	Iuc[x_4] >>= F.c;
	Iuc[x_4] = 11; F.c = 1;
	F.c = 7; Ius[x_5] = 1;
	F.c >>= Ius[x_5];
	F.c = 7; Ius[x_5] = 1;
	Ius[x_5] = 12; F.c = 1;
	Ius[x_5] >>= F.c;
	Ius[x_5] = 12; F.c = 1;
	F.c = 7; Iui[x_6] = 1;
	F.c >>= Iui[x_6];
	F.c = 7; Iui[x_6] = 1;
	Iui[x_6] = 13; F.c = 1;
	Iui[x_6] >>= F.c;
	Iui[x_6] = 13; F.c = 1;
	F.c = 7; Il[x_7] = 1;
	F.c >>= Il[x_7];
	F.c = 7; Il[x_7] = 1;
	Il[x_7] = 14; F.c = 1;
	Il[x_7] >>= F.c;
	Il[x_7] = 14; F.c = 1;
	F.c = 7; Iul[x_8] = 1;
	F.c >>= Iul[x_8];
	F.c = 7; Iul[x_8] = 1;
	Iul[x_8] = 15; F.c = 1;
	Iul[x_8] >>= F.c;
	Iul[x_8] = 15; F.c = 1;
	F.sc = 8; Ic[x_0] = 1;
	F.sc >>= Ic[x_0];
	F.sc = 8; Ic[x_0] = 1;
	Ic[x_0] = 7; F.sc = 1;
	Ic[x_0] >>= F.sc;
	Ic[x_0] = 7; F.sc = 1;
	F.sc = 8; Isc[x_1] = 1;
	F.sc >>= Isc[x_1];
	F.sc = 8; Isc[x_1] = 1;
	Isc[x_1] = 8; F.sc = 1;
	Isc[x_1] >>= F.sc;
	Isc[x_1] = 8; F.sc = 1;
	F.sc = 8; Is[x_2] = 1;
	F.sc >>= Is[x_2];
	F.sc = 8; Is[x_2] = 1;
	Is[x_2] = 9; F.sc = 1;
	Is[x_2] >>= F.sc;
	Is[x_2] = 9; F.sc = 1;
	F.sc = 8; Ii[x_3] = 1;
	F.sc >>= Ii[x_3];
	F.sc = 8; Ii[x_3] = 1;
	Ii[x_3] = 10; F.sc = 1;
	Ii[x_3] >>= F.sc;
	Ii[x_3] = 10; F.sc = 1;
	F.sc = 8; Iuc[x_4] = 1;
	F.sc >>= Iuc[x_4];
	F.sc = 8; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.sc = 1;
	Iuc[x_4] >>= F.sc;
	Iuc[x_4] = 11; F.sc = 1;
	F.sc = 8; Ius[x_5] = 1;
	F.sc >>= Ius[x_5];
	F.sc = 8; Ius[x_5] = 1;
	Ius[x_5] = 12; F.sc = 1;
	Ius[x_5] >>= F.sc;
	Ius[x_5] = 12; F.sc = 1;
	F.sc = 8; Iui[x_6] = 1;
	F.sc >>= Iui[x_6];
	F.sc = 8; Iui[x_6] = 1;
	Iui[x_6] = 13; F.sc = 1;
	Iui[x_6] >>= F.sc;
	Iui[x_6] = 13; F.sc = 1;
	F.sc = 8; Il[x_7] = 1;
	F.sc >>= Il[x_7];
	F.sc = 8; Il[x_7] = 1;
	Il[x_7] = 14; F.sc = 1;
	Il[x_7] >>= F.sc;
	Il[x_7] = 14; F.sc = 1;
	F.sc = 8; Iul[x_8] = 1;
	F.sc >>= Iul[x_8];
	F.sc = 8; Iul[x_8] = 1;
	Iul[x_8] = 15; F.sc = 1;
	Iul[x_8] >>= F.sc;
	Iul[x_8] = 15; F.sc = 1;
	F.s = 9; Ic[x_0] = 1;
	F.s >>= Ic[x_0];
	F.s = 9; Ic[x_0] = 1;
	Ic[x_0] = 7; F.s = 1;
	Ic[x_0] >>= F.s;
	Ic[x_0] = 7; F.s = 1;
	F.s = 9; Isc[x_1] = 1;
	F.s >>= Isc[x_1];
	F.s = 9; Isc[x_1] = 1;
	Isc[x_1] = 8; F.s = 1;
	Isc[x_1] >>= F.s;
	Isc[x_1] = 8; F.s = 1;
	F.s = 9; Is[x_2] = 1;
	F.s >>= Is[x_2];
	F.s = 9; Is[x_2] = 1;
	Is[x_2] = 9; F.s = 1;
	Is[x_2] >>= F.s;
	Is[x_2] = 9; F.s = 1;
	F.s = 9; Ii[x_3] = 1;
	F.s >>= Ii[x_3];
	F.s = 9; Ii[x_3] = 1;
	Ii[x_3] = 10; F.s = 1;
	Ii[x_3] >>= F.s;
	Ii[x_3] = 10; F.s = 1;
	F.s = 9; Iuc[x_4] = 1;
	F.s >>= Iuc[x_4];
	F.s = 9; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.s = 1;
	Iuc[x_4] >>= F.s;
	Iuc[x_4] = 11; F.s = 1;
	F.s = 9; Ius[x_5] = 1;
	F.s >>= Ius[x_5];
	F.s = 9; Ius[x_5] = 1;
	Ius[x_5] = 12; F.s = 1;
	Ius[x_5] >>= F.s;
	Ius[x_5] = 12; F.s = 1;
	F.s = 9; Iui[x_6] = 1;
	F.s >>= Iui[x_6];
	F.s = 9; Iui[x_6] = 1;
	Iui[x_6] = 13; F.s = 1;
	Iui[x_6] >>= F.s;
	Iui[x_6] = 13; F.s = 1;
	F.s = 9; Il[x_7] = 1;
	F.s >>= Il[x_7];
	F.s = 9; Il[x_7] = 1;
	Il[x_7] = 14; F.s = 1;
	Il[x_7] >>= F.s;
	Il[x_7] = 14; F.s = 1;
	F.s = 9; Iul[x_8] = 1;
	F.s >>= Iul[x_8];
	F.s = 9; Iul[x_8] = 1;
	Iul[x_8] = 15; F.s = 1;
	Iul[x_8] >>= F.s;
	Iul[x_8] = 15; F.s = 1;
	F.i = 10; Ic[x_0] = 1;
	F.i >>= Ic[x_0];
	F.i = 10; Ic[x_0] = 1;
	Ic[x_0] = 7; F.i = 1;
	Ic[x_0] >>= F.i;
	Ic[x_0] = 7; F.i = 1;
	F.i = 10; Isc[x_1] = 1;
	F.i >>= Isc[x_1];
	F.i = 10; Isc[x_1] = 1;
	Isc[x_1] = 8; F.i = 1;
	Isc[x_1] >>= F.i;
	Isc[x_1] = 8; F.i = 1;
	F.i = 10; Is[x_2] = 1;
	F.i >>= Is[x_2];
	F.i = 10; Is[x_2] = 1;
	Is[x_2] = 9; F.i = 1;
	Is[x_2] >>= F.i;
	Is[x_2] = 9; F.i = 1;
	F.i = 10; Ii[x_3] = 1;
	F.i >>= Ii[x_3];
	F.i = 10; Ii[x_3] = 1;
	Ii[x_3] = 10; F.i = 1;
	Ii[x_3] >>= F.i;
	Ii[x_3] = 10; F.i = 1;
	F.i = 10; Iuc[x_4] = 1;
	F.i >>= Iuc[x_4];
	F.i = 10; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.i = 1;
	Iuc[x_4] >>= F.i;
	Iuc[x_4] = 11; F.i = 1;
	F.i = 10; Ius[x_5] = 1;
	F.i >>= Ius[x_5];
	F.i = 10; Ius[x_5] = 1;
	Ius[x_5] = 12; F.i = 1;
	Ius[x_5] >>= F.i;
	Ius[x_5] = 12; F.i = 1;
	F.i = 10; Iui[x_6] = 1;
	F.i >>= Iui[x_6];
	F.i = 10; Iui[x_6] = 1;
	Iui[x_6] = 13; F.i = 1;
	Iui[x_6] >>= F.i;
	Iui[x_6] = 13; F.i = 1;
	F.i = 10; Il[x_7] = 1;
	F.i >>= Il[x_7];
	F.i = 10; Il[x_7] = 1;
	Il[x_7] = 14; F.i = 1;
	Il[x_7] >>= F.i;
	Il[x_7] = 14; F.i = 1;
	F.i = 10; Iul[x_8] = 1;
	F.i >>= Iul[x_8];
	F.i = 10; Iul[x_8] = 1;
	Iul[x_8] = 15; F.i = 1;
	Iul[x_8] >>= F.i;
	Iul[x_8] = 15; F.i = 1;
	F.uc = 11; Ic[x_0] = 1;
	F.uc >>= Ic[x_0];
	F.uc = 11; Ic[x_0] = 1;
	Ic[x_0] = 7; F.uc = 1;
	Ic[x_0] >>= F.uc;
	Ic[x_0] = 7; F.uc = 1;
	F.uc = 11; Isc[x_1] = 1;
	F.uc >>= Isc[x_1];
	F.uc = 11; Isc[x_1] = 1;
	Isc[x_1] = 8; F.uc = 1;
	Isc[x_1] >>= F.uc;
	Isc[x_1] = 8; F.uc = 1;
	F.uc = 11; Is[x_2] = 1;
	F.uc >>= Is[x_2];
	F.uc = 11; Is[x_2] = 1;
	Is[x_2] = 9; F.uc = 1;
	Is[x_2] >>= F.uc;
	Is[x_2] = 9; F.uc = 1;
	F.uc = 11; Ii[x_3] = 1;
	F.uc >>= Ii[x_3];
	F.uc = 11; Ii[x_3] = 1;
	Ii[x_3] = 10; F.uc = 1;
	Ii[x_3] >>= F.uc;
	Ii[x_3] = 10; F.uc = 1;
	F.uc = 11; Iuc[x_4] = 1;
	F.uc >>= Iuc[x_4];
	F.uc = 11; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.uc = 1;
	Iuc[x_4] >>= F.uc;
	Iuc[x_4] = 11; F.uc = 1;
	F.uc = 11; Ius[x_5] = 1;
	F.uc >>= Ius[x_5];
	F.uc = 11; Ius[x_5] = 1;
	Ius[x_5] = 12; F.uc = 1;
	Ius[x_5] >>= F.uc;
	Ius[x_5] = 12; F.uc = 1;
	F.uc = 11; Iui[x_6] = 1;
	F.uc >>= Iui[x_6];
	F.uc = 11; Iui[x_6] = 1;
	Iui[x_6] = 13; F.uc = 1;
	Iui[x_6] >>= F.uc;
	Iui[x_6] = 13; F.uc = 1;
	F.uc = 11; Il[x_7] = 1;
	F.uc >>= Il[x_7];
	F.uc = 11; Il[x_7] = 1;
	Il[x_7] = 14; F.uc = 1;
	Il[x_7] >>= F.uc;
	Il[x_7] = 14; F.uc = 1;
	F.uc = 11; Iul[x_8] = 1;
	F.uc >>= Iul[x_8];
	F.uc = 11; Iul[x_8] = 1;
	Iul[x_8] = 15; F.uc = 1;
	Iul[x_8] >>= F.uc;
	Iul[x_8] = 15; F.uc = 1;
	F.us = 12; Ic[x_0] = 1;
	F.us >>= Ic[x_0];
	F.us = 12; Ic[x_0] = 1;
	Ic[x_0] = 7; F.us = 1;
	Ic[x_0] >>= F.us;
	Ic[x_0] = 7; F.us = 1;
	F.us = 12; Isc[x_1] = 1;
	F.us >>= Isc[x_1];
	F.us = 12; Isc[x_1] = 1;
	Isc[x_1] = 8; F.us = 1;
	Isc[x_1] >>= F.us;
	Isc[x_1] = 8; F.us = 1;
	F.us = 12; Is[x_2] = 1;
	F.us >>= Is[x_2];
	F.us = 12; Is[x_2] = 1;
	Is[x_2] = 9; F.us = 1;
	Is[x_2] >>= F.us;
	Is[x_2] = 9; F.us = 1;
	F.us = 12; Ii[x_3] = 1;
	F.us >>= Ii[x_3];
	F.us = 12; Ii[x_3] = 1;
	Ii[x_3] = 10; F.us = 1;
	Ii[x_3] >>= F.us;
	Ii[x_3] = 10; F.us = 1;
	F.us = 12; Iuc[x_4] = 1;
	F.us >>= Iuc[x_4];
	F.us = 12; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.us = 1;
	Iuc[x_4] >>= F.us;
	Iuc[x_4] = 11; F.us = 1;
	F.us = 12; Ius[x_5] = 1;
	F.us >>= Ius[x_5];
	F.us = 12; Ius[x_5] = 1;
	Ius[x_5] = 12; F.us = 1;
	Ius[x_5] >>= F.us;
	Ius[x_5] = 12; F.us = 1;
	F.us = 12; Iui[x_6] = 1;
	F.us >>= Iui[x_6];
	F.us = 12; Iui[x_6] = 1;
	Iui[x_6] = 13; F.us = 1;
	Iui[x_6] >>= F.us;
	Iui[x_6] = 13; F.us = 1;
	F.us = 12; Il[x_7] = 1;
	F.us >>= Il[x_7];
	F.us = 12; Il[x_7] = 1;
	Il[x_7] = 14; F.us = 1;
	Il[x_7] >>= F.us;
	Il[x_7] = 14; F.us = 1;
	F.us = 12; Iul[x_8] = 1;
	F.us >>= Iul[x_8];
	F.us = 12; Iul[x_8] = 1;
	Iul[x_8] = 15; F.us = 1;
	Iul[x_8] >>= F.us;
	Iul[x_8] = 15; F.us = 1;
	F.ui = 13; Ic[x_0] = 1;
	F.ui >>= Ic[x_0];
	F.ui = 13; Ic[x_0] = 1;
	Ic[x_0] = 7; F.ui = 1;
	Ic[x_0] >>= F.ui;
	Ic[x_0] = 7; F.ui = 1;
	F.ui = 13; Isc[x_1] = 1;
	F.ui >>= Isc[x_1];
	F.ui = 13; Isc[x_1] = 1;
	Isc[x_1] = 8; F.ui = 1;
	Isc[x_1] >>= F.ui;
	Isc[x_1] = 8; F.ui = 1;
	F.ui = 13; Is[x_2] = 1;
	F.ui >>= Is[x_2];
	F.ui = 13; Is[x_2] = 1;
	Is[x_2] = 9; F.ui = 1;
	Is[x_2] >>= F.ui;
	Is[x_2] = 9; F.ui = 1;
	F.ui = 13; Ii[x_3] = 1;
	F.ui >>= Ii[x_3];
	F.ui = 13; Ii[x_3] = 1;
	Ii[x_3] = 10; F.ui = 1;
	Ii[x_3] >>= F.ui;
	Ii[x_3] = 10; F.ui = 1;
	F.ui = 13; Iuc[x_4] = 1;
	F.ui >>= Iuc[x_4];
	F.ui = 13; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.ui = 1;
	Iuc[x_4] >>= F.ui;
	Iuc[x_4] = 11; F.ui = 1;
	F.ui = 13; Ius[x_5] = 1;
	F.ui >>= Ius[x_5];
	F.ui = 13; Ius[x_5] = 1;
	Ius[x_5] = 12; F.ui = 1;
	Ius[x_5] >>= F.ui;
	Ius[x_5] = 12; F.ui = 1;
	F.ui = 13; Iui[x_6] = 1;
	F.ui >>= Iui[x_6];
	F.ui = 13; Iui[x_6] = 1;
	Iui[x_6] = 13; F.ui = 1;
	Iui[x_6] >>= F.ui;
	Iui[x_6] = 13; F.ui = 1;
	F.ui = 13; Il[x_7] = 1;
	F.ui >>= Il[x_7];
	F.ui = 13; Il[x_7] = 1;
	Il[x_7] = 14; F.ui = 1;
	Il[x_7] >>= F.ui;
	Il[x_7] = 14; F.ui = 1;
	F.ui = 13; Iul[x_8] = 1;
	F.ui >>= Iul[x_8];
	F.ui = 13; Iul[x_8] = 1;
	Iul[x_8] = 15; F.ui = 1;
	Iul[x_8] >>= F.ui;
	Iul[x_8] = 15; F.ui = 1;
	F.l = 14; Ic[x_0] = 1;
	F.l >>= Ic[x_0];
	F.l = 14; Ic[x_0] = 1;
	Ic[x_0] = 7; F.l = 1;
	Ic[x_0] >>= F.l;
	Ic[x_0] = 7; F.l = 1;
	F.l = 14; Isc[x_1] = 1;
	F.l >>= Isc[x_1];
	F.l = 14; Isc[x_1] = 1;
	Isc[x_1] = 8; F.l = 1;
	Isc[x_1] >>= F.l;
	Isc[x_1] = 8; F.l = 1;
	F.l = 14; Is[x_2] = 1;
	F.l >>= Is[x_2];
	F.l = 14; Is[x_2] = 1;
	Is[x_2] = 9; F.l = 1;
	Is[x_2] >>= F.l;
	Is[x_2] = 9; F.l = 1;
	F.l = 14; Ii[x_3] = 1;
	F.l >>= Ii[x_3];
	F.l = 14; Ii[x_3] = 1;
	Ii[x_3] = 10; F.l = 1;
	Ii[x_3] >>= F.l;
	Ii[x_3] = 10; F.l = 1;
	F.l = 14; Iuc[x_4] = 1;
	F.l >>= Iuc[x_4];
	F.l = 14; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.l = 1;
	Iuc[x_4] >>= F.l;
	Iuc[x_4] = 11; F.l = 1;
	F.l = 14; Ius[x_5] = 1;
	F.l >>= Ius[x_5];
	F.l = 14; Ius[x_5] = 1;
	Ius[x_5] = 12; F.l = 1;
	Ius[x_5] >>= F.l;
	Ius[x_5] = 12; F.l = 1;
	F.l = 14; Iui[x_6] = 1;
	F.l >>= Iui[x_6];
	F.l = 14; Iui[x_6] = 1;
	Iui[x_6] = 13; F.l = 1;
	Iui[x_6] >>= F.l;
	Iui[x_6] = 13; F.l = 1;
	F.l = 14; Il[x_7] = 1;
	F.l >>= Il[x_7];
	F.l = 14; Il[x_7] = 1;
	Il[x_7] = 14; F.l = 1;
	Il[x_7] >>= F.l;
	Il[x_7] = 14; F.l = 1;
	F.l = 14; Iul[x_8] = 1;
	F.l >>= Iul[x_8];
	F.l = 14; Iul[x_8] = 1;
	Iul[x_8] = 15; F.l = 1;
	Iul[x_8] >>= F.l;
	Iul[x_8] = 15; F.l = 1;
	F.ul = 15; Ic[x_0] = 1;
	F.ul >>= Ic[x_0];
	F.ul = 15; Ic[x_0] = 1;
	Ic[x_0] = 7; F.ul = 1;
	Ic[x_0] >>= F.ul;
	Ic[x_0] = 7; F.ul = 1;
	F.ul = 15; Isc[x_1] = 1;
	F.ul >>= Isc[x_1];
	F.ul = 15; Isc[x_1] = 1;
	Isc[x_1] = 8; F.ul = 1;
	Isc[x_1] >>= F.ul;
	Isc[x_1] = 8; F.ul = 1;
	F.ul = 15; Is[x_2] = 1;
	F.ul >>= Is[x_2];
	F.ul = 15; Is[x_2] = 1;
	Is[x_2] = 9; F.ul = 1;
	Is[x_2] >>= F.ul;
	Is[x_2] = 9; F.ul = 1;
	F.ul = 15; Ii[x_3] = 1;
	F.ul >>= Ii[x_3];
	F.ul = 15; Ii[x_3] = 1;
	Ii[x_3] = 10; F.ul = 1;
	Ii[x_3] >>= F.ul;
	Ii[x_3] = 10; F.ul = 1;
	F.ul = 15; Iuc[x_4] = 1;
	F.ul >>= Iuc[x_4];
	F.ul = 15; Iuc[x_4] = 1;
	Iuc[x_4] = 11; F.ul = 1;
	Iuc[x_4] >>= F.ul;
	Iuc[x_4] = 11; F.ul = 1;
	F.ul = 15; Ius[x_5] = 1;
	F.ul >>= Ius[x_5];
	F.ul = 15; Ius[x_5] = 1;
	Ius[x_5] = 12; F.ul = 1;
	Ius[x_5] >>= F.ul;
	Ius[x_5] = 12; F.ul = 1;
	F.ul = 15; Iui[x_6] = 1;
	F.ul >>= Iui[x_6];
	F.ul = 15; Iui[x_6] = 1;
	Iui[x_6] = 13; F.ul = 1;
	Iui[x_6] >>= F.ul;
	Iui[x_6] = 13; F.ul = 1;
	F.ul = 15; Il[x_7] = 1;
	F.ul >>= Il[x_7];
	F.ul = 15; Il[x_7] = 1;
	Il[x_7] = 14; F.ul = 1;
	Il[x_7] >>= F.ul;
	Il[x_7] = 14; F.ul = 1;
	F.ul = 15; Iul[x_8] = 1;
	F.ul >>= Iul[x_8];
	F.ul = 15; Iul[x_8] = 1;
	Iul[x_8] = 15; F.ul = 1;
	Iul[x_8] >>= F.ul;
	Iul[x_8] = 15; F.ul = 1;
	
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\rsh.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "o.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Ac = 7;
	auto SCHAR Asc = 8;
	auto SHORT As = 9;
	auto INT Ai = 10;
	auto UCHAR Auc = 11;
	auto USHORT Aus = 12;
	auto UINT Aui = 13;
	auto LONG Al = 14;
	auto ULONG Aul = 15;
	auto FLOAT Af = 16;
	auto DOUBLE Ad = 17;
	auto LDOUBLE Ald = 18;
	{
	{
	Ac = 7;
	O_c = 1;

	break_here:

	O_c = 7;
	Ac = 1;
	Ac = 7;
	O_sc = 1;
	O_sc = 8;
	Ac = 1;
	Ac = 7;
	O_s = 1;
	O_s = 9;
	Ac = 1;
	Ac = 7;
	O_i = 1;
	O_i = 10;
	Ac = 1;
	Ac = 7;
	O_uc = 1;
	O_uc = 11;
	Ac = 1;
	Ac = 7;
	O_us = 1;
	O_us = 12;
	Ac = 1;
	Ac = 7;
	O_ui = 1;
	O_ui = 13;
	Ac = 1;
	Ac = 7;
	O_l = 1;
	O_l = 14;
	Ac = 1;
	Ac = 7;
	O_ul = 1;
	O_ul = 15;
	Ac = 1;
	Asc = 8;
	O_c = 1;
	O_c = 7;
	Asc = 1;
	Asc = 8;
	O_sc = 1;
	O_sc = 8;
	Asc = 1;
	Asc = 8;
	O_s = 1;
	O_s = 9;
	Asc = 1;
	Asc = 8;
	O_i = 1;
	O_i = 10;
	Asc = 1;
	Asc = 8;
	O_uc = 1;
	O_uc = 11;
	Asc = 1;
	Asc = 8;
	O_us = 1;
	O_us = 12;
	Asc = 1;
	Asc = 8;
	O_ui = 1;
	O_ui = 13;
	Asc = 1;
	Asc = 8;
	O_l = 1;
	O_l = 14;
	Asc = 1;
	Asc = 8;
	O_ul = 1;
	O_ul = 15;
	Asc = 1;
	As = 9;
	O_c = 1;
	O_c = 7;
	As = 1;
	As = 9;
	O_sc = 1;
	O_sc = 8;
	As = 1;
	As = 9;
	O_s = 1;
	O_s = 9;
	As = 1;
	As = 9;
	O_i = 1;
	O_i = 10;
	As = 1;
	As = 9;
	O_uc = 1;
	O_uc = 11;
	As = 1;
	As = 9;
	O_us = 1;
	O_us = 12;
	As = 1;
	As = 9;
	O_ui = 1;
	O_ui = 13;
	As = 1;
	As = 9;
	O_l = 1;
	O_l = 14;
	As = 1;
	As = 9;
	O_ul = 1;
	O_ul = 15;
	As = 1;
	Ai = 10;
	O_c = 1;
	O_c = 7;
	Ai = 1;
	Ai = 10;
	O_sc = 1;
	O_sc = 8;
	Ai = 1;
	Ai = 10;
	O_s = 1;
	O_s = 9;
	Ai = 1;
	Ai = 10;
	O_i = 1;
	O_i = 10;
	Ai = 1;
	Ai = 10;
	O_uc = 1;
	O_uc = 11;
	Ai = 1;
	Ai = 10;
	O_us = 1;
	O_us = 12;
	Ai = 1;
	Ai = 10;
	O_ui = 1;
	O_ui = 13;
	Ai = 1;
	Ai = 10;
	O_l = 1;
	O_l = 14;
	Ai = 1;
	Ai = 10;
	O_ul = 1;
	O_ul = 15;
	Ai = 1;
	Auc = 11;
	O_c = 1;
	O_c = 7;
	Auc = 1;
	Auc = 11;
	O_sc = 1;
	O_sc = 8;
	Auc = 1;
	Auc = 11;
	O_s = 1;
	O_s = 9;
	Auc = 1;
	Auc = 11;
	O_i = 1;
	O_i = 10;
	Auc = 1;
	Auc = 11;
	O_uc = 1;
	O_uc = 11;
	Auc = 1;
	Auc = 11;
	O_us = 1;
	O_us = 12;
	Auc = 1;
	Auc = 11;
	O_ui = 1;
	O_ui = 13;
	Auc = 1;
	Auc = 11;
	O_l = 1;
	O_l = 14;
	Auc = 1;
	Auc = 11;
	O_ul = 1;
	O_ul = 15;
	Auc = 1;
	Aus = 12;
	O_c = 1;
	O_c = 7;
	Aus = 1;
	Aus = 12;
	O_sc = 1;
	O_sc = 8;
	Aus = 1;
	Aus = 12;
	O_s = 1;
	O_s = 9;
	Aus = 1;
	Aus = 12;
	O_i = 1;
	O_i = 10;
	Aus = 1;
	Aus = 12;
	O_uc = 1;
	O_uc = 11;
	Aus = 1;
	Aus = 12;
	O_us = 1;
	O_us = 12;
	Aus = 1;
	Aus = 12;
	O_ui = 1;
	O_ui = 13;
	Aus = 1;
	Aus = 12;
	O_l = 1;
	O_l = 14;
	Aus = 1;
	Aus = 12;
	O_ul = 1;
	O_ul = 15;
	Aus = 1;
	Aui = 13;
	O_c = 1;
	O_c = 7;
	Aui = 1;
	Aui = 13;
	O_sc = 1;
	O_sc = 8;
	Aui = 1;
	Aui = 13;
	O_s = 1;
	O_s = 9;
	Aui = 1;
	Aui = 13;
	O_i = 1;
	O_i = 10;
	Aui = 1;
	Aui = 13;
	O_uc = 1;
	O_uc = 11;
	Aui = 1;
	Aui = 13;
	O_us = 1;
	O_us = 12;
	Aui = 1;
	Aui = 13;
	O_ui = 1;
	O_ui = 13;
	Aui = 1;
	Aui = 13;
	O_l = 1;
	O_l = 14;
	Aui = 1;
	Aui = 13;
	O_ul = 1;
	O_ul = 15;
	Aui = 1;
	Al = 14;
	O_c = 1;
	O_c = 7;
	Al = 1;
	Al = 14;
	O_sc = 1;
	O_sc = 8;
	Al = 1;
	Al = 14;
	O_s = 1;
	O_s = 9;
	Al = 1;
	Al = 14;
	O_i = 1;
	O_i = 10;
	Al = 1;
	Al = 14;
	O_uc = 1;
	O_uc = 11;
	Al = 1;
	Al = 14;
	O_us = 1;
	O_us = 12;
	Al = 1;
	Al = 14;
	O_ui = 1;
	O_ui = 13;
	Al = 1;
	Al = 14;
	O_l = 1;
	O_l = 14;
	Al = 1;
	Al = 14;
	O_ul = 1;
	O_ul = 15;
	Al = 1;
	Aul = 15;
	O_c = 1;
	O_c = 7;
	Aul = 1;
	Aul = 15;
	O_sc = 1;
	O_sc = 8;
	Aul = 1;
	Aul = 15;
	O_s = 1;
	O_s = 9;
	Aul = 1;
	Aul = 15;
	O_i = 1;
	O_i = 10;
	Aul = 1;
	Aul = 15;
	O_uc = 1;
	O_uc = 11;
	Aul = 1;
	Aul = 15;
	O_us = 1;
	O_us = 12;
	Aul = 1;
	Aul = 15;
	O_ui = 1;
	O_ui = 13;
	Aul = 1;
	Aul = 15;
	O_l = 1;
	O_l = 14;
	Aul = 1;
	Aul = 15;
	O_ul = 1;
	O_ul = 15;
	Aul = 1;

	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\xor.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "o.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Ac = 7;
	auto SCHAR Asc = 8;
	auto SHORT As = 9;
	auto INT Ai = 10;
	auto UCHAR Auc = 11;
	auto USHORT Aus = 12;
	auto UINT Aui = 13;
	auto LONG Al = 14;
	auto ULONG Aul = 15;
	auto FLOAT Af = 16;
	auto DOUBLE Ad = 17;
	auto LDOUBLE Ald = 18;
	{
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\types.h ===
/* C-LANCE: The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of this suite corresponds to official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

typedef char CHAR;
typedef short SHORT;
typedef int INT;
typedef long LONG;
typedef float FLOAT;
typedef unsigned int UINT;
typedef unsigned char UCHAR;
typedef unsigned short USHORT;
typedef unsigned int UINT;
typedef unsigned long ULONG;
typedef double DOUBLE;
typedef signed char SCHAR;
typedef long double LDOUBLE;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\uminus.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"
#include "o.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} G, *pG = &G;
	pG->c = 7;
	pG->sc = 8;
	pG->s = 9;
	pG->i = 10;
	pG->uc = 11;
	pG->us = 12;
	pG->ui = 13;
	pG->l = 14;
	pG->ul = 15;
	pG->f = 16;
	pG->d = 17;
	pG->ld = 18;
	{
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\util.c ===
/* Suite++: The Plum Hall Validation Suite for C++
 * VERSION: 1
 * AND      The Plum Hall Validation Suite for C
 * VERSION: 3
 * Unpublished copyright (c) 1991, Plum Hall Inc (Editor)
 * DATE:    91/07/01
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

/*
 * VALUE - the value routines are used to defeat value propagation in
 * optimizing compilers.  We want to make sure that we are testing what we
 * think we are testing, not what the compiler transformed it to.
 * 1988: Some compilers "open-code" all small functions.  Now we have to hide
 * the constants still further.
 */
#include "defs.h"

static int Zero = 0;	

int ivalue FN_DEF1(i,
	int i)
	{
	return i + Zero;
	}

long lvalue FN_DEF1(i,
	long i)
	{
	return i + Zero;
	}

float fvalue FN_DEF1(i,
	double i)
	{
	return (float)i + Zero;
	}

double dvalue FN_DEF1(i,
	double i)
	{
	return i + Zero;
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\timesop.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	auto CHAR Cc = 7;
	auto CHAR *pCc = &Cc;
	auto CHAR **ppCc = &pCc;
	auto SCHAR Csc = 8;
	auto SCHAR *pCsc = &Csc;
	auto SCHAR **ppCsc = &pCsc;
	auto SHORT Cs = 9;
	auto SHORT *pCs = &Cs;
	auto SHORT **ppCs = &pCs;
	auto INT Ci = 10;
	auto INT *pCi = &Ci;
	auto INT **ppCi = &pCi;
	auto UCHAR Cuc = 11;
	auto UCHAR *pCuc = &Cuc;
	auto UCHAR **ppCuc = &pCuc;
	auto USHORT Cus = 12;
	auto USHORT *pCus = &Cus;
	auto USHORT **ppCus = &pCus;
	auto UINT Cui = 13;
	auto UINT *pCui = &Cui;
	auto UINT **ppCui = &pCui;
	auto LONG Cl = 14;
	auto LONG *pCl = &Cl;
	auto LONG **ppCl = &pCl;
	auto ULONG Cul = 15;
	auto ULONG *pCul = &Cul;
	auto ULONG **ppCul = &pCul;
	auto FLOAT Cf = 16;
	auto FLOAT *pCf = &Cf;
	auto FLOAT **ppCf = &pCf;
	auto DOUBLE Cd = 17;
	auto DOUBLE *pCd = &Cd;
	auto DOUBLE **ppCd = &pCd;
	auto LDOUBLE Cld = 18;
	auto LDOUBLE *pCld = &Cld;
	auto LDOUBLE **ppCld = &pCld;
	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} D;
	auto D D1;
	auto D D2;
	auto D D3;
	auto D D4;
	auto D D5;
	auto D D6;
	auto D D7;
	auto D D8;
	auto D D9;
	auto D D10;
	auto D D11;
	auto D D12;
	D1.c = 7;
	D2.sc = 8;
	D3.s = 9;
	D4.i = 10;
	D5.uc = 11;
	D6.us = 12;
	D7.ui = 13;
	D8.l = 14;
	D9.ul = 15;
	D10.f = 16;
	D11.d = 17;
	D12.ld = 18;
	{
	break_here:
	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\bin\src\xoreq.c ===
/* The Plum Hall Validation Suite for C
 * Unpublished copyright (c) 1986-1991, Chiron Systems Inc and Plum Hall Inc.
 * VERSION: 3
 * DATE:    91/07/01
 * The "ANSI" mode of the Suite corresponds to the official ANSI C, X3.159-1989.
 * As per your license agreement, your distribution is not to be moved or copied outside the Designated Site
 * without specific permission from Plum Hall Inc.
 */

#include <windows.h>
#include "types.h"

int PASCAL WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lszCmdLine, int nCmdShow)

	{
	typedef union {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} E;
	auto E E1, *pE1 = &E1;
	auto E E2, *pE2 = &E2;
	auto E E3, *pE3 = &E3;
	auto E E4, *pE4 = &E4;
	auto E E5, *pE5 = &E5;
	auto E E6, *pE6 = &E6;
	auto E E7, *pE7 = &E7;
	auto E E8, *pE8 = &E8;
	auto E E9, *pE9 = &E9;
	auto E E10, *pE10 = &E10;
	auto E E11, *pE11 = &E11;
	auto E E12, *pE12 = &E12;
	pE1->c = 7;
	pE2->sc = 8;
	pE3->s = 9;
	pE4->i = 10;
	pE5->uc = 11;
	pE6->us = 12;
	pE7->ui = 13;
	pE8->l = 14;
	pE9->ul = 15;
	pE10->f = 16;
	pE11->d = 17;
	pE12->ld = 18;
	{
	auto struct {
		CHAR c;
		SHORT s;
		INT i;
		UCHAR uc;
		USHORT us;
		UINT ui;
		LONG l;
		ULONG ul;
		FLOAT f;
		DOUBLE d;
		SCHAR sc;
		LDOUBLE ld;
		} F;
	F.c = 7;
	F.sc = 8;
	F.s = 9;
	F.i = 10;
	F.uc = 11;
	F.us = 12;
	F.ui = 13;
	F.l = 14;
	F.ul = 15;
	F.f = 16;
	F.d = 17;
	F.ld = 18;
	{
	pE1->c = 7; F.c = 7;
	pE1->c ^= F.c;

	break_here:

	pE1->c = 7;
	F.c = 7; pE1->c = 7;
	F.c ^= pE1->c;
	F.c = 7;
	pE1->c = 7; F.sc = 8;
	pE1->c ^= F.sc;
	pE1->c = 7;
	F.sc = 8; pE1->c = 7;
	F.sc ^= pE1->c;
	F.sc = 8;
	pE1->c = 7; F.s = 9;
	pE1->c ^= F.s;
	pE1->c = 7;
	F.s = 9; pE1->c = 7;
	F.s ^= pE1->c;
	F.s = 9;
	pE1->c = 7; F.i = 10;
	pE1->c ^= F.i;
	pE1->c = 7;
	F.i = 10; pE1->c = 7;
	F.i ^= pE1->c;
	F.i = 10;
	pE1->c = 7; F.uc = 11;
	pE1->c ^= F.uc;
	pE1->c = 7;
	F.uc = 11; pE1->c = 7;
	F.uc ^= pE1->c;
	F.uc = 11;
	pE1->c = 7; F.us = 12;
	pE1->c ^= F.us;
	pE1->c = 7;
	F.us = 12; pE1->c = 7;
	F.us ^= pE1->c;
	F.us = 12;
	pE1->c = 7; F.ui = 13;
	pE1->c ^= F.ui;
	pE1->c = 7;
	F.ui = 13; pE1->c = 7;
	F.ui ^= pE1->c;
	F.ui = 13;
	pE1->c = 7; F.l = 14;
	pE1->c ^= F.l;
	pE1->c = 7;
	F.l = 14; pE1->c = 7;
	F.l ^= pE1->c;
	F.l = 14;
	pE1->c = 7; F.ul = 15;
	pE1->c ^= F.ul;
	pE1->c = 7;
	F.ul = 15; pE1->c = 7;
	F.ul ^= pE1->c;
	F.ul = 15;
	pE2->sc = 8; F.c = 7;
	pE2->sc ^= F.c;
	pE2->sc = 8;
	F.c = 7; pE2->sc = 8;
	F.c ^= pE2->sc;
	F.c = 7;
	pE2->sc = 8; F.sc = 8;
	pE2->sc ^= F.sc;
	pE2->sc = 8;
	F.sc = 8; pE2->sc = 8;
	F.sc ^= pE2->sc;
	F.sc = 8;
	pE2->sc = 8; F.s = 9;
	pE2->sc ^= F.s;
	pE2->sc = 8;
	F.s = 9; pE2->sc = 8;
	F.s ^= pE2->sc;
	F.s = 9;
	pE2->sc = 8; F.i = 10;
	pE2->sc ^= F.i;
	pE2->sc = 8;
	F.i = 10; pE2->sc = 8;
	F.i ^= pE2->sc;
	F.i = 10;
	pE2->sc = 8; F.uc = 11;
	pE2->sc ^= F.uc;
	pE2->sc = 8;
	F.uc = 11; pE2->sc = 8;
	F.uc ^= pE2->sc;
	F.uc = 11;
	pE2->sc = 8; F.us = 12;
	pE2->sc ^= F.us;
	pE2->sc = 8;
	F.us = 12; pE2->sc = 8;
	F.us ^= pE2->sc;
	F.us = 12;
	pE2->sc = 8; F.ui = 13;
	pE2->sc ^= F.ui;
	pE2->sc = 8;
	F.ui = 13; pE2->sc = 8;
	F.ui ^= pE2->sc;
	F.ui = 13;
	pE2->sc = 8; F.l = 14;
	pE2->sc ^= F.l;
	pE2->sc = 8;
	F.l = 14; pE2->sc = 8;
	F.l ^= pE2->sc;
	F.l = 14;
	pE2->sc = 8; F.ul = 15;
	pE2->sc ^= F.ul;
	pE2->sc = 8;
	F.ul = 15; pE2->sc = 8;
	F.ul ^= pE2->sc;
	F.ul = 15;
	pE3->s = 9; F.c = 7;
	pE3->s ^= F.c;
	pE3->s = 9;
	F.c = 7; pE3->s = 9;
	F.c ^= pE3->s;
	F.c = 7;
	pE3->s = 9; F.sc = 8;
	pE3->s ^= F.sc;
	pE3->s = 9;
	F.sc = 8; pE3->s = 9;
	F.sc ^= pE3->s;
	F.sc = 8;
	pE3->s = 9; F.s = 9;
	pE3->s ^= F.s;
	pE3->s = 9;
	F.s = 9; pE3->s = 9;
	F.s ^= pE3->s;
	F.s = 9;
	pE3->s = 9; F.i = 10;
	pE3->s ^= F.i;
	pE3->s = 9;
	F.i = 10; pE3->s = 9;
	F.i ^= pE3->s;
	F.i = 10;
	pE3->s = 9; F.uc = 11;
	pE3->s ^= F.uc;
	pE3->s = 9;
	F.uc = 11; pE3->s = 9;
	F.uc ^= pE3->s;
	F.uc = 11;
	pE3->s = 9; F.us = 12;
	pE3->s ^= F.us;
	pE3->s = 9;
	F.us = 12; pE3->s = 9;
	F.us ^= pE3->s;
	F.us = 12;
	pE3->s = 9; F.ui = 13;
	pE3->s ^= F.ui;
	pE3->s = 9;
	F.ui = 13; pE3->s = 9;
	F.ui ^= pE3->s;
	F.ui = 13;
	pE3->s = 9; F.l = 14;
	pE3->s ^= F.l;
	pE3->s = 9;
	F.l = 14; pE3->s = 9;
	F.l ^= pE3->s;
	F.l = 14;
	pE3->s = 9; F.ul = 15;
	pE3->s ^= F.ul;
	pE3->s = 9;
	F.ul = 15; pE3->s = 9;
	F.ul ^= pE3->s;
	F.ul = 15;
	pE4->i = 10; F.c = 7;
	pE4->i ^= F.c;
	pE4->i = 10;
	F.c = 7; pE4->i = 10;
	F.c ^= pE4->i;
	F.c = 7;
	pE4->i = 10; F.sc = 8;
	pE4->i ^= F.sc;
	pE4->i = 10;
	F.sc = 8; pE4->i = 10;
	F.sc ^= pE4->i;
	F.sc = 8;
	pE4->i = 10; F.s = 9;
	pE4->i ^= F.s;
	pE4->i = 10;
	F.s = 9; pE4->i = 10;
	F.s ^= pE4->i;
	F.s = 9;
	pE4->i = 10; F.i = 10;
	pE4->i ^= F.i;
	pE4->i = 10;
	F.i = 10; pE4->i = 10;
	F.i ^= pE4->i;
	F.i = 10;
	pE4->i = 10; F.uc = 11;
	pE4->i ^= F.uc;
	pE4->i = 10;
	F.uc = 11; pE4->i = 10;
	F.uc ^= pE4->i;
	F.uc = 11;
	pE4->i = 10; F.us = 12;
	pE4->i ^= F.us;
	pE4->i = 10;
	F.us = 12; pE4->i = 10;
	F.us ^= pE4->i;
	F.us = 12;
	pE4->i = 10; F.ui = 13;
	pE4->i ^= F.ui;
	pE4->i = 10;
	F.ui = 13; pE4->i = 10;
	F.ui ^= pE4->i;
	F.ui = 13;
	pE4->i = 10; F.l = 14;
	pE4->i ^= F.l;
	pE4->i = 10;
	F.l = 14; pE4->i = 10;
	F.l ^= pE4->i;
	F.l = 14;
	pE4->i = 10; F.ul = 15;
	pE4->i ^= F.ul;
	pE4->i = 10;
	F.ul = 15; pE4->i = 10;
	F.ul ^= pE4->i;
	F.ul = 15;
	pE5->uc = 11; F.c = 7;
	pE5->uc ^= F.c;
	pE5->uc = 11;
	F.c = 7; pE5->uc = 11;
	F.c ^= pE5->uc;
	F.c = 7;
	pE5->uc = 11; F.sc = 8;
	pE5->uc ^= F.sc;
	pE5->uc = 11;
	F.sc = 8; pE5->uc = 11;
	F.sc ^= pE5->uc;
	F.sc = 8;
	pE5->uc = 11; F.s = 9;
	pE5->uc ^= F.s;
	pE5->uc = 11;
	F.s = 9; pE5->uc = 11;
	F.s ^= pE5->uc;
	F.s = 9;
	pE5->uc = 11; F.i = 10;
	pE5->uc ^= F.i;
	pE5->uc = 11;
	F.i = 10; pE5->uc = 11;
	F.i ^= pE5->uc;
	F.i = 10;
	pE5->uc = 11; F.uc = 11;
	pE5->uc ^= F.uc;
	pE5->uc = 11;
	F.uc = 11; pE5->uc = 11;
	F.uc ^= pE5->uc;
	F.uc = 11;
	pE5->uc = 11; F.us = 12;
	pE5->uc ^= F.us;
	pE5->uc = 11;
	F.us = 12; pE5->uc = 11;
	F.us ^= pE5->uc;
	F.us = 12;
	pE5->uc = 11; F.ui = 13;
	pE5->uc ^= F.ui;
	pE5->uc = 11;
	F.ui = 13; pE5->uc = 11;
	F.ui ^= pE5->uc;
	F.ui = 13;
	pE5->uc = 11; F.l = 14;
	pE5->uc ^= F.l;
	pE5->uc = 11;
	F.l = 14; pE5->uc = 11;
	F.l ^= pE5->uc;
	F.l = 14;
	pE5->uc = 11; F.ul = 15;
	pE5->uc ^= F.ul;
	pE5->uc = 11;
	F.ul = 15; pE5->uc = 11;
	F.ul ^= pE5->uc;
	F.ul = 15;
	pE6->us = 12; F.c = 7;
	pE6->us ^= F.c;
	pE6->us = 12;
	F.c = 7; pE6->us = 12;
	F.c ^= pE6->us;
	F.c = 7;
	pE6->us = 12; F.sc = 8;
	pE6->us ^= F.sc;
	pE6->us = 12;
	F.sc = 8; pE6->us = 12;
	F.sc ^= pE6->us;
	F.sc = 8;
	pE6->us = 12; F.s = 9;
	pE6->us ^= F.s;
	pE6->us = 12;
	F.s = 9; pE6->us = 12;
	F.s ^= pE6->us;
	F.s = 9;
	pE6->us = 12; F.i = 10;
	pE6->us ^= F.i;
	pE6->us = 12;
	F.i = 10; pE6->us = 12;
	F.i ^= pE6->us;
	F.i = 10;
	pE6->us = 12; F.uc = 11;
	pE6->us ^= F.uc;
	pE6->us = 12;
	F.uc = 11; pE6->us = 12;
	F.uc ^= pE6->us;
	F.uc = 11;
	pE6->us = 12; F.us = 12;
	pE6->us ^= F.us;
	pE6->us = 12;
	F.us = 12; pE6->us = 12;
	F.us ^= pE6->us;
	F.us = 12;
	pE6->us = 12; F.ui = 13;
	pE6->us ^= F.ui;
	pE6->us = 12;
	F.ui = 13; pE6->us = 12;
	F.ui ^= pE6->us;
	F.ui = 13;
	pE6->us = 12; F.l = 14;
	pE6->us ^= F.l;
	pE6->us = 12;
	F.l = 14; pE6->us = 12;
	F.l ^= pE6->us;
	F.l = 14;
	pE6->us = 12; F.ul = 15;
	pE6->us ^= F.ul;
	pE6->us = 12;
	F.ul = 15; pE6->us = 12;
	F.ul ^= pE6->us;
	F.ul = 15;
	pE7->ui = 13; F.c = 7;
	pE7->ui ^= F.c;
	pE7->ui = 13;
	F.c = 7; pE7->ui = 13;
	F.c ^= pE7->ui;
	F.c = 7;
	pE7->ui = 13; F.sc = 8;
	pE7->ui ^= F.sc;
	pE7->ui = 13;
	F.sc = 8; pE7->ui = 13;
	F.sc ^= pE7->ui;
	F.sc = 8;
	pE7->ui = 13; F.s = 9;
	pE7->ui ^= F.s;
	pE7->ui = 13;
	F.s = 9; pE7->ui = 13;
	F.s ^= pE7->ui;
	F.s = 9;
	pE7->ui = 13; F.i = 10;
	pE7->ui ^= F.i;
	pE7->ui = 13;
	F.i = 10; pE7->ui = 13;
	F.i ^= pE7->ui;
	F.i = 10;
	pE7->ui = 13; F.uc = 11;
	pE7->ui ^= F.uc;
	pE7->ui = 13;
	F.uc = 11; pE7->ui = 13;
	F.uc ^= pE7->ui;
	F.uc = 11;
	pE7->ui = 13; F.us = 12;
	pE7->ui ^= F.us;
	pE7->ui = 13;
	F.us = 12; pE7->ui = 13;
	F.us ^= pE7->ui;
	F.us = 12;
	pE7->ui = 13; F.ui = 13;
	pE7->ui ^= F.ui;
	pE7->ui = 13;
	F.ui = 13; pE7->ui = 13;
	F.ui ^= pE7->ui;
	F.ui = 13;
	pE7->ui = 13; F.l = 14;
	pE7->ui ^= F.l;
	pE7->ui = 13;
	F.l = 14; pE7->ui = 13;
	F.l ^= pE7->ui;
	F.l = 14;
	pE7->ui = 13; F.ul = 15;
	pE7->ui ^= F.ul;
	pE7->ui = 13;
	F.ul = 15; pE7->ui = 13;
	F.ul ^= pE7->ui;
	F.ul = 15;
	pE8->l = 14; F.c = 7;
	pE8->l ^= F.c;
	pE8->l = 14;
	F.c = 7; pE8->l = 14;
	F.c ^= pE8->l;
	F.c = 7;
	pE8->l = 14; F.sc = 8;
	pE8->l ^= F.sc;
	pE8->l = 14;
	F.sc = 8; pE8->l = 14;
	F.sc ^= pE8->l;
	F.sc = 8;
	pE8->l = 14; F.s = 9;
	pE8->l ^= F.s;
	pE8->l = 14;
	F.s = 9; pE8->l = 14;
	F.s ^= pE8->l;
	F.s = 9;
	pE8->l = 14; F.i = 10;
	pE8->l ^= F.i;
	pE8->l = 14;
	F.i = 10; pE8->l = 14;
	F.i ^= pE8->l;
	F.i = 10;
	pE8->l = 14; F.uc = 11;
	pE8->l ^= F.uc;
	pE8->l = 14;
	F.uc = 11; pE8->l = 14;
	F.uc ^= pE8->l;
	F.uc = 11;
	pE8->l = 14; F.us = 12;
	pE8->l ^= F.us;
	pE8->l = 14;
	F.us = 12; pE8->l = 14;
	F.us ^= pE8->l;
	F.us = 12;
	pE8->l = 14; F.ui = 13;
	pE8->l ^= F.ui;
	pE8->l = 14;
	F.ui = 13; pE8->l = 14;
	F.ui ^= pE8->l;
	F.ui = 13;
	pE8->l = 14; F.l = 14;
	pE8->l ^= F.l;
	pE8->l = 14;
	F.l = 14; pE8->l = 14;
	F.l ^= pE8->l;
	F.l = 14;
	pE8->l = 14; F.ul = 15;
	pE8->l ^= F.ul;
	pE8->l = 14;
	F.ul = 15; pE8->l = 14;
	F.ul ^= pE8->l;
	F.ul = 15;
	pE9->ul = 15; F.c = 7;
	pE9->ul ^= F.c;
	pE9->ul = 15;
	F.c = 7; pE9->ul = 15;
	F.c ^= pE9->ul;
	F.c = 7;
	pE9->ul = 15; F.sc = 8;
	pE9->ul ^= F.sc;
	pE9->ul = 15;
	F.sc = 8; pE9->ul = 15;
	F.sc ^= pE9->ul;
	F.sc = 8;
	pE9->ul = 15; F.s = 9;
	pE9->ul ^= F.s;
	pE9->ul = 15;
	F.s = 9; pE9->ul = 15;
	F.s ^= pE9->ul;
	F.s = 9;
	pE9->ul = 15; F.i = 10;
	pE9->ul ^= F.i;
	pE9->ul = 15;
	F.i = 10; pE9->ul = 15;
	F.i ^= pE9->ul;
	F.i = 10;
	pE9->ul = 15; F.uc = 11;
	pE9->ul ^= F.uc;
	pE9->ul = 15;
	F.uc = 11; pE9->ul = 15;
	F.uc ^= pE9->ul;
	F.uc = 11;
	pE9->ul = 15; F.us = 12;
	pE9->ul ^= F.us;
	pE9->ul = 15;
	F.us = 12; pE9->ul = 15;
	F.us ^= pE9->ul;
	F.us = 12;
	pE9->ul = 15; F.ui = 13;
	pE9->ul ^= F.ui;
	pE9->ul = 15;
	F.ui = 13; pE9->ul = 15;
	F.ui ^= pE9->ul;
	F.ui = 13;
	pE9->ul = 15; F.l = 14;
	pE9->ul ^= F.l;
	pE9->ul = 15;
	F.l = 14; pE9->ul = 15;
	F.l ^= pE9->ul;
	F.l = 14;
	pE9->ul = 15; F.ul = 15;
	pE9->ul ^= F.ul;
	pE9->ul = 15;
	F.ul = 15; pE9->ul = 15;
	F.ul ^= pE9->ul;
	F.ul = 15;

	return 0;
	}}
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i10cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I10CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt10Cases class
//

#include "stdafx.h"
#include "i10cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt10Cases, CDebugTestSet, "Integer10", 10, CIntSubSuite)

												 
void CInt10Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt10Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((**ppus &= (s & s)) > ((rint5 ^ *pc) ^ **ppc))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((((**pps)++ ) + *puc) + (**ppc += (**ppuc != **ppuc)))", 161) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( ! **ppul) != ul) >= (*puc &= (**ppui - rint5)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((us + *pl) != *pc) & ((rint5 || *pui) || ui))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((l += (i / rint4)) * (rint1 ^ (uc > **ppuc)))", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i11cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I11CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt11Cases class
//

#include "stdafx.h"
#include "i11cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt11Cases, CDebugTestSet, "Integer11", 13, CIntSubSuite)

												 
void CInt11Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt11Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

 	WriteLog(cxx.ExpressionValueIs("((*pi + ( -- **ppc)) <= (*pul &= (**ppuc ^ uc)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((*puc >> rint2) > *ps) << (( ! **ppus) > **ppus))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint1 | (us <= rint3)) % (rint4 <= ((s)++ )))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( - *pi) >= *ps) >= (rint4 > ( ++ *puc)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 129) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppl <<= (rint1 &= c)) + (s &= ((uc)++ )))", 194) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 130) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 194) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i11cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I11CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt11Cases class
//

#ifndef __I11CASES_H__
#define __I11CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt11Cases class

class CInt11Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt11Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I11CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i12cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I12CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt12Cases class
//

#ifndef __I12CASES_H__
#define __I12CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt12Cases class

class CInt12Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt12Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I12CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i10cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I10CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt10Cases class
//

#ifndef __I10CASES_H__
#define __I10CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt10Cases class

class CInt10Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt10Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I10CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i12cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I12CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt12Cases class
//

#include "stdafx.h"
#include "i12cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt12Cases, CDebugTestSet, "Integer12", 14, CIntSubSuite)

												 
void CInt12Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt12Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("(((**ppl < **ppui) ^ *pul) != (c / ( - c)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((c /= (**ppi + *pl)) % (*pus = (**ppuc += **ppi)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 138) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("us", 138) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppuc || (**ppuc == ul)) | (c = ((l)-- )))", 97) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 97) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint1 -= (rint3 %= us)) * (s += (rint4 %= uc)))", -34) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", -2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((uc < (*pi % rint4)) <= (rint4 < (**pps % ul)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i13cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I13CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt13Cases class
//

#include "stdafx.h"
#include "i13cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt13Cases, CDebugTestSet, "Integer13", 11, CIntSubSuite)

												 
void CInt13Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt13Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((l && ((i)-- )) == (us ^= ( ! rint5)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("us", 33000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppus | (**ppui & l)) * ((*pui * rint2) >= *pul))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppc /= (rint2 * **ppui)) <= (s += (rint3 < rint5)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( ! i) & **ppui) >> ((uc > *puc) && *pui))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppc *= (**ppui |= rint5)) >= ((*puc % s) == rint2))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 101) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i2cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I2CASES.H
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Declaration of the CInt2Cases class
//

#ifndef __I2CASES_H__
#define __I2CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt2Cases class

class CInt2Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt2Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I2CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i1cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I1CASES.H
//
//  Created by :            Date :
//      MichMa              	12/03/93
//
//  Description :
//      Declaration of the CInt1Cases class
//

#ifndef __I1CASES_H__
#define __I1CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt1Cases class

class CInt1Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt1Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I1CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i2cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I2CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/06/93
//
//  Description :
//      Implementation of the CInt2Cases class
//

#include "stdafx.h"
#include "i2cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt2Cases, CDebugTestSet, "Integer2", 11, CIntSubSuite)

												 
void CInt2Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt2Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();
		
	WriteLog(cxx.ExpressionValueIs("((rint4 -= (rint5 > l)) + (rint1 |= (rint2 ^ *pc)))", 27) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("(((**pps == ui) & c) <= (rint5 &= ( - *pi)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("rint5", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint4 != ( - **ppuc)) || ((s / rint2) / ui))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((ui += (*pi < i)) < (ul || (rint1 - i)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 100) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppui |= ( ++ *pi)) + ((uc / rint1) * l))", 596) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 111) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i3cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I3CASES.H
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Declaration of the CInt3Cases class
//

#ifndef __I3CASES_H__
#define __I3CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt3Cases class

class CInt3Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt3Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I3CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i13cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I13CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt13Cases class
//

#ifndef __I13CASES_H__
#define __I13CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt13Cases class

class CInt13Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt13Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I13CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i1cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I1CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Implementation of the CInt1Cases class
//

#include "stdafx.h"
#include "i1cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt1Cases, CDebugTestSet, "Integer1", 14, CIntSubSuite)

												 
void CInt1Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt1Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((((*pui)++ ) && *puc) << (rint1 < (i / rint3)))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 101) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((rint4 % rint1) | uc) / (((c)-- ) || *pl))", 128) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppl *= (*pc != *pul)) | ((c ^ **pps) ^ *pus))", 33015) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 97) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pc &= ((**ppus)-- )) && (ul &= (rint2 *= **ppi)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 65000) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("us", 32999) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((us <= (s % *ps)) ^ (*pc *= (rint2 &= rint5)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint2", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i3cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I3CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Implementation of the CInt3Cases class
//

#include "stdafx.h"
#include "i3cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt3Cases, CDebugTestSet, "Integer3", 12, CIntSubSuite)

												 
void CInt3Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt3Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((*ps &= (uc & ul)) <= (rint5 |= (*pi == uc)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( ! ul) | *puc) >> (*pul < (**ppus - uc)))", 128) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppus != ((rint3)-- )) ^ (rint1 + (**ppui / **ppul)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint3", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppui ^ (*pl - ui)) == (rint1 ^= (i *= rint3)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("i", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("((ul %= ( -- *ps)) * (( ! *pl) - **ppc))", 4293667296) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("s", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("ul", 65000) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();	
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i6cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I6CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt6Cases class
//

#ifndef __I6CASES_H__
#define __I6CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt6Cases class

class CInt6Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt6Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I6CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i4cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I4CASES.H
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Declaration of the CInt4Cases class
//

#ifndef __I4CASES_H__
#define __I4CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt4Cases class

class CInt4Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt4Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I4CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i5cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I5CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt5Cases class
//

#ifndef __I5CASES_H__
#define __I5CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt5Cases class

class CInt5Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt5Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I5CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i6cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I6CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt6Cases class
//

#include "stdafx.h"
#include "i6cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt6Cases, CDebugTestSet, "Integer6", 13, CIntSubSuite)

												 
void CInt6Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt6Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((*ps &= (uc -= c)) * (rint1 | (rint2 > c)))", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( - **ppuc) >= s) == ((l + rint5) - rint4))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint1 ^= ( ++ uc)) ^ ((c >= ui) >= l))", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 109) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((*puc / **ppuc) <= **ppui) & (ULONG)(**ppl -= (long)(ui ^ **ppus)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", -32811) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pul >>= (*puc &= c)) * (s <<= (**ppui != l)))", 97488) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 4062) ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i5cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I5CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt5Cases class
//

#include "stdafx.h"
#include "i5cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt5Cases, CDebugTestSet, "Integer5", 13, CIntSubSuite)

												 
void CInt5Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt5Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((*ps &= (uc -= c)) * (rint1 | (rint2 > c)))", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( - **ppuc) >= s) == ((l + rint5) - rint4))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint1 ^= ( ++ uc)) ^ ((c >= ui) >= l))", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 109) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((*puc / **ppuc) <= **ppui) & (ULONG)(**ppl -= (long)(ui ^ **ppus)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", -32811) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pul >>= (*puc &= c)) * (s <<= (**ppui != l)))", 97488) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 4062) ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i4cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I4CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Implementation of the CInt4Cases class
//

#include "stdafx.h"
#include "i4cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt4Cases, CDebugTestSet, "Integer4", 12, CIntSubSuite)

												 
void CInt4Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt4Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((*pi & (*pc - l)) <= (*puc != ( ++ ul)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 65001) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( -- rint4) == *pi) - (**pps /= (uc && *pi)))", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint4", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint4 - ( - rint2)) ^ (*pl &= (**ppus %= **ppuc)))", 101) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("us", 104) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint5 |= (uc ^ s)) - ((rint3 / ui) > rint1))", 141) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint5", 141) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pl != ((**ppui)-- )) + (i && (**ppl + **ppc)))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i7cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I7CASES.CPP
//
//  Created by :            Date :
//      MichMa             		12/29/93
//
//  Description :
//      Implementation of the CInt7Cases class
//

#include "stdafx.h"
#include "i7cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt7Cases, CDebugTestSet, "Integer7", 13, CIntSubSuite)

												 
void CInt7Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt7Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((rint1 != (*pui < rint3)) || (**ppul ^= (*ps /= l)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 65000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*ps << ( ! *pui)) - (i |= (c && rint1)))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((rint5 ^ rint2) && **ppc) - (*ps = ((**ppuc)-- )))", -127) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 127) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 128) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**pps /= (**ppi - rint2)) + (**ppc && (*pl + **ppc)))", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((uc += (**ppl < rint3)) != (**ppc ^ ( -- rint1)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 127) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\stdafx.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.CPP
//
//	Created by :			:
//		VCBU QA		
//
//	Description :
//		source file that includes just the standard include
//
//		stdafx.pch will be the pre-compiled header
//		stdafx.obj will contain the pre-compiled type information
//

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i7cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I7CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt7Cases class
//

#ifndef __I7CASES_H__
#define __I7CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt7Cases class

class CInt7Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt7Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I7CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\stdafx.h ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.H
//
//	Created by :			Date :
//		VCBU QA		
//
//	Description :
//		Precompiled header for the test
//
//		Includes core CAFE headers, as contained in the utility headers
//		for the Workbench and all of the workbench's areas.
//

#ifndef __STDAFX_H__
#define __STDAFX_H__

#include <afxwin.h>			// MFC core and standard components
#include <winperf.h>		// skipped in windows.h due to WIN32_LEAN_AND_MEAN
#include <afxext.h> 		// MFC extensions
#include <afxtempl.h>

#include "test.h"
#include "subsuite.h"
#include "support.h"


#endif //__STDAFX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i8cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I8CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//						   
//  Description :
//      Declaration of the CInt8Cases class
//

#ifndef __I8CASES_H__
#define __I8CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt8Cases class

class CInt8Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt8Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I8CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i9cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  I9CASES.H
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Declaration of the CInt9Cases class
//

#ifndef __I9CASES_H__
#define __I9CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "intsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CInt9Cases class

class CInt9Cases : public CDebugTestSet

	{
	DECLARE_TEST(CInt9Cases, CIntSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__I9CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\intsub.h ===
///////////////////////////////////////////////////////////////////////////////
//  INTSUB.H
//
//  Created by :            Date :
//      MichMa              	12/03/93
//
//  Description :
//      Declaration of the CIntSubSuite class
//

#ifndef __INTSUB_H__
#define __INTSUB_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif


///////////////////////////////////////////////////////////////////////////////
// CIntSubSuite class

class CIntSubSuite : public CIDESubSuite
	{
	public:
		DECLARE_SUBSUITE(CIntSubSuite)
		DECLARE_TESTLIST()
	protected:
		void CleanUp(void);
	};

extern BOOL fProjectReady;

#endif //__INTSUB_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\intsub.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  INTSUB.CPP
//
//  Created by :            Date :
//      MichMa              	12/03/93
//
//  Description :
//      implementation of the CIntSubSuite class
//

#include "stdafx.h"
#include "intsub.h"
#include "afxdllx.h"
#include "..\..\core\cleanup.h"

#include "i1cases.h"
#include "i2cases.h"
#include "i3cases.h"
#include "i4cases.h"
#include "i5cases.h"
#include "i6cases.h"
#include "i7cases.h"
#include "i8cases.h"
#include "i9cases.h"
#include "i10cases.h"
#include "i11cases.h"
#include "i12cases.h"
#include "i13cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;


/////////////////////////////////////////////////////////////////////////////
// CIntSubSuite

IMPLEMENT_SUBSUITE(CIntSubSuite, CIDESubSuite, "EE - Integer", "VCQA Debugger")

BEGIN_TESTLIST(CIntSubSuite)
	TEST(CInt1Cases, RUN)
	TEST(CInt2Cases, RUN)
	TEST(CInt3Cases, RUN)
	TEST(CInt4Cases, RUN)
	TEST(CInt5Cases, RUN)
	TEST(CInt6Cases, RUN)
	TEST(CInt7Cases, RUN)
	TEST(CInt8Cases, RUN)
	TEST(CInt9Cases, RUN)
	TEST(CInt10Cases, RUN)
	TEST(CInt11Cases, RUN)
	TEST(CInt12Cases, RUN)
	TEST(CInt13Cases, RUN)
END_TESTLIST()

void CIntSubSuite::CleanUp(void)
	{
	::CleanUp();
	}

BOOL fProjectReady = FALSE;

///////////////////////////////////////////////////////////////////////////////
//	SubSuite initialization
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i9cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I9CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt9Cases class
//

#include "stdafx.h"
#include "i9cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt9Cases, CDebugTestSet, "Integer9", 13, CIntSubSuite)

												 
void CInt9Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt9Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

 	WriteLog(cxx.ExpressionValueIs("((*pl > (i / **pps)) & (**ppul ^= (**ppi | s)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 64999) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pui += (i < i)) == (*pc %= (*pul += **ppl)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 65096) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 100) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((*pc % s) % *pui) >= (rint3 >>= (**ppuc & rint4)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppul -= (rint4 | *pus)) * ((l <= *ps) != rint5))", 32092) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 32092) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pus -= (rint3 < **ppui)) && (*pc >>= (s > *puc)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("c", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("us", 32999) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\int\i8cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  I8CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/29/93
//
//  Description :
//      Implementation of the CInt8Cases class
//

#include "stdafx.h"
#include "i8cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CInt8Cases, CDebugTestSet, "Integer8", 15, CIntSubSuite)

												 
void CInt8Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CInt8Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("int");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();
						  
 	WriteLog(cxx.ExpressionValueIs("(((rint1 % s) > rint1) & (**ppl %= ((rint2)-- )))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((*pl * ui) + **ppui) - (**ppi += (**ppuc /= **ppc)))", 184) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("i", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pl >>= (rint1 >>= rint2)) + (**ppc || ( ! ui)))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint1", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((**ppui = ((rint3)-- )) | (rint4 ^ ( ++ ul)))", 65007) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ul", 65001) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("rint3", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((rint3 == ( -- **ppuc)) - ((l * c) < **ppl))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\aicases.h ===
///////////////////////////////////////////////////////////////////////////////
//  AICASES.H
//
//  Created by :            Date :
//      MichMa              12/03/93
//
//  Description :
//      Declaration of the CAndIfCases class
//

#ifndef __AICASES_H__
#define __AICASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CAndIfCases class

class CAndIfCases : public CDebugTestSet

	{
	DECLARE_TEST(CAndIfCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__AICASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\aicases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  AICASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/10/93
//
//  Description :
//      Implementation of the CAndIfCases class
//

#include "stdafx.h"
#include "aicases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CAndIfCases, CDebugTestSet, "AndIf", 576, CMiscSubSuite)


void CAndIfCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CAndIfCases::Run(void)

	{
	InitProject("andif");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);   
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b1 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b2 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b3 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b4 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b5 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b6 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b7 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b8 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b9 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b10 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b11 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 && ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld && K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("K.b12 && ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld && K.b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	
	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\baecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  BAECASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CBitAndEqCases class
//

#ifndef __BAECASES_H__
#define __BAECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CBitAndEqCases class

class CBitAndEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CBitAndEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__BAECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\baecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  BAECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CBitAndEqCases class
//

#include "stdafx.h"
#include "baecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CBitAndEqCases, CDebugTestSet, "BitAndEq", 324, CMiscSubSuite)


void CBitAndEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CBitAndEqCases::Run(void)

	{
	InitProject("bandeq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("*pBc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCsc", (char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBc", (signed char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCs", (char)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBc", (short int)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCi", (char)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBc", (int)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCuc", (char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBc", (unsigned char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCus", (char)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBc", (unsigned short)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCui", (char)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBc", (unsigned int)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCl", (char)6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBc", (long int)6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBc &= **ppCul", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBc", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCc", (signed char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBsc", (char)0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCs", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBsc", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCi", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBsc", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCuc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBsc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCus", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBsc", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCui", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBsc", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCl", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBsc", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBsc &= **ppCul", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBsc", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCc", (short int)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBs", (char)1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCsc", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBs", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCi", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBs", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCuc", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBs", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCus", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBs", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCui", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBs", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCl", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBs", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBs &= **ppCul", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBs", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCc", (int)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBi", (char)2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCsc", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBi", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCs", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBi", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCuc", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBi", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCus", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBi", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCui", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBi", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCl", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBi", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBi &= **ppCul", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBi", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCc", (unsigned char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBuc", (char)3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCsc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBuc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCs", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBuc", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCi", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBuc", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCus", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBuc", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCui", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBuc", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCl", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBuc", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBuc &= **ppCul", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBuc", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCc", (unsigned short)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBus", (char)4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCsc", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBus", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCs", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBus", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCi", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBus", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCuc", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBus", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCui", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBus", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCl", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBus", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBus &= **ppCul", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBus", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCc", (unsigned int)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBui", (char)5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCsc", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBui", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCs", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBui", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCi", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBui", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCuc", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBui", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCus", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBui", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCl", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBui", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBui &= **ppCul", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBui", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCc", (long int)6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBl", (char)6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCsc", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBl", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCs", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBl", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCi", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBl", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCuc", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBl", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCus", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBl", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCui", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBl", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBl &= **ppCul", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBl", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCc", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc &= *pBul", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCsc", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc &= *pBul", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCs", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs &= *pBul", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCi", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi &= *pBul", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCuc", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc &= *pBul", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCus", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus &= *pBul", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCui", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui &= *pBul", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCl", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl &= *pBul", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*pBul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("*pBul &= **ppCul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul &= *pBul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\asncases.h ===
///////////////////////////////////////////////////////////////////////////////
//  ASNCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CAssignCases class
//

#ifndef __ASNCASES_H__
#define __ASNCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CAssignCases class

class CAssignCases : public CDebugTestSet

    {
	DECLARE_TEST(CAssignCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__ASNCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\bancases.h ===
///////////////////////////////////////////////////////////////////////////////
//  BANCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CBitAndCases class
//

#ifndef __BANCASES_H__
#define __BANCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CBitAndCases class

class CBitAndCases : public CDebugTestSet

    {
	DECLARE_TEST(CBitAndCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__BANCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\bancases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  BANCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CBitAndCases class
//

#include "stdafx.h"
#include "bancases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CBitAndCases, CDebugTestSet, "BitAnd", 162, CMiscSubSuite)


void CBitAndCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CBitAndCases::Run(void)

	{
	InitProject("band");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("pG->c & *Nc()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nsc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Ns()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Ni()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nuc()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nus()", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nui()", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nl()", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->c", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c & *Nul()", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Ns()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Ni()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nuc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nus()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nui()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nl()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->sc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc & *Nul()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->sc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Ns()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Ni()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nuc()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nus()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nui()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nl()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->s", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s & *Nul()", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->s", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nc()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Ns()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Ni()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nuc()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nus()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nui()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nl()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->i", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i & *Nul()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->i", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nc()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->uc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Ns()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->uc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Ni()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nuc()", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nus()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->uc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nui()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->uc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nl()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->uc", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc & *Nul()", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->uc", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nc()", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Ns()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Ni()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nuc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nus()", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nui()", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nl()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->us", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us & *Nul()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->us", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nc()", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nsc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->ui", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Ns()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->ui", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Ni()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->ui", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nuc()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->ui", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nus()", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nui()", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nl()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->ui", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui & *Nul()", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->ui", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nc()", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->l", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nsc()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->l", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Ns()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->l", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Ni()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->l", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nuc()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->l", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nus()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->l", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nui()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->l", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nl()", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l & *Nul()", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nc()", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() & pG->ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nsc()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() & pG->ul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Ns()", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() & pG->ul", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Ni()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() & pG->ul", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nuc()", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() & pG->ul", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nus()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() & pG->ul", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nui()", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() & pG->ul", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nl()", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() & pG->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul & *Nul()", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() & pG->ul", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\asncases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  ASNCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CAssignCases class
//

#include "stdafx.h"
#include "asncases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CAssignCases, CDebugTestSet, "Assign", 576, CMiscSubSuite)


void CAssignCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CAssignCases::Run(void)

	{
	InitProject("assign");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("D1.c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nc()", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D1.c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nsc()", (char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D1.c", (signed char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Ns()", (char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D1.c", (short int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Ni()", (char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D1.c", (int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nuc()", (char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D1.c", (unsigned char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nus()", (char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D1.c", (unsigned short)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nui()", (char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D1.c", (unsigned int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nl()", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D1.c", (long int)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nul()", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D1.c", (unsigned long)7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nf()", (char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D1.c", (float)7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nd()", (char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D1.c", (double)7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c = *Nld()", (char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D1.c", (long double)7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nc()", (signed char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D2.sc", (char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nsc()", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D2.sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Ns()", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D2.sc", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Ni()", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D2.sc", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nuc()", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D2.sc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nus()", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D2.sc", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nui()", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D2.sc", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nl()", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D2.sc", (long int)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nul()", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D2.sc", (unsigned long)8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nf()", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D2.sc", (float)8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nd()", (signed char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D2.sc", (double)8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc = *Nld()", (signed char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)8.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D2.sc", (long double)8.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nc()", (short int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D3.s", (char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nsc()", (short int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D3.s", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Ns()", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D3.s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Ni()", (short int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D3.s", (int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nuc()", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D3.s", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nus()", (short int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D3.s", (unsigned short)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nui()", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D3.s", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nl()", (short int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D3.s", (long int)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nul()", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D3.s", (unsigned long)9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nf()", (short int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D3.s", (float)9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nd()", (short int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D3.s", (double)9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s = *Nld()", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)9.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D3.s", (long double)9.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nc()", (int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D4.i", (char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nsc()", (int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D4.i", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Ns()", (int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D4.i", (short int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Ni()", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D4.i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nuc()", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D4.i", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nus()", (int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D4.i", (unsigned short)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nui()", (int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D4.i", (unsigned int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nl()", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D4.i", (long int)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nul()", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D4.i", (unsigned long)10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nf()", (int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D4.i", (float)10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nd()", (int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D4.i", (double)10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i = *Nld()", (int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)10.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D4.i", (long double)10.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nc()", (unsigned char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D5.uc", (char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nsc()", (unsigned char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D5.uc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Ns()", (unsigned char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D5.uc", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Ni()", (unsigned char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D5.uc", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nuc()", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nus()", (unsigned char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D5.uc", (unsigned short)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nui()", (unsigned char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D5.uc", (unsigned int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nl()", (unsigned char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D5.uc", (long int)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nul()", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D5.uc", (unsigned long)11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nf()", (unsigned char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D5.uc", (float)11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nd()", (unsigned char)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D5.uc", (double)11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc = *Nld()", (unsigned char)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D5.uc", (long double)11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nc()", (unsigned short)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D6.us", (char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nsc()", (unsigned short)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D6.us", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Ns()", (unsigned short)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D6.us", (short int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Ni()", (unsigned short)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D6.us", (int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nuc()", (unsigned short)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D6.us", (unsigned char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nus()", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D6.us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nui()", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D6.us", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nl()", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D6.us", (long int)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nul()", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D6.us", (unsigned long)12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nf()", (unsigned short)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D6.us", (float)12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nd()", (unsigned short)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D6.us", (double)12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us = *Nld()", (unsigned short)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D6.us", (long double)12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nc()", (unsigned int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D7.ui", (char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nsc()", (unsigned int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D7.ui", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Ns()", (unsigned int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D7.ui", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Ni()", (unsigned int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D7.ui", (int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nuc()", (unsigned int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D7.ui", (unsigned char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nus()", (unsigned int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D7.ui", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nui()", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nl()", (unsigned int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D7.ui", (long int)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nul()", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D7.ui", (unsigned long)13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nf()", (unsigned int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D7.ui", (float)13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nd()", (unsigned int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D7.ui", (double)13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui = *Nld()", (unsigned int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D7.ui", (long double)13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nc()", (long int)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D8.l", (char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nsc()", (long int)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D8.l", (signed char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Ns()", (long int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D8.l", (short int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Ni()", (long int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D8.l", (int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nuc()", (long int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D8.l", (unsigned char)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nus()", (long int)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D8.l", (unsigned short)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nui()", (long int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D8.l", (unsigned int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nl()", (long int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nul()", (long int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D8.l", (unsigned long)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nf()", (long int)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D8.l", (float)14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nd()", (long int)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D8.l", (double)14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l = *Nld()", (long int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D8.l", (long double)14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nc()", (unsigned long)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D9.ul", (char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nsc()", (unsigned long)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D9.ul", (signed char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Ns()", (unsigned long)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D9.ul", (short int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Ni()", (unsigned long)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D9.ul", (int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nuc()", (unsigned long)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D9.ul", (unsigned char)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nus()", (unsigned long)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D9.ul", (unsigned short)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nui()", (unsigned long)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D9.ul", (unsigned int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nl()", (unsigned long)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D9.ul", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nul()", (unsigned long)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nf()", (unsigned long)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D9.ul", (float)15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nd()", (unsigned long)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D9.ul", (double)15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul = *Nld()", (unsigned long)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D9.ul", (long double)15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nc()", (float)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D10.f", (char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nsc()", (float)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D10.f", (signed char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Ns()", (float)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D10.f", (short int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Ni()", (float)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D10.f", (int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nuc()", (float)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D10.f", (unsigned char)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nus()", (float)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D10.f", (unsigned short)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nui()", (float)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D10.f", (unsigned int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nl()", (float)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D10.f", (long int)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nul()", (float)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D10.f", (unsigned long)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nf()", (float)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D10.f", (float)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nd()", (float)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D10.f", (double)16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f", (float)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f = *Nld()", (float)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D10.f", (long double)16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nc()", (double)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D11.d", (char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nsc()", (double)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D11.d", (signed char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Ns()", (double)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D11.d", (short int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Ni()", (double)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D11.d", (int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nuc()", (double)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D11.d", (unsigned char)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nus()", (double)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D11.d", (unsigned short)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nui()", (double)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D11.d", (unsigned int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nl()", (double)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D11.d", (long int)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nul()", (double)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D11.d", (unsigned long)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nf()", (double)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D11.d", (float)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nd()", (double)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D11.d", (double)17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d", (double)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d = *Nld()", (double)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D11.d", (long double)17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nc()", (long double)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nc()", (char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nc() = D12.ld", (char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nsc()", (long double)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nsc()", (signed char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nsc() = D12.ld", (signed char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Ns()", (long double)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ns()", (short int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ns() = D12.ld", (short int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Ni()", (long double)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Ni()", (int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Ni() = D12.ld", (int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nuc()", (long double)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nuc()", (unsigned char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nuc() = D12.ld", (unsigned char)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nus()", (long double)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nus()", (unsigned short)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nus() = D12.ld", (unsigned short)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nui()", (long double)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nui()", (unsigned int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nui() = D12.ld", (unsigned int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nl()", (long double)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nl()", (long int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nl() = D12.ld", (long int)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nul()", (long double)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nul()", (unsigned long)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nul() = D12.ld", (unsigned long)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nf()", (long double)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nf()", (float)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nf() = D12.ld", (float)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nd()", (long double)17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nd()", (double)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nd() = D12.ld", (double)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld", (long double)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld = *Nld()", (long double)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("*Nld()", (long double)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*Nld() = D12.ld", (long double)18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\cmpcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  CMPCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CComplCases class
//

#ifndef __CMPCASES_H__
#define __CMPCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CComplCases class

class CComplCases : public CDebugTestSet

    {
	DECLARE_TEST(CComplCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__CMPCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\cmpcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  CMPCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CComplCases class
//

#include "stdafx.h"
#include "cmpcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CComplCases, CDebugTestSet, "Compl", 162, CMiscSubSuite)


void CComplCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CComplCases::Run(void)

	{
	InitProject("compl");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCc", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCsc", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCs", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCi", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCuc", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCus", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)**ppCui", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ **ppCl", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mc()", ~7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Msc()", ~8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ms()", ~9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Mi()", ~10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Muc()", ~11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mus()", ~12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (int)Mui()", ~13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ Ml()", ~14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)**ppCul", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("~ (long)Mul()", ~15L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\divcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  DIVCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CDivCases class
//

#ifndef __DIVCASES_H__
#define __DIVCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CDivCases class

class CDivCases : public CDebugTestSet

    {
	DECLARE_TEST(CDivCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__DIVCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\divcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  DIVCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CDivCases class
//

#include "stdafx.h"
#include "divcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CDivCases, CDebugTestSet, "Div", 288, CMiscSubSuite)


void CDivCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CDivCases::Run(void)

	{
	InitProject("div");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("pE1->c / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D1.c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D1.c", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D1.c", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D1.c", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D1.c", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D1.c", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D2.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D2.sc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D2.sc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D2.sc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D2.sc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D2.sc", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D3.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D3.s", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D3.s", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D3.s", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D3.s", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D3.s", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D4.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D4.i", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D4.i", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D4.i", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D4.i", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D4.i", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D5.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D5.uc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D5.uc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D5.uc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D5.uc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D5.uc", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D6.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D6.us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D6.us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D6.us", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D6.us", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D6.us", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D7.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D7.ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D7.ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D7.ui", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D7.ui", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D7.ui", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE1->c", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE2->sc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE3->s", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE4->i", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE5->uc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE6->us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE7->ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D8.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D8.l", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D8.l", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D8.l", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE1->c", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE2->sc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE3->s", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE4->i", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE5->uc", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE6->us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE7->ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D9.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D9.ul", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D9.ul", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D9.ul", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE1->c", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE2->sc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE3->s", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE4->i", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE5->uc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE6->us", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE7->ui", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE8->l", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE9->ul", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D10.f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D10.f", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D10.f / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE1->c", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE2->sc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE3->s", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE4->i", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE5->uc", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE6->us", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE7->ui", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE8->l", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE9->ul", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE10->f", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D11.d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE11->d", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D11.d", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D11.d / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE1->c", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE2->sc", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE3->s", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE4->i", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE5->uc", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE6->us", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE7->ui", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE8->l", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE9->ul", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE10->f / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE10->f", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE11->d / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE11->d", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE12->ld / D12.ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D12.ld / pE12->ld", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\cstcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  CSTCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CCastCases class
//

#ifndef __CSTCASES_H__
#define __CSTCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CCastCases class

class CCastCases : public CDebugTestSet

    {
	DECLARE_TEST(CCastCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__CSTCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\cstcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  CSTCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CCastCases class
//

#include "stdafx.h"
#include "cstcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CCastCases, CDebugTestSet, "Cast", 288, CMiscSubSuite)


void CCastCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CCastCases::Run(void)

	{
	InitProject("cast");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCc", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCc", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCc", 7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCsc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCsc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCsc", 8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCsc", 8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCsc", 8.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCs", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCs", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCs", 9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCs", 9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCs", 9.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCi", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCi", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCi", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCi", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCi", 10.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCuc", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCuc", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCuc", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCuc", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCuc", 11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCus", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCus", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCus", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCus", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCus", 12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->l", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCui", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->ul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCui", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->f", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCui", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->d", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCui", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)ppH->pH->ld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCui", 13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->sc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->s", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->i", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->uc", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->us", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->ui", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCl", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCl", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->ul", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCl", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->f", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCl", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->d", 17L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCl", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)ppH->pH->ld", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCl", 14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->sc", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->s", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->i", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->uc", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->us", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->ui", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCul", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCul", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->ul", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCul", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->f", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCul", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->d", 17L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCul", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)ppH->pH->ld", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCul", 15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->c", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->sc", 8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->s", 9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->i", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->uc", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->us", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->ui", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCf", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->l", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCf", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->ul", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCf", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->f", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCf", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->d", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCf", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)ppH->pH->ld", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCf", 16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->c", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->sc", 8.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->s", 9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->i", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->uc", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->us", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->ui", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCd", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->l", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCd", 17L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->ul", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCd", 17L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->f", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCd", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->d", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCd", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)ppH->pH->ld", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCd", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->c", 7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (char)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->sc", 8.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (signed char)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->s", 9.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (short int)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->i", 10.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (int)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->uc", 11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned char)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->us", 12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned short)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->ui", 13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned int)**ppCld", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->l", 14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long int)**ppCld", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->ul", 15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (unsigned long)**ppCld", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->f", 16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (float)**ppCld", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->d", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (double)**ppCld", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)ppH->pH->ld", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs(" (long double)**ppCld", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\eqcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  EQCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CEqCases class
//

#ifndef __EQCASES_H__
#define __EQCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CEqCases class

class CEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__EQCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\eqcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  EQCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CEqCases class
//

#include "stdafx.h"
#include "eqcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CEqCases, CDebugTestSet, "Eq", 576, CMiscSubSuite)


void CEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CEqCases::Run(void)

	{
	InitProject("eq");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("*pBc == Ic[x_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBc == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ic[x_0] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBc == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Isc[x_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBsc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBsc == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Isc[x_1] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBsc == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Is[x_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBs", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBs == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Is[x_2] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBs == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Ii[x_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBi == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ii[x_3] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBi == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Iuc[x_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBuc == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Iuc[x_4] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBuc == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Ius[x_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBus == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ius[x_5] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBus == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Iui[x_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBui == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Iui[x_6] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBui == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Il[x_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBl == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Il[x_7] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBl == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Iul[x_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBul == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Iul[x_8] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBul == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == If[x_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBf == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("If[x_9] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBf == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Id[x_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBd == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Id[x_10] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd == Ild[x_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBd == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ild[x_11] == *pBd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Ic[x_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Ic[x_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ic[x_0] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Isc[x_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Isc[x_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Isc[x_1] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Is[x_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Is[x_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Is[x_2] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Ii[x_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Ii[x_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ii[x_3] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Iuc[x_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Iuc[x_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iuc[x_4] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Ius[x_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Ius[x_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ius[x_5] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Iui[x_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Iui[x_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iui[x_6] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Il[x_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Il[x_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Il[x_7] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Iul[x_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Iul[x_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Iul[x_8] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == If[x_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("If[x_9] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == If[x_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("If[x_9] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Id[x_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Id[x_10] == *pBld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("*pBld == Id[x_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Id[x_10] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld == Ild[x_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ild[x_11] == *pBld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("*pBld == Ild[x_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ild[x_11] == *pBld") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\gtcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  GTCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CGreaterCases class
//

#ifndef __GTCASES_H__
#define __GTCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CGreaterCases class

class CGreaterCases : public CDebugTestSet

    {
	DECLARE_TEST(CGreaterCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__GTCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  LECASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CLessThanEqCases class
//

#ifndef __LECASES_H__
#define __LECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CLessThanEqCases class

class CLessThanEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CLessThanEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__LECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\gecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  GECASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CGreaterEqCases class
//

#ifndef __GECASES_H__
#define __GECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CGreaterEqCases class

class CGreaterEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CGreaterEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__GECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\gtcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  GTCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CGreaterCases class
//

#include "stdafx.h"
#include "gtcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CGreaterCases, CDebugTestSet, "Greater", 576, CMiscSubSuite)


void CGreaterCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CGreaterCases::Run(void)

	{
	InitProject("gt");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("pL->b1 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b1 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b2 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b3 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b4 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b5 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b6 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b7", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Oc().c > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b7 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b8 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b9 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b10 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b11 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Oc().c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oc().c > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Osc().sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Osc().sc > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Os().s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Os().s > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Oi().i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oi().i > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Ouc().uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ouc().uc > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Ous().us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ous().us > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Oui().ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oui().ui > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Ol().l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Ol().l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ol().l > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Oul().ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Oul().ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Oul().ul > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Of().f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Of().f > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Of().f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Of().f > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Od().d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Od().d > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Od().d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Od().d > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 > Old().ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Old().ld > pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pL->b12 > Old().ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Old().ld > pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\gecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  GECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CGreaterEqCases class
//

#include "stdafx.h"
#include "gecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CGreaterEqCases, CDebugTestSet, "GreaterEq", 576, CMiscSubSuite)


void CGreaterEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CGreaterEqCases::Run(void)

	{
	InitProject("ge");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->c >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->c >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->c >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->sc >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->sc >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->sc >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->sc >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->s >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->s >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->s >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->s >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->s >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->i >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->i >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->i >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->i >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->i >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->i >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->uc >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->uc >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->uc >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->uc >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->uc >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->uc >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->uc >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->us >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->us >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->us >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ui >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ui >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ui >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ui >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ui >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ui >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ui >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ui >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->l >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->l >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->l >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->l >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->l >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->l >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ui >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->l >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ul >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ul >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ul >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ul >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->ul >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ui >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->l >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ul >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->f >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->f >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->f >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->f >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ui >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->l >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ul >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->f >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->d >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->d >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d >= ppH->pH->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("pG->d >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->c >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->sc >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->s >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->i >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->uc >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->us >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ui >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->l >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->ul >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->f >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->f >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->d >= pG->ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("ppH->pH->d >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld >= ppH->pH->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ld >= pG->ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pG->ld >= ppH->pH->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("ppH->pH->ld >= pG->ld") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lsecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  LSECASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CLShiftEqCases class
//

#ifndef __LSECASES_H__
#define __LSECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CLShiftEqCases class

class CLShiftEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CLShiftEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__LSECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  LECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CLessThanEqCases class
//

#include "stdafx.h"
#include "lecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CLessThanEqCases, CDebugTestSet, "LessThanEq", 576, CMiscSubSuite)


void CLessThanEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CLessThanEqCases::Run(void)

	{
	InitProject("le");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("F.c <= Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Asc <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("As <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ai <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Auc <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aus <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.sc <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("As <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ai <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Auc <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aus <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.s <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.s <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ai <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Auc <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aus <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.i <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.i <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.i <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Auc <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aus <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.uc <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.uc <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.uc <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.uc <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aus <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aui <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Al <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Aul <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Al", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Af <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Al", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Aul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ad <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Al", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Aul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Af", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ald <= F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Al", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Aul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Af", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Ad", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld <= Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld <= Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald <= F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld <= Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald <= F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lsecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  LSECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CLShiftEqCases class
//

#include "stdafx.h"
#include "lsecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CLShiftEqCases, CDebugTestSet, "LShiftEq", 324, CMiscSubSuite)


void CLShiftEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CLShiftEqCases::Run(void)

	{
	InitProject("lsheq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->sc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->s", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCc", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->i", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCc", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->uc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->us", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCc", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->ui", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCc", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->l", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCc", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCc <<= ppH->pH->ul", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCc", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->c", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCsc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->s", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCsc", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->i", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCsc", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->uc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCsc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->us", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCsc", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->ui", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCsc", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->l", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCsc", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCsc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCsc <<= ppH->pH->ul", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCsc", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->c", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCs", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->sc", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCs", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->i", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCs", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->uc", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCs", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->us", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCs", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->ui", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCs", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->l", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCs", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCs", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCs <<= ppH->pH->ul", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCs", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->c", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCi", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->sc", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCi", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->s", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCi", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->uc", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCi", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->us", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCi", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->ui", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCi", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->l", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCi", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCi", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCi <<= ppH->pH->ul", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCi", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->c", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCuc", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->sc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCuc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->s", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCuc", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->i", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCuc", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->us", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCuc", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->ui", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCuc", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->l", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCuc", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCuc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCuc <<= ppH->pH->ul", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCuc", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->c", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCus", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->sc", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCus", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->s", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCus", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->i", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCus", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->uc", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCus", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->ui", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCus", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->l", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCus", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCus", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCus <<= ppH->pH->ul", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCus", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->c", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCui", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->sc", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCui", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->s", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCui", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->i", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCui", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->uc", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCui", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->us", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCui", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->l", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCui", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCui <<= ppH->pH->ul", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCui", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->c", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCl", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->sc", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCl", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->s", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCl", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->i", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCl", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->uc", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCl", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->us", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCl", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->ui", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCl", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCl", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCl <<= ppH->pH->ul", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCl", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->c", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->c <<= **ppCul", (char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->sc", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->sc <<= **ppCul", (signed char)16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->s", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->s <<= **ppCul", (short int)18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->i", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->i <<= **ppCul", (int)20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->uc", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->uc <<= **ppCul", (unsigned char)22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->us", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->us <<= **ppCul", (unsigned short)24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->ui", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ui <<= **ppCul", (unsigned int)26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->l", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->l <<= **ppCul", (long int)28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("**ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("**ppCul <<= ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("ppH->pH->ul <<= **ppCul", (unsigned long)30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lshcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  LSHCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CLShiftCases class
//

#ifndef __LSHCASES_H__
#define __LSHCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CLShiftCases class

class CLShiftCases : public CDebugTestSet

    {
	DECLARE_TEST(CLShiftCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__LSHCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\mincases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  MINCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CMinusCases class
//

#include "stdafx.h"
#include "mincases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMinusCases, CDebugTestSet, "Minus", 288, CMiscSubSuite)


void CMinusCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMinusCases::Run(void)

	{
	InitProject("minus");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("*pBc - K.b1", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b2", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBc", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b3", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBc", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b4", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBc", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b5", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBc", -2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBc", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b7", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b8", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBc", -2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b9", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBc", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b10", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBc", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b11", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBc", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc - K.b12", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b1", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBsc", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b2", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBsc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b3", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBsc", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBsc", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b5", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBsc", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b6", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBsc", -2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBsc", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b8", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBsc", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBsc", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b10", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBsc", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b11", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBsc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc - K.b12", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBsc", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b1", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBs", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b2", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBs", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b3", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBs", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b4", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBs", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b5", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBs", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b6", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBs", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b7", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBs", -2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b8", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBs", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b9", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBs", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b10", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBs", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b11", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBs", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs - K.b12", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBs", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b1", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBi", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b2", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBi", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b3", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBi", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b4", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBi", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBi", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b6", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBi", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b7", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBi", -3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBi", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b9", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBi", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b10", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBi", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b11", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBi", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi - K.b12", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBi", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b1", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - (int)*pBuc", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b2", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - (int)*pBuc", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b3", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - (int)*pBuc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b4", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - (int)*pBuc", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b5", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - (int)*pBuc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b6", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - (int)*pBuc", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b7", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - (int)*pBuc", -4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b8", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - (int)*pBuc", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b9", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - (int)*pBuc", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b10", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - (int)*pBuc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b11", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - (int)*pBuc", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBuc - K.b12", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - (int)*pBuc", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b1", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - (int)*pBus", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b2", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - (int)*pBus", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b3", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - (int)*pBus", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b4", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - (int)*pBus", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b5", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - (int)*pBus", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - (int)*pBus", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b7", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - (int)*pBus", -5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b8", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - (int)*pBus", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b9", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - (int)*pBus", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b10", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - (int)*pBus", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b11", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - (int)*pBus", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBus - K.b12", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - (int)*pBus", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b1", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - (int)*pBui", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b2", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - (int)*pBui", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b3", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - (int)*pBui", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b4", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - (int)*pBui", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b5", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - (int)*pBui", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b6", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - (int)*pBui", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b7", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - (int)*pBui", -6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b8", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - (int)*pBui", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b9", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - (int)*pBui", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b10", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - (int)*pBui", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b11", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - (int)*pBui", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(int)*pBui - K.b12", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - (int)*pBui", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b1", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBl", -13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b2", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBl", -12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b3", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBl", -11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b4", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBl", -10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b5", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBl", -9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b6", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBl", -8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b7", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBl", -7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b8", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBl", -9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b9", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBl", -10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b10", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBl", -11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b11", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBl", -12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl - K.b12", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBl", -13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b1", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - (long)*pBul", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b2", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - (long)*pBul", -13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b3", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - (long)*pBul", -12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b4", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - (long)*pBul", -11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b5", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - (long)*pBul", -10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b6", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - (long)*pBul", -9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b7", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - (long)*pBul", -8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b8", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - (long)*pBul", -10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b9", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - (long)*pBul", -11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b10", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - (long)*pBul", -12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b11", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - (long)*pBul", -13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(long)*pBul - K.b12", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - (long)*pBul", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b1", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBf", -15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b2", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBf", -14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b3", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBf", -13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b4", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBf", -12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b5", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBf", -11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b6", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBf", -10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b7", 9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBf", -9.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b8", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBf", -11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b9", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBf", -12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b10", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBf", -13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b11", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBf", -14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf - K.b12", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBf", -15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b1", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBd", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b2", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBd", -15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b3", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBd", -14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b4", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBd", -13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b5", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBd", -12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b6", 11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBd", -11.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b7", 10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBd", -10.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b8", 12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBd", -12.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b9", 13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBd", -13.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b10", 14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBd", -14.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b11", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBd", -15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd - K.b12", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBd", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b1", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b1 - *pBld", -17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b2", 16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b2 - *pBld", -16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b3", 15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b3 - *pBld", -15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b4", 14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b4 - *pBld", -14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b5", 13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b5 - *pBld", -13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b6", 12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b6 - *pBld", -12.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b7", 11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b7 - *pBld", -11.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b8", 13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b8 - *pBld", -13.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b9", 14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b9 - *pBld", -14.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b10", 15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b10 - *pBld", -15.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b11", 16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b11 - *pBld", -16.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld - K.b12", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("K.b12 - *pBld", -17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\ltcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  LTCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CLessThanCases class
//

#include "stdafx.h"
#include "ltcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CLessThanCases, CDebugTestSet, "LessThan", 576, CMiscSubSuite)


void CLessThanCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CLessThanCases::Run(void)

	{
	InitProject("lt");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("**ppCc < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCc < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mc() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Msc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Msc() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Ms()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ms() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mi()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mi() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Muc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Muc() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCc < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCsc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCsc < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCsc < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Msc() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Ms()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ms() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mi()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mi() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Muc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Muc() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCsc < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCsc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCs", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCs < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCs", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCs < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCs < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ms() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mi()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mi() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Muc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Muc() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCs < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCs") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCi < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCi < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCi < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCi < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mi() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Muc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Muc() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCi < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCi") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCuc < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCuc < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCuc < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCuc < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCuc < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Muc() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCuc < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCuc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCus < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mus() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mui()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCus < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCui < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mui() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Ml()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCui < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCui < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCui < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCui < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCui < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCl", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mui() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Ml()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCl < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ml() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mul()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCl < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCl < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCl < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCl", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCl < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCl") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mui() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Ml()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ml() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mul()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCul < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mul() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mf()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCul < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCul < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCul < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mui() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Ml()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ml() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mul()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCf", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mul() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mf()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCf < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mf() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Md()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCf < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCf", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCf < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCf") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mui() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Ml()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ml() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mul()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mul() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mf()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCd", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mf() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Md()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCd < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Md() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd < Mld()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCd", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("**ppCd < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCd") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mc() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mc() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Msc() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Msc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Msc() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ms() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Ms()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ms() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mi() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mi()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mi() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Muc() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Muc()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Muc() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mus() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mus()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mus() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mui() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mui()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mui() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Ml()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ml() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Ml()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ml() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mul()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mul() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mul()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mul() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mf()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mf() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mf()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Mf() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Md()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Md() < **ppCld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Md()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Md() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld < Mld()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Mld() < **ppCld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("**ppCld < Mld()") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Mld() < **ppCld") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\mincases.h ===
///////////////////////////////////////////////////////////////////////////////
//  MINCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CMinusCases class
//

#ifndef __MINCASES_H__
#define __MINCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMinusCases class

class CMinusCases : public CDebugTestSet

    {
	DECLARE_TEST(CMinusCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__MINCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\lshcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  LSHCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CLShiftCases class
//

#include "stdafx.h"
#include "lshcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CLShiftCases, CDebugTestSet, "LShift", 162, CMiscSubSuite)


void CLShiftCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CLShiftCases::Run(void)

	{
	InitProject("lsh");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("pG->c << Pc[x[x_0]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Psc[x[x_1]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->c", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Ps[x[x_2]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->c", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Pi[x[x_3]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->c", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Puc[x[x_4]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->c", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Pus[x[x_5]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->c", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Pui[x[x_6]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->c", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Pl[x[x_7]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->c", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->c << Pul[x[x_8]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->c", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pc[x[x_0]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->sc", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Psc[x[x_1]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->sc", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Ps[x[x_2]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->sc", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pi[x[x_3]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->sc", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Puc[x[x_4]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->sc", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pus[x[x_5]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->sc", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pui[x[x_6]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->sc", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pl[x[x_7]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->sc", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->sc << Pul[x[x_8]]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->sc", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pc[x[x_0]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Psc[x[x_1]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->s", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Ps[x[x_2]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->s", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pi[x[x_3]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->s", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Puc[x[x_4]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->s", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pus[x[x_5]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->s", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pui[x[x_6]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->s", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pl[x[x_7]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->s", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->s << Pul[x[x_8]]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->s", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pc[x[x_0]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->i", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Psc[x[x_1]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->i", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Ps[x[x_2]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->i", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pi[x[x_3]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->i", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Puc[x[x_4]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->i", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pus[x[x_5]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->i", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pui[x[x_6]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->i", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pl[x[x_7]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->i", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->i << Pul[x[x_8]]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->i", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pc[x[x_0]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->uc", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Psc[x[x_1]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->uc", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Ps[x[x_2]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->uc", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pi[x[x_3]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->uc", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Puc[x[x_4]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->uc", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pus[x[x_5]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->uc", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pui[x[x_6]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->uc", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pl[x[x_7]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->uc", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->uc << Pul[x[x_8]]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->uc", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pc[x[x_0]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->us", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Psc[x[x_1]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->us", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Ps[x[x_2]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->us", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pi[x[x_3]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->us", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Puc[x[x_4]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->us", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pus[x[x_5]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->us", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pui[x[x_6]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->us", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pl[x[x_7]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->us", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->us << Pul[x[x_8]]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->us", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pc[x[x_0]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Psc[x[x_1]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->ui", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Ps[x[x_2]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->ui", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pi[x[x_3]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->ui", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Puc[x[x_4]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->ui", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pus[x[x_5]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->ui", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pui[x[x_6]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->ui", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pl[x[x_7]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->ui", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ui << Pul[x[x_8]]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->ui", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pc[x[x_0]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Psc[x[x_1]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->l", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Ps[x[x_2]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->l", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pi[x[x_3]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->l", 20L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Puc[x[x_4]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->l", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pus[x[x_5]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->l", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pui[x[x_6]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->l", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pl[x[x_7]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->l", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->l << Pul[x[x_8]]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->l", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pc[x[x_0]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] << pG->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Psc[x[x_1]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] << pG->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Ps[x[x_2]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] << pG->ul", 18L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pi[x[x_3]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] << pG->ul", 20L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Puc[x[x_4]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] << pG->ul", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pus[x[x_5]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] << pG->ul", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pui[x[x_6]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] << pG->ul", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pl[x[x_7]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] << pG->ul", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pG->ul << Pul[x[x_8]]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] << pG->ul", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\ltcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  LTCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CLessThanCases class
//

#ifndef __LTCASES_H__
#define __LTCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CLessThanCases class

class CLessThanCases : public CDebugTestSet

    {
	DECLARE_TEST(CLessThanCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__LTCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\miscsub.h ===
///////////////////////////////////////////////////////////////////////////////
//  MISCSUB.H
//
//  Created by :            Date :
//      MichMa              	12/03/93
//
//  Description :
//      Declaration of the CMiscSubSuite class
//

#ifndef __MISCSUB_H__
#define __MISCSUB_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif


///////////////////////////////////////////////////////////////////////////////
// CMiscSubSuite class

class CMiscSubSuite : public CIDESubSuite
	{
	public:
		DECLARE_SUBSUITE(CMiscSubSuite)
		DECLARE_TESTLIST()
	protected:
		void CleanUp(void);
	};

extern BOOL fProjectReady;

#endif //__MISCSUB_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\miscsub.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  MISCSUB.CPP
//
//  Created by :            Date :
//      MichMa              	12/03/93
//
//  Description :
//      implementation of the CMiscSubSuite class
//

#include "stdafx.h"
#include "miscsub.h"
#include "afxdllx.h"
#include "..\..\core\cleanup.h"

#include "aicases.h" 
#include "asncases.h"
#include "baecases.h"
#include "bancases.h"
#include "cmpcases.h"
#include "cstcases.h"
#include "divcases.h"
#include "eqcases.h"
#include "gecases.h"
#include "gtcases.h"
#include "lecases.h"
#include "lsecases.h"
#include "lshcases.h"
#include "ltcases.h"
#include "mincases.h"
#include "neqcases.h"
#include "notcases.h"
#include "oelcases.h"
#include "oeqcases.h"
#include "orcases.h"
#include "pdccases.h"
#include "piccases.h"
#include "plucases.h"
#include "qstcases.h"
#include "rsecases.h"
#include "remcases.h"
#include "rmecases.h"
#include "rshcases.h"
#include "topcases.h"
#include "umncases.h"
#include "xorcases.h"
#include "xrecases.h"
					
#undef THIS_FILE	
static char BASED_CODE THIS_FILE[] = __FILE__;
					
					
/////////////////////////////////////////////////////////////////////////////
// CMiscSubSuite

IMPLEMENT_SUBSUITE(CMiscSubSuite, CIDESubSuite, "EE - Misc", "VCQA Debugger")

BEGIN_TESTLIST(CMiscSubSuite)
	TEST(CAndIfCases, RUN)
	TEST(CAssignCases, RUN)
	TEST(CBitAndEqCases, RUN)
	TEST(CBitAndCases, RUN)
	TEST(CComplCases, RUN)
	TEST(CCastCases, RUN)
	TEST(CDivCases, RUN)
	TEST(CEqCases, RUN)
	TEST(CGreaterEqCases, RUN)
	TEST(CGreaterCases, RUN)
	TEST(CLessThanEqCases, RUN)
	TEST(CLShiftEqCases, RUN)
	TEST(CLShiftCases, RUN)
	TEST(CLessThanCases, RUN)
	TEST(CMinusCases, RUN)
	TEST(CNotEqCases, RUN)
	TEST(CNotCases, RUN)
	TEST(COrElseCases, RUN)
	TEST(COrEqCases, RUN)
	TEST(COrCases, RUN)
	TEST(CPostDecCases, RUN)
	TEST(CPreIncCases, RUN)
	TEST(CPlusCases, RUN)
	TEST(CQuestCases, RUN)
	TEST(CRemainCases, RUN)
	TEST(CRemainEqCases, RUN)
	TEST(CRShiftEqCases, RUN)
	TEST(CRShiftCases, RUN)
	TEST(CTimesOpCases, RUN)
	TEST(CUMinusCases, RUN)
	TEST(CXOrCases, RUN)
	TEST(CXOrEqCases, RUN)
END_TESTLIST()

void CMiscSubSuite::CleanUp(void)
	{
	::CleanUp();
	}

BOOL fProjectReady = FALSE;

///////////////////////////////////////////////////////////////////////////////
//	SubSuite initialization
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\neqcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  NEQCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CNotEqCases class
//

#ifndef __NEQCASES_H__
#define __NEQCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CNotEqCases class

class CNotEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CNotEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__NEQCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\oelcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  OELCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the COrElseCases class
//

#ifndef __OELCASES_H__
#define __OELCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  COrElseCases class

class COrElseCases : public CDebugTestSet

    {
	DECLARE_TEST(COrElseCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__OELCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\neqcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  NEQCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CNotEqCases class
//

#include "stdafx.h"
#include "neqcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CNotEqCases, CDebugTestSet, "NotEq", 576, CMiscSubSuite)


void CNotEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CNotEqCases::Run(void)

	{
	InitProject("ne");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("F.c != Jc[x_0][y_0]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.c != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jc[x_0][y_0] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.c != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.c != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.c") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jsc[x_1][y_1]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.sc != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jsc[x_1][y_1] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.sc != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.sc != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.sc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Js[x_2][y_2]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.s != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Js[x_2][y_2] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.s != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.s != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.s") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Ji[x_3][y_3]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.i != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Ji[x_3][y_3] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.i != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.i != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.i") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Juc[x_4][y_4]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.uc != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Juc[x_4][y_4] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.uc != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.uc != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.uc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jus[x_5][y_5]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.us != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jus[x_5][y_5] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.us != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.us != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.us") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jui[x_6][y_6]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ui != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jui[x_6][y_6] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ui != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ui != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.ui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jl[x_7][y_7]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.l", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.l != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jl[x_7][y_7] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.l != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.l", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.l != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.l") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jul[x_8][y_8]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.ul", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ul != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jul[x_8][y_8] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ul != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.ul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ul != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.ul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jf[x_9][y_9]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.f", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.f != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jf[x_9][y_9] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.f != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.f", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.f != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.f") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jd[x_10][y_10]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.d", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.d != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jd[x_10][y_10] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.d != Jld[x_11][y_11]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.d", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.d != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jld[x_11][y_11] != F.d") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jc[x_0][y_0]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jc[x_0][y_0] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jsc[x_1][y_1]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jsc[x_1][y_1] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Js[x_2][y_2]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Js[x_2][y_2] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Ji[x_3][y_3]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ji[x_3][y_3] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Juc[x_4][y_4]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Juc[x_4][y_4] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jus[x_5][y_5]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jus[x_5][y_5] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jui[x_6][y_6]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jui[x_6][y_6] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jl[x_7][y_7]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jl[x_7][y_7]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jl[x_7][y_7] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jul[x_8][y_8]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jul[x_8][y_8]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jul[x_8][y_8] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jf[x_9][y_9]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jf[x_9][y_9]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jf[x_9][y_9] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jd[x_10][y_10]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] != F.ld", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("F.ld != Jd[x_10][y_10]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Jd[x_10][y_10] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("F.ld != Jld[x_11][y_11]", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] != F.ld", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("F.ld != Jld[x_11][y_11]") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsFalse("Jld[x_11][y_11] != F.ld") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\oeqcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  OEQCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the COrEqCases class
//

#include "stdafx.h"
#include "oeqcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(COrEqCases, CDebugTestSet, "OrEq", 324, CMiscSubSuite)


void COrEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void COrEqCases::Run(void)

	{
	InitProject("oreq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("D1.c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE1->c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D1.c", (char)7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE2->sc", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D1.c", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE3->s", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D1.c", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE4->i", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D1.c", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE5->uc", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D1.c", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE6->us", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D1.c", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE7->ui", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D1.c", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE8->l", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D1.c", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D1.c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D1.c |= pE9->ul", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D1.c", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE1->c", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D2.sc", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE2->sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D2.sc", (signed char)8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE3->s", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D2.sc", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE4->i", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D2.sc", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE5->uc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D2.sc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE6->us", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D2.sc", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE7->ui", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D2.sc", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE8->l", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D2.sc", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D2.sc", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D2.sc |= pE9->ul", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D2.sc", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE1->c", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D3.s", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE2->sc", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D3.s", (signed char)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE3->s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D3.s", (short int)9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE4->i", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D3.s", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE5->uc", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D3.s", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE6->us", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D3.s", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE7->ui", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D3.s", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE8->l", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D3.s", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D3.s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D3.s |= pE9->ul", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D3.s", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE1->c", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D4.i", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE2->sc", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D4.i", (signed char)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE3->s", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D4.i", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE4->i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D4.i", (int)10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE5->uc", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D4.i", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE6->us", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D4.i", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE7->ui", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D4.i", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE8->l", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D4.i", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D4.i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D4.i |= pE9->ul", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D4.i", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE1->c", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D5.uc", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE2->sc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D5.uc", (signed char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE3->s", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D5.uc", (short int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE4->i", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D5.uc", (int)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE5->uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D5.uc", (unsigned char)11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE6->us", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D5.uc", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE7->ui", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D5.uc", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE8->l", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D5.uc", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D5.uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D5.uc |= pE9->ul", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D5.uc", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE1->c", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D6.us", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE2->sc", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D6.us", (signed char)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE3->s", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D6.us", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE4->i", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D6.us", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE5->uc", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D6.us", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE6->us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D6.us", (unsigned short)12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE7->ui", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D6.us", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE8->l", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D6.us", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D6.us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D6.us |= pE9->ul", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D6.us", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE1->c", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D7.ui", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE2->sc", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D7.ui", (signed char)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE3->s", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D7.ui", (short int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE4->i", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D7.ui", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE5->uc", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D7.ui", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE6->us", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D7.ui", (unsigned short)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE7->ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D7.ui", (unsigned int)13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE8->l", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D7.ui", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D7.ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D7.ui |= pE9->ul", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D7.ui", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE1->c", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D8.l", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE2->sc", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D8.l", (signed char)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE3->s", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D8.l", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE4->i", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D8.l", (int)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE5->uc", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D8.l", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE6->us", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D8.l", (unsigned short)14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE7->ui", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D8.l", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE8->l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D8.l", (long int)14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D8.l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D8.l |= pE9->ul", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D8.l", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE1->c", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c |= D9.ul", (char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE2->sc", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc |= D9.ul", (signed char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE3->s", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s |= D9.ul", (short int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE4->i", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i |= D9.ul", (int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE5->uc", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc |= D9.ul", (unsigned char)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE6->us", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us |= D9.ul", (unsigned short)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE7->ui", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui |= D9.ul", (unsigned int)15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE8->l", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l |= D9.ul", (long int)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("D9.ul |= pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul |= D9.ul", (unsigned long)15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\notcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  NOTCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CNotCases class
//

#ifndef __NOTCASES_H__
#define __NOTCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CNotCases class

class CNotCases : public CDebugTestSet

    {
	DECLARE_TEST(CNotCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__NOTCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\oeqcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  OEQCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the COrEqCases class
//

#ifndef __OEQCASES_H__
#define __OEQCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  COrEqCases class

class COrEqCases : public CDebugTestSet

    {
	DECLARE_TEST(COrEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__OEQCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\notcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  NOTCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CNotCases class
//

#include "stdafx.h"
#include "notcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CNotCases, CDebugTestSet, "Not", 288, CMiscSubSuite)


void CNotCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CNotCases::Run(void)

	{
	InitProject("not");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D1.c", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D2.sc", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D3.s", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D4.i", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D5.uc", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D6.us", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D7.ui", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D8.l", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D9.ul", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D10.f", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D11.d", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pc[x[x_0]]", !7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Psc[x[x_1]]", !8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Ps[x[x_2]]", !9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pi[x[x_3]]", !10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Puc[x[x_4]]", !11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pus[x[x_5]]", !12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pui[x[x_6]]", !13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pl[x[x_7]]", !14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pul[x[x_8]]", !15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pf[x[x_9]]", !16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pd[x[x_10]]", !17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! D12.ld", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("! Pld[x[x_11]]", !18) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\oelcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  OELCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the COrElseCases class
//

#include "stdafx.h"
#include "oelcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(COrElseCases, CDebugTestSet, "OrElse", 576, CMiscSubSuite)


void COrElseCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void COrElseCases::Run(void)

	{
	InitProject("orelse");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("Ac || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Ac", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ac || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Ac") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Asc || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Asc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("As || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || As") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ai || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Ai") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Auc || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Auc") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aus || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Aus") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aui || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Aui") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Al", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Al || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Al") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Aul", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Aul || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Aul") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Af || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Af", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Af || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Af") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ad || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Ad", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ad || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Ad") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b1 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b1") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b1 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b2 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b2") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b2 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b3", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b3 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b3") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b3 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b4", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b4 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b4") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b4 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b5 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b5") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b5 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b6", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b6 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b6") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b6 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b7 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b7") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b7 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b8 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b8") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b8 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b9", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b9 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b9") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b9 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b10", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b10 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b10") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b10 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b11", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b11 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b11") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b11 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ald || pL->b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pL->b12 || Ald", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("Ald || pL->b12") ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIsTrue("pL->b12 || Ald") ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\orcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  ORCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the COrCases class
//

#include "stdafx.h"
#include "orcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(COrCases, CDebugTestSet, "Or", 162, CMiscSubSuite)


void COrCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void COrCases::Run(void)

	{
	InitProject("or");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pc[x[x_0]]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Ic[x_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Psc[x[x_1]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Ps[x[x_2]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pi[x[x_3]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Puc[x[x_4]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pus[x[x_5]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pui[x[x_6]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Ic[x_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pl[x[x_7]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Ic[x_0]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Ic[x_0]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Isc[x_1]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Psc[x[x_1]]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Isc[x_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Ps[x[x_2]]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Isc[x_1]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pi[x[x_3]]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Isc[x_1]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Puc[x[x_4]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Isc[x_1]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pus[x[x_5]]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Isc[x_1]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pui[x[x_6]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Isc[x_1]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pl[x[x_7]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Isc[x_1]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Isc[x_1]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Is[x_2]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Psc[x[x_1]]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Is[x_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Ps[x[x_2]]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Is[x_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pi[x[x_3]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Is[x_2]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Puc[x[x_4]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Is[x_2]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pus[x[x_5]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Is[x_2]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pui[x[x_6]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Is[x_2]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pl[x[x_7]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Is[x_2]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Is[x_2] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Is[x_2]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Ii[x_3]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Psc[x[x_1]]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Ii[x_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Ps[x[x_2]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Ii[x_3]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pi[x[x_3]]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Ii[x_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Puc[x[x_4]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Ii[x_3]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pus[x[x_5]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Ii[x_3]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pui[x[x_6]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Ii[x_3]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pl[x[x_7]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Ii[x_3]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Ii[x_3]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Iuc[x_4]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Psc[x[x_1]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Iuc[x_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Ps[x[x_2]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Iuc[x_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pi[x[x_3]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Iuc[x_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Puc[x[x_4]]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Iuc[x_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pus[x[x_5]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Iuc[x_4]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pui[x[x_6]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Iuc[x_4]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pl[x[x_7]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Iuc[x_4]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Iuc[x_4]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Ius[x_5]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Psc[x[x_1]]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Ius[x_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Ps[x[x_2]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Ius[x_5]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pi[x[x_3]]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Ius[x_5]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Puc[x[x_4]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Ius[x_5]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pus[x[x_5]]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Ius[x_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pui[x[x_6]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Ius[x_5]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pl[x[x_7]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Ius[x_5]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Ius[x_5]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pc[x[x_0]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Iui[x_6]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Psc[x[x_1]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Iui[x_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Ps[x[x_2]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Iui[x_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pi[x[x_3]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Iui[x_6]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Puc[x[x_4]]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Iui[x_6]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pus[x[x_5]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Iui[x_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pui[x[x_6]]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Iui[x_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pl[x[x_7]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Iui[x_6]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Iui[x_6]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pc[x[x_0]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Il[x_7]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Psc[x[x_1]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Il[x_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Ps[x[x_2]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Il[x_7]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pi[x[x_3]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Il[x_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Puc[x[x_4]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Il[x_7]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pus[x[x_5]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Il[x_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pui[x[x_6]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Il[x_7]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pl[x[x_7]]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Il[x_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Il[x_7] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Il[x_7]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pc[x[x_0]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pc[x[x_0]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Psc[x[x_1]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Psc[x[x_1]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Ps[x[x_2]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ps[x[x_2]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pi[x[x_3]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pi[x[x_3]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Puc[x[x_4]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Puc[x[x_4]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pus[x[x_5]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pus[x[x_5]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pui[x[x_6]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pui[x[x_6]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pl[x[x_7]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pl[x[x_7]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] | Pul[x[x_8]]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Pul[x[x_8]] | Iul[x_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\pdccases.h ===
///////////////////////////////////////////////////////////////////////////////
//  PDCCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CPostDecCases class
//

#ifndef __PDCCASES_H__
#define __PDCCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CPostDecCases class

class CPostDecCases : public CDebugTestSet

    {
	DECLARE_TEST(CPostDecCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__PDCCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\piccases.h ===
///////////////////////////////////////////////////////////////////////////////
//  PICCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CPreIncCases class
//

#ifndef __PICCASES_H__
#define __PICCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CPreIncCases class

class CPreIncCases : public CDebugTestSet

    {
	DECLARE_TEST(CPreIncCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__PICCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\orcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  ORCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the COrCases class
//

#ifndef __ORCASES_H__
#define __ORCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  COrCases class

class COrCases : public CDebugTestSet

    {
	DECLARE_TEST(COrCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__ORCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\pdccases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  PDCCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CPostDecCases class
//

#include "stdafx.h"
#include "pdccases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CPostDecCases, CDebugTestSet, "PostDec", 576, CMiscSubSuite)


void CPostDecCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CPostDecCases::Run(void)

	{
	InitProject("postdec");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE1->c) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE2->sc) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE3->s) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE4->i) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE5->uc) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE6->us) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE7->ui) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE8->l) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE9->ul) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE10->f) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE11->d) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jc[x_0][y_0]) --", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jsc[x_1][y_1]) --", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Js[x_2][y_2]) --", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Ji[x_3][y_3]) --", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Juc[x_4][y_4]) --", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jus[x_5][y_5]) --", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jui[x_6][y_6]) --", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jl[x_7][y_7]) --", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7]", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jul[x_8][y_8]) --", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jf[x_9][y_9]) --", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9]", 15.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jd[x_10][y_10]) --", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (pE12->ld) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs(" (Jld[x_11][y_11]) --", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11]", 17.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\piccases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  PICCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CPreIncCases class
//

#include "stdafx.h"
#include "piccases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CPreIncCases, CDebugTestSet, "PreInc", 576, CMiscSubSuite)


void CPreIncCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CPreIncCases::Run(void)

	{
	InitProject("preinc");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBc) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBsc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBsc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBs) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBs", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBi) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBi", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBuc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBuc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBus) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBus", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBl) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBl", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBf) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBf", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBd) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBd", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE1->c) ", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE2->sc) ", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE3->s) ", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE4->i) ", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE5->uc) ", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE6->us) ", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE7->ui) ", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE8->l) ", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE9->ul) ", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 16L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE10->f) ", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE10->f", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE11->d) ", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE11->d", 18.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (*pBld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("*pBld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("++ (pE12->ld) ", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pE12->ld", 19.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\plucases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  PLUCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CPlusCases class
//

#include "stdafx.h"
#include "plucases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CPlusCases, CDebugTestSet, "Plus", 288, CMiscSubSuite)


void CPlusCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CPlusCases::Run(void)

	{
	InitProject("plus");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("pG->c + Jc[x_0][y_0]", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jsc[x_1][y_1]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Js[x_2][y_2]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->c", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Ji[x_3][y_3]", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->c", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Juc[x_4][y_4]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->c", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jus[x_5][y_5]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->c", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jui[x_6][y_6]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->c", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jl[x_7][y_7]", 21L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->c", 21L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jul[x_8][y_8]", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->c", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jf[x_9][y_9]", 23.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->c", 23.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jd[x_10][y_10]", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->c", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->c + Jld[x_11][y_11]", 25.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->c", 25.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jc[x_0][y_0]", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jsc[x_1][y_1]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->sc", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Js[x_2][y_2]", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->sc", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Ji[x_3][y_3]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->sc", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Juc[x_4][y_4]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->sc", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jus[x_5][y_5]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->sc", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jui[x_6][y_6]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->sc", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jl[x_7][y_7]", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->sc", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jul[x_8][y_8]", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->sc", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jf[x_9][y_9]", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->sc", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jd[x_10][y_10]", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->sc", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->sc + Jld[x_11][y_11]", 26.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->sc", 26.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jc[x_0][y_0]", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->s", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jsc[x_1][y_1]", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->s", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Js[x_2][y_2]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->s", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Ji[x_3][y_3]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->s", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Juc[x_4][y_4]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->s", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jus[x_5][y_5]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->s", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jui[x_6][y_6]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->s", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jl[x_7][y_7]", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->s", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jul[x_8][y_8]", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->s", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jf[x_9][y_9]", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->s", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jd[x_10][y_10]", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->s", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->s + Jld[x_11][y_11]", 27.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->s", 27.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jc[x_0][y_0]", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->i", 17) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jsc[x_1][y_1]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->i", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Js[x_2][y_2]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->i", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Ji[x_3][y_3]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->i", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Juc[x_4][y_4]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->i", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jus[x_5][y_5]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->i", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jui[x_6][y_6]", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->i", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jl[x_7][y_7]", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->i", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jul[x_8][y_8]", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->i", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jf[x_9][y_9]", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->i", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jd[x_10][y_10]", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->i", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->i + Jld[x_11][y_11]", 28.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->i", 28.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jc[x_0][y_0]", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->uc", 18) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jsc[x_1][y_1]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->uc", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Js[x_2][y_2]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->uc", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Ji[x_3][y_3]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->uc", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Juc[x_4][y_4]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->uc", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jus[x_5][y_5]", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->uc", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jui[x_6][y_6]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->uc", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jl[x_7][y_7]", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->uc", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jul[x_8][y_8]", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->uc", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jf[x_9][y_9]", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->uc", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jd[x_10][y_10]", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->uc", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->uc + Jld[x_11][y_11]", 29.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->uc", 29.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jc[x_0][y_0]", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->us", 19) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jsc[x_1][y_1]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->us", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Js[x_2][y_2]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->us", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Ji[x_3][y_3]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->us", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Juc[x_4][y_4]", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->us", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jus[x_5][y_5]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->us", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jui[x_6][y_6]", 25) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->us", 25) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jl[x_7][y_7]", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->us", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jul[x_8][y_8]", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->us", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jf[x_9][y_9]", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->us", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jd[x_10][y_10]", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->us", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->us + Jld[x_11][y_11]", 30.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->us", 30.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jc[x_0][y_0]", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->ui", 20) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jsc[x_1][y_1]", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->ui", 21) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Js[x_2][y_2]", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->ui", 22) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Ji[x_3][y_3]", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->ui", 23) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Juc[x_4][y_4]", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->ui", 24) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jus[x_5][y_5]", 25) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->ui", 25) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jui[x_6][y_6]", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->ui", 26) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jl[x_7][y_7]", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->ui", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jul[x_8][y_8]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->ui", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jf[x_9][y_9]", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->ui", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jd[x_10][y_10]", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->ui", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ui + Jld[x_11][y_11]", 31.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->ui", 31.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jc[x_0][y_0]", 21L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->l", 21L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jsc[x_1][y_1]", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->l", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Js[x_2][y_2]", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->l", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Ji[x_3][y_3]", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->l", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Juc[x_4][y_4]", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->l", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jus[x_5][y_5]", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->l", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jui[x_6][y_6]", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->l", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jl[x_7][y_7]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->l", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jul[x_8][y_8]", 29L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->l", 29L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jf[x_9][y_9]", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->l", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jd[x_10][y_10]", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->l", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->l + Jld[x_11][y_11]", 32.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->l", 32.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jc[x_0][y_0]", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->ul", 22L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jsc[x_1][y_1]", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->ul", 23L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Js[x_2][y_2]", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->ul", 24L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Ji[x_3][y_3]", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->ul", 25L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Juc[x_4][y_4]", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->ul", 26L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jus[x_5][y_5]", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->ul", 27L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jui[x_6][y_6]", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->ul", 28L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jl[x_7][y_7]", 29L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->ul", 29L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jul[x_8][y_8]", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->ul", 30L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jf[x_9][y_9]", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->ul", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jd[x_10][y_10]", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->ul", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ul + Jld[x_11][y_11]", 33.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->ul", 33.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jc[x_0][y_0]", 23.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->f", 23.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jsc[x_1][y_1]", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->f", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Js[x_2][y_2]", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->f", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Ji[x_3][y_3]", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->f", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Juc[x_4][y_4]", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->f", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jus[x_5][y_5]", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->f", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jui[x_6][y_6]", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->f", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jl[x_7][y_7]", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->f", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jul[x_8][y_8]", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->f", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jf[x_9][y_9]", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->f", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jd[x_10][y_10]", 33.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->f", 33.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->f + Jld[x_11][y_11]", 34.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->f", 34.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jc[x_0][y_0]", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->d", 24.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jsc[x_1][y_1]", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->d", 25.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Js[x_2][y_2]", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->d", 26.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Ji[x_3][y_3]", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->d", 27.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Juc[x_4][y_4]", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->d", 28.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jus[x_5][y_5]", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->d", 29.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jui[x_6][y_6]", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->d", 30.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jl[x_7][y_7]", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->d", 31.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jul[x_8][y_8]", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->d", 32.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jf[x_9][y_9]", 33.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->d", 33.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jd[x_10][y_10]", 34.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->d", 34.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->d + Jld[x_11][y_11]", 35.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->d", 35.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jc[x_0][y_0]", 25.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jc[x_0][y_0] + pG->ld", 25.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jsc[x_1][y_1]", 26.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jsc[x_1][y_1] + pG->ld", 26.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Js[x_2][y_2]", 27.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Js[x_2][y_2] + pG->ld", 27.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Ji[x_3][y_3]", 28.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ji[x_3][y_3] + pG->ld", 28.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Juc[x_4][y_4]", 29.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Juc[x_4][y_4] + pG->ld", 29.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jus[x_5][y_5]", 30.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jus[x_5][y_5] + pG->ld", 30.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jui[x_6][y_6]", 31.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jui[x_6][y_6] + pG->ld", 31.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jl[x_7][y_7]", 32.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jl[x_7][y_7] + pG->ld", 32.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jul[x_8][y_8]", 33.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jul[x_8][y_8] + pG->ld", 33.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jf[x_9][y_9]", 34.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jf[x_9][y_9] + pG->ld", 34.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jd[x_10][y_10]", 35.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jd[x_10][y_10] + pG->ld", 35.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("pG->ld + Jld[x_11][y_11]", 36.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Jld[x_11][y_11] + pG->ld", 36.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\plucases.h ===
///////////////////////////////////////////////////////////////////////////////
//  PLUCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CPlusCases class
//

#ifndef __PLUCASES_H__
#define __PLUCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CPlusCases class

class CPlusCases : public CDebugTestSet

    {
	DECLARE_TEST(CPlusCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__PLUCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\qstcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  QSTCASES.H
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Declaration of the CQuestCases class
//

#ifndef __QSTCASES_H__
#define __QSTCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CQuestCases class

class CQuestCases : public CDebugTestSet

    {
	DECLARE_TEST(CQuestCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__QSTCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\remcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  REMCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CRemainCases class
//

#ifndef __REMCASES_H__
#define __REMCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CRemainCases class

class CRemainCases : public CDebugTestSet

    {
	DECLARE_TEST(CRemainCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__REMCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rmecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  RMECASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CRemainEqCases class
//

#ifndef __RMECASES_H__
#define __RMECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CRemainEqCases class

class CRemainEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CRemainEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__RMECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rsecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  RSECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CRShiftEqCases class
//

#include "stdafx.h"
#include "rsecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CRShiftEqCases, CDebugTestSet, "RShiftEq", 324, CMiscSubSuite)


void CRShiftEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CRShiftEqCases::Run(void)

	{
	InitProject("rsheq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Isc[x_1]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Is[x_2]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Ii[x_3]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Iuc[x_4]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Ius[x_5]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Iui[x_6]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Il[x_7]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c >>= Iul[x_8]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Ic[x_0]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Ii[x_3]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Iuc[x_4]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Ius[x_5]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Iui[x_6]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Il[x_7]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc >>= Iul[x_8]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Ic[x_0]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Ii[x_3]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Iuc[x_4]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Ius[x_5]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Iui[x_6]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Il[x_7]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s >>= Iul[x_8]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Ic[x_0]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Isc[x_1]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Is[x_2]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Ius[x_5]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Iui[x_6]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Il[x_7]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.i", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i >>= Iul[x_8]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.i", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Ic[x_0]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Isc[x_1]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Is[x_2]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Ius[x_5]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Iui[x_6]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Il[x_7]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.uc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc >>= Iul[x_8]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.uc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Ic[x_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.us", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Isc[x_1]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Is[x_2]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Ii[x_3]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Iuc[x_4]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Il[x_7]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.us", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us >>= Iul[x_8]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.us", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Ic[x_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Isc[x_1]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Is[x_2]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Ii[x_3]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Iuc[x_4]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Il[x_7]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.ui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui >>= Iul[x_8]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.ui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Ic[x_0]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.l", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Isc[x_1]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Is[x_2]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Ii[x_3]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Iuc[x_4]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Ius[x_5]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Iui[x_6]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l >>= Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Ic[x_0]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ic[x_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ic[x_0] >>= F.ul", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Isc[x_1]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Isc[x_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Isc[x_1] >>= F.ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Is[x_2]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Is[x_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Is[x_2] >>= F.ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Ii[x_3]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ii[x_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ii[x_3] >>= F.ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Iuc[x_4]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iuc[x_4] >>= F.ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Ius[x_5]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ius[x_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Ius[x_5] >>= F.ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Iui[x_6]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iui[x_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iui[x_6] >>= F.ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Il[x_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Il[x_7] >>= F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul >>= Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Iul[x_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("Iul[x_8] >>= F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\qstcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  QSTCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/25/94
//
//  Description :
//      Implementation of the CQuestCases class
//

#include "stdafx.h"
#include "qstcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CQuestCases, CDebugTestSet, "Quest", 576, CMiscSubSuite)


void CQuestCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CQuestCases::Run(void)

	{
	InitProject("quest");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b1", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b2", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jc[x_0][y_0]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b3", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jc[x_0][y_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b4", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jc[x_0][y_0]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b5", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jc[x_0][y_0]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b6", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jc[x_0][y_0]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b8", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jc[x_0][y_0]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b9", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jc[x_0][y_0]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b10", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jc[x_0][y_0]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b11", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jc[x_0][y_0]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jc[x_0][y_0]:K.b12", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jc[x_0][y_0]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jc[x_0][y_0]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jc[x_0][y_0]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b1", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b2", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jsc[x_1][y_1]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b3", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jsc[x_1][y_1]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b4", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jsc[x_1][y_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b5", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jsc[x_1][y_1]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b6", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jsc[x_1][y_1]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b7", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jsc[x_1][y_1]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b8", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jsc[x_1][y_1]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b9", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jsc[x_1][y_1]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b10", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jsc[x_1][y_1]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b11", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jsc[x_1][y_1]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jsc[x_1][y_1]:K.b12", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jsc[x_1][y_1]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jsc[x_1][y_1]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jsc[x_1][y_1]", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b1", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b2", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Js[x_2][y_2]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b3", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Js[x_2][y_2]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b4", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Js[x_2][y_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b5", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Js[x_2][y_2]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b6", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Js[x_2][y_2]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b7", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Js[x_2][y_2]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b8", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Js[x_2][y_2]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b9", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Js[x_2][y_2]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b10", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Js[x_2][y_2]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b11", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Js[x_2][y_2]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Js[x_2][y_2]:K.b12", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Js[x_2][y_2]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Js[x_2][y_2]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Js[x_2][y_2]", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b1", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b2", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Ji[x_3][y_3]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b3", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Ji[x_3][y_3]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b4", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Ji[x_3][y_3]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b5", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Ji[x_3][y_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b6", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Ji[x_3][y_3]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b7", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Ji[x_3][y_3]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b8", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Ji[x_3][y_3]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b9", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Ji[x_3][y_3]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b10", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Ji[x_3][y_3]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b11", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Ji[x_3][y_3]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Ji[x_3][y_3]:K.b12", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Ji[x_3][y_3]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Ji[x_3][y_3]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Ji[x_3][y_3]", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b1", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b2", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Juc[x_4][y_4]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b3", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Juc[x_4][y_4]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b4", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Juc[x_4][y_4]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b5", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Juc[x_4][y_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b6", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Juc[x_4][y_4]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b7", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Juc[x_4][y_4]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b8", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Juc[x_4][y_4]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b9", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Juc[x_4][y_4]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b10", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Juc[x_4][y_4]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b11", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Juc[x_4][y_4]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Juc[x_4][y_4]:K.b12", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Juc[x_4][y_4]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Juc[x_4][y_4]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Juc[x_4][y_4]", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b1", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b2", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jus[x_5][y_5]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b3", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jus[x_5][y_5]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b4", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jus[x_5][y_5]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b5", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jus[x_5][y_5]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b6", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jus[x_5][y_5]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b7", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jus[x_5][y_5]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b8", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jus[x_5][y_5]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b9", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jus[x_5][y_5]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b10", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jus[x_5][y_5]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b11", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jus[x_5][y_5]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jus[x_5][y_5]:K.b12", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jus[x_5][y_5]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jus[x_5][y_5]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jus[x_5][y_5]", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b1", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b2", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jui[x_6][y_6]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b3", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jui[x_6][y_6]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b4", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jui[x_6][y_6]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b5", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jui[x_6][y_6]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b6", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jui[x_6][y_6]", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b7", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jui[x_6][y_6]", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b8", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b8", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jui[x_6][y_6]", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b9", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b9", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jui[x_6][y_6]", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b10", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b10", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jui[x_6][y_6]", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b11", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b11", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jui[x_6][y_6]", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jui[x_6][y_6]:K.b12", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jui[x_6][y_6]:K.b12", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jui[x_6][y_6]", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jui[x_6][y_6]", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b1", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b1", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jl[x_7][y_7]", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b2", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b2", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jl[x_7][y_7]", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b3", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b3", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jl[x_7][y_7]", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b4", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b4", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jl[x_7][y_7]", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b5", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b5", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jl[x_7][y_7]", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b6", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b6", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jl[x_7][y_7]", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b7", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b7", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jl[x_7][y_7]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b8", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b8", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jl[x_7][y_7]", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b9", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b9", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jl[x_7][y_7]", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b10", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b10", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jl[x_7][y_7]", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b11", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b11", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jl[x_7][y_7]", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jl[x_7][y_7]:K.b12", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jl[x_7][y_7]:K.b12", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jl[x_7][y_7]", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jl[x_7][y_7]", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b1", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b1", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jul[x_8][y_8]", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b2", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b2", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jul[x_8][y_8]", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b3", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b3", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jul[x_8][y_8]", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b4", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b4", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jul[x_8][y_8]", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b5", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b5", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jul[x_8][y_8]", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b6", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b6", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jul[x_8][y_8]", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b7", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b7", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jul[x_8][y_8]", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b8", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b8", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jul[x_8][y_8]", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b9", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b9", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jul[x_8][y_8]", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b10", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b10", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jul[x_8][y_8]", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b11", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b11", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jul[x_8][y_8]", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jul[x_8][y_8]:K.b12", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jul[x_8][y_8]:K.b12", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jul[x_8][y_8]", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jul[x_8][y_8]", 15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b1", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b1", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jf[x_9][y_9]", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b2", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b2", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jf[x_9][y_9]", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b3", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b3", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jf[x_9][y_9]", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b4", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b4", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jf[x_9][y_9]", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b5", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b5", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jf[x_9][y_9]", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b6", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b6", 6.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jf[x_9][y_9]", 6.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b7", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b7", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jf[x_9][y_9]", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b8", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b8", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jf[x_9][y_9]", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b9", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b9", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jf[x_9][y_9]", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b10", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b10", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jf[x_9][y_9]", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b11", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b11", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jf[x_9][y_9]", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jf[x_9][y_9]:K.b12", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jf[x_9][y_9]:K.b12", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jf[x_9][y_9]", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jf[x_9][y_9]", 16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b1", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b1", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jd[x_10][y_10]", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b2", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b2", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jd[x_10][y_10]", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b3", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b3", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jd[x_10][y_10]", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b4", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b4", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jd[x_10][y_10]", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b5", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b5", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jd[x_10][y_10]", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b6", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b6", 6.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jd[x_10][y_10]", 6.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b7", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b7", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jd[x_10][y_10]", 7.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b8", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b8", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jd[x_10][y_10]", 5.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b9", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b9", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jd[x_10][y_10]", 4.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b10", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b10", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jd[x_10][y_10]", 3.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b11", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b11", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jd[x_10][y_10]", 2.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jd[x_10][y_10]:K.b12", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jd[x_10][y_10]:K.b12", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jd[x_10][y_10]", 1.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jd[x_10][y_10]", 17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b1", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b1", 1.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b1:Jld[x_11][y_11]", 1.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b1:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b2", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b2", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b2:Jld[x_11][y_11]", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b2:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b3", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b3", 3.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b3:Jld[x_11][y_11]", 3.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b3:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b4", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b4", 4.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b4:Jld[x_11][y_11]", 4.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b4:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b5", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b5", 5.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b5:Jld[x_11][y_11]", 5.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b5:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b6", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b6", 6.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b6:Jld[x_11][y_11]", 6.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b6:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b7", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b7", 7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b7:Jld[x_11][y_11]", 7.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b7:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b8", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b8", 5.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b8:Jld[x_11][y_11]", 5.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b8:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b9", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b9", 4.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b9:Jld[x_11][y_11]", 4.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b9:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b10", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b10", 3.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b10:Jld[x_11][y_11]", 3.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b10:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b11", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b11", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b11:Jld[x_11][y_11]", 2.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b11:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?Jld[x_11][y_11]:K.b12", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?Jld[x_11][y_11]:K.b12", 1.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("true?K.b12:Jld[x_11][y_11]", 1.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("false?K.b12:Jld[x_11][y_11]", 18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\stdafx.cpp ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.CPP
//
//	Created by :			:
//		VCBU QA		
//
//	Description :
//		source file that includes just the standard include
//
//		stdafx.pch will be the pre-compiled header
//		stdafx.obj will contain the pre-compiled type information
//

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rmecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  RMECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CRemainEqCases class
//

#include "stdafx.h"
#include "rmecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CRemainEqCases, CDebugTestSet, "RemainEq", 324, CMiscSubSuite)


void CRemainEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CRemainEqCases::Run(void)

	{
	InitProject("remeq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

    WriteLog(cxx.ExpressionValueIs("*pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->s", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->l", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBc", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBc %= pG->ul", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBc", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBsc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBsc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBsc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBsc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->uc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBsc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBsc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->ui", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBsc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->l", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBsc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBsc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBsc %= pG->ul", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBsc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBs", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBs", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBs", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBs", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->uc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBs", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->us", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBs", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->ui", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBs", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->l", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBs", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBs", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBs %= pG->ul", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBs", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBi", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBi", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBi", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBi", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBi", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->us", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBi", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBi", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->l", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBi", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBi", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBi %= pG->ul", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBi", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBuc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBuc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBuc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBuc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBuc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBuc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->ui", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBuc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->l", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBuc", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBuc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBuc %= pG->ul", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBuc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBus", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBus", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBus", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBus", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBus", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->l", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBus", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBus", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBus %= pG->ul", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBus", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBui", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBui", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBui", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->l", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBui", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBui %= pG->ul", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->c", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBl", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->sc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBl", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->s", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBl", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->i", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBl", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->uc", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBl", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBl", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->ui", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBl", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBl", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBl", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBl %= pG->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBl", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->c", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->c", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->c %= *pBul", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->sc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->sc %= *pBul", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->s", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->s", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->s %= *pBul", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->i", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->i", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->i %= *pBul", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->uc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->uc", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->uc %= *pBul", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->us", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->us", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->us %= *pBul", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ui", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ui %= *pBul", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->l", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->l %= *pBul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("*pBul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("*pBul %= pG->ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver(2);
    WriteLog(cxx.ExpressionValueIs("pG->ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    dbg.StepOver();
    WriteLog(cxx.ExpressionValueIs("pG->ul %= *pBul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\remcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  REMCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CRemainCases class
//

#include "stdafx.h"
#include "remcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CRemainCases, CDebugTestSet, "Remain", 162, CMiscSubSuite)


void CRemainCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CRemainCases::Run(void)

	{
	InitProject("remain");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

    WriteLog(cxx.ExpressionValueIs("pE1->c % Mc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE1->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Msc()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE1->c", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Ms()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE1->c", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Mi()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE1->c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Muc()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE1->c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Mus()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE1->c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Mui()", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE1->c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Ml()", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE1->c", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE1->c % Mul()", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE1->c", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Mc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Msc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE2->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Ms()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE2->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Mi()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Muc()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE2->sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Mus()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE2->sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Mui()", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE2->sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Ml()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE2->sc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE2->sc % Mul()", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE2->sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Mc()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE3->s", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Msc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE3->s", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Ms()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE3->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Mi()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE3->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Muc()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Mus()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE3->s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Mui()", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE3->s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Ml()", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE3->s", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE3->s % Mul()", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE3->s", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Mc()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE4->i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Msc()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE4->i", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Ms()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE4->i", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Mi()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE4->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Muc()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE4->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Mus()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Mui()", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE4->i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Ml()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE4->i", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE4->i % Mul()", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE4->i", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Mc()", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE5->uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Msc()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE5->uc", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Ms()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE5->uc", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Mi()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE5->uc", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Muc()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE5->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Mus()", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE5->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Mui()", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Ml()", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE5->uc", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE5->uc % Mul()", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE5->uc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Mc()", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE6->us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Msc()", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE6->us", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Ms()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE6->us", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Mi()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE6->us", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Muc()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Mus()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE6->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Mui()", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE6->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Ml()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE6->us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE6->us % Mul()", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE6->us", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Mc()", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE7->ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Msc()", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE7->ui", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Ms()", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE7->ui", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Mi()", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE7->ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Muc()", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE7->ui", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Mus()", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE7->ui", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Mui()", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE7->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Ml()", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE7->ui", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE7->ui % Mul()", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE7->ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Mc()", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE8->l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Msc()", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE8->l", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Ms()", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE8->l", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Mi()", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE8->l", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Muc()", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE8->l", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Mus()", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE8->l", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Mui()", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE8->l", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Ml()", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE8->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE8->l % Mul()", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE8->l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Mc()", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mc() % pE9->ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Msc()", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Msc() % pE9->ul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Ms()", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ms() % pE9->ul", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Mi()", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mi() % pE9->ul", 10L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Muc()", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Muc() % pE9->ul", 11L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Mus()", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mus() % pE9->ul", 12L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Mui()", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mui() % pE9->ul", 13L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Ml()", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Ml() % pE9->ul", 14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("pE9->ul % Mul()", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    WriteLog(cxx.ExpressionValueIs("Mul() % pE9->ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rsecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  RSECASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CRShiftEqCases class
//

#ifndef __RSECASES_H__
#define __RSECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CRShiftEqCases class

class CRShiftEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CRShiftEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__RSECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\stdafx.h ===
///////////////////////////////////////////////////////////////////////////////
//	STDAFX.H
//
//	Created by :			Date :
//		VCBU QA		
//
//	Description :
//		Precompiled header for the test
//
//		Includes core CAFE headers, as contained in the utility headers
//		for the Workbench and all of the workbench's areas.
//

#ifndef __STDAFX_H__
#define __STDAFX_H__

#include <afxwin.h>			// MFC core and standard components
#include <winperf.h>		// skipped in windows.h due to WIN32_LEAN_AND_MEAN
#include <afxext.h> 		// MFC extensions
#include <afxtempl.h>

#include "test.h"
#include "subsuite.h"
#include "support.h"


#endif //__STDAFX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rshcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  RSHCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CRShiftCases class
//

#ifndef __RSHCASES_H__
#define __RSHCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CRShiftCases class

class CRShiftCases : public CDebugTestSet

    {
	DECLARE_TEST(CRShiftCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__RSHCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\rshcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  RSHCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CRShiftCases class
//

#include "stdafx.h"
#include "rshcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CRShiftCases, CDebugTestSet, "RShift", 162, CMiscSubSuite)


void CRShiftCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CRShiftCases::Run(void)

	{
	InitProject("rsh");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("Ac >> Oc().c", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Ac", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Osc().sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Ac", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Os().s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Ac", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Oi().i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Ac", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Ouc().uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Ac", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Ous().us", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Ac", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Oui().ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Ac", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Ol().l", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Ac", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ac >> Oul().ul", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Ac", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Oc().c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Asc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Osc().sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Asc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Os().s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Asc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Oi().i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Asc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Ouc().uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Asc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Ous().us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Asc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Oui().ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Asc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Ol().l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Asc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Asc >> Oul().ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Asc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Oc().c", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> As", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Osc().sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> As", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Os().s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> As", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Oi().i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> As", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Ouc().uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> As", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Ous().us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> As", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Oui().ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> As", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Ol().l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> As", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("As >> Oul().ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> As", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Oc().c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Ai", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Osc().sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Ai", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Os().s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Ai", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Oi().i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Ai", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Ouc().uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Ai", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Ous().us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Ai", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Oui().ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Ai", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Ol().l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Ai", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ai >> Oul().ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Ai", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Oc().c", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Auc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Osc().sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Auc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Os().s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Auc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Oi().i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Auc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Ouc().uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Auc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Ous().us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Auc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Oui().ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Auc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Ol().l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Auc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Auc >> Oul().ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Auc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Oc().c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Aus", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Osc().sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Aus", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Os().s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Aus", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Oi().i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Aus", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Ouc().uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Aus", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Ous().us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Aus", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Oui().ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Aus", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Ol().l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Aus", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aus >> Oul().ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Aus", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Oc().c", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Aui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Osc().sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Aui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Os().s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Aui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Oi().i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Aui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Ouc().uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Aui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Ous().us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Aui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Oui().ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Aui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Ol().l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Aui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aui >> Oul().ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Aui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Oc().c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Al", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Osc().sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Al", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Os().s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Al", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Oi().i", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Al", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Ouc().uc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Al", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Ous().us", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Al", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Oui().ui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Al", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Ol().l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Al", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Al >> Oul().ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Al", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Oc().c", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oc().c >> Aul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Osc().sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Osc().sc >> Aul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Os().s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Os().s >> Aul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Oi().i", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oi().i >> Aul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Ouc().uc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc >> Aul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Ous().us", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ous().us >> Aul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Oui().ui", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oui().ui >> Aul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Ol().l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Ol().l >> Aul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Aul >> Oul().ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("Oul().ul >> Aul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\xorcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  XORCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CXOrCases class
//

#ifndef __XORCASES_H__
#define __XORCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CXOrCases class

class CXOrCases : public CDebugTestSet

    {
	DECLARE_TEST(CXOrCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__XORCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\topcases.h ===
///////////////////////////////////////////////////////////////////////////////
//  TOPCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CTimesOpCases class
//

#ifndef __TOPCASES_H__
#define __TOPCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CTimesOpCases class

class CTimesOpCases : public CDebugTestSet

    {
	DECLARE_TEST(CTimesOpCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__TOPCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\umncases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  UMNCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CUMinusCases class
//

#include "stdafx.h"
#include "umncases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CUMinusCases, CDebugTestSet, "UMinus", 288, CMiscSubSuite)


void CUMinusCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CUMinusCases::Run(void)

	{
	InitProject("uminus");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)pG->ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)pG->ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oc().c", -7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Osc().sc", -8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Os().s", -9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Oi().i", -10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ouc().uc", -11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Ous().us", -12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (int)Oui().ui", -13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Ol().l", -14L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- (long)Oul().ul", -15L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Of().f", -16.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Od().d", -17.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- pG->ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("- Old().ld", -18.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\xorcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  XORCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CXOrCases class
//

#include "stdafx.h"
#include "xorcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CXOrCases, CDebugTestSet, "XOr", 162, CMiscSubSuite)


void CXOrCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CXOrCases::Run(void)

	{
	InitProject("xor");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("Ac ^ Oc().c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Ac", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Osc().sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Ac", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Os().s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Ac", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Oi().i", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Ac", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Ouc().uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Ac", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Ous().us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Ac", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Oui().ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Ac", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Ol().l", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Ac", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ac ^ Oul().ul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Ac", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Oc().c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Asc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Osc().sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Asc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Os().s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Asc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Oi().i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Asc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Ouc().uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Asc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Ous().us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Asc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Oui().ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Asc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Ol().l", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Asc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Asc ^ Oul().ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Asc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Oc().c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ As", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Osc().sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ As", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Os().s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ As", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Oi().i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ As", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Ouc().uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ As", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Ous().us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ As", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Oui().ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ As", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Ol().l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ As", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("As ^ Oul().ul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ As", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Oc().c", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Ai", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Osc().sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Ai", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Os().s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Ai", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Oi().i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Ai", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Ouc().uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Ai", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Ous().us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Ai", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Oui().ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Ai", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Ol().l", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Ai", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ai ^ Oul().ul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Ai", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Oc().c", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Auc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Osc().sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Auc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Os().s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Auc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Oi().i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Auc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Ouc().uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Auc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Ous().us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Auc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Oui().ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Auc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Ol().l", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Auc", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Auc ^ Oul().ul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Auc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Oc().c", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Aus", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Osc().sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Aus", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Os().s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Aus", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Oi().i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Aus", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Ouc().uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Aus", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Ous().us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Aus", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Oui().ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Aus", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Ol().l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Aus", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aus ^ Oul().ul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Aus", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Oc().c", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Aui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Osc().sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Aui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Os().s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Aui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Oi().i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Aui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Ouc().uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Aui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Ous().us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Aui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Oui().ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Aui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Ol().l", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Aui", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aui ^ Oul().ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Aui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Oc().c", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Al", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Osc().sc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Al", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Os().s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Al", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Oi().i", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Al", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Ouc().uc", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Al", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Ous().us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Al", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Oui().ui", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Al", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Ol().l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Al", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Al ^ Oul().ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Al", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Oc().c", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oc().c ^ Aul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Osc().sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Osc().sc ^ Aul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Os().s", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Os().s ^ Aul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Oi().i", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oi().i ^ Aul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Ouc().uc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ouc().uc ^ Aul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Ous().us", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ous().us ^ Aul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Oui().ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oui().ui ^ Aul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Ol().l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Ol().l ^ Aul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Aul ^ Oul().ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("Oul().ul ^ Aul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\umncases.h ===
///////////////////////////////////////////////////////////////////////////////
//  UMNCASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CUMinusCases class
//

#ifndef __UMNCASES_H__
#define __UMNCASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CUMinusCases class

class CUMinusCases : public CDebugTestSet

    {
	DECLARE_TEST(CUMinusCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__UMNCASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\topcases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  TOPCASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CTimesOpCases class
//

#include "stdafx.h"
#include "topcases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CTimesOpCases, CDebugTestSet, "TimesOp", 288, CMiscSubSuite)


void CTimesOpCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CTimesOpCases::Run(void)

	{
	InitProject("timesop");
	bps.SetBreakpoint("break_here");
	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("**ppCc * D1.c", 49) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCc", 49) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D2.sc", 56) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCc", 56) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D3.s", 63) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCc", 63) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D4.i", 70) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCc", 70) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D5.uc", 77) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCc", 77) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D6.us", 84) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCc", 84) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D7.ui", 91) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCc", 91) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D8.l", 98L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCc", 98L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D9.ul", 105L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCc", 105L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D10.f", 112.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCc", 112.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D11.d", 119.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCc", 119.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCc * D12.ld", 126.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCc", 126.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D1.c", 56) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCsc", 56) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D2.sc", 64) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCsc", 64) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D3.s", 72) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCsc", 72) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D4.i", 80) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCsc", 80) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D5.uc", 88) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCsc", 88) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D6.us", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCsc", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D7.ui", 104) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCsc", 104) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D8.l", 112L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCsc", 112L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D9.ul", 120L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCsc", 120L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D10.f", 128.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCsc", 128.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D11.d", 136.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCsc", 136.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCsc * D12.ld", 144.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCsc", 144.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D1.c", 63) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCs", 63) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D2.sc", 72) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCs", 72) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D3.s", 81) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCs", 81) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D4.i", 90) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCs", 90) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D5.uc", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCs", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D6.us", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCs", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D7.ui", 117) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCs", 117) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D8.l", 126L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCs", 126L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D9.ul", 135L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCs", 135L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D10.f", 144.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCs", 144.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D11.d", 153.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCs", 153.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCs * D12.ld", 162.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCs", 162.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D1.c", 70) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCi", 70) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D2.sc", 80) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCi", 80) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D3.s", 90) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCi", 90) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D4.i", 100) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCi", 100) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D5.uc", 110) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCi", 110) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D6.us", 120) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCi", 120) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D7.ui", 130) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCi", 130) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D8.l", 140L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCi", 140L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D9.ul", 150L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCi", 150L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D10.f", 160.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCi", 160.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D11.d", 170.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCi", 170.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCi * D12.ld", 180.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCi", 180.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D1.c", 77) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCuc", 77) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D2.sc", 88) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCuc", 88) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D3.s", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCuc", 99) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D4.i", 110) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCuc", 110) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D5.uc", 121) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCuc", 121) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D6.us", 132) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCuc", 132) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D7.ui", 143) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCuc", 143) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D8.l", 154L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCuc", 154L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D9.ul", 165L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCuc", 165L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D10.f", 176.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCuc", 176.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D11.d", 187.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCuc", 187.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCuc * D12.ld", 198.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCuc", 198.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D1.c", 84) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCus", 84) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D2.sc", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCus", 96) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D3.s", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCus", 108) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D4.i", 120) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCus", 120) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D5.uc", 132) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCus", 132) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D6.us", 144) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCus", 144) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D7.ui", 156) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCus", 156) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D8.l", 168L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCus", 168L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D9.ul", 180L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCus", 180L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D10.f", 192.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCus", 192.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D11.d", 204.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCus", 204.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCus * D12.ld", 216.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCus", 216.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D1.c", 91) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCui", 91) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D2.sc", 104) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCui", 104) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D3.s", 117) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCui", 117) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D4.i", 130) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCui", 130) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D5.uc", 143) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCui", 143) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D6.us", 156) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCui", 156) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D7.ui", 169) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCui", 169) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D8.l", 182L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCui", 182L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D9.ul", 195L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCui", 195L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D10.f", 208.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCui", 208.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D11.d", 221.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCui", 221.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCui * D12.ld", 234.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCui", 234.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D1.c", 98L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCl", 98L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D2.sc", 112L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCl", 112L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D3.s", 126L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCl", 126L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D4.i", 140L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCl", 140L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D5.uc", 154L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCl", 154L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D6.us", 168L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCl", 168L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D7.ui", 182L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCl", 182L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D8.l", 196L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCl", 196L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D9.ul", 210L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCl", 210L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D10.f", 224.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCl", 224.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D11.d", 238.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCl", 238.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCl * D12.ld", 252.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCl", 252.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D1.c", 105L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCul", 105L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D2.sc", 120L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCul", 120L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D3.s", 135L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCul", 135L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D4.i", 150L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCul", 150L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D5.uc", 165L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCul", 165L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D6.us", 180L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCul", 180L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D7.ui", 195L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCul", 195L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D8.l", 210L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCul", 210L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D9.ul", 225L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCul", 225L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D10.f", 240.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCul", 240.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D11.d", 255.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCul", 255.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCul * D12.ld", 270.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCul", 270.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D1.c", 112.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCf", 112.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D2.sc", 128.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCf", 128.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D3.s", 144.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCf", 144.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D4.i", 160.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCf", 160.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D5.uc", 176.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCf", 176.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D6.us", 192.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCf", 192.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D7.ui", 208.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCf", 208.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D8.l", 224.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCf", 224.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D9.ul", 240.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCf", 240.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D10.f", 256.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCf", 256.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D11.d", 272.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCf", 272.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCf * D12.ld", 288.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCf", 288.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D1.c", 119.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCd", 119.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D2.sc", 136.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCd", 136.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D3.s", 153.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCd", 153.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D4.i", 170.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCd", 170.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D5.uc", 187.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCd", 187.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D6.us", 204.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCd", 204.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D7.ui", 221.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCd", 221.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D8.l", 238.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCd", 238.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D9.ul", 255.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCd", 255.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D10.f", 272.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCd", 272.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D11.d", 289.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCd", 289.) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCd * D12.ld", 306.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCd", 306.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D1.c", 126.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D1.c * **ppCld", 126.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D2.sc", 144.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D2.sc * **ppCld", 144.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D3.s", 162.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D3.s * **ppCld", 162.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D4.i", 180.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D4.i * **ppCld", 180.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D5.uc", 198.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D5.uc * **ppCld", 198.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D6.us", 216.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D6.us * **ppCld", 216.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D7.ui", 234.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D7.ui * **ppCld", 234.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D8.l", 252.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D8.l * **ppCld", 252.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D9.ul", 270.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D9.ul * **ppCld", 270.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D10.f", 288.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D10.f * **ppCld", 288.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D11.d", 306.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D11.d * **ppCld", 306.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("**ppCld * D12.ld", 324.L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("D12.ld * **ppCld", 324.L) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\xrecases.h ===
///////////////////////////////////////////////////////////////////////////////
//  XRECASES.H
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Declaration of the CXOrEqCases class
//

#ifndef __XRECASES_H__
#define __XRECASES_H__

#ifndef __STDAFX_H__
    #error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "miscsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CXOrEqCases class

class CXOrEqCases : public CDebugTestSet

    {
	DECLARE_TEST(CXOrEqCases, CMiscSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
    };

#endif //__XRECASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\misc\xrecases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  XRECASES.CPP
//
//  Created by :            Date :
//      MichMa                  1/22/94
//
//  Description :
//      Implementation of the CXOrEqCases class
//

#include "stdafx.h"
#include "xrecases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CXOrEqCases, CDebugTestSet, "XOrEq", 324, CMiscSubSuite)


void CXOrEqCases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CXOrEqCases::Run(void)

	{
	InitProject("xoreq");
	bps.SetBreakpoint("break_here");
	dbg.Go();

	WriteLog(cxx.ExpressionValueIs("pE1->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE1->c", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE1->c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE1->c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.i", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE1->c", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE1->c", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE1->c", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE1->c", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.l", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE1->c", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE1->c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE1->c ^= F.ul", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE1->c", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE2->sc", 15) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE2->sc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE2->sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE2->sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE2->sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE2->sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE2->sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE2->sc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE2->sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE2->sc ^= F.ul", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE2->sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE3->s", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE3->s", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE3->s", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE3->s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE3->s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE3->s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE3->s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.l", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE3->s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE3->s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE3->s ^= F.ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE3->s", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.c", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE4->i", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE4->i", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE4->i", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE4->i", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE4->i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE4->i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE4->i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE4->i", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE4->i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE4->i ^= F.ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE4->i", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.c", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE5->uc", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE5->uc", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE5->uc", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE5->uc", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE5->uc", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE5->uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE5->uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE5->uc", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE5->uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE5->uc ^= F.ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE5->uc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.c", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE6->us", 11) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE6->us", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE6->us", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE6->us", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE6->us", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE6->us", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE6->us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.l", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE6->us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE6->us", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE6->us ^= F.ul", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE6->us", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.c", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE7->ui", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE7->ui", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE7->ui", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE7->ui", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE7->ui", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE7->ui", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE7->ui", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.l", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE7->ui", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE7->ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE7->ui ^= F.ul", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE7->ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.c", 9L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE8->l", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.sc", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE8->l", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.s", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE8->l", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.i", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE8->l", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.uc", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE8->l", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.us", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE8->l", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.ui", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE8->l", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE8->l", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE8->l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE8->l ^= F.ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE8->l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.c", 8L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.c", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.c ^= pE9->ul", 8) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.sc", 7L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.sc", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.sc ^= pE9->ul", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.s", 6L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.s", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.s ^= pE9->ul", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.i", 5L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.i", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.i ^= pE9->ul", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.uc", 4L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.uc", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.uc ^= pE9->ul", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.us", 3L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.us", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.us ^= pE9->ul", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.ui", 2L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ui", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ui ^= pE9->ul", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.l", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.l ^= pE9->ul", 1L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("pE9->ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("pE9->ul ^= F.ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver(2);
	WriteLog(cxx.ExpressionValueIs("F.ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
	dbg.StepOver();
	WriteLog(cxx.ExpressionValueIs("F.ul ^= pE9->ul", 0L) ? PASSED : FAILED, "line = %d\n", __LINE__);
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m10cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M10CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix10Cases class
//

#ifndef __M10CASES_H__
#define __M10CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix10Cases class

class CMix10Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix10Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M10CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m10cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M10CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix10Cases class
//

#include "stdafx.h"
#include "m10cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix10Cases, CDebugTestSet, "Mixed10", 12, CMixSubSuite)


void CMix10Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix10Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((stlong2 &= (stlong1 & stlong8)) > ((stlong3 ^ stlong3) ^ stlong7))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((((*pd1)++ ) + f2) + (stlong8 += (d4 != f4 + .1)))", 12.300000047684) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d1", 2.1000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong5 |= (stlong3 += stlong6)) << (stlong4 -= (stlong1 / stlong6)))", 208) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong4", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( ! stlong3) != *pf3) >= (stlong5 &= (stlong4 - stlong1)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((stlong5 + stlong1) != stlong3) & ((stlong3 || stlong8) || stlong7))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m11cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M11CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix11Cases class
//

#include "stdafx.h"
#include "m11cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix11Cases, CDebugTestSet, "Mixed11", 15, CMixSubSuite)


void CMix11Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix11Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((stlong5 |= (stlong3 >>= stlong4)) << ((stlong4 >> stlong4) >= stlong2))", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong3 *= (stlong1 <= stlong6)) ^ (stlong8 += (stlong1 + stlong1)))", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong3 = (stlong4 % stlong1)) << (stlong2 *= (stlong7 || stlong8)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((*pd2 = ( -- stlong3)) < (stlong2 |= (stlong6 < stlong5)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d2", -1.0000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong3 / ((stlong1)-- )) | (stlong6 <= (stlong3 % stlong2)))", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m12cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M12CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix12Cases class
//

#ifndef __M12CASES_H__
#define __M12CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix12Cases class

class CMix12Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix12Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M12CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m11cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M11CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix11Cases class
//

#ifndef __M11CASES_H__
#define __M11CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix11Cases class

class CMix11Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix11Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M11CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m12cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M12CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix12Cases class
//

#include "stdafx.h"
#include "m12cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix12Cases, CDebugTestSet, "Mixed12", 16, CMixSubSuite)


void CMix12Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix12Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("(((stlong1 < stlong6) ^ stlong7) != (d4 / ( - *pd2)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong7 /= (stlong8 + stlong4)) % (stlong1 = (stlong5 += stlong8)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong4 || (stlong3 == stlong4)) | (stlong5 = ((stlong1)-- )))", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 12) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((f3 -= (stlong7 %= stlong8)) * (stlong1 += (stlong2 %= stlong3)))", 4.62000E+001) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 14) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("f3", 3.30000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong8 &= (stlong5 <= stlong1)) <= (stlong3 % ((stlong6)++ )))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong6", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m13cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M13CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix13Cases class
//

#ifndef __M13CASES_H__
#define __M13CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix13Cases class

class CMix13Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix13Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M13CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m13cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M13CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix13Cases class
//

#include "stdafx.h"
#include "m13cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix13Cases, CDebugTestSet, "Mixed13", 14, CMixSubSuite)


void CMix13Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix13Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();
	
	WriteLog(cxx.ExpressionValueIs("((stlong3 || (stlong4 | stlong3)) * (( - *pf4) != *pf2))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong4 >= ((*pd4)-- )) && (d1 = (stlong7 ^= stlong8)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d1", 1.1000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d4", 3.4000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((d2 && ((stlong1)-- )) == (stlong7 ^= ( ! stlong8)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong8 >>= ( -- stlong3)) & (stlong6 & (stlong4 != stlong2)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((f4 *= (*pf2 >= *pf2)) == (stlong6 /= (stlong7 >> stlong1)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong6", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("f4", 4.40000) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m2cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M2CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix2Cases class
//

#include "stdafx.h"
#include "m2cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix2Cases, CDebugTestSet, "Mixed2", 11, CMixSubSuite)


void CMix2Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix2Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((stlong2 -= (*pf2 > f3)) + (stlong5 |= (stlong4 ^ stlong7)))", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("(((stlong2 == stlong5) & stlong3) <= (stlong7 &= ( - stlong5)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("stlong7", 1) ? PASSED : FAILED, "line = %d\n", __LINE__); 
	WriteLog(cxx.ExpressionValueIs("((stlong2 != ( - *pf3)) || ((stlong4 / stlong2) / f1))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong3 += (*pf4 < stlong4)) < (stlong4 || (*pf2 - d4)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 3) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong8 |= ( ++ stlong1)) + ((f2 / stlong3) * f3))", 12.4200) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 10) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m2cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M2CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix2Cases class
//

#ifndef __M2CASES_H__
#define __M2CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix2Cases class

class CMix2Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix2Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M2CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m3cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M3CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix3Cases class
//

#ifndef __M3CASES_H__
#define __M3CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix3Cases class

class CMix3Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix3Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M3CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m1cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M1CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix1Cases class
//

#ifndef __M1CASES_H__
#define __M1CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix1Cases class

class CMix1Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix1Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M1CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m3cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M3CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix3Cases class
//

#include "stdafx.h"
#include "m3cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix3Cases, CDebugTestSet, "Mixed3", 9, CMixSubSuite)


void CMix3Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix3Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((stlong1 &= (stlong4 & stlong2)) <= (stlong8 |= (stlong4 == stlong4)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( ! stlong6) | stlong2) >> (stlong4 < (stlong6 - stlong1)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong4 == (stlong2 / stlong7)) & (stlong2 >= ( - stlong3)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong7 != ((stlong2)-- )) ^ (stlong6 + (stlong3 / stlong3)))", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong2", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong8 = (stlong7 >= stlong5)) << ((stlong1 << stlong1) <= stlong2))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m1cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M1CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix1Cases class
//

#include "stdafx.h"
#include "m1cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix1Cases, CDebugTestSet, "Mixed1", 12, CMixSubSuite)


void CMix1Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix1Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((((stlong4)++ ) && stlong7) << (stlong2 < (stlong5 / stlong3)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong4", 5) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong8 - ( ++ f4)) != (stlong6 >>= (stlong4 >>= stlong3)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong4", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("f4", 5.40000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong3 |= (stlong4 + stlong6)) >> (stlong1 * ( -- stlong5)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong3", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((stlong1 % stlong5) + f3) / ((stlong8 / stlong3) | stlong1))", 4.30000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong1 *= (stlong2 != stlong3)) | ((stlong2 ^ stlong7) ^ stlong2))", 7) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m4cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M4CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix4Cases class
//

#include "stdafx.h"
#include "m4cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix4Cases, CDebugTestSet, "Mixed4", 12, CMixSubSuite)


void CMix4Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix4Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

 	WriteLog(cxx.ExpressionValueIs("((stlong7 & (stlong2 - stlong8)) <= (stlong6 != ( ++ *pd1)))", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d1", 2.1000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((( -- *pd3) == f1) - (stlong1 /= (stlong7 && stlong8)))", -1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong1", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d3", 2.3000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong5 - ( - stlong8)) ^ (stlong7 &= (stlong4 %= stlong1)))", 13) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong4", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 0) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong6 |= (stlong3 ^ stlong3)) - ((*pf1 / f2) > d1))", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong6", 6) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((f4 != ((*pd1)-- )) + (*pd3 && (*pf2 + f3)))", 2) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d1", 1.10000) ? PASSED : FAILED, "line = %d\n", __LINE__);

	cxx.Disable();
	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m4cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M4CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix4Cases class
//

#ifndef __M4CASES_H__
#define __M4CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix4Cases class

class CMix4Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix4Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M4CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m6cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M6CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix6Cases class
//

#ifndef __M6CASES_H__
#define __M6CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix6Cases class

class CMix6Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix6Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M6CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m5cases.h ===
///////////////////////////////////////////////////////////////////////////////
//  M5CASES.H
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Declaration of the CMix5Cases class
//

#ifndef __M5CASES_H__
#define __M5CASES_H__

#ifndef __STDAFX_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "..\..\core\dbgset.h"
#include "mixsub.h"

///////////////////////////////////////////////////////////////////////////////
//  CMix5Cases class

class CMix5Cases : public CDebugTestSet

	{
	DECLARE_TEST(CMix5Cases, CMixSubSuite)

	// Operations
	public:
		virtual void PreRun(void);
		virtual void Run(void);
	};

#endif //__M5CASES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\xdktest\cafe6\Tests\Debugger\Ee\mix\m5cases.cpp ===
///////////////////////////////////////////////////////////////////////////////
//  M5CASES.CPP
//
//  Created by :            Date :
//      MichMa              	12/15/93
//
//  Description :
//      Implementation of the CMix5Cases class
//

#include "stdafx.h"
#include "m5cases.h"

#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;

IMPLEMENT_TEST(CMix5Cases, CDebugTestSet, "Mixed5", 11, CMixSubSuite)


void CMix5Cases::PreRun(void)
	{
	// call the base class
	CTest::PreRun();
	}


void CMix5Cases::Run(void)

	{
	if(!fProjectReady)
		{
		InitProject("mix");
		bps.SetBreakpoint("break_here");
		fProjectReady = TRUE;
		}
	else
		dbg.Restart();

	dbg.Go();
	cxx.Enable();

	WriteLog(cxx.ExpressionValueIs("((d4 += (stlong7 - stlong2)) || ((stlong2 << stlong4) || stlong6))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("d4", 9.4000000000000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("(((stlong7 * stlong2) | stlong5) > (f1 || (f3 <= stlong5)))", 1) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong5 -= (*pd1 <= d2)) - (stlong6 == ( ++ f1)))", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("f1", 2.10000) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong5", 4) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("((stlong7 = (stlong8 <<= stlong1)) * (( - f2) / f3))", -10.6667) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong8", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
	WriteLog(cxx.ExpressionValueIs("stlong7", 16) ? PASSED : FAILED, "line = %d\n", __LINE__);
 	WriteLog(cxx.ExpressionValueIs("((stlong8 == (*pd1 + *pf1)) - (stlong6 |= (stlong1 - stlong7)))", 9) ? PASSED : FAILED, "line = %d\n", __LINE__);  
 	WriteLog(cxx.ExpressionValueIs("stlong6", -9) ? PASSED : FAILED, "line = %d\n", __LINE_