00000001l
// ***** POSTPONED2 fields must NOT be ahead of other field as dwFlags bits must be contiguous
// ValidateCallbacks() is enforing this ******
#ifdef POSTPONED2
#define DDHAL_MISC2CB32_SETSPRITEDISPLAYLIST   0x00000008l
#define DDHAL_MISC2CB32_RESIZE                 0x00000010l
#define DDHAL_MISC2CB32_CAPTURECOMPOSITIONBUFFER 0x00000020l
#endif //POSTPONED2
//@@END_MSINTERNAL

#define DDMISCELLANEOUS2CALLBACKSSIZE sizeof(DDHAL_DDMISCELLANEOUS2CALLBACKS)


/*
 * DIRECTDRAWEXEBUF pseudo object callbacks
 *
 * NOTE: Execute buffers are not a distinct object type, they piggy back off
 * the surface data structures and high level API. However, they have their
 * own HAL callbacks as they may have different driver semantics from "normal"
 * surfaces. They also piggy back off the HAL data structures.
 *
 * !!! NOTE: Need to resolve whether we export execute buffer copying as a
 * blit or some other from of copy instruction.
 */
typedef DWORD   (FAR PASCAL *LPDDHALEXEBUFCB_CANCREATEEXEBUF)(LPDDHAL_CANCREATESURFACEDATA );
typedef DWORD   (FAR PASCAL *LPDDHALEXEBUFCB_CREATEEXEBUF)(LPDDHAL_CREATESURFACEDATA);
typedef DWORD   (FAR PASCAL *LPDDHALEXEBUFCB_DESTROYEXEBUF)(LPDDHAL_DESTROYSURFACEDATA);
typedef DWORD   (FAR PASCAL *LPDDHALEXEBUFCB_LOCKEXEBUF)(LPDDHAL_LOCKDATA);
typedef DWORD   (FAR PASCAL *LPDDHALEXEBUFCB_UNLOCKEXEBUF)(LPDDHAL_UNLOCKDATA);

typedef struct _DDHAL_DDEXEBUFCALLBACKS
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LPDDHALEXEBUFCB_CANCREATEEXEBUF CanCreateExecuteBuffer;
    LPDDHALEXEBUFCB_CREATEEXEBUF    CreateExecuteBuffer;
    LPDDHALEXEBUFCB_DESTROYEXEBUF   DestroyExecuteBuffer;
    LPDDHALEXEBUFCB_LOCKEXEBUF      LockExecuteBuffer;
    LPDDHALEXEBUFCB_UNLOCKEXEBUF    UnlockExecuteBuffer;
} DDHAL_DDEXEBUFCALLBACKS;
typedef DDHAL_DDEXEBUFCALLBACKS FAR *LPDDHAL_DDEXEBUFCALLBACKS;

#define DDEXEBUFCALLBACKSSIZE sizeof( DDHAL_DDEXEBUFCALLBACKS )

#define DDHAL_EXEBUFCB32_CANCREATEEXEBUF    0x00000001l
#define DDHAL_EXEBUFCB32_CREATEEXEBUF       0x00000002l
#define DDHAL_EXEBUFCB32_DESTROYEXEBUF      0x00000004l
#define DDHAL_EXEBUFCB32_LOCKEXEBUF     0x00000008l
#define DDHAL_EXEBUFCB32_UNLOCKEXEBUF       0x00000010l

/*
 * DIRECTVIDEOPORT object callbacks
 */
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_CANCREATEVIDEOPORT)(LPDDHAL_CANCREATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_CREATEVIDEOPORT)(LPDDHAL_CREATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_FLIP)(LPDDHAL_FLIPVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETBANDWIDTH)(LPDDHAL_GETVPORTBANDWIDTHDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETINPUTFORMATS)(LPDDHAL_GETVPORTINPUTFORMATDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETOUTPUTFORMATS)(LPDDHAL_GETVPORTOUTPUTFORMATDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETFIELD)(LPDDHAL_GETVPORTFIELDDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETLINE)(LPDDHAL_GETVPORTLINEDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETVPORTCONNECT)(LPDDHAL_GETVPORTCONNECTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_DESTROYVPORT)(LPDDHAL_DESTROYVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETFLIPSTATUS)(LPDDHAL_GETVPORTFLIPSTATUSDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_UPDATE)(LPDDHAL_UPDATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_WAITFORSYNC)(LPDDHAL_WAITFORVPORTSYNCDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETSIGNALSTATUS)(LPDDHAL_GETVPORTSIGNALDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_COLORCONTROL)(LPDDHAL_VPORTCOLORDATA);

typedef struct _DDHAL_DDVIDEOPORTCALLBACKS
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LPDDHALVPORTCB_CANCREATEVIDEOPORT   CanCreateVideoPort;
    LPDDHALVPORTCB_CREATEVIDEOPORT      CreateVideoPort;
    LPDDHALVPORTCB_FLIP                 FlipVideoPort;
    LPDDHALVPORTCB_GETBANDWIDTH         GetVideoPortBandwidth;
    LPDDHALVPORTCB_GETINPUTFORMATS      GetVideoPortInputFormats;
    LPDDHALVPORTCB_GETOUTPUTFORMATS     GetVideoPortOutputFormats;
    LPVOID              lpReserved1;
    LPDDHALVPORTCB_GETFIELD             GetVideoPortField;
    LPDDHALVPORTCB_GETLINE              GetVideoPortLine;
    LPDDHALVPORTCB_GETVPORTCONNECT      GetVideoPortConnectInfo;
    LPDDHALVPORTCB_DESTROYVPORT         DestroyVideoPort;
    LPDDHALVPORTCB_GETFLIPSTATUS        GetVideoPortFlipStatus;
    LPDDHALVPORTCB_UPDATE               UpdateVideoPort;
    LPDDHALVPORTCB_WAITFORSYNC          WaitForVideoPortSync;
    LPDDHALVPORTCB_GETSIGNALSTATUS      GetVideoSignalStatus;
    LPDDHALVPORTCB_COLORCONTROL         ColorControl;
} DDHAL_DDVIDEOPORTCALLBACKS;
typedef DDHAL_DDVIDEOPORTCALLBACKS FAR *LPDDHAL_DDVIDEOPORTCALLBACKS;

#define DDVIDEOPORTCALLBACKSSIZE sizeof( DDHAL_DDVIDEOPORTCALLBACKS )

#define DDHAL_VPORT32_CANCREATEVIDEOPORT    0x00000001l
#define DDHAL_VPORT32_CREATEVIDEOPORT           0x00000002l
#define DDHAL_VPORT32_FLIP                      0x00000004l
#define DDHAL_VPORT32_GETBANDWIDTH              0x00000008l
#define DDHAL_VPORT32_GETINPUTFORMATS           0x00000010l
#define DDHAL_VPORT32_GETOUTPUTFORMATS          0x00000020l
#define DDHAL_VPORT32_GETFIELD                  0x00000080l
#define DDHAL_VPORT32_GETLINE                   0x00000100l
#define DDHAL_VPORT32_GETCONNECT                0x00000200l
#define DDHAL_VPORT32_DESTROY                   0x00000400l
#define DDHAL_VPORT32_GETFLIPSTATUS             0x00000800l
#define DDHAL_VPORT32_UPDATE                    0x00001000l
#define DDHAL_VPORT32_WAITFORSYNC               0x00002000l
#define DDHAL_VPORT32_GETSIGNALSTATUS           0x00004000l
#define DDHAL_VPORT32_COLORCONTROL      0x00008000l

/*
 * DIRECTDRAWCOLORCONTROL object callbacks
 */
typedef DWORD (FAR PASCAL *LPDDHALCOLORCB_COLORCONTROL)(LPDDHAL_COLORCONTROLDATA);

typedef struct _DDHAL_DDCOLORCONTROLCALLBACKS
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LPDDHALCOLORCB_COLORCONTROL         ColorControl;
} DDHAL_DDCOLORCONTROLCALLBACKS;
typedef DDHAL_DDCOLORCONTROLCALLBACKS FAR *LPDDHAL_DDCOLORCONTROLCALLBACKS;

#define DDCOLORCONTROLCALLBACKSSIZE sizeof( DDHAL_DDCOLORCONTROLCALLBACKS )

#define DDHAL_COLOR_COLORCONTROL        0x00000001l

/*
 * DIRECTDRAWSURFACEKERNEL object callbacks
 * This structure can be queried from the driver from DX5 onward
 * using GetDriverInfo with GUID_KernelCallbacks
 */
typedef DWORD (FAR PASCAL *LPDDHALKERNELCB_SYNCSURFACE)(LPDDHAL_SYNCSURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALKERNELCB_SYNCVIDEOPORT)(LPDDHAL_SYNCVIDEOPORTDATA);

typedef struct _DDHAL_DDKERNELCALLBACKS
{
    DWORD                               dwSize;
    DWORD                               dwFlags;
    LPDDHALKERNELCB_SYNCSURFACE     SyncSurfaceData;
    LPDDHALKERNELCB_SYNCVIDEOPORT   SyncVideoPortData;
} DDHAL_DDKERNELCALLBACKS, *LPDDHAL_DDKERNELCALLBACKS;

#define DDHAL_KERNEL_SYNCSURFACEDATA        0x00000001l
#define DDHAL_KERNEL_SYNCVIDEOPORTDATA      0x00000002l

#define DDKERNELCALLBACKSSIZE sizeof(DDHAL_DDKERNELCALLBACKS)

typedef HRESULT (WINAPI *LPDDGAMMACALIBRATORPROC)( LPDDGAMMARAMP, LPBYTE);

/*
 * DIRECTDRAWMOTIONCOMP object callbacks
 */
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETGUIDS)( LPDDHAL_GETMOCOMPGUIDSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETFORMATS)( LPDDHAL_GETMOCOMPFORMATSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_CREATE)( LPDDHAL_CREATEMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETCOMPBUFFINFO)( LPDDHAL_GETMOCOMPCOMPBUFFDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETINTERNALINFO)( LPDDHAL_GETINTERNALMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_BEGINFRAME)( LPDDHAL_BEGINMOCOMPFRAMEDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_ENDFRAME)( LPDDHAL_ENDMOCOMPFRAMEDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_RENDER)( LPDDHAL_RENDERMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_QUERYSTATUS)( LPDDHAL_QUERYMOCOMPSTATUSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_DESTROY)( LPDDHAL_DESTROYMOCOMPDATA);

typedef struct _DDHAL_DDMOTIONCOMPCALLBACKS
{
    DWORD                           dwSize;
    DWORD                           dwFlags;
    LPDDHALMOCOMPCB_GETGUIDS        GetMoCompGuids;
    LPDDHALMOCOMPCB_GETFORMATS      GetMoCompFormats;
    LPDDHALMOCOMPCB_CREATE          CreateMoComp;
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
    LPDDHALMOCOMPCB_BEGINFRAME      BeginMoCompFrame;
    LPDDHALMOCOMPCB_ENDFRAME        EndMoCompFrame;
    LPDDHALMOCOMPCB_RENDER          RenderMoComp;
    LPDDHALMOCOMPCB_QUERYSTATUS     QueryMoCompStatus;
    LPDDHALMOCOMPCB_DESTROY         DestroyMoComp;
} DDHAL_DDMOTIONCOMPCALLBACKS;
typedef DDHAL_DDMOTIONCOMPCALLBACKS FAR *LPDDHAL_DDMOTIONCOMPCALLBACKS;

#define DDMOTIONCOMPCALLBACKSSIZE sizeof( DDHAL_DDMOTIONCOMPCALLBACKS )

#define DDHAL_MOCOMP32_GETGUIDS         0x00000001
#define DDHAL_MOCOMP32_GETFORMATS       0x00000002
#define DDHAL_MOCOMP32_CREATE           0x00000004
#define DDHAL_MOCOMP32_GETCOMPBUFFINFO  0x00000008
#define DDHAL_MOCOMP32_GETINTERNALINFO  0x00000010
#define DDHAL_MOCOMP32_BEGINFRAME       0x00000020
#define DDHAL_MOCOMP32_ENDFRAME         0x00000040
#define DDHAL_MOCOMP32_RENDER           0x00000080
#define DDHAL_MOCOMP32_QUERYSTATUS      0x00000100
#define DDHAL_MOCOMP32_DESTROY          0x00000200

//@@BEGIN_MSINTERNAL
#ifdef POSTPONED
/*
 * DDHAL_DDUMODEDRVINFO object callbacks
 * Contains the data required for supporting user mode drivers.
 * This structure can be queried from the driver from DX6 onwards using:
 * GetDriverInfo with GUID_UserModeDriverInfo
 */
typedef struct _DDHAL_DDUMODEDRVINFO
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LPSTR               lpszDllName;
    GUID                uniqueGuid;
    ULONG_PTR            dwReserved1;
} DDHAL_DDUMODEDRVINFO, *LPDDHAL_DDUMODEDRVINFO;
#define DDHAL_DDUMODEDRVINFOSIZE    sizeof( DDHAL_DDUMODEDRVINFO )

#define DDHAL_UMODEDRV_DLLNAME              0x00000001
#define DDHAL_UMODEDRV_UNIQGUID             0x00000002
#define DDHAL_UMODEDRV_ALL                  0x00000003


/*
 * DDHAL_DDUMODEDRVPASSWD object callbacks
 * This structure is used to query the usermode driver for its password GUID
 * (GetDriverInfo with GUID_UserModeDriverPassword)
 */
typedef struct _DDHAL_DDUMODEDRVPASSWD
{
    DWORD               dwSize;
    DWORD               dwFlags;
    GUID                passwdGuid;
} DDHAL_DDUMODEDRVPASSWD, *LPDDHAL_DDUMODEDRVPASSWD;
#define DDHAL_DDUMODEDRVPASSWDSIZE    sizeof( DDHAL_DDUMODEDRVPASSWD )

#define DDHAL_UMODEDRV_GUID              0x00000001


/*
 * This structure is used to store relevant information about the
 * user-mode driver in DDRAW_GBL
 */
typedef struct _DDUMODEDRVINFO
{
    LPVOID                   lpszDllName; // need not be saved
    HMODULE                  hUmodeDll;
    GUID                     uniqueGuid;  // need not be saved
    LPDDHAL_GETDRIVERINFO    GetDriverInfo;
} DDUMODEDRVINFO, *LPDDUMODEDRVINFO;

//
// DDOPTSURFACE
// Contains the callbacks and data required for supporting Optimized surfaces.
// This structure can be queried from the driver from DX6 onwards using:
// GetDriverInfo with GUID_OptSurfaceKmodeInfo and
// GetUmodeDriverInfo with GUID_OptSurfaceUmodeInfo.
//
typedef DWORD (FAR PASCAL *LPDDHALOPTSURFCB_CANOPTIMIZESURFACE)( LPDDHAL_CANOPTIMIZESURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALOPTSURFCB_OPTIMIZESURFACE)( LPDDHAL_OPTIMIZESURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALOPTSURFCB_UNOPTIMIZESURFACE)( LPDDHAL_UNOPTIMIZESURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALOPTSURFCB_COPYOPTSURFACE)( LPDDHAL_COPYOPTSURFACEDATA);

typedef DWORD (FAR PASCAL *LPDDHALOPTSURFCB_KMODESVC)( LPDDHAL_KMODESVCDATA);

//
// This structure is used to store the Opt Surface information
// in DDRAWI_GBL
//
typedef struct _DDOPTSURFACEINFO
{
    // Umode information
    DWORD               dwNumGuids;
    LPGUID              lpGuidArray;
    LPDDHALOPTSURFCB_CANOPTIMIZESURFACE    CanOptimizeSurface;
    LPDDHALOPTSURFCB_OPTIMIZESURFACE       OptimizeSurface;
    LPDDHALOPTSURFCB_UNOPTIMIZESURFACE     UnOptimizeSurface;
    LPDDHALOPTSURFCB_COPYOPTSURFACE        CopyOptSurface;

    // Kmode information
    LPDDHALOPTSURFCB_KMODESVC                KmodeService;
} DDOPTSURFACEINFO, *LPDDOPTSURFACEINFO;

//
// This structure is used for obtaining Opt Surface kernel mode data
//
typedef struct _DDHAL_DDOPTSURFACEKMODEINFO
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LPDDHALOPTSURFCB_KMODESVC KmodeService;
    ULONG_PTR            dwReserved2;
} DDHAL_DDOPTSURFACEKMODEINFO, *LPDDHAL_DDOPTSURFACEKMODEINFO;
#define DDOPTSURFACEKMODEINFOSIZE   sizeof( DDHAL_DDOPTSURFACEKMODEINFO )

#define DDHAL_OPTSURFKMODE_KMODESVC                 0x00000001
#define DDHAL_OPTSURFKMODE_ALL                      0x00000001

//
// This structure is used for obtaining Opt Surface user mode data
//
typedef struct _DDHAL_DDOPTSURFACEUMODEINFO
{
    DWORD               dwSize;
    DWORD               dwFlags;
    DWORD               dwNumGuids;
    LPGUID              lpGuidArray;
    LPDDHALOPTSURFCB_CANOPTIMIZESURFACE    CanOptimizeSurface;
    LPDDHALOPTSURFCB_OPTIMIZESURFACE       OptimizeSurface;
    LPDDHALOPTSURFCB_UNOPTIMIZESURFACE     UnOptimizeSurface;
    LPDDHALOPTSURFCB_COPYOPTSURFACE        CopyOptSurface;
    ULONG_PTR            dwReserved1;
    ULONG_PTR            dwReserved2;
} DDHAL_DDOPTSURFACEUMODEINFO, *LPDDHAL_DDOPTSURFACEUMODEINFO;
#define DDOPTSURFACEUMODEINFOSIZE    sizeof( DDHAL_DDOPTSURFACEUMODEINFO )

#define DDHAL_OPTSURFUMODE_NUMGUIDS                 0x00000001
#define DDHAL_OPTSURFUMODE_GUIDARRAY                0x00000002
#define DDHAL_OPTSURFUMODE_CANOPTIMIZESURFACE       0x00000004
#define DDHAL_OPTSURFUMODE_OPTIMIZESURFACE          0x00000008
#define DDHAL_OPTSURFUMODE_UNOPTIMIZESURFACE        0x00000010
#define DDHAL_OPTSURFUMODE_COPYOPTSURFACE           0x00000020
#define DDHAL_OPTSURFUMODE_ALL                      0x0000003f

#endif //POSTPONED
//@@END_MSINTERNAL

/*
 * CALLBACK RETURN VALUES
 *                      * these are values returned by the driver from the above callback routines
 */
/*
 * indicates that the display driver didn't do anything with the call
 */
#define DDHAL_DRIVER_NOTHANDLED     0x00000000l

/*
 * indicates that the display driver handled the call; HRESULT value is valid
 */
#define DDHAL_DRIVER_HANDLED        0x00000001l

/*
 * indicates that the display driver couldn't handle the call because it
 * ran out of color key hardware resources
 */
#define DDHAL_DRIVER_NOCKEYHW       0x00000002l

/*
 * Capabilities structure for non-local video memory
 */
typedef struct _DDNONLOCALVIDMEMCAPS
{
    DWORD   dwSize;
    DWORD   dwNLVBCaps;       // driver specific capabilities for non-local->local vidmem blts
    DWORD   dwNLVBCaps2;          // more driver specific capabilities non-local->local vidmem blts
    DWORD   dwNLVBCKeyCaps;       // driver color key capabilities for non-local->local vidmem blts
    DWORD   dwNLVBFXCaps;         // driver FX capabilities for non-local->local blts
    DWORD   dwNLVBRops[DD_ROP_SPACE]; // ROPS supported for non-local->local blts
} DDNONLOCALVIDMEMCAPS;
typedef struct _DDNONLOCALVIDMEMCAPS FAR *LPDDNONLOCALVIDMEMCAPS;


/*
 * More driver surface capabilities (in addition to those described in DDCORECAPS).
 * This struct contains the caps bits added to the DDCAPS.ddsCaps structure in DX6.
 */
typedef struct _DDMORESURFACECAPS
{
    DWORD       dwSize;             // size of DDMORESURFACECAPS structure
    DDSCAPSEX   ddsCapsMore;
    /*
     * The DDMORESURFACECAPS struct is of variable size. The following list may be
     * filled in by DX6-aware drivers (see DDVERSIONINFO) to restrict their
     * video memory heaps (those which are exposed to DirectDraw) to
     * certain sets of DDSCAPS_ bits. Thse entries are exactly analogous to
     * the ddsCaps and ddsCapsAlt members of the VIDMEM structures listed in
     * the VIDMEMINFO.pvmList member of DDHALINFO.vmiData. There should be
     * exactly DDHALINFO.vmiData.dwNumHeaps copies of tagExtendedHeapRestrictions
     * in this struct. The size of this struct is thus:
     *  DDMORESURFACECAPS.dwSize = sizeof(DDMORESURFACECAPS) +
     *          (DDHALINFO.vmiData.dwNumHeaps-1) * sizeof(DDSCAPSEX)*2;
     * Note the -1 accounts for the fact that DDMORESURFACECAPS is declared to have 1
     * tagExtendedHeapRestrictions member.
     */
    struct tagExtendedHeapRestrictions
    {
        DDSCAPSEX   ddsCapsEx;
        DDSCAPSEX   ddsCapsExAlt;
    } ddsExtendedHeapRestrictions[1];
} DDMORESURFACECAPS, FAR * LPDDMORESURFACECAPS;

// Stereo, driver returns DD_OK if mode is ok for stereo
typedef struct _DDSTEREOMODE
{
    DWORD       dwSize;             // size of DDSTEREOMODECAPS structure

    DWORD       dwHeight;
    DWORD       dwWidth;
    DWORD       dwBpp;
    DWORD       dwRefreshRate;

    BOOL        bSupported;         // driver supports this video mode...

} DDSTEREOMODE, FAR * LPDDSTEREOMODE;


//@@BEGIN_MSINTERNAL
// For DX7, we define more DDraw driver caps (in addition to those in DDCORECAPS).
typedef struct _DDMORECAPS
{
    DWORD   dwSize;             // size of DDMORECAPS structure
    DWORD   dwAlphaCaps;        // driver-specific alpha caps for overlays & Vmem->Vmem blts
    DWORD   dwSVBAlphaCaps;     // driver-specific alpha capabilities for System->Vmem blts
    DWORD   dwVSBAlphaCaps;     // driver-specific alpha capabilities for Vmem->System blts
    DWORD   dwSSBAlphaCaps;     // driver-specific alpha capabilities for System->System blts
    DWORD   dwFilterCaps;       // driver-specific filter caps for overlays & Vmem->Vmem blts
    DWORD   dwSVBFilterCaps;    // driver-specific filter capabilities for System->Vmem blts
    DWORD   dwVSBFilterCaps;    // driver-specific filter capabilities for Vmem->System blts
    DWORD   dwSSBFilterCaps;    // driver-specific filter capabilities for System->System blts
#ifdef POSTPONED2
    DWORD   dwTransformCaps;        // driver-specific transform caps for overlays & Vmem->Vmem blts
    DWORD   dwSVBTransformCaps;     // driver-specific transform capabilities for System->Vmem blts
    DWORD   dwVSBTransformCaps;     // driver-specific transform capabilities for Vmem->System blts
    DWORD   dwSSBTransformCaps;     // driver-specific transformn capabilities for System->System blts
    DWORD   dwBltAffineMinifyLimit;   // minification limit for affine-transformed blits
    DWORD   dwOverlayAffineMinifyLimit; // minification limit for affine-transformed overlays
#endif
} DDMORECAPS, FAR * LPDDMORECAPS;
//@@END_MSINTERNAL


//@@BEGIN_MSINTERNAL
/*
 * Private:
 * Client data list element and head pointer
 */
typedef struct _PRIVATEDATANODE
{
    GUID                    guid;
    LPBYTE                  pData;
    DWORD                   cbData;
    DWORD                   dwFlags;
    DWORD                   dwContentsStamp;
    struct _PRIVATEDATANODE *pNext;
} PRIVATEDATANODE, FAR* LPPRIVATEDATANODE;

//@@END_MSINTERNAL

/*
 * DDRAW palette interface struct
 */
typedef struct _DDRAWI_DDRAWPALETTE_INT
{
    LPVOID                      lpVtbl;     // pointer to array of interface methods
    LPDDRAWI_DDRAWPALETTE_LCL   lpLcl;      // pointer to interface data
    LPDDRAWI_DDRAWPALETTE_INT   lpLink;     // link to next interface
    DWORD                       dwIntRefCnt;    // interface reference count
//@@BEGIN_MSINTERNAL
    ULONG_PTR                    dwReserved1;    // for DDrawEx
    ULONG_PTR                    dwReserved2;    // for DDrawEx
//@@END_MSINTERNAL
} DDRAWI_DDRAWPALETTE_INT;

/*
 * DDRAW internal version of DIRECTDRAWPALETTE object; it has data after the vtable
 */
typedef struct _DDRAWI_DDRAWPALETTE_GBL
{
    DWORD                       dwRefCnt;   // reference count
    DWORD                       dwFlags;    // flags
    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   // PRIVATE: DIRECTDRAW object
    DWORD                       dwProcessId;    // owning process
    LPPALETTEENTRY              lpColorTable;   // array of palette entries
    union
    {
        ULONG_PTR               dwReserved1;    // reserved for use by display driver which created this object
        HPALETTE                hHELGDIPalette;
    };
    /*
     * Fields added in version 5.0. Check if the ddraw version >= 5 (passed during
     * driver initialization) to see if these fields will be present.
     */
    DWORD                       dwDriverReserved; // For use by HAL, regardless of who created object
    DWORD                       dwContentsStamp;  // Incremented when palette changes.
    /*
     * Fields added in version 6
     */
    DWORD                       dwSaveStamp;  // Incremented when palette changes.
    /*
     * And in version 7
     */
    DWORD                       dwHandle;       //Handle used in drawprim2 palette notification

} DDRAWI_DDRAWPALETTE_GBL;

//@@BEGIN_MSINTERNAL
/* Macro to bump the contents stamp so drivers can cheaply check for changed palette data.
 * Zero means no information
 */
#define BUMP_PALETTE_STAMP(pal_gbl)                  \
if ( pal_gbl->dwContentsStamp )                      \
{                                                    \
    pal_gbl->dwContentsStamp++;                      \
    if ( 0 == pal_gbl->dwContentsStamp)              \
        pal_gbl->dwContentsStamp++;                  \
}
//@@END_MSINTERNAL

/*
 * (CMcC) The palette no longer maintains a back pointer to the owning surface
 * (there may now be many owning surfaces). So the lpDDSurface is now dwReserved0
 * (this mod. assumes that sizeof(DWORD) == sizeof(LPDDRAWI_DDRAWSURFACE_LCL). A
 * fairly safe assumption I think.
 */
typedef struct _DDRAWI_DDRAWPALETTE_LCL
{
    DWORD                       lpPalMore;  // pointer to additional local data
    LPDDRAWI_DDRAWPALETTE_GBL   lpGbl;      // pointer to data
    ULONG_PTR                   dwUnused0;  // not currently used.
    DWORD                       dwLocalRefCnt;  // local ref cnt
    IUnknown                    FAR *pUnkOuter; // outer IUnknown
    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   // pointer to owning local driver object
    ULONG_PTR                   dwReserved1;    // reserved for use by display driver
    /*
     * Added for DX6
     */
//@@BEGIN_MSINTERNAL
#if 1
    LPPRIVATEDATANODE           pPrivateDataHead;
    IUnknown *                  pAddrefedThisOwner; //This is the ddraw object that created this
                                                    //palette, if nonzero. Must Release it when palette
                                                    //is released.
    LPDDRAWI_DIRECTDRAW_INT     lpDD_Int;   // pointer to owning int
#else   //1
//@@END_MSINTERNAL
    ULONG_PTR                   dwDDRAWReserved1;
    ULONG_PTR                   dwDDRAWReserved2;
    ULONG_PTR                   dwDDRAWReserved3;
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL

} DDRAWI_DDRAWPALETTE_LCL;

// bit definition for dwFlags in DDRAWI_DDRAWPALETTE_GBL and
// dwPaletteFlags in D3DHAL_DP2SETPALETTE
#define DDRAWIPAL_256       0x00000001l // 256 entry palette
#define DDRAWIPAL_16        0x00000002l // 16 entry palette
#define DDRAWIPAL_GDI       0x00000004l // palette allocated through GDI
#define DDRAWIPAL_STORED_8  0x00000008l // palette stored as 8bpp/entry
#define DDRAWIPAL_STORED_16 0x00000010l // palette stored as 16bpp/entry
#define DDRAWIPAL_STORED_24 0x00000020l // palette stored as 24bpp/entry
#define DDRAWIPAL_EXCLUSIVE 0x00000040l // palette being used in exclusive mode
#define DDRAWIPAL_INHEL     0x00000080l // palette is done in the hel
#define DDRAWIPAL_DIRTY         0x00000100l     // gdi palette out 'o sync
#define DDRAWIPAL_ALLOW256  0x00000200l // can fully update palette
#define DDRAWIPAL_4             0x00000400l     // 4 entry palette
#define DDRAWIPAL_2             0x00000800l     // 2 entry palette
#define DDRAWIPAL_STORED_8INDEX 0x00001000l     // palette stored as 8-bit index into dst palette
#define DDRAWIPAL_ALPHA     0x00002000l // palette entries contain alpha

/*
 * DDRAW clipper interface struct
 */
typedef struct _DDRAWI_DDRAWCLIPPER_INT
{
    LPVOID                          lpVtbl;     // pointer to array of interface methods
    LPDDRAWI_DDRAWCLIPPER_LCL       lpLcl;      // pointer to interface data
    LPDDRAWI_DDRAWCLIPPER_INT       lpLink;     // link to next interface
    DWORD                           dwIntRefCnt;    // interface reference count
//@@BEGIN_MSINTERNAL
    ULONG_PTR                        dwReserved1;    // for DDrawEx
    ULONG_PTR                        dwReserved2;    // for DDrawEx
//@@END_MSINTERNAL
} DDRAWI_DDRAWCLIPPER_INT;

/*
 * DDRAW internal version of DIRECTDRAWCLIPPER object; it has data after the vtable
 */
typedef struct _DDRAWI_DDRAWCLIPPER_GBL
{
    DWORD                   dwRefCnt;   // reference count
    DWORD                   dwFlags;    // flags
    LPDDRAWI_DIRECTDRAW_GBL lpDD;       // PRIVATE: DIRECTDRAW object
    DWORD                   dwProcessId;    // owning process
    ULONG_PTR               dwReserved1;    // reserved for use by display driver
    ULONG_PTR               hWnd;       // window
    LPRGNDATA               lpStaticClipList; // clip list set by app
} DDRAWI_DDRAWCLIPPER_GBL;

/*
 * (CMcC) As with palettes, the clipper no longer maintains a back pointer to the
 * owning surface (there may now be many owning surfaces). So the lpDDSurface
 * is now dwReserved0 (this mod. assumes that sizeof(DWORD) ==
 * sizeof(LPDDRAWI_DDRAWSURFACE_LCL). A fairly safe assumption I think.
 */
typedef struct _DDRAWI_DDRAWCLIPPER_LCL
{
    DWORD                       lpClipMore; // pointer to additional local data
    LPDDRAWI_DDRAWCLIPPER_GBL   lpGbl;      // pointer to data
    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   // pointer to owning local DD object
    DWORD                       dwLocalRefCnt;  // local ref cnt
    IUnknown                    FAR *pUnkOuter; // outer IUnknown
    LPDDRAWI_DIRECTDRAW_INT     lpDD_int;   // pointer to owning DD object interface
    ULONG_PTR                   dwReserved1;    // reserved for use by display driver
    IUnknown *                  pAddrefedThisOwner; //This is the ddraw object that created this
                                                    //clipper, if nonzero. Must Release it when clipper
                                                    //is released.
} DDRAWI_DDRAWCLIPPER_LCL;

#define DDRAWICLIP_WATCHWINDOW          0x00000001l
#define DDRAWICLIP_ISINITIALIZED        0x00000002l
#define DDRAWICLIP_INMASTERSPRITELIST   0x00000004l   // clipper is referenced in master sprite list

/*
 * ATTACHLIST - internally used to maintain list of attached surfaces
 */
typedef struct _ATTACHLIST
{
    DWORD                               dwFlags;
    struct _ATTACHLIST                  FAR *lpLink;      // link to next attached surface
    struct _DDRAWI_DDRAWSURFACE_LCL FAR *lpAttached;  // attached surface local obj
    struct _DDRAWI_DDRAWSURFACE_INT FAR *lpIAttached; // attached surface interface
} ATTACHLIST;
typedef ATTACHLIST FAR *LPATTACHLIST;
#define DDAL_IMPLICIT       0x00000001l

/*
 * DBLNODE - a node in a doubly-linked list of surface interfaces
 */
typedef struct _DBLNODE
{
    struct  _DBLNODE                    FAR *next;  // link to next node
    struct  _DBLNODE                    FAR *prev;  // link to previous node
    LPDDRAWI_DDRAWSURFACE_LCL           object;     // link to object
    LPDDRAWI_DDRAWSURFACE_INT           object_int; // object interface
} DBLNODE;
typedef DBLNODE FAR *LPDBLNODE;

/*
 * ACCESSRECTLIST - internally used to all rectangles that are accessed on a surface
 */
typedef struct _ACCESSRECTLIST
{
    struct _ACCESSRECTLIST FAR  *lpLink;     // link to next attached surface
    RECT                        rDest;       // rectangle being used
    LPDDRAWI_DIRECTDRAW_LCL     lpOwner;     // owning local object
    LPVOID                      lpSurfaceData;   // associated screen ptr
    DWORD                       dwFlags;     // PRIVATE: flags
    LPHEAPALIASINFO             lpHeapAliasInfo; // PRIVATE: aliased heaps being used by this lock
} ACCESSRECTLIST;
typedef ACCESSRECTLIST FAR *LPACCESSRECTLIST;

#define ACCESSRECT_VRAMSTYLE           0x00000001L    // PRIVATE: this lock is vram style (vidmem or implict sysmem)
#define ACCESSRECT_NOTHOLDINGWIN16LOCK 0x00000002L    // PRIVATE: this lock is not holding the Win16 lock
#define ACCESSRECT_BROKEN              0x00000004L    // PRIVATE: this lock was broken by an invalidate - don't call HAL on unlock

#ifndef WIN95
typedef struct _DISPLAYMODEINFO
{
    WORD wWidth;
    WORD wHeight;
    WORD wBPP;
    WORD wRefreshRate;
} DISPLAYMODEINFO;
typedef struct _DISPLAYMODEINFO *LPDISPLAYMODEINFO;

#define EQUAL_DISPLAYMODE(a, b) (0 == memcmp(&(a), &(b), sizeof (DISPLAYMODEINFO)))
#endif

//@@BEGIN_MSINTERNAL
/*
 * Interface addref/release tracking structs
 */
//#define REFTRACKING
#ifdef REFTRACKING
typedef struct _DDRAWI_REFTRACKNODE
{
    LPVOID                      pReturnAddress;
    DWORD                       dwAddrefCount;
    DWORD                       dwReleaseCount;
    struct _DDRAWI_REFTRACKNODE FAR *  pNext;
} DDRAWI_REFTRACKNODE,  FAR * LPDDRAWI_REFTRACKNODE;

typedef struct _DDRAWI_REFTRACK
{
    LPVOID                  pLastAddref;
    LPVOID                  pLastRelease;
    LPDDRAWI_REFTRACKNODE   pHead;
} DDRAW_REFTRACK;

//in ddisunk.c:
extern void AddRefTrack(LPVOID * p);
extern void ReleaseTrack(LPVOID * p);
extern void DumpRefTrack(LPVOID p);

#define REFTRACKVAR DDRAW_REFTRACK  RefTrack;
#define ADDREFTRACK(pInt)           AddRefTrack(&pInt)
#define RELEASETRACK(pInt)          ReleaseTrack(&pInt)
#define DUMPREFTRACK(pInt)          DumpRefTrack(pInt)

#else

#define REFTRACKVAR
#define ADDREFTRACK(a)
#define RELEASETRACK(a)
#define DUMPREFTRACK(pInt)

#endif //REFTRACKING
//@@END_MSINTERNAL

/*
 * DDRAW surface interface struct
 */
typedef struct _DDRAWI_DDRAWSURFACE_INT
{
    LPVOID                      lpVtbl;     // pointer to array of interface methods
    LPDDRAWI_DDRAWSURFACE_LCL   lpLcl;      // pointer to interface data
    LPDDRAWI_DDRAWSURFACE_INT   lpLink;     // link to next interface
    DWORD                       dwIntRefCnt;    // interface reference count
//@@BEGIN_MSINTERNAL
    ULONG_PTR                    dwReserved1;    // for DDrawEx
    ULONG_PTR                    dwReserved2;    // for DDrawEx
    REFTRACKVAR
//@@END_MSINTERNAL
} DDRAWI_DDRAWSURFACE_INT;

/*
 * DDRAW internal version of DIRECTDRAWSURFACE struct
 *
 * the GBL structure is global data for all duplicate objects
 */
typedef struct _DDRAWI_DDRAWSURFACE_GBL
{
    DWORD               dwRefCnt;   // reference count
    DWORD               dwGlobalFlags;  // global flags
    union
    {
        LPACCESSRECTLIST lpRectList; // list of accesses
        DWORD           dwBlockSizeY;   // block size that display driver requested (return)
        LONG            lSlicePitch;    // slice pitch for volume textures
    };
    union
    {
        LPVMEMHEAP      lpVidMemHeap;   // heap vidmem was alloc'ed from
        DWORD           dwBlockSizeX;   // block size that display driver requested (return)
    };
    union
    {
        LPDDRAWI_DIRECTDRAW_GBL lpDD;       // internal DIRECTDRAW object
        LPVOID          lpDDHandle;     // handle to internal DIRECTDRAW object
                        // for use by display driver
                        // when calling fns in DDRAW16.DLL
    };
    FLATPTR             fpVidMem;   // pointer to video memory
    union
    {
        LONG            lPitch;     // pitch of surface
        DWORD           dwLinearSize;   // linear size of non-rectangular surface
    };
    WORD                wHeight;    // height of surface
    WORD                wWidth;     // width of surface
    DWORD               dwUsageCount;   // number of access to this surface
    ULONG_PTR           dwReserved1;    // reserved for use by display driver
    //
    // NOTE: this part of the structure is ONLY allocated if the pixel
    //       format differs from that of the primary display
    //
    DDPIXELFORMAT       ddpfSurface;    // pixel format of surface
} DDRAWI_DDRAWSURFACE_GBL;

/*
 * This is an extender structure that is allocated off the end of the SURFACE_GBL
 * structure. DO NOT place any structures whose size can change in here.
 */
#define GET_LPDDRAWSURFACE_GBL_MORE(psurf_gbl)      \
    (*(LPDDRAWI_DDRAWSURFACE_GBL_MORE *)        \
    ((BYTE *)psurf_gbl - sizeof(DWORD_PTR)))

/*
 * Return the physical memory pointer for a given surface global object.
 *
 * NOTE: The physical memory pointer is ONLY valid for surfaces allocated from
 * non-local video memory. This field will not be valid for system memory or
 * local video memory surfaces.
 */
#define SURFACE_PHYSICALVIDMEM( psurf_gbl ) \
    ( GET_LPDDRAWSURFACE_GBL_MORE( psurf_gbl )->fpPhysicalVidMem )

/*
 * NOTE: This structure contains a set of fields for describing linear to physical
 * page mappings in the case of page locked system memory. It can also contain the
 * physical surface pointer of a surface in non-local memory. As there is no point
 * in having both a linear to physical page translation table and a physical memory
 * pointer for the same surface they are placed in a union.
 */
typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE
{
    DWORD           dwSize;
    union
    {
        DWORD       dwPhysicalPageTable;        // Physical address of page table (array of physical addresses/one per 4K page)
        FLATPTR     fpPhysicalVidMem;               // Physical address of surface (non-local video memory only)
    };
    LPDWORD         pPageTable;         // Linear address of page table
    DWORD           cPages;             // Number of Pages
    ULONG_PTR       dwSavedDCContext;               // PRIVATE: For use by DDSurface::GetDC
    FLATPTR         fpAliasedVidMem;                // PRIVATE: Alias for original fpVidMem
    ULONG_PTR       dwDriverReserved;               // Reserved for driver use (both system and video memory surfaces)
    ULONG_PTR       dwHELReserved;          // PRIVATE: For HEL use only
    DWORD           cPageUnlocks;           // Incremented whenever a surface is PageUnlocked
    ULONG_PTR       hKernelSurface;         // Kernel handle for this surface
    DWORD           dwKernelRefCnt;         // Ref count for kernel handle
    LPDDCOLORCONTROL lpColorInfo;       // PRIVATE: Initial color control settings
    FLATPTR         fpNTAlias;                      // PRIVATE: Used internally by NT DirectDraw
    DWORD           dwContentsStamp;                // Changes when surface data may have changed. 0 means no information
    LPVOID          lpvUnswappedDriverReserved;     // Reserved for use by display driver. Is not swapped when Flip is called on this surface
//@@BEGIN_MSINTERNAL
#if 1
    LPVOID          pvContents;         // Persistent-content memory
    DWORD           dwBackupStamp;      // Value of dwContentsStamp when contents restored
    DWORD           dwSaveStamp;        // Value of dwContentsStamp when contents saved via IPersistX
#else   //1
//@@END_MSINTERNAL
    LPVOID          lpDDRAWReserved2;
    DWORD           dwDDRAWReserved1;
    DWORD           dwDDRAWReserved2;
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
    FLATPTR         fpAliasOfVidMem;    // PRIVATE: The original VidMem pointer of which fpAliasedVidMem is an alias of
                                        // This is used to compare with a given fpVidMem to see if we can use the cached fpAliasedVidMem or
                                        // if we need to call GetAliasedVidMem.
} DDRAWI_DDRAWSURFACE_GBL_MORE;

//@@BEGIN_MSINTERNAL
/* Macro to bump the contents stamp so drivers can cheaply check for changed surface data.
 * Zero means no information
 */
#define BUMP_SURFACE_STAMP(surf_gbl)                                                \
if ( GET_LPDDRAWSURFACE_GBL_MORE(surf_gbl)->dwContentsStamp )                      \
{                                                                                   \
    GET_LPDDRAWSURFACE_GBL_MORE(surf_gbl)->dwContentsStamp++;                      \
    if ( 0 ==GET_LPDDRAWSURFACE_GBL_MORE(surf_gbl)->dwContentsStamp)               \
        GET_LPDDRAWSURFACE_GBL_MORE(surf_gbl)->dwContentsStamp++;                  \
}
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#define NUM_RECTS_IN_REGIONLIST 6
/* This holds the list of dirty regions for D3D texture managed surfaces */
typedef struct _REGIONLIST
{
    RGNDATAHEADER rdh;
    RECTL rect[NUM_RECTS_IN_REGIONLIST];
} REGIONLIST;

typedef REGIONLIST *LPREGIONLIST;
//@@END_MSINTERNAL

/*
 * a structure holding additional LCL surface information (can't simply be appended
 * to the LCL structure as that structure is of variable size).
 */
typedef struct _DDRAWI_DDRAWSURFACE_MORE
{
    DWORD                       dwSize;
    IUNKNOWN_LIST               FAR *lpIUnknowns;   // IUnknowns aggregated by this surface
    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;       // Pointer to the DirectDraw local object
    DWORD                       dwPageLockCount;    // count of pagelocks
    DWORD                       dwBytesAllocated;   // size of sys mem allocated
    LPDDRAWI_DIRECTDRAW_INT     lpDD_int;       // Pointer to the DirectDraw interface
    DWORD                       dwMipMapCount;      // Number of mip-map levels in the chain
    LPDDRAWI_DDRAWCLIPPER_INT   lpDDIClipper;       // Interface to attached clipper object
    //------- Fields added in Version 5.0 -------
    LPHEAPALIASINFO             lpHeapAliasInfo;    // PRIVATE: Aliased heaps being referenced by this lock
    DWORD                       dwOverlayFlags;     // Current overlay flags
    VOID                        *rgjunc;        // Blitter function table for new blitter
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port currently writting data to this surface
    LPDDOVERLAYFX               lpddOverlayFX;      // current overlay fx
    DDSCAPSEX                   ddsCapsEx;
    DWORD                       dwTextureStage;     // stage in multitexture cascade
//@@BEGIN_MSINTERNAL
#if 1
    LPVOID                      lpD3DDevIList;
    LPPRIVATEDATANODE           pPrivateDataHead;
    IUnknown *                  pAddrefedThisOwner; //This is the ddraw object that created this
                                                    //surface, if nonzero. Must Release it when surface
                                                    //is released.
    DWORD                       dwPFIndex;          // pixel-format index (cached by AlphaBlt HEL)
    BOOL *                      lpbDirty;           //this bit is for D3D Texture Manage syncronization
                                                    //if it's set, D3D has to flush batched DPs
                                                    //and then refresh its video copy and clear it to
                                                    //FALSE. Blt,Lock,GetDC will set it.
#else   //1
//@@END_MSINTERNAL
    LPVOID                      lpDDRAWReserved;
    LPVOID                      lpDDRAWReserved2;
    LPVOID                      lpDDrawReserved3;
    DWORD                       dwDDrawReserved4;
    LPVOID                      lpDDrawReserved5;
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
   LPDWORD                      lpGammaRamp;
   LPDWORD                      lpOriginalGammaRamp;
//@@BEGIN_MSINTERNAL
#if 1
   LPREGIONLIST                 lpRegionList;
#ifndef WIN95
   DISPLAYMODEINFO              dmiCreated; // NT: mode surface created in
#endif
   // This is the new Surface handle generated by the ddraw runtime
   // This is sent to the driver as a cookie to associate a particular
   // surface by the CreateSurfaceEx DDI.
   DWORD                        dwSurfaceHandle;
   ULARGE_INTEGER               qwBatch; // batch number that refers to this texture (D3D)
   LPVOID                       lpTex;
#else   //1
//@@END_MSINTERNAL
   LPVOID                       lpDDrawReserved6;
#ifndef WIN95
   DISPLAYMODEINFO              dmiDDrawReserved7;
#endif
   DWORD                        dwSurfaceHandle;    // cookie for use with CreateSurfaceEx DDI
   DWORD                        qwDDrawReserved8[2];
   LPVOID                       lpDDrawReserved9;
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
    DWORD                       cSurfaces;                  //PRIVATE
    LPDDSURFACEDESC2            pCreatedDDSurfaceDesc2;     //PRIVATE
    LPDDRAWI_DDRAWSURFACE_LCL   *slist;                     //PRIVATE
    DWORD                       dwFVF;              // saved FVF flags for exe bufs
   LPVOID                       lpVB;                       //PRIVATE
} DDRAWI_DDRAWSURFACE_MORE;

/*
 * Special values assigned to dwPFIndex member of DDRAWI_DDRAWSURFACE_MORE.
 */
#define PFINDEX_UNINITIALIZED  (0UL)    // pixel-format index is in uninitialized state
#define PFINDEX_UNSUPPORTED    (~0UL)   // surface's pixel format is not supported by HEL

/*
 * the LCL structure is local data for each individual surface object
 */
struct _DDRAWI_DDRAWSURFACE_LCL
{
    LPDDRAWI_DDRAWSURFACE_MORE      lpSurfMore; // pointer to additional local data
    LPDDRAWI_DDRAWSURFACE_GBL       lpGbl;      // pointer to surface shared data
    ULONG_PTR                        hDDSurface;     // NT Kernel-mode handle was dwUnused0
    LPATTACHLIST                    lpAttachList;   // link to surfaces we attached to
    LPATTACHLIST                    lpAttachListFrom;// link to surfaces that attached to this one
    DWORD                           dwLocalRefCnt;  // object refcnt
    DWORD                           dwProcessId;    // owning process
    DWORD                           dwFlags;    // flags
    DDSCAPS                         ddsCaps;    // capabilities of surface
    union
    {
        LPDDRAWI_DDRAWPALETTE_INT   lpDDPalette;    // associated palette
        LPDDRAWI_DDRAWPALETTE_INT   lp16DDPalette;  // 16-bit ptr to associated palette
    };
    union
    {
        LPDDRAWI_DDRAWCLIPPER_LCL   lpDDClipper;    // associated clipper
        LPDDRAWI_DDRAWCLIPPER_INT   lp16DDClipper;  // 16-bit ptr to associated clipper
    };
    DWORD                           dwModeCreatedIn;
    DWORD                           dwBackBufferCount; // number of back buffers created
    DDCOLORKEY                      ddckCKDestBlt;  // color key for destination blt use
    DDCOLORKEY                      ddckCKSrcBlt;   // color key for source blt use
//    IUnknown              FAR *pUnkOuter; // outer IUnknown
    ULONG_PTR                       hDC;        // owned dc
    ULONG_PTR                       dwReserved1;    // reserved for use by display driver

    /*
     * NOTE: this part of the structure is ONLY allocated if the surface
     *       can be used for overlays.  ddckCKSrcOverlay MUST NOT BE MOVED
     *       from the start of this area.
     */
    DDCOLORKEY                      ddckCKSrcOverlay;// color key for source overlay use
    DDCOLORKEY                      ddckCKDestOverlay;// color key for destination overlay use
    LPDDRAWI_DDRAWSURFACE_INT       lpSurfaceOverlaying; // surface we are overlaying
    DBLNODE                         dbnOverlayNode;
    /*
     * overlay rectangle, used by DDHEL
     */
    RECT                            rcOverlaySrc;
    RECT                            rcOverlayDest;
    /*
     * the below values are kept here for ddhel. they're set by UpdateOverlay,
     * they're used whenever the overlays are redrawn.
     */
    DWORD                           dwClrXparent;   // the *actual* color key (override, colorkey, or CLR_INVALID)
    DWORD                           dwAlpha;    // the per surface alpha
    /*
     * overlay position
     */
    LONG                            lOverlayX;  // current x position
    LONG                            lOverlayY;  // current y position
};
typedef struct _DDRAWI_DDRAWSURFACE_LCL DDRAWI_DDRAWSURFACE_LCL;

#define DDRAWISURFGBL_MEMFREE                   0x00000001L // video memory has been freed
#define DDRAWISURFGBL_SYSMEMREQUESTED           0x00000002L // surface is in system memory at request of user
#define DDRAWISURFGBL_ISGDISURFACE              0x00000004L // This surface represents what GDI thinks is front buffer
#define DDRAWISURFGBL_SOFTWAREAUTOFLIP          0x00000008L // This surface is autoflipped using software
#define DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK   0x00000010L // PRIVATE: a vram lock of the entire surface is not holding the Win16 lock
#define DDRAWISURFGBL_LOCKVRAMSTYLE             0x00000020L // PRIVATE: entire surface was locked with VRAM style lock
#define DDRAWISURFGBL_LOCKBROKEN                0x00000040L // PRIVATE: a lock of the entire surface was broken by an invalidate
#define DDRAWISURFGBL_IMPLICITHANDLE            0x00000080L // This dwKernelHandle was created implicitly
#define DDRAWISURFGBL_ISCLIENTMEM               0x00000100L // PRIVATE: the memory pointer to by fpVidMem was allocated by the client
#define DDRAWISURFGBL_HARDWAREOPSOURCE          0x00000200L // This surface was the source for an asynchronous hardware operation
#define DDRAWISURFGBL_HARDWAREOPDEST            0x00000400L // This surface was dest for an asynchronous hardware operation
#define DDRAWISURFGBL_HARDWAREOPSTARTED (DDRAWISURFGBL_HARDWAREOPSOURCE|DDRAWISURFGBL_HARDWAREOPDEST)
#define DDRAWISURFGBL_VPORTINTERLEAVED          0x00000800L // This surface contains interleaved video port data
#define DDRAWISURFGBL_VPORTDATA                 0x00001000L // This surface received data from the video port
#define DDRAWISURFGBL_LATEALLOCATELINEAR        0x00002000L // Optimized surface was allocated as a formless chunk. lPitch invalid, dwLinearSize valid.
#define DDRAWISURFGBL_SYSMEMEXECUTEBUFFER       0x00004000L // Driver sets this flag to tell ddraw that the surface was allocated in system memory
#define DDRAWISURFGBL_FASTLOCKHELD              0x00008000L // PRIVATE: indicates that InternLock took the fast path
#define DDRAWISURFGBL_READONLYLOCKHELD          0x00010000L // PRIVATE: indicates that the application indicated read-only lock
#define DDRAWISURFGBL_DX8SURFACE                0x00080000L // PRIVATE: indicates that the surace was created using DX8
#define DDRAWISURFGBL_DDHELDONTFREE             0x00100000L // PRIVATE: indicates that the surace memory should not be freed by the HEL


/*
 * NOTE: This flag was previously DDRAWISURFGBL_INVALID. This flags has been retired
 * and replaced by DDRAWISURF_INVALID in the local object.
 */
#define DDRAWISURFGBL_RESERVED0         0x80000000L // Reserved flag

#define DDRAWISURF_ATTACHED             0x00000001L // surface is attached to another
#define DDRAWISURF_IMPLICITCREATE       0x00000002L // surface implicitly created
#define DDRAWISURF_ISFREE               0x00000004L // surface already freed (temp flag)
#define DDRAWISURF_ATTACHED_FROM        0x00000008L // surface has others attached to it
#define DDRAWISURF_IMPLICITROOT         0x00000010L // surface root of implicit creation
#define DDRAWISURF_PARTOFPRIMARYCHAIN   0x00000020L // surface is part of primary chain
#define DDRAWISURF_DATAISALIASED        0x00000040L // used for thunking
#define DDRAWISURF_HASDC                0x00000080L // has a DC
#define DDRAWISURF_HASCKEYDESTOVERLAY   0x00000100L // surface has CKDestOverlay
#define DDRAWISURF_HASCKEYDESTBLT       0x00000200L // surface has CKDestBlt
#define DDRAWISURF_HASCKEYSRCOVERLAY    0x00000400L // surface has CKSrcOverlay
#define DDRAWISURF_HASCKEYSRCBLT        0x00000800L // surface has CKSrcBlt
#define DDRAWISURF_LOCKEXCLUDEDCURSOR   0x00001000L // surface was locked and excluded cursor
#define DDRAWISURF_HASPIXELFORMAT       0x00002000L // surface structure has pixel format data
#define DDRAWISURF_HASOVERLAYDATA       0x00004000L // surface structure has overlay data
#define DDRAWISURF_SETGAMMA             0x00008000L // gamma ramp for this surface is active
#define DDRAWISURF_SW_CKEYDESTOVERLAY   0x00010000L // surface expects to process colorkey in software
#define DDRAWISURF_SW_CKEYDESTBLT       0x00020000L // surface expects to process colorkey in software
#define DDRAWISURF_SW_CKEYSRCOVERLAY    0x00040000L // surface expects to process colorkey in software
#define DDRAWISURF_SW_CKEYSRCBLT        0x00080000L // surface expects to process colorkey in software
#define DDRAWISURF_HW_CKEYDESTOVERLAY   0x00100000L // surface expects to process colorkey in hardware
#define DDRAWISURF_HW_CKEYDESTBLT       0x00200000L // surface expects to process colorkey in hardware
#define DDRAWISURF_HW_CKEYSRCOVERLAY    0x00400000L // surface expects to process colorkey in hardware
#define DDRAWISURF_HW_CKEYSRCBLT        0x00800000L // surface expects to process colorkey in hardware
#define DDRAWISURF_INMASTERSPRITELIST   0x01000000l // surface is referenced in master sprite list
#define DDRAWISURF_HELCB                0x02000000L // surface is the ddhel cb. must call hel for lock/blt.
#define DDRAWISURF_FRONTBUFFER          0x04000000L // surface was originally a front buffer
#define DDRAWISURF_BACKBUFFER           0x08000000L // surface was originally backbuffer
#define DDRAWISURF_INVALID              0x10000000L     // surface has been invalidated by mode set
#define DDRAWISURF_DCIBUSY              0x20000000L     // HEL has turned off BUSY so DCI would work
#define DDRAWISURF_GETDCNULL            0x40000000L     // getdc could not lock and so returned GetDC(NULL)

//#define DDRAWISURF_CANTLOCK             0x20000000L     // surface cannot be locked (primary created by HEL)
#define DDRAWISURF_STEREOSURFACELEFT    0x20000000L     // surface is left of stereo pair
#define DDRAWISURF_DRIVERMANAGED        0x40000000L // Surface is a driver managed texture (D3D)
#define DDRAWISURF_DCILOCK              0x80000000L // Surface was locked using DCIBeginAccess

/*
 * rop stuff
 */
#define ROP_HAS_SOURCE      0x00000001l
#define ROP_HAS_PATTERN     0x00000002l
#define ROP_HAS_SOURCEPATTERN   ROP_HAS_SOURCE | ROP_HAS_PATTERN

/*
 * mode information
 */
typedef struct _DDHALMODEINFO
{
    DWORD   dwWidth;        // width (in pixels) of mode
    DWORD   dwHeight;       // height (in pixels) of mode
    LONG    lPitch;         // pitch (in bytes) of mode
    DWORD   dwBPP;          // bits per pixel
    WORD    wFlags;         // flags
    WORD    wRefreshRate;       // refresh rate
    DWORD   dwRBitMask;     // red bit mask
    DWORD   dwGBitMask;     // green bit mask
    DWORD   dwBBitMask;     // blue bit mask
    DWORD   dwAlphaBitMask;     // alpha bit mask
} DDHALMODEINFO;
typedef DDHALMODEINFO FAR *LPDDHALMODEINFO;

#define DDMODEINFO_PALETTIZED   0x0001  // mode is palettized
#define DDMODEINFO_MODEX        0x0002  // mode is a modex mode
#define DDMODEINFO_UNSUPPORTED  0x0004  // mode is not supported by driver

/*
 * Note internally, standard VGA modes are tagged as MODEX and STANDARDVGA
 */
#define DDMODEINFO_STANDARDVGA  0x0008  // mode is standard vga, e.g. mode 0x13

#define DDMODEINFO_MAXREFRESH   0x0010  // refresh rate specified is the max supported
#define DDMODEINFO_STEREO       0x0020  // mode can be switched to stereo

//@@BEGIN_MSINTERNAL
/*
 * This means that the mode marked as 16bpp is really 555
 */
#define DDMODEINFO_555MODE      0x0100

/*
 * This mode should only be used with DX7 or higher interfaces.
 */
#define DDMODEINFO_DX7ONLY      0x0200

#define DDMODEINFO_VALID        0x003C // valid

#define LISTGROWSIZE    1024

typedef struct _DDSURFACELISTENTRY
{
    DWORD   dwFlags;
    DWORD   nextentry;
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurface;
} DDSURFACELISTENTRY;
typedef DDSURFACELISTENTRY FAR* LPDDSURFACELISTENTRY;
typedef struct _DWLIST
{
    LPDDSURFACELISTENTRY    dwList;    // array to hold handles, dynamically allocated
                        // dwList[0] is the size of array dwList if allocated
    DWORD   dwFreeList; // point to the first unused slot in dwList
} DWLIST;
typedef DWLIST FAR* LPDWLIST;
#ifdef WIN95
#define SURFACEHANDLELIST(this_lcl)    (this_lcl->SurfaceHandleList)
#else   //WIN95
#define SURFACEHANDLELIST(this_lcl)    (this_lcl->lpGbl->SurfaceHandleList)
#endif  //WIN95
//@@END_MSINTERNAL

/*
 * DDRAW interface struct
 */
typedef struct _DDRAWI_DIRECTDRAW_INT
{
    LPVOID                      lpVtbl;     // pointer to array of interface methods
    LPDDRAWI_DIRECTDRAW_LCL     lpLcl;      // pointer to interface data
    LPDDRAWI_DIRECTDRAW_INT     lpLink;     // link to next interface
    DWORD                       dwIntRefCnt;    // interface reference count
//@@BEGIN_MSINTERNAL
    ULONG_PTR                    dwReserved1;    // for DDrawEx
    ULONG_PTR                    dwReserved2;    // for DDrawEx
//@@END_MSINTERNAL
} DDRAWI_DIRECTDRAW_INT;

/*
 * DDRAW version of DirectDraw object; it has data after the vtable
 *
 * all entries marked as PRIVATE are not for use by the display driver
 */
typedef struct _DDHAL_CALLBACKS
{
    DDHAL_DDCALLBACKS           cbDDCallbacks;  // addresses in display driver for DIRECTDRAW object HAL
    DDHAL_DDSURFACECALLBACKS    cbDDSurfaceCallbacks; // addresses in display driver for DIRECTDRAWSURFACE object HAL
    DDHAL_DDPALETTECALLBACKS    cbDDPaletteCallbacks; // addresses in display driver for DIRECTDRAWPALETTE object HAL
    DDHAL_DDCALLBACKS           HALDD;      // HAL for DIRECTDRAW object
    DDHAL_DDSURFACECALLBACKS    HALDDSurface;   // HAL for DIRECTDRAWSURFACE object
    DDHAL_DDPALETTECALLBACKS    HALDDPalette;   // HAL for DIRECTDRAWPALETTE object
    DDHAL_DDCALLBACKS           HELDD;      // HEL for DIRECTDRAW object
    DDHAL_DDSURFACECALLBACKS    HELDDSurface;   // HEL for DIRECTDRAWSURFACE object
    DDHAL_DDPALETTECALLBACKS    HELDDPalette;   // HEL for DIRECTDRAWPALETTE object
    DDHAL_DDEXEBUFCALLBACKS     cbDDExeBufCallbacks; // addresses in display driver for DIRECTDRAWEXEBUF pseudo object HAL
    DDHAL_DDEXEBUFCALLBACKS     HALDDExeBuf;    // HAL for DIRECTDRAWEXEBUF pseudo object
    DDHAL_DDEXEBUFCALLBACKS     HELDDExeBuf;    // HEL for DIRECTDRAWEXEBUF preudo object
    DDHAL_DDVIDEOPORTCALLBACKS  cbDDVideoPortCallbacks; // addresses in display driver for VideoPort object HAL
    DDHAL_DDVIDEOPORTCALLBACKS  HALDDVideoPort; // HAL for DIRECTDRAWVIDEOPORT psuedo object
    DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks; // addresses in display driver for color control object HAL
    DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl; // HAL for DIRECTDRAWCOLORCONTROL psuedo object
    DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;
    DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;
    DDHAL_DDKERNELCALLBACKS     cbDDKernelCallbacks;
    DDHAL_DDKERNELCALLBACKS HALDDKernel;
    DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;
    DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;
//@@BEGIN_MSINTERNAL
#ifdef WINNT
    DDHAL_DDNTCALLBACKS         cbDDNTCallbacks;
    DDHAL_DDNTCALLBACKS         HALDDNT;
#endif
    DDHAL_DDMISCELLANEOUS2CALLBACKS HELDDMiscellaneous2;  // HEL
    DDHAL_DDMISCELLANEOUS2CALLBACKS HALDDMiscellaneous2;  // HAL (32-bit, no thunk)
#ifndef WINNT
    DDHAL_DDNTCALLBACKS         cbDDNTCallbacks;
    DDHAL_DDNTCALLBACKS         HALDDNT;
#endif
//@@END_MSINTERNAL
 } DDHAL_CALLBACKS, far *LPDDHAL_CALLBACKS;

//@@BEGIN_MSINTERNAL
/*
 * READ THIS - READ THIS - READ THIS - READ THIS - READ THIS - READ THIS
 *
 * Why have this structure and the API visible DDCAPS? Well we want to grow
 * DDCAPS so the application can get at new caps. but we can't grow the
 * DDCAPS that the driver returns to us because it is embeded by value in
 * DDCOREINFO and chaging is size would break drivers - sigh.Therefore this
 * structure, DDCORECAPS, is the caps structure returned to us by the driver
 * in DDHALINFO.
 *
 * IT HAS A FIXED SIZE AND MUST NEVER GROW OR SHRINK. Whereas the public
 * DDCAPS will grow as new capabilities are added. If new caps are needed
 * they should be returned through a GetDriverInfo call rather than
 * through growing DDCORECAPS.
 *
 * The field names of this structure must be maintained in sync. with the
 * those in the public DDCAPS structure. So if you rename a field at the
 * API level rename it here also (but don't break drivers)
 */
//@@END_MSINTERNAL

/*
 * This structure mirrors the first entries of the DDCAPS but is of a fixed
 * size and will not grow as DDCAPS grows. This is the structure your driver
 * returns in DDCOREINFO. Additional caps will be requested via a GetDriverInfo
 * call.
 */
typedef struct _DDCORECAPS
{
    DWORD   dwSize;         // size of the DDDRIVERCAPS structure
    DWORD   dwCaps;         // driver specific capabilities
    DWORD   dwCaps2;        // more driver specific capabilites
    DWORD   dwCKeyCaps;     // color key capabilities of the surface
    DWORD   dwFXCaps;       // driver specific stretching and effects capabilites
    DWORD   dwFXAlphaCaps;      // alpha driver specific capabilities
    DWORD   dwPalCaps;      // palette capabilities
    DWORD   dwSVCaps;       // stereo vision capabilities
    DWORD   dwAlphaBltConstBitDepths;   // DDBD_2,4,8
    DWORD   dwAlphaBltPixelBitDepths;   // DDBD_1,2,4,8
    DWORD   dwAlphaBltSurfaceBitDepths; // DDBD_1,2,4,8
    DWORD   dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
    DWORD   dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
    DWORD   dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
    DWORD   dwZBufferBitDepths;     // DDBD_8,16,24,32
    DWORD   dwVidMemTotal;      // total amount of video memory
    DWORD   dwVidMemFree;       // amount of free video memory
    DWORD   dwMaxVisibleOverlays;   // maximum number of visible overlays
    DWORD   dwCurrVisibleOverlays;  // current number of visible overlays
    DWORD   dwNumFourCCCodes;   // number of four cc codes
    DWORD   dwAlignBoundarySrc; // source rectangle alignment
    DWORD   dwAlignSizeSrc;     // source rectangle byte size
    DWORD   dwAlignBoundaryDest;    // dest rectangle alignment
    DWORD   dwAlignSizeDest;    // dest rectangle byte size
    DWORD   dwAlignStrideAlign; // stride alignment
    DWORD   dwRops[DD_ROP_SPACE];   // ROPS supported
    DDSCAPS ddsCaps;        // DDSCAPS structure has all the general capabilities
    DWORD   dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwMinLiveVideoStretch;  // minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwMaxLiveVideoStretch;  // maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwMinHwCodecStretch;    // minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwMaxHwCodecStretch;    // maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD   dwReserved1;        // reserved
    DWORD   dwReserved2;        // reserved
    DWORD   dwReserved3;        // reserved
    DWORD   dwSVBCaps;      // driver specific capabilities for System->Vmem blts
    DWORD   dwSVBCKeyCaps;      // driver color key capabilities for System->Vmem blts
    DWORD   dwSVBFXCaps;        // driver FX capabilities for System->Vmem blts
    DWORD   dwSVBRops[DD_ROP_SPACE];// ROPS supported for System->Vmem blts
    DWORD   dwVSBCaps;      // driver specific capabilities for Vmem->System blts
    DWORD   dwVSBCKeyCaps;      // driver color key capabilities for Vmem->System blts
    DWORD   dwVSBFXCaps;        // driver FX capabilities for Vmem->System blts
    DWORD   dwVSBRops[DD_ROP_SPACE];// ROPS supported for Vmem->System blts
    DWORD   dwSSBCaps;      // driver specific capabilities for System->System blts
    DWORD   dwSSBCKeyCaps;      // driver color key capabilities for System->System blts
    DWORD   dwSSBFXCaps;        // driver FX capabilities for System->System blts
    DWORD   dwSSBRops[DD_ROP_SPACE];// ROPS supported for System->System blts
    DWORD   dwMaxVideoPorts;    // maximum number of usable video ports
    DWORD   dwCurrVideoPorts;   // current number of video ports used
    DWORD   dwSVBCaps2;     // more driver specific capabilities for System->Vmem blts
} DDCORECAPS;

typedef DDCORECAPS FAR* LPDDCORECAPS;

typedef struct _DDRAWI_DIRECTDRAW_GBL
{
/*  0*/ DWORD                   dwRefCnt;    // reference count
/*  4*/ DWORD                   dwFlags;     // flags
/*  8*/ FLATPTR                 fpPrimaryOrig;   // primary surf vid mem. ptr
/*  c*/ DDCORECAPS              ddCaps;      // driver caps
/*148*/ DWORD                   dwInternal1;     // Private to ddraw.dll
/*16c*/ DWORD                   dwUnused1[9];    // not currently used
/*170*/ LPDDHAL_CALLBACKS       lpDDCBtmp;   // HAL callbacks
/*174*/ LPDDRAWI_DDRAWSURFACE_INT   dsList;      // PRIVATE: list of all surfaces
/*178*/ LPDDRAWI_DDRAWPALETTE_INT   palList;     // PRIVATE: list of all palettes
/*17c*/ LPDDRAWI_DDRAWCLIPPER_INT   clipperList;     // PRIVATE: list of all clippers
/*180*/ LPDDRAWI_DIRECTDRAW_GBL     lp16DD;      // PRIVATE: 16-bit ptr to this struct
/*184*/ DWORD                   dwMaxOverlays;   // maximum number of overlays
/*188*/ DWORD                   dwCurrOverlays;  // current number of visible overlays
/*18c*/ DWORD                   dwMonitorFrequency; // monitor frequency in current mode
/*190*/ DDCORECAPS              ddHELCaps;   // HEL capabilities
/*2cc*/ DWORD                   dwUnused2[50];   // not currently used
/*394*/ DDCOLORKEY              ddckCKDestOverlay; // color key for destination overlay use
/*39c*/ DDCOLORKEY              ddckCKSrcOverlay; // color key for source overlay use
/*3a4*/ VIDMEMINFO              vmiData;     // info about vid memory
/*3f4*/ LPVOID                  lpDriverHandle;  // handle for use by display driver
/*   */                          // to call fns in DDRAW16.DLL
/*3f8*/ LPDDRAWI_DIRECTDRAW_LCL         lpExclusiveOwner;   // PRIVATE: exclusive local object
/*3fc*/ DWORD                   dwModeIndex;     // current mode index
/*400*/ DWORD                   dwModeIndexOrig; // original mode index
/*404*/ DWORD                   dwNumFourCC;     // number of fourcc codes supported
/*408*/ DWORD                   FAR *lpdwFourCC; // PRIVATE: fourcc codes supported
/*40c*/ DWORD                   dwNumModes;  // number of modes supported
/*410*/ LPDDHALMODEINFO         lpModeInfo;  // PRIVATE: mode information
/*424*/ PROCESS_LIST            plProcessList;   // PRIVATE: list of processes using driver
/*428*/ DWORD                   dwSurfaceLockCount; // total number of outstanding locks
/*42c*/ DWORD                   dwAliasedLockCnt; // PRIVATE: number of outstanding aliased locks
/*430*/ ULONG_PTR                dwReserved3;     // reserved for use by display driver
/*434*/ ULONG_PTR                hDD;             // PRIVATE: NT Kernel-mode handle (was dwFree3).
/*438*/ char                    cObsolete[12];   // Obsolete field, do not use
/*444*/ DWORD                   dwReserved1;     // reserved for use by display driver
/*448*/ DWORD                   dwReserved2;     // reserved for use by display driver
/*44c*/ DBLNODE                 dbnOverlayRoot;  // The root node of the doubly-
/*   */                                                  // linked list of overlay z orders.
/*45c*/ volatile LPWORD         lpwPDeviceFlags; // driver physical device flags
/*460*/ DWORD                   dwPDevice;       // driver physical device (16:16 pointer)
/*464*/ DWORD                   dwWin16LockCnt;  // count on win16 holds
/*468*/ DWORD                   dwUnused3;       // was lpWin16LockOwner
/*46c*/ DWORD                   hInstance;       // instance handle of driver
/*470*/ DWORD                   dwEvent16;       // 16-bit event
/*474*/ DWORD                   dwSaveNumModes;  // saved number of modes supported
/*   */ //------- Fields added in Version 2.0 -------
//@@BEGIN_MSINTERNAL
#if 1   //Masked for DDK
/*478*/ LPD3DHAL_GLOBALDRIVERDATA lpD3DGlobalDriverData;  // Global D3D Data
/*47c*/ LPD3DHAL_CALLBACKS      lpD3DHALCallbacks;  // D3D HAL Callbacks
#else
//@@END_MSINTERNAL
/*478*/ ULONG_PTR                lpD3DGlobalDriverData;  // Global D3D Data
/*47c*/ ULONG_PTR                lpD3DHALCallbacks;  // D3D HAL Callbacks
//@@BEGIN_MSINTERNAL
#endif
//@@END_MSINTERNAL
/*480*/ DDCORECAPS              ddBothCaps;      // logical AND of driver and HEL caps
/*   */ //------- Fields added in Version 5.0 -------
/*5bc*/ LPDDVIDEOPORTCAPS       lpDDVideoPortCaps;// Info returned by the HAL (an array if more than one video port)
/*5c0*/ LPDDRAWI_DDVIDEOPORT_INT    dvpList;     // PRIVATE: list of all video ports
//@@BEGIN_MSINTERNAL
#if 1   //Masked for DDK
/*5c4*/ LPD3DHAL_CALLBACKS2     lpD3DHALCallbacks2;     // Post-DX3 D3D HAL callbacks
#else
//@@END_MSINTERNAL
/*5c4*/ ULONG_PTR                lpD3DHALCallbacks2;     // Post-DX3 D3D HAL callbacks
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
/*5c8*/ RECT                    rectDevice;  // rectangle (in desktop coord) for device
/*5d8*/ DWORD                   cMonitors;   // number of monitors in the system
/*5dc*/ LPVOID                  gpbmiSrc;    // PRIVATE: used by HEL
/*5e0*/ LPVOID                  gpbmiDest;   // PRIVATE: used by HEL
/*5e4*/ LPHEAPALIASINFO         phaiHeapAliases; // PRIVATE: video memory heap aliases
/*5e8*/ ULONG_PTR               hKernelHandle;
/*5ec*/ ULONG_PTR               pfnNotifyProc;   // Notification proc registered w/ VDD
/*5f0*/ LPDDKERNELCAPS          lpDDKernelCaps;  // Capabilies of kernel mode interface
/*5f4*/ LPDDNONLOCALVIDMEMCAPS  lpddNLVCaps;     // hardware non-local to local vidmem caps
/*5f8*/ LPDDNONLOCALVIDMEMCAPS  lpddNLVHELCaps;  // emulation layer non-local to local vidmem caps
/*5fc*/ LPDDNONLOCALVIDMEMCAPS  lpddNLVBothCaps; // logical AND of hardware and emulation non-local to local vidmem caps
//@@BEGIN_MSINTERNAL
#if 1   //Masked for DDK
/*600*/ LPD3DHAL_D3DEXTENDEDCAPS lpD3DExtendedCaps; // extended caps for D3D
#else
//@@END_MSINTERNAL
/*600*/ ULONG_PTR                lpD3DExtendedCaps; // extended caps for D3D
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
/*   */ //--------Fields added in Version 5.0A
/*604*/ DWORD                   dwDOSBoxEvent;      // Event set when returning from a DOS box
/*608*/ RECT                    rectDesktop;        // Desktop coordinates
/*618*/ char                    cDriverName[MAX_DRIVER_NAME]; // Display name
/*   */ //------- Fields added in Version 6.0 -------
//@@BEGIN_MSINTERNAL
#if 1   //Masked for DDK
/*638*/ LPD3DHAL_CALLBACKS3     lpD3DHALCallbacks3;     // DX6 D3D callbacks
#else
//@@END_MSINTERNAL
/*638*/ ULONG_PTR                lpD3DHALCallbacks3;     // DX6 D3D callbacks
//@@BEGIN_MSINTERNAL
#endif  //1
//@@END_MSINTERNAL
/*63c*/ DWORD                   dwNumZPixelFormats;     // Number of z-buffer+stencil pixel formats
/*640*/ LPDDPIXELFORMAT         lpZPixelFormats;        // Pointer to array of z-buffer pixel formats
/*644*/ LPDDRAWI_DDMOTIONCOMP_INT mcList;               // PRIVATE: list of all motion comp objects
/*648*/ DWORD                   hDDVxd;                 // handle to ddraw.vxd
/*64c*/ DDSCAPSEX               ddsCapsMore;            // as queried via GUID_DDMoreSurfaceCaps
//@@BEGIN_MSINTERNAL
/*658*/ DWORD                   dwBusyDueToAliasedLock; // Almost identical semantics as dwAliasedLockCnt,
                                                        // except not incremented for execute buffer locks.
#ifndef WIN95
        DISPLAYMODEINFO         dmiCurrent; // NT: current display mode
#endif
/*65c*/ LPDDRAWI_DDRAWSURFACE_INT dsFreeList; // PRIVATE: freed interface list, moved from dsList and ready to be recycled
/*660*/ DD32BITDRIVERDATA       dd32BitDriverData;

/*780*/ LPDDMORECAPS            lpddMoreCaps;           // more hardware caps bits for DX7
/*784*/ LPDDMORECAPS            lpddHELMoreCaps;        // more HEL caps bits for DX7
/*788*/ LPDDMORECAPS            lpddBothMoreCaps;       // bitwise AND of more hardware and HEL caps bits for DX7

/*78c*/ DDSCAPSEX               ddsHELCapsMore;            // as queried via GUID_DDMoreSurfaceCaps
/*   */ LPDDMONITORINFO         lpMonitorInfo;          // What refresh rates the monitor/card support

/*   */ LPDDHAL_GETDRIVERINFO       pGetDriverInfo;
#ifdef WINNT
        DWLIST                  SurfaceHandleList; // array to hold handles, dynamically allocated
#endif  //WINNT
        GUID                    guidDevice;             // GUID specifying the hardware device
#ifdef POSTPONED
/**/ LPDDUMODEDRVINFO           lpDDUmodeDrvInfo;       // Usermode driver info
/**/ LPDDOPTSURFACEINFO         lpDDOptSurfaceInfo;     //Optimized Surface Information
#endif //POSTPONED
#ifdef POSTPONED2
/**/ LPVOID                     lpMasterSpriteList;     // master sprite list
#endif //POSTPONED2

//@@END_MSINTERNAL
} DDRAWI_DIRECTDRAW_GBL;

//@@BEGIN_MSINTERNAL
typedef void (FAR PASCAL * LPPALETTEUPDATENOTIFY)(IUnknown FAR * pD3DIUnknown, DWORD dwPaletteHandle, DWORD dwStartIndex, DWORD dwNumberOfIndices, LPPALETTEENTRY pFirstIndex);

// For D3DIM700, we send a pointer as the last parameter
typedef void (FAR PASCAL * LPPALETTEASSOCIATENOTIFY7)(IUnknown FAR * pD3DIUnknown, DWORD dwPaletteHandle, DWORD dwPaletteFlags, LPDDRAWI_DDRAWSURFACE_LCL surf_lcl );
// For D3DIM, we just send the handle. (MB-41840)
typedef void (FAR PASCAL * LPPALETTEASSOCIATENOTIFY)(IUnknown FAR * pD3DIUnknown, DWORD dwPaletteHandle, DWORD dwPaletteFlags, DWORD dwSurfaceHandle);

typedef void (FAR PASCAL * LPSURFACEFLIPNOTIFY)(IUnknown FAR * pD3DIUnknown);
typedef HRESULT (FAR PASCAL * FLUSHD3DDEVICES) (LPDDRAWI_DDRAWSURFACE_LCL surf_lcl);
typedef void (FAR PASCAL * D3DTEXTUREUPDATE) (IUnknown FAR * pD3DIUnknown);
typedef HRESULT (FAR PASCAL * D3DCREATETEXTURE)(LPDIRECTDRAWSURFACE7 pDDS);
typedef void (FAR PASCAL * D3DDESTROYTEXTURE)(LPVOID pTex);
typedef void (FAR PASCAL * LPBREAKVBLOCK)(LPVOID lpVB);
typedef HRESULT (FAR PASCAL * D3DSETPRIORITY)(LPVOID lpTexI, DWORD dwPriority);
typedef HRESULT (FAR PASCAL * D3DGETPRIORITY)(LPVOID lpTexI, LPDWORD lpdwPriority);
typedef HRESULT (FAR PASCAL * D3DSETLOD)(LPVOID lpTexI, DWORD dwLOD);
typedef HRESULT (FAR PASCAL * D3DGETLOD)(LPVOID lpTexI, LPDWORD lpdwLOD);

#define PALETTEUPDATENOTIFY_NAME        "PaletteUpdateNotify"
#define PALETTEASSOCIATENOTIFY_NAME     "PaletteAssociateNotify"
#define SURFACEFLIPNOTIFY_NAME          "SurfaceFlipNotify"
#define FLUSHD3DDEVICES_NAME            "FlushD3DDevices"
#define FLUSHD3DDEVICES2_NAME           "FlushD3DDevices2"
#define D3DTEXTUREUPDATE_NAME           "D3DTextureUpdate"
#define D3DCREATETEXTURE_NAME           "CreateTexture"
#define D3DDESTROYTEXTURE_NAME          "DestroyTexture"
#define D3DSETPRIORITY_NAME             "SetPriority"
#define D3DGETPRIORITY_NAME             "GetPriority"
#define D3DSETLOD_NAME                  "SetLOD"
#define D3DGETLOD_NAME                  "GetLOD"
#define BREAKVBLOCK_NAME                "D3DBreakVBLock"
//@@END_MSINTERNAL

typedef struct _DDRAWI_DIRECTDRAW_LCL
{
    DWORD                       lpDDMore;           // pointer to additional local data
    LPDDRAWI_DIRECTDRAW_GBL     lpGbl;              // pointer to data
    DWORD                       dwUnused0;          // not currently used
    DWORD                       dwLocalFlags;       // local flags (DDRAWILCL_)
    DWORD                       dwLocalRefCnt;      // local ref cnt
    DWORD                       dwProcessId;        // owning process id
    IUnknown                    FAR *pUnkOuter;     // outer IUnknown
    DWORD                       dwObsolete1;
    ULONG_PTR                   hWnd;
    ULONG_PTR                   hDC;
    DWORD                       dwErrorMode;
    LPDDRAWI_DDRAWSURFACE_INT   lpPrimary;
    LPDDRAWI_DDRAWSURFACE_INT   lpCB;
    DWORD                       dwPreferredMode;
    //------- Fields added in Version 2.0 -------
    HINSTANCE                   hD3DInstance;       // Handle of Direct3D's DLL.
    IUnknown                    FAR *pD3DIUnknown;  // Direct3D's aggregated IUnknown.
    LPDDHAL_CALLBACKS           lpDDCB;             // HAL callbacks
    ULONG_PTR                   hDDVxd;             // handle to ddraw.vxd
    //------- Fields added in Version 5.0 -------
    DWORD                       dwAppHackFlags;     // app compatibilty flags
    //------- Fields added in Version 5.A -------
    ULONG_PTR                   hFocusWnd;          // Focus window set via SetCoopLevel
    DWORD                       dwHotTracking;      // Reactive menu etc setting cached while fullscreen
    DWORD                       dwIMEState;         // IME toolbar setting cached while fullscreen
    //------- Fields added in Version 6.0 -------
    ULONG_PTR                   hWndPopup;
    ULONG_PTR                   hDD;                // PRIVATE: NT Kernel-mode handle
//@@BEGIN_MSINTERNAL
#ifdef SHAREDZ
    LPDDRAWI_DDRAWSURFACE_INT   lpSharedZ;          // Shared z-buffer (if any).
    LPDDRAWI_DDRAWSURFACE_INT   lpSharedBack;       // Shared back-buffer (if any).
#endif
#ifndef WIN95
    DISPLAYMODEINFO             dmiPreferred;       // NT: preferred display mode
#endif
//@@END_MSINTERNAL
    ULONG_PTR                   hGammaCalibrator;   // Private
    LPDDGAMMACALIBRATORPROC     lpGammaCalibrator;  // Private
//@@BEGIN_MSINTERNAL
#ifdef WIN95
    DWLIST                      SurfaceHandleList;  // array to hold handles, dynamically allocated
#endif  //WIN95
    LPDDRAWI_DIRECTDRAW_LCL     lpLink;             // link to next local
    LPPALETTEUPDATENOTIFY       pPaletteUpdateNotify;
    LPPALETTEASSOCIATENOTIFY    pPaletteAssociateNotify;
    LPSURFACEFLIPNOTIFY         pSurfaceFlipNotify;
    DWORD                       cbitsPaletteBitfieldBitCount;
    LPDWORD                     pPaletteHandleUsedBitfield;
    FLUSHD3DDEVICES             pFlushD3DDevices;
    FLUSHD3DDEVICES             pFlushD3DDevices2;
    D3DTEXTUREUPDATE            pD3DTextureUpdate;
    D3DCREATETEXTURE            pD3DCreateTexture;
    D3DDESTROYTEXTURE           pD3DDestroyTexture;
    D3DSETPRIORITY              pD3DSetPriority;
    D3DGETPRIORITY              pD3DGetPriority;
    D3DSETLOD                   pD3DSetLOD;
    D3DGETLOD                   pD3DGetLOD;
    LPDIRECTDRAWSURFACECALLBACKS pddSurfaceCallbacks;
    LPMODETESTCONTEXT           lpModeTestContext;  // Keeps track of current mode test
    DWORD                       dwNumTexLocks;      // D3D texturing stats counter
    DWORD                       dwNumTexGetDCs;     // D3D texturing stats counter
#ifndef WIN95
    DWORD                       dwCursorShadow;     // Cursor shadow turned off while fullscreen
#endif
    LPBREAKVBLOCK               pBreakVBLock;       // Private
//@@END_MSINTERNAL
} DDRAWI_DIRECTDRAW_LCL;

#define DDRAWILCL_HASEXCLUSIVEMODE          0x00000001l
#define DDRAWILCL_ISFULLSCREEN              0x00000002l
#define DDRAWILCL_SETCOOPCALLED             0x00000004l
#define DDRAWILCL_ACTIVEYES                 0x00000008l
#define DDRAWILCL_ACTIVENO                  0x00000010l
#define DDRAWILCL_HOOKEDHWND                0x00000020l
#define DDRAWILCL_ALLOWMODEX                0x00000040l
#define DDRAWILCL_V1SCLBEHAVIOUR            0x00000080l
#define DDRAWILCL_MODEHASBEENCHANGED        0x00000100l
#define DDRAWILCL_CREATEDWINDOW             0x00000200l
#define DDRAWILCL_DIRTYDC                   0x00000400l     // Set on ChangeDisplaySettings, cleared when device DC is reinited
#define DDRAWILCL_DISABLEINACTIVATE         0x00000800l
#define DDRAWILCL_CURSORCLIPPED             0x00001000l
#define DDRAWILCL_EXPLICITMONITOR           0x00002000l // device was chosen explicitly i.e. not DDrawCreate(NULL)
#define DDRAWILCL_MULTITHREADED             0x00004000l // App threaten to be multithreaded
#define DDRAWILCL_FPUSETUP                  0x00008000l // D3D does not need to switch to single prec/exceptions disabled each time
#define DDRAWILCL_POWEREDDOWN               0x00010000l // Private: indicates that screen saver is powered down
#define DDRAWILCL_DIRECTDRAW7               0x00020000l // PRIVATE: Marks if this is a IDirectDraw7 object
#define DDRAWILCL_ATTEMPTEDD3DCONTEXT       0x00040000l // PRIVATE: Marks if this ddraw local has attempted to create a d3d context
#define DDRAWILCL_FPUPRESERVE               0x00080000l // D3D needs to switch to single prec/exceptions disabled each time
#define DDRAWILCL_DX8DRIVER                 0x00100000l // PRIVATE: Set if this drvier can handle lightweight surfaces
#define DDRAWILCL_DIRECTDRAW8               0x00200000l // PRIVATE: Marks if this is a IDirectDraw8 object

#define DDRAWI_xxxxxxxxx1                   0x00000001l     // unused
#define DDRAWI_xxxxxxxxx2                   0x00000002l // unused
#define DDRAWI_VIRTUALDESKTOP               0x00000008l     // driver is really a multi-monitor virtual desktop
#define DDRAWI_MODEX                        0x00000010l // driver is using modex
#define DDRAWI_DISPLAYDRV                   0x00000020l // driver is display driver
#define DDRAWI_FULLSCREEN                   0x00000040l // driver in fullscreen mode
#define DDRAWI_MODECHANGED                  0x00000080l // display mode has been changed
#define DDRAWI_NOHARDWARE                   0x00000100l // no driver hardware at all
#define DDRAWI_PALETTEINIT                  0x00000200l // GDI palette stuff has been initalized
#define DDRAWI_NOEMULATION                  0x00000400l // no emulation at all
#define DDRAWI_HASCKEYDESTOVERLAY           0x00000800l // driver has CKDestOverlay
#define DDRAWI_HASCKEYSRCOVERLAY            0x00001000l // driver has CKSrcOverlay
#define DDRAWI_HASGDIPALETTE                0x00002000l // GDI palette exists on primary surface
#define DDRAWI_EMULATIONINITIALIZED         0x00004000l // emulation is initialized
#define DDRAWI_HASGDIPALETTE_EXCLUSIVE      0x00008000l     // exclusive mode palette
#define DDRAWI_MODEXILLEGAL                 0x00010000l // modex is not supported by this hardware
#define DDRAWI_FLIPPEDTOGDI                 0x00020000l     // driver has been flipped to show GDI surface
#define DDRAWI_NEEDSWIN16FORVRAMLOCK        0x00040000l     // PRIVATE: Win16 lock must be taken when locking a VRAM surface
#define DDRAWI_PDEVICEVRAMBITCLEARED        0x00080000l     // PRIVATE: the PDEVICE's VRAM bit was cleared by a lock
#define DDRAWI_STANDARDVGA                  0x00100000l     // Device is using standard VGA mode (DDRAWI_MODEX will be set)
#define DDRAWI_EXTENDEDALIGNMENT            0x00200000l     // At least one heap has extended alignment. Ignore alignment in VIDMEMINFO
#define DDRAWI_CHANGINGMODE                 0x00400000l     // Currently in the middle of a mode change
#define DDRAWI_GDIDRV                       0x00800000l     // Driver is a GDI driver
#define DDRAWI_ATTACHEDTODESKTOP            0x01000000l     // Device is attached to the desktop
#define DDRAWI_UMODELOADED                  0x02000000l     // User mode driver dll is loaded
#define DDRAWI_DDRAWDATANOTFETCHED          0x04000000l     // PRIVATE: Marks mode-change data fetched (NT)
#define DDRAWI_SECONDARYDRIVERLOADED        0x08000000l     // PRIVATE: Marks if a secndary PVR-style HAL was loaded
#define DDRAWI_TESTINGMODES                 0x10000000l     // PRIVATE: A mode test in is progress
#define DDRAWI_DRIVERINFO2                  0x20000000l     // PRIVATE: Driver supports GetDriverInfo2

//@@BEGIN_MSINTERNAL
#ifdef IS_16
__inline BOOL IsD3DManaged(psurf_lcl)
LPDDRAWI_DDRAWSURFACE_LCL psurf_lcl;
#else
__inline BOOL IsD3DManaged(LPDDRAWI_DDRAWSURFACE_LCL psurf_lcl)
#endif
{
    if(psurf_lcl->dwFlags & DDRAWISURF_DRIVERMANAGED)
    {
        return FALSE;
    }
    else
    {
        return ((psurf_lcl->lpSurfMore->ddsCapsEx.dwCaps2 & (DDSCAPS2_TEXTUREMANAGE | DDSCAPS2_D3DTEXTUREMANAGE)) ? TRUE : FALSE);
    }
}

#ifdef IS_16
__inline void MarkDirty(surf_lcl)
LPDDRAWI_DDRAWSURFACE_LCL surf_lcl;
#else
__inline void MarkDirty(LPDDRAWI_DDRAWSURFACE_LCL surf_lcl)
#endif // IS_16
{
    if(surf_lcl->lpSurfMore->lpbDirty)
    {
        *(surf_lcl->lpSurfMore->lpbDirty) = TRUE;
        if(surf_lcl->lpSurfMore->lpDD_lcl->dwLocalFlags & DDRAWILCL_DIRECTDRAW7)
        {
#ifdef DDASSERT
            DDASSERT(surf_lcl->lpSurfMore->lpDD_lcl->pD3DTextureUpdate);
            DDASSERT(surf_lcl->lpSurfMore->lpDD_lcl->pD3DIUnknown);
#endif
            surf_lcl->lpSurfMore->lpDD_lcl->pD3DTextureUpdate(surf_lcl->lpSurfMore->lpDD_lcl->pD3DIUnknown);
        }
    }
}

/* Flush all batched D3D drawprimitives that's using this surface */
#ifdef IS_16
__inline void FlushD3DStates(surf_lcl)
LPDDRAWI_DDRAWSURFACE_LCL surf_lcl;
#else
__inline void FlushD3DStates(LPDDRAWI_DDRAWSURFACE_LCL surf_lcl)
#endif // IS_16
{
    if(surf_lcl->lpSurfMore->lpDD_lcl->pD3DIUnknown)
        surf_lcl->lpSurfMore->lpDD_lcl->pFlushD3DDevices(surf_lcl);
}

#ifdef IS_16
__inline BOOL IsToplevel(surf_lcl)
LPDDRAWI_DDRAWSURFACE_LCL surf_lcl;
#else
__inline BOOL IsToplevel(LPDDRAWI_DDRAWSURFACE_LCL surf_lcl)
#endif // IS_16
{
    return !((surf_lcl->lpSurfMore->ddsCapsEx.dwCaps2 & DDSCAPS2_MIPMAPSUBLEVEL) ||
               ((surf_lcl->lpSurfMore->ddsCapsEx.dwCaps2 & DDSCAPS2_CUBEMAP) &&
                   (surf_lcl->lpAttachListFrom != NULL)));
}
//@@END_MSINTERNAL

/*
 * VideoPort object interface
 */
typedef struct _DDRAWI_DDVIDEOPORT_INT
{
    LPVOID                      lpVtbl;     // pointer to array of interface methods
    LPDDRAWI_DDVIDEOPORT_LCL    lpLcl;      // pointer to interface data
    LPDDRAWI_DDVIDEOPORT_INT    lpLink;     // link to next interface
    DWORD                       dwIntRefCnt;    // interface reference count
    DWORD                       dwFlags;    // Private
} DDRAWI_DDVIDEOPORT_INT;

typedef struct _DDRAWI_DDVIDEOPORT_LCL
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;       // pointer to DIRECTDRAW_LCL
    DDVIDEOPORTDESC             ddvpDesc;   // description used at create time
    DDVIDEOPORTINFO             ddvpInfo;   // most recent video port info
    LPDDRAWI_DDRAWSURFACE_INT   lpSurface;  // surface receiving the data
    LPDDRAWI_DDRAWSURFACE_INT   lpVBISurface;   // surface receiving the VBI data
    LPDDRAWI_DDRAWSURFACE_INT   *lpFlipInts;    // PRIVATE: surfaces currently being autoflipped
    DWORD                       dwNumAutoflip;  // Number of current autoflip surfaces
    DWORD                       dwProcessID;    // ID of process owning this video port
    DWORD                       dwStateFlags;
    DWORD                       dwFlags;
    DWORD                       dwRefCnt;
    FLATPTR                     fpLastFlip;     // Location from which we last flipped
    ULONG_PTR                   dwReserved1;    // Reserved for display driver
    ULONG_PTR                   dwReserved2;    // Reserved for display driver
    HANDLE                      hDDVideoPort;   // NT Kernel-mode handle
    DWORD                       dwNumVBIAutoflip;//Number of VBI surfaces currently being autoflipped
    LPDDVIDEOPORTDESC           lpVBIDesc;  // PRIVATE
    LPDDVIDEOPORTDESC           lpVideoDesc;    // PRIVATE
    LPDDVIDEOPORTINFO           lpVBIInfo;  // PRIVATE
    LPDDVIDEOPORTINFO           lpVideoInfo;    // PRIVATE
    DWORD                       dwVBIProcessID; // ID of process owning this video port
} DDRAWI_DDVIDEOPORT_LCL;

#define DDRAWIVPORT_ON                  0x00000001  // Video port is pumping data
#define DDRAWIVPORT_SOFTWARE_AUTOFLIP   0x00000002  // Video port cannot use hardware autoflip
#define DDRAWIVPORT_COLORKEYANDINTERP   0x00000004      // Overlay cannot bob and colorkey at same time
#define DDRAWIVPORT_NOKERNELHANDLES     0x00000008      // Unable to allocate kernel resources
#define DDRAWIVPORT_SOFTWARE_BOB        0x00000010  // All bobbing must be performed in software
#define DDRAWIVPORT_VBION               0x00000020  // Video is on for the VBI region
#define DDRAWIVPORT_VIDEOON             0x00000040  // Video is on for the video region

/*
 * MotionComp object interface
 */
typedef struct _DDRAWI_DDMOTIONCOMP_INT
{
    LPVOID                      lpVtbl;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpLcl;
    LPDDRAWI_DDMOTIONCOMP_INT   lpLink;
    DWORD                       dwIntRefCnt;
} DDRAWI_DDMOTIONCOMP_INT;

typedef struct _DDRAWI_DDMOTIONCOMP_LCL
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    GUID                    guid;
    DWORD                   dwUncompWidth;
    DWORD                   dwUncompHeight;
    DDPIXELFORMAT           ddUncompPixelFormat;
    DWORD                   dwInternalFlags;
    DWORD                   dwRefCnt;
    DWORD                   dwProcessId;
    HANDLE                  hMoComp;
    DWORD                   dwDriverReserved1;
    DWORD                   dwDriverReserved2;
    DWORD                   dwDriverReserved3;
    LPVOID                  lpDriverReserved1;
    LPVOID                  lpDriverReserved2;
    LPVOID                  lpDriverReserved3;
} DDRAWI_DDMOTIONCOMP_LCL;

//@@BEGIN_MSINTERNAL
/*
 * The following structure is equivalent to the DDHALINFO structure defined in DirectDraw 1.0.
 * It is used by DirectDraw internally to interpret the DDHALINFO information passed from drivers written
 * prior to DirectDraw 2.0.  New applications and drivers should use the DDHALINFO structure defined after
 * this one.  DirectDraw distinguishes between the structures via the dwSize field.
 */
typedef struct _DDHALINFO_V1
{
    DWORD                   dwSize;
    LPDDHAL_DDCALLBACKS     lpDDCallbacks;      // direct draw object callbacks
    LPDDHAL_DDSURFACECALLBACKS  lpDDSurfaceCallbacks;   // surface object callbacks
    LPDDHAL_DDPALETTECALLBACKS  lpDDPaletteCallbacks;   // palette object callbacks
    VIDMEMINFO              vmiData;        // video memory info
    DDCAPS_DX1              ddCaps;         // hw specific caps
    DWORD                   dwMonitorFrequency; // monitor frequency in current mode
    DWORD                   hWndListBox;        // list box for debug output
    DWORD                   dwModeIndex;        // current mode: index into array
    LPDWORD                 lpdwFourCC;     // fourcc codes supported
    DWORD                   dwNumModes;     // number of modes supported
    LPDDHALMODEINFO         lpModeInfo;     // mode information
    DWORD                   dwFlags;        // create flags
    LPVOID                  lpPDevice;      // physical device ptr
    DWORD                   hInstance;      // instance handle of driver
} DDHALINFO_V1;
typedef DDHALINFO_V1 FAR *LPDDHALINFO_V1;
#define DDHALINFOSIZE_V1 sizeof( DDHALINFO_V1)

//@@END_MSINTERNAL

/*
 * structure for display driver to call DDHAL_Create with
 */
typedef struct _DDHALINFO
{
    DWORD                       dwSize;
    LPDDHAL_DDCALLBACKS         lpDDCallbacks;      // direct draw object callbacks
    LPDDHAL_DDSURFACECALLBACKS  lpDDSurfaceCallbacks;   // surface object callbacks
    LPDDHAL_DDPALETTECALLBACKS  lpDDPaletteCallbacks;   // palette object callbacks
    VIDMEMINFO                  vmiData;        // video memory info
    DDCORECAPS                  ddCaps;         // core hw specific caps
    DWORD                       dwMonitorFrequency; // monitor frequency in current mode
    LPDDHAL_GETDRIVERINFO       GetDriverInfo;          // callback to get arbitrary vtable from driver
    DWORD                       dwModeIndex;        // current mode: index into array
    LPDWORD                     lpdwFourCC;     // fourcc codes supported
    DWORD                       dwNumModes;     // number of modes supported
    LPDDHALMODEINFO             lpModeInfo;     // mode information
    DWORD                       dwFlags;        // create flags
    LPVOID                      lpPDevice;      // physical device ptr
    DWORD                       hInstance;      // instance handle of driver
    //------- Fields added in Version 2.0 -------
//@@BEGIN_MSINTERNAL
#if 1   //Masked for DDK
    LPD3DHAL_GLOBALDRIVERDATA   lpD3DGlobalDriverData;  // D3D global Data
    LPD3DHAL_CALLBACKS          lpD3DHALCallbacks;  // D3D callbacks
#else   //1
//@@END_MSINTERNAL
    ULONG_PTR                    lpD3DGlobalDriverData;  // D3D global Data
    ULONG_PTR                   lpD3DHALCallbacks;  // D3D callbacks
//@@BEGIN_MSINTERNAL
#endif  //1
    // For backward compatibility with pre-DX5 runtimes, must not
    // add fields to this structure. Use GetDriverInfo instead.
//@@END_MSINTERNAL
    LPDDHAL_DDEXEBUFCALLBACKS   lpDDExeBufCallbacks;    // Execute buffer pseudo object callbacks
} DDHALINFO;
typedef DDHALINFO FAR *LPDDHALINFO;

#define DDHALINFOSIZE_V2 sizeof( DDHALINFO )

#define DDHALINFO_ISPRIMARYDISPLAY  0x00000001l // indicates driver is primary display driver
#define DDHALINFO_MODEXILLEGAL      0x00000002l // indicates this hardware does not support modex modes
#define DDHALINFO_GETDRIVERINFOSET  0x00000004l // indicates that GetDriverInfo is set
#define DDHALINFO_GETDRIVERINFO2    0x00000008l // indicates driver support GetDriverInfo2 variant
                                                // of GetDriverInfo. New for DX 8.0

/*
 * DDRAW16.DLL entry points
 */
typedef BOOL (DDAPI *LPDDHAL_SETINFO)( LPDDHALINFO lpDDHalInfo, BOOL reset );
typedef FLATPTR (DDAPI *LPDDHAL_VIDMEMALLOC)( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, DWORD dwWidth, DWORD dwHeight );
typedef void (DDAPI *LPDDHAL_VIDMEMFREE)( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, FLATPTR fpMem );

extern BOOL DDAPI DDHAL_SetInfo( LPDDHALINFO lpDDHALInfo, BOOL reset );
extern FLATPTR DDAPI DDHAL_VidMemAlloc( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, DWORD dwWidth, DWORD dwHeight );
extern void DDAPI DDHAL_VidMemFree( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, FLATPTR fpMem );


typedef struct
{
    DWORD               dwSize;
    LPDDHAL_SETINFO     lpSetInfo;
    LPDDHAL_VIDMEMALLOC lpVidMemAlloc;
    LPDDHAL_VIDMEMFREE  lpVidMemFree;
} DDHALDDRAWFNS;
typedef DDHALDDRAWFNS FAR *LPDDHALDDRAWFNS;

/****************************************************************************
 *
 * DDHAL structures for Surface Object callbacks
 *
 ***************************************************************************/

//@@BEGIN_MSINTERNAL
/*
 * This special flag is seen only by drivers.  The DD runtime sets this
 * bit in DDHAL_BLTDATA.dwFlags if the dwAFlags and ddargbScaleFactors
 * members at the end of the DDHAL_BLTDATA structure are valid.
 * The flag is always set if the DDHAL_BLTDATA structure is passed to
 * the driver via the AlphaBlt HAL callback; otherwise, the flag is zero.
 */
#define DDBLT_AFLAGS            0x80000000L

/*
 * This flag will be set in DDHAL_BLTDATA.dwAFlags if the call was originated
 * by the AlphaBlt API method. If the call was originated by the Blt API,
 * this flag will not be set.
 * Drivers which have a unified Blt/AlphaBlt DDI can use this flag to distinguish
 * between the two API calls.
 */
#define DDABLT_SRCOVERDEST      0x00000001L
//@@END_MSINTERNAL

/*
 * structure for passing information to DDHAL Blt and AlphaBlt fns
 */
typedef struct _DDHAL_BLTDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;// dest surface
    RECTL                       rDest;      // dest rect
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; // src surface
    RECTL                       rSrc;       // src rect
    DWORD                       dwFlags;    // blt flags
    DWORD                       dwROPFlags; // ROP flags (valid for ROPS only)
    DDBLTFX                     bltFX;      // blt FX
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_BLT           Blt;        // PRIVATE: ptr to callback
    BOOL                        IsClipped;      // clipped blt?
    RECTL                       rOrigDest;  // unclipped dest rect
                                            // (only valid if IsClipped)
    RECTL                       rOrigSrc;   // unclipped src rect
                                            // (only valid if IsClipped)
    DWORD                       dwRectCnt;  // count of dest rects
                                            // (only valid if IsClipped)
    LPRECT                      prDestRects;    // array of dest rects

//@@BEGIN_MSINTERNAL

    DWORD                       dwAFlags;   // DDABLT_ flags (for AlphaBlt DDI)
    DDARGB                      ddargbScaleFactors;  // RGBA scaling factors (AlphaBlt)
//@@END_MSINTERNAL
} DDHAL_BLTDATA;

/*
 * structure for passing information to DDHAL Lock fn
 */
typedef struct _DDHAL_LOCKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    DWORD                       bHasRect;   // rArea is valid
    RECTL                       rArea;      // area being locked
    LPVOID                      lpSurfData; // pointer to screen memory (return value)
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_LOCK          Lock;           // PRIVATE: ptr to callback
    DWORD                       dwFlags;        // DDLOCK flags
} DDHAL_LOCKDATA;

/*
 * structure for passing information to DDHAL Unlock fn
 */
typedef struct _DDHAL_UNLOCKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    HRESULT                     ddRVal;         // return value
    LPDDHALSURFCB_UNLOCK        Unlock;     // PRIVATE: ptr to callback
} DDHAL_UNLOCKDATA;

/*
 * structure for passing information to DDHAL UpdateOverlay fn
 */
typedef struct _DDHAL_UPDATEOVERLAYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;// dest surface
    RECTL                       rDest;      // dest rect
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; // src surface
    RECTL                       rSrc;       // src rect
    DWORD                       dwFlags;    // flags
    DDOVERLAYFX                 overlayFX;  // overlay FX
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;  // PRIVATE: ptr to callback
} DDHAL_UPDATEOVERLAYDATA;

/*
 * structure for passing information to DDHAL UpdateOverlay fn
 */
typedef struct _DDHAL_SETOVERLAYPOSITIONDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; // src surface
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;// dest surface
    LONG                        lXPos;      // x position
    LONG                        lYPos;      // y position
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition; // PRIVATE: ptr to callback
} DDHAL_SETOVERLAYPOSITIONDATA;
/*
 * structure for passing information to DDHAL SetPalette fn
 */
typedef struct _DDHAL_SETPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    // palette to set to surface
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_SETPALETTE    SetPalette; // PRIVATE: ptr to callback
    BOOL                        Attach;         // attach this palette?
} DDHAL_SETPALETTEDATA;

/*
 * structure for passing information to DDHAL Flip fn
 */
typedef struct _DDHAL_FLIPDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurr; // current surface
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTarg; // target surface (to flip to)
    DWORD                       dwFlags;    // flags
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_FLIP          Flip;       // PRIVATE: ptr to callback
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurrLeft; // current surface
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTargLeft; // target surface (to flip to)
} DDHAL_FLIPDATA;

/*
 * structure for passing information to DDHAL DestroySurface fn
 */
typedef struct _DDHAL_DESTROYSURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;// PRIVATE: ptr to callback
} DDHAL_DESTROYSURFACEDATA;

/*
 * structure for passing information to DDHAL SetClipList fn
 */
typedef struct _DDHAL_SETCLIPLISTDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_SETCLIPLIST   SetClipList;    // PRIVATE: ptr to callback
} DDHAL_SETCLIPLISTDATA;

/*
 * structure for passing information to DDHAL AddAttachedSurface fn
 */
typedef struct _DDHAL_ADDATTACHEDSURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL         lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL       lpDDSurface;    // surface struct
    LPDDRAWI_DDRAWSURFACE_LCL       lpSurfAttached; // surface to attach
    HRESULT                         ddRVal;     // return value
    LPDDHALSURFCB_ADDATTACHEDSURFACE    AddAttachedSurface; // PRIVATE: ptr to callback
} DDHAL_ADDATTACHEDSURFACEDATA;

/*
 * structure for passing information to DDHAL SetColorKey fn
 */
typedef struct _DDHAL_SETCOLORKEYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    DWORD                       dwFlags;    // flags
    DDCOLORKEY                  ckNew;      // new color key
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_SETCOLORKEY   SetColorKey;    // PRIVATE: ptr to callback
} DDHAL_SETCOLORKEYDATA;

/*
 * structure for passing information to DDHAL GetBltStatus fn
 */
typedef struct _DDHAL_GETBLTSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    DWORD                       dwFlags;    // flags
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_GETBLTSTATUS  GetBltStatus;   // PRIVATE: ptr to callback
} DDHAL_GETBLTSTATUSDATA;

/*
 * structure for passing information to DDHAL GetFlipStatus fn
 */
typedef struct _DDHAL_GETFLIPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    DWORD                       dwFlags;    // flags
    HRESULT                     ddRVal;     // return value
    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;  // PRIVATE: ptr to callback
} DDHAL_GETFLIPSTATUSDATA;

/****************************************************************************
 *
 * DDHAL structures for Palette Object callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL DestroyPalette fn
 */
typedef struct _DDHAL_DESTROYPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    // palette struct
    HRESULT                     ddRVal;     // return value
    LPDDHALPALCB_DESTROYPALETTE DestroyPalette; // PRIVATE: ptr to callback
} DDHAL_DESTROYPALETTEDATA;

/*
 * structure for passing information to DDHAL SetEntries fn
 */
typedef struct _DDHAL_SETENTRIESDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    // palette struct
    DWORD                       dwBase;     // base palette index
    DWORD                       dwNumEntries;   // number of palette entries
    LPPALETTEENTRY              lpEntries;  // color table
    HRESULT                     ddRVal;     // return value
    LPDDHALPALCB_SETENTRIES     SetEntries; // PRIVATE: ptr to callback
} DDHAL_SETENTRIESDATA;

/****************************************************************************
 *
 * DDHAL structures for Driver Object callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL CreateSurface fn
 */
typedef struct _DDHAL_CREATESURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDSURFACEDESC             lpDDSurfaceDesc;// description of surface being created
    LPDDRAWI_DDRAWSURFACE_LCL   FAR *lplpSList; // list of created surface objects
    DWORD                       dwSCnt;     // number of surfaces in SList
    HRESULT                     ddRVal;     // return value
    LPDDHAL_CREATESURFACE       CreateSurface;  // PRIVATE: ptr to callback
} DDHAL_CREATESURFACEDATA;

/*
 * structure for passing information to DDHAL CanCreateSurface fn
 */
typedef struct _DDHAL_CANCREATESURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;           // driver struct
    LPDDSURFACEDESC             lpDDSurfaceDesc;    // description of surface being created
    DWORD                       bIsDifferentPixelFormat;// pixel format differs from primary surface
    HRESULT                     ddRVal;         // return value
    LPDDHAL_CANCREATESURFACE    CanCreateSurface;   // PRIVATE: ptr to callback
} DDHAL_CANCREATESURFACEDATA;

/*
 * structure for passing information to DDHAL CreatePalette fn
 */
typedef struct _DDHAL_CREATEPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    // ddraw palette struct
    LPPALETTEENTRY              lpColorTable;   // colors to go in palette
    HRESULT                     ddRVal;     // return value
    LPDDHAL_CREATEPALETTE       CreatePalette;  // PRIVATE: ptr to callback
    BOOL                        is_excl;        // process has exclusive mode
} DDHAL_CREATEPALETTEDATA;

/*
 * Return if the vertical blank is in progress
 */
#define DDWAITVB_I_TESTVB           0x80000006l

/*
 * structure for passing information to DDHAL WaitForVerticalBlank fn
 */
typedef struct _DDHAL_WAITFORVERTICALBLANKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    DWORD                       dwFlags;    // flags
    DWORD                       bIsInVB;    // is in vertical blank
    ULONG_PTR                   hEvent;     // event
    HRESULT                     ddRVal;     // return value
    LPDDHAL_WAITFORVERTICALBLANK    WaitForVerticalBlank; // PRIVATE: ptr to callback
} DDHAL_WAITFORVERTICALBLANKDATA;

/*
 * structure for passing information to DDHAL DestroyDriver fn
 */
typedef struct _DDHAL_DESTROYDRIVERDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;   // driver struct
    HRESULT                     ddRVal; // return value
    LPDDHAL_DESTROYDRIVER       DestroyDriver;  // PRIVATE: ptr to callback
} DDHAL_DESTROYDRIVERDATA;

/*
 * structure for passing information to DDHAL SetMode fn
 */
typedef struct _DDHAL_SETMODEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    DWORD                       dwModeIndex;    // new mode
    HRESULT                     ddRVal;     // return value
    LPDDHAL_SETMODE             SetMode;    // PRIVATE: ptr to callback
    BOOL                        inexcl;         // in exclusive mode
    BOOL                        useRefreshRate; // use the refresh rate data in the mode info
} DDHAL_SETMODEDATA;

/*
 * structure for passing information to DDHAL driver SetColorKey fn
 */
typedef struct _DDHAL_DRVSETCOLORKEYDATA
{
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface struct
    DWORD                       dwFlags;    // flags
    DDCOLORKEY                  ckNew;      // new color key
    HRESULT                     ddRVal;     // return value
    LPDDHAL_SETCOLORKEY         SetColorKey;    // PRIVATE: ptr to callback
} DDHAL_DRVSETCOLORKEYDATA;

/*
 * structure for passing information to DDHAL GetScanLine fn
 */
typedef struct _DDHAL_GETSCANLINEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    DWORD                       dwScanLine; // returned scan line
    HRESULT                     ddRVal;     // return value
    LPDDHAL_GETSCANLINE         GetScanLine;    // PRIVATE: ptr to callback
} DDHAL_GETSCANLINEDATA;

/*
 * structure for passing information to DDHAL SetExclusiveMode fn
 */
typedef struct _DDHAL_SETEXCLUSIVEMODEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;             // driver struct
    DWORD                       dwEnterExcl;      // TRUE if entering exclusive mode, FALSE is leaving
    DWORD                       dwReserved;       // reserved for future use
    HRESULT                     ddRVal;           // return value
    LPDDHAL_SETEXCLUSIVEMODE    SetExclusiveMode; // PRIVATE: ptr to callback
} DDHAL_SETEXCLUSIVEMODEDATA;

/*
 * structure for passing information to DDHAL FlipToGDISurface fn
 */
typedef struct _DDHAL_FLIPTOGDISURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;         // driver struct
    DWORD                       dwToGDI;          // TRUE if flipping to the GDI surface, FALSE if flipping away
    DWORD                       dwReserved;       // reserved for future use
    HRESULT            ddRVal;       // return value
    LPDDHAL_FLIPTOGDISURFACE    FlipToGDISurface; // PRIVATE: ptr to callback
} DDHAL_FLIPTOGDISURFACEDATA;

/****************************************************************************
 *
 * DDHAL structures for VideoPort callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL CanCreateVideoPort fn
 */
typedef struct _DDHAL_CANCREATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort; // PRIVATE: ptr to callback
} DDHAL_CANCREATEVPORTDATA;

/*
 * structure for passing information to DDHAL CreateVideoPort fn
 */
typedef struct _DDHAL_CREATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port created
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort; // PRIVATE: ptr to callback
} DDHAL_CREATEVPORTDATA;

/*
 * structure for passing information to DDHAL FlipVideoPort fn
 */
typedef struct _DDHAL_FLIPVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurr;     // current surface
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTarg;     // target surface
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_FLIP         FlipVideoPort;  // PRIVATE: ptr to callback
} DDHAL_FLIPVPORTDATA;

/*
 * structure for passing information to DDHAL GetVideoPortBandwidth fn
 */
typedef struct _DDHAL_GETVPORTBANDWIDTHDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    LPDDPIXELFORMAT             lpddpfFormat;       // Format for bandwidth
    DWORD                       dwWidth;
    DWORD                       dwHeight;
    DWORD                       dwFlags;        // Prescale factor for bandwidth
    LPDDVIDEOPORTBANDWIDTH      lpBandwidth;        // Returned bandwidth parameters
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;  // PRIVATE: ptr to callback
} DDHAL_GETVPORTBANDWIDTHDATA;

/*
 * structure for passing information to DDHAL GetVideoPortInputFormats fn
 */
typedef struct _DDHAL_GETVPORTINPUTFORMATDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwFlags;        // VBI, regular, or both
    LPDDPIXELFORMAT             lpddpfFormat;       // Array of formats
    DWORD                       dwNumFormats;       // # of formats in array
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats; // PRIVATE: ptr to callback
} DDHAL_GETVPORTINPUTFORMATDATA;

/*
 * structure for passing information to DDHAL GetVideoPortOutputFormats fn
 */
typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwFlags;        // VBI, regular, or both
    LPDDPIXELFORMAT             lpddpfInputFormat;  // Input format
    LPDDPIXELFORMAT             lpddpfOutputFormats;    // Array of output formats
    DWORD                       dwNumFormats;       // # of formats in array
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats; // PRIVATE: ptr to callback
} DDHAL_GETVPORTOUTPUTFORMATDATA;

/*
 * structure for passing information to DDHAL GetVideoPortField fn
 */
typedef struct _DDHAL_GETVPORTFIELDDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    BOOL                        bField;         // TRUE if even
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_GETFIELD     GetVideoPortField;  // PRIVATE: ptr to callback
} DDHAL_GETVPORTFIELDDATA;

/*
 * structure for passing information to DDHAL GetVideoPortLine fn
 */
typedef struct _DDHAL_GETVPORTLINEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwLine;         // Current line counter
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_GETLINE      GetVideoPortLine;   // PRIVATE: ptr to callback
} DDHAL_GETVPORTLINEDATA;

/*
 * structure for passing information to DDHAL GetVideoPortConnectInfo fn
 */
typedef struct _DDHAL_GETVPORTCONNECTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    DWORD                       dwPortId;       // ID of desired video port
    LPDDVIDEOPORTCONNECT        lpConnect;      // Array of DDVIDEOPORTCONNECT structures
    DWORD                       dwNumEntries;       // # of structures in array
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo; // PRIVATE: ptr to callback
} DDHAL_GETVPORTCONNECTDATA;

/*
 * structure for passing information to DDHAL DestroyVideoPort fn
 */
typedef struct _DDHAL_DESTROYVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;   // PRIVATE: ptr to callback
} DDHAL_DESTROYVPORTDATA;

/*
 * structure for passing information to DDHAL GetVideoPortFlipStatus fn
 */
typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    FLATPTR                     fpSurface;      // surface struct
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus; // PRIVATE: ptr to callback
} DDHAL_GETVPORTFLIPSTATUSDATA;

/*
 * structure for passing information to DDHAL UpdateVideoPort fn
 */
typedef struct _DDHAL_UPDATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    LPDDRAWI_DDRAWSURFACE_INT   *lplpDDSurface;     // surface struct
    LPDDRAWI_DDRAWSURFACE_INT   *lplpDDVBISurface;  // VBI surface structure
    LPDDVIDEOPORTINFO           lpVideoInfo;        // Video information
    DWORD                       dwFlags;        // DDRAWI_VPORTSTART, DDRAWI_VPORTSTOP, DDRAWI_VPORTUPDATE
    DWORD                       dwNumAutoflip;      // # of autoflip surfaces. If > 1, lpDDSurface and lpDDVBISurface are arrays.
    DWORD                       dwNumVBIAutoflip;   // # of autoflip surfaces. If > 1, lpDDSurface and lpDDVBISurface are arrays.
    HRESULT                     ddRVal;             // return value
    LPDDHALVPORTCB_UPDATE       UpdateVideoPort;    // PRIVATE: ptr to callback
} DDHAL_UPDATEVPORTDATA;

#define DDRAWI_VPORTSTART   0x0001
#define DDRAWI_VPORTSTOP    0x0002
#define DDRAWI_VPORTUPDATE  0x0003

/*
 * structure for passing information to DDHAL WaitForVideoPortSync fn
 */
typedef struct _DDHAL_WAITFORVPORTSYNCDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwFlags;        // DDVPEVENT_XXXX
    DWORD                       dwLine;
    DWORD                       dwTimeOut;              // Max time to wait before returning
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_WAITFORSYNC  WaitForVideoPortSync;   // PRIVATE: ptr to callback
} DDHAL_WAITFORVPORTSYNCDATA;

/*
 * structure for passing information to DDHAL GetVideoSignalStatus fn
 */
typedef struct _DDHAL_GETVPORTSIGNALDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwStatus;       // Video signal status
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;// PRIVATE: ptr to callback
} DDHAL_GETVPORTSIGNALDATA;

/*
 * structure for passing information to DDHAL GetVideoSignalStatus fn
 */
typedef struct _DDHAL_VPORTCOLORDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        // Video port object
    DWORD                       dwFlags;        // Video signal status
    LPDDCOLORCONTROL            lpColorData;
    HRESULT                     ddRVal;         // return value
    LPDDHALVPORTCB_COLORCONTROL ColorControl;       // PRIVATE: ptr to callback
} DDHAL_VPORTCOLORDATA;

#define DDRAWI_VPORTGETCOLOR    0x0001
#define DDRAWI_VPORTSETCOLOR    0x0002

/****************************************************************************
 *
 * DDHAL structures for Color Control callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL ColorControl fn
 */
typedef struct _DDHAL_COLORCONTROLDATA
{
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // surface
    LPDDCOLORCONTROL            lpColorData;    // color control information
    DWORD                       dwFlags;    // DDRAWI_GETCOLOR/DDRAWI_SETCOLOR
    HRESULT                     ddRVal;     // return value
    LPDDHALCOLORCB_COLORCONTROL ColorControl;   // PRIVATE: ptr to callback
} DDHAL_COLORCONTROLDATA;

#define DDRAWI_GETCOLOR     0x0001
#define DDRAWI_SETCOLOR     0x0002

/****************************************************************************
 *
 * DDHAL structure for GetDriverData callback
 *
 ***************************************************************************/

typedef struct _DDHAL_GETDRIVERINFODATA {

    // Input fields filled in by DirectDraw
    DWORD       dwSize;         // Size of this structure
    DWORD       dwFlags;        // Flags
    GUID        guidInfo;       // GUID that DirectX is querying for
    DWORD       dwExpectedSize; // Size of callbacks structure expected by DirectDraw.
    LPVOID      lpvData;        // Buffer that will receive the requested data

    // Output fields filled in by driver
    DWORD       dwActualSize;   // Size of callbacks structure expected by driver
    HRESULT     ddRVal;         // Return value from driver

    // Input field: Context information for driver
    // On Win95, this is the dwReserved3 field of the DIRECTDRAW_GBL
    // On NT, this is the hDD field of DIRECTDRAW_GBL
    ULONG_PTR   dwContext;  // Context Information

} DDHAL_GETDRIVERINFODATA;

/****************************************************************************
 *
 * DDHAL structure for misc. driver callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL GetAvailDriverMemory fn
 */
typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;        // driver struct
    DDSCAPS                 DDSCaps;     // caps for type of surface memory
    DWORD                   dwTotal;     // total memory for this kind of surface
    DWORD                   dwFree;      // free memory for this kind of surface
    HRESULT                 ddRVal;      // return value
    LPDDHAL_GETAVAILDRIVERMEMORY   GetAvailDriverMemory; // PRIVATE: ptr to callback
    DDSCAPSEX               ddsCapsEx;       // Added in V6. Driver should check DDVERSION info
                                                 // to see if this field is present.
} DDHAL_GETAVAILDRIVERMEMORYDATA;

/*
 * structure for passing information to DDHEL UpdateNonLocalHeap
 */
typedef struct _DDHAL_UPDATENONLOCALHEAPDATA
{
    LPDDRAWI_DIRECTDRAW_GBL    lpDD;               // driver struct
    DWORD                      dwHeap;             // heap index
    FLATPTR                    fpGARTLin;          // linear GART address of start of heap
    FLATPTR                    fpGARTDev;          // high physical GART address of start of heap
    ULONG_PTR                  ulPolicyMaxBytes;   // maximum amount of AGP memory to use
    HRESULT                    ddRVal;             // return value
    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap; // PRIVATE: ptr to callback
} DDHAL_UPDATENONLOCALHEAPDATA;

/*
 * Heap Alignment Data Structures
 */
typedef struct _DDHAL_GETHEAPALIGNMENTDATA
{
    ULONG_PTR                  dwInstance;         // driver context as returned from 32-bit driver init routine
    DWORD                      dwHeap;             // heap index passed by DirectDraw
    HRESULT                    ddRVal;             // return value
    LPDDHAL_GETHEAPALIGNMENT   GetHeapAlignment;   // PRIVATE: ptr to callback.
    HEAPALIGNMENT              Alignment;          // Filled in by driver. Defined in dmemmgr.h
} DDHAL_GETHEAPALIGNMENTDATA;

/*
 * These are the only caps you can set in DDHAL_GETHEAPALIGNMENTDATA.Alignment.ddsCaps.
 * Any other caps will be rejected by DirectDraw.
 */

#define DDHAL_ALIGNVALIDCAPS   (DDSCAPS_OFFSCREENPLAIN | \
                                DDSCAPS_EXECUTEBUFFER | \
                                DDSCAPS_OVERLAY | \
                                DDSCAPS_TEXTURE | \
                                DDSCAPS_ZBUFFER | \
                                DDSCAPS_ALPHA | \
                                DDSCAPS_FLIP )

/*
 * Note that GetSysmemBltStatus uses the same parameter block as GetBltStatus,
 * namely DDHAL_GETBLTSTATUSDATA
 */

//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2

/****************************************************************************
 *
 * DDHAL structures for Miscellaneous2 callbacks
 *
 ***************************************************************************/

/*
 * Structure that contains the information describing a sprite in the
 * display list that is passed to SetSpriteDisplayList().  This is
 * similar to the DDSPRITE structure used by applications, except
 * that the ddckDestKey, ddckSrcKey, dwRectCnt, and lpRect members
 * below are "reserved" in the DDSPRITE structure.
 */
typedef struct _DDSPRITEI {
    RECT                rcDest;     // destination rectangle
    LPDIRECTDRAWSURFACE lpDDSSrc;   // source surface
    RECT                rcSrc;      // source rectangle
    DWORD               dwFlags;    // DDSPRITE_ flags
    DWORD               dwRectCnt;  // no. of rects in clip region
    LPRECT              lpRect;     // array of clip rects
    DDSPRITEFX          ddSpriteFX;     // sprite special FX
} DDSPRITEI, *LPDDSPRITEI;

/*
 * Structure for passing information to DDHAL SetSpriteDisplayList function
 */
typedef struct _DDHAL_SETSPRITEDISPLAYLISTDATA {
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // dest surface struct
    LPDDSPRITEI                 *lplpDDSprite;  // sprite display list
    DWORD                       dwCount;    // number of sprites in list
    DWORD                       dwSize;     // size of each struct in list
    DWORD                       dwFlags;    // flags
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDTargetSurface; // target surface (to flip to)
    DWORD                       dwRectCnt;  // no. of rects in clip region
    LPRECT                      lpRect;     // array of clip rects
    HRESULT                     ddRVal;     // return value
    //LPDDHAL_SETSPRITEDISPLAYLIST SetSpriteDisplayList; // PRIVATE:  ptr to callback
} DDHAL_SETSPRITEDISPLAYLISTDATA;

/*
 * Structure for passing information to DDHAL Resize function
 */
typedef struct _DDHAL_RESIZEDATA {
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // target surface struct
    DWORD                       dwFlags;    // flags
    DWORD                       dwWidth;    // new width of surface
    DWORD                       dwHeight;   // new height of surface
    HRESULT                     ddRVal;     // return value
    //LPDDHAL_RESIZE            Resize;     // PRIVATE:  ptr to callback
} DDHAL_RESIZEDATA;

/*
 * Structure for passing information to DDHAL CaptureComposionBuffer function
 */
typedef struct _DDHAL_CAPTURECOMPOSITIONBUFFERDATA {
    LPDDRAWI_DIRECTDRAW_GBL     lpDD;           // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // dest surface struct
    DWORD                       dwFlags;        // flags
    HRESULT                     ddRVal;         // return value
    //LPDDHAL_CAPTURECOMPOSITIONBUFFER CaptureCompostionBuffer; // PRIVATE:  ptr to callback
} DDHAL_CAPTURECOMPOSITIONBUFFERDATA;

#endif //POSTPONED2
//@@END_MSINTERNAL

typedef struct _DDHAL_CREATESURFACEEXDATA {
    DWORD                       dwFlags;    // Currently always 0 and not used
    LPDDRAWI_DIRECTDRAW_LCL     lpDDLcl;    // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSLcl;   // list of created surface objects
    HRESULT                     ddRVal;     // return value
} DDHAL_CREATESURFACEEXDATA;

typedef struct _DDHAL_GETDRIVERSTATEDATA {
    DWORD                       dwFlags;        // Flags to indicate the data
                                                // required
    union
    {
        // LPDDRAWI_DIRECTDRAW_GBL     lpDD;           // driver struct
        DWORD                       dwhContext;     // d3d context
    };
    LPDWORD                     lpdwStates;     // ptr to the state data
                                                // to be filled in by the
                                                // driver
    DWORD                       dwLength;
    HRESULT                     ddRVal;         // return value
} DDHAL_GETDRIVERSTATEDATA;

typedef struct _DDHAL_DESTROYDDLOCALDATA
{
    DWORD dwFlags;
    LPDDRAWI_DIRECTDRAW_LCL pDDLcl;
    HRESULT  ddRVal;
} DDHAL_DESTROYDDLOCALDATA;

/****************************************************************************
 *
 * DDHAL structure for kernel callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL SyncSurfaceData fn
 */
typedef struct _DDHAL_SYNCSURFACEDATA
{
    DWORD                       dwSize;         // Size of this structure
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;   // driver struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    // Surface to sync with
    DWORD                       dwSurfaceOffset;    // Offset in frame buffer of surface
    ULONG_PTR                   fpLockPtr;      // Surface lock ptr
    LONG                        lPitch;         // Surface pitch
    DWORD                       dwOverlayOffset;    // Added to dwSurfaceOffset for origin, clipping, etc.
    DWORD                       dwOverlaySrcWidth;  // Src width of overlay
    DWORD                       dwOverlaySrcHeight; // Src height of overlay
    DWORD                       dwOverlayDestWidth; // Dest width of overlay
    DWORD                       dwOverlayDestHeight;    // Dest height of overlay
    ULONG_PTR                           dwDriverReserved1;  // Reserved for the HAL
    ULONG_PTR                           dwDriverReserved2;  // Reserved for the HAL
    ULONG_PTR                           dwDriverReserved3;  // Reserved for the HAL
    HRESULT                     ddRVal;
} DDHAL_SYNCSURFACEDATA;

/*
 * structure for passing information to DDHAL SyncVideoPortData fn
 */
typedef struct _DDHAL_SYNCVIDEOPORTDATA
{
    DWORD                       dwSize;         // Size of this structure
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;       // driver struct
    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;    // Video port object
    DWORD                       dwOriginOffset;     // Start address relative to surface
    DWORD                       dwHeight;       // Height of total video region (per field)
    DWORD                       dwVBIHeight;        // Height of VBI region (per field)
    ULONG_PTR                   dwDriverReserved1;  // Reserved for the HAL
    ULONG_PTR                   dwDriverReserved2;  // Reserved for the HAL
    ULONG_PTR                   dwDriverReserved3;  // Reserved for the HAL
    HRESULT                     ddRVal;
} DDHAL_SYNCVIDEOPORTDATA;

//@@BEGIN_MSINTERNAL
#ifdef POSTPONED

/****************************************************************************
 *
 * DDHAL structures for Optimized Surface callbacks
 *
 ***************************************************************************/
typedef struct _DDHAL_CANOPTIMIZESURFACEDATA
{
    DWORD               dwFlags;       //in:  Not used
    DWORD               dwSize;        //in:  For future expansion
    LPDDRAWI_DIRECTDRAW_LCL lpDD;      //in:  Driver Struct
    DDOPTSURFACEDESC    ddOptSurfDesc; //in:  OptSurf description
    DDSURFACEDESC2      ddSurfaceDesc; //in:  Surface Description
    DWORD               bCanOptimize;  //out: Can optimize or not
    ULONG_PTR            dwReserved1;   //in:  Not used
    HRESULT             ddRVal;        //out: Returned value
} DDHAL_CANOPTIMIZESURFACEDATA;

typedef struct _DDHAL_OPTIMIZESURFACEDATA
{
    DWORD               dwFlags;            //in:  Not used
    DWORD               dwSize;             //in:  For future expansion
    LPDDRAWI_DIRECTDRAW_LCL lpDD;           //in:  Driver Struct
    DDOPTSURFACEDESC    ddOptSurfDesc;      //in-out:  OptSurf description
    LPDDRAWI_DDRAWSURFACE_LCL    lpDDSSrc;  //in:  Source surface
    LPDDRAWI_DDRAWSURFACE_LCL    lpDDSDest; //in:  Destination surface
    ULONG_PTR            dwReserved1;        //in:  Not used
    HRESULT             ddRVal;             //out: Returned value
} DDHAL_OPTIMIZESURFACEDATA;

typedef struct _DDHAL_UNOPTIMIZESURFACEDATA
{
    DWORD               dwFlags;               //in:  Not used
    DWORD               dwSize;                //in:  For future expansion
    LPDDRAWI_DIRECTDRAW_LCL lpDD;              //in:  Driver Struct
    LPDDRAWI_DDRAWSURFACE_LCL     lpDDSSrc;    //in:  Source surface
    LPDDRAWI_DDRAWSURFACE_LCL     lpDDSDest;   //in:  Destination surface
    ULONG_PTR            dwReserved1;           //in:  Not used
    HRESULT             ddRVal;                //out: Returned value
} DDHAL_UNOPTIMIZESURFACEDATA;

typedef struct _DDHAL_COPYOPTSURFACEDATA
{
    DWORD               dwFlags;             //in:  Not used
    DWORD               dwSize;              //in:  For future expansion
    LPDDRAWI_DIRECTDRAW_LCL lpDD;            //in:  Driver Struct
    LPDDRAWI_DDRAWSURFACE_LCL     lpDDSSrc;  //in:  Source surface
    LPDDRAWI_DDRAWSURFACE_LCL     lpDDSDest; //in:  Destination surface
    ULONG_PTR            dwReserved1;         //in:  Not used
    HRESULT             ddRVal;              //out: Returned value
} DDHAL_COPYOPTSURFACEDATA;

typedef struct _DDHAL_KMODESVCDATA
{
    DWORD               dwFlags;             //in-out:
    DWORD               dwSize;              //in:  For future expansion
    LPDDRAWI_DIRECTDRAW_LCL lpDD;            //in:  Driver Struct
    DWORD               dwNumBytes;          //in-out: Number of bytes
                                             //        communicated
    LPVOID              lpData;              //in-out: The actual data
                                             //        communicated
    ULONG_PTR            dwReserved1;         //in:  Not used
    HRESULT             ddRVal;              //out: Returned value
} DDHAL_OPTSURFKMODESVCDATA;

#endif //POSTPONED
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DDHAL structure for motion comp callbacks
 *
 ***************************************************************************/

/*
 * structure for passing information to DDHAL GetMoCompGuids
 */
typedef struct _DDHAL_GETMOCOMPGUIDSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    DWORD               dwNumGuids;
    LPGUID              lpGuids;
    HRESULT             ddRVal;
    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;
} DDHAL_GETMOCOMPGUIDSDATA;

/*
 * structure for passing information to DDHAL GetMoCompFormats
 */
typedef struct _DDHAL_GETMOCOMPFORMATSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPGUID              lpGuid;
    DWORD               dwNumFormats;
    LPDDPIXELFORMAT     lpFormats;
    HRESULT             ddRVal;
    LPDDHALMOCOMPCB_GETFORMATS   GetMoCompFormats;
} DDHAL_GETMOCOMPFORMATSDATA;

/*
 * structure for passing information to DDHAL CreateMoComp
 */
typedef struct _DDHAL_CREATEMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    LPGUID                      lpGuid;
    DWORD                       dwUncompWidth;
    DWORD                       dwUncompHeight;
    DDPIXELFORMAT               ddUncompPixelFormat;
    LPVOID                      lpData;
    DWORD                       dwDataSize;
    HRESULT                     ddRVal;
    LPDDHALMOCOMPCB_CREATE      CreateMoComp;
} DDHAL_CREATEMOCOMPDATA;

/*
 * structure for passing information to DDHAL GetMoCompBuffInfo
 */
typedef struct _DDMCCOMPBUFFERINFO
{
    DWORD                       dwSize;             // [in]   size of the struct
    DWORD                       dwNumCompBuffers;   // [out]  number of buffers required for compressed data
    DWORD                       dwWidthToCreate;    // [out]    Width of surface to create
    DWORD                       dwHeightToCreate;   // [out]    Height of surface to create
    DWORD                       dwBytesToAllocate;  // [out]    Total number of bytes used by each surface
    DDSCAPS2                    ddCompCaps;         // [out]    caps to create surfaces to store compressed data
    DDPIXELFORMAT               ddPixelFormat;      // [out]  format to create surfaces to store compressed data
} DDMCCOMPBUFFERINFO, *LPDDMCCOMPBUFFERINFO;

typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPGUID                      lpGuid;
    DWORD                       dwWidth;            // [in]   width of uncompressed data
    DWORD                       dwHeight;           // [in]   height of uncompressed data
    DDPIXELFORMAT               ddPixelFormat;      // [in]   pixel-format of uncompressed data
    DWORD                       dwNumTypesCompBuffs;// [in/out] number of memory types required for comp buffers
    LPDDMCCOMPBUFFERINFO        lpCompBuffInfo;     // [in]   driver supplied info regarding comp buffers (allocated by client)
    HRESULT                     ddRVal;             // [out]
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO  GetMoCompBuffInfo;
} DDHAL_GETMOCOMPCOMPBUFFDATA;

/*
 * structure for passing information to DDHAL GetMoCompBuffInfo
 */
typedef struct _DDHAL_GETINTERNALMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPGUID                      lpGuid;
    DWORD                       dwWidth;            // [in]   width of uncompressed data
    DWORD                       dwHeight;           // [in]   height of uncompressed data
    DDPIXELFORMAT               ddPixelFormat;      // [in]   pixel-format of uncompressed data
    DWORD                       dwScratchMemAlloc;  // [out]  amount of scratch memory will the hal allocate for its private use
    HRESULT                     ddRVal;             // [out]
    LPDDHALMOCOMPCB_GETINTERNALINFO  GetInternalMoCompInfo;
} DDHAL_GETINTERNALMOCOMPDATA;

/*
 * structure for passing information to DDHAL BeginMoCompFrame
 */
typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    LPDDRAWI_DDRAWSURFACE_LCL   lpDestSurface;        // [in]  destination buffer in which to decoding this frame
    DWORD                       dwInputDataSize;      // [in]  size of other misc input data to begin frame
    LPVOID                      lpInputData;          // [in]  pointer to misc input data
    DWORD                       dwOutputDataSize;     // [in]  size of other misc output data to begin frame
    LPVOID                      lpOutputData;         // [in]  pointer to output misc data (allocated by client)
    HRESULT                     ddRVal;               // [out]
    LPDDHALMOCOMPCB_BEGINFRAME  BeginMoCompFrame;
} DDHAL_BEGINMOCOMPFRAMEDATA;

/*
 * structure for passing information to DDHAL EndMoCompFrame
 */
typedef struct _DDHAL_ENDMOCOMPFRAMEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    LPVOID                      lpInputData;
    DWORD                       dwInputDataSize;
    HRESULT                     ddRVal;
    LPDDHALMOCOMPCB_ENDFRAME    EndMoCompFrame;
} DDHAL_ENDMOCOMPFRAMEDATA;

/*
 * structure for passing information to DDHAL RenderMoComp
 */
typedef struct _DDMCBUFFERINFO
{
    DWORD                       dwSize;         // [in]    size of the struct
    LPDDRAWI_DDRAWSURFACE_LCL   lpCompSurface;  // [in]    pointer to buffer containing compressed data
    DWORD                       dwDataOffset;   // [in]    offset of relevant data from the beginning of buffer
    DWORD                       dwDataSize;     // [in]    size of relevant data
    LPVOID                      lpPrivate;      // Reserved for DirectDraw;
} DDMCBUFFERINFO, *LPDDMCBUFFERINFO;


typedef struct _DDHAL_RENDERMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    DWORD                       dwNumBuffers;   // [in]  Number of entries in the lpMacroBlockInfo array
    LPDDMCBUFFERINFO            lpBufferInfo;   // [in]  Surfaces containing macro block info
    DWORD                       dwFunction;     // [in]  Function
    LPVOID                      lpInputData;
    DWORD                       dwInputDataSize;
    LPVOID                      lpOutputData;
    DWORD                       dwOutputDataSize;
    HRESULT                     ddRVal;         // [out]
    LPDDHALMOCOMPCB_RENDER      RenderMoComp;
} DDHAL_RENDERMOCOMPDATA;

/*
 * structure for passing information to DDHAL QueryMoCompStatus
 */
typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    LPDDRAWI_DDRAWSURFACE_LCL   lpSurface;      // [in]  Surface being queried
    DWORD                       dwFlags;        // [in]  DDMCQUERY_XXX falgs
    HRESULT                     ddRVal;         // [out]
    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;
} DDHAL_QUERYMOCOMPSTATUSDATA;

#define DDMCQUERY_READ          0x00000001
//@@BEGIN_MSINTERNAL
#define DDMCQUERY_VALID         0x00000001
//@@END_MSINTERNAL

/*
 * structure for passing information to DDHAL DestroyVideo
 */
typedef struct _DDHAL_DESTROYMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL     lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;
    HRESULT                     ddRVal;
    LPDDHALMOCOMPCB_DESTROY     DestroyMoComp;
} DDHAL_DESTROYMOCOMPDATA;


#ifdef __cplusplus
};
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\dx8\ddrawp.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       ddraw.h
 *  Content:    DirectDraw include file
 *@@BEGIN_MSINTERNAL
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *   24-dec-94  craige  initial implementation
 *   13-jan-95  craige  updated
 *   31-jan-95  craige  and even more ongoing work...
 *   01-mar-95  craige  flags with Get/SetExclusiveMode
 *   07-mar-95  craige  FourCC code stuff
 *   08-mar-95  craige  blt/overlay stretch distinction, bunch of new APIs
 *   11-mar-95  craige  palette stuff
 *   17-mar-95  craige  COM interface
 *   20-mar-95  craige  Get/SetExclusiveMode->Get/SetExclusiveModeOwner,
 *                      flags with CreateSurface and DuplicateSurface
 *   28-mar-95  craige  removed Get/SetColorKey, added FlipToGDISurface to
 *                      IDirectDraw; switched to PALETTEENTRY from RGBQUAD
 *   01-apr-95  craige  happy fun joy updated header file THANK YOU ERIC
 *   06-apr-95  craige  added dwVidMemTotal, dwVidMemFree to DDCAPS
 *   13-apr-95  craige  EricEng's little contribution to our being late
 *   15-apr-95  craige  GetBltStatus, added flag to GetFlipStatus
 *   12-may-95  craige  added GUIDS;DirectDrawEnumerate
 *   19-may-95  craige  added DDSEMO_ALLOWREBOOT
 *   23-may-95  craige  have driver GetCaps return HEL caps; added Flush,
 *                      GetBatchLimit, SetBatchLimit to IDirectDraw
 *   24-may-95  kylej   removed obsolete ZOrder variables
 *   24-may-95  craige  added Restore
 *   28-may-95  craige  added DDCAPS_COLORKEY_HWASSIST; Unicode support
 *   04-jun-95  craige  added IsLost
 *   05-jun-95  craige  removed GetVersion, FreeAllSurfaces, DefWindowProc;
 *                      change GarbageCollect to Compact
 *   06-jun-95  craige  removed GetExclusiveModeOwner; added parm to
 *                      SetExclusiveMode
 *   15-jun-95  craige  new surface interfaces: IDirectDrawSurfaceNotification,
 *                      IDirectDrawSurfaceComposition
 *   19-jun-95  craige  rationalized INVALIDxxx to DDERR_INVALIDOBJECT
 *   20-jun-95  kylej   added DDERR_CANNOTDETACHSURFACE
 *   21-jun-95  craige  added DirectDrawClipper object; removed clipping
 *                      info from surface object
 *   24-jun-95  craige  added DDBLTFAST_xxx flags
 *   27-jun-95  craige  removed Flush,Set/GetBatchLimit; added BltBatch
 *   30-jun-95  kylej   added DDERR_INCOMPATIBLEPRIMARY
 *   30-jun-95  craige  added dest align as well as src
 *   01-jul-95  craige  hide composition & streaming stuff; added DDERR_EXCEPTION
 *   02-jul-95  craige  hide clipper notification stuff; futzed with DDSCAPS
 *                      position in structures
 *   03-jul-95  kylej   changed EnumSurfaces declaration
 *   03-jul-95  craige  added pUnkOuter to all Create fns; added object ptr
 *                      to CreateSurface, removed lpClipList and lpDDSurface
 *                      from surface desc.
 *   05-jul-95  craige  added Initialize members to all interfaces to allow
 *                      for full COM integration
 *   09-jul-95  craige  added DDERR_LOCKEDSURFACES; changed SetExclusiveMode
 *                      to SetCooperativeLevel
 *   10-jul-95  kylej   added mirroring caps and overlay FX flags
 *   12-jul-95  craige  added DDSCAPS_OWNDC
 *   13-jul-95  craige  changed Get/SetOverlayPosition to take LONGs
 *   14-jul-95  craige  added dwFlags to DDOVERLAYFX
 *   15-jul-95  craige  set DDCAPS_NOHARDWARE
 *   15-jul-95  ericeng changed EnumSurface callback param order, BltBatch
 *                      params, moved all Const var references to a consistent
 *                      location, removed failure mode for height alignment
 *   18-jul-95  craige  removed Flush from surface object
 *   27-jul-95  craige  added DDCAPS_BLTCOLORFILL
 *   31-jul-95  craige  added DDCAPS_BANKSWITCHED, validation flags
 *   02-aug-95  craige  added dwMinOverlayStretch/dwMaxOverlayStretch to DDCAPS
 *   10-aug-95  toddla  added DDBLT_WAIT, DDBLTFAST_WAIT, DDLOCK_WAIT, DDFLIP_WAIT
 *   13-aug-95  craige  added dwCaps2 and reserved fields to DDCAPS; added
 *                      DDCAPS2_CERTIFIED; named alpha caps properly;
 *                      flags parm for Flip
 *   13-aug-95  toddla  added DDSCL_DONTHOOKHWND
 *   19-aug-95  ericeng added DDCAPS2_LIVEVIDEO and DDCAPS2_HWCODEC
 *   21-aug-95  craige  mode X support
 *   27-aug-95  craige  bug 742: added DDPCAPS_256
 *                      bug 738: use GUID instead of IID
 *   22-sep-95  craige  bug 1268,1269:  getbltstatus/getflipstatus flags wrong
 *   09-nov-95  colinmc added support for 1, 2 and 4 bit RGB and indexed
 *                      palettes
 *   27-nov-95  colinmc new member to return available vram of a given type
 *                      (determined by DDSCAPS).
 *   05-dec-95  colinmc changed DDSCAPS_TEXTUREMAP => DDSCAPS_TEXTURE for
 *                      consistency with Direct3D
 *   05-dec-95  colinmc added mip-map support
 *   09-dec-95  colinmc added execute buffer support
 *   13-dec-95  colinmc added shared back and z-buffer support
 *   18-dec-95  colinmc added valid caps mask for surface caps
 *   25-dec-95  craige  changed IDirectDrawV2 to IDirectDraw2
 *   31-dec-95  craige  added CLSID_DirectDraw
 *   04-jan-96  colinmc added explicit support for z-buffer clears
 *   12-feb-96  kylej   added  Interface
 *   23-feb-96  kylej   added IDirectDrawSurface2 Interface
 *   01-mar-96  kylej   new ddcaps structure
 *   06-mar-96  kylej   changed HANDLEs to DWORDs
 *   13-mar-96  kylej   added DD_Surface_GetDDInterface in IDirectDrawSurface2
 *   14-mar-96  colinmc added CLSID_DirectDrawClipper and added the clipper
 *                      creation API function back in
 *   21-mar-96  colinmc Bug 13316: Unitialized interfaces
 *   24-mar-96  colinmc Bug 14321: Structure change to allow flippable mip
 *                      map chains with a single call
 *   26-mar-96  colinmc Bug 14470: Compressed surface support
 *   15-apr-96  colinmc Bug 16855: Can't pass NULL to Initialize in C++
 *   19-apr-96  colinmc Bug 18059: News caps bit to flag that you can't do
 *                      2D during 3D.
 *   01-may-96  colinmc Bug 20005: InternalLock does not check for lost
 *                      surfaces
 *   25-jul-96  scottm  Added DDCAPS2_AUTOFLIPOVERLAY,
 *                      DDCAPS2_CANSMOOTHINTERLEAVED,DDCAPS2_CANSMOOTHNONINTERLEAVED
 *   08-oct-96  ketand  Added support for Interleaved Z (aka RGBZ surfaces)
 *   15-nov-96  colinmc Finally retired DDSCAPS_3D and moved
 *                      DDSCAPS_EXECUTEBUFFER to ddrawi.h so DDK users can
 *                      see it.
 *   08-dec-96  colinmc Initial AGP support
 *   13-jan-97 jvanaken Basic support for IDirectDrawSurface3 interface
 *   12-jan-97  colinmc More Win16 lock work
 *   29-jan-97  smac    Updated color control structure
 *   29-jan-97  jeffno  Mode13 support. New surface cap and enum/setmode flags
 *   03-mar-97  jeffno  Work item: Extended surface memory alignment
 *   08-mar-97  colinmc Support for DMA model AGP cards
 *   11-mar-97  smac    Obsoleted dwMin/MaxLiveVideoStretch and dwMin/MaxHwCodecStretch fields
 *   11-mar-97  jeffno  Don't allow blts between surfaces from different ddraw gbls
 *   22-mar-97  colinmc Bug 6673: Mechanism to let new applications run against
 *                      old runtimes
 *   23-mar-97  colinmc Bug 6673: Changed structure numbering scheme for
 *                      consistency's sake
 *   24-mar-97  jeffno  Optimized Surfaces
 *   16-sep-97  jeffno  DirectDrawEnumerateEx
 *   30-sep-97  jeffno  IDirectDraw4
 *   03-oct-97  jeffno  DDSCAPS2 and DDSURFACEDESC2
 *   31-oct-97 johnstep Persistent-content surfaces for Windows 9x
 *   05-nov-97 jvanaken Support for AlphaBlt and SetSpriteDisplayList
 *   07-nov-97  raymondc Borland compatibility
 *   24-nov-97  t-craigs Added IDirectDrawPalette2
 *   19-dec-97 jvanaken IDDS4::Unlock now takes a pointer to a rectangle.
 *@@END_MSINTERNAL
 *
 ***************************************************************************/

#ifndef __DDRAW_INCLUDED__
#define __DDRAW_INCLUDED__

//Disable the nameless union warning when building internally
#undef ENABLE_NAMELESS_UNION_PRAGMA
#ifdef DIRECTX_REDIST
#define ENABLE_NAMELESS_UNION_PRAGMA
#endif

#ifdef ENABLE_NAMELESS_UNION_PRAGMA
#pragma warning(disable:4201)
#endif

/*
 * If you wish an application built against the newest version of DirectDraw
 * to run against an older DirectDraw run time then define DIRECTDRAW_VERSION
 * to be the earlies version of DirectDraw you wish to run against. For,
 * example if you wish an application to run against a DX 3 runtime define
 * DIRECTDRAW_VERSION to be 0x0300.
 */
#ifndef   DIRECTDRAW_VERSION
#define   DIRECTDRAW_VERSION 0x0700
#endif /* DIRECTDRAW_VERSION */

#if defined( _WIN32 )  && !defined( _NO_COM )
#define COM_NO_WINDOWS_H
#include <objbase.h>
#else
#define IUnknown            void
#if !defined( NT_BUILD_ENVIRONMENT ) && !defined(WINNT)
        #define CO_E_NOTINITIALIZED 0x800401F0L
#endif
#endif

#define _FACDD  0x876
#define MAKE_DDHRESULT( code )  MAKE_HRESULT( 1, _FACDD, code )

#ifdef __cplusplus
extern "C" {
#endif

//
// For compilers that don't support nameless unions, do a
//
// #define NONAMELESSUNION
//
// before #include <ddraw.h>
//
#ifndef DUMMYUNIONNAMEN
#if defined(__cplusplus) || !defined(NONAMELESSUNION)
#define DUMMYUNIONNAMEN(n)
#else
#define DUMMYUNIONNAMEN(n)      u##n
#endif
#endif

#ifndef MAKEFOURCC
    #define MAKEFOURCC(ch0, ch1, ch2, ch3)                              \
                ((DWORD)(BYTE)(ch0) | ((DWORD)(BYTE)(ch1) << 8) |   \
                ((DWORD)(BYTE)(ch2) << 16) | ((DWORD)(BYTE)(ch3) << 24 ))
#endif //defined(MAKEFOURCC)

/*
 * FOURCC codes for DX compressed-texture pixel formats
 */
#define FOURCC_DXT1  (MAKEFOURCC('D','X','T','1'))
#define FOURCC_DXT2  (MAKEFOURCC('D','X','T','2'))
#define FOURCC_DXT3  (MAKEFOURCC('D','X','T','3'))
#define FOURCC_DXT4  (MAKEFOURCC('D','X','T','4'))
#define FOURCC_DXT5  (MAKEFOURCC('D','X','T','5'))

/*
 * GUIDS used by DirectDraw objects
 */
#if defined( _WIN32 ) && !defined( _NO_COM )

DEFINE_GUID( CLSID_DirectDraw,                  0xD7B70EE0,0x4340,0x11CF,0xB0,0x63,0x00,0x20,0xAF,0xC2,0xCD,0x35 );
DEFINE_GUID( CLSID_DirectDraw7,                 0x3c305196,0x50db,0x11d3,0x9c,0xfe,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID( CLSID_DirectDrawClipper,           0x593817A0,0x7DB3,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xb9,0x33,0x56 );
DEFINE_GUID( IID_IDirectDraw,                   0x6C14DB80,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
DEFINE_GUID( IID_IDirectDraw2,                  0xB3A6F3E0,0x2B43,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xB9,0x33,0x56 );
DEFINE_GUID( IID_IDirectDraw4,                  0x9c59509a,0x39bd,0x11d1,0x8c,0x4a,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID( IID_IDirectDraw7,                  0x15e65ec0,0x3b9c,0x11d2,0xb9,0x2f,0x00,0x60,0x97,0x97,0xea,0x5b );
DEFINE_GUID( IID_IDirectDrawSurface,            0x6C14DB81,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
DEFINE_GUID( IID_IDirectDrawSurface2,           0x57805885,0x6eec,0x11cf,0x94,0x41,0xa8,0x23,0x03,0xc1,0x0e,0x27 );
DEFINE_GUID( IID_IDirectDrawSurface3,           0xDA044E00,0x69B2,0x11D0,0xA1,0xD5,0x00,0xAA,0x00,0xB8,0xDF,0xBB );
DEFINE_GUID( IID_IDirectDrawSurface4,           0x0B2B8630,0xAD35,0x11D0,0x8E,0xA6,0x00,0x60,0x97,0x97,0xEA,0x5B );
DEFINE_GUID( IID_IDirectDrawSurface7,           0x06675a80,0x3b9b,0x11d2,0xb9,0x2f,0x00,0x60,0x97,0x97,0xea,0x5b );
//@@BEGIN_MSINTERNAL
DEFINE_GUID( IID_IDirectDrawSurfaceNew,         0x1bab8e96,0x9cfe,0x4ce3,0xbc,0x72,0xd7,0xe9,0xe9,0x9a,0x21,0x75 );
DEFINE_GUID( CLSID_DirectDrawFactory2,          0xb9dc4790,0x4af1,0x11d1,0x8c,0x4c,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID( IID_IDirectDrawFactory2,           0x89b2c488,0x4af4,0x11d1,0x8c,0x4c,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID( GUID_DirectDrawSurfaceStream,      0xe043bc46,0x5317,0x11d1,0x8c,0x4d,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID( GUID_DirectDrawPaletteStream,      0x730c7ffc,0x5347,0x11d1,0x8c,0x4d,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
DEFINE_GUID(IID_IDirectDrawOptSurface,          0x51191f1e, 0x4f2b, 0x11d1, 0x8c, 0xc3, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID( IID_IDirectDrawPalette2,           0xc03c477e,0x6519,0x11d1,0x8c,0x52,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#ifdef STREAMING
DEFINE_GUID( IID_IDirectDrawSurfaceStreaming,   0x6C14DB82,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
#endif
#ifdef COMPOSITION
DEFINE_GUID( IID_IDirectDrawSurfaceComposition, 0x6C14DB83,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
#endif
//@@END_MSINTERNAL
DEFINE_GUID( IID_IDirectDrawPalette,            0x6C14DB84,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
DEFINE_GUID( IID_IDirectDrawClipper,            0x6C14DB85,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
DEFINE_GUID( IID_IDirectDrawColorControl,       0x4B9F0EE0,0x0D7E,0x11D0,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8 );
DEFINE_GUID( IID_IDirectDrawGammaControl,       0x69C11C3E,0xB46B,0x11D1,0xAD,0x7A,0x00,0xC0,0x4F,0xC2,0x9B,0x4E );

#endif

/*============================================================================
 *
 * DirectDraw Structures
 *
 * Various structures used to invoke DirectDraw.
 *
 *==========================================================================*/

struct IDirectDraw;
struct IDirectDrawSurface;
//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
struct IDirectDrawSurfaceComposition;
#endif
#ifdef STREAMING
struct IDirectDrawSurfaceStreaming;
#endif
//@@END_MSINTERNAL
struct IDirectDrawPalette;
struct IDirectDrawClipper;

typedef struct IDirectDraw              FAR *LPDIRECTDRAW;
typedef struct IDirectDraw2             FAR *LPDIRECTDRAW2;
typedef struct IDirectDraw4             FAR *LPDIRECTDRAW4;
typedef struct IDirectDraw7             FAR *LPDIRECTDRAW7;
typedef struct IDirectDrawSurface       FAR *LPDIRECTDRAWSURFACE;
typedef struct IDirectDrawSurface2      FAR *LPDIRECTDRAWSURFACE2;
typedef struct IDirectDrawSurface3      FAR *LPDIRECTDRAWSURFACE3;
typedef struct IDirectDrawSurface4      FAR *LPDIRECTDRAWSURFACE4;
typedef struct IDirectDrawSurface7      FAR *LPDIRECTDRAWSURFACE7;
//@@BEGIN_MSINTERNAL
typedef struct IDirectDrawFactory2      FAR *LPDIRECTDRAWFACTORY2;
typedef struct IDirectDrawOptSurface    FAR *LPDIRECTDRAWOPTSURFACE;
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
typedef struct IDirectDrawSurfaceComposition    FAR *LPDIRECTDRAWSURFACECOMPOSITION;
#endif
#ifdef STREAMING
typedef struct IDirectDrawSurfaceStreaming      FAR *LPDIRECTDRAWSURFACESTREAMING;
#endif
typedef struct IDirectDrawPalette2              FAR *LPDIRECTDRAWPALETTE2;
//@@END_MSINTERNAL
typedef struct IDirectDrawPalette               FAR *LPDIRECTDRAWPALETTE;
typedef struct IDirectDrawClipper               FAR *LPDIRECTDRAWCLIPPER;
typedef struct IDirectDrawColorControl          FAR *LPDIRECTDRAWCOLORCONTROL;
typedef struct IDirectDrawGammaControl          FAR *LPDIRECTDRAWGAMMACONTROL;

typedef struct _DDFXROP                 FAR *LPDDFXROP;
typedef struct _DDSURFACEDESC           FAR *LPDDSURFACEDESC;
typedef struct _DDSURFACEDESC2          FAR *LPDDSURFACEDESC2;
//@@BEGIN_MSINTERNAL
typedef struct _DDOPTSURFACEDESC    FAR *LPDDOPTSURFACEDESC;
//@@END_MSINTERNAL
typedef struct _DDCOLORCONTROL          FAR *LPDDCOLORCONTROL;

/*
 * API's
 */
#if (defined (WIN32) || defined( _WIN32 ) ) && !defined( _NO_COM )
//#if defined( _WIN32 ) && !defined( _NO_ENUM )
    typedef BOOL (FAR PASCAL * LPDDENUMCALLBACKA)(GUID FAR *, LPSTR, LPSTR, LPVOID);
    typedef BOOL (FAR PASCAL * LPDDENUMCALLBACKW)(GUID FAR *, LPWSTR, LPWSTR, LPVOID);
    extern HRESULT WINAPI DirectDrawEnumerateW( LPDDENUMCALLBACKW lpCallback, LPVOID lpContext );
    extern HRESULT WINAPI DirectDrawEnumerateA( LPDDENUMCALLBACKA lpCallback, LPVOID lpContext );
    /*
     * Protect against old SDKs
     */
    #if !defined(HMONITOR_DECLARED) && (WINVER < 0x0500)
        #define HMONITOR_DECLARED
        DECLARE_HANDLE(HMONITOR);
    #endif
    typedef BOOL (FAR PASCAL * LPDDENUMCALLBACKEXA)(GUID FAR *, LPSTR, LPSTR, LPVOID, HMONITOR);
    typedef BOOL (FAR PASCAL * LPDDENUMCALLBACKEXW)(GUID FAR *, LPWSTR, LPWSTR, LPVOID, HMONITOR);
    extern HRESULT WINAPI DirectDrawEnumerateExW( LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
    extern HRESULT WINAPI DirectDrawEnumerateExA( LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
    typedef HRESULT (WINAPI * LPDIRECTDRAWENUMERATEEXA)( LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
    typedef HRESULT (WINAPI * LPDIRECTDRAWENUMERATEEXW)( LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);

    #ifdef UNICODE
        typedef LPDDENUMCALLBACKW           LPDDENUMCALLBACK;
        #define DirectDrawEnumerate         DirectDrawEnumerateW
        typedef LPDDENUMCALLBACKEXW         LPDDENUMCALLBACKEX;
        typedef LPDIRECTDRAWENUMERATEEXW        LPDIRECTDRAWENUMERATEEX;
        #define DirectDrawEnumerateEx       DirectDrawEnumerateExW
    #else
        typedef LPDDENUMCALLBACKA           LPDDENUMCALLBACK;
        #define DirectDrawEnumerate         DirectDrawEnumerateA
        typedef LPDDENUMCALLBACKEXA         LPDDENUMCALLBACKEX;
        typedef LPDIRECTDRAWENUMERATEEXA        LPDIRECTDRAWENUMERATEEX;
        #define DirectDrawEnumerateEx       DirectDrawEnumerateExA
    #endif
    extern HRESULT WINAPI DirectDrawCreate( GUID FAR *lpGUID, LPDIRECTDRAW FAR *lplpDD, IUnknown FAR *pUnkOuter );
    extern HRESULT WINAPI DirectDrawCreateEx( GUID FAR * lpGuid, LPVOID  *lplpDD, REFIID  iid,IUnknown FAR *pUnkOuter );
    extern HRESULT WINAPI DirectDrawCreateClipper( DWORD dwFlags, LPDIRECTDRAWCLIPPER FAR *lplpDDClipper, IUnknown FAR *pUnkOuter );
#endif
/*
 * Flags for DirectDrawEnumerateEx
 * DirectDrawEnumerateEx supercedes DirectDrawEnumerate. You must use GetProcAddress to
 * obtain a function pointer (of type LPDIRECTDRAWENUMERATEEX) to DirectDrawEnumerateEx.
 * By default, only the primary display device is enumerated.
 * DirectDrawEnumerate is equivalent to DirectDrawEnumerate(,,DDENUM_NONDISPLAYDEVICES)
 */

/*
 * This flag causes enumeration of any GDI display devices which are part of
 * the Windows Desktop
 */
#define DDENUM_ATTACHEDSECONDARYDEVICES     0x00000001L

/*
 * This flag causes enumeration of any GDI display devices which are not
 * part of the Windows Desktop
 */
#define DDENUM_DETACHEDSECONDARYDEVICES     0x00000002L

/*
 * This flag causes enumeration of non-display devices
 */
#define DDENUM_NONDISPLAYDEVICES            0x00000004L

//@@BEGIN_MSINTERNAL
#define DDENUM_VALID                         0x00000007L
//@@END_MSINTERNAL

#define REGSTR_KEY_DDHW_DESCRIPTION     "Description"
#define REGSTR_KEY_DDHW_DRIVERNAME      "DriverName"
#define REGSTR_PATH_DDHW                "Hardware\\DirectDrawDrivers"

#define DDCREATE_HARDWAREONLY           0x00000001l
#define DDCREATE_EMULATIONONLY          0x00000002l

#if defined(WINNT) || !defined(WIN32)
typedef long HRESULT;
#endif

//#ifndef WINNT
typedef HRESULT (FAR PASCAL * LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);
typedef HRESULT (FAR PASCAL * LPDDENUMMODESCALLBACK2)(LPDDSURFACEDESC2, LPVOID);
typedef HRESULT (FAR PASCAL * LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);
typedef HRESULT (FAR PASCAL * LPDDENUMSURFACESCALLBACK2)(LPDIRECTDRAWSURFACE4, LPDDSURFACEDESC2, LPVOID);
typedef HRESULT (FAR PASCAL * LPDDENUMSURFACESCALLBACK7)(LPDIRECTDRAWSURFACE7, LPDDSURFACEDESC2, LPVOID);
//#endif

/*
 * Generic pixel format with 8-bit RGB and alpha components
 */
typedef struct _DDARGB
{
    BYTE blue;
    BYTE green;
    BYTE red;
    BYTE alpha;
} DDARGB;

typedef DDARGB FAR *LPDDARGB;

/*
 * This version of the structure remains for backwards source compatibility.
 * The DDARGB structure is the one that should be used for all DirectDraw APIs.
 */
typedef struct _DDRGBA
{
    BYTE red;
    BYTE green;
    BYTE blue;
    BYTE alpha;
} DDRGBA;

typedef DDRGBA FAR *LPDDRGBA;


/*
 * DDCOLORKEY
 */
typedef struct _DDCOLORKEY
{
    DWORD       dwColorSpaceLowValue;   // low boundary of color space that is to
                                        // be treated as Color Key, inclusive
    DWORD       dwColorSpaceHighValue;  // high boundary of color space that is
                                        // to be treated as Color Key, inclusive
} DDCOLORKEY;

typedef DDCOLORKEY FAR* LPDDCOLORKEY;

/*
 * DDBLTFX
 * Used to pass override information to the DIRECTDRAWSURFACE callback Blt.
 */
typedef struct _DDBLTFX
{
    DWORD       dwSize;                         // size of structure
    DWORD       dwDDFX;                         // FX operations
    DWORD       dwROP;                          // Win32 raster operations
    DWORD       dwDDROP;                        // Raster operations new for DirectDraw
    DWORD       dwRotationAngle;                // Rotation angle for blt
    DWORD       dwZBufferOpCode;                // ZBuffer compares
    DWORD       dwZBufferLow;                   // Low limit of Z buffer
    DWORD       dwZBufferHigh;                  // High limit of Z buffer
    DWORD       dwZBufferBaseDest;              // Destination base value
    DWORD       dwZDestConstBitDepth;           // Bit depth used to specify Z constant for destination
    union
    {
        DWORD   dwZDestConst;                   // Constant to use as Z buffer for dest
        LPDIRECTDRAWSURFACE lpDDSZBufferDest;   // Surface to use as Z buffer for dest
    } DUMMYUNIONNAMEN(1);
    DWORD       dwZSrcConstBitDepth;            // Bit depth used to specify Z constant for source
    union
    {
        DWORD   dwZSrcConst;                    // Constant to use as Z buffer for src
        LPDIRECTDRAWSURFACE lpDDSZBufferSrc;    // Surface to use as Z buffer for src
    } DUMMYUNIONNAMEN(2);
    DWORD       dwAlphaEdgeBlendBitDepth;       // Bit depth used to specify constant for alpha edge blend
    DWORD       dwAlphaEdgeBlend;               // Alpha for edge blending
    DWORD       dwReserved;
    DWORD       dwAlphaDestConstBitDepth;       // Bit depth used to specify alpha constant for destination
    union
    {
        DWORD   dwAlphaDestConst;               // Constant to use as Alpha Channel
        LPDIRECTDRAWSURFACE lpDDSAlphaDest;     // Surface to use as Alpha Channel
    } DUMMYUNIONNAMEN(3);
    DWORD       dwAlphaSrcConstBitDepth;        // Bit depth used to specify alpha constant for source
    union
    {
        DWORD   dwAlphaSrcConst;                // Constant to use as Alpha Channel
        LPDIRECTDRAWSURFACE lpDDSAlphaSrc;      // Surface to use as Alpha Channel
    } DUMMYUNIONNAMEN(4);
    union
    {
        DWORD   dwFillColor;                    // color in RGB or Palettized
        DWORD   dwFillDepth;                    // depth value for z-buffer
        DWORD   dwFillPixel;                    // pixel value for RGBA or RGBZ
        LPDIRECTDRAWSURFACE lpDDSPattern;       // Surface to use as pattern
    } DUMMYUNIONNAMEN(5);
    DDCOLORKEY  ddckDestColorkey;               // DestColorkey override
    DDCOLORKEY  ddckSrcColorkey;                // SrcColorkey override
} DDBLTFX;

typedef DDBLTFX FAR* LPDDBLTFX;


//@@BEGIN_MSINTERNAL
/*
 * Structure used for lpDDAlphaBltFX arg to AlphaBlt API call
 */
typedef union _DDALPHABLTFX
{
    DDARGB ddargbScaleFactors;
    DWORD dwFillValue;

} DDALPHABLTFX;

typedef DDALPHABLTFX FAR* LPDDALPHABLTFX;


#ifdef COMPOSITION
/*
 * DDCOMPOSEFX
 * Used to pass override information to the DIRECTDRAWSURFACE callback Compose.
 */
typedef DWORD   (FAR PASCAL *LPCOMPOSECALLBACK)(DWORD);
typedef struct _DDCOMPOSEFX
{
    DWORD       dwSize;                         // size of structure
    DWORD       dwDDFX;                         // FX operations
    DWORD       dwROP;                          // Win32 raster operations
    DWORD       dwDDROP;                        // Raster operations new for DirectDraw
    DWORD       dwRotationAngle;                // Rotation angle for blt
    DWORD       dwZBufferOpCode;                // ZBuffer compares
    DWORD       dwZBufferLow;                   // Low limit of Z buffer
    DWORD       dwZBufferHigh;                  // High limit of Z buffer
    DWORD       dwZBufferBaseDest;              // Destination base value
    DWORD       dwZDestConstBitDepth;           // Bit depth used to specify Z constant for destination
    union
    {
        DWORD   dwZDestConst;                   // Constant to use as Z buffer for dest
        LPDIRECTDRAWSURFACE lpDDSZBufferDest;   // Surface to use as Z buffer for dest
    } DUMMYUNIONNAMEN(1);
    DWORD       dwZSrcConstBitDepth;            // Bit depth used to specify Z constant for source
    union
    {
        DWORD   dwZSrcConst;                    // Constant to use as Z buffer for src
        LPDIRECTDRAWSURFACE lpDDSZBufferSrc;    // Surface to use as Z buffer for src
    } DUMMYUNIONNAMEN(2);
    DWORD       dwAlphaEdgeBlendBitDepth;       // Bit depth used to specify constant for alpha edge blend
    DWORD       dwAlphaEdgeBlend;               // Alpha for edge blending
    DWORD       dwReserved;
    DWORD       dwAlphaDestConstBitDepth;       // Bit depth used to specify alpha constant for destination
    union
    {
        DWORD   dwAlphaDestConst;               // Constant to use as Alpha Channel
        LPDIRECTDRAWSURFACE lpDDSAlphaDest;     // Surface to use as Alpha Channel
    } DUMMYUNIONNAMEN(3);
    DWORD       dwAlphaSrcConstBitDepth;        // Bit depth used to specify alpha constant for source
    union
    {
        DWORD   dwAlphaSrcConst;                // Constant to use as Alpha Channel
        LPDIRECTDRAWSURFACE lpDDSAlphaSrc;      // Surface to use as Alpha Channel
    } DUMMYUNIONNAMEN(4);
    union
    {
        DWORD   dwFillColor;                    // color in RGB or Palettized
        LPDIRECTDRAWSURFACE lpDDSPattern;       // Surface to use as pattern
    } DUMMYUNIONNAMEN(5);
    DDCOLORKEY  ddckDestColorkey;               // DestColorkey override
    DDCOLORKEY  ddckSrcColorkey;                // SrcColorkey override
    DWORD       dwRepeat;                       // how many times to repeat the composition command
    LPCOMPOSECALLBACK   lpfnCallback;           // function to call prior to execution of each compose command
} DDCOMPOSEFX;

typedef DDCOMPOSEFX FAR* LPDDCOMPOSEFX;
#endif
//@@END_MSINTERNAL

/*
 * DDSCAPS
 */
typedef struct _DDSCAPS
{
    DWORD       dwCaps;         // capabilities of surface wanted
} DDSCAPS;

typedef DDSCAPS FAR* LPDDSCAPS;


/*
 * DDOSCAPS
 */
typedef struct _DDOSCAPS
{
    DWORD       dwCaps;         // capabilities of surface wanted
} DDOSCAPS;

typedef DDOSCAPS FAR* LPDDOSCAPS;

/*
 * This structure is used internally by DirectDraw.
//@@BEGIN_MSINTERNAL
 * Don't MSINTERNAL it: it's needed by ddrawi.h and drivers.
//@@END_MSINTERNAL
 */
typedef struct _DDSCAPSEX
{
    DWORD       dwCaps2;
    DWORD       dwCaps3;
    union
    {
        DWORD       dwCaps4;
        DWORD       dwVolumeDepth;
    } DUMMYUNIONNAMEN(1);
} DDSCAPSEX, FAR * LPDDSCAPSEX;

/*
 * DDSCAPS2
 */
typedef struct _DDSCAPS2
{
    DWORD       dwCaps;         // capabilities of surface wanted
//@@BEGIN_MSINTERNAL
union
{
    struct
    {
//@@END_MSINTERNAL
    DWORD       dwCaps2;
    DWORD       dwCaps3;
    union
    {
        DWORD       dwCaps4;
        DWORD       dwVolumeDepth;
    } DUMMYUNIONNAMEN(1);
//@@BEGIN_MSINTERNAL
    };
    DDSCAPSEX   ddsCapsEx;
};
//@@END_MSINTERNAL
} DDSCAPS2;

typedef DDSCAPS2 FAR* LPDDSCAPS2;

/*
 * DDCAPS
 */
#define DD_ROP_SPACE            (256/32)        // space required to store ROP array
/*
 * NOTE: Our choosen structure number scheme is to append a single digit to
 * the end of the structure giving the version that structure is associated
 * with.
 */

/*
 * This structure represents the DDCAPS structure released in DirectDraw 1.0.  It is used internally
 * by DirectDraw to interpret caps passed into ddraw by drivers written prior to the release of DirectDraw 2.0.
 * New applications should use the DDCAPS structure defined below.
 */
typedef struct _DDCAPS_DX1
{
    DWORD       dwSize;                 // size of the DDDRIVERCAPS structure
    DWORD       dwCaps;                 // driver specific capabilities
    DWORD       dwCaps2;                // more driver specific capabilites
    DWORD       dwCKeyCaps;             // color key capabilities of the surface
    DWORD       dwFXCaps;               // driver specific stretching and effects capabilites
    DWORD       dwFXAlphaCaps;          // alpha driver specific capabilities
    DWORD       dwPalCaps;              // palette capabilities
    DWORD       dwSVCaps;               // stereo vision capabilities
    DWORD       dwAlphaBltConstBitDepths;       // DDBD_2,4,8
    DWORD       dwAlphaBltPixelBitDepths;       // DDBD_1,2,4,8
    DWORD       dwAlphaBltSurfaceBitDepths;     // DDBD_1,2,4,8
    DWORD       dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
    DWORD       dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
    DWORD       dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
    DWORD       dwZBufferBitDepths;             // DDBD_8,16,24,32
    DWORD       dwVidMemTotal;          // total amount of video memory
    DWORD       dwVidMemFree;           // amount of free video memory
    DWORD       dwMaxVisibleOverlays;   // maximum number of visible overlays
    DWORD       dwCurrVisibleOverlays;  // current number of visible overlays
    DWORD       dwNumFourCCCodes;       // number of four cc codes
    DWORD       dwAlignBoundarySrc;     // source rectangle alignment
    DWORD       dwAlignSizeSrc;         // source rectangle byte size
    DWORD       dwAlignBoundaryDest;    // dest rectangle alignment
    DWORD       dwAlignSizeDest;        // dest rectangle byte size
    DWORD       dwAlignStrideAlign;     // stride alignment
    DWORD       dwRops[DD_ROP_SPACE];   // ROPS supported
    DDSCAPS     ddsCaps;                // DDSCAPS structure has all the general capabilities
    DWORD       dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMinLiveVideoStretch;  // OBSOLETE! This field remains for compatability reasons only
    DWORD       dwMaxLiveVideoStretch;  // OBSOLETE! This field remains for compatability reasons only
    DWORD       dwMinHwCodecStretch;    // OBSOLETE! This field remains for compatability reasons only
    DWORD       dwMaxHwCodecStretch;    // OBSOLETE! This field remains for compatability reasons only
    DWORD       dwReserved1;            // reserved
    DWORD       dwReserved2;            // reserved
    DWORD       dwReserved3;            // reserved
} DDCAPS_DX1;

typedef DDCAPS_DX1 FAR* LPDDCAPS_DX1;

/*
 * This structure is the DDCAPS structure as it was in version 2 and 3 of Direct X.
 * It is present for back compatability.
 */
typedef struct _DDCAPS_DX3
{
    DWORD       dwSize;                 // size of the DDDRIVERCAPS structure
    DWORD       dwCaps;                 // driver specific capabilities
    DWORD       dwCaps2;                // more driver specific capabilites
    DWORD       dwCKeyCaps;             // color key capabilities of the surface
    DWORD       dwFXCaps;               // driver specific stretching and effects capabilites
    DWORD       dwFXAlphaCaps;          // alpha driver specific capabilities
    DWORD       dwPalCaps;              // palette capabilities
    DWORD       dwSVCaps;               // stereo vision capabilities
    DWORD       dwAlphaBltConstBitDepths;       // DDBD_2,4,8
    DWORD       dwAlphaBltPixelBitDepths;       // DDBD_1,2,4,8
    DWORD       dwAlphaBltSurfaceBitDepths;     // DDBD_1,2,4,8
    DWORD       dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
    DWORD       dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
    DWORD       dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
    DWORD       dwZBufferBitDepths;             // DDBD_8,16,24,32
    DWORD       dwVidMemTotal;          // total amount of video memory
    DWORD       dwVidMemFree;           // amount of free video memory
    DWORD       dwMaxVisibleOverlays;   // maximum number of visible overlays
    DWORD       dwCurrVisibleOverlays;  // current number of visible overlays
    DWORD       dwNumFourCCCodes;       // number of four cc codes
    DWORD       dwAlignBoundarySrc;     // source rectangle alignment
    DWORD       dwAlignSizeSrc;         // source rectangle byte size
    DWORD       dwAlignBoundaryDest;    // dest rectangle alignment
    DWORD       dwAlignSizeDest;        // dest rectangle byte size
    DWORD       dwAlignStrideAlign;     // stride alignment
    DWORD       dwRops[DD_ROP_SPACE];   // ROPS supported
    DDSCAPS     ddsCaps;                // DDSCAPS structure has all the general capabilities
    DWORD       dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMinLiveVideoStretch;  // minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMaxLiveVideoStretch;  // maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMinHwCodecStretch;    // minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwMaxHwCodecStretch;    // maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
    DWORD       dwReserved1;            // reserved
    DWORD       dwReserved2;            // reserved
    DWORD       dwReserved3;            // reserved
    DWORD       dwSVBCaps;              // driver specific capabilities for System->Vmem blts
    DWORD       dwSVBCKeyCaps;          // driver color key capabilities for System->Vmem blts
    DWORD       dwSVBFXCaps;            // driver FX capabilities for System->Vmem blts
    DWORD       dwSVBRops[DD_ROP_SPACE];// ROPS supported for System->Vmem blts
    DWORD       dwVSBCaps;              // driver specific capabilities for Vmem->System blts
    DWORD       dwVSBCKeyCaps;          // driver color key capabilities for Vmem->System blts
    DWORD       dwVSBFXCaps;            // driver FX capabilities for Vmem->System blts
    DWORD       dwVSBRops[DD_ROP_SPACE];// ROPS supported for Vmem->System blts
    DWORD       dwSSBCaps;              // driver specific capabilities for System->System blts
    DWORD       dwSSBCKeyCaps;          // driver color key capabilities for System->System blts
    DWORD       dwSSBFXCaps;            // driver FX capabilities for System->System blts
    DWORD       dwSSBRops[DD_ROP_SPACE];// ROPS supported for System->System blts
    DWORD       dwReserved4;            // reserved
    DWORD       dwReserved5;            // reserved
    DWORD       dwReserved6;            // reserved
} DDCAPS_DX3;
typedef DDCAPS_DX3 FAR* LPDDCAPS_DX3;

/*
 * This structure is the DDCAPS structure as it was in version 5 of Direct X.
 * It is present for back compatability.
 */
typedef struct _DDCAPS_DX5
{
/*  0*/ DWORD   dwSize;                 // size of the DDDRIVERCAPS structure
/*  4*/ DWORD   dwCaps;                 // driver specific capabilities
/*  8*/ DWORD   dwCaps2;                // more driver specific capabilites
/*  c*/ DWORD   dwCKeyCaps;             // color key capabilities of the surface
/* 10*/ DWORD   dwFXCaps;               // driver specific stretching and effects capabilites
/* 14*/ DWORD   dwFXAlphaCaps;          // alpha driver specific capabilities
/* 18*/ DWORD   dwPalCaps;              // palette capabilities
/* 1c*/ DWORD   dwSVCaps;               // stereo vision capabilities
/* 20*/ DWORD   dwAlphaBltConstBitDepths;       // DDBD_2,4,8
/* 24*/ DWORD   dwAlphaBltPixelBitDepths;       // DDBD_1,2,4,8
/* 28*/ DWORD   dwAlphaBltSurfaceBitDepths;     // DDBD_1,2,4,8
/* 2c*/ DWORD   dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
/* 30*/ DWORD   dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
/* 34*/ DWORD   dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
/* 38*/ DWORD   dwZBufferBitDepths;             // DDBD_8,16,24,32
/* 3c*/ DWORD   dwVidMemTotal;          // total amount of video memory
/* 40*/ DWORD   dwVidMemFree;           // amount of free video memory
/* 44*/ DWORD   dwMaxVisibleOverlays;   // maximum number of visible overlays
/* 48*/ DWORD   dwCurrVisibleOverlays;  // current number of visible overlays
/* 4c*/ DWORD   dwNumFourCCCodes;       // number of four cc codes
/* 50*/ DWORD   dwAlignBoundarySrc;     // source rectangle alignment
/* 54*/ DWORD   dwAlignSizeSrc;         // source rectangle byte size
/* 58*/ DWORD   dwAlignBoundaryDest;    // dest rectangle alignment
/* 5c*/ DWORD   dwAlignSizeDest;        // dest rectangle byte size
/* 60*/ DWORD   dwAlignStrideAlign;     // stride alignment
/* 64*/ DWORD   dwRops[DD_ROP_SPACE];   // ROPS supported
/* 84*/ DDSCAPS ddsCaps;                // DDSCAPS structure has all the general capabilities
/* 88*/ DWORD   dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 8c*/ DWORD   dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 90*/ DWORD   dwMinLiveVideoStretch;  // minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 94*/ DWORD   dwMaxLiveVideoStretch;  // maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 98*/ DWORD   dwMinHwCodecStretch;    // minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 9c*/ DWORD   dwMaxHwCodecStretch;    // maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* a0*/ DWORD   dwReserved1;            // reserved
/* a4*/ DWORD   dwReserved2;            // reserved
/* a8*/ DWORD   dwReserved3;            // reserved
/* ac*/ DWORD   dwSVBCaps;              // driver specific capabilities for System->Vmem blts
/* b0*/ DWORD   dwSVBCKeyCaps;          // driver color key capabilities for System->Vmem blts
/* b4*/ DWORD   dwSVBFXCaps;            // driver FX capabilities for System->Vmem blts
/* b8*/ DWORD   dwSVBRops[DD_ROP_SPACE];// ROPS supported for System->Vmem blts
/* d8*/ DWORD   dwVSBCaps;              // driver specific capabilities for Vmem->System blts
/* dc*/ DWORD   dwVSBCKeyCaps;          // driver color key capabilities for Vmem->System blts
/* e0*/ DWORD   dwVSBFXCaps;            // driver FX capabilities for Vmem->System blts
/* e4*/ DWORD   dwVSBRops[DD_ROP_SPACE];// ROPS supported for Vmem->System blts
/*104*/ DWORD   dwSSBCaps;              // driver specific capabilities for System->System blts
/*108*/ DWORD   dwSSBCKeyCaps;          // driver color key capabilities for System->System blts
/*10c*/ DWORD   dwSSBFXCaps;            // driver FX capabilities for System->System blts
/*110*/ DWORD   dwSSBRops[DD_ROP_SPACE];// ROPS supported for System->System blts
// Members added for DX5:
/*130*/ DWORD   dwMaxVideoPorts;        // maximum number of usable video ports
/*134*/ DWORD   dwCurrVideoPorts;       // current number of video ports used
/*138*/ DWORD   dwSVBCaps2;             // more driver specific capabilities for System->Vmem blts
/*13c*/ DWORD   dwNLVBCaps;               // driver specific capabilities for non-local->local vidmem blts
/*140*/ DWORD   dwNLVBCaps2;              // more driver specific capabilities non-local->local vidmem blts
/*144*/ DWORD   dwNLVBCKeyCaps;           // driver color key capabilities for non-local->local vidmem blts
/*148*/ DWORD   dwNLVBFXCaps;             // driver FX capabilities for non-local->local blts
/*14c*/ DWORD   dwNLVBRops[DD_ROP_SPACE]; // ROPS supported for non-local->local blts
} DDCAPS_DX5;
typedef DDCAPS_DX5 FAR* LPDDCAPS_DX5;

typedef struct _DDCAPS_DX6
{
/*  0*/ DWORD   dwSize;                 // size of the DDDRIVERCAPS structure
/*  4*/ DWORD   dwCaps;                 // driver specific capabilities
/*  8*/ DWORD   dwCaps2;                // more driver specific capabilites
/*  c*/ DWORD   dwCKeyCaps;             // color key capabilities of the surface
/* 10*/ DWORD   dwFXCaps;               // driver specific stretching and effects capabilites
/* 14*/ DWORD   dwFXAlphaCaps;          // alpha caps
/* 18*/ DWORD   dwPalCaps;              // palette capabilities
/* 1c*/ DWORD   dwSVCaps;               // stereo vision capabilities
/* 20*/ DWORD   dwAlphaBltConstBitDepths;       // DDBD_2,4,8
/* 24*/ DWORD   dwAlphaBltPixelBitDepths;       // DDBD_1,2,4,8
/* 28*/ DWORD   dwAlphaBltSurfaceBitDepths;     // DDBD_1,2,4,8
/* 2c*/ DWORD   dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
/* 30*/ DWORD   dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
/* 34*/ DWORD   dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
/* 38*/ DWORD   dwZBufferBitDepths;             // DDBD_8,16,24,32
/* 3c*/ DWORD   dwVidMemTotal;          // total amount of video memory
/* 40*/ DWORD   dwVidMemFree;           // amount of free video memory
/* 44*/ DWORD   dwMaxVisibleOverlays;   // maximum number of visible overlays
/* 48*/ DWORD   dwCurrVisibleOverlays;  // current number of visible overlays
/* 4c*/ DWORD   dwNumFourCCCodes;       // number of four cc codes
/* 50*/ DWORD   dwAlignBoundarySrc;     // source rectangle alignment
/* 54*/ DWORD   dwAlignSizeSrc;         // source rectangle byte size
/* 58*/ DWORD   dwAlignBoundaryDest;    // dest rectangle alignment
/* 5c*/ DWORD   dwAlignSizeDest;        // dest rectangle byte size
/* 60*/ DWORD   dwAlignStrideAlign;     // stride alignment
/* 64*/ DWORD   dwRops[DD_ROP_SPACE];   // ROPS supported
/* 84*/ DDSCAPS ddsOldCaps;             // Was DDSCAPS  ddsCaps. ddsCaps is of type DDSCAPS2 for DX6
/* 88*/ DWORD   dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 8c*/ DWORD   dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 90*/ DWORD   dwMinLiveVideoStretch;  // minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 94*/ DWORD   dwMaxLiveVideoStretch;  // maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 98*/ DWORD   dwMinHwCodecStretch;    // minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 9c*/ DWORD   dwMaxHwCodecStretch;    // maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* a0*/ DWORD   dwReserved1;            // reserved
/* a4*/ DWORD   dwReserved2;            // reserved
/* a8*/ DWORD   dwReserved3;            // reserved
/* ac*/ DWORD   dwSVBCaps;              // driver specific capabilities for System->Vmem blts
/* b0*/ DWORD   dwSVBCKeyCaps;          // driver color key capabilities for System->Vmem blts
/* b4*/ DWORD   dwSVBFXCaps;            // driver FX capabilities for System->Vmem blts
/* b8*/ DWORD   dwSVBRops[DD_ROP_SPACE];// ROPS supported for System->Vmem blts
/* d8*/ DWORD   dwVSBCaps;              // driver specific capabilities for Vmem->System blts
/* dc*/ DWORD   dwVSBCKeyCaps;          // driver color key capabilities for Vmem->System blts
/* e0*/ DWORD   dwVSBFXCaps;            // driver FX capabilities for Vmem->System blts
/* e4*/ DWORD   dwVSBRops[DD_ROP_SPACE];// ROPS supported for Vmem->System blts
/*104*/ DWORD   dwSSBCaps;              // driver specific capabilities for System->System blts
/*108*/ DWORD   dwSSBCKeyCaps;          // driver color key capabilities for System->System blts
/*10c*/ DWORD   dwSSBFXCaps;            // driver FX capabilities for System->System blts
/*110*/ DWORD   dwSSBRops[DD_ROP_SPACE];// ROPS supported for System->System blts
/*130*/ DWORD   dwMaxVideoPorts;        // maximum number of usable video ports
/*134*/ DWORD   dwCurrVideoPorts;       // current number of video ports used
/*138*/ DWORD   dwSVBCaps2;             // more driver specific capabilities for System->Vmem blts
/*13c*/ DWORD   dwNLVBCaps;               // driver specific capabilities for non-local->local vidmem blts
/*140*/ DWORD   dwNLVBCaps2;              // more driver specific capabilities non-local->local vidmem blts
/*144*/ DWORD   dwNLVBCKeyCaps;           // driver color key capabilities for non-local->local vidmem blts
/*148*/ DWORD   dwNLVBFXCaps;             // driver FX capabilities for non-local->local blts
/*14c*/ DWORD   dwNLVBRops[DD_ROP_SPACE]; // ROPS supported for non-local->local blts
// Members added for DX6 release
/*16c*/ DDSCAPS2 ddsCaps;               // Surface Caps
} DDCAPS_DX6;
typedef DDCAPS_DX6 FAR* LPDDCAPS_DX6;

typedef struct _DDCAPS_DX7
{
/*  0*/ DWORD   dwSize;                 // size of the DDDRIVERCAPS structure
/*  4*/ DWORD   dwCaps;                 // driver specific capabilities
/*  8*/ DWORD   dwCaps2;                // more driver specific capabilites
/*  c*/ DWORD   dwCKeyCaps;             // color key capabilities of the surface
/* 10*/ DWORD   dwFXCaps;               // driver specific stretching and effects capabilites
/* 14*/ DWORD   dwFXAlphaCaps;          // alpha driver specific capabilities
/* 18*/ DWORD   dwPalCaps;              // palette capabilities
/* 1c*/ DWORD   dwSVCaps;               // stereo vision capabilities
/* 20*/ DWORD   dwAlphaBltConstBitDepths;       // DDBD_2,4,8
/* 24*/ DWORD   dwAlphaBltPixelBitDepths;       // DDBD_1,2,4,8
/* 28*/ DWORD   dwAlphaBltSurfaceBitDepths;     // DDBD_1,2,4,8
/* 2c*/ DWORD   dwAlphaOverlayConstBitDepths;   // DDBD_2,4,8
/* 30*/ DWORD   dwAlphaOverlayPixelBitDepths;   // DDBD_1,2,4,8
/* 34*/ DWORD   dwAlphaOverlaySurfaceBitDepths; // DDBD_1,2,4,8
/* 38*/ DWORD   dwZBufferBitDepths;             // DDBD_8,16,24,32
/* 3c*/ DWORD   dwVidMemTotal;          // total amount of video memory
/* 40*/ DWORD   dwVidMemFree;           // amount of free video memory
/* 44*/ DWORD   dwMaxVisibleOverlays;   // maximum number of visible overlays
/* 48*/ DWORD   dwCurrVisibleOverlays;  // current number of visible overlays
/* 4c*/ DWORD   dwNumFourCCCodes;       // number of four cc codes
/* 50*/ DWORD   dwAlignBoundarySrc;     // source rectangle alignment
/* 54*/ DWORD   dwAlignSizeSrc;         // source rectangle byte size
/* 58*/ DWORD   dwAlignBoundaryDest;    // dest rectangle alignment
/* 5c*/ DWORD   dwAlignSizeDest;        // dest rectangle byte size
/* 60*/ DWORD   dwAlignStrideAlign;     // stride alignment
/* 64*/ DWORD   dwRops[DD_ROP_SPACE];   // ROPS supported
/* 84*/ DDSCAPS ddsOldCaps;             // Was DDSCAPS  ddsCaps. ddsCaps is of type DDSCAPS2 for DX6
/* 88*/ DWORD   dwMinOverlayStretch;    // minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 8c*/ DWORD   dwMaxOverlayStretch;    // maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 90*/ DWORD   dwMinLiveVideoStretch;  // minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 94*/ DWORD   dwMaxLiveVideoStretch;  // maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 98*/ DWORD   dwMinHwCodecStretch;    // minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* 9c*/ DWORD   dwMaxHwCodecStretch;    // maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3
/* a0*/ DWORD   dwReserved1;            // reserved
/* a4*/ DWORD   dwReserved2;            // reserved
/* a8*/ DWORD   dwReserved3;            // reserved
/* ac*/ DWORD   dwSVBCaps;              // driver specific capabilities for System->Vmem blts
/* b0*/ DWORD   dwSVBCKeyCaps;          // driver color key capabilities for System->Vmem blts
/* b4*/ DWORD   dwSVBFXCaps;            // driver FX capabilities for System->Vmem blts
/* b8*/ DWORD   dwSVBRops[DD_ROP_SPACE];// ROPS supported for System->Vmem blts
/* d8*/ DWORD   dwVSBCaps;              // driver specific capabilities for Vmem->System blts
/* dc*/ DWORD   dwVSBCKeyCaps;          // driver color key capabilities for Vmem->System blts
/* e0*/ DWORD   dwVSBFXCaps;            // driver FX capabilities for Vmem->System blts
/* e4*/ DWORD   dwVSBRops[DD_ROP_SPACE];// ROPS supported for Vmem->System blts
/*104*/ DWORD   dwSSBCaps;              // driver specific capabilities for System->System blts
/*108*/ DWORD   dwSSBCKeyCaps;          // driver color key capabilities for System->System blts
/*10c*/ DWORD   dwSSBFXCaps;            // driver FX capabilities for System->System blts
/*110*/ DWORD   dwSSBRops[DD_ROP_SPACE];// ROPS supported for System->System blts
/*130*/ DWORD   dwMaxVideoPorts;        // maximum number of usable video ports
/*134*/ DWORD   dwCurrVideoPorts;       // current number of video ports used
/*138*/ DWORD   dwSVBCaps2;             // more driver specific capabilities for System->Vmem blts
/*13c*/ DWORD   dwNLVBCaps;               // driver specific capabilities for non-local->local vidmem blts
/*140*/ DWORD   dwNLVBCaps2;              // more driver specific capabilities non-local->local vidmem blts
/*144*/ DWORD   dwNLVBCKeyCaps;           // driver color key capabilities for non-local->local vidmem blts
/*148*/ DWORD   dwNLVBFXCaps;             // driver FX capabilities for non-local->local blts
/*14c*/ DWORD   dwNLVBRops[DD_ROP_SPACE]; // ROPS supported for non-local->local blts
// Members added for DX6 release
/*16c*/ DDSCAPS2 ddsCaps;               // Surface Caps
//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2
/*170*/ DWORD   dwAlphaCaps;            // driver-specific alpha caps for overlays & Vmem->Vmem blts
/*174*/ DWORD   dwSVBAlphaCaps;         // driver-specific alpha capabilities for System->Vmem blts
/*178*/ DWORD   dwVSBAlphaCaps;         // driver-specific alpha capabilities for Vmem->System blts
/*17c*/ DWORD   dwSSBAlphaCaps;         // driver-specific alpha capabilities for System->System blts
/*180*/ DWORD   dwFilterCaps;           // driver-specific filter caps for overlays and Vmem->Vmem blts
/*184*/ DWORD   dwSVBFilterCaps;        // driver-specific filter capabilities for System->Vmem blts
/*188*/ DWORD   dwVSBFilterCaps;        // driver-specific filter capabilities for Vmem->System blts
/*18c*/ DWORD   dwSSBFilterCaps;        // driver-specific filter capabilities for System->System blts
/*190*/ DWORD   dwTransformCaps;        // driver-specific transform caps for overlays & Vmem->Vmem blts
/*194*/ DWORD   dwSVBTransformCaps;     // driver-specific transform capabilities for System->Vmem blts
/*198*/ DWORD   dwVSBTransformCaps;     // driver-specific transform capabilities for Vmem->System blts
/*19c*/ DWORD   dwSSBTransformCaps;     // driver-specific transform capabilities for System->System blts
/*1a0*/ DWORD   dwBltAffineMinifyLimit;   // minification limit for affine-transformed blts
/*1a4*/ DWORD   dwOverlayAffineMinifyLimit; // minification limit for affine-transformed overlays
#endif //POSTPONED2
//@@END_MSINTERNAL
} DDCAPS_DX7;
typedef DDCAPS_DX7 FAR* LPDDCAPS_DX7;


#if DIRECTDRAW_VERSION <= 0x300
    typedef DDCAPS_DX3 DDCAPS;
#elif DIRECTDRAW_VERSION <= 0x500
    typedef DDCAPS_DX5 DDCAPS;
#elif DIRECTDRAW_VERSION <= 0x600
    typedef DDCAPS_DX6 DDCAPS;
#else
    typedef DDCAPS_DX7 DDCAPS;
#endif

typedef DDCAPS FAR* LPDDCAPS;



/*
 * DDPIXELFORMAT
 */
typedef struct _DDPIXELFORMAT
{
    DWORD       dwSize;                 // size of structure
    DWORD       dwFlags;                // pixel format flags
    DWORD       dwFourCC;               // (FOURCC code)
    union
    {
        DWORD   dwRGBBitCount;          // how many bits per pixel
        DWORD   dwYUVBitCount;          // how many bits per pixel
        DWORD   dwZBufferBitDepth;      // how many total bits/pixel in z buffer (including any stencil bits)
        DWORD   dwAlphaBitDepth;        // how many bits for alpha channels
        DWORD   dwLuminanceBitCount;    // how many bits per pixel
        DWORD   dwBumpBitCount;         // how many bits per "buxel", total
        DWORD   dwPrivateFormatBitCount;// Bits per pixel of private driver formats. Only valid in texture
                                        // format list and if DDPF_D3DFORMAT is set
    } DUMMYUNIONNAMEN(1);
    union
    {
        DWORD   dwRBitMask;             // mask for red bit
        DWORD   dwYBitMask;             // mask for Y bits
        DWORD   dwStencilBitDepth;      // how many stencil bits (note: dwZBufferBitDepth-dwStencilBitDepth is total Z-only bits)
        DWORD   dwLuminanceBitMask;     // mask for luminance bits
        DWORD   dwBumpDuBitMask;        // mask for bump map U delta bits
        DWORD   dwOperations;           // DDPF_D3DFORMAT Operations
    } DUMMYUNIONNAMEN(2);
    union
    {
        DWORD   dwGBitMask;             // mask for green bits
        DWORD   dwUBitMask;             // mask for U bits
        DWORD   dwZBitMask;             // mask for Z bits
        DWORD   dwBumpDvBitMask;        // mask for bump map V delta bits
        struct
        {
            WORD    wFlipMSTypes;       // Multisample methods supported via flip for this D3DFORMAT
            WORD    wBltMSTypes;        // Multisample methods supported via blt for this D3DFORMAT
        } MultiSampleCaps;

    } DUMMYUNIONNAMEN(3);
    union
    {
        DWORD   dwBBitMask;             // mask for blue bits
        DWORD   dwVBitMask;             // mask for V bits
        DWORD   dwStencilBitMask;       // mask for stencil bits
        DWORD   dwBumpLuminanceBitMask; // mask for luminance in bump map
    } DUMMYUNIONNAMEN(4);
    union
    {
        DWORD   dwRGBAlphaBitMask;      // mask for alpha channel
        DWORD   dwYUVAlphaBitMask;      // mask for alpha channel
        DWORD   dwLuminanceAlphaBitMask;// mask for alpha channel
        DWORD   dwRGBZBitMask;          // mask for Z channel
        DWORD   dwYUVZBitMask;          // mask for Z channel
    } DUMMYUNIONNAMEN(5);
} DDPIXELFORMAT;

typedef DDPIXELFORMAT FAR* LPDDPIXELFORMAT;

/*
 * DDOVERLAYFX
 */
typedef struct _DDOVERLAYFX
{
    DWORD       dwSize;                         // size of structure
    DWORD       dwAlphaEdgeBlendBitDepth;       // Bit depth used to specify constant for alpha edge blend
    DWORD       dwAlphaEdgeBlend;               // Constant to use as alpha for edge blend
    DWORD       dwReserved;
    DWORD       dwAlphaDestConstBitDepth;       // Bit depth used to specify alpha constant for destination
    union
    {
        DWORD   dwAlphaDestConst;               // Constant to use as alpha channel for dest
        LPDIRECTDRAWSURFACE lpDDSAlphaDest;     // Surface to use as alpha channel for dest
    } DUMMYUNIONNAMEN(1);
    DWORD       dwAlphaSrcConstBitDepth;        // Bit depth used to specify alpha constant for source
    union
    {
        DWORD   dwAlphaSrcConst;                // Constant to use as alpha channel for src
        LPDIRECTDRAWSURFACE lpDDSAlphaSrc;      // Surface to use as alpha channel for src
    } DUMMYUNIONNAMEN(2);
    DDCOLORKEY  dckDestColorkey;                // DestColorkey override
    DDCOLORKEY  dckSrcColorkey;                 // DestColorkey override
    DWORD       dwDDFX;                         // Overlay FX
    DWORD       dwFlags;                        // flags
} DDOVERLAYFX;

typedef DDOVERLAYFX FAR *LPDDOVERLAYFX;

//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2
/*
 * DDSPRITEFX
 */
typedef struct _DDSPRITEFX
{
    DWORD       dwSize;               // sizeof(DDSPRITEFX)
    DWORD       dwDDFX;               // DDSPRITEFX_ (sprite FX) flags
    DDCOLORKEY  ddckDestColorkey;     // DestColorkey override
    DDCOLORKEY  ddckSrcColorkey;      // SrcColorkey override
    DDARGB      ddargbScaleFactors;   // Four 8-bit ARGB scaling factors
    float       fTransform[3][3];     // 3x3 transformation matrix
} DDSPRITEFX;

typedef DDSPRITEFX FAR *LPDDSPRITEFX;

/*
 * Structure that contains the information describing a sprite
 * in the display list that is passed to SetSpriteDisplayList().
 */
typedef struct _DDSPRITE {
    RECT        rcDest;             // destination rectangle
    LPDIRECTDRAWSURFACE7 lpDDSSrc;  // source surface
    RECT        rcSrc;              // source rectangle
    DWORD       dwFlags;            // DDSPRITE_ flags
    DWORD       dwReserved[2];      // reserved
    DDSPRITEFX  ddSpriteFX;         // sprite special FX
} DDSPRITE;

typedef DDSPRITE FAR *LPDDSPRITE;
#endif //POSTPONED2
//@@END_MSINTERNAL

/*
 * DDBLTBATCH: BltBatch entry structure
 */
typedef struct _DDBLTBATCH
{
    LPRECT              lprDest;
    LPDIRECTDRAWSURFACE lpDDSSrc;
    LPRECT              lprSrc;
    DWORD               dwFlags;
    LPDDBLTFX           lpDDBltFx;
} DDBLTBATCH;

typedef DDBLTBATCH FAR * LPDDBLTBATCH;


/*
 * DDGAMMARAMP
 */
typedef struct _DDGAMMARAMP
{
    WORD                red[256];
    WORD                green[256];
    WORD                blue[256];
} DDGAMMARAMP;
typedef DDGAMMARAMP FAR * LPDDGAMMARAMP;

/*
 *  This is the structure within which DirectDraw returns data about the current graphics driver and chipset
 */

#define MAX_DDDEVICEID_STRING           512

typedef struct tagDDDEVICEIDENTIFIER
{
    /*
     * These elements are for presentation to the user only. They should not be used to identify particular
     * drivers, since this is unreliable and many different strings may be associated with the same
     * device, and the same driver from different vendors.
     */
    char    szDriver[MAX_DDDEVICEID_STRING];
    char    szDescription[MAX_DDDEVICEID_STRING];

    /*
     * This element is the version of the DirectDraw/3D driver. It is legal to do <, > comparisons
     * on the whole 64 bits. Caution should be exercised if you use this element to identify problematic
     * drivers. It is recommended that guidDeviceIdentifier is used for this purpose.
     *
     * This version has the form:
     *  wProduct = HIWORD(liDriverVersion.HighPart)
     *  wVersion = LOWORD(liDriverVersion.HighPart)
     *  wSubVersion = HIWORD(liDriverVersion.LowPart)
     *  wBuild = LOWORD(liDriverVersion.LowPart)
     */
#ifdef _WIN32
    LARGE_INTEGER liDriverVersion;      /* Defined for applications and other 32 bit components */
#else
    DWORD   dwDriverVersionLowPart;     /* Defined for 16 bit driver components */
    DWORD   dwDriverVersionHighPart;
#endif


    /*
     * These elements can be used to identify particular chipsets. Use with extreme caution.
     *   dwVendorId     Identifies the manufacturer. May be zero if unknown.
     *   dwDeviceId     Identifies the type of chipset. May be zero if unknown.
     *   dwSubSysId     Identifies the subsystem, typically this means the particular board. May be zero if unknown.
     *   dwRevision     Identifies the revision level of the chipset. May be zero if unknown.
     */
    DWORD   dwVendorId;
    DWORD   dwDeviceId;
    DWORD   dwSubSysId;
    DWORD   dwRevision;

    /*
     * This element can be used to check changes in driver/chipset. This GUID is a unique identifier for the
     * driver/chipset pair. Use this element if you wish to track changes to the driver/chipset in order to
     * reprofile the graphics subsystem.
     * This element can also be used to identify particular problematic drivers.
     */
    GUID    guidDeviceIdentifier;
} DDDEVICEIDENTIFIER, * LPDDDEVICEIDENTIFIER;

typedef struct tagDDDEVICEIDENTIFIER2
{
    /*
     * These elements are for presentation to the user only. They should not be used to identify particular
     * drivers, since this is unreliable and many different strings may be associated with the same
     * device, and the same driver from different vendors.
     */
    char    szDriver[MAX_DDDEVICEID_STRING];
    char    szDescription[MAX_DDDEVICEID_STRING];

    /*
     * This element is the version of the DirectDraw/3D driver. It is legal to do <, > comparisons
     * on the whole 64 bits. Caution should be exercised if you use this element to identify problematic
     * drivers. It is recommended that guidDeviceIdentifier is used for this purpose.
     *
     * This version has the form:
     *  wProduct = HIWORD(liDriverVersion.HighPart)
     *  wVersion = LOWORD(liDriverVersion.HighPart)
     *  wSubVersion = HIWORD(liDriverVersion.LowPart)
     *  wBuild = LOWORD(liDriverVersion.LowPart)
     */
#ifdef _WIN32
    LARGE_INTEGER liDriverVersion;      /* Defined for applications and other 32 bit components */
#else
    DWORD   dwDriverVersionLowPart;     /* Defined for 16 bit driver components */
    DWORD   dwDriverVersionHighPart;
#endif


    /*
     * These elements can be used to identify particular chipsets. Use with extreme caution.
     *   dwVendorId     Identifies the manufacturer. May be zero if unknown.
     *   dwDeviceId     Identifies the type of chipset. May be zero if unknown.
     *   dwSubSysId     Identifies the subsystem, typically this means the particular board. May be zero if unknown.
     *   dwRevision     Identifies the revision level of the chipset. May be zero if unknown.
     */
    DWORD   dwVendorId;
    DWORD   dwDeviceId;
    DWORD   dwSubSysId;
    DWORD   dwRevision;

    /*
     * This element can be used to check changes in driver/chipset. This GUID is a unique identifier for the
     * driver/chipset pair. Use this element if you wish to track changes to the driver/chipset in order to
     * reprofile the graphics subsystem.
     * This element can also be used to identify particular problematic drivers.
     */
    GUID    guidDeviceIdentifier;

    /*
     * This element is used to determine the Windows Hardware Quality Lab (WHQL)
     * certification level for this driver/device pair.
     */
    DWORD   dwWHQLLevel;

} DDDEVICEIDENTIFIER2, * LPDDDEVICEIDENTIFIER2;

/*
 * Flags for the IDirectDraw4::GetDeviceIdentifier method
 */

/*
 * This flag causes GetDeviceIdentifier to return information about the host (typically 2D) adapter in a system equipped
 * with a stacked secondary 3D adapter. Such an adapter appears to the application as if it were part of the
 * host adapter, but is typically physcially located on a separate card. The stacked secondary's information is
 * returned when GetDeviceIdentifier's dwFlags field is zero, since this most accurately reflects the qualities
 * of the DirectDraw object involved.
 */
#define DDGDI_GETHOSTIDENTIFIER         0x00000001L

//@@BEGIN_MSINTERNAL
#define DDGDI_VALID                     0x00000001L
//@@END_MSINTERNAL
/*
 * Macros for interpretting DDEVICEIDENTIFIER2.dwWHQLLevel
 */
#define GET_WHQL_YEAR( dwWHQLLevel ) \
    ( (dwWHQLLevel) / 0x10000 )
#define GET_WHQL_MONTH( dwWHQLLevel ) \
    ( ( (dwWHQLLevel) / 0x100 ) & 0x00ff )
#define GET_WHQL_DAY( dwWHQLLevel ) \
    ( (dwWHQLLevel) & 0xff )


/*
 * callbacks
 */
typedef DWORD   (FAR PASCAL *LPCLIPPERCALLBACK)(LPDIRECTDRAWCLIPPER lpDDClipper, HWND hWnd, DWORD code, LPVOID lpContext );
#ifdef STREAMING
typedef DWORD   (FAR PASCAL *LPSURFACESTREAMINGCALLBACK)(DWORD);
#endif

//@@BEGIN_MSINTERNAL
#ifdef CLIPPER_NOTIFY
/*
 * values passed into the clipper callback
 */
#ifndef WINWATCHNOTIFY_START
    #define WINWATCHNOTIFY_START        0
    #define WINWATCHNOTIFY_STOP         1
    #define WINWATCHNOTIFY_DESTROY      2
    #define WINWATCHNOTIFY_CHANGING     3
    #define WINWATCHNOTIFY_CHANGED      4
#endif
#endif
//@@END_MSINTERNAL

/*
 * INTERACES FOLLOW:
 *      IDirectDraw
 *      IDirectDrawClipper
 *      IDirectDrawPalette
 *      IDirectDrawSurface
 *@@BEGIN_MSINTERNAL
 *      IDirectDrawSurfaceStreaming
 *      IDirectDrawSurfaceComposition
 *      IDirectDrawSurfaceClipperEx
 *              // this would allow multiple clipper objects to be attached
 *              // to the same destination
 *@@END_MSINTERNAL
 */

/*
 * IDirectDraw
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDraw
DECLARE_INTERFACE_( IDirectDraw, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC, LPDIRECTDRAWSURFACE FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC, LPVOID,LPDDENUMSURFACESCALLBACK ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDraw_QueryInterface(p, a, b)         (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDraw_AddRef(p)                       (p)->lpVtbl->AddRef(p)
#define IDirectDraw_Release(p)                      (p)->lpVtbl->Release(p)
#define IDirectDraw_Compact(p)                      (p)->lpVtbl->Compact(p)
#define IDirectDraw_CreateClipper(p, a, b, c)       (p)->lpVtbl->CreateClipper(p, a, b, c)
#define IDirectDraw_CreatePalette(p, a, b, c, d)    (p)->lpVtbl->CreatePalette(p, a, b, c, d)
#define IDirectDraw_CreateSurface(p, a, b, c)       (p)->lpVtbl->CreateSurface(p, a, b, c)
#define IDirectDraw_DuplicateSurface(p, a, b)       (p)->lpVtbl->DuplicateSurface(p, a, b)
#define IDirectDraw_EnumDisplayModes(p, a, b, c, d) (p)->lpVtbl->EnumDisplayModes(p, a, b, c, d)
#define IDirectDraw_EnumSurfaces(p, a, b, c, d)     (p)->lpVtbl->EnumSurfaces(p, a, b, c, d)
#define IDirectDraw_FlipToGDISurface(p)             (p)->lpVtbl->FlipToGDISurface(p)
#define IDirectDraw_GetCaps(p, a, b)                (p)->lpVtbl->GetCaps(p, a, b)
#define IDirectDraw_GetDisplayMode(p, a)            (p)->lpVtbl->GetDisplayMode(p, a)
#define IDirectDraw_GetFourCCCodes(p, a, b)         (p)->lpVtbl->GetFourCCCodes(p, a, b)
#define IDirectDraw_GetGDISurface(p, a)             (p)->lpVtbl->GetGDISurface(p, a)
#define IDirectDraw_GetMonitorFrequency(p, a)       (p)->lpVtbl->GetMonitorFrequency(p, a)
#define IDirectDraw_GetScanLine(p, a)               (p)->lpVtbl->GetScanLine(p, a)
#define IDirectDraw_GetVerticalBlankStatus(p, a)    (p)->lpVtbl->GetVerticalBlankStatus(p, a)
#define IDirectDraw_Initialize(p, a)                (p)->lpVtbl->Initialize(p, a)
#define IDirectDraw_RestoreDisplayMode(p)           (p)->lpVtbl->RestoreDisplayMode(p)
#define IDirectDraw_SetCooperativeLevel(p, a, b)    (p)->lpVtbl->SetCooperativeLevel(p, a, b)
#define IDirectDraw_SetDisplayMode(p, a, b, c)      (p)->lpVtbl->SetDisplayMode(p, a, b, c)
#define IDirectDraw_WaitForVerticalBlank(p, a, b)   (p)->lpVtbl->WaitForVerticalBlank(p, a, b)
#else
#define IDirectDraw_QueryInterface(p, a, b)         (p)->QueryInterface(a, b)
#define IDirectDraw_AddRef(p)                       (p)->AddRef()
#define IDirectDraw_Release(p)                      (p)->Release()
#define IDirectDraw_Compact(p)                      (p)->Compact()
#define IDirectDraw_CreateClipper(p, a, b, c)       (p)->CreateClipper(a, b, c)
#define IDirectDraw_CreatePalette(p, a, b, c, d)    (p)->CreatePalette(a, b, c, d)
#define IDirectDraw_CreateSurface(p, a, b, c)       (p)->CreateSurface(a, b, c)
#define IDirectDraw_DuplicateSurface(p, a, b)       (p)->DuplicateSurface(a, b)
#define IDirectDraw_EnumDisplayModes(p, a, b, c, d) (p)->EnumDisplayModes(a, b, c, d)
#define IDirectDraw_EnumSurfaces(p, a, b, c, d)     (p)->EnumSurfaces(a, b, c, d)
#define IDirectDraw_FlipToGDISurface(p)             (p)->FlipToGDISurface()
#define IDirectDraw_GetCaps(p, a, b)                (p)->GetCaps(a, b)
#define IDirectDraw_GetDisplayMode(p, a)            (p)->GetDisplayMode(a)
#define IDirectDraw_GetFourCCCodes(p, a, b)         (p)->GetFourCCCodes(a, b)
#define IDirectDraw_GetGDISurface(p, a)             (p)->GetGDISurface(a)
#define IDirectDraw_GetMonitorFrequency(p, a)       (p)->GetMonitorFrequency(a)
#define IDirectDraw_GetScanLine(p, a)               (p)->GetScanLine(a)
#define IDirectDraw_GetVerticalBlankStatus(p, a)    (p)->GetVerticalBlankStatus(a)
#define IDirectDraw_Initialize(p, a)                (p)->Initialize(a)
#define IDirectDraw_RestoreDisplayMode(p)           (p)->RestoreDisplayMode()
#define IDirectDraw_SetCooperativeLevel(p, a, b)    (p)->SetCooperativeLevel(a, b)
#define IDirectDraw_SetDisplayMode(p, a, b, c)      (p)->SetDisplayMode(a, b, c)
#define IDirectDraw_WaitForVerticalBlank(p, a, b)   (p)->WaitForVerticalBlank(a, b)
#endif

#endif

#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDraw2
DECLARE_INTERFACE_( IDirectDraw2, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC, LPDIRECTDRAWSURFACE FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC, LPVOID,LPDDENUMSURFACESCALLBACK ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS, LPDWORD, LPDWORD) PURE;
};
#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDraw2_QueryInterface(p, a, b)         (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDraw2_AddRef(p)                       (p)->lpVtbl->AddRef(p)
#define IDirectDraw2_Release(p)                      (p)->lpVtbl->Release(p)
#define IDirectDraw2_Compact(p)                      (p)->lpVtbl->Compact(p)
#define IDirectDraw2_CreateClipper(p, a, b, c)       (p)->lpVtbl->CreateClipper(p, a, b, c)
#define IDirectDraw2_CreatePalette(p, a, b, c, d)    (p)->lpVtbl->CreatePalette(p, a, b, c, d)
#define IDirectDraw2_CreateSurface(p, a, b, c)       (p)->lpVtbl->CreateSurface(p, a, b, c)
#define IDirectDraw2_DuplicateSurface(p, a, b)       (p)->lpVtbl->DuplicateSurface(p, a, b)
#define IDirectDraw2_EnumDisplayModes(p, a, b, c, d) (p)->lpVtbl->EnumDisplayModes(p, a, b, c, d)
#define IDirectDraw2_EnumSurfaces(p, a, b, c, d)     (p)->lpVtbl->EnumSurfaces(p, a, b, c, d)
#define IDirectDraw2_FlipToGDISurface(p)             (p)->lpVtbl->FlipToGDISurface(p)
#define IDirectDraw2_GetCaps(p, a, b)                (p)->lpVtbl->GetCaps(p, a, b)
#define IDirectDraw2_GetDisplayMode(p, a)            (p)->lpVtbl->GetDisplayMode(p, a)
#define IDirectDraw2_GetFourCCCodes(p, a, b)         (p)->lpVtbl->GetFourCCCodes(p, a, b)
#define IDirectDraw2_GetGDISurface(p, a)             (p)->lpVtbl->GetGDISurface(p, a)
#define IDirectDraw2_GetMonitorFrequency(p, a)       (p)->lpVtbl->GetMonitorFrequency(p, a)
#define IDirectDraw2_GetScanLine(p, a)               (p)->lpVtbl->GetScanLine(p, a)
#define IDirectDraw2_GetVerticalBlankStatus(p, a)    (p)->lpVtbl->GetVerticalBlankStatus(p, a)
#define IDirectDraw2_Initialize(p, a)                (p)->lpVtbl->Initialize(p, a)
#define IDirectDraw2_RestoreDisplayMode(p)           (p)->lpVtbl->RestoreDisplayMode(p)
#define IDirectDraw2_SetCooperativeLevel(p, a, b)    (p)->lpVtbl->SetCooperativeLevel(p, a, b)
#define IDirectDraw2_SetDisplayMode(p, a, b, c, d, e) (p)->lpVtbl->SetDisplayMode(p, a, b, c, d, e)
#define IDirectDraw2_WaitForVerticalBlank(p, a, b)   (p)->lpVtbl->WaitForVerticalBlank(p, a, b)
#define IDirectDraw2_GetAvailableVidMem(p, a, b, c)  (p)->lpVtbl->GetAvailableVidMem(p, a, b, c)
#else
#define IDirectDraw2_QueryInterface(p, a, b)         (p)->QueryInterface(a, b)
#define IDirectDraw2_AddRef(p)                       (p)->AddRef()
#define IDirectDraw2_Release(p)                      (p)->Release()
#define IDirectDraw2_Compact(p)                      (p)->Compact()
#define IDirectDraw2_CreateClipper(p, a, b, c)       (p)->CreateClipper(a, b, c)
#define IDirectDraw2_CreatePalette(p, a, b, c, d)    (p)->CreatePalette(a, b, c, d)
#define IDirectDraw2_CreateSurface(p, a, b, c)       (p)->CreateSurface(a, b, c)
#define IDirectDraw2_DuplicateSurface(p, a, b)       (p)->DuplicateSurface(a, b)
#define IDirectDraw2_EnumDisplayModes(p, a, b, c, d) (p)->EnumDisplayModes(a, b, c, d)
#define IDirectDraw2_EnumSurfaces(p, a, b, c, d)     (p)->EnumSurfaces(a, b, c, d)
#define IDirectDraw2_FlipToGDISurface(p)             (p)->FlipToGDISurface()
#define IDirectDraw2_GetCaps(p, a, b)                (p)->GetCaps(a, b)
#define IDirectDraw2_GetDisplayMode(p, a)            (p)->GetDisplayMode(a)
#define IDirectDraw2_GetFourCCCodes(p, a, b)         (p)->GetFourCCCodes(a, b)
#define IDirectDraw2_GetGDISurface(p, a)             (p)->GetGDISurface(a)
#define IDirectDraw2_GetMonitorFrequency(p, a)       (p)->GetMonitorFrequency(a)
#define IDirectDraw2_GetScanLine(p, a)               (p)->GetScanLine(a)
#define IDirectDraw2_GetVerticalBlankStatus(p, a)    (p)->GetVerticalBlankStatus(a)
#define IDirectDraw2_Initialize(p, a)                (p)->Initialize(a)
#define IDirectDraw2_RestoreDisplayMode(p)           (p)->RestoreDisplayMode()
#define IDirectDraw2_SetCooperativeLevel(p, a, b)    (p)->SetCooperativeLevel(a, b)
#define IDirectDraw2_SetDisplayMode(p, a, b, c, d, e) (p)->SetDisplayMode(a, b, c, d, e)
#define IDirectDraw2_WaitForVerticalBlank(p, a, b)   (p)->WaitForVerticalBlank(a, b)
#define IDirectDraw2_GetAvailableVidMem(p, a, b, c)  (p)->GetAvailableVidMem(a, b, c)
#endif

#endif

#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDraw4
DECLARE_INTERFACE_( IDirectDraw4, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC2, LPVOID,LPDDENUMSURFACESCALLBACK2 ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE4 FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    /*** Added in the V4 Interface ***/
    STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, LPDIRECTDRAWSURFACE4 *) PURE;
    STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD(GetDeviceIdentifier)(THIS_ LPDDDEVICEIDENTIFIER, DWORD ) PURE;
};
#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDraw4_QueryInterface(p, a, b)         (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDraw4_AddRef(p)                       (p)->lpVtbl->AddRef(p)
#define IDirectDraw4_Release(p)                      (p)->lpVtbl->Release(p)
#define IDirectDraw4_Compact(p)                      (p)->lpVtbl->Compact(p)
#define IDirectDraw4_CreateClipper(p, a, b, c)       (p)->lpVtbl->CreateClipper(p, a, b, c)
#define IDirectDraw4_CreatePalette(p, a, b, c, d)    (p)->lpVtbl->CreatePalette(p, a, b, c, d)
#define IDirectDraw4_CreateSurface(p, a, b, c)       (p)->lpVtbl->CreateSurface(p, a, b, c)
#define IDirectDraw4_DuplicateSurface(p, a, b)       (p)->lpVtbl->DuplicateSurface(p, a, b)
#define IDirectDraw4_EnumDisplayModes(p, a, b, c, d) (p)->lpVtbl->EnumDisplayModes(p, a, b, c, d)
#define IDirectDraw4_EnumSurfaces(p, a, b, c, d)     (p)->lpVtbl->EnumSurfaces(p, a, b, c, d)
#define IDirectDraw4_FlipToGDISurface(p)             (p)->lpVtbl->FlipToGDISurface(p)
#define IDirectDraw4_GetCaps(p, a, b)                (p)->lpVtbl->GetCaps(p, a, b)
#define IDirectDraw4_GetDisplayMode(p, a)            (p)->lpVtbl->GetDisplayMode(p, a)
#define IDirectDraw4_GetFourCCCodes(p, a, b)         (p)->lpVtbl->GetFourCCCodes(p, a, b)
#define IDirectDraw4_GetGDISurface(p, a)             (p)->lpVtbl->GetGDISurface(p, a)
#define IDirectDraw4_GetMonitorFrequency(p, a)       (p)->lpVtbl->GetMonitorFrequency(p, a)
#define IDirectDraw4_GetScanLine(p, a)               (p)->lpVtbl->GetScanLine(p, a)
#define IDirectDraw4_GetVerticalBlankStatus(p, a)    (p)->lpVtbl->GetVerticalBlankStatus(p, a)
#define IDirectDraw4_Initialize(p, a)                (p)->lpVtbl->Initialize(p, a)
#define IDirectDraw4_RestoreDisplayMode(p)           (p)->lpVtbl->RestoreDisplayMode(p)
#define IDirectDraw4_SetCooperativeLevel(p, a, b)    (p)->lpVtbl->SetCooperativeLevel(p, a, b)
#define IDirectDraw4_SetDisplayMode(p, a, b, c, d, e) (p)->lpVtbl->SetDisplayMode(p, a, b, c, d, e)
#define IDirectDraw4_WaitForVerticalBlank(p, a, b)   (p)->lpVtbl->WaitForVerticalBlank(p, a, b)
#define IDirectDraw4_GetAvailableVidMem(p, a, b, c)  (p)->lpVtbl->GetAvailableVidMem(p, a, b, c)
#define IDirectDraw4_GetSurfaceFromDC(p, a, b)       (p)->lpVtbl->GetSurfaceFromDC(p, a, b)
#define IDirectDraw4_RestoreAllSurfaces(p)           (p)->lpVtbl->RestoreAllSurfaces(p)
#define IDirectDraw4_TestCooperativeLevel(p)         (p)->lpVtbl->TestCooperativeLevel(p)
#define IDirectDraw4_GetDeviceIdentifier(p,a,b)      (p)->lpVtbl->GetDeviceIdentifier(p,a,b)
#else
#define IDirectDraw4_QueryInterface(p, a, b)         (p)->QueryInterface(a, b)
#define IDirectDraw4_AddRef(p)                       (p)->AddRef()
#define IDirectDraw4_Release(p)                      (p)->Release()
#define IDirectDraw4_Compact(p)                      (p)->Compact()
#define IDirectDraw4_CreateClipper(p, a, b, c)       (p)->CreateClipper(a, b, c)
#define IDirectDraw4_CreatePalette(p, a, b, c, d)    (p)->CreatePalette(a, b, c, d)
#define IDirectDraw4_CreateSurface(p, a, b, c)       (p)->CreateSurface(a, b, c)
#define IDirectDraw4_DuplicateSurface(p, a, b)       (p)->DuplicateSurface(a, b)
#define IDirectDraw4_EnumDisplayModes(p, a, b, c, d) (p)->EnumDisplayModes(a, b, c, d)
#define IDirectDraw4_EnumSurfaces(p, a, b, c, d)     (p)->EnumSurfaces(a, b, c, d)
#define IDirectDraw4_FlipToGDISurface(p)             (p)->FlipToGDISurface()
#define IDirectDraw4_GetCaps(p, a, b)                (p)->GetCaps(a, b)
#define IDirectDraw4_GetDisplayMode(p, a)            (p)->GetDisplayMode(a)
#define IDirectDraw4_GetFourCCCodes(p, a, b)         (p)->GetFourCCCodes(a, b)
#define IDirectDraw4_GetGDISurface(p, a)             (p)->GetGDISurface(a)
#define IDirectDraw4_GetMonitorFrequency(p, a)       (p)->GetMonitorFrequency(a)
#define IDirectDraw4_GetScanLine(p, a)               (p)->GetScanLine(a)
#define IDirectDraw4_GetVerticalBlankStatus(p, a)    (p)->GetVerticalBlankStatus(a)
#define IDirectDraw4_Initialize(p, a)                (p)->Initialize(a)
#define IDirectDraw4_RestoreDisplayMode(p)           (p)->RestoreDisplayMode()
#define IDirectDraw4_SetCooperativeLevel(p, a, b)    (p)->SetCooperativeLevel(a, b)
#define IDirectDraw4_SetDisplayMode(p, a, b, c, d, e) (p)->SetDisplayMode(a, b, c, d, e)
#define IDirectDraw4_WaitForVerticalBlank(p, a, b)   (p)->WaitForVerticalBlank(a, b)
#define IDirectDraw4_GetAvailableVidMem(p, a, b, c)  (p)->GetAvailableVidMem(a, b, c)
#define IDirectDraw4_GetSurfaceFromDC(p, a, b)       (p)->GetSurfaceFromDC(a, b)
#define IDirectDraw4_RestoreAllSurfaces(p)           (p)->RestoreAllSurfaces()
#define IDirectDraw4_TestCooperativeLevel(p)         (p)->TestCooperativeLevel()
#define IDirectDraw4_GetDeviceIdentifier(p,a,b)      (p)->GetDeviceIdentifier(a,b)
#endif

#endif

#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDraw7
DECLARE_INTERFACE_( IDirectDraw7, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE7 FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE7, LPDIRECTDRAWSURFACE7 FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC2, LPVOID,LPDDENUMSURFACESCALLBACK7 ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE7 FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    /*** Added in the V4 Interface ***/
    STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD(GetDeviceIdentifier)(THIS_ LPDDDEVICEIDENTIFIER2, DWORD ) PURE;
    STDMETHOD(StartModeTest)(THIS_ LPSIZE, DWORD, DWORD ) PURE;
    STDMETHOD(EvaluateMode)(THIS_ DWORD, DWORD * ) PURE;
//@@BEGIN_MSINTERNAL
#ifdef POSTPONED
    STDMETHOD(CreateSurfaceFromStream) (THIS_ IStream *, LPDDSURFACEDESC2, DWORD, LPDIRECTDRAWSURFACE7 *, IUnknown *) PURE;
    STDMETHOD(CreateSurfaceFromFile) (THIS_ BSTR , LPDDSURFACEDESC2, DWORD, LPDIRECTDRAWSURFACE7 *, IUnknown *) PURE;
#endif
//@@END_MSINTERNAL
};
#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDraw7_QueryInterface(p, a, b)         (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDraw7_AddRef(p)                       (p)->lpVtbl->AddRef(p)
#define IDirectDraw7_Release(p)                      (p)->lpVtbl->Release(p)
#define IDirectDraw7_Compact(p)                      (p)->lpVtbl->Compact(p)
#define IDirectDraw7_CreateClipper(p, a, b, c)       (p)->lpVtbl->CreateClipper(p, a, b, c)
#define IDirectDraw7_CreatePalette(p, a, b, c, d)    (p)->lpVtbl->CreatePalette(p, a, b, c, d)
#define IDirectDraw7_CreateSurface(p, a, b, c)       (p)->lpVtbl->CreateSurface(p, a, b, c)
#define IDirectDraw7_DuplicateSurface(p, a, b)       (p)->lpVtbl->DuplicateSurface(p, a, b)
#define IDirectDraw7_EnumDisplayModes(p, a, b, c, d) (p)->lpVtbl->EnumDisplayModes(p, a, b, c, d)
#define IDirectDraw7_EnumSurfaces(p, a, b, c, d)     (p)->lpVtbl->EnumSurfaces(p, a, b, c, d)
#define IDirectDraw7_FlipToGDISurface(p)             (p)->lpVtbl->FlipToGDISurface(p)
#define IDirectDraw7_GetCaps(p, a, b)                (p)->lpVtbl->GetCaps(p, a, b)
#define IDirectDraw7_GetDisplayMode(p, a)            (p)->lpVtbl->GetDisplayMode(p, a)
#define IDirectDraw7_GetFourCCCodes(p, a, b)         (p)->lpVtbl->GetFourCCCodes(p, a, b)
#define IDirectDraw7_GetGDISurface(p, a)             (p)->lpVtbl->GetGDISurface(p, a)
#define IDirectDraw7_GetMonitorFrequency(p, a)       (p)->lpVtbl->GetMonitorFrequency(p, a)
#define IDirectDraw7_GetScanLine(p, a)               (p)->lpVtbl->GetScanLine(p, a)
#define IDirectDraw7_GetVerticalBlankStatus(p, a)    (p)->lpVtbl->GetVerticalBlankStatus(p, a)
#define IDirectDraw7_Initialize(p, a)                (p)->lpVtbl->Initialize(p, a)
#define IDirectDraw7_RestoreDisplayMode(p)           (p)->lpVtbl->RestoreDisplayMode(p)
#define IDirectDraw7_SetCooperativeLevel(p, a, b)    (p)->lpVtbl->SetCooperativeLevel(p, a, b)
#define IDirectDraw7_SetDisplayMode(p, a, b, c, d, e) (p)->lpVtbl->SetDisplayMode(p, a, b, c, d, e)
#define IDirectDraw7_WaitForVerticalBlank(p, a, b)   (p)->lpVtbl->WaitForVerticalBlank(p, a, b)
#define IDirectDraw7_GetAvailableVidMem(p, a, b, c)  (p)->lpVtbl->GetAvailableVidMem(p, a, b, c)
#define IDirectDraw7_GetSurfaceFromDC(p, a, b)       (p)->lpVtbl->GetSurfaceFromDC(p, a, b)
#define IDirectDraw7_RestoreAllSurfaces(p)           (p)->lpVtbl->RestoreAllSurfaces(p)
#define IDirectDraw7_TestCooperativeLevel(p)         (p)->lpVtbl->TestCooperativeLevel(p)
#define IDirectDraw7_GetDeviceIdentifier(p,a,b)      (p)->lpVtbl->GetDeviceIdentifier(p,a,b)
#define IDirectDraw7_StartModeTest(p,a,b,c)        (p)->lpVtbl->StartModeTest(p,a,b,c)
#define IDirectDraw7_EvaluateMode(p,a,b)           (p)->lpVtbl->EvaluateMode(p,a,b)
//@@BEGIN_MSINTERNAL
#define IDirectDraw7_CreateSurfaceFromStream(p, a, b, c, d, e) (p)->lpVtbl->CreateSurfaceFromStream(p, a, b, c, d, e)
#define IDirectDraw7_CreateSurfaceFromFile(p, a, b, c, d, e) (p)->lpVtbl->CreateSurfaceFromFile(p, a, b, c, d, e)
//@@END_MSINTERNAL
#else
#define IDirectDraw7_QueryInterface(p, a, b)         (p)->QueryInterface(a, b)
#define IDirectDraw7_AddRef(p)                       (p)->AddRef()
#define IDirectDraw7_Release(p)                      (p)->Release()
#define IDirectDraw7_Compact(p)                      (p)->Compact()
#define IDirectDraw7_CreateClipper(p, a, b, c)       (p)->CreateClipper(a, b, c)
#define IDirectDraw7_CreatePalette(p, a, b, c, d)    (p)->CreatePalette(a, b, c, d)
#define IDirectDraw7_CreateSurface(p, a, b, c)       (p)->CreateSurface(a, b, c)
#define IDirectDraw7_DuplicateSurface(p, a, b)       (p)->DuplicateSurface(a, b)
#define IDirectDraw7_EnumDisplayModes(p, a, b, c, d) (p)->EnumDisplayModes(a, b, c, d)
#define IDirectDraw7_EnumSurfaces(p, a, b, c, d)     (p)->EnumSurfaces(a, b, c, d)
#define IDirectDraw7_FlipToGDISurface(p)             (p)->FlipToGDISurface()
#define IDirectDraw7_GetCaps(p, a, b)                (p)->GetCaps(a, b)
#define IDirectDraw7_GetDisplayMode(p, a)            (p)->GetDisplayMode(a)
#define IDirectDraw7_GetFourCCCodes(p, a, b)         (p)->GetFourCCCodes(a, b)
#define IDirectDraw7_GetGDISurface(p, a)             (p)->GetGDISurface(a)
#define IDirectDraw7_GetMonitorFrequency(p, a)       (p)->GetMonitorFrequency(a)
#define IDirectDraw7_GetScanLine(p, a)               (p)->GetScanLine(a)
#define IDirectDraw7_GetVerticalBlankStatus(p, a)    (p)->GetVerticalBlankStatus(a)
#define IDirectDraw7_Initialize(p, a)                (p)->Initialize(a)
#define IDirectDraw7_RestoreDisplayMode(p)           (p)->RestoreDisplayMode()
#define IDirectDraw7_SetCooperativeLevel(p, a, b)    (p)->SetCooperativeLevel(a, b)
#define IDirectDraw7_SetDisplayMode(p, a, b, c, d, e) (p)->SetDisplayMode(a, b, c, d, e)
#define IDirectDraw7_WaitForVerticalBlank(p, a, b)   (p)->WaitForVerticalBlank(a, b)
#define IDirectDraw7_GetAvailableVidMem(p, a, b, c)  (p)->GetAvailableVidMem(a, b, c)
#define IDirectDraw7_GetSurfaceFromDC(p, a, b)       (p)->GetSurfaceFromDC(a, b)
#define IDirectDraw7_RestoreAllSurfaces(p)           (p)->RestoreAllSurfaces()
#define IDirectDraw7_TestCooperativeLevel(p)         (p)->TestCooperativeLevel()
#define IDirectDraw7_GetDeviceIdentifier(p,a,b)      (p)->GetDeviceIdentifier(a,b)
#define IDirectDraw7_StartModeTest(p,a,b,c)        (p)->lpVtbl->StartModeTest(a,b,c)
#define IDirectDraw7_EvaluateMode(p,a,b)           (p)->lpVtbl->EvaluateMode(a,b)
//@@BEGIN_MSINTERNAL
#define IDirectDraw7_CreateSurfaceFromStream(p, a, b, c, d, e) (p)->CreateSurfaceFromStream(a, b, c, d, e)
#define IDirectDraw7_CreateSurfaceFromFile(p, a, b, c, d, e) (p)->CreateSurfaceFromFile(a, b, c, d, e)
//@@END_MSINTERNAL
#endif

#endif

//@@BEGIN_MSINTERNAL

/*
 * IDirectDrawFactory2
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawFactory2
DECLARE_INTERFACE_( IDirectDrawFactory2, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawFactory2 methods ***/
    STDMETHOD(CreateDirectDraw) (THIS_ GUID * pGUID, HWND hWnd, DWORD dwCoopLevelFlags, DWORD dwReserved, IUnknown *pUnkOuter, struct IDirectDraw4 **ppDirectDraw) PURE;
#ifdef SM_CMONITORS
    STDMETHOD(DirectDrawEnumerate) (THIS_ LPDDENUMCALLBACKEX , LPVOID , DWORD ) PURE;
#else
    STDMETHOD(DirectDrawEnumerate) (THIS_ LPDDENUMCALLBACK , LPVOID , DWORD ) PURE;
#endif
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDraw_QueryInterface(p, a, b)                     (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDraw_AddRef(p)                                   (p)->lpVtbl->AddRef(p)
#define IDirectDraw_Release(p)                                  (p)->lpVtbl->Release(p)
#define IDirectDraw_CreateDirectDraw(p, a, b, c, d, e, f)       (p)->lpVtbl->CreateDirectDraw(p, a, b, c, d, e, f)
#define IDirectDraw_DirectDrawEnumerate(p, a, b, c)             (p)->lpVtbl->DirectDrawEnumerate(p, a, b, c)
#else
#define IDirectDraw_QueryInterface(p, a, b)                     (p)->QueryInterface(a, b)
#define IDirectDraw_AddRef(p)                                   (p)->AddRef()
#define IDirectDraw_Release(p)                                  (p)->Release()
#define IDirectDraw_CreateDirectDraw(p, a, b, c, d, e, f)       (p)->CreateDirectDraw(a, b, c, d, e, f)
#define IDirectDraw_DirectDrawEnumerate(p, a, b, c)             (p)->DirectDrawEnumerate(a, b, c)
#endif

#endif
//@@END_MSINTERNAL

/*
 * IDirectDrawPalette
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawPalette
DECLARE_INTERFACE_( IDirectDrawPalette, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawPalette methods ***/
    STDMETHOD(GetCaps)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, DWORD, LPPALETTEENTRY) PURE;
    STDMETHOD(SetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawPalette_QueryInterface(p, a, b)      (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawPalette_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawPalette_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawPalette_GetCaps(p, a)                (p)->lpVtbl->GetCaps(p, a)
#define IDirectDrawPalette_GetEntries(p, a, b, c, d)    (p)->lpVtbl->GetEntries(p, a, b, c, d)
#define IDirectDrawPalette_Initialize(p, a, b, c)       (p)->lpVtbl->Initialize(p, a, b, c)
#define IDirectDrawPalette_SetEntries(p, a, b, c, d)    (p)->lpVtbl->SetEntries(p, a, b, c, d)
#else
#define IDirectDrawPalette_QueryInterface(p, a, b)      (p)->QueryInterface(a, b)
#define IDirectDrawPalette_AddRef(p)                    (p)->AddRef()
#define IDirectDrawPalette_Release(p)                   (p)->Release()
#define IDirectDrawPalette_GetCaps(p, a)                (p)->GetCaps(a)
#define IDirectDrawPalette_GetEntries(p, a, b, c, d)    (p)->GetEntries(a, b, c, d)
#define IDirectDrawPalette_Initialize(p, a, b, c)       (p)->Initialize(a, b, c)
#define IDirectDrawPalette_SetEntries(p, a, b, c, d)    (p)->SetEntries(a, b, c, d)
#endif

#endif

//@@BEGIN_MSINTERNAL
/*
 * IDirectDrawPalette2
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawPalette2
DECLARE_INTERFACE_( IDirectDrawPalette2, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawPalette methods ***/
    STDMETHOD(GetCaps)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, DWORD, LPPALETTEENTRY) PURE;
    STDMETHOD(SetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
    /*** IDirectDrawPalette2 methods ***/
    STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
    STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
    STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
    STDMETHOD(IsEqual)(THIS_ LPDIRECTDRAWPALETTE2) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawPalette2_QueryInterface(p, a, b)      (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawPalette2_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawPalette2_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawPalette2_GetCaps(p, a)                (p)->lpVtbl->GetCaps(p, a)
#define IDirectDrawPalette2_GetEntries(p, a, b, c, d)    (p)->lpVtbl->GetEntries(p, a, b, c, d)
#define IDirectDrawPalette2_Initialize(p, a, b, c)       (p)->lpVtbl->Initialize(p, a, b, c)
#define IDirectDrawPalette2_SetEntries(p, a, b, c, d)    (p)->lpVtbl->SetEntries(p, a, b, c, d)
#define IDirectDrawPalette2_SetPrivateData(p,a,b,c,d)    (p)->lpVtbl->SetPrivateData(p, a, b, c, d)
#define IDirectDrawPalette2_GetPrivateData(p,a,b,c)      (p)->lpVtbl->GetPrivateData(p, a, b, c)
#define IDirectDrawPalette2_FreePrivateData(p, a)        (p)->lpVtbl->FreePrivateData(p, a)
#define IDirectDrawPalette2_GetUniquenessValue(p, a)     (p)->lpVtbl->GetUniquenessValue(p, a)
#define IDirectDrawPalette2_ChangeUniquenessValue(p)     (p)->lpVtbl->ChangeUniquenessValue(p)
#define IDirectDrawPalette2_IsEqual(p, a)                (p)->lpVtbl->IsEqual(p, a)
#else
#define IDirectDrawPalette2_QueryInterface(p, a, b)      (p)->QueryInterface(a, b)
#define IDirectDrawPalette2_AddRef(p)                    (p)->AddRef()
#define IDirectDrawPalette2_Release(p)                   (p)->Release()
#define IDirectDrawPalette2_GetCaps(p, a)                (p)->GetCaps(a)
#define IDirectDrawPalette2_GetEntries(p, a, b, c, d)    (p)->GetEntries(a, b, c, d)
#define IDirectDrawPalette2_Initialize(p, a, b, c)       (p)->Initialize(a, b, c)
#define IDirectDrawPalette2_SetEntries(p, a, b, c, d)    (p)->SetEntries(a, b, c, d)
#define IDirectDrawPalette2_SetPrivateData(p,a,b,c,d)    (p)->SetPrivateData(a, b, c, d)
#define IDirectDrawPalette2_GetPrivateData(p,a,b,c)      (p)->GetPrivateData(a, b, c)
#define IDirectDrawPalette2_FreePrivateData(p, a)        (p)->FreePrivateData(a)
#define IDirectDrawPalette2_GetUniquenessValue(p, a)     (p)->GetUniquenessValue(a)
#define IDirectDrawPalette2_ChangeUniquenessValue(p)     (p)->ChangeUniquenessValue()
#define IDirectDrawPalette2_IsEqual(p, a)                (p)->IsEqual(a)
#endif

#endif
//@@END_MSINTERNAL


/*
 * IDirectDrawClipper
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawClipper
DECLARE_INTERFACE_( IDirectDrawClipper, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawClipper methods ***/
    STDMETHOD(GetClipList)(THIS_ LPRECT, LPRGNDATA, LPDWORD) PURE;
    STDMETHOD(GetHWnd)(THIS_ HWND FAR *) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, DWORD) PURE;
    STDMETHOD(IsClipListChanged)(THIS_ BOOL FAR *) PURE;
    STDMETHOD(SetClipList)(THIS_ LPRGNDATA,DWORD) PURE;
    STDMETHOD(SetHWnd)(THIS_ DWORD, HWND ) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawClipper_QueryInterface(p, a, b)  (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawClipper_AddRef(p)                (p)->lpVtbl->AddRef(p)
#define IDirectDrawClipper_Release(p)               (p)->lpVtbl->Release(p)
#define IDirectDrawClipper_GetClipList(p, a, b, c)  (p)->lpVtbl->GetClipList(p, a, b, c)
#define IDirectDrawClipper_GetHWnd(p, a)            (p)->lpVtbl->GetHWnd(p, a)
#define IDirectDrawClipper_Initialize(p, a, b)      (p)->lpVtbl->Initialize(p, a, b)
#define IDirectDrawClipper_IsClipListChanged(p, a)  (p)->lpVtbl->IsClipListChanged(p, a)
#define IDirectDrawClipper_SetClipList(p, a, b)     (p)->lpVtbl->SetClipList(p, a, b)
#define IDirectDrawClipper_SetHWnd(p, a, b)         (p)->lpVtbl->SetHWnd(p, a, b)
#else
#define IDirectDrawClipper_QueryInterface(p, a, b)  (p)->QueryInterface(a, b)
#define IDirectDrawClipper_AddRef(p)                (p)->AddRef()
#define IDirectDrawClipper_Release(p)               (p)->Release()
#define IDirectDrawClipper_GetClipList(p, a, b, c)  (p)->GetClipList(a, b, c)
#define IDirectDrawClipper_GetHWnd(p, a)            (p)->GetHWnd(a)
#define IDirectDrawClipper_Initialize(p, a, b)      (p)->Initialize(a, b)
#define IDirectDrawClipper_IsClipListChanged(p, a)  (p)->IsClipListChanged(a)
#define IDirectDrawClipper_SetClipList(p, a, b)     (p)->SetClipList(a, b)
#define IDirectDrawClipper_SetHWnd(p, a, b)         (p)->SetHWnd(a, b)
#endif

#endif

/*
 * IDirectDrawSurface and related interfaces
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawSurface
DECLARE_INTERFACE_( IDirectDrawSurface, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawSurface_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirectDrawSurface_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawSurface_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawSurface_AddAttachedSurface(p,a)      (p)->lpVtbl->AddAttachedSurface(p,a)
#define IDirectDrawSurface_AddOverlayDirtyRect(p,a)     (p)->lpVtbl->AddOverlayDirtyRect(p,a)
#define IDirectDrawSurface_Blt(p,a,b,c,d,e)             (p)->lpVtbl->Blt(p,a,b,c,d,e)
#define IDirectDrawSurface_BltBatch(p,a,b,c)            (p)->lpVtbl->BltBatch(p,a,b,c)
#define IDirectDrawSurface_BltFast(p,a,b,c,d,e)         (p)->lpVtbl->BltFast(p,a,b,c,d,e)
#define IDirectDrawSurface_DeleteAttachedSurface(p,a,b) (p)->lpVtbl->DeleteAttachedSurface(p,a,b)
#define IDirectDrawSurface_EnumAttachedSurfaces(p,a,b)  (p)->lpVtbl->EnumAttachedSurfaces(p,a,b)
#define IDirectDrawSurface_EnumOverlayZOrders(p,a,b,c)  (p)->lpVtbl->EnumOverlayZOrders(p,a,b,c)
#define IDirectDrawSurface_Flip(p,a,b)                  (p)->lpVtbl->Flip(p,a,b)
#define IDirectDrawSurface_GetAttachedSurface(p,a,b)    (p)->lpVtbl->GetAttachedSurface(p,a,b)
#define IDirectDrawSurface_GetBltStatus(p,a)            (p)->lpVtbl->GetBltStatus(p,a)
#define IDirectDrawSurface_GetCaps(p,b)                 (p)->lpVtbl->GetCaps(p,b)
#define IDirectDrawSurface_GetClipper(p,a)              (p)->lpVtbl->GetClipper(p,a)
#define IDirectDrawSurface_GetColorKey(p,a,b)           (p)->lpVtbl->GetColorKey(p,a,b)
#define IDirectDrawSurface_GetDC(p,a)                   (p)->lpVtbl->GetDC(p,a)
#define IDirectDrawSurface_GetFlipStatus(p,a)           (p)->lpVtbl->GetFlipStatus(p,a)
#define IDirectDrawSurface_GetOverlayPosition(p,a,b)    (p)->lpVtbl->GetOverlayPosition(p,a,b)
#define IDirectDrawSurface_GetPalette(p,a)              (p)->lpVtbl->GetPalette(p,a)
#define IDirectDrawSurface_GetPixelFormat(p,a)          (p)->lpVtbl->GetPixelFormat(p,a)
#define IDirectDrawSurface_GetSurfaceDesc(p,a)          (p)->lpVtbl->GetSurfaceDesc(p,a)
#define IDirectDrawSurface_Initialize(p,a,b)            (p)->lpVtbl->Initialize(p,a,b)
#define IDirectDrawSurface_IsLost(p)                    (p)->lpVtbl->IsLost(p)
#define IDirectDrawSurface_Lock(p,a,b,c,d)              (p)->lpVtbl->Lock(p,a,b,c,d)
#define IDirectDrawSurface_ReleaseDC(p,a)               (p)->lpVtbl->ReleaseDC(p,a)
#define IDirectDrawSurface_Restore(p)                   (p)->lpVtbl->Restore(p)
#define IDirectDrawSurface_SetClipper(p,a)              (p)->lpVtbl->SetClipper(p,a)
#define IDirectDrawSurface_SetColorKey(p,a,b)           (p)->lpVtbl->SetColorKey(p,a,b)
#define IDirectDrawSurface_SetOverlayPosition(p,a,b)    (p)->lpVtbl->SetOverlayPosition(p,a,b)
#define IDirectDrawSurface_SetPalette(p,a)              (p)->lpVtbl->SetPalette(p,a)
#define IDirectDrawSurface_Unlock(p,b)                  (p)->lpVtbl->Unlock(p,b)
#define IDirectDrawSurface_UpdateOverlay(p,a,b,c,d,e)   (p)->lpVtbl->UpdateOverlay(p,a,b,c,d,e)
#define IDirectDrawSurface_UpdateOverlayDisplay(p,a)    (p)->lpVtbl->UpdateOverlayDisplay(p,a)
#define IDirectDrawSurface_UpdateOverlayZOrder(p,a,b)   (p)->lpVtbl->UpdateOverlayZOrder(p,a,b)
#else
#define IDirectDrawSurface_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IDirectDrawSurface_AddRef(p)                    (p)->AddRef()
#define IDirectDrawSurface_Release(p)                   (p)->Release()
#define IDirectDrawSurface_AddAttachedSurface(p,a)      (p)->AddAttachedSurface(a)
#define IDirectDrawSurface_AddOverlayDirtyRect(p,a)     (p)->AddOverlayDirtyRect(a)
#define IDirectDrawSurface_Blt(p,a,b,c,d,e)             (p)->Blt(a,b,c,d,e)
#define IDirectDrawSurface_BltBatch(p,a,b,c)            (p)->BltBatch(a,b,c)
#define IDirectDrawSurface_BltFast(p,a,b,c,d,e)         (p)->BltFast(a,b,c,d,e)
#define IDirectDrawSurface_DeleteAttachedSurface(p,a,b) (p)->DeleteAttachedSurface(a,b)
#define IDirectDrawSurface_EnumAttachedSurfaces(p,a,b)  (p)->EnumAttachedSurfaces(a,b)
#define IDirectDrawSurface_EnumOverlayZOrders(p,a,b,c)  (p)->EnumOverlayZOrders(a,b,c)
#define IDirectDrawSurface_Flip(p,a,b)                  (p)->Flip(a,b)
#define IDirectDrawSurface_GetAttachedSurface(p,a,b)    (p)->GetAttachedSurface(a,b)
#define IDirectDrawSurface_GetBltStatus(p,a)            (p)->GetBltStatus(a)
#define IDirectDrawSurface_GetCaps(p,b)                 (p)->GetCaps(b)
#define IDirectDrawSurface_GetClipper(p,a)              (p)->GetClipper(a)
#define IDirectDrawSurface_GetColorKey(p,a,b)           (p)->GetColorKey(a,b)
#define IDirectDrawSurface_GetDC(p,a)                   (p)->GetDC(a)
#define IDirectDrawSurface_GetFlipStatus(p,a)           (p)->GetFlipStatus(a)
#define IDirectDrawSurface_GetOverlayPosition(p,a,b)    (p)->GetOverlayPosition(a,b)
#define IDirectDrawSurface_GetPalette(p,a)              (p)->GetPalette(a)
#define IDirectDrawSurface_GetPixelFormat(p,a)          (p)->GetPixelFormat(a)
#define IDirectDrawSurface_GetSurfaceDesc(p,a)          (p)->GetSurfaceDesc(a)
#define IDirectDrawSurface_Initialize(p,a,b)            (p)->Initialize(a,b)
#define IDirectDrawSurface_IsLost(p)                    (p)->IsLost()
#define IDirectDrawSurface_Lock(p,a,b,c,d)              (p)->Lock(a,b,c,d)
#define IDirectDrawSurface_ReleaseDC(p,a)               (p)->ReleaseDC(a)
#define IDirectDrawSurface_Restore(p)                   (p)->Restore()
#define IDirectDrawSurface_SetClipper(p,a)              (p)->SetClipper(a)
#define IDirectDrawSurface_SetColorKey(p,a,b)           (p)->SetColorKey(a,b)
#define IDirectDrawSurface_SetOverlayPosition(p,a,b)    (p)->SetOverlayPosition(a,b)
#define IDirectDrawSurface_SetPalette(p,a)              (p)->SetPalette(a)
#define IDirectDrawSurface_Unlock(p,b)                  (p)->Unlock(b)
#define IDirectDrawSurface_UpdateOverlay(p,a,b,c,d,e)   (p)->UpdateOverlay(a,b,c,d,e)
#define IDirectDrawSurface_UpdateOverlayDisplay(p,a)    (p)->UpdateOverlayDisplay(a)
#define IDirectDrawSurface_UpdateOverlayZOrder(p,a,b)   (p)->UpdateOverlayZOrder(a,b)
#endif

/*
 * IDirectDrawSurface2 and related interfaces
 */
#undef INTERFACE
#define INTERFACE IDirectDrawSurface2
DECLARE_INTERFACE_( IDirectDrawSurface2, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE2) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE2, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE2, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE2) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE2, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE2 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE2,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE2) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawSurface2_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirectDrawSurface2_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawSurface2_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawSurface2_AddAttachedSurface(p,a)      (p)->lpVtbl->AddAttachedSurface(p,a)
#define IDirectDrawSurface2_AddOverlayDirtyRect(p,a)     (p)->lpVtbl->AddOverlayDirtyRect(p,a)
#define IDirectDrawSurface2_Blt(p,a,b,c,d,e)             (p)->lpVtbl->Blt(p,a,b,c,d,e)
#define IDirectDrawSurface2_BltBatch(p,a,b,c)            (p)->lpVtbl->BltBatch(p,a,b,c)
#define IDirectDrawSurface2_BltFast(p,a,b,c,d,e)         (p)->lpVtbl->BltFast(p,a,b,c,d,e)
#define IDirectDrawSurface2_DeleteAttachedSurface(p,a,b) (p)->lpVtbl->DeleteAttachedSurface(p,a,b)
#define IDirectDrawSurface2_EnumAttachedSurfaces(p,a,b)  (p)->lpVtbl->EnumAttachedSurfaces(p,a,b)
#define IDirectDrawSurface2_EnumOverlayZOrders(p,a,b,c)  (p)->lpVtbl->EnumOverlayZOrders(p,a,b,c)
#define IDirectDrawSurface2_Flip(p,a,b)                  (p)->lpVtbl->Flip(p,a,b)
#define IDirectDrawSurface2_GetAttachedSurface(p,a,b)    (p)->lpVtbl->GetAttachedSurface(p,a,b)
#define IDirectDrawSurface2_GetBltStatus(p,a)            (p)->lpVtbl->GetBltStatus(p,a)
#define IDirectDrawSurface2_GetCaps(p,b)                 (p)->lpVtbl->GetCaps(p,b)
#define IDirectDrawSurface2_GetClipper(p,a)              (p)->lpVtbl->GetClipper(p,a)
#define IDirectDrawSurface2_GetColorKey(p,a,b)           (p)->lpVtbl->GetColorKey(p,a,b)
#define IDirectDrawSurface2_GetDC(p,a)                   (p)->lpVtbl->GetDC(p,a)
#define IDirectDrawSurface2_GetFlipStatus(p,a)           (p)->lpVtbl->GetFlipStatus(p,a)
#define IDirectDrawSurface2_GetOverlayPosition(p,a,b)    (p)->lpVtbl->GetOverlayPosition(p,a,b)
#define IDirectDrawSurface2_GetPalette(p,a)              (p)->lpVtbl->GetPalette(p,a)
#define IDirectDrawSurface2_GetPixelFormat(p,a)          (p)->lpVtbl->GetPixelFormat(p,a)
#define IDirectDrawSurface2_GetSurfaceDesc(p,a)          (p)->lpVtbl->GetSurfaceDesc(p,a)
#define IDirectDrawSurface2_Initialize(p,a,b)            (p)->lpVtbl->Initialize(p,a,b)
#define IDirectDrawSurface2_IsLost(p)                    (p)->lpVtbl->IsLost(p)
#define IDirectDrawSurface2_Lock(p,a,b,c,d)              (p)->lpVtbl->Lock(p,a,b,c,d)
#define IDirectDrawSurface2_ReleaseDC(p,a)               (p)->lpVtbl->ReleaseDC(p,a)
#define IDirectDrawSurface2_Restore(p)                   (p)->lpVtbl->Restore(p)
#define IDirectDrawSurface2_SetClipper(p,a)              (p)->lpVtbl->SetClipper(p,a)
#define IDirectDrawSurface2_SetColorKey(p,a,b)           (p)->lpVtbl->SetColorKey(p,a,b)
#define IDirectDrawSurface2_SetOverlayPosition(p,a,b)    (p)->lpVtbl->SetOverlayPosition(p,a,b)
#define IDirectDrawSurface2_SetPalette(p,a)              (p)->lpVtbl->SetPalette(p,a)
#define IDirectDrawSurface2_Unlock(p,b)                  (p)->lpVtbl->Unlock(p,b)
#define IDirectDrawSurface2_UpdateOverlay(p,a,b,c,d,e)   (p)->lpVtbl->UpdateOverlay(p,a,b,c,d,e)
#define IDirectDrawSurface2_UpdateOverlayDisplay(p,a)    (p)->lpVtbl->UpdateOverlayDisplay(p,a)
#define IDirectDrawSurface2_UpdateOverlayZOrder(p,a,b)   (p)->lpVtbl->UpdateOverlayZOrder(p,a,b)
#define IDirectDrawSurface2_GetDDInterface(p,a)          (p)->lpVtbl->GetDDInterface(p,a)
#define IDirectDrawSurface2_PageLock(p,a)                (p)->lpVtbl->PageLock(p,a)
#define IDirectDrawSurface2_PageUnlock(p,a)              (p)->lpVtbl->PageUnlock(p,a)
#else
#define IDirectDrawSurface2_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IDirectDrawSurface2_AddRef(p)                    (p)->AddRef()
#define IDirectDrawSurface2_Release(p)                   (p)->Release()
#define IDirectDrawSurface2_AddAttachedSurface(p,a)      (p)->AddAttachedSurface(a)
#define IDirectDrawSurface2_AddOverlayDirtyRect(p,a)     (p)->AddOverlayDirtyRect(a)
#define IDirectDrawSurface2_Blt(p,a,b,c,d,e)             (p)->Blt(a,b,c,d,e)
#define IDirectDrawSurface2_BltBatch(p,a,b,c)            (p)->BltBatch(a,b,c)
#define IDirectDrawSurface2_BltFast(p,a,b,c,d,e)         (p)->BltFast(a,b,c,d,e)
#define IDirectDrawSurface2_DeleteAttachedSurface(p,a,b) (p)->DeleteAttachedSurface(a,b)
#define IDirectDrawSurface2_EnumAttachedSurfaces(p,a,b)  (p)->EnumAttachedSurfaces(a,b)
#define IDirectDrawSurface2_EnumOverlayZOrders(p,a,b,c)  (p)->EnumOverlayZOrders(a,b,c)
#define IDirectDrawSurface2_Flip(p,a,b)                  (p)->Flip(a,b)
#define IDirectDrawSurface2_GetAttachedSurface(p,a,b)    (p)->GetAttachedSurface(a,b)
#define IDirectDrawSurface2_GetBltStatus(p,a)            (p)->GetBltStatus(a)
#define IDirectDrawSurface2_GetCaps(p,b)                 (p)->GetCaps(b)
#define IDirectDrawSurface2_GetClipper(p,a)              (p)->GetClipper(a)
#define IDirectDrawSurface2_GetColorKey(p,a,b)           (p)->GetColorKey(a,b)
#define IDirectDrawSurface2_GetDC(p,a)                   (p)->GetDC(a)
#define IDirectDrawSurface2_GetFlipStatus(p,a)           (p)->GetFlipStatus(a)
#define IDirectDrawSurface2_GetOverlayPosition(p,a,b)    (p)->GetOverlayPosition(a,b)
#define IDirectDrawSurface2_GetPalette(p,a)              (p)->GetPalette(a)
#define IDirectDrawSurface2_GetPixelFormat(p,a)          (p)->GetPixelFormat(a)
#define IDirectDrawSurface2_GetSurfaceDesc(p,a)          (p)->GetSurfaceDesc(a)
#define IDirectDrawSurface2_Initialize(p,a,b)            (p)->Initialize(a,b)
#define IDirectDrawSurface2_IsLost(p)                    (p)->IsLost()
#define IDirectDrawSurface2_Lock(p,a,b,c,d)              (p)->Lock(a,b,c,d)
#define IDirectDrawSurface2_ReleaseDC(p,a)               (p)->ReleaseDC(a)
#define IDirectDrawSurface2_Restore(p)                   (p)->Restore()
#define IDirectDrawSurface2_SetClipper(p,a)              (p)->SetClipper(a)
#define IDirectDrawSurface2_SetColorKey(p,a,b)           (p)->SetColorKey(a,b)
#define IDirectDrawSurface2_SetOverlayPosition(p,a,b)    (p)->SetOverlayPosition(a,b)
#define IDirectDrawSurface2_SetPalette(p,a)              (p)->SetPalette(a)
#define IDirectDrawSurface2_Unlock(p,b)                  (p)->Unlock(b)
#define IDirectDrawSurface2_UpdateOverlay(p,a,b,c,d,e)   (p)->UpdateOverlay(a,b,c,d,e)
#define IDirectDrawSurface2_UpdateOverlayDisplay(p,a)    (p)->UpdateOverlayDisplay(a)
#define IDirectDrawSurface2_UpdateOverlayZOrder(p,a,b)   (p)->UpdateOverlayZOrder(a,b)
#define IDirectDrawSurface2_GetDDInterface(p,a)          (p)->GetDDInterface(a)
#define IDirectDrawSurface2_PageLock(p,a)                (p)->PageLock(a)
#define IDirectDrawSurface2_PageUnlock(p,a)              (p)->PageUnlock(a)
#endif

/*
 * IDirectDrawSurface3 and related interfaces
 */
#undef INTERFACE
#define INTERFACE IDirectDrawSurface3
DECLARE_INTERFACE_( IDirectDrawSurface3, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE3) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE3, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE3, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE3) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE3, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE3 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE3,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE3) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    /*** Added in the V3 interface ***/
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC, DWORD) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawSurface3_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirectDrawSurface3_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawSurface3_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawSurface3_AddAttachedSurface(p,a)      (p)->lpVtbl->AddAttachedSurface(p,a)
#define IDirectDrawSurface3_AddOverlayDirtyRect(p,a)     (p)->lpVtbl->AddOverlayDirtyRect(p,a)
#define IDirectDrawSurface3_Blt(p,a,b,c,d,e)             (p)->lpVtbl->Blt(p,a,b,c,d,e)
#define IDirectDrawSurface3_BltBatch(p,a,b,c)            (p)->lpVtbl->BltBatch(p,a,b,c)
#define IDirectDrawSurface3_BltFast(p,a,b,c,d,e)         (p)->lpVtbl->BltFast(p,a,b,c,d,e)
#define IDirectDrawSurface3_DeleteAttachedSurface(p,a,b) (p)->lpVtbl->DeleteAttachedSurface(p,a,b)
#define IDirectDrawSurface3_EnumAttachedSurfaces(p,a,b)  (p)->lpVtbl->EnumAttachedSurfaces(p,a,b)
#define IDirectDrawSurface3_EnumOverlayZOrders(p,a,b,c)  (p)->lpVtbl->EnumOverlayZOrders(p,a,b,c)
#define IDirectDrawSurface3_Flip(p,a,b)                  (p)->lpVtbl->Flip(p,a,b)
#define IDirectDrawSurface3_GetAttachedSurface(p,a,b)    (p)->lpVtbl->GetAttachedSurface(p,a,b)
#define IDirectDrawSurface3_GetBltStatus(p,a)            (p)->lpVtbl->GetBltStatus(p,a)
#define IDirectDrawSurface3_GetCaps(p,b)                 (p)->lpVtbl->GetCaps(p,b)
#define IDirectDrawSurface3_GetClipper(p,a)              (p)->lpVtbl->GetClipper(p,a)
#define IDirectDrawSurface3_GetColorKey(p,a,b)           (p)->lpVtbl->GetColorKey(p,a,b)
#define IDirectDrawSurface3_GetDC(p,a)                   (p)->lpVtbl->GetDC(p,a)
#define IDirectDrawSurface3_GetFlipStatus(p,a)           (p)->lpVtbl->GetFlipStatus(p,a)
#define IDirectDrawSurface3_GetOverlayPosition(p,a,b)    (p)->lpVtbl->GetOverlayPosition(p,a,b)
#define IDirectDrawSurface3_GetPalette(p,a)              (p)->lpVtbl->GetPalette(p,a)
#define IDirectDrawSurface3_GetPixelFormat(p,a)          (p)->lpVtbl->GetPixelFormat(p,a)
#define IDirectDrawSurface3_GetSurfaceDesc(p,a)          (p)->lpVtbl->GetSurfaceDesc(p,a)
#define IDirectDrawSurface3_Initialize(p,a,b)            (p)->lpVtbl->Initialize(p,a,b)
#define IDirectDrawSurface3_IsLost(p)                    (p)->lpVtbl->IsLost(p)
#define IDirectDrawSurface3_Lock(p,a,b,c,d)              (p)->lpVtbl->Lock(p,a,b,c,d)
#define IDirectDrawSurface3_ReleaseDC(p,a)               (p)->lpVtbl->ReleaseDC(p,a)
#define IDirectDrawSurface3_Restore(p)                   (p)->lpVtbl->Restore(p)
#define IDirectDrawSurface3_SetClipper(p,a)              (p)->lpVtbl->SetClipper(p,a)
#define IDirectDrawSurface3_SetColorKey(p,a,b)           (p)->lpVtbl->SetColorKey(p,a,b)
#define IDirectDrawSurface3_SetOverlayPosition(p,a,b)    (p)->lpVtbl->SetOverlayPosition(p,a,b)
#define IDirectDrawSurface3_SetPalette(p,a)              (p)->lpVtbl->SetPalette(p,a)
#define IDirectDrawSurface3_Unlock(p,b)                  (p)->lpVtbl->Unlock(p,b)
#define IDirectDrawSurface3_UpdateOverlay(p,a,b,c,d,e)   (p)->lpVtbl->UpdateOverlay(p,a,b,c,d,e)
#define IDirectDrawSurface3_UpdateOverlayDisplay(p,a)    (p)->lpVtbl->UpdateOverlayDisplay(p,a)
#define IDirectDrawSurface3_UpdateOverlayZOrder(p,a,b)   (p)->lpVtbl->UpdateOverlayZOrder(p,a,b)
#define IDirectDrawSurface3_GetDDInterface(p,a)          (p)->lpVtbl->GetDDInterface(p,a)
#define IDirectDrawSurface3_PageLock(p,a)                (p)->lpVtbl->PageLock(p,a)
#define IDirectDrawSurface3_PageUnlock(p,a)              (p)->lpVtbl->PageUnlock(p,a)
#define IDirectDrawSurface3_SetSurfaceDesc(p,a,b)        (p)->lpVtbl->SetSurfaceDesc(p,a,b)
#else
#define IDirectDrawSurface3_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IDirectDrawSurface3_AddRef(p)                    (p)->AddRef()
#define IDirectDrawSurface3_Release(p)                   (p)->Release()
#define IDirectDrawSurface3_AddAttachedSurface(p,a)      (p)->AddAttachedSurface(a)
#define IDirectDrawSurface3_AddOverlayDirtyRect(p,a)     (p)->AddOverlayDirtyRect(a)
#define IDirectDrawSurface3_Blt(p,a,b,c,d,e)             (p)->Blt(a,b,c,d,e)
#define IDirectDrawSurface3_BltBatch(p,a,b,c)            (p)->BltBatch(a,b,c)
#define IDirectDrawSurface3_BltFast(p,a,b,c,d,e)         (p)->BltFast(a,b,c,d,e)
#define IDirectDrawSurface3_DeleteAttachedSurface(p,a,b) (p)->DeleteAttachedSurface(a,b)
#define IDirectDrawSurface3_EnumAttachedSurfaces(p,a,b)  (p)->EnumAttachedSurfaces(a,b)
#define IDirectDrawSurface3_EnumOverlayZOrders(p,a,b,c)  (p)->EnumOverlayZOrders(a,b,c)
#define IDirectDrawSurface3_Flip(p,a,b)                  (p)->Flip(a,b)
#define IDirectDrawSurface3_GetAttachedSurface(p,a,b)    (p)->GetAttachedSurface(a,b)
#define IDirectDrawSurface3_GetBltStatus(p,a)            (p)->GetBltStatus(a)
#define IDirectDrawSurface3_GetCaps(p,b)                 (p)->GetCaps(b)
#define IDirectDrawSurface3_GetClipper(p,a)              (p)->GetClipper(a)
#define IDirectDrawSurface3_GetColorKey(p,a,b)           (p)->GetColorKey(a,b)
#define IDirectDrawSurface3_GetDC(p,a)                   (p)->GetDC(a)
#define IDirectDrawSurface3_GetFlipStatus(p,a)           (p)->GetFlipStatus(a)
#define IDirectDrawSurface3_GetOverlayPosition(p,a,b)    (p)->GetOverlayPosition(a,b)
#define IDirectDrawSurface3_GetPalette(p,a)              (p)->GetPalette(a)
#define IDirectDrawSurface3_GetPixelFormat(p,a)          (p)->GetPixelFormat(a)
#define IDirectDrawSurface3_GetSurfaceDesc(p,a)          (p)->GetSurfaceDesc(a)
#define IDirectDrawSurface3_Initialize(p,a,b)            (p)->Initialize(a,b)
#define IDirectDrawSurface3_IsLost(p)                    (p)->IsLost()
#define IDirectDrawSurface3_Lock(p,a,b,c,d)              (p)->Lock(a,b,c,d)
#define IDirectDrawSurface3_ReleaseDC(p,a)               (p)->ReleaseDC(a)
#define IDirectDrawSurface3_Restore(p)                   (p)->Restore()
#define IDirectDrawSurface3_SetClipper(p,a)              (p)->SetClipper(a)
#define IDirectDrawSurface3_SetColorKey(p,a,b)           (p)->SetColorKey(a,b)
#define IDirectDrawSurface3_SetOverlayPosition(p,a,b)    (p)->SetOverlayPosition(a,b)
#define IDirectDrawSurface3_SetPalette(p,a)              (p)->SetPalette(a)
#define IDirectDrawSurface3_Unlock(p,b)                  (p)->Unlock(b)
#define IDirectDrawSurface3_UpdateOverlay(p,a,b,c,d,e)   (p)->UpdateOverlay(a,b,c,d,e)
#define IDirectDrawSurface3_UpdateOverlayDisplay(p,a)    (p)->UpdateOverlayDisplay(a)
#define IDirectDrawSurface3_UpdateOverlayZOrder(p,a,b)   (p)->UpdateOverlayZOrder(a,b)
#define IDirectDrawSurface3_GetDDInterface(p,a)          (p)->GetDDInterface(a)
#define IDirectDrawSurface3_PageLock(p,a)                (p)->PageLock(a)
#define IDirectDrawSurface3_PageUnlock(p,a)              (p)->PageUnlock(a)
#define IDirectDrawSurface3_SetSurfaceDesc(p,a,b)        (p)->SetSurfaceDesc(a,b)
#endif

/*
 * IDirectDrawSurface4 and related interfaces
 */
#undef INTERFACE
#define INTERFACE IDirectDrawSurface4
DECLARE_INTERFACE_( IDirectDrawSurface4, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE4, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE4, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK2) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK2) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE4, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2, LPDIRECTDRAWSURFACE4 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC2) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE4,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE4) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    /*** Added in the v3 interface ***/
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC2, DWORD) PURE;
    /*** Added in the v4 interface ***/
    STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
    STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
    STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawSurface4_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirectDrawSurface4_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawSurface4_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawSurface4_AddAttachedSurface(p,a)      (p)->lpVtbl->AddAttachedSurface(p,a)
#define IDirectDrawSurface4_AddOverlayDirtyRect(p,a)     (p)->lpVtbl->AddOverlayDirtyRect(p,a)
#define IDirectDrawSurface4_Blt(p,a,b,c,d,e)             (p)->lpVtbl->Blt(p,a,b,c,d,e)
#define IDirectDrawSurface4_BltBatch(p,a,b,c)            (p)->lpVtbl->BltBatch(p,a,b,c)
#define IDirectDrawSurface4_BltFast(p,a,b,c,d,e)         (p)->lpVtbl->BltFast(p,a,b,c,d,e)
#define IDirectDrawSurface4_DeleteAttachedSurface(p,a,b) (p)->lpVtbl->DeleteAttachedSurface(p,a,b)
#define IDirectDrawSurface4_EnumAttachedSurfaces(p,a,b)  (p)->lpVtbl->EnumAttachedSurfaces(p,a,b)
#define IDirectDrawSurface4_EnumOverlayZOrders(p,a,b,c)  (p)->lpVtbl->EnumOverlayZOrders(p,a,b,c)
#define IDirectDrawSurface4_Flip(p,a,b)                  (p)->lpVtbl->Flip(p,a,b)
#define IDirectDrawSurface4_GetAttachedSurface(p,a,b)    (p)->lpVtbl->GetAttachedSurface(p,a,b)
#define IDirectDrawSurface4_GetBltStatus(p,a)            (p)->lpVtbl->GetBltStatus(p,a)
#define IDirectDrawSurface4_GetCaps(p,b)                 (p)->lpVtbl->GetCaps(p,b)
#define IDirectDrawSurface4_GetClipper(p,a)              (p)->lpVtbl->GetClipper(p,a)
#define IDirectDrawSurface4_GetColorKey(p,a,b)           (p)->lpVtbl->GetColorKey(p,a,b)
#define IDirectDrawSurface4_GetDC(p,a)                   (p)->lpVtbl->GetDC(p,a)
#define IDirectDrawSurface4_GetFlipStatus(p,a)           (p)->lpVtbl->GetFlipStatus(p,a)
#define IDirectDrawSurface4_GetOverlayPosition(p,a,b)    (p)->lpVtbl->GetOverlayPosition(p,a,b)
#define IDirectDrawSurface4_GetPalette(p,a)              (p)->lpVtbl->GetPalette(p,a)
#define IDirectDrawSurface4_GetPixelFormat(p,a)          (p)->lpVtbl->GetPixelFormat(p,a)
#define IDirectDrawSurface4_GetSurfaceDesc(p,a)          (p)->lpVtbl->GetSurfaceDesc(p,a)
#define IDirectDrawSurface4_Initialize(p,a,b)            (p)->lpVtbl->Initialize(p,a,b)
#define IDirectDrawSurface4_IsLost(p)                    (p)->lpVtbl->IsLost(p)
#define IDirectDrawSurface4_Lock(p,a,b,c,d)              (p)->lpVtbl->Lock(p,a,b,c,d)
#define IDirectDrawSurface4_ReleaseDC(p,a)               (p)->lpVtbl->ReleaseDC(p,a)
#define IDirectDrawSurface4_Restore(p)                   (p)->lpVtbl->Restore(p)
#define IDirectDrawSurface4_SetClipper(p,a)              (p)->lpVtbl->SetClipper(p,a)
#define IDirectDrawSurface4_SetColorKey(p,a,b)           (p)->lpVtbl->SetColorKey(p,a,b)
#define IDirectDrawSurface4_SetOverlayPosition(p,a,b)    (p)->lpVtbl->SetOverlayPosition(p,a,b)
#define IDirectDrawSurface4_SetPalette(p,a)              (p)->lpVtbl->SetPalette(p,a)
#define IDirectDrawSurface4_Unlock(p,b)                  (p)->lpVtbl->Unlock(p,b)
#define IDirectDrawSurface4_UpdateOverlay(p,a,b,c,d,e)   (p)->lpVtbl->UpdateOverlay(p,a,b,c,d,e)
#define IDirectDrawSurface4_UpdateOverlayDisplay(p,a)    (p)->lpVtbl->UpdateOverlayDisplay(p,a)
#define IDirectDrawSurface4_UpdateOverlayZOrder(p,a,b)   (p)->lpVtbl->UpdateOverlayZOrder(p,a,b)
#define IDirectDrawSurface4_GetDDInterface(p,a)          (p)->lpVtbl->GetDDInterface(p,a)
#define IDirectDrawSurface4_PageLock(p,a)                (p)->lpVtbl->PageLock(p,a)
#define IDirectDrawSurface4_PageUnlock(p,a)              (p)->lpVtbl->PageUnlock(p,a)
#define IDirectDrawSurface4_SetSurfaceDesc(p,a,b)        (p)->lpVtbl->SetSurfaceDesc(p,a,b)
#define IDirectDrawSurface4_SetPrivateData(p,a,b,c,d)    (p)->lpVtbl->SetPrivateData(p,a,b,c,d)
#define IDirectDrawSurface4_GetPrivateData(p,a,b,c)      (p)->lpVtbl->GetPrivateData(p,a,b,c)
#define IDirectDrawSurface4_FreePrivateData(p,a)         (p)->lpVtbl->FreePrivateData(p,a)
#define IDirectDrawSurface4_GetUniquenessValue(p, a)     (p)->lpVtbl->GetUniquenessValue(p, a)
#define IDirectDrawSurface4_ChangeUniquenessValue(p)     (p)->lpVtbl->ChangeUniquenessValue(p)
#else
#define IDirectDrawSurface4_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IDirectDrawSurface4_AddRef(p)                    (p)->AddRef()
#define IDirectDrawSurface4_Release(p)                   (p)->Release()
#define IDirectDrawSurface4_AddAttachedSurface(p,a)      (p)->AddAttachedSurface(a)
#define IDirectDrawSurface4_AddOverlayDirtyRect(p,a)     (p)->AddOverlayDirtyRect(a)
#define IDirectDrawSurface4_Blt(p,a,b,c,d,e)             (p)->Blt(a,b,c,d,e)
#define IDirectDrawSurface4_BltBatch(p,a,b,c)            (p)->BltBatch(a,b,c)
#define IDirectDrawSurface4_BltFast(p,a,b,c,d,e)         (p)->BltFast(a,b,c,d,e)
#define IDirectDrawSurface4_DeleteAttachedSurface(p,a,b) (p)->DeleteAttachedSurface(a,b)
#define IDirectDrawSurface4_EnumAttachedSurfaces(p,a,b)  (p)->EnumAttachedSurfaces(a,b)
#define IDirectDrawSurface4_EnumOverlayZOrders(p,a,b,c)  (p)->EnumOverlayZOrders(a,b,c)
#define IDirectDrawSurface4_Flip(p,a,b)                  (p)->Flip(a,b)
#define IDirectDrawSurface4_GetAttachedSurface(p,a,b)    (p)->GetAttachedSurface(a,b)
#define IDirectDrawSurface4_GetBltStatus(p,a)            (p)->GetBltStatus(a)
#define IDirectDrawSurface4_GetCaps(p,b)                 (p)->GetCaps(b)
#define IDirectDrawSurface4_GetClipper(p,a)              (p)->GetClipper(a)
#define IDirectDrawSurface4_GetColorKey(p,a,b)           (p)->GetColorKey(a,b)
#define IDirectDrawSurface4_GetDC(p,a)                   (p)->GetDC(a)
#define IDirectDrawSurface4_GetFlipStatus(p,a)           (p)->GetFlipStatus(a)
#define IDirectDrawSurface4_GetOverlayPosition(p,a,b)    (p)->GetOverlayPosition(a,b)
#define IDirectDrawSurface4_GetPalette(p,a)              (p)->GetPalette(a)
#define IDirectDrawSurface4_GetPixelFormat(p,a)          (p)->GetPixelFormat(a)
#define IDirectDrawSurface4_GetSurfaceDesc(p,a)          (p)->GetSurfaceDesc(a)
#define IDirectDrawSurface4_Initialize(p,a,b)            (p)->Initialize(a,b)
#define IDirectDrawSurface4_IsLost(p)                    (p)->IsLost()
#define IDirectDrawSurface4_Lock(p,a,b,c,d)              (p)->Lock(a,b,c,d)
#define IDirectDrawSurface4_ReleaseDC(p,a)               (p)->ReleaseDC(a)
#define IDirectDrawSurface4_Restore(p)                   (p)->Restore()
#define IDirectDrawSurface4_SetClipper(p,a)              (p)->SetClipper(a)
#define IDirectDrawSurface4_SetColorKey(p,a,b)           (p)->SetColorKey(a,b)
#define IDirectDrawSurface4_SetOverlayPosition(p,a,b)    (p)->SetOverlayPosition(a,b)
#define IDirectDrawSurface4_SetPalette(p,a)              (p)->SetPalette(a)
#define IDirectDrawSurface4_Unlock(p,b)                  (p)->Unlock(b)
#define IDirectDrawSurface4_UpdateOverlay(p,a,b,c,d,e)   (p)->UpdateOverlay(a,b,c,d,e)
#define IDirectDrawSurface4_UpdateOverlayDisplay(p,a)    (p)->UpdateOverlayDisplay(a)
#define IDirectDrawSurface4_UpdateOverlayZOrder(p,a,b)   (p)->UpdateOverlayZOrder(a,b)
#define IDirectDrawSurface4_GetDDInterface(p,a)          (p)->GetDDInterface(a)
#define IDirectDrawSurface4_PageLock(p,a)                (p)->PageLock(a)
#define IDirectDrawSurface4_PageUnlock(p,a)              (p)->PageUnlock(a)
#define IDirectDrawSurface4_SetSurfaceDesc(p,a,b)        (p)->SetSurfaceDesc(a,b)
#define IDirectDrawSurface4_SetPrivateData(p,a,b,c,d)    (p)->SetPrivateData(a,b,c,d)
#define IDirectDrawSurface4_GetPrivateData(p,a,b,c)      (p)->GetPrivateData(a,b,c)
#define IDirectDrawSurface4_FreePrivateData(p,a)         (p)->FreePrivateData(a)
#define IDirectDrawSurface4_GetUniquenessValue(p, a)     (p)->GetUniquenessValue(a)
#define IDirectDrawSurface4_ChangeUniquenessValue(p)     (p)->ChangeUniquenessValue()
#endif

/*
 * IDirectDrawSurface7 and related interfaces
 */
#undef INTERFACE
#define INTERFACE IDirectDrawSurface7
DECLARE_INTERFACE_( IDirectDrawSurface7, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE7, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE7, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK7) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK7) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE7, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2, LPDIRECTDRAWSURFACE7 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC2) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE7,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE7) PURE;
    /*** Added in the v2 interface ***/
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    /*** Added in the v3 interface ***/
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC2, DWORD) PURE;
    /*** Added in the v4 interface ***/
    STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
    STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
    STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2
    STDMETHOD(AlphaBlt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE7,LPRECT,DWORD,LPDDALPHABLTFX) PURE;
    STDMETHOD(SetSpriteDisplayList)(THIS_ LPDDSPRITE *,DWORD,DWORD,LPDIRECTDRAWSURFACE7,DWORD) PURE;
    STDMETHOD(Resize)(THIS_ DWORD,DWORD,DWORD) PURE;
#endif //POSTPONED2
//@@END_MSINTERNAL
    /*** Moved Texture7 methods here ***/
    STDMETHOD(SetPriority)(THIS_ DWORD) PURE;
    STDMETHOD(GetPriority)(THIS_ LPDWORD) PURE;
    STDMETHOD(SetLOD)(THIS_ DWORD) PURE;
    STDMETHOD(GetLOD)(THIS_ LPDWORD) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawSurface7_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirectDrawSurface7_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IDirectDrawSurface7_Release(p)                   (p)->lpVtbl->Release(p)
#define IDirectDrawSurface7_AddAttachedSurface(p,a)      (p)->lpVtbl->AddAttachedSurface(p,a)
#define IDirectDrawSurface7_AddOverlayDirtyRect(p,a)     (p)->lpVtbl->AddOverlayDirtyRect(p,a)
#define IDirectDrawSurface7_Blt(p,a,b,c,d,e)             (p)->lpVtbl->Blt(p,a,b,c,d,e)
#define IDirectDrawSurface7_BltBatch(p,a,b,c)            (p)->lpVtbl->BltBatch(p,a,b,c)
#define IDirectDrawSurface7_BltFast(p,a,b,c,d,e)         (p)->lpVtbl->BltFast(p,a,b,c,d,e)
#define IDirectDrawSurface7_DeleteAttachedSurface(p,a,b) (p)->lpVtbl->DeleteAttachedSurface(p,a,b)
#define IDirectDrawSurface7_EnumAttachedSurfaces(p,a,b)  (p)->lpVtbl->EnumAttachedSurfaces(p,a,b)
#define IDirectDrawSurface7_EnumOverlayZOrders(p,a,b,c)  (p)->lpVtbl->EnumOverlayZOrders(p,a,b,c)
#define IDirectDrawSurface7_Flip(p,a,b)                  (p)->lpVtbl->Flip(p,a,b)
#define IDirectDrawSurface7_GetAttachedSurface(p,a,b)    (p)->lpVtbl->GetAttachedSurface(p,a,b)
#define IDirectDrawSurface7_GetBltStatus(p,a)            (p)->lpVtbl->GetBltStatus(p,a)
#define IDirectDrawSurface7_GetCaps(p,b)                 (p)->lpVtbl->GetCaps(p,b)
#define IDirectDrawSurface7_GetClipper(p,a)              (p)->lpVtbl->GetClipper(p,a)
#define IDirectDrawSurface7_GetColorKey(p,a,b)           (p)->lpVtbl->GetColorKey(p,a,b)
#define IDirectDrawSurface7_GetDC(p,a)                   (p)->lpVtbl->GetDC(p,a)
#define IDirectDrawSurface7_GetFlipStatus(p,a)           (p)->lpVtbl->GetFlipStatus(p,a)
#define IDirectDrawSurface7_GetOverlayPosition(p,a,b)    (p)->lpVtbl->GetOverlayPosition(p,a,b)
#define IDirectDrawSurface7_GetPalette(p,a)              (p)->lpVtbl->GetPalette(p,a)
#define IDirectDrawSurface7_GetPixelFormat(p,a)          (p)->lpVtbl->GetPixelFormat(p,a)
#define IDirectDrawSurface7_GetSurfaceDesc(p,a)          (p)->lpVtbl->GetSurfaceDesc(p,a)
#define IDirectDrawSurface7_Initialize(p,a,b)            (p)->lpVtbl->Initialize(p,a,b)
#define IDirectDrawSurface7_IsLost(p)                    (p)->lpVtbl->IsLost(p)
#define IDirectDrawSurface7_Lock(p,a,b,c,d)              (p)->lpVtbl->Lock(p,a,b,c,d)
#define IDirectDrawSurface7_ReleaseDC(p,a)               (p)->lpVtbl->ReleaseDC(p,a)
#define IDirectDrawSurface7_Restore(p)                   (p)->lpVtbl->Restore(p)
#define IDirectDrawSurface7_SetClipper(p,a)              (p)->lpVtbl->SetClipper(p,a)
#define IDirectDrawSurface7_SetColorKey(p,a,b)           (p)->lpVtbl->SetColorKey(p,a,b)
#define IDirectDrawSurface7_SetOverlayPosition(p,a,b)    (p)->lpVtbl->SetOverlayPosition(p,a,b)
#define IDirectDrawSurface7_SetPalette(p,a)              (p)->lpVtbl->SetPalette(p,a)
#define IDirectDrawSurface7_Unlock(p,b)                  (p)->lpVtbl->Unlock(p,b)
#define IDirectDrawSurface7_UpdateOverlay(p,a,b,c,d,e)   (p)->lpVtbl->UpdateOverlay(p,a,b,c,d,e)
#define IDirectDrawSurface7_UpdateOverlayDisplay(p,a)    (p)->lpVtbl->UpdateOverlayDisplay(p,a)
#define IDirectDrawSurface7_UpdateOverlayZOrder(p,a,b)   (p)->lpVtbl->UpdateOverlayZOrder(p,a,b)
#define IDirectDrawSurface7_GetDDInterface(p,a)          (p)->lpVtbl->GetDDInterface(p,a)
#define IDirectDrawSurface7_PageLock(p,a)                (p)->lpVtbl->PageLock(p,a)
#define IDirectDrawSurface7_PageUnlock(p,a)              (p)->lpVtbl->PageUnlock(p,a)
#define IDirectDrawSurface7_SetSurfaceDesc(p,a,b)        (p)->lpVtbl->SetSurfaceDesc(p,a,b)
#define IDirectDrawSurface7_SetPrivateData(p,a,b,c,d)    (p)->lpVtbl->SetPrivateData(p,a,b,c,d)
#define IDirectDrawSurface7_GetPrivateData(p,a,b,c)      (p)->lpVtbl->GetPrivateData(p,a,b,c)
#define IDirectDrawSurface7_FreePrivateData(p,a)         (p)->lpVtbl->FreePrivateData(p,a)
#define IDirectDrawSurface7_GetUniquenessValue(p, a)     (p)->lpVtbl->GetUniquenessValue(p, a)
#define IDirectDrawSurface7_ChangeUniquenessValue(p)     (p)->lpVtbl->ChangeUniquenessValue(p)
//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2
#define IDirectDrawSurface7_AlphaBlt(p,a,b,c,d,e)        (p)->lpVtbl->AlphaBlt(p,a,b,c,d,e)
#define IDirectDrawSurface7_SetSpriteDisplayList(p,a,b,c,d,e)  (p)->lpVtbl->SetSpriteDisplayList(p,a,b,c,d,e)
#define IDirectDrawSurface7_Resize(p,a,b,c)              (p)->lpVtbl->Resize(p,a,b,c)
#endif //POSTPONED2
//@@END_MSINTERNAL
#define IDirectDrawSurface7_SetPriority(p,a)             (p)->lpVtbl->SetPriority(p,a)
#define IDirectDrawSurface7_GetPriority(p,a)             (p)->lpVtbl->GetPriority(p,a)
#define IDirectDrawSurface7_SetLOD(p,a)                  (p)->lpVtbl->SetLOD(p,a)
#define IDirectDrawSurface7_GetLOD(p,a)                  (p)->lpVtbl->GetLOD(p,a)
#else
#define IDirectDrawSurface7_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IDirectDrawSurface7_AddRef(p)                    (p)->AddRef()
#define IDirectDrawSurface7_Release(p)                   (p)->Release()
#define IDirectDrawSurface7_AddAttachedSurface(p,a)      (p)->AddAttachedSurface(a)
#define IDirectDrawSurface7_AddOverlayDirtyRect(p,a)     (p)->AddOverlayDirtyRect(a)
#define IDirectDrawSurface7_Blt(p,a,b,c,d,e)             (p)->Blt(a,b,c,d,e)
#define IDirectDrawSurface7_BltBatch(p,a,b,c)            (p)->BltBatch(a,b,c)
#define IDirectDrawSurface7_BltFast(p,a,b,c,d,e)         (p)->BltFast(a,b,c,d,e)
#define IDirectDrawSurface7_DeleteAttachedSurface(p,a,b) (p)->DeleteAttachedSurface(a,b)
#define IDirectDrawSurface7_EnumAttachedSurfaces(p,a,b)  (p)->EnumAttachedSurfaces(a,b)
#define IDirectDrawSurface7_EnumOverlayZOrders(p,a,b,c)  (p)->EnumOverlayZOrders(a,b,c)
#define IDirectDrawSurface7_Flip(p,a,b)                  (p)->Flip(a,b)
#define IDirectDrawSurface7_GetAttachedSurface(p,a,b)    (p)->GetAttachedSurface(a,b)
#define IDirectDrawSurface7_GetBltStatus(p,a)            (p)->GetBltStatus(a)
#define IDirectDrawSurface7_GetCaps(p,b)                 (p)->GetCaps(b)
#define IDirectDrawSurface7_GetClipper(p,a)              (p)->GetClipper(a)
#define IDirectDrawSurface7_GetColorKey(p,a,b)           (p)->GetColorKey(a,b)
#define IDirectDrawSurface7_GetDC(p,a)                   (p)->GetDC(a)
#define IDirectDrawSurface7_GetFlipStatus(p,a)           (p)->GetFlipStatus(a)
#define IDirectDrawSurface7_GetOverlayPosition(p,a,b)    (p)->GetOverlayPosition(a,b)
#define IDirectDrawSurface7_GetPalette(p,a)              (p)->GetPalette(a)
#define IDirectDrawSurface7_GetPixelFormat(p,a)          (p)->GetPixelFormat(a)
#define IDirectDrawSurface7_GetSurfaceDesc(p,a)          (p)->GetSurfaceDesc(a)
#define IDirectDrawSurface7_Initialize(p,a,b)            (p)->Initialize(a,b)
#define IDirectDrawSurface7_IsLost(p)                    (p)->IsLost()
#define IDirectDrawSurface7_Lock(p,a,b,c,d)              (p)->Lock(a,b,c,d)
#define IDirectDrawSurface7_ReleaseDC(p,a)               (p)->ReleaseDC(a)
#define IDirectDrawSurface7_Restore(p)                   (p)->Restore()
#define IDirectDrawSurface7_SetClipper(p,a)              (p)->SetClipper(a)
#define IDirectDrawSurface7_SetColorKey(p,a,b)           (p)->SetColorKey(a,b)
#define IDirectDrawSurface7_SetOverlayPosition(p,a,b)    (p)->SetOverlayPosition(a,b)
#define IDirectDrawSurface7_SetPalette(p,a)              (p)->SetPalette(a)
#define IDirectDrawSurface7_Unlock(p,b)                  (p)->Unlock(b)
#define IDirectDrawSurface7_UpdateOverlay(p,a,b,c,d,e)   (p)->UpdateOverlay(a,b,c,d,e)
#define IDirectDrawSurface7_UpdateOverlayDisplay(p,a)    (p)->UpdateOverlayDisplay(a)
#define IDirectDrawSurface7_UpdateOverlayZOrder(p,a,b)   (p)->UpdateOverlayZOrder(a,b)
#define IDirectDrawSurface7_GetDDInterface(p,a)          (p)->GetDDInterface(a)
#define IDirectDrawSurface7_PageLock(p,a)                (p)->PageLock(a)
#define IDirectDrawSurface7_PageUnlock(p,a)              (p)->PageUnlock(a)
#define IDirectDrawSurface7_SetSurfaceDesc(p,a,b)        (p)->SetSurfaceDesc(a,b)
#define IDirectDrawSurface7_SetPrivateData(p,a,b,c,d)    (p)->SetPrivateData(a,b,c,d)
#define IDirectDrawSurface7_GetPrivateData(p,a,b,c)      (p)->GetPrivateData(a,b,c)
#define IDirectDrawSurface7_FreePrivateData(p,a)         (p)->FreePrivateData(a)
#define IDirectDrawSurface7_GetUniquenessValue(p, a)     (p)->GetUniquenessValue(a)
#define IDirectDrawSurface7_ChangeUniquenessValue(p)     (p)->ChangeUniquenessValue()
//@@BEGIN_MSINTERNAL
#ifdef POSTPONED2
#define IDirectDrawSurface7_AlphaBlt(p,a,b,c,d,e)        (p)->AlphaBlt(a,b,c,d,e)
#define IDirectDrawSurface7_SetSpriteDisplayList(p,a,b,c,d,e)  (p)->SetSpriteDisplayList(a,b,c,d,e)
#define IDirectDrawSurface7_Resize(p,a,b,c)              (p)->Resize(a,b,c)
#endif //POSTPONED2
//@@END_MSINTERNAL
#define IDirectDrawSurface7_SetPriority(p,a)             (p)->SetPriority(a)
#define IDirectDrawSurface7_GetPriority(p,a)             (p)->GetPriority(a)
#define IDirectDrawSurface7_SetLOD(p,a)                  (p)->SetLOD(a)
#define IDirectDrawSurface7_GetLOD(p,a)                  (p)->GetLOD(a)
#endif

//@@BEGIN_MSINTERNAL
/*
 * IDirectDrawOptSurface
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawOptSurface
DECLARE_INTERFACE_( IDirectDrawOptSurface, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawOptSurface methods ***/
    STDMETHOD(GetOptSurfaceDesc)(THIS_ LPDDOPTSURFACEDESC) PURE;
    STDMETHOD(LoadUnoptimizedSurf)(THIS_ LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(CopyOptimizedSurf)(THIS_ LPDIRECTDRAWOPTSURFACE) PURE;
    STDMETHOD(Unoptimize)(THIS_ LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4, IUnknown FAR *) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawOptSurface_QueryInterface(p, a, b)  (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawOptSurface_AddRef(p)                (p)->lpVtbl->AddRef(p)
#define IDirectDrawOptSurface_Release(p)               (p)->lpVtbl->Release(p)
#define IDirectDrawOptSurface_GetOptSurfaceDesc(p,a)   (p)->lpVtbl->GetOptSurfaceDesc(p,a)
#define IDirectDrawOptSurface_LoadUnoptimizedSurf(p,a) (p)->lpVtbl->LoadUnoptimizedSurf(p,a)
#define IDirectDrawOptSurface_CopyOptimizedSurf(p,a)   (p)->lpVtbl->CopyOptimizedSurf(p,a)
#define IDirectDrawOptSurface_Unoptimize(p,a,b)        (p)->lpVtbl->Unoptimize(p,a,b)
#else  //!defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawOptSurface_QueryInterface(p, a, b)  (p)->QueryInterface(a, b)
#define IDirectDrawOptSurface_AddRef(p)                (p)->AddRef()
#define IDirectDrawOptSurface_Release(p)               (p)->Release()
#define IDirectDrawOptSurface_GetOptSurfaceDesc(p,a)   (p)->GetOptSurfaceDesc(a)
#define IDirectDrawOptSurface_LoadUnoptimizedSurf(p,a) (p)->LoadUnoptimizedSurf(a)
#define IDirectDrawOptSurface_CopyOptimizedSurf(p,a)   (p)->CopyOptimizedSurf(p,a)
#define IDirectDrawOptSurface_Unoptimize(p,a,b)        (p)->Unoptimize(a,b)
#endif //!defined(__cplusplus) || defined(CINTERFACE)

#endif //defined( _WIN32 ) && !defined( _NO_COM )
//@@END_MSINTERNAL


/*
 * IDirectDrawColorControl
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawColorControl
DECLARE_INTERFACE_( IDirectDrawColorControl, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawColorControl methods ***/
    STDMETHOD(GetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
    STDMETHOD(SetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawColorControl_QueryInterface(p, a, b)  (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawColorControl_AddRef(p)                (p)->lpVtbl->AddRef(p)
#define IDirectDrawColorControl_Release(p)               (p)->lpVtbl->Release(p)
#define IDirectDrawColorControl_GetColorControls(p, a)   (p)->lpVtbl->GetColorControls(p, a)
#define IDirectDrawColorControl_SetColorControls(p, a)   (p)->lpVtbl->SetColorControls(p, a)
#else
#define IDirectDrawColorControl_QueryInterface(p, a, b)  (p)->QueryInterface(a, b)
#define IDirectDrawColorControl_AddRef(p)                (p)->AddRef()
#define IDirectDrawColorControl_Release(p)               (p)->Release()
#define IDirectDrawColorControl_GetColorControls(p, a)   (p)->GetColorControls(a)
#define IDirectDrawColorControl_SetColorControls(p, a)   (p)->SetColorControls(a)
#endif

#endif


/*
 * IDirectDrawGammaControl
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawGammaControl
DECLARE_INTERFACE_( IDirectDrawGammaControl, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawGammaControl methods ***/
    STDMETHOD(GetGammaRamp)(THIS_ DWORD, LPDDGAMMARAMP) PURE;
    STDMETHOD(SetGammaRamp)(THIS_ DWORD, LPDDGAMMARAMP) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirectDrawGammaControl_QueryInterface(p, a, b)  (p)->lpVtbl->QueryInterface(p, a, b)
#define IDirectDrawGammaControl_AddRef(p)                (p)->lpVtbl->AddRef(p)
#define IDirectDrawGammaControl_Release(p)               (p)->lpVtbl->Release(p)
#define IDirectDrawGammaControl_GetGammaRamp(p, a, b)    (p)->lpVtbl->GetGammaRamp(p, a, b)
#define IDirectDrawGammaControl_SetGammaRamp(p, a, b)    (p)->lpVtbl->SetGammaRamp(p, a, b)
#else
#define IDirectDrawGammaControl_QueryInterface(p, a, b)  (p)->QueryInterface(a, b)
#define IDirectDrawGammaControl_AddRef(p)                (p)->AddRef()
#define IDirectDrawGammaControl_Release(p)               (p)->Release()
#define IDirectDrawGammaControl_GetGammaRamp(p, a, b)    (p)->GetGammaRamp(a, b)
#define IDirectDrawGammaControl_SetGammaRamp(p, a, b)    (p)->SetGammaRamp(a, b)
#endif

#endif


//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
#undef INTERFACE
#define INTERFACE IDirectDrawSurfaceComposition
DECLARE_INTERFACE_( IDirectDrawSurfaceComposition, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurfaceComposition methods ***/
    STDMETHOD(AddSurfaceDependency)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(Compose)(THIS_ LPRECT,LPDIRECTDRAWSURFACE,LPRECT,DWORD,LPDDCOMPOSEFX) PURE;
    STDMETHOD(DeleteSurfaceDependency)(THIS_ DWORD,LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(DestLock)(THIS) PURE;
    STDMETHOD(DestUnlock)(THIS) PURE;
    STDMETHOD(EnumSurfaceDependencies)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(GetCompositionOrder)(THIS_ LPDWORD) PURE;
    STDMETHOD(SetCompositionOrder)(THIS_ DWORD) PURE;
};
#endif

#ifdef STREAMING
#undef INTERFACE
#define INTERFACE IDirectDrawSurfaceStreaming
DECLARE_INTERFACE_( IDirectDrawSurfaceStreaming, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurfaceStreaming methods ***/
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(SetNotificationCallback)(THIS_ DWORD,LPSURFACESTREAMINGCALLBACK) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
};
#endif
//@@END_MSINTERNAL

#endif

//@@BEGIN_MSINTERNAL
#ifdef CLIPPER_NOTIFY
/*
 * DIRECTDRAWCLIPPER FLAGS
 */
#define DDCLIPPER_WATCHWINDOW   0x00000001l
#endif
//@@END_MSINTERNAL

/*
 * DDSURFACEDESC
 */
typedef struct _DDSURFACEDESC
{
    DWORD               dwSize;                 // size of the DDSURFACEDESC structure
    DWORD               dwFlags;                // determines what fields are valid
    DWORD               dwHeight;               // height of surface to be created
    DWORD               dwWidth;                // width of input surface
    union
    {
        LONG            lPitch;                 // distance to start of next line (return value only)
        DWORD           dwLinearSize;           // Formless late-allocated optimized surface size
    } DUMMYUNIONNAMEN(1);
    DWORD               dwBackBufferCount;      // number of back buffers requested
    union
    {
        DWORD           dwMipMapCount;          // number of mip-map levels requested
        DWORD           dwZBufferBitDepth;      // depth of Z buffer requested
        DWORD           dwRefreshRate;          // refresh rate (used when display mode is described)
    } DUMMYUNIONNAMEN(2);
    DWORD               dwAlphaBitDepth;        // depth of alpha buffer requested
//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
    DWORD               dwCompositionOrder;     // blt order for the surface, 0 is background
#else
//@@END_MSINTERNAL
    DWORD               dwReserved;             // reserved
//@@BEGIN_MSINTERNAL
#endif
//@@END_MSINTERNAL
    LPVOID              lpSurface;              // pointer to the associated surface memory
    DDCOLORKEY          ddckCKDestOverlay;      // color key for destination overlay use
    DDCOLORKEY          ddckCKDestBlt;          // color key for destination blt use
    DDCOLORKEY          ddckCKSrcOverlay;       // color key for source overlay use
    DDCOLORKEY          ddckCKSrcBlt;           // color key for source blt use
    DDPIXELFORMAT       ddpfPixelFormat;        // pixel format description of the surface
    DDSCAPS             ddsCaps;                // direct draw surface capabilities
} DDSURFACEDESC;

/*
 * DDSURFACEDESC2
 */
typedef struct _DDSURFACEDESC2
{
    DWORD               dwSize;                 // size of the DDSURFACEDESC structure
    DWORD               dwFlags;                // determines what fields are valid
    DWORD               dwHeight;               // height of surface to be created
    DWORD               dwWidth;                // width of input surface
    union
    {
        LONG            lPitch;                 // distance to start of next line (return value only)
        DWORD           dwLinearSize;           // Formless late-allocated optimized surface size
    } DUMMYUNIONNAMEN(1);
    union
    {
        DWORD           dwBackBufferCount;      // number of back buffers requested
        DWORD           dwDepth;                // the depth if this is a volume texture 
    } DUMMYUNIONNAMEN(5);
    union
    {
        DWORD           dwMipMapCount;          // number of mip-map levels requestde
                                                // dwZBufferBitDepth removed, use ddpfPixelFormat one instead
        DWORD           dwRefreshRate;          // refresh rate (used when display mode is described)
        DWORD           dwSrcVBHandle;          // The source used in VB::Optimize
    } DUMMYUNIONNAMEN(2);
    DWORD               dwAlphaBitDepth;        // depth of alpha buffer requested
//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
    DWORD               dwCompositionOrder;     // blt order for the surface, 0 is background
#else
//@@END_MSINTERNAL
    DWORD               dwReserved;             // reserved
//@@BEGIN_MSINTERNAL
#endif
//@@END_MSINTERNAL
    LPVOID              lpSurface;              // pointer to the associated surface memory
    union
    {
        DDCOLORKEY      ddckCKDestOverlay;      // color key for destination overlay use
        DWORD           dwEmptyFaceColor;       // Physical color for empty cubemap faces
    } DUMMYUNIONNAMEN(3);
    DDCOLORKEY          ddckCKDestBlt;          // color key for destination blt use
    DDCOLORKEY          ddckCKSrcOverlay;       // color key for source overlay use
    DDCOLORKEY          ddckCKSrcBlt;           // color key for source blt use
    union
    {
        DDPIXELFORMAT   ddpfPixelFormat;        // pixel format description of the surface
        DWORD           dwFVF;                  // vertex format description of vertex buffers
    } DUMMYUNIONNAMEN(4);
    DDSCAPS2            ddsCaps;                // direct draw surface capabilities
    DWORD               dwTextureStage;         // stage in multitexture cascade
} DDSURFACEDESC2;

/*
 * ddsCaps field is valid.
 */
#define DDSD_CAPS               0x00000001l     // default

/*
 * dwHeight field is valid.
 */
#define DDSD_HEIGHT             0x00000002l

/*
 * dwWidth field is valid.
 */
#define DDSD_WIDTH              0x00000004l

/*
 * lPitch is valid.
 */
#define DDSD_PITCH              0x00000008l

/*
 * dwBackBufferCount is valid.
 */
#define DDSD_BACKBUFFERCOUNT    0x00000020l

/*
 * dwZBufferBitDepth is valid.  (shouldnt be used in DDSURFACEDESC2)
 */
#define DDSD_ZBUFFERBITDEPTH    0x00000040l

/*
 * dwAlphaBitDepth is valid.
 */
#define DDSD_ALPHABITDEPTH      0x00000080l

//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
/*
 * dwCompositionOrder is valid.
 */
#define DDSD_COMPOSITIONORDER   0x00000100l
#endif
//@@END_MSINTERNAL

/*
 * lpSurface is valid.
 */
#define DDSD_LPSURFACE          0x00000800l

/*
 * ddpfPixelFormat is valid.
 */
#define DDSD_PIXELFORMAT        0x00001000l

/*
 * ddckCKDestOverlay is valid.
 */
#define DDSD_CKDESTOVERLAY      0x00002000l

/*
 * ddckCKDestBlt is valid.
 */
#define DDSD_CKDESTBLT          0x00004000l

/*
 * ddckCKSrcOverlay is valid.
 */
#define DDSD_CKSRCOVERLAY       0x00008000l

/*
 * ddckCKSrcBlt is valid.
 */
#define DDSD_CKSRCBLT           0x00010000l

/*
 * dwMipMapCount is valid.
 */
#define DDSD_MIPMAPCOUNT        0x00020000l

 /*
  * dwRefreshRate is valid
  */
#define DDSD_REFRESHRATE        0x00040000l

/*
 * dwLinearSize is valid
 */
#define DDSD_LINEARSIZE         0x00080000l

/*
 * dwTextureStage is valid
 */
#define DDSD_TEXTURESTAGE       0x00100000l
/*
 * dwFVF is valid
 */
#define DDSD_FVF                0x00200000l
/*
 * dwSrcVBHandle is valid
 */
#define DDSD_SRCVBHANDLE        0x00400000l

/*
 * dwDepth is valid
 */
#define DDSD_DEPTH              0x00800000l

/*
 * All input fields are valid.
 */
#define DDSD_ALL                0x00fff9eel

/*
 * DDOPTSURFACEDESC
 */
typedef struct _DDOPTSURFACEDESC
{
    DWORD       dwSize;             // size of the DDOPTSURFACEDESC structure
    DWORD       dwFlags;            // determines what fields are valid
    DDSCAPS2    ddSCaps;            // Common caps like: Memory type
    DDOSCAPS    ddOSCaps;           // Common caps like: Memory type
    GUID        guid;               // Compression technique GUID
    DWORD       dwCompressionRatio; // Compression ratio
} DDOPTSURFACEDESC;

/*
 * guid field is valid.
 */
#define DDOSD_GUID                  0x00000001l

/*
 * dwCompressionRatio field is valid.
 */
#define DDOSD_COMPRESSION_RATIO     0x00000002l

/*
 * ddSCaps field is valid.
 */
#define DDOSD_SCAPS                 0x00000004l

/*
 * ddOSCaps field is valid.
 */
#define DDOSD_OSCAPS                0x00000008l

/*
 * All input fields are valid.
 */
#define DDOSD_ALL                   0x0000000fl

/*
 * The surface's optimized pixelformat is compressed
 */
#define DDOSDCAPS_OPTCOMPRESSED                 0x00000001l

/*
 * The surface's optimized pixelformat is reordered
 */
#define DDOSDCAPS_OPTREORDERED                  0x00000002l

/*
 * The opt surface is a monolithic mipmap
 */
#define DDOSDCAPS_MONOLITHICMIPMAP              0x00000004l

/*
 * The valid Surf caps:
 * #define DDSCAPS_SYSTEMMEMORY                 0x00000800l
 * #define DDSCAPS_VIDEOMEMORY          0x00004000l
 * #define DDSCAPS_LOCALVIDMEM          0x10000000l
 * #define DDSCAPS_NONLOCALVIDMEM       0x20000000l
 */
#define DDOSDCAPS_VALIDSCAPS            0x30004800l

/*
 * The valid OptSurf caps
 */
#define DDOSDCAPS_VALIDOSCAPS           0x00000007l


/*
 * DDCOLORCONTROL
 */
typedef struct _DDCOLORCONTROL
{
    DWORD               dwSize;
    DWORD               dwFlags;
    LONG                lBrightness;
    LONG                lContrast;
    LONG                lHue;
    LONG                lSaturation;
    LONG                lSharpness;
    LONG                lGamma;
    LONG                lColorEnable;
    DWORD               dwReserved1;
} DDCOLORCONTROL;


/*
 * lBrightness field is valid.
 */
#define DDCOLOR_BRIGHTNESS              0x00000001l

/*
 * lContrast field is valid.
 */
#define DDCOLOR_CONTRAST                0x00000002l

/*
 * lHue field is valid.
 */
#define DDCOLOR_HUE                     0x00000004l

/*
 * lSaturation field is valid.
 */
#define DDCOLOR_SATURATION              0x00000008l

/*
 * lSharpness field is valid.
 */
#define DDCOLOR_SHARPNESS               0x00000010l

/*
 * lGamma field is valid.
 */
#define DDCOLOR_GAMMA                   0x00000020l

/*
 * lColorEnable field is valid.
 */
#define DDCOLOR_COLORENABLE             0x00000040l


//@@BEGIN_MSINTERNAL
/*
 * DDMODEDESC
 */
typedef struct _DDMODEDESC
{
    DWORD               dwSize;                 // size of structure
    DWORD               dwFlags;                // enumeration flags
    DWORD               dwMonitorFrequency;     // frequency of monitor in mode
    DDSURFACEDESC       ddsdSurfaceDesc;        // surface being enumerated
} DDMODEDESC;

typedef DDMODEDESC FAR* LPDDMODEDESC;
//@@END_MSINTERNAL

/*============================================================================
 *
 * Direct Draw Capability Flags
 *
 * These flags are used to describe the capabilities of a given Surface.
 * All flags are bit flags.
 *
 *==========================================================================*/

/****************************************************************************
 *
 * DIRECTDRAWSURFACE CAPABILITY FLAGS
 *
 ****************************************************************************/

/*
 * This bit is reserved. It should not be specified.
 */
//@@BEGIN_MSINTERNAL
/*
 * In a previous life this bit used to be DDSCAPS_3D. This is now very
 * obsolete.
 */
//@@END_MSINTERNAL
#define DDSCAPS_RESERVED1                       0x00000001l

/*
 * Indicates that this surface contains alpha-only information.
 * (To determine if a surface is RGBA/YUVA, the pixel format must be
 * interrogated.)
 */
#define DDSCAPS_ALPHA                           0x00000002l

/*
 * Indicates that this surface is a backbuffer.  It is generally
 * set by CreateSurface when the DDSCAPS_FLIP capability bit is set.
 * It indicates that this surface is THE back buffer of a surface
 * flipping structure.  DirectDraw supports N surfaces in a
 * surface flipping structure.  Only the surface that immediately
 * precedeces the DDSCAPS_FRONTBUFFER has this capability bit set.
 * The other surfaces are identified as back buffers by the presence
 * of the DDSCAPS_FLIP capability, their attachment order, and the
 * absence of the DDSCAPS_FRONTBUFFER and DDSCAPS_BACKBUFFER
 * capabilities.  The bit is sent to CreateSurface when a standalone
 * back buffer is being created.  This surface could be attached to
 * a front buffer and/or back buffers to form a flipping surface
 * structure after the CreateSurface call.  See AddAttachments for
 * a detailed description of the behaviors in this case.
 */
#define DDSCAPS_BACKBUFFER                      0x00000004l

/*
 * Indicates a complex surface structure is being described.  A
 * complex surface structure results in the creation of more than
 * one surface.  The additional surfaces are attached to the root
 * surface.  The complex structure can only be destroyed by
 * destroying the root.
 */
#define DDSCAPS_COMPLEX                         0x00000008l

/*
 * Indicates that this surface is a part of a surface flipping structure.
 * When it is passed to CreateSurface the DDSCAPS_FRONTBUFFER and
 * DDSCAP_BACKBUFFER bits are not set.  They are set by CreateSurface
 * on the resulting creations.  The dwBackBufferCount field in the
 * DDSURFACEDESC structure must be set to at least 1 in order for
 * the CreateSurface call to succeed.  The DDSCAPS_COMPLEX capability
 * must always be set with creating multiple surfaces through CreateSurface.
 */
#define DDSCAPS_FLIP                            0x00000010l

/*
 * Indicates that this surface is THE front buffer of a surface flipping
 * structure.  It is generally set by CreateSurface when the DDSCAPS_FLIP
 * capability bit is set.
 * If this capability is sent to CreateSurface then a standalonw front buffer
 * is created.  This surface will not have the DDSCAPS_FLIP capability.
 * It can be attached to other back buffers to form a flipping structure.
 * See AddAttachments for a detailed description of the behaviors in this
 * case.
 */
#define DDSCAPS_FRONTBUFFER                     0x00000020l

/*
 * Indicates that this surface is any offscreen surface that is not an overlay,
 * texture, zbuffer, front buffer, back buffer, or alpha surface.  It is used
 * to identify plain vanilla surfaces.
 */
#define DDSCAPS_OFFSCREENPLAIN                  0x00000040l

/*
 * Indicates that this surface is an overlay.  It may or may not be directly visible
 * depending on whether or not it is currently being overlayed onto the primary
 * surface.  DDSCAPS_VISIBLE can be used to determine whether or not it is being
 * overlayed at the moment.
 */
#define DDSCAPS_OVERLAY                         0x00000080l

/*
 * Indicates that unique DirectDrawPalette objects can be created and
 * attached to this surface.
 */
#define DDSCAPS_PALETTE                         0x00000100l

/*
 * Indicates that this surface is the primary surface.  The primary
 * surface represents what the user is seeing at the moment.
 */
#define DDSCAPS_PRIMARYSURFACE                  0x00000200l

//@@BEGIN_MSINTERNAL
/*
 * Indicates that this surface is the primary surface for the left eye.
 * The primary surface for the left eye represents what the user is seeing
 * at the moment with the users left eye.  When this surface is created the
 * DDSCAPS_PRIMARYSURFACE represents what the user is seeing with the users
 * right eye.
 */
#define DDSCAPS_PRIMARYSURFACELEFT              0x00000400l
//the zero-def'n is just to fix build issues... could be deleted when all dependencies are deleted (gdi kdexts may be only one)
//@@END_MSINTERNAL

/*
 * This flag used to be DDSCAPS_PRIMARYSURFACELEFT, which is now
 * obsolete.
 */
#define DDSCAPS_RESERVED3               0x00000400l
//@@BEGIN_MSINTERNAL
#if 0
//@@END_MSINTERNAL
#define DDSCAPS_PRIMARYSURFACELEFT              0x00000000l
//@@BEGIN_MSINTERNAL
#endif
//@@END_MSINTERNAL

/*
 * Indicates that this surface memory was allocated in system memory
 */
#define DDSCAPS_SYSTEMMEMORY                    0x00000800l

/*
 * Indicates that this surface can be used as a 3D texture.  It does not
 * indicate whether or not the surface is being used for that purpose.
 */
#define DDSCAPS_TEXTURE                         0x00001000l

/*
 * Indicates that a surface may be a destination for 3D rendering.  This
 * bit must be set in order to query for a Direct3D Device Interface
 * from this surface.
 */
#define DDSCAPS_3DDEVICE                        0x00002000l

/*
 * Indicates that this surface exists in video memory.
 */
#define DDSCAPS_VIDEOMEMORY                     0x00004000l

/*
 * Indicates that changes made to this surface are immediately visible.
 * It is always set for the primary surface and is set for overlays while
 * they are being overlayed and texture maps while they are being textured.
 */
#define DDSCAPS_VISIBLE                         0x00008000l

/*
 * Indicates that only writes are permitted to the surface.  Read accesses
 * from the surface may or may not generate a protection fault, but the
 * results of a read from this surface will not be meaningful.  READ ONLY.
 */
#define DDSCAPS_WRITEONLY                       0x00010000l

/*
 * Indicates that this surface is a z buffer. A z buffer does not contain
 * displayable information.  Instead it contains bit depth information that is
 * used to determine which pixels are visible and which are obscured.
 */
#define DDSCAPS_ZBUFFER                         0x00020000l

/*
 * Indicates surface will have a DC associated long term
 */
#define DDSCAPS_OWNDC                           0x00040000l

/*
 * Indicates surface should be able to receive live video
 */
#define DDSCAPS_LIVEVIDEO                       0x00080000l

/*
 * Indicates surface should be able to have a stream decompressed
 * to it by the hardware.
 */
#define DDSCAPS_HWCODEC                         0x00100000l

/*
 * Surface is a ModeX surface.
 *
 */
#define DDSCAPS_MODEX                           0x00200000l

/*
 * Indicates surface is one level of a mip-map. This surface will
 * be attached to other DDSCAPS_MIPMAP surfaces to form the mip-map.
 * This can be done explicitly, by creating a number of surfaces and
 * attaching them with AddAttachedSurface or by implicitly by CreateSurface.
 * If this bit is set then DDSCAPS_TEXTURE must also be set.
 */
#define DDSCAPS_MIPMAP                          0x00400000l

/*
 * This bit is reserved. It should not be specified.
 */
//@@BEGIN_MSINTERNAL
/*
 * This bit is reserved for execute buffer surfaces. These surface are not
 * API visible and so this bit shows as reserved externally. However, driver
 * writers do need this bit so the correct definition of DDSCAPS_EXECUTEBUFFER
 * appears in ddraw.h.
 *
 * NOTE: Do not reassign this bit to a new surface capability. It is assigned
 * to an in-use cap: DDSCAPS_EXECUTEBUFFER
 */
//@@END_MSINTERNAL
#define DDSCAPS_RESERVED2                       0x00800000l

//@@BEGIN_MSINTERNAL
#ifdef SHAREDZ

/*
 * Indicates that this Z buffer surface can be shared with other DirectDraw
 * applications. This does not necessarily mean that this surface is
 * currently being shared with other processes but only that it can be. If
 * this bit is set then DDSCAPS_ZBUFFER must also be set.
 */
#define DDSCAPS_SHAREDZBUFFER                   0x01000000l

/*
 * Indicates that this backbuffer surface can be shared with other DirectDraw
 * applications. This does not necessarily mean that this surface is
 * currently being shared with other processes but only that it can be. If
 * this bit is set than DDSCAPS_BACKBUFFER must also be set (it may also be
 * set if a backbuffer is being created implicitly with as past of a complex
 * flippable chain).
 */
#define DDSCAPS_SHAREDBACKBUFFER                0x02000000l

#endif
//@@END_MSINTERNAL

/*
 * Indicates that memory for the surface is not allocated until the surface
 * is loaded (via the Direct3D texture Load() function).
 */
#define DDSCAPS_ALLOCONLOAD                     0x04000000l

/*
 * Indicates that the surface will recieve data from a video port.
 */
#define DDSCAPS_VIDEOPORT                       0x08000000l

/*
 * Indicates that a video memory surface is resident in true, local video
 * memory rather than non-local video memory. If this flag is specified then
 * so must DDSCAPS_VIDEOMEMORY. This flag is mutually exclusive with
 * DDSCAPS_NONLOCALVIDMEM.
 */
#define DDSCAPS_LOCALVIDMEM                     0x10000000l

/*
 * Indicates that a video memory surface is resident in non-local video
 * memory rather than true, local video memory. If this flag is specified
 * then so must DDSCAPS_VIDEOMEMORY. This flag is mutually exclusive with
 * DDSCAPS_LOCALVIDMEM.
 */
#define DDSCAPS_NONLOCALVIDMEM                  0x20000000l

/*
 * Indicates that this surface is a standard VGA mode surface, and not a
 * ModeX surface. (This flag will never be set in combination with the
 * DDSCAPS_MODEX flag).
 */
#define DDSCAPS_STANDARDVGAMODE                 0x40000000l

/*
 * Indicates that this surface will be an optimized surface. This flag is
 * currently only valid in conjunction with the DDSCAPS_TEXTURE flag. The surface
 * will be created without any underlying video memory until loaded.
 */
#define DDSCAPS_OPTIMIZED                       0x80000000l


//@@BEGIN_MSINTERNAL
#ifdef SHAREDZ
#define DDSCAPS_VALID                           0xffffffffl
#else
#define DDSCAPS_VALID                           0xfcffffffl
#endif
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
/*
 * Indicates that this surface will not lose its contents when the physical
 * surface memory is lost. Upon restoring surface memory, contents will be
 * restored.
 */
#define DDSCAPS2_PERSISTENTCONTENTS             0x00000001L
//@@END_MSINTERNAL

/*
 * This bit is reserved
 */
#define DDSCAPS2_RESERVED4                      0x00000002L
#define DDSCAPS2_HARDWAREDEINTERLACE            0x00000000L

/*
 * Indicates to the driver that this surface will be locked very frequently
 * (for procedural textures, dynamic lightmaps, etc). Surfaces with this cap
 * set must also have DDSCAPS_TEXTURE. This cap cannot be used with
 * DDSCAPS2_HINTSTATIC and DDSCAPS2_OPAQUE.
 */
#define DDSCAPS2_HINTDYNAMIC                    0x00000004L

/*
 * Indicates to the driver that this surface can be re-ordered/retiled on
 * load. This operation will not change the size of the texture. It is
 * relatively fast and symmetrical, since the application may lock these
 * bits (although it will take a performance hit when doing so). Surfaces
 * with this cap set must also have DDSCAPS_TEXTURE. This cap cannot be
 * used with DDSCAPS2_HINTDYNAMIC and DDSCAPS2_OPAQUE.
 */
#define DDSCAPS2_HINTSTATIC                     0x00000008L

/*
 * Indicates that the client would like this texture surface to be managed by the
 * DirectDraw/Direct3D runtime. Surfaces with this cap set must also have
 * DDSCAPS_TEXTURE set.
 */
#define DDSCAPS2_TEXTUREMANAGE                  0x00000010L

/*
 * These bits are reserved for internal use */
#define DDSCAPS2_RESERVED1                      0x00000020L
#define DDSCAPS2_RESERVED2                      0x00000040L

/*
 * Indicates to the driver that this surface will never be locked again.
 * The driver is free to optimize this surface via retiling and actual compression.
 * All calls to Lock() or Blts from this surface will fail. Surfaces with this
 * cap set must also have DDSCAPS_TEXTURE. This cap cannot be used with
 * DDSCAPS2_HINTDYNAMIC and DDSCAPS2_HINTSTATIC.
 */
#define DDSCAPS2_OPAQUE                         0x00000080L

/*
 * Applications should set this bit at CreateSurface time to indicate that they
 * intend to use antialiasing. Only valid if DDSCAPS_3DDEVICE is also set.
 */
#define DDSCAPS2_HINTANTIALIASING               0x00000100L


/*
 * This flag is used at CreateSurface time to indicate that this set of
 * surfaces is a cubic environment map
 */
#define DDSCAPS2_CUBEMAP                        0x00000200L

/*
 * These flags preform two functions:
 * - At CreateSurface time, they define which of the six cube faces are
 *   required by the application.
 * - After creation, each face in the cubemap will have exactly one of these
 *   bits set.
 */
#define DDSCAPS2_CUBEMAP_POSITIVEX              0x00000400L
#define DDSCAPS2_CUBEMAP_NEGATIVEX              0x00000800L
#define DDSCAPS2_CUBEMAP_POSITIVEY              0x00001000L
#define DDSCAPS2_CUBEMAP_NEGATIVEY              0x00002000L
#define DDSCAPS2_CUBEMAP_POSITIVEZ              0x00004000L
#define DDSCAPS2_CUBEMAP_NEGATIVEZ              0x00008000L

/*
 * This macro may be used to specify all faces of a cube map at CreateSurface time
 */
#define DDSCAPS2_CUBEMAP_ALLFACES ( DDSCAPS2_CUBEMAP_POSITIVEX |\
                                    DDSCAPS2_CUBEMAP_NEGATIVEX |\
                                    DDSCAPS2_CUBEMAP_POSITIVEY |\
                                    DDSCAPS2_CUBEMAP_NEGATIVEY |\
                                    DDSCAPS2_CUBEMAP_POSITIVEZ |\
                                    DDSCAPS2_CUBEMAP_NEGATIVEZ )


/*
 * This flag is an additional flag which is present on mipmap sublevels from DX7 onwards
 * It enables easier use of GetAttachedSurface rather than EnumAttachedSurfaces for surface
 * constructs such as Cube Maps, wherein there are more than one mipmap surface attached
 * to the root surface.
 * This caps bit is ignored by CreateSurface
 */
#define DDSCAPS2_MIPMAPSUBLEVEL                 0x00010000L

/* This flag indicates that the texture should be managed by D3D only */
#define DDSCAPS2_D3DTEXTUREMANAGE               0x00020000L

/* This flag indicates that the managed surface can be safely lost */
#define DDSCAPS2_DONOTPERSIST                   0x00040000L

/* indicates that this surface is part of a stereo flipping chain */
#define DDSCAPS2_STEREOSURFACELEFT              0x00080000L

//@@BEGIN_MSINTERNAL
/* Used to indicate that the texture manager is creating a videomemory
 * surface that shouldn't have an associated D3D texture object.
 */
#define DDSCAPS2_DONOTCREATED3DTEXOBJECT        0x00100000L
//@@END_MSINTERNAL

/*
 * Indicates that the surface is a volume.
 * Can be combined with DDSCAPS_MIPMAP to indicate a multi-level volume
 */
#define DDSCAPS2_VOLUME                         0x00200000L

/*
 * Indicates that the surface may be locked multiple times by the application.
 * This cap cannot be used with DDSCAPS2_OPAQUE.
 */
#define DDSCAPS2_NOTUSERLOCKABLE                0x00400000L

/*
 * Indicates that the vertex buffer data can be used to render points and
 * point sprites.
 */
#define DDSCAPS2_POINTS                         0x00800000L

/*
 * Indicates that the vertex buffer data can be used to render rt pactches.
 */
#define DDSCAPS2_RTPATCHES                      0x01000000L

/*
 * Indicates that the vertex buffer data can be used to render n patches.
 */
#define DDSCAPS2_NPATCHES                       0x02000000L

/*
 * This bit is reserved for internal use 
 */
#define DDSCAPS2_RESERVED3                      0x04000000L

//@@BEGIN_MSINTERNAL
/*
 * Indicates that the surface contains interlaced data that should be
 * deinterlaced when displayed.
 */
#define DDSCAPS2_DEINTERLACE                    0x08000000L
//@@END_MSINTERNAL

/*
 * Indicates that the contents of the backbuffer do not have to be preserved
 * the contents of the backbuffer after they are presented.
 */
#define DDSCAPS2_DISCARDBACKBUFFER              0x10000000L

/*
 * This is a mask that indicates the set of bits that may be set
 * at createsurface time to indicate number of samples per pixel
 * when multisampling
 */
#define DDSCAPS3_MULTISAMPLE_MASK               0x0000001FL

//@@BEGIN_MSINTERNAL
#define DDSCAPS2_VALID                          0x1ffffffeL
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#define DDSCAPS3_VALID                          DDSCAPS3_MULTISAMPLE_MASK
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#define DDSCAPS4_VALID                          0x00000000L
//@@END_MSINTERNAL

 /****************************************************************************
 *
 * DIRECTDRAW DRIVER CAPABILITY FLAGS
 *
 ****************************************************************************/

/*
 * Display hardware has 3D acceleration.
 */
#define DDCAPS_3D                       0x00000001l

/*
 * Indicates that DirectDraw will support only dest rectangles that are aligned
 * on DIRECTDRAWCAPS.dwAlignBoundaryDest boundaries of the surface, respectively.
 * READ ONLY.
 */
#define DDCAPS_ALIGNBOUNDARYDEST        0x00000002l

/*
 * Indicates that DirectDraw will support only source rectangles  whose sizes in
 * BYTEs are DIRECTDRAWCAPS.dwAlignSizeDest multiples, respectively.  READ ONLY.
 */
#define DDCAPS_ALIGNSIZEDEST            0x00000004l
/*
 * Indicates that DirectDraw will support only source rectangles that are aligned
 * on DIRECTDRAWCAPS.dwAlignBoundarySrc boundaries of the surface, respectively.
 * READ ONLY.
 */
#define DDCAPS_ALIGNBOUNDARYSRC         0x00000008l

/*
 * Indicates that DirectDraw will support only source rectangles  whose sizes in
 * BYTEs are DIRECTDRAWCAPS.dwAlignSizeSrc multiples, respectively.  READ ONLY.
 */
#define DDCAPS_ALIGNSIZESRC             0x00000010l

/*
 * Indicates that DirectDraw will create video memory surfaces that have a stride
 * alignment equal to DIRECTDRAWCAPS.dwAlignStride.  READ ONLY.
 */
#define DDCAPS_ALIGNSTRIDE              0x00000020l

/*
 * Display hardware is capable of blt operations.
 */
#define DDCAPS_BLT                      0x00000040l

/*
 * Display hardware is capable of asynchronous blt operations.
 */
#define DDCAPS_BLTQUEUE                 0x00000080l

/*
 * Display hardware is capable of color space conversions during the blt operation.
 */
#define DDCAPS_BLTFOURCC                0x00000100l

/*
 * Display hardware is capable of stretching during blt operations.
 */
#define DDCAPS_BLTSTRETCH               0x00000200l

/*
 * Display hardware is shared with GDI.
 */
#define DDCAPS_GDI                      0x00000400l

/*
 * Display hardware can overlay.
 */
#define DDCAPS_OVERLAY                  0x00000800l

/*
 * Set if display hardware supports overlays but can not clip them.
 */
#define DDCAPS_OVERLAYCANTCLIP          0x00001000l

/*
 * Indicates that overlay hardware is capable of color space conversions during
 * the overlay operation.
 */
#define DDCAPS_OVERLAYFOURCC            0x00002000l

/*
 * Indicates that stretching can be done by the overlay hardware.
 */
#define DDCAPS_OVERLAYSTRETCH           0x00004000l

/*
 * Indicates that unique DirectDrawPalettes can be created for DirectDrawSurfaces
 * other than the primary surface.
 */
#define DDCAPS_PALETTE                  0x00008000l

/*
 * Indicates that palette changes can be syncd with the veritcal refresh.
 */
#define DDCAPS_PALETTEVSYNC             0x00010000l

/*
 * Display hardware can return the current scan line.
 */
#define DDCAPS_READSCANLINE             0x00020000l

//@@BEGIN_MSINTERNAL
/*
 * Display hardware has stereo vision capabilities.  DDSCAPS_PRIMARYSURFACELEFT
 * can be created.
 */
#define DDCAPS_STEREOVIEW               0x00040000l
//@@END_MSINTERNAL

/*
 * This flag used to bo DDCAPS_STEREOVIEW, which is now obsolete
 */
#define DDCAPS_RESERVED1                0x00040000l

/*
 * Display hardware is capable of generating a vertical blank interrupt.
 */
#define DDCAPS_VBI                      0x00080000l

/*
 * Supports the use of z buffers with blt operations.
 */
#define DDCAPS_ZBLTS                    0x00100000l

/*
 * Supports Z Ordering of overlays.
 */
#define DDCAPS_ZOVERLAYS                0x00200000l

/*
 * Supports color key
 */
#define DDCAPS_COLORKEY                 0x00400000l

/*
 * Supports alpha surfaces
 */
#define DDCAPS_ALPHA                    0x00800000l

/*
 * colorkey is hardware assisted(DDCAPS_COLORKEY will also be set)
 */
#define DDCAPS_COLORKEYHWASSIST         0x01000000l

/*
 * no hardware support at all
 */
#define DDCAPS_NOHARDWARE               0x02000000l

/*
 * Display hardware is capable of color fill with bltter
 */
#define DDCAPS_BLTCOLORFILL             0x04000000l

/*
 * Display hardware is bank switched, and potentially very slow at
 * random access to VRAM.
 */
#define DDCAPS_BANKSWITCHED             0x08000000l

/*
 * Display hardware is capable of depth filling Z-buffers with bltter
 */
#define DDCAPS_BLTDEPTHFILL             0x10000000l

/*
 * Display hardware is capable of clipping while bltting.
 */
#define DDCAPS_CANCLIP                  0x20000000l

/*
 * Display hardware is capable of clipping while stretch bltting.
 */
#define DDCAPS_CANCLIPSTRETCHED         0x40000000l

/*
 * Display hardware is capable of bltting to or from system memory
 */
#define DDCAPS_CANBLTSYSMEM             0x80000000l


 /****************************************************************************
 *
 * MORE DIRECTDRAW DRIVER CAPABILITY FLAGS (dwCaps2)
 *
 ****************************************************************************/

/*
 * Display hardware is certified
 */
#define DDCAPS2_CERTIFIED              0x00000001l

/*
 * Driver cannot interleave 2D operations (lock and blt) to surfaces with
 * Direct3D rendering operations between calls to BeginScene() and EndScene()
 */
#define DDCAPS2_NO2DDURING3DSCENE       0x00000002l

/*
 * Display hardware contains a video port
 */
#define DDCAPS2_VIDEOPORT               0x00000004l

/*
 * The overlay can be automatically flipped according to the video port
 * VSYNCs, providing automatic doubled buffered display of video port
 * data using an overlay
 */
#define DDCAPS2_AUTOFLIPOVERLAY         0x00000008l

/*
 * Overlay can display each field of interlaced data individually while
 * it is interleaved in memory without causing jittery artifacts.
 */
#define DDCAPS2_CANBOBINTERLEAVED       0x00000010l

/*
 * Overlay can display each field of interlaced data individually while
 * it is not interleaved in memory without causing jittery artifacts.
 */
#define DDCAPS2_CANBOBNONINTERLEAVED    0x00000020l

/*
 * The overlay surface contains color controls (brightness, sharpness, etc.)
 */
#define DDCAPS2_COLORCONTROLOVERLAY     0x00000040l

/*
 * The primary surface contains color controls (gamma, etc.)
 */
#define DDCAPS2_COLORCONTROLPRIMARY     0x00000080l

/*
 * RGBZ -> RGB supported for 16:16 RGB:Z
 */
#define DDCAPS2_CANDROPZ16BIT           0x00000100l

/*
 * Driver supports non-local video memory.
 */
#define DDCAPS2_NONLOCALVIDMEM          0x00000200l

/*
 * Dirver supports non-local video memory but has different capabilities for
 * non-local video memory surfaces. If this bit is set then so must
 * DDCAPS2_NONLOCALVIDMEM.
 */
#define DDCAPS2_NONLOCALVIDMEMCAPS      0x00000400l

/*
 * Driver neither requires nor prefers surfaces to be pagelocked when performing
 * blts involving system memory surfaces
 */
#define DDCAPS2_NOPAGELOCKREQUIRED      0x00000800l

/*
 * Driver can create surfaces which are wider than the primary surface
 */
#define DDCAPS2_WIDESURFACES            0x00001000l

/*
 * Driver supports bob without using a video port by handling the
 * DDFLIP_ODD and DDFLIP_EVEN flags specified in Flip.
 */
#define DDCAPS2_CANFLIPODDEVEN          0x00002000l

/*
 * Driver supports bob using hardware
 */
#define DDCAPS2_CANBOBHARDWARE          0x00004000l

/*
 * Driver supports bltting any FOURCC surface to another surface of the same FOURCC
 */
#define DDCAPS2_COPYFOURCC              0x00008000l

//@@BEGIN_MSINTERNAL
/*
 * Driver supports optimized surfaces
 */
#define DDCAPS2_OPTIMIZEDSURFACES       0x00010000l
//@@END_MSINTERNAL

/*
 * Driver supports loadable gamma ramps for the primary surface
 */
#define DDCAPS2_PRIMARYGAMMA            0x00020000l
//@@BEGIN_MSINTERNAL
/*
 * This cap was meant to be used for driver managed textures, but they were broken
 * in DX 6.x. The cap was reintroduced in DX7 as 0x00800000l. However, 0x00040000l
 * cannot be reassigned to anything else since it causes bad things to happen in
 * the D3D 6.x runtime (snene 11/12/98).
 */
#define DDCAPS2_NEVERNEVERUSE           0x00040000l
//@@END_MSINTERNAL

/*
 * Driver can render in windowed mode.
 */
#define DDCAPS2_CANRENDERWINDOWED       0x00080000l

/*
 * A calibrator is available to adjust the gamma ramp according to the
 * physical display properties so that the result will be identical on
 * all calibrated systems.
 */
#define DDCAPS2_CANCALIBRATEGAMMA       0x00100000l

/*
 * Indicates that the driver will respond to DDFLIP_INTERVALn flags
 */
#define DDCAPS2_FLIPINTERVAL            0x00200000l

/*
 * Indicates that the driver will respond to DDFLIP_NOVSYNC
 */
#define DDCAPS2_FLIPNOVSYNC             0x00400000l

/*
 * Driver supports management of video memory, if this flag is ON,
 * driver manages the texture if requested with DDSCAPS2_TEXTUREMANAGE on
 * DirectX manages the texture if this flag is OFF and surface has DDSCAPS2_TEXTUREMANAGE on
 */
#define DDCAPS2_CANMANAGETEXTURE        0x00800000l

/*
 * The Direct3D texture manager uses this cap to decide whether to put managed
 * surfaces in non-local video memory. If the cap is set, the texture manager will
 * put managed surfaces in non-local vidmem. Drivers that cannot texture from
 * local vidmem SHOULD NOT set this cap.
 */
#define DDCAPS2_TEXMANINNONLOCALVIDMEM  0x01000000l

/*
 * Indicates that the driver supports DX7 type of stereo in at least one mode (which may
 * not necessarily be the current mode). Applications should use IDirectDraw7 (or higher)
 * ::EnumDisplayModes and check the DDSURFACEDESC.ddsCaps.dwCaps2 field for the presence of
 * DDSCAPS2_STEREOSURFACELEFT to check if a particular mode supports stereo. The application
 * can also use IDirectDraw7(or higher)::GetDisplayMode to check the current mode.
 */
#define DDCAPS2_STEREO                  0x02000000L

/*
 * This caps bit is intended for internal DirectDraw use.
 * -It is only valid if DDCAPS2_NONLOCALVIDMEMCAPS is set.
 * -If this bit is set, then DDCAPS_CANBLTSYSMEM MUST be set by the driver (and
 *  all the assoicated system memory blt caps must be correct).
 * -It implies that the system->video blt caps in DDCAPS also apply to system to
 *  nonlocal blts. I.e. the dwSVBCaps, dwSVBCKeyCaps, dwSVBFXCaps and dwSVBRops
 *  members of DDCAPS (DDCORECAPS) are filled in correctly.
 * -Any blt from system to nonlocal memory that matches these caps bits will
 *  be passed to the driver.
 *
 * NOTE: This is intended to enable the driver itself to do efficient reordering
 * of textures. This is NOT meant to imply that hardware can write into AGP memory.
 * This operation is not currently supported.
 */
#define DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL   0x04000000L

/*
 * Indicates that the driver can support PUREHAL.
 */
#define DDCAPS2_PUREHAL                       0x08000000L

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * DIRECTDRAW ALPHA CAPABILITY FLAGS (for DDCAPS members dwAlphaCaps,
 *   dwSVBAlphaCaps, dwVSBAlphaCaps, and dwSSBAlphaCaps)
 *
 ****************************************************************************/

/*
 * Driver supports blitting of surfaces that contain alpha information
 * in the pixel format.
 */
#define DDALPHACAPS_BLTALPHAPIXELS              0x00000001l

/*
 * Driver performs saturated arithmetic when alpha-blending for a blit.
 * This prevents the dest pixels' color components from overflowing.
 */
#define DDALPHACAPS_BLTSATURATE                 0x00000002l

/*
 * Driver can perform alpha blitting with pixels in premultiplied-
 * alpha format (color components stored in each pixel have been
 * premultiplied by the pixel's alpha component).
 */
#define DDALPHACAPS_BLTPREMULT                  0x00000004l

/*
 * Driver can perform alpha blitting with pixels in NON-premultiplied-
 * alpha format (color components NOT premultiplied by alpha component).
 */
#define DDALPHACAPS_BLTNONPREMULT               0x00000008l

/*
 * Driver can perform one-factor ARGB scaling of source pixels
 * during a blit.
 */
#define DDALPHACAPS_BLTARGBSCALE1F              0x00000010l

/*
 * Driver can perform two-factor ARGB scaling of source pixels
 * during a blit.
 */
#define DDALPHACAPS_BLTARGBSCALE2F              0x00000020l

/*
 * Driver can perform four-factor ARGB scaling of source pixels
 * during a blit.
 */
#define DDALPHACAPS_BLTARGBSCALE4F              0x00000040l

/*
 * Driver can do an alpha-blended color fill of a dest surface.
 */
#define DDALPHACAPS_BLTALPHAFILL                0x00000080l

/*
 * Driver can handle source alpha channel and ARGB scaling at the same time.
 */
#define DDALPHACAPS_BLTALPHAANDARGBSCALING      0x00000100l

/*
 * Driver supports overlays with surfaces that contain alpha information
 * in the pixel format.
 */
#define DDALPHACAPS_OVERLAYALPHAPIXELS          0x00010000l

/*
 * Driver performs saturated arithmetic to prevent the color
 * components in an alpha-blended overlay from overflowing.
 */
#define DDALPHACAPS_OVERLAYSATURATE             0x00020000l

/*
 * Driver can do alpha-blended overlays with pixels in premultiplied-
 * alpha format (color components stored in each pixel have been
 * premultiplied by the pixel's alpha component).
 */
#define DDALPHACAPS_OVERLAYPREMULT              0x00040000l

/*
 * Driver can do alpha-blended overlays with pixels in NON-premultiplied-
 * alpha format (color components NOT premultiplied by alpha component).
 */
#define DDALPHACAPS_OVERLAYNONPREMULT           0x00080000l

/*
 * Driver can perform one-factor ARGB scaling of source pixels
 * for an overlay.
 */
#define DDALPHACAPS_OVERLAYARGBSCALE1F          0x00100000l

/*
 * Driver can perform two-factor ARGB scaling of source pixels
 * for an overlay.
 */
#define DDALPHACAPS_OVERLAYARGBSCALE2F          0x00200000l

/*
 * Driver can perform four-factor ARGB scaling of source pixels
 * for an overlay.
 */
#define DDALPHACAPS_OVERLAYARGBSCALE4F          0x00400000l

/*
 * Driver can handle alpha blending and dest color keying at the same time.
 */
#define DDALPHACAPS_OVERLAYALPHAANDKEYDEST      0x00800000l

/*
 * Driver can handle source alpha channel and ARGB scaling at the same time.
 */
#define DDALPHACAPS_OVERLAYALPHAANDARGBSCALING  0x01000000l
//@@END_MSINTERNAL


/****************************************************************************
 *
 * DIRECTDRAW FX ALPHA CAPABILITY FLAGS
//@@BEGIN_MSINTERNAL
 * -- These are obsolete.  They are for the obsolete dwFXAlphaCaps member in DDCAPS_DX1/3/5.
//@@END_MSINTERNAL
 *
 ****************************************************************************/

/*
 * Supports alpha blending around the edge of a source color keyed surface.
 * For Blt.
 */
#define DDFXALPHACAPS_BLTALPHAEDGEBLEND         0x00000001l

/*
 * Supports alpha information in the pixel format.  The bit depth of alpha
 * information in the pixel format can be 1,2,4, or 8.  The alpha value becomes
 * more opaque as the alpha value increases.  (0 is transparent.)
 * For Blt.
 */
#define DDFXALPHACAPS_BLTALPHAPIXELS            0x00000002l

/*
 * Supports alpha information in the pixel format.  The bit depth of alpha
 * information in the pixel format can be 1,2,4, or 8.  The alpha value
 * becomes more transparent as the alpha value increases.  (0 is opaque.)
 * This flag can only be set if DDCAPS_ALPHA is set.
 * For Blt.
 */
#define DDFXALPHACAPS_BLTALPHAPIXELSNEG         0x00000004l

/*
 * Supports alpha only surfaces.  The bit depth of an alpha only surface can be
 * 1,2,4, or 8.  The alpha value becomes more opaque as the alpha value increases.
 * (0 is transparent.)
 * For Blt.
 */
#define DDFXALPHACAPS_BLTALPHASURFACES          0x00000008l

/*
 * The depth of the alpha channel data can range can be 1,2,4, or 8.
 * The NEG suffix indicates that this alpha channel becomes more transparent
 * as the alpha value increases. (0 is opaque.)  This flag can only be set if
 * DDCAPS_ALPHA is set.
 * For Blt.
 */
#define DDFXALPHACAPS_BLTALPHASURFACESNEG       0x00000010l

/*
 * Supports alpha blending around the edge of a source color keyed surface.
 * For Overlays.
 */
#define DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND     0x00000020l

/*
 * Supports alpha information in the pixel format.  The bit depth of alpha
 * information in the pixel format can be 1,2,4, or 8.  The alpha value becomes
 * more opaque as the alpha value increases.  (0 is transparent.)
 * For Overlays.
 */
#define DDFXALPHACAPS_OVERLAYALPHAPIXELS        0x00000040l

/*
 * Supports alpha information in the pixel format.  The bit depth of alpha
 * information in the pixel format can be 1,2,4, or 8.  The alpha value
 * becomes more transparent as the alpha value increases.  (0 is opaque.)
 * This flag can only be set if DDCAPS_ALPHA is set.
 * For Overlays.
 */
#define DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG     0x00000080l

/*
 * Supports alpha only surfaces.  The bit depth of an alpha only surface can be
 * 1,2,4, or 8.  The alpha value becomes more opaque as the alpha value increases.
 * (0 is transparent.)
 * For Overlays.
 */
#define DDFXALPHACAPS_OVERLAYALPHASURFACES      0x00000100l

/*
 * The depth of the alpha channel data can range can be 1,2,4, or 8.
 * The NEG suffix indicates that this alpha channel becomes more transparent
 * as the alpha value increases. (0 is opaque.)  This flag can only be set if
 * DDCAPS_ALPHA is set.
 * For Overlays.
 */
#define DDFXALPHACAPS_OVERLAYALPHASURFACESNEG   0x00000200l

#if DIRECTDRAW_VERSION < 0x0600
#endif  //DIRECTDRAW_VERSION

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * DIRECTDRAW FILTER CAPABILITY FLAGS (for DDCAPS members dwFilterCaps,
 *   dwSVBFilterCaps, dwVSBFilterCaps, and dwSSBFilterCaps)
 *
 ****************************************************************************/

/*
 * Driver can do filtering of source pixels for an alpha blit to improve
 * quality of image that is stretched or shrunk to fit dest rect.
 */
#define DDFILTCAPS_BLTQUALITYFILTER             0x00000001l

/*
 * Driver can disable filtering for an alpha blit.  This may be necessary to
 * preserve color key values in an image that is stretched or shrunk.
 */
#define DDFILTCAPS_BLTCANDISABLEFILTER          0x00000002l

/*
 * When filtering, driver can treat pixels bordering source rectangle as
 * transparent in order to smoothly blend source image onto dest image.
 */
#define DDFILTCAPS_BLTTRANSPBORDER              0x00000004l


/****************************************************************************
 *
 * DIRECTDRAW TRANSFORM CAPABILITY FLAGS (for DDCAPS members dwTransformCaps,
 *   dwSVBTransformCaps, dwVSBTransformCaps, and dwSSBTransformCaps)
 *
 ****************************************************************************/

/*
 * Driver can do an affine-transformed blit.
 */
#define DDTFRMCAPS_BLTAFFINETRANSFORM           0x00000001l

/*
 * Driver can do an affine-transformed overlay.
 */
#define DDTFRMCAPS_OVERLAYAFFINETRANSFORM       0x00000002l
//@@END_MSINTERNAL


/****************************************************************************
 *
 * DIRECTDRAW FX CAPABILITY FLAGS
 *
 ****************************************************************************/

/*
 * Uses arithmetic operations to stretch and shrink surfaces during blt
 * rather than pixel doubling techniques.  Along the Y axis.
 */
#define DDFXCAPS_BLTARITHSTRETCHY       0x00000020l

/*
 * Uses arithmetic operations to stretch during blt
 * rather than pixel doubling techniques.  Along the Y axis. Only
 * works for x1, x2, etc.
 */
#define DDFXCAPS_BLTARITHSTRETCHYN      0x00000010l

/*
 * Supports mirroring left to right in blt.
 */
#define DDFXCAPS_BLTMIRRORLEFTRIGHT     0x00000040l

/*
 * Supports mirroring top to bottom in blt.
 */
#define DDFXCAPS_BLTMIRRORUPDOWN        0x00000080l

/*
 * Supports arbitrary rotation for blts.
 */
#define DDFXCAPS_BLTROTATION            0x00000100l

/*
 * Supports 90 degree rotations for blts.
 */
#define DDFXCAPS_BLTROTATION90          0x00000200l

/*
 * DirectDraw supports arbitrary shrinking of a surface along the
 * x axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSHRINKX             0x00000400l

/*
 * DirectDraw supports integer shrinking (1x,2x,) of a surface
 * along the x axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSHRINKXN            0x00000800l

/*
 * DirectDraw supports arbitrary shrinking of a surface along the
 * y axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSHRINKY             0x00001000l

/*
 * DirectDraw supports integer shrinking (1x,2x,) of a surface
 * along the y axis (vertical direction) for blts.
 */
#define DDFXCAPS_BLTSHRINKYN            0x00002000l

/*
 * DirectDraw supports arbitrary stretching of a surface along the
 * x axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSTRETCHX            0x00004000l

/*
 * DirectDraw supports integer stretching (1x,2x,) of a surface
 * along the x axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSTRETCHXN           0x00008000l

/*
 * DirectDraw supports arbitrary stretching of a surface along the
 * y axis (horizontal direction) for blts.
 */
#define DDFXCAPS_BLTSTRETCHY            0x00010000l

/*
 * DirectDraw supports integer stretching (1x,2x,) of a surface
 * along the y axis (vertical direction) for blts.
 */
#define DDFXCAPS_BLTSTRETCHYN           0x00020000l

/*
 * Uses arithmetic operations to stretch and shrink surfaces during
 * overlay rather than pixel doubling techniques.  Along the Y axis
 * for overlays.
 */
#define DDFXCAPS_OVERLAYARITHSTRETCHY   0x00040000l

/*
 * Uses arithmetic operations to stretch surfaces during
 * overlay rather than pixel doubling techniques.  Along the Y axis
 * for overlays. Only works for x1, x2, etc.
 */
#define DDFXCAPS_OVERLAYARITHSTRETCHYN  0x00000008l

/*
 * DirectDraw supports arbitrary shrinking of a surface along the
 * x axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSHRINKX         0x00080000l

/*
 * DirectDraw supports integer shrinking (1x,2x,) of a surface
 * along the x axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSHRINKXN        0x00100000l

/*
 * DirectDraw supports arbitrary shrinking of a surface along the
 * y axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSHRINKY         0x00200000l

/*
 * DirectDraw supports integer shrinking (1x,2x,) of a surface
 * along the y axis (vertical direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSHRINKYN        0x00400000l

/*
 * DirectDraw supports arbitrary stretching of a surface along the
 * x axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSTRETCHX        0x00800000l

/*
 * DirectDraw supports integer stretching (1x,2x,) of a surface
 * along the x axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSTRETCHXN       0x01000000l

/*
 * DirectDraw supports arbitrary stretching of a surface along the
 * y axis (horizontal direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSTRETCHY        0x02000000l

/*
 * DirectDraw supports integer stretching (1x,2x,) of a surface
 * along the y axis (vertical direction) for overlays.
 */
#define DDFXCAPS_OVERLAYSTRETCHYN       0x04000000l

/*
 * DirectDraw supports mirroring of overlays across the vertical axis
 */
#define DDFXCAPS_OVERLAYMIRRORLEFTRIGHT 0x08000000l

/*
 * DirectDraw supports mirroring of overlays across the horizontal axis
 */
#define DDFXCAPS_OVERLAYMIRRORUPDOWN    0x10000000l

/*
 * DirectDraw supports deinterlacing of overlay surfaces
 */
#define DDFXCAPS_OVERLAYDEINTERLACE		0x20000000l

/*
 * Driver can do alpha blending for blits.
 */
#define DDFXCAPS_BLTALPHA               0x00000001l

//@@BEGIN_MSINTERNAL
/*
 * Driver can do geometric transformations (or warps) for blits.
 */
#define DDFXCAPS_BLTTRANSFORM           0x00000002l
//@@END_MSINTERNAL

/*
 * Driver can do surface-reconstruction filtering for warped blits.
 */
#define DDFXCAPS_BLTFILTER              DDFXCAPS_BLTARITHSTRETCHY

/*
 * Driver can do alpha blending for overlays.
 */
#define DDFXCAPS_OVERLAYALPHA           0x00000004l

//@@BEGIN_MSINTERNAL
/*
 * Driver can do geometric transformations (or warps) for overlays.
 */
#define DDFXCAPS_OVERLAYTRANSFORM       0x20000000l
//@@END_MSINTERNAL

/*
 * Driver can do surface-reconstruction filtering for warped overlays.
 */
#define DDFXCAPS_OVERLAYFILTER          DDFXCAPS_OVERLAYARITHSTRETCHY

/****************************************************************************
 *
 * DIRECTDRAW STEREO VIEW CAPABILITIES
 *
 ****************************************************************************/

/*
 * This flag used to be DDSVCAPS_ENIGMA, which is now obsolete
 */

#define DDSVCAPS_RESERVED1              0x00000001l

/*
 * This flag used to be DDSVCAPS_FLICKER, which is now obsolete
 */
#define DDSVCAPS_RESERVED2              0x00000002l

/*
 * This flag used to be DDSVCAPS_REDBLUE, which is now obsolete
 */
#define DDSVCAPS_RESERVED3              0x00000004l

/*
 * This flag used to be DDSVCAPS_SPLIT, which is now obsolete
 */
#define DDSVCAPS_RESERVED4              0x00000008l

/*
 * The stereo view is accomplished with switching technology
 */

#define DDSVCAPS_STEREOSEQUENTIAL       0x00000010L




/****************************************************************************
 *
 * DIRECTDRAWPALETTE CAPABILITIES
 *
 ****************************************************************************/

/*
 * Index is 4 bits.  There are sixteen color entries in the palette table.
 */
#define DDPCAPS_4BIT                    0x00000001l

/*
 * Index is onto a 8 bit color index.  This field is only valid with the
 * DDPCAPS_1BIT, DDPCAPS_2BIT or DDPCAPS_4BIT capability and the target
 * surface is in 8bpp. Each color entry is one byte long and is an index
 * into destination surface's 8bpp palette.
 */
#define DDPCAPS_8BITENTRIES             0x00000002l

/*
 * Index is 8 bits.  There are 256 color entries in the palette table.
 */
#define DDPCAPS_8BIT                    0x00000004l

/*
 * Indicates that this DIRECTDRAWPALETTE should use the palette color array
 * passed into the lpDDColorArray parameter to initialize the DIRECTDRAWPALETTE
 * object.
 * This flag is obsolete. DirectDraw always initializes the color array from
 * the lpDDColorArray parameter. The definition remains for source-level
 * compatibility.
 */
#define DDPCAPS_INITIALIZE              0x00000000l

/*
 * This palette is the one attached to the primary surface.  Changing this
 * table has immediate effect on the display unless DDPSETPAL_VSYNC is specified
 * and supported.
 */
#define DDPCAPS_PRIMARYSURFACE          0x00000010l

/*
 * This palette is the one attached to the primary surface left.  Changing
 * this table has immediate effect on the display for the left eye unless
 * DDPSETPAL_VSYNC is specified and supported.
 */
#define DDPCAPS_PRIMARYSURFACELEFT      0x00000020l

/*
 * This palette can have all 256 entries defined
 */
#define DDPCAPS_ALLOW256                0x00000040l

/*
 * This palette can have modifications to it synced with the monitors
 * refresh rate.
 */
#define DDPCAPS_VSYNC                   0x00000080l

/*
 * Index is 1 bit.  There are two color entries in the palette table.
 */
#define DDPCAPS_1BIT                    0x00000100l

/*
 * Index is 2 bit.  There are four color entries in the palette table.
 */
#define DDPCAPS_2BIT                    0x00000200l

/*
 * The peFlags member of PALETTEENTRY denotes an 8 bit alpha value
 */
#define DDPCAPS_ALPHA                   0x00000400l

//@@BEGIN_MSINTERNAL
#define DDPCAPS_VALID                   0x000007ffl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWPALETTE SETENTRY CONSTANTS
 *
 ****************************************************************************/

//@@BEGIN_MSINTERNAL
/*
 * Palette changes take effect immediately.
 */
#define DDPSETPAL_IMMEDIATE             0x00000000l     // default

/*
 * Palette changes should take effect during the vertical blank to avoid
 * palette tearing.
 */
#define DDPSETPAL_VSYNC                 0x00000002l
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWPALETTE GETENTRY CONSTANTS
 *
 ****************************************************************************/

/* 0 is the only legal value */

/****************************************************************************
 *
 * DIRECTDRAWSURFACE SETPRIVATEDATA CONSTANTS
 *
 ****************************************************************************/

/*
 * The passed pointer is an IUnknown ptr. The cbData argument to SetPrivateData
 * must be set to sizeof(IUnknown*). DirectDraw will call AddRef through this
 * pointer and Release when the private data is destroyed. This includes when
 * the surface or palette is destroyed before such priovate data is destroyed.
 */
#define DDSPD_IUNKNOWNPOINTER           0x00000001L

/*
 * Private data is only valid for the current state of the object,
 * as determined by the uniqueness value.
 */
#define DDSPD_VOLATILE                  0x00000002L

//@@BEGIN_MSINTERNAL
#define DDSPD_VALID                     0x00000003L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWSURFACE SETPALETTE CONSTANTS
 *
 ****************************************************************************/

//@@BEGIN_MSINTERNAL
/*
 * Palette change takes effect immediately.
 */
#define DDSETPAL_IMMEDIATE              0x00000000l     // default

/*
 * Palette change should take effect during the vertical blank to avoid
 * palette tearing.
 */
#define DDSETPAL_VSYNC                  0x00000002l
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW BITDEPTH CONSTANTS
 *
 * NOTE:  These are only used to indicate supported bit depths.   These
 * are flags only, they are not to be used as an actual bit depth.   The
 * absolute numbers 1, 2, 4, 8, 16, 24 and 32 are used to indicate actual
 * bit depths in a surface or for changing the display mode.
 *
 ****************************************************************************/

/*
 * 1 bit per pixel.
 */
#define DDBD_1                  0x00004000l

/*
 * 2 bits per pixel.
 */
#define DDBD_2                  0x00002000l

/*
 * 4 bits per pixel.
 */
#define DDBD_4                  0x00001000l

/*
 * 8 bits per pixel.
 */
#define DDBD_8                  0x00000800l

/*
 * 16 bits per pixel.
 */
#define DDBD_16                 0x00000400l

/*
 * 24 bits per pixel.
 */
#define DDBD_24                 0X00000200l

/*
 * 32 bits per pixel.
 */
#define DDBD_32                 0x00000100l

/****************************************************************************
 *
 * DIRECTDRAWSURFACE SET/GET COLOR KEY FLAGS
 *
 ****************************************************************************/

/*
 * Set if the structure contains a color space.  Not set if the structure
 * contains a single color key.
 */
#define DDCKEY_COLORSPACE       0x00000001l

/*
 * Set if the structure specifies a color key or color space which is to be
 * used as a destination color key for blt operations.
 */
#define DDCKEY_DESTBLT          0x00000002l

/*
 * Set if the structure specifies a color key or color space which is to be
 * used as a destination color key for overlay operations.
 */
#define DDCKEY_DESTOVERLAY      0x00000004l

/*
 * Set if the structure specifies a color key or color space which is to be
 * used as a source color key for blt operations.
 */
#define DDCKEY_SRCBLT           0x00000008l

/*
 * Set if the structure specifies a color key or color space which is to be
 * used as a source color key for overlay operations.
 */
#define DDCKEY_SRCOVERLAY       0x00000010l

//@@BEGIN_MSINTERNAL
#define DDCKEY_VALID            0x0000001fl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW COLOR KEY CAPABILITY FLAGS
 *
 ****************************************************************************/

/*
 * Supports transparent blting using a color key to identify the replaceable
 * bits of the destination surface for RGB colors.
 */
#define DDCKEYCAPS_DESTBLT                      0x00000001l

/*
 * Supports transparent blting using a color space to identify the replaceable
 * bits of the destination surface for RGB colors.
 */
#define DDCKEYCAPS_DESTBLTCLRSPACE              0x00000002l

/*
 * Supports transparent blting using a color space to identify the replaceable
 * bits of the destination surface for YUV colors.
 */
#define DDCKEYCAPS_DESTBLTCLRSPACEYUV           0x00000004l

/*
 * Supports transparent blting using a color key to identify the replaceable
 * bits of the destination surface for YUV colors.
 */
#define DDCKEYCAPS_DESTBLTYUV                   0x00000008l

/*
 * Supports overlaying using colorkeying of the replaceable bits of the surface
 * being overlayed for RGB colors.
 */
#define DDCKEYCAPS_DESTOVERLAY                  0x00000010l

/*
 * Supports a color space as the color key for the destination for RGB colors.
 */
#define DDCKEYCAPS_DESTOVERLAYCLRSPACE          0x00000020l

/*
 * Supports a color space as the color key for the destination for YUV colors.
 */
#define DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV       0x00000040l

/*
 * Supports only one active destination color key value for visible overlay
 * surfaces.
 */
#define DDCKEYCAPS_DESTOVERLAYONEACTIVE         0x00000080l

/*
 * Supports overlaying using colorkeying of the replaceable bits of the
 * surface being overlayed for YUV colors.
 */
#define DDCKEYCAPS_DESTOVERLAYYUV               0x00000100l

/*
 * Supports transparent blting using the color key for the source with
 * this surface for RGB colors.
 */
#define DDCKEYCAPS_SRCBLT                       0x00000200l

/*
 * Supports transparent blting using a color space for the source with
 * this surface for RGB colors.
 */
#define DDCKEYCAPS_SRCBLTCLRSPACE               0x00000400l

/*
 * Supports transparent blting using a color space for the source with
 * this surface for YUV colors.
 */
#define DDCKEYCAPS_SRCBLTCLRSPACEYUV            0x00000800l

/*
 * Supports transparent blting using the color key for the source with
 * this surface for YUV colors.
 */
#define DDCKEYCAPS_SRCBLTYUV                    0x00001000l

/*
 * Supports overlays using the color key for the source with this
 * overlay surface for RGB colors.
 */
#define DDCKEYCAPS_SRCOVERLAY                   0x00002000l

/*
 * Supports overlays using a color space as the source color key for
 * the overlay surface for RGB colors.
 */
#define DDCKEYCAPS_SRCOVERLAYCLRSPACE           0x00004000l

/*
 * Supports overlays using a color space as the source color key for
 * the overlay surface for YUV colors.
 */
#define DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV        0x00008000l

/*
 * Supports only one active source color key value for visible
 * overlay surfaces.
 */
#define DDCKEYCAPS_SRCOVERLAYONEACTIVE          0x00010000l

/*
 * Supports overlays using the color key for the source with this
 * overlay surface for YUV colors.
 */
#define DDCKEYCAPS_SRCOVERLAYYUV                0x00020000l

/*
 * there are no bandwidth trade-offs for using colorkey with an overlay
 */
#define DDCKEYCAPS_NOCOSTOVERLAY                0x00040000l


/****************************************************************************
 *
 * DIRECTDRAW PIXELFORMAT FLAGS
 *
 ****************************************************************************/

/*
 * The surface has alpha channel information in the pixel format.
 */
#define DDPF_ALPHAPIXELS                        0x00000001l

/*
 * The pixel format contains alpha only information
 */
#define DDPF_ALPHA                              0x00000002l

/*
 * The FourCC code is valid.
 */
#define DDPF_FOURCC                             0x00000004l

/*
 * The surface is 4-bit color indexed.
 */
#define DDPF_PALETTEINDEXED4                    0x00000008l

/*
 * The surface is indexed into a palette which stores indices
 * into the destination surface's 8-bit palette.
 */
#define DDPF_PALETTEINDEXEDTO8                  0x00000010l

/*
 * The surface is 8-bit color indexed.
 */
#define DDPF_PALETTEINDEXED8                    0x00000020l

/*
 * The RGB data in the pixel format structure is valid.
 */
#define DDPF_RGB                                0x00000040l

/*
 * The surface will accept pixel data in the format specified
 * and compress it during the write.
 */
#define DDPF_COMPRESSED                         0x00000080l

/*
 * The surface will accept RGB data and translate it during
 * the write to YUV data.  The format of the data to be written
 * will be contained in the pixel format structure.  The DDPF_RGB
 * flag will be set.
 */
#define DDPF_RGBTOYUV                           0x00000100l

/*
 * pixel format is YUV - YUV data in pixel format struct is valid
 */
#define DDPF_YUV                                0x00000200l

/*
 * pixel format is a z buffer only surface
 */
#define DDPF_ZBUFFER                            0x00000400l

/*
 * The surface is 1-bit color indexed.
 */
#define DDPF_PALETTEINDEXED1                    0x00000800l

/*
 * The surface is 2-bit color indexed.
 */
#define DDPF_PALETTEINDEXED2                    0x00001000l

/*
 * The surface contains Z information in the pixels
 */
#define DDPF_ZPIXELS                            0x00002000l

/*
 * The surface contains stencil information along with Z
 */
#define DDPF_STENCILBUFFER                      0x00004000l

/*
 * Premultiplied alpha format -- the color components have been
 * premultiplied by the alpha component.
 */
#define DDPF_ALPHAPREMULT                       0x00008000l

//@@BEGIN_MSINTERNAL
/*
 * Empty surface
 */
#define DDPF_EMPTYSURFACE                       0x00010000l
//@@END_MSINTERNAL

/*
 * Luminance data in the pixel format is valid.
 * Use this flag for luminance-only or luminance+alpha surfaces,
 * the bit depth is then ddpf.dwLuminanceBitCount.
 */
#define DDPF_LUMINANCE                          0x00020000l

/*
 * Luminance data in the pixel format is valid.
 * Use this flag when hanging luminance off bumpmap surfaces,
 * the bit mask for the luminance portion of the pixel is then
 * ddpf.dwBumpLuminanceBitMask
 */
#define DDPF_BUMPLUMINANCE                      0x00040000l

/*
 * Bump map dUdV data in the pixel format is valid.
 */
#define DDPF_BUMPDUDV                           0x00080000l

//@@BEGIN_MSINTERNAL
/*
 * This DDPF flag is used by drivers to signify that this format is new and may be
 * a candidate for hiding from certain applications
 * KEEP THIS DEFINITION IN SYNC WITH THAT OF DDPF_NOVEL_TEXTURE_FORMAT IN DDRAWI.H
 */
#define DDPF_RESERVED1                          0x00100000l


/*
 * This DDPF flag indicates a DX8 style texture list entry.
 * Keep this definition in sync with DDPF_D3DFORMAT in DDRAWI.H
 */
#define DDPF_RESERVED2                          0x00200000l

//@@END_MSINTERNAL

/*===========================================================================
 *
 *
 * DIRECTDRAW CALLBACK FLAGS
 *
 *
 *==========================================================================*/

/****************************************************************************
 *
 * DIRECTDRAW ENUMSURFACES FLAGS
 *
 ****************************************************************************/

/*
 * Enumerate all of the surfaces that meet the search criterion.
 */
#define DDENUMSURFACES_ALL                      0x00000001l

/*
 * A search hit is a surface that matches the surface description.
 */
#define DDENUMSURFACES_MATCH                    0x00000002l

/*
 * A search hit is a surface that does not match the surface description.
 */
#define DDENUMSURFACES_NOMATCH                  0x00000004l

/*
 * Enumerate the first surface that can be created which meets the search criterion.
 */
#define DDENUMSURFACES_CANBECREATED             0x00000008l

/*
 * Enumerate the surfaces that already exist that meet the search criterion.
 */
#define DDENUMSURFACES_DOESEXIST                0x00000010l

//@@BEGIN_MSINTERNAL
#define DDENUMSURFACES_VALID                    0x0000001fl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW SETDISPLAYMODE FLAGS
 *
 ****************************************************************************/

/*
 * The desired mode is a standard VGA mode
 */
#define DDSDM_STANDARDVGAMODE                   0x00000001l

//@@BEGIN_MSINTERNAL
#define DDSDM_VALID                             0x00000001l
//@@END_MSINTERNAL


/****************************************************************************
 *
 * DIRECTDRAW ENUMDISPLAYMODES FLAGS
 *
 ****************************************************************************/

/*
 * Enumerate Modes with different refresh rates.  EnumDisplayModes guarantees
 * that a particular mode will be enumerated only once.  This flag specifies whether
 * the refresh rate is taken into account when determining if a mode is unique.
 */
#define DDEDM_REFRESHRATES                      0x00000001l

/*
 * Enumerate VGA modes. Specify this flag if you wish to enumerate supported VGA
 * modes such as mode 0x13 in addition to the usual ModeX modes (which are always
 * enumerated if the application has previously called SetCooperativeLevel with the
 * DDSCL_ALLOWMODEX flag set).
 */
#define DDEDM_STANDARDVGAMODES                  0x00000002L

//@@BEGIN_MSINTERNAL
#define DDEDM_VALID                             0x00000003l
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW SETCOOPERATIVELEVEL FLAGS
 *
 ****************************************************************************/

/*
 * Exclusive mode owner will be responsible for the entire primary surface.
 * GDI can be ignored. used with DD
 */
#define DDSCL_FULLSCREEN                        0x00000001l

/*
 * allow CTRL_ALT_DEL to work while in fullscreen exclusive mode
 */
#define DDSCL_ALLOWREBOOT                       0x00000002l

/*
 * prevents DDRAW from modifying the application window.
 * prevents DDRAW from minimize/restore the application window on activation.
 */
#define DDSCL_NOWINDOWCHANGES                   0x00000004l

/*
 * app wants to work as a regular Windows application
 */
#define DDSCL_NORMAL                            0x00000008l

/*
 * app wants exclusive access
 */
#define DDSCL_EXCLUSIVE                         0x00000010l

//@@BEGIN_MSINTERNAL
/*
 * dont hook window proc, only valid for non-exclusive
 */
#define DDSCL_DONTHOOKHWND                      0x00000020l
//@@END_MSINTERNAL

/*
 * app can deal with non-windows display modes
 */
#define DDSCL_ALLOWMODEX                        0x00000040l

/*
 * this window will receive the focus messages
 */
#define DDSCL_SETFOCUSWINDOW                    0x00000080l

/*
 * this window is associated with the DDRAW object and will
 * cover the screen in fullscreen mode
 */
#define DDSCL_SETDEVICEWINDOW                   0x00000100l

/*
 * app wants DDRAW to create a window to be associated with the
 * DDRAW object
 */
#define DDSCL_CREATEDEVICEWINDOW                0x00000200l

/*
 * App explicitly asks DDRAW/D3D to be multithread safe. This makes D3D
 * take the global crtisec more frequently.
 */
#define DDSCL_MULTITHREADED                     0x00000400l

/*
 * App specifies that it would like to keep the FPU set up for optimal Direct3D
 * performance (single precision and exceptions disabled) so Direct3D
 * does not need to explicitly set the FPU each time. This is assumed by
 * default in DirectX 7. See also DDSCL_FPUPRESERVE
 */
#define DDSCL_FPUSETUP                          0x00000800l

/*
 * App specifies that it needs either double precision FPU or FPU exceptions
 * enabled. This makes Direct3D explicitly set the FPU state eah time it is
 * called. Setting the flag will reduce Direct3D performance. The flag is
 * assumed by default in DirectX 6 and earlier. See also DDSCL_FPUSETUP
 */
#define DDSCL_FPUPRESERVE                          0x00001000l

//@@BEGIN_MSINTERNAL
/*
 * Used to flag a call from the DX8 thunk layer, which we use to modify
 * msg loop behaviour.
 */
#define DDSCL_DX8APP                               0x00002000l
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#define DDSCL_VALID                                0x00003FFFl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW BLT FLAGS
 *
 ****************************************************************************/

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the destination surface as the alpha channel for this blt.
 */
#define DDBLT_ALPHADEST                         0x00000001l

/*
 * Use the dwConstAlphaDest field in the DDBLTFX structure as the alpha channel
 * for the destination surface for this blt.
 */
#define DDBLT_ALPHADESTCONSTOVERRIDE            0x00000002l

/*
 * The NEG suffix indicates that the destination surface becomes more
 * transparent as the alpha value increases. (0 is opaque)
 */
#define DDBLT_ALPHADESTNEG                      0x00000004l

/*
 * Use the lpDDSAlphaDest field in the DDBLTFX structure as the alpha
 * channel for the destination for this blt.
 */
#define DDBLT_ALPHADESTSURFACEOVERRIDE          0x00000008l

/*
 * Use the dwAlphaEdgeBlend field in the DDBLTFX structure as the alpha channel
 * for the edges of the image that border the color key colors.
 */
#define DDBLT_ALPHAEDGEBLEND                    0x00000010l

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the source surface as the alpha channel for this blt.
 */
#define DDBLT_ALPHASRC                          0x00000020l

/*
 * Use the dwConstAlphaSrc field in the DDBLTFX structure as the alpha channel
 * for the source for this blt.
 */
#define DDBLT_ALPHASRCCONSTOVERRIDE             0x00000040l

/*
 * The NEG suffix indicates that the source surface becomes more transparent
 * as the alpha value increases. (0 is opaque)
 */
#define DDBLT_ALPHASRCNEG                       0x00000080l

/*
 * Use the lpDDSAlphaSrc field in the DDBLTFX structure as the alpha channel
 * for the source for this blt.
 */
#define DDBLT_ALPHASRCSURFACEOVERRIDE           0x00000100l

/*
 * Do this blt asynchronously through the FIFO in the order received.  If
 * there is no room in the hardware FIFO fail the call.
 */
#define DDBLT_ASYNC                             0x00000200l

/*
 * Uses the dwFillColor field in the DDBLTFX structure as the RGB color
 * to fill the destination rectangle on the destination surface with.
 */
#define DDBLT_COLORFILL                         0x00000400l

/*
 * Uses the dwDDFX field in the DDBLTFX structure to specify the effects
 * to use for the blt.
 */
#define DDBLT_DDFX                              0x00000800l

/*
 * Uses the dwDDROPS field in the DDBLTFX structure to specify the ROPS
 * that are not part of the Win32 API.
 */
#define DDBLT_DDROPS                            0x00001000l

/*
 * Use the color key associated with the destination surface.
 */
#define DDBLT_KEYDEST                           0x00002000l

/*
 * Use the dckDestColorkey field in the DDBLTFX structure as the color key
 * for the destination surface.
 */
#define DDBLT_KEYDESTOVERRIDE                   0x00004000l

/*
 * Use the color key associated with the source surface.
 */
#define DDBLT_KEYSRC                            0x00008000l

/*
 * Use the dckSrcColorkey field in the DDBLTFX structure as the color key
 * for the source surface.
 */
#define DDBLT_KEYSRCOVERRIDE                    0x00010000l

/*
 * Use the dwROP field in the DDBLTFX structure for the raster operation
 * for this blt.  These ROPs are the same as the ones defined in the Win32 API.
 */
#define DDBLT_ROP                               0x00020000l

/*
 * Use the dwRotationAngle field in the DDBLTFX structure as the angle
 * (specified in 1/100th of a degree) to rotate the surface.
 */
#define DDBLT_ROTATIONANGLE                     0x00040000l

/*
 * Z-buffered blt using the z-buffers attached to the source and destination
 * surfaces and the dwZBufferOpCode field in the DDBLTFX structure as the
 * z-buffer opcode.
 */
#define DDBLT_ZBUFFER                           0x00080000l

/*
 * Z-buffered blt using the dwConstDest Zfield and the dwZBufferOpCode field
 * in the DDBLTFX structure as the z-buffer and z-buffer opcode respectively
 * for the destination.
 */
#define DDBLT_ZBUFFERDESTCONSTOVERRIDE          0x00100000l

/*
 * Z-buffered blt using the lpDDSDestZBuffer field and the dwZBufferOpCode
 * field in the DDBLTFX structure as the z-buffer and z-buffer opcode
 * respectively for the destination.
 */
#define DDBLT_ZBUFFERDESTOVERRIDE               0x00200000l

/*
 * Z-buffered blt using the dwConstSrcZ field and the dwZBufferOpCode field
 * in the DDBLTFX structure as the z-buffer and z-buffer opcode respectively
 * for the source.
 */
#define DDBLT_ZBUFFERSRCCONSTOVERRIDE           0x00400000l

/*
 * Z-buffered blt using the lpDDSSrcZBuffer field and the dwZBufferOpCode
 * field in the DDBLTFX structure as the z-buffer and z-buffer opcode
 * respectively for the source.
 */
#define DDBLT_ZBUFFERSRCOVERRIDE                0x00800000l

/*
 * wait until the device is ready to handle the blt
 * this will cause blt to not return DDERR_WASSTILLDRAWING
 */
#define DDBLT_WAIT                              0x01000000l

/*
 * Uses the dwFillDepth field in the DDBLTFX structure as the depth value
 * to fill the destination rectangle on the destination Z-buffer surface
 * with.
 */
#define DDBLT_DEPTHFILL                         0x02000000l

//@@BEGIN_MSINTERNAL
//Turns on ddbltfx.dwZDestConstBitDepth as a write mask for zbuffer clears (so as not to
//clobber the stencil or vice versa). This is VERY internal only. Fielded only by the HEL
#define DDBLT_DEPTHFILLWRITEMASK                0x04000000l
//@@END_MSINTERNAL

/*
 * wait until the device is ready to handle the blt
 * this will cause blt to not return DDERR_WASSTILLDRAWING
 */
#define DDBLT_DONOTWAIT                         0x08000000l

/*
 * These flags indicate a presentation blt (i.e. a blt
 * that moves surface contents from an offscreen back buffer to the primary
 * surface). The driver is not allowed to "queue"  more than three such blts.
 * The "end" of the presentation blt is indicated, since the
 * blt may be clipped, in which case the runtime will call the driver with 
 * several blts. All blts (even if not clipped) are tagged with DDBLT_PRESENTATION
 * and the last (even if not clipped) additionally with DDBLT_LAST_PRESENTATION.
 * Thus the true rule is that the driver must not schedule a DDBLT_PRESENTATION
 * blt if there are 3 or more DDBLT_PRESENTLAST blts in the hardware pipe.
 * If there are such blts in the pipe, the driver should return DDERR_WASSTILLDRAWING
 * until the oldest queued DDBLT_LAST_PRESENTATION blts has been retired (i.e. the
 * pixels have been actually written to the primary surface). Once the oldest blt
 * has been retired, the driver is free to schedule the current blt.
 * The goal is to provide a mechanism whereby the device's hardware queue never
 * gets more than 3 frames ahead of the frames being generated by the application.
 * When excessive queueing occurs, applications become unusable because the application
 * visibly lags user input, and such problems make windowed interactive applications impossible.
 * Some drivers may not have sufficient knowledge of their hardware's FIFO to know
 * when a certain blt has been retired. Such drivers should code cautiously, and 
 * simply not allow any frames to be queued at all. DDBLT_LAST_PRESENTATION should cause
 * such drivers to return DDERR_WASSTILLDRAWING until the accelerator is completely
 * finished- exactly as if the application had called Lock on the source surface
 * before calling Blt. 
 * In other words, the driver is allowed and encouraged to 
 * generate as much latency as it can, but never more than 3 frames worth.
 * Implementation detail: Drivers should count blts against the SOURCE surface, not
 * against the primary surface. This enables multiple parallel windowed application
 * to function more optimally.
 * This flag is passed only to DX8 or higher drivers.
 *
 * APPLICATIONS DO NOT SET THESE FLAGS. THEY ARE SET BY THE DIRECTDRAW RUNTIME.
 * 
 */
#define DDBLT_PRESENTATION                      0x10000000l
#define DDBLT_LAST_PRESENTATION                 0x20000000l


//@@BEGIN_MSINTERNAL
//We are running out of blt flags. From now on, the high bit will be used
//to indicate a DX8 (or higher) sourced blt, and we will start re-using
//old bits for internal-only flags (flags which are passed to the thunk
//layer's blt but not to the driver. All these DX8-only bits will be
//filtered off before checking against DDBLT_VALID.
#define DDBLT_DX8ORHIGHER                       0x80000000l

//will use the hWnd with the clipper to get the Destination
#define DDBLT_WINDOWCLIP                        0x00000001l /* DDBLT_ALPHADEST */
#define DDBLT_COPYVSYNC                         0x00000002l /* DDBLT_ALPHADESTCONSTOVERRIDE */

#define DDBLT_VALID                             0x1fffffffl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * BLTFAST FLAGS
 *
 ****************************************************************************/

#define DDBLTFAST_NOCOLORKEY                    0x00000000
#define DDBLTFAST_SRCCOLORKEY                   0x00000001
#define DDBLTFAST_DESTCOLORKEY                  0x00000002
#define DDBLTFAST_WAIT                          0x00000010
#define DDBLTFAST_DONOTWAIT                     0x00000020
//@@BEGIN_MSINTERNAL
#define DDBLTFAST_COLORKEY_MASK                 0x0000000F
#define DDBLTFAST_VALID                         0x00000033
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * Flags for AlphaBlt API call
 *
 ****************************************************************************/

/*
 * Use color key associated with source surface.
 */
#define DDABLT_KEYSRC                           0x40000000L

/*
 * Mirror the source image left-to-right in the destination rect.
 */
#define DDABLT_MIRRORLEFTRIGHT                  0x20000000L

/*
 * Mirror the source image vertically in the destination rect.
 */
#define DDABLT_MIRRORUPDOWN                     0x10000000L

/*
 * If previously initiated drawing operation is still in progress,
 * wait for it to finish instead of returning DDERR_WASSTILLDRAWING.
 */
#define DDABLT_WAIT                             0x08000000L

/*
 * Mandates hardware acceleration -- no software emulation.
 */
#define DDABLT_HARDWAREONLY                     0x04000000L

/*
 * Convert the source pixels to the destination pixel format, but
 * perform no color keying, no alpha blending, and no ARGB scaling.
 */
#define DDABLT_NOBLEND                          0x02000000L

/*
 * Enable filtering of source pixels for blit in order to improve quality
 * of stretched or shrunk image.
 */
#define DDABLT_FILTERENABLE                     0x01000000l

/*
 * Disable filtering.  Use nearest-neighbor source pixels for stretch blits.
 */
#define DDABLT_FILTERDISABLE                    0x00800000L

/*
 * If the driver is unable to use the ARGB scaling factors as specified,
 * degrade the scaling operation to one the driver can perform.
 */
#define DDABLT_DEGRADEARGBSCALING               0x00400000L

/*
 * If previously initiated drawing operation is still in progress,
 * return DDERR_WASSTILLDRAWING instead of waiting for it to finish.
 */
#define DDABLT_DONOTWAIT                        0x00200000L

/*
 * Fill dest surface with pixel value contained in lpDDAlphaBltFX->dwFillValue.
 */
#define DDABLT_USEFILLVALUE                     0x00100000L

/*
 * Mandates software emulation -- no hardware acceleration.
 */
#define DDABLT_SOFTWAREONLY                     0x00080000L

/*
 * When filtering, pixels bordering source rectangle are treated as transparent
 * in order to smoothly blend edges of source image onto dest image.
 */
#define DDABLT_FILTERTRANSPBORDER               0x00040000L

#define DDABLT_VALID                            0x7ffc0000L
//@@END_MSINTERNAL


/****************************************************************************
 *
 * FLIP FLAGS
 *
 ****************************************************************************/

#define DDFLIP_WAIT                          0x00000001L

/*
 * Indicates that the target surface contains the even field of video data.
 * This flag is only valid with an overlay surface.
 */
#define DDFLIP_EVEN                          0x00000002L

/*
 * Indicates that the target surface contains the odd field of video data.
 * This flag is only valid with an overlay surface.
 */
#define DDFLIP_ODD                           0x00000004L

/*
 * Causes DirectDraw to perform the physical flip immediately and return
 * to the application. Typically, what was the front buffer but is now the back
 * buffer will still be visible (depending on timing) until the next vertical
 * retrace. Subsequent operations involving the two flipped surfaces will
 * not check to see if the physical flip has finished (i.e. will not return
 * DDERR_WASSTILLDRAWING for that reason (but may for other reasons)).
 * This allows an application to perform Flips at a higher frequency than the
 * monitor refresh rate, but may introduce visible artifacts.
 * Only effective if DDCAPS2_FLIPNOVSYNC is set. If that bit is not set,
 * DDFLIP_NOVSYNC has no effect.
 */
#define DDFLIP_NOVSYNC                       0x00000008L


/*
 * Flip Interval Flags. These flags indicate how many vertical retraces to wait between
 * each flip. The default is one. DirectDraw will return DDERR_WASSTILLDRAWING for each
 * surface involved in the flip until the specified number of vertical retraces has
 * ocurred. Only effective if DDCAPS2_FLIPINTERVAL is set. If that bit is not set,
 * DDFLIP_INTERVALn has no effect.
 */

/*
 * DirectDraw will flip on every other vertical sync
 */
#define DDFLIP_INTERVAL2                     0x02000000L


/*
 * DirectDraw will flip on every third vertical sync
 */
#define DDFLIP_INTERVAL3                     0x03000000L


/*
 * DirectDraw will flip on every fourth vertical sync
 */
#define DDFLIP_INTERVAL4                     0x04000000L

/*
 * DirectDraw will flip and display a main stereo surface
 */
#define DDFLIP_STEREO                        0x00000010L

/*
 * On IDirectDrawSurface7 and higher interfaces, the default is DDFLIP_WAIT. If you wish
 * to override the default and use time when the accelerator is busy (as denoted by
 * the DDERR_WASSTILLDRAWING return code) then use DDFLIP_DONOTWAIT.
 */
#define DDFLIP_DONOTWAIT                     0x00000020L

//@@BEGIN_MSINTERNAL
#define DDFLIP_INTERVAL1                     0x01000000L
#define DDFLIP_INTERVALMASK                  0x07000000L
#define DDFLIP_VALID                         0x0700003fL
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#ifdef COMPOSITION
/****************************************************************************
 *
 * DIRECTDRAW COMP FLAGS
 *
 ****************************************************************************/

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the destination surface as the alpha channel for this blt.
 */
#define DDCOMP_ALPHADEST                        0x00000001l

/*
 * Use the dwConstAlphaDest field in the DDCOMPOSEFX structure as the alpha channel
 * for the destination surface for this blt.
 */
#define DDCOMP_ALPHADESTCONSTOVERRIDE           0x00000002l

/*
 * The NEG suffix indicates that the destination surface becomes more
 * transparent as the alpha value increases. (0 is opaque)
 */
#define DDCOMP_ALPHADESTNEG                     0x00000004l

/*
 * Use the lpDDSAlphaDest field in the DDCOMPOSEFX structure as the alpha
 * channel for the destination for this blt.
 */
#define DDCOMP_ALPHADESTSURFACEOVERRIDE         0x00000008l

/*
 * Use the dwAlphaEdgeBlend field in the DDCOMPOSEFX structure as the alpha channel
 * for the edges of the image that border the color key colors.
 */
#define DDCOMP_ALPHAEDGEBLEND                   0x00000010l

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the source surface as the alpha channel for this blt.
 */
#define DDCOMP_ALPHASRC                         0x00000020l

/*
 * Use the dwConstAlphaSrc field in the DDCOMPOSEFX structure as the alpha channel
 * for the source for this blt.
 */
#define DDCOMP_ALPHASRCCONSTOVERRIDE            0x00000040l

/*
 * The NEG suffix indicates that the source surface becomes more transparent
 * as the alpha value increases. (0 is opaque)
 */
#define DDCOMP_ALPHASRCNEG                      0x00000080l

/*
 * Use the lpDDSAlphaSrc field in the DDCOMPOSEFX structure as the alpha channel
 * for the source for this blt.
 */
#define DDCOMP_ALPHASRCSURFACEOVERRIDE          0x00000100l

/*
 * Before performing this blt invoke the callback specified by the lpfnCallback
 * field in the DDCOMPOSEFX structure.
 */
#define DDCOMP_CALLBACK                         0x00000200l

/*
 * Uses the dwFillColor field in the DDCOMPOSEFX structure as the RGB color
 * to fill the destination rectangle on the destination surface with.
 */
#define DDCOMP_COLORFILL                        0x00000400l

/*
 * Uses the dwDDFX field in the DDCOMPOSEFX structure to specify the effects
 * to use for the blt.
 */
#define DDCOMP_DDFX                             0x00000800l

/*
 * Uses the dwDDROPS field in the DDCOMPOSEFX structure to specify the ROPS
 * that are not part of the Win32 API.
 */
#define DDCOMP_DDROPS                           0x00001000l

/*
 * Use the color key associated with the destination surface.
 */
#define DDCOMP_KEYDEST                          0x00002000l

/*
 * Use the dckDestColorkey field in the DDCOMPOSEFX structure as the color key
 * for the destination surface.
 */
#define DDCOMP_KEYDESTOVERRIDE                  0x00004000l

/*
 * Use the color key associated with the source surface.
 */
#define DDCOMP_KEYSRC                           0x00008000l

/*
 * Use the dckSrcColorkey field in the DDCOMPOSEFX structure as the color key
 * for the source surface.
 */
#define DDCOMP_KEYSRCOVERRIDE                   0x00010000l

/*
 * Do this blt when DestUnlock is called for the last time on the source surface.
 */
#define DDCOMP_ONDESTUNLOCK                     0x00020000l

/*
 * Do this blt when Flip is called on the source surface.
 */
#define DDCOMP_ONFLIP                           0x00040000l

/*
 * Do this blt when Unlock is called for the last time on the source surface.
 */
#define DDCOMP_ONUNLOCK                         0x00080000l

/*
 * Repeat this composition blt the number of times specified in the dwRepeat
 * field of the DDCOMPOSEFX structure
 */
#define DDCOMP_REPEAT                           0x00100000l

/*
 * Use the dwROP field in the DDCOMPOSEFX structure for the raster operation
 * for this blt.  These ROPs are the same as the ones defined in the Win32 API.
 */
#define DDCOMP_ROP                              0x00200000l

/*
 * Use the dwRotationAngle field in the DDCOMPOSEFX structure as the angle
 * (specified in 1/100th of a degree) to rotate the surface.
 */
#define DDCOMP_ROTATIONANGLE                    0x00400000l

/*
 * Z-buffered blt using the z-buffers attached to the source and destination
 * surfaces and the dwZBufferOpCode field in the DDBLTFX structure as the
 * z-buffer opcode.
 */
#define DDCOMP_ZBUFFER                          0x00800000l

/*
 * Z-buffered blt using the dwConstDest Zfield and the dwZBufferOpCode field
 * in the DDCOMPOSEFX structure as the z-buffer and z-buffer opcode respectively
 * for the destination.
 */
#define DDCOMP_ZBUFFERDESTCONSTOVERRIDE         0x01000000l

/*
 * Z-buffered blt using the lpDDSDestZBuffer field and the dwZBufferOpCode
 * field in the DDCOMPOSEFX structure as the z-buffer and z-buffer opcode
 * respectively for the destination.
 */
#define DDCOMP_ZBUFFERDESTOVERRIDE              0x02000000l

/*
 * Z-buffered blt using the dwConstSrcZ field and the dwZBufferOpCode field
 * in the DDCOMPOSEFX structure as the z-buffer and z-buffer opcode respectively
 * for the source.
 */
#define DDCOMP_ZBUFFERSRCCONSTOVERRIDE          0x04000000l

/*
 * Z-buffered blt using the lpDDSSrcZBuffer field and the dwZBufferOpCode
 * field in the DDCOMPOSEFX structure as the z-buffer and z-buffer opcode
 * respectively for the source.
 */
#define DDCOMP_ZBUFFERSRCOVERRIDE               0x08000000l
#endif
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW SURFACE OVERLAY FLAGS
 *
 ****************************************************************************/

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the destination surface as the alpha channel for the
 * destination overlay.
 */
#define DDOVER_ALPHADEST                        0x00000001l

/*
 * Use the dwConstAlphaDest field in the DDOVERLAYFX structure as the
 * destination alpha channel for this overlay.
 */
#define DDOVER_ALPHADESTCONSTOVERRIDE           0x00000002l

/*
 * The NEG suffix indicates that the destination surface becomes more
 * transparent as the alpha value increases.
 */
#define DDOVER_ALPHADESTNEG                     0x00000004l

/*
 * Use the lpDDSAlphaDest field in the DDOVERLAYFX structure as the alpha
 * channel destination for this overlay.
 */
#define DDOVER_ALPHADESTSURFACEOVERRIDE         0x00000008l

/*
 * Use the dwAlphaEdgeBlend field in the DDOVERLAYFX structure as the alpha
 * channel for the edges of the image that border the color key colors.
 */
#define DDOVER_ALPHAEDGEBLEND                   0x00000010l

/*
 * Use the alpha information in the pixel format or the alpha channel surface
 * attached to the source surface as the source alpha channel for this overlay.
 */
#define DDOVER_ALPHASRC                         0x00000020l

/*
 * Use the dwConstAlphaSrc field in the DDOVERLAYFX structure as the source
 * alpha channel for this overlay.
 */
#define DDOVER_ALPHASRCCONSTOVERRIDE            0x00000040l

/*
 * The NEG suffix indicates that the source surface becomes more transparent
 * as the alpha value increases.
 */
#define DDOVER_ALPHASRCNEG                      0x00000080l

/*
 * Use the lpDDSAlphaSrc field in the DDOVERLAYFX structure as the alpha channel
 * source for this overlay.
 */
#define DDOVER_ALPHASRCSURFACEOVERRIDE          0x00000100l

/*
 * Turn this overlay off.
 */
#define DDOVER_HIDE                             0x00000200l

/*
 * Use the color key associated with the destination surface.
 */
#define DDOVER_KEYDEST                          0x00000400l

/*
 * Use the dckDestColorkey field in the DDOVERLAYFX structure as the color key
 * for the destination surface
 */
#define DDOVER_KEYDESTOVERRIDE                  0x00000800l

/*
 * Use the color key associated with the source surface.
 */
#define DDOVER_KEYSRC                           0x00001000l

/*
 * Use the dckSrcColorkey field in the DDOVERLAYFX structure as the color key
 * for the source surface.
 */
#define DDOVER_KEYSRCOVERRIDE                   0x00002000l

/*
 * Turn this overlay on.
 */
#define DDOVER_SHOW                             0x00004000l

/*
 * Add a dirty rect to an emulated overlayed surface.
 */
#define DDOVER_ADDDIRTYRECT                     0x00008000l

/*
 * Redraw all dirty rects on an emulated overlayed surface.
 */
#define DDOVER_REFRESHDIRTYRECTS                0x00010000l

/*
 * Redraw the entire surface on an emulated overlayed surface.
 */
#define DDOVER_REFRESHALL                      0x00020000l

//@@BEGIN_MSINTERNAL
/*
 * Force redrawing onto the destination surface without regard for the background
 */
#define DDOVER_REFRESHPOUND                     0x00040000l
//@@END_MSINTERNAL

/*
 * Use the overlay FX flags to define special overlay FX
 */
#define DDOVER_DDFX                             0x00080000l

/*
 * Autoflip the overlay when ever the video port autoflips
 */
#define DDOVER_AUTOFLIP                         0x00100000l

/*
 * Display each field of video port data individually without
 * causing any jittery artifacts
 */
#define DDOVER_BOB                              0x00200000l

/*
 * Indicates that bob/weave decisions should not be overridden by other
 * interfaces.
 */
#define DDOVER_OVERRIDEBOBWEAVE                 0x00400000l

/*
 * Indicates that the surface memory is composed of interleaved fields.
 */
#define DDOVER_INTERLEAVED                      0x00800000l

/*
 * Indicates that bob will be performed using hardware rather than
 * software or emulated.
 */
#define DDOVER_BOBHARDWARE                      0x01000000l

/*
 * Indicates that overlay FX structure contains valid ARGB scaling factors.
 */
#define DDOVER_ARGBSCALEFACTORS                 0x02000000l

/*
 * Indicates that ARGB scaling factors can be degraded to fit driver capabilities.
 */
#define DDOVER_DEGRADEARGBSCALING               0x04000000l

//@@BEGIN_MSINTERNAL
#define DDOVER_VALID                            0x07ffffffl
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * Flags for dwFlags member of DDSPRITE structure
 *
 ****************************************************************************/

/*
 * Use the color key associated with the destination surface.
 */
#define DDSPRITE_KEYDEST                        0x00000001l

/*
 * Uses the dest color key value stored in the embedded DDSPRITEFX
 * structure instead of the color key stored in the dest surface.
 */
#define DDSPRITE_KEYDESTOVERRIDE                0x00000002l

/*
 * Use the color key associated with the source surface.
 */
#define DDSPRITE_KEYSRC                         0x00000004l

/*
 * Uses the source color key value stored in the embedded DDSPRITEFX
 * structure instead of the color key stored in the source surface.
 */
#define DDSPRITE_KEYSRCOVERRIDE                 0x00000008l

/*
 * Indicates that the rcSrc member contains a valid source rectangle.
 */
#define DDSPRITE_RECTSRC                        0x00000010l

/*
 * Indicates that the rcDest member contains a valid destination rectangle.
 */
#define DDSPRITE_RECTDEST                       0x00000020l

/*
 * Indicates that the ddSpriteFX member contains a valid DDSPRITEFX value.
 */
#define DDSPRITE_DDSPRITEFX                     0x00000040l
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
// Mask of valid DDSPRITE_ flag bits
#define DDSPRITE_VALID                          0x0000006fl
//@@END_MSINTERNAL


//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * Flags for SetSpriteDisplayList API call
 *
 ****************************************************************************/

/*
 * Sprites in display list are to be blitted to destination surface.
 */
#define DDSSDL_BLTSPRITES                       0x00000001l

/*
 * Sprites in display list are to be displayed as overlays on dest (primary) surface.
 */
#define DDSSDL_OVERLAYSPRITES                   0x00000002l

/*
 * Sprites in display list are sorted in back-to-front order (default is F-to-B).
 */
#define DDSSDL_BACKTOFRONT                      0x00000004l

/*
 * Perform page flip of primary surface at same time new display list is shown.
 */
#define DDSSDL_PAGEFLIP                         0x00000008l

/*
 * If hardware acceleration is unavailable, fail rather than emulate.
 */
#define DDSSDL_HARDWAREONLY                     0x00000010l

/*
 * Wait to return until driver is ready to accept new sprite display list.
 */
#define DDSSDL_WAIT                             0x00000020l
//@@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
// Mask of all valid DDSSDL_ flag bits
#define DDSSDL_VALID                            0x0000003fl
//@@END_MSINTERNAL


/****************************************************************************
 *
 * DIRECTDRAWSURFACE LOCK FLAGS
 *
 ****************************************************************************/

/*
 * The default.  Set to indicate that Lock should return a valid memory pointer
 * to the top of the specified rectangle.  If no rectangle is specified then a
 * pointer to the top of the surface is returned.
 */
#define DDLOCK_SURFACEMEMORYPTR                 0x00000000L     // default

/*
 * Set to indicate that Lock should wait until it can obtain a valid memory
 * pointer before returning.  If this bit is set, Lock will never return
 * DDERR_WASSTILLDRAWING.
 */
#define DDLOCK_WAIT                             0x00000001L

/*
 * Set if an event handle is being passed to Lock.  Lock will trigger the event
 * when it can return the surface memory pointer requested.
 */
#define DDLOCK_EVENT                            0x00000002L

/*
 * Indicates that the surface being locked will only be read from.
 */
#define DDLOCK_READONLY                         0x00000010L

/*
 * Indicates that the surface being locked will only be written to
 */
#define DDLOCK_WRITEONLY                        0x00000020L

//@@BEGIN_MSINTERNAL
/*
 * Indicates that InternalLock should set the busy bit and Win16 lock
 * for surfaces not explicitly in system memory.
 */
#define DDLOCK_TAKE_WIN16                       0x00000040L

/*
 * Indicates that InternalLock should set the busy bit and Win16 lock
 * for surfaces in video memory only
 */
#define DDLOCK_TAKE_WIN16_VRAM                  0x00000080L

/*
 * Indicates that InternalLock should check for lost surfaces. By
 * default it does not.
 */
#define DDLOCK_FAILLOSTSURFACES                 0x00000100L

/*
 * Indicates that InternalLock should fail if the vis rgn has changed
 * since it was last queried.  This flag is only used on NT.
 */
#define DDLOCK_FAILONVISRGNCHANGED              0x00000200L

/*
 * This flag is used by the API DD_Surface_Lock to force InternalLock
 * to fail an attempt to lock an emulated primary on NT.
 * This is a symptom of the two-headed nature of InternalLock: it both
 * locks a surface (increases its usage count) and returns a pointer
 * to the bits. An emulated blt on NT requires the first but cares not about the
 * second. DD_Surface_Lock needs the pointer, so it must fail when the
 * second function of InternalLock fails.
 */
#define DDLOCK_FAILEMULATEDNTPRIMARY            0x00000400L

//@@END_MSINTERNAL

/*
 * Indicates that a system wide lock should not be taken when this surface
 * is locked. This has several advantages (cursor responsiveness, ability
 * to call more Windows functions, easier debugging) when locking video
 * memory surfaces. However, an application specifying this flag must
 * comply with a number of conditions documented in the help file.
 * Furthermore, this flag cannot be specified when locking the primary.
 */
#define DDLOCK_NOSYSLOCK                        0x00000800L

/*
 * Used only with Direct3D Vertex Buffer Locks. Indicates that no vertices
 * that were referred to in Draw*PrimtiveVB calls since the start of the
 * frame (or the last lock without this flag) will be modified during the
 * lock. This can be useful when one is only appending data to the vertex
 * buffer
 */
#define DDLOCK_NOOVERWRITE                      0x00001000L

/*
 * Indicates that no assumptions will be made about the contents of the
 * surface or vertex buffer during this lock.
 * This enables two things:
 * -    Direct3D or the driver may provide an alternative memory
 *      area as the vertex buffer. This is useful when one plans to clear the
 *      contents of the vertex buffer and fill in new data.
 * -    Drivers sometimes store surface data in a re-ordered format.
 *      When the application locks the surface, the driver is forced to un-re-order
 *      the surface data before allowing the application to see the surface contents.
 *      This flag is a hint to the driver that it can skip the un-re-ordering process
 *      since the application plans to overwrite every single pixel in the surface
 *      or locked rectangle (and so erase any un-re-ordered pixels anyway).
 *      Applications should always set this flag when they intend to overwrite the entire
 *      surface or locked rectangle.
 */
#define DDLOCK_DISCARDCONTENTS                  0x00002000L
 /*
  * DDLOCK_OKTOSWAP is an older, less informative name for DDLOCK_DISCARDCONTENTS
  */
#define DDLOCK_OKTOSWAP                         0x00002000L

/*
 * On IDirectDrawSurface7 and higher interfaces, the default is DDLOCK_WAIT. If you wish
 * to override the default and use time when the accelerator is busy (as denoted by
 * the DDERR_WASSTILLDRAWING return code) then use DDLOCK_DONOTWAIT.
 */
#define DDLOCK_DONOTWAIT                        0x00004000L


//@@BEGIN_MSINTERNAL
/*
 * An aggregate of all the valid flags which can be passed into the API
 */
#define DDLOCK_VALID                            0x00007831L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWSURFACE PAGELOCK FLAGS
 *
 ****************************************************************************/

/*
 * No flags defined at present
 */

//@@BEGIN_MSINTERNAL
#define DDPAGELOCK_VALID                        0x00000000L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWSURFACE PAGEUNLOCK FLAGS
 *
 ****************************************************************************/

/*
 * No flags defined at present
 */

//@@BEGIN_MSINTERNAL
#define DDPAGEUNLOCK_VALID                      0x00000000L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAWSURFACE BLT FX FLAGS
 *
 ****************************************************************************/

/*
 * If stretching, use arithmetic stretching along the Y axis for this blt.
 */
#define DDBLTFX_ARITHSTRETCHY                   0x00000001l

/*
 * Do this blt mirroring the surface left to right.  Spin the
 * surface around its y-axis.
 */
#define DDBLTFX_MIRRORLEFTRIGHT                 0x00000002l

/*
 * Do this blt mirroring the surface up and down.  Spin the surface
 * around its x-axis.
 */
#define DDBLTFX_MIRRORUPDOWN                    0x00000004l

/*
 * Schedule this blt to avoid tearing.
 */
#define DDBLTFX_NOTEARING                       0x00000008l

/*
 * Do this blt rotating the surface one hundred and eighty degrees.
 */
#define DDBLTFX_ROTATE180                       0x00000010l

/*
 * Do this blt rotating the surface two hundred and seventy degrees.
 */
#define DDBLTFX_ROTATE270                       0x00000020l

/*
 * Do this blt rotating the surface ninety degrees.
 */
#define DDBLTFX_ROTATE90                        0x00000040l

/*
 * Do this z blt using dwZBufferLow and dwZBufferHigh as  range values
 * specified to limit the bits copied from the source surface.
 */
#define DDBLTFX_ZBUFFERRANGE                    0x00000080l

/*
 * Do this z blt adding the dwZBufferBaseDest to each of the sources z values
 * before comparing it with the desting z values.
 */
#define DDBLTFX_ZBUFFERBASEDEST                 0x00000100l

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * DIRECTDRAWSURFACE COMP FX FLAGS
 *
 ****************************************************************************/

/*
 * If stretching, use arithmetic stretching along the Y axis for this blt.
 */
#define DDCOMPFX_ARITHSTRETCHY                  0x00000001l

/*
 * Do this blt mirroring the surface left to right.  Spin the
 * surface around its y-axis.
 */
#define DDCOMPFX_MIRRORLEFTRIGHT                0x00000002l

/*
 * Do this blt mirroring the surface up and down.  Spin the surface
 * around its x-axis.
 */
#define DDCOMPFX_MIRRORUPDOWN                   0x00000004l

/*
 * Schedule this blt to avoid tearing.
 */
#define DDCOMPFX_NOTEARING                      0x00000008l

/*
 * Do this blt rotating the surface one hundred and eighty degrees.
 */
#define DDCOMPFX_ROTATE180                      0x00000010l

/*
 * Do this blt rotating the surface two hundred and seventy degrees.
 */
#define DDCOMPFX_ROTATE270                      0x00000020l

/*
 * Do this blt rotating the surface ninety degrees.
 */
#define DDCOMPFX_ROTATE90                       0x00000040l

/*
 * Do this z blt using dwZBufferLow and dwZBufferHigh as  range values
 * specified to limit the bits copied from the source surface.
 */
#define DDCOMPFX_ZBUFFERRANGE                   0x00000080l

/*
 * Do this z blt adding the dwZBufferBaseDest to each of the sources z values
 * before comparing it with the desting z values.
 */
#define DDCOMPFX_ZBUFFERBASEDEST                0x00000100l
//@@END_MSINTERNAL
/****************************************************************************
 *
 * DIRECTDRAWSURFACE OVERLAY FX FLAGS
 *
 ****************************************************************************/

/*
 * If stretching, use arithmetic stretching along the Y axis for this overlay.
 */
#define DDOVERFX_ARITHSTRETCHY                  0x00000001l

/*
 * Mirror the overlay across the vertical axis
 */
#define DDOVERFX_MIRRORLEFTRIGHT                0x00000002l

/*
 * Mirror the overlay across the horizontal axis
 */
#define DDOVERFX_MIRRORUPDOWN                   0x00000004l

/*
 * Deinterlace the overlay, if possible
 */
#define DDOVERFX_DEINTERLACE                    0x00000008l

//@@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * Flags for dwDDFX member of DDSPRITEFX structure
 *
 ****************************************************************************/
/*
 * Use affine transformation matrix in fTransform member.
 */
#define DDSPRITEFX_AFFINETRANSFORM              0x00000001l

/*
 * Use RGBA scaling factors in ddargbScaleFactors member.
 */
#define DDSPRITEFX_RGBASCALING                  0x00000002l

/*
 * Degrade RGBA scaling factors to accommodate driver's capabilities.
 */
#define DDSPRITEFX_DEGRADERGBASCALING           0x00000004l

/*
 * Do bilinear filtering of stretched or warped sprite.
 */
#define DDSPRITEFX_BILINEARFILTER               0x00000008l

/*
 * Do "blur" filtering of stretched or warped sprite.
 */
#define DDSPRITEFX_BLURFILTER                   0x00000010l

/*
 * Do "flat" filtering of stretched or warped sprite.
 */
#define DDSPRITEFX_FLATFILTER                   0x00000020l

/*
 * Degrade filtering operation to accommodate driver's capabilities.
 */
#define DDSPRITEFX_DEGRADEFILTER                0x00000040l

// mask of valid DDSPRITEFX_ flags
#define DDSPRITEFX_VALID                        0x0000007fl
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW WAITFORVERTICALBLANK FLAGS
 *
 ****************************************************************************/

/*
 * return when the vertical blank interval begins
 */
#define DDWAITVB_BLOCKBEGIN                     0x00000001l

/*
 * set up an event to trigger when the vertical blank begins
 */
#define DDWAITVB_BLOCKBEGINEVENT                0x00000002l

/*
 * return when the vertical blank interval ends and display begins
 */
#define DDWAITVB_BLOCKEND                       0x00000004l

/****************************************************************************
 *
 * DIRECTDRAW GETFLIPSTATUS FLAGS
 *
 ****************************************************************************/

/*
 * is it OK to flip now?
 */
#define DDGFS_CANFLIP                   0x00000001l

/*
 * is the last flip finished?
 */
#define DDGFS_ISFLIPDONE                0x00000002l
// @@BEGIN_MSINTERNAL
#define DDGFS_VALID                     0x00000003l
// @@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW GETBLTSTATUS FLAGS
 *
 ****************************************************************************/

/*
 * is it OK to blt now?
 */
#define DDGBS_CANBLT                    0x00000001l

/*
 * is the blt to the surface finished?
 */
#define DDGBS_ISBLTDONE                 0x00000002l

// @@BEGIN_MSINTERNAL
#define DDGBS_VALID                     0x00000003l
// @@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW ENUMOVERLAYZORDER FLAGS
 *
 ****************************************************************************/

/*
 * Enumerate overlays back to front.
 */
#define DDENUMOVERLAYZ_BACKTOFRONT      0x00000000l

/*
 * Enumerate overlays front to back
 */
#define DDENUMOVERLAYZ_FRONTTOBACK      0x00000001l

/****************************************************************************
 *
 * DIRECTDRAW UPDATEOVERLAYZORDER FLAGS
 *
 ****************************************************************************/

/*
 * Send overlay to front
 */
#define DDOVERZ_SENDTOFRONT             0x00000000l

/*
 * Send overlay to back
 */
#define DDOVERZ_SENDTOBACK              0x00000001l

/*
 * Move Overlay forward
 */
#define DDOVERZ_MOVEFORWARD             0x00000002l

/*
 * Move Overlay backward
 */
#define DDOVERZ_MOVEBACKWARD            0x00000003l

/*
 * Move Overlay in front of relative surface
 */
#define DDOVERZ_INSERTINFRONTOF         0x00000004l

/*
 * Move Overlay in back of relative surface
 */
#define DDOVERZ_INSERTINBACKOF          0x00000005l

// @@BEGIN_MSINTERNAL
/****************************************************************************
 *
 * CREATE/LOAD SURFACE FROM STREAM/FILE FLAGS
 * Valid for:
 *     IDirectDraw4::CreateSurfaceFromStream
 *     IDirectDraw4::CreateSurfaceFromFile
 *     IDirectDrawSurface4::LoadFromStream
 *     IDirectDrawSurface4::LoadFromFile
 *
 ****************************************************************************/

/*
 * Any palette information in the stream will be discarded.
 * Mutually exclusive with DDLS_MERGEEPALETTE
 * If neither DDLS_IGNOREPALETTE nor DDLS_MERGEPALETTE are specified, then any palette information
 * in the stream will be loaded into a new DirectDrawPalette and attached to the surface.
 */
#define DDLS_IGNOREPALETTE                      0x00000001L

/*
 * Any palette information in the stream/file will be matched against all existing DirectDrawPalettes.
 * Any matching palette will be attached to the surface. If no palette matches, a new palette is created
 * and attached to the surface.
 * Mutually exclusive with DDLS_IGNOREPALETTE
 * If neither DDLS_IGNOREPALETTE nor DDLS_MERGEPALETTE are specified, then any palette information
 * in the stream will be loaded into a new DirectDrawPalette and attached to the surface.
 */
#define DDLS_MERGEPALETTE                      0x00000002L

/*
 * The source image will be stretched to fit the specified width.
 * Valid only if the DDSURFACEDESC2 passed to the function has valid width and height members,
 * or if passed to IDirectDrawSurface4::LoadFromFile/Stream.
 * Note that if the specified target width or height is smaller than the source dimension, the
 * source image will be shrunken in that dimension regardless of the setting of this flag.
 */
#define DDLS_STRETCHTOFIT                       0x00000004L

/*
 * If stretched, the source image will be bilinear filtered.
 * Valid only if DDLS_STRETCHTOFIT is specified.
 */
#define DDLS_BILINEARFILTER                     0x00000008L

/*
 * The source image will be stretched only as far as is possible maintaining the
 * height to width ratio of the source image.
 * Valid only if DDLS_STRETCHTOFIT is specified.
 */
#define DDLS_MAINTAINASPECTRATIO                0x00000010L

/*
 * The source image will be centered in the target surface. If this flag is not specified,
 * the image will be placed in the upper left corner of the surface.
 * Any unused space will be initialized to zero.
 * Valid only if the DDSURFACEDESC2 passed to the function has valid width and height members,
 * or if passed to IDirectDrawSurface4::LoadFromFile/Stream.
 */
#define DDLS_CENTER                             0x00000020L
// @@END_MSINTERNAL

//@@BEGIN_MSINTERNAL
#define DDLS_VALID                              0x0000003FL
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW SETGAMMARAMP FLAGS
 *
 ****************************************************************************/

/*
 * Request calibrator to adjust the gamma ramp according to the physical
 * properties of the display so that the result should appear identical
 * on all systems.
 */
#define DDSGR_CALIBRATE                        0x00000001L

//@@BEGIN_MSINTERNAL
#define DDSGR_VALID                            0x00000001L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW STARTMODETEST FLAGS
 *
 ****************************************************************************/

/*
 * Indicates that the mode being tested has passed
 */
#define DDSMT_ISTESTREQUIRED                   0x00000001L

//@@BEGIN_MSINTERNAL
#define DDSMT_VALID                            0x00000001L
//@@END_MSINTERNAL

/****************************************************************************
 *
 * DIRECTDRAW EVALUATEMODE FLAGS
 *
 ****************************************************************************/

/*
 * Indicates that the mode being tested has passed
 */
#define DDEM_MODEPASSED                        0x00000001L

/*
 * Indicates that the mode being tested has failed
 */
#define DDEM_MODEFAILED                        0x00000002L

//@@BEGIN_MSINTERNAL
#define DDEM_VALID                             0x00000003L
//@@END_MSINTERNAL

/*===========================================================================
 *
 *
 * DIRECTDRAW RETURN CODES
 *
 * The return values from DirectDraw Commands and Surface that return an HRESULT
 * are codes from DirectDraw concerning the results of the action
 * requested by DirectDraw.
 *
 *==========================================================================*/

/*
 * Status is OK
 *
 * Issued by: DirectDraw Commands and all callbacks
 */
//@@BEGIN_MSINTERNAL
#define DD_OK_HANDLED                           1
#define DD_OK_NOTHANDLED                        0
//@@END_MSINTERNAL
#define DD_OK                                   0
#define DD_FALSE                                S_FALSE

/****************************************************************************
 *
 * DIRECTDRAW ENUMCALLBACK RETURN VALUES
 *
 * EnumCallback returns are used to control the flow of the DIRECTDRAW and
 * DIRECTDRAWSURFACE object enumerations.   They can only be returned by
 * enumeration callback routines.
 *
 ****************************************************************************/

/*
 * stop the enumeration
 */
#define DDENUMRET_CANCEL                        0

/*
 * continue the enumeration
 */
#define DDENUMRET_OK                            1

/****************************************************************************
 *
 * DIRECTDRAW ERRORS
 *
 * Errors are represented by negative values and cannot be combined.
 *
//@@BEGIN_MSINTERNAL
 * NOTE: To avoid collision with other DX APIs, DDraw uses error codes
 *       [5-699] and [1024-2048].
//@@END_MSINTERNAL
 ****************************************************************************/

/*
 * This object is already initialized
 */
#define DDERR_ALREADYINITIALIZED                MAKE_DDHRESULT( 5 )

/*
 * This surface can not be attached to the requested surface.
 */
#define DDERR_CANNOTATTACHSURFACE               MAKE_DDHRESULT( 10 )

/*
 * This surface can not be detached from the requested surface.
 */
#define DDERR_CANNOTDETACHSURFACE               MAKE_DDHRESULT( 20 )

/*
 * Support is currently not available.
 */
#define DDERR_CURRENTLYNOTAVAIL                 MAKE_DDHRESULT( 40 )

/*
 * An exception was encountered while performing the requested operation
 */
#define DDERR_EXCEPTION                         MAKE_DDHRESULT( 55 )

/*
 * Generic failure.
 */
#define DDERR_GENERIC                           E_FAIL

/*
 * Height of rectangle provided is not a multiple of reqd alignment
 */
#define DDERR_HEIGHTALIGN                       MAKE_DDHRESULT( 90 )

/*
 * Unable to match primary surface creation request with existing
 * primary surface.
 */
#define DDERR_INCOMPATIBLEPRIMARY               MAKE_DDHRESULT( 95 )

/*
 * One or more of the caps bits passed to the callback are incorrect.
 */
#define DDERR_INVALIDCAPS                       MAKE_DDHRESULT( 100 )

/*
 * DirectDraw does not support provided Cliplist.
 */
#define DDERR_INVALIDCLIPLIST                   MAKE_DDHRESULT( 110 )

/*
 * DirectDraw does not support the requested mode
 */
#define DDERR_INVALIDMODE                       MAKE_DDHRESULT( 120 )

/*
 * DirectDraw received a pointer that was an invalid DIRECTDRAW object.
 */
#define DDERR_INVALIDOBJECT                     MAKE_DDHRESULT( 130 )

/*
 * One or more of the parameters passed to the callback function are
 * incorrect.
 */
#define DDERR_INVALIDPARAMS                     E_INVALIDARG

/*
 * pixel format was invalid as specified
 */
#define DDERR_INVALIDPIXELFORMAT                MAKE_DDHRESULT( 145 )

/*
 * Rectangle provided was invalid.
 */
#define DDERR_INVALIDRECT                       MAKE_DDHRESULT( 150 )

/*
 * Operation could not be carried out because one or more surfaces are locked
 */
#define DDERR_LOCKEDSURFACES                    MAKE_DDHRESULT( 160 )

/*
 * There is no 3D present.
 */
#define DDERR_NO3D                              MAKE_DDHRESULT( 170 )

/*
 * Operation could not be carried out because there is no alpha accleration
 * hardware present or available.
 */
#define DDERR_NOALPHAHW                         MAKE_DDHRESULT( 180 )

/*
 * Operation could not be carried out because there is no stereo
 * hardware present or available.
 */
#define DDERR_NOSTEREOHARDWARE          MAKE_DDHRESULT( 181 )

/*
 * Operation could not be carried out because there is no hardware
 * present which supports stereo surfaces
 */
#define DDERR_NOSURFACELEFT                             MAKE_DDHRESULT( 182 )


// @@BEGIN_MSINTERNAL
/*
 * Operation could not be carried out because there is no hardware support
 * for synchronizing blts to avoid tearing.
 */
#define DDERR_NOANTITEARHW                      MAKE_DDHRESULT( 190 )

/*
 * Operation could not be carried out because there is no hardware support
 * for asynchronous blting.
 */
#define DDERR_NOBLTQUEUEHW                      MAKE_DDHRESULT( 200 )
// @@END_MSINTERNAL

/*
 * no clip list available
 */
#define DDERR_NOCLIPLIST                        MAKE_DDHRESULT( 205 )

/*
 * Operation could not be carried out because there is no color conversion
 * hardware present or available.
 */
#define DDERR_NOCOLORCONVHW                     MAKE_DDHRESULT( 210 )

/*
 * Create function called without DirectDraw object method SetCooperativeLevel
 * being called.
 */
#define DDERR_NOCOOPERATIVELEVELSET             MAKE_DDHRESULT( 212 )

/*
 * Surface doesn't currently have a color key
 */
#define DDERR_NOCOLORKEY                        MAKE_DDHRESULT( 215 )

/*
 * Operation could not be carried out because there is no hardware support
 * of the dest color key.
 */
#define DDERR_NOCOLORKEYHW                      MAKE_DDHRESULT( 220 )

/*
 * No DirectDraw support possible with current display driver
 */
#define DDERR_NODIRECTDRAWSUPPORT               MAKE_DDHRESULT( 222 )

/*
 * Operation requires the application to have exclusive mode but the
 * application does not have exclusive mode.
 */
#define DDERR_NOEXCLUSIVEMODE                   MAKE_DDHRESULT( 225 )

/*
 * Flipping visible surfaces is not supported.
 */
#define DDERR_NOFLIPHW                          MAKE_DDHRESULT( 230 )

/*
 * There is no GDI present.
 */
#define DDERR_NOGDI                             MAKE_DDHRESULT( 240 )

/*
 * Operation could not be carried out because there is no hardware present
 * or available.
 */
#define DDERR_NOMIRRORHW                        MAKE_DDHRESULT( 250 )

/*
 * Requested item was not found
 */
#define DDERR_NOTFOUND                          MAKE_DDHRESULT( 255 )

/*
 * Operation could not be carried out because there is no overlay hardware
 * present or available.
 */
#define DDERR_NOOVERLAYHW                       MAKE_DDHRESULT( 260 )

/*
 * Operation could not be carried out because the source and destination
 * rectangles are on the same surface and overlap each other.
 */
#define DDERR_OVERLAPPINGRECTS                  MAKE_DDHRESULT( 270 )

/*
 * Operation could not be carried out because there is no appropriate raster
 * op hardware present or available.
 */
#define DDERR_NORASTEROPHW                      MAKE_DDHRESULT( 280 )

/*
 * Operation could not be carried out because there is no rotation hardware
 * present or available.
 */
#define DDERR_NOROTATIONHW                      MAKE_DDHRESULT( 290 )

/*
 * Operation could not be carried out because there is no hardware support
 * for stretching
 */
#define DDERR_NOSTRETCHHW                       MAKE_DDHRESULT( 310 )

/*
 * DirectDrawSurface is not in 4 bit color palette and the requested operation
 * requires 4 bit color palette.
 */
#define DDERR_NOT4BITCOLOR                      MAKE_DDHRESULT( 316 )

/*
 * DirectDrawSurface is not in 4 bit color index palette and the requested
 * operation requires 4 bit color index palette.
 */
#define DDERR_NOT4BITCOLORINDEX                 MAKE_DDHRESULT( 317 )

/*
 * DirectDraw Surface is not in 8 bit color mode and the requested operation
 * requires 8 bit color.
 */
#define DDERR_NOT8BITCOLOR                      MAKE_DDHRESULT( 320 )

/*
 * Operation could not be carried out because there is no texture mapping
 * hardware present or available.
 */
#define DDERR_NOTEXTUREHW                       MAKE_DDHRESULT( 330 )

/*
 * Operation could not be carried out because there is no hardware support
 * for vertical blank synchronized operations.
 */
#define DDERR_NOVSYNCHW                         MAKE_DDHRESULT( 335 )

/*
 * Operation could not be carried out because there is no hardware support
 * for zbuffer blting.
 */
#define DDERR_NOZBUFFERHW                       MAKE_DDHRESULT( 340 )

/*
 * Overlay surfaces could not be z layered based on their BltOrder because
 * the hardware does not support z layering of overlays.
 */
#define DDERR_NOZOVERLAYHW                      MAKE_DDHRESULT( 350 )

/*
 * The hardware needed for the requested operation has already been
 * allocated.
 */
#define DDERR_OUTOFCAPS                         MAKE_DDHRESULT( 360 )

/*
 * DirectDraw does not have enough memory to perform the operation.
 */
#define DDERR_OUTOFMEMORY                       E_OUTOFMEMORY

/*
 * DirectDraw does not have enough memory to perform the operation.
 */
#define DDERR_OUTOFVIDEOMEMORY                  MAKE_DDHRESULT( 380 )

/*
 * hardware does not support clipped overlays
 */
#define DDERR_OVERLAYCANTCLIP                   MAKE_DDHRESULT( 382 )

/*
 * Can only have ony color key active at one time for overlays
 */
#define DDERR_OVERLAYCOLORKEYONLYONEACTIVE      MAKE_DDHRESULT( 384 )

/*
 * Access to this palette is being refused because the palette is already
 * locked by another thread.
 */
#define DDERR_PALETTEBUSY                       MAKE_DDHRESULT( 387 )

/*
 * No src color key specified for this operation.
 */
#define DDERR_COLORKEYNOTSET                    MAKE_DDHRESULT( 400 )

/*
 * This surface is already attached to the surface it is being attached to.
 */
#define DDERR_SURFACEALREADYATTACHED            MAKE_DDHRESULT( 410 )

/*
 * This surface is already a dependency of the surface it is being made a
 * dependency of.
 */
#define DDERR_SURFACEALREADYDEPENDENT           MAKE_DDHRESULT( 420 )

/*
 * Access to this surface is being refused because the surface is already
 * locked by another thread.
 */
#define DDERR_SURFACEBUSY                       MAKE_DDHRESULT( 430 )

/*
 * Access to this surface is being refused because no driver exists
 * which can supply a pointer to the surface.
 * This is most likely to happen when attempting to lock the primary
 * surface when no DCI provider is present.
 * Will also happen on attempts to lock an optimized surface.
 */
#define DDERR_CANTLOCKSURFACE                   MAKE_DDHRESULT( 435 )

/*
 * Access to Surface refused because Surface is obscured.
 */
#define DDERR_SURFACEISOBSCURED                 MAKE_DDHRESULT( 440 )

/*
 * Access to this surface is being refused because the surface is gone.
 * The DIRECTDRAWSURFACE object representing this surface should
 * have Restore called on it.
 */
#define DDERR_SURFACELOST                       MAKE_DDHRESULT( 450 )

/*
 * The requested surface is not attached.
 */
#define DDERR_SURFACENOTATTACHED                MAKE_DDHRESULT( 460 )

/*
 * Height requested by DirectDraw is too large.
 */
#define DDERR_TOOBIGHEIGHT                      MAKE_DDHRESULT( 470 )

/*
 * Size requested by DirectDraw is too large --  The individual height and
 * width are OK.
 */
#define DDERR_TOOBIGSIZE                        MAKE_DDHRESULT( 480 )

/*
 * Width requested by DirectDraw is too large.
 */
#define DDERR_TOOBIGWIDTH                       MAKE_DDHRESULT( 490 )

/*
 * Action not supported.
 */
#define DDERR_UNSUPPORTED                       E_NOTIMPL

/*
 * Pixel format requested is unsupported by DirectDraw
 */
#define DDERR_UNSUPPORTEDFORMAT                 MAKE_DDHRESULT( 510 )

/*
 * Bitmask in the pixel format requested is unsupported by DirectDraw
 */
#define DDERR_UNSUPPORTEDMASK                   MAKE_DDHRESULT( 520 )

/*
 * The specified stream contains invalid data
 */
#define DDERR_INVALIDSTREAM                     MAKE_DDHRESULT( 521 )

/*
 * vertical blank is in progress
 */
#define DDERR_VERTICALBLANKINPROGRESS           MAKE_DDHRESULT( 537 )

/*
 * Informs DirectDraw that the previous Blt which is transfering information
 * to or from this Surface is incomplete.
 */
#define DDERR_WASSTILLDRAWING                   MAKE_DDHRESULT( 540 )

// @@BEGIN_MSINTERNAL

/*
 * NT specific: VisRgn changed and must be reset before call can be
 * completed.
 */
#define DDERR_VISRGNCHANGED             MAKE_DDHRESULT( 541 )

// @@END_MSINTERNAL

/*
 * The specified surface type requires specification of the COMPLEX flag
 */
#define DDERR_DDSCAPSCOMPLEXREQUIRED            MAKE_DDHRESULT( 542 )


/*
 * Rectangle provided was not horizontally aligned on reqd. boundary
 */
#define DDERR_XALIGN                            MAKE_DDHRESULT( 560 )

/*
 * The GUID passed to DirectDrawCreate is not a valid DirectDraw driver
 * identifier.
 */
#define DDERR_INVALIDDIRECTDRAWGUID             MAKE_DDHRESULT( 561 )

/*
 * A DirectDraw object representing this driver has already been created
 * for this process.
 */
#define DDERR_DIRECTDRAWALREADYCREATED          MAKE_DDHRESULT( 562 )

/*
 * A hardware only DirectDraw object creation was attempted but the driver
 * did not support any hardware.
 */
#define DDERR_NODIRECTDRAWHW                    MAKE_DDHRESULT( 563 )

/*
 * this process already has created a primary surface
 */
#define DDERR_PRIMARYSURFACEALREADYEXISTS       MAKE_DDHRESULT( 564 )

/*
 * software emulation not available.
 */
#define DDERR_NOEMULATION                       MAKE_DDHRESULT( 565 )

/*
 * region passed to Clipper::GetClipList is too small.
 */
#define DDERR_REGIONTOOSMALL                    MAKE_DDHRESULT( 566 )

/*
 * an attempt was made to set a clip list for a clipper objec that
 * is already monitoring an hwnd.
 */
#define DDERR_CLIPPERISUSINGHWND                MAKE_DDHRESULT( 567 )

/*
 * No clipper object attached to surface object
 */
#define DDERR_NOCLIPPERATTACHED                 MAKE_DDHRESULT( 568 )

/*
 * Clipper notification requires an HWND or
 * no HWND has previously been set as the CooperativeLevel HWND.
 */
#define DDERR_NOHWND                            MAKE_DDHRESULT( 569 )

/*
 * HWND used by DirectDraw CooperativeLevel has been subclassed,
 * this prevents DirectDraw from restoring state.
 */
#define DDERR_HWNDSUBCLASSED                    MAKE_DDHRESULT( 570 )

/*
 * The CooperativeLevel HWND has already been set.
 * It can not be reset while the process has surfaces or palettes created.
 */
#define DDERR_HWNDALREADYSET                    MAKE_DDHRESULT( 571 )

/*
 * No palette object attached to this surface.
 */
#define DDERR_NOPALETTEATTACHED                 MAKE_DDHRESULT( 572 )

/*
 * No hardware support for 16 or 256 color palettes.
 */
#define DDERR_NOPALETTEHW                       MAKE_DDHRESULT( 573 )

/*
 * If a clipper object is attached to the source surface passed into a
 * BltFast call.
 */
#define DDERR_BLTFASTCANTCLIP                   MAKE_DDHRESULT( 574 )

/*
 * No blter.
 */
#define DDERR_NOBLTHW                           MAKE_DDHRESULT( 575 )

/*
 * No DirectDraw ROP hardware.
 */
#define DDERR_NODDROPSHW                        MAKE_DDHRESULT( 576 )

/*
 * returned when GetOverlayPosition is called on a hidden overlay
 */
#define DDERR_OVERLAYNOTVISIBLE                 MAKE_DDHRESULT( 577 )

/*
 * returned when GetOverlayPosition is called on a overlay that UpdateOverlay
 * has never been called on to establish a destionation.
 */
#define DDERR_NOOVERLAYDEST                     MAKE_DDHRESULT( 578 )

/*
 * returned when the position of the overlay on the destionation is no longer
 * legal for that destionation.
 */
#define DDERR_INVALIDPOSITION                   MAKE_DDHRESULT( 579 )

/*
 * returned when an overlay member is called for a non-overlay surface
 */
#define DDERR_NOTAOVERLAYSURFACE                MAKE_DDHRESULT( 580 )

/*
 * An attempt was made to set the cooperative level when it was already
 * set to exclusive.
 */
#define DDERR_EXCLUSIVEMODEALREADYSET           MAKE_DDHRESULT( 581 )

/*
 * An attempt has been made to flip a surface that is not flippable.
 */
#define DDERR_NOTFLIPPABLE                      MAKE_DDHRESULT( 582 )

/*
 * Can't duplicate primary & 3D surfaces, or surfaces that are implicitly
 * created.
 */
#define DDERR_CANTDUPLICATE                     MAKE_DDHRESULT( 583 )

/*
 * Surface was not locked.  An attempt to unlock a surface that was not
 * locked at all, or by this process, has been attempted.
 */
#define DDERR_NOTLOCKED                         MAKE_DDHRESULT( 584 )

/*
 * Windows can not create any more DCs, or a DC was requested for a paltte-indexed
 * surface when the surface had no palette AND the display mode was not palette-indexed
 * (in this case DirectDraw cannot select a proper palette into the DC)
 */
#define DDERR_CANTCREATEDC                      MAKE_DDHRESULT( 585 )

/*
 * No DC was ever created for this surface.
 */
#define DDERR_NODC                              MAKE_DDHRESULT( 586 )

/*
 * This surface can not be restored because it was created in a different
 * mode.
 */
#define DDERR_WRONGMODE                         MAKE_DDHRESULT( 587 )

/*
 * This surface can not be restored because it is an implicitly created
 * surface.
 */
#define DDERR_IMPLICITLYCREATED                 MAKE_DDHRESULT( 588 )

/*
 * The surface being used is not a palette-based surface
 */
#define DDERR_NOTPALETTIZED                     MAKE_DDHRESULT( 589 )


/*
 * The display is currently in an unsupported mode
 */
#define DDERR_UNSUPPORTEDMODE                   MAKE_DDHRESULT( 590 )

/*
 * Operation could not be carried out because there is no mip-map
 * texture mapping hardware present or available.
 */
#define DDERR_NOMIPMAPHW                        MAKE_DDHRESULT( 591 )

/*
 * The requested action could not be performed because the surface was of
 * the wrong type.
 */
#define DDERR_INVALIDSURFACETYPE                MAKE_DDHRESULT( 592 )

// @@BEGIN_MSINTERNAL
/*
 * Operation could not be carried out because there is no hardware support
 * for execute buffers.
 */
#define DDERR_NOEXECUTEBUFFERHW                 MAKE_DDHRESULT( 593 )
// @@END_MSINTERNAL

// @@BEGIN_MSINTERNAL
#ifdef SHAREDZ

/*
 * This process has already created a shared Z buffer
 */
#define DDERR_SHAREDZBUFFERALREADYEXISTS        MAKE_DDHRESULT( 594 )

/*
 * Unable to match shared Z buffer creation request with existing
 * shared Z buffer.
 */
#define DDERR_INCOMPATIBLESHAREDZBUFFER         MAKE_DDHRESULT( 595 )

/*
 * This process has already created a shared backbuffer
 */
#define DDERR_SHAREDBACKBUFFERALREADYEXISTS     MAKE_DDHRESULT( 596 )

/*
 * Unable to match shared backbuffer creation request with existing
 * shared backbuffer.
 */
#define DDERR_INCOMPATIBLESHAREDBACKBUFFER      MAKE_DDHRESULT( 597 )

/*
 * Operation could not be carried out because there is no hardware support
 * for shared Z buffers.
 */
#define DDERR_NOSHAREDZBUFFERHW                 MAKE_DDHRESULT( 598 )

/*
 * Operation could not be carried out because there is no hardware support
 * for shared backbuffers.
 */
#define DDERR_NOSHAREDBACKBUFFERHW              MAKE_DDHRESULT( 599 )

#endif
// @@END_MSINTERNAL

/*
 * Device does not support optimized surfaces, therefore no video memory optimized surfaces
 */
#define DDERR_NOOPTIMIZEHW                      MAKE_DDHRESULT( 600 )

/*
 * Surface is an optimized surface, but has not yet been allocated any memory
 */
#define DDERR_NOTLOADED                         MAKE_DDHRESULT( 601 )

/*
 * Attempt was made to create or set a device window without first setting
 * the focus window
 */
#define DDERR_NOFOCUSWINDOW                     MAKE_DDHRESULT( 602 )

/*
 * Attempt was made to set a palette on a mipmap sublevel
 */
#define DDERR_NOTONMIPMAPSUBLEVEL               MAKE_DDHRESULT( 603 )

/*
 * A DC has already been returned for this surface. Only one DC can be
 * retrieved per surface.
 */
#define DDERR_DCALREADYCREATED                  MAKE_DDHRESULT( 620 )

/*
 * An attempt was made to allocate non-local video memory from a device
 * that does not support non-local video memory.
 */
#define DDERR_NONONLOCALVIDMEM                  MAKE_DDHRESULT( 630 )

/*
 * The attempt to page lock a surface failed.
 */
#define DDERR_CANTPAGELOCK                      MAKE_DDHRESULT( 640 )

//@@BEGIN_MSINTERNAL
/*
 * The GUID is not recognized by the driver. In case of Optimized Surfaces,
 * this GUID represents the compresison technique requested.
 */
#define DDERR_UNRECOGNIZEDGUID                  MAKE_DDHRESULT( 650 )

/*
 * The driver does not support Optimized Surfaces
 */
#define DDERR_NOOPTSURFACESUPPORT       MAKE_DDHRESULT( 651 )

/*
 * The surface is not an optimized surface
 */
#define DDERR_NOTANOPTIMIZEDSURFACE     MAKE_DDHRESULT( 652 )

/*
 * The surface is an empty optimized surface
 */
#define DDERR_ISANEMPTYOPTIMIZEDSURFACE         MAKE_DDHRESULT( 653 )

/*
 * The surface is not an empty optimized surface
 */
#define DDERR_NOTANEMPTYOPTIMIZEDSURFACE        MAKE_DDHRESULT( 654 )

/*
 * The surface is optimized
 */
#define DDERR_ISOPTIMIZEDSURFACE        MAKE_DDHRESULT( 655 )
//@@END_MSINTERNAL

/*
 * The attempt to page unlock a surface failed.
 */
#define DDERR_CANTPAGEUNLOCK                    MAKE_DDHRESULT( 660 )

/*
 * An attempt was made to page unlock a surface with no outstanding page locks.
 */
#define DDERR_NOTPAGELOCKED                     MAKE_DDHRESULT( 680 )

/*
 * There is more data available than the specified buffer size could hold
 */
#define DDERR_MOREDATA                          MAKE_DDHRESULT( 690 )

/*
 * The data has expired and is therefore no longer valid.
 */
#define DDERR_EXPIRED                           MAKE_DDHRESULT( 691 )

/*
 * The mode test has finished executing.
 */
#define DDERR_TESTFINISHED                      MAKE_DDHRESULT( 692 )

/*
 * The mode test has switched to a new mode.
 */
#define DDERR_NEWMODE                           MAKE_DDHRESULT( 693 )

/*
 * D3D has not yet been initialized.
 */
#define DDERR_D3DNOTINITIALIZED                 MAKE_DDHRESULT( 694 )

/*
 * The video port is not active
 */
#define DDERR_VIDEONOTACTIVE                    MAKE_DDHRESULT( 695 )

/*
 * The monitor does not have EDID data.
 */
#define DDERR_NOMONITORINFORMATION              MAKE_DDHRESULT( 696 )

/*
 * The driver does not enumerate display mode refresh rates.
 */
#define DDERR_NODRIVERSUPPORT                   MAKE_DDHRESULT( 697 )

/*
 * Surfaces created by one direct draw device cannot be used directly by
 * another direct draw device.
 */
#define DDERR_DEVICEDOESNTOWNSURFACE            MAKE_DDHRESULT( 699 )


//@@BEGIN_MSINTERNAL
/*=======================================================================
 * DANGER WIL ROBINSON! D3D errors begin at 700... take care not to
 * step on D3dD's toes when defining new ddraw errors.
 *=======================================================================*/
/****************************************************************************
 *
 * end of DIRECTDRAW ERRORS
 *
 * NOTE: To avoid collision with other DX APIs, DDraw uses error codes
 *       [5-699] and [1024-2048].
 *
 ****************************************************************************/
//@@END_MSINTERNAL

/*
 * An attempt was made to invoke an interface member of a DirectDraw object
 * created by CoCreateInstance() before it was initialized.
 */
#define DDERR_NOTINITIALIZED                    CO_E_NOTINITIALIZED


/* Alpha bit depth constants */

//@@BEGIN_MSINTERNAL
/*
 * 1 bit alpha constants
 */

/*
 * Completely transparent. Colors being blended with this constant do not affect
 * the final result.
 */
#define DDALPHA1_TRANSPARENT                    0

/*
 * Completely opaque. Colors being blended with this constant are the final result.
 */
#define DDALPHA1_OPAQUE                         1

/*
 * 2 bit alpha constants
 */

/*
 * Completely transparent. Colors being blended with this constant do not effect
 * the final result.
 */
#define DDALPHA2_TRANSPARENT                    0

/*
 * 50-50 blend.  Colors being blended with this constant effect the final result
 * with 50% of their color.
 */
#define DDALPHA2_50                             2

/*
 * Completely opaque. Colors being blended with this constant are the final result.
 */
#define DDALPHA2_OPAQUE                         3

/*
 * 4 bit alpha constants
 */

/*
 * Completely transparent. Colors being blended with this constant do not effect
 * the final result.
 */
#define DDALPHA4_TRANSPARENT                    0

/*
 * Opaque modifier is multiplied by any value between 0 and _OPAQUE to
 * establish gradients of alpha blending.
 */
#define DDALPHA4_OPAQUEMOD                      1

/*
 * 50-50 blend.  Colors being blended with this constant effect the final result
 * with 50% of their color.
 */
#define DDALPHA4_50                             8

/*
 * Completely opaque. Colors being blended with this constant are the final result.
 */
#define DDALPHA4_OPAQUE                         15

/*
 * 8 bit alpha constants
 */

/*
 * Completely transparent. Colors being blended with this constant do not effect
 * the final result.
 */
#define DDALPHA8_TRANSPARENT                    0

/*
 * Opaque modifier is multiplied by any value between 0 and _OPAQUE to
 * establish gradients of alpha blending.
 */
#define DDALPHA8_OPAQUEMOD                      1

/*
 * 50-50 blend.  Colors being blended with this constant effect the final result
 * with 50% of their color.
 */
#define DDALPHA8_50                             128
/*
 * Completely opaque. Colors being blended with this constant are the final result.
 */
#define DDALPHA8_OPAQUE                         255
//@@END_MSINTERNAL

#ifdef __cplusplus
};
#endif

#ifdef ENABLE_NAMELESS_UNION_PRAGMA
#pragma warning(default:4201)
#endif

#endif //__DDRAW_INCLUDED__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\dx8\dvp.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1996-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	dvp.h
 *  Content:	DirectDrawVideoPort include file
 *
 ***************************************************************************/

#ifndef __DVP_INCLUDED__
#define __DVP_INCLUDED__
#if defined( _WIN32 )  && !defined( _NO_COM )
#define COM_NO_WINDOWS_H
#include <objbase.h>
#else
#define IUnknown	    void
#endif

/*
 * These definitions are required to allow polymorphic structure members (i.e. those
 * that are referred to both as DWORDs and as pointers) to resolve into a type
 * of correct size to hold the largest of those two types (i.e. pointer) on 64 bit
 * systems. For 32 bit environments, ULONG_PTR resolves to a DWORD.
 */
#ifndef MAXULONG_PTR
#define ULONG_PTR    DWORD
#endif //MAXULONG_PTR

#ifdef __cplusplus
extern "C" {
#endif

/*
 * GUIDS used by DirectDrawVideoPort objects
 */
#if defined( _WIN32 ) && (!defined( _NO_COM ) || defined( DEFINE_GUID ))
DEFINE_GUID( IID_IDDVideoPortContainer,		0x6C142760,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
DEFINE_GUID( IID_IDirectDrawVideoPort,		0xB36D93E0,0x2B43,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xB9,0x33,0x56 );

DEFINE_GUID( DDVPTYPE_E_HREFH_VREFH, 0x54F39980L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_E_HREFH_VREFL, 0x92783220L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_E_HREFL_VREFH, 0xA07A02E0L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_E_HREFL_VREFL, 0xE09C77E0L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_CCIR656,	     0xFCA326A0L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_BROOKTREE,     0x1352A560L,0xDA61,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);
DEFINE_GUID( DDVPTYPE_PHILIPS,	     0x332CF160L,0xDA61,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8);

/*
 * GUIDS used to describe connections
 */

#endif

/*============================================================================
 *
 * DirectDraw Structures
 *
 * Various structures used to invoke DirectDraw.
 *
 *==========================================================================*/

struct IDirectDraw;
struct IDirectDrawSurface;
struct IDirectDrawPalette;
struct IDirectDrawClipper;

typedef struct IDDVideoPortContainer		FAR *LPDDVIDEOPORTCONTAINER;
typedef struct IDirectDrawVideoPort		FAR *LPDIRECTDRAWVIDEOPORT;

typedef struct _DDVIDEOPORTCONNECT	FAR *LPDDVIDEOPORTCONNECT;
typedef struct _DDVIDEOPORTCAPS		FAR *LPDDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC		FAR *LPDDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO		FAR *LPDDVIDEOPORTINFO;
typedef struct _DDVIDEOPORTBANDWIDTH	FAR *LPDDVIDEOPORTBANDWIDTH;
typedef struct _DDVIDEOPORTSTATUS	FAR *LPDDVIDEOPORTSTATUS;

typedef struct IDDVideoPortContainerVtbl DDVIDEOPORTCONTAINERCALLBACKS;
typedef struct IDirectDrawVideoPortVtbl  DIRECTDRAWVIDEOPORTCALLBACKS;


/*
 * API's
 */
typedef HRESULT (FAR PASCAL * LPDDENUMVIDEOCALLBACK)(LPDDVIDEOPORTCAPS, LPVOID);


/*
 * INTERACES FOLLOW:
 *	IDirectDrawVideoPort
 *	IVideoPort
 */

/*
 * IDirectDrawVideoPortContainer
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDDVideoPortContainer
DECLARE_INTERFACE_( IDDVideoPortContainer, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawVideoPort methods ***/
    STDMETHOD(CreateVideoPort)(THIS_ DWORD, LPDDVIDEOPORTDESC, LPDIRECTDRAWVIDEOPORT FAR *, IUnknown FAR *) PURE;
    STDMETHOD(EnumVideoPorts)(THIS_ DWORD, LPDDVIDEOPORTCAPS, LPVOID,LPDDENUMVIDEOCALLBACK ) PURE;
    STDMETHOD(GetVideoPortConnectInfo)(THIS_ DWORD, LPDWORD, LPDDVIDEOPORTCONNECT ) PURE;
    STDMETHOD(QueryVideoPortStatus)(THIS_ DWORD, LPDDVIDEOPORTSTATUS ) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IVideoPortContainer_QueryInterface(p, a, b)         (p)->lpVtbl->QueryInterface(p, a, b)
#define IVideoPortContainer_AddRef(p)                       (p)->lpVtbl->AddRef(p)
#define IVideoPortContainer_Release(p)                      (p)->lpVtbl->Release(p)
#define IVideoPortContainer_CreateVideoPort(p, a, b, c, d)  (p)->lpVtbl->CreateVideoPort(p, a, b, c, d)
#define IVideoPortContainer_EnumVideoPorts(p, a, b, c, d)   (p)->lpVtbl->EnumVideoPorts(p, a, b, c, d)
#define IVideoPortContainer_GetVideoPortConnectInfo(p, a, b, c) (p)->lpVtbl->GetVideoPortConnectInfo(p, a, b, c)
#define IVideoPortContainer_QueryVideoPortStatus(p, a, b)   (p)->lpVtbl->QueryVideoPortStatus(p, a, b)
#else
#define IVideoPortContainer_QueryInterface(p, a, b)         (p)->QueryInterface(a, b)
#define IVideoPortContainer_AddRef(p)                       (p)->AddRef()
#define IVideoPortContainer_Release(p)                      (p)->Release()
#define IVideoPortContainer_CreateVideoPort(p, a, b, c, d)  (p)->CreateVideoPort(a, b, c, d)
#define IVideoPortContainer_EnumVideoPorts(p, a, b, c, d)   (p)->EnumVideoPorts(a, b, c, d)
#define IVideoPortContainer_GetVideoPortConnectInfo(p, a, b, c) (p)->GetVideoPortConnectInfo(a, b, c)
#define IVideoPortContainer_QueryVideoPortStatus(p, a, b)   (p)->QueryVideoPortStatus(a, b)
#endif

#endif


/*
 * IDirectDrawVideoPort
 */
#if defined( _WIN32 ) && !defined( _NO_COM )
#undef INTERFACE
#define INTERFACE IDirectDrawVideoPort
DECLARE_INTERFACE_( IDirectDrawVideoPort, IUnknown )
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IVideoPort methods ***/
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE, DWORD) PURE;
    STDMETHOD(GetBandwidthInfo)(THIS_ LPDDPIXELFORMAT, DWORD, DWORD, DWORD, LPDDVIDEOPORTBANDWIDTH) PURE;
    STDMETHOD(GetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
    STDMETHOD(GetInputFormats)(THIS_ LPDWORD, LPDDPIXELFORMAT, DWORD) PURE;
    STDMETHOD(GetOutputFormats)(THIS_ LPDDPIXELFORMAT, LPDWORD, LPDDPIXELFORMAT, DWORD) PURE;
    STDMETHOD(GetFieldPolarity)(THIS_ LPBOOL) PURE;
    STDMETHOD(GetVideoLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVideoSignalStatus)(THIS_ LPDWORD) PURE;
    STDMETHOD(SetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
    STDMETHOD(SetTargetSurface)(THIS_ LPDIRECTDRAWSURFACE, DWORD) PURE;
    STDMETHOD(StartVideo)(THIS_ LPDDVIDEOPORTINFO) PURE;
    STDMETHOD(StopVideo)(THIS) PURE;
    STDMETHOD(UpdateVideo)(THIS_ LPDDVIDEOPORTINFO) PURE;
    STDMETHOD(WaitForSync)(THIS_ DWORD, DWORD, DWORD) PURE;
};

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IVideoPort_QueryInterface(p,a,b)        (p)->lpVtbl->QueryInterface(p,a,b)
#define IVideoPort_AddRef(p)                    (p)->lpVtbl->AddRef(p)
#define IVideoPort_Release(p)                   (p)->lpVtbl->Release(p)
#define IVideoPort_SetTargetSurface(p,a,b)	(p)->lpVtbl->SetTargetSurface(p,a,b)
#define IVideoPort_Flip(p,a,b)			(p)->lpVtbl->Flip(p,a,b)
#define IVideoPort_GetBandwidthInfo(p,a,b,c,d,e) (p)->lpVtbl->GetBandwidthInfo(p,a,b,c,d,e)
#define IVideoPort_GetColorControls(p,a) 	(p)->lpVtbl->GetColorControls(p,a)
#define IVideoPort_GetInputFormats(p,a,b,c)	(p)->lpVtbl->GetInputFormats(p,a,b,c)
#define IVideoPort_GetOutputFormats(p,a,b,c,d)	(p)->lpVtbl->GetOutputFormats(p,a,b,c,d)
#define IVideoPort_GetFieldPolarity(p,a)	(p)->lpVtbl->GetFieldPolarity(p,a)
#define IVideoPort_GetVideoLine(p,a)		(p)->lpVtbl->GetVideoLine(p,a)
#define IVideoPort_GetVideoSignalStatus(p,a)	(p)->lpVtbl->GetVideoSignalStatus(p,a)
#define IVideoPort_SetColorControls(p,a)	(p)->lpVtbl->SetColorControls(p,a)
#define IVideoPort_StartVideo(p,a)		(p)->lpVtbl->StartVideo(p,a)
#define IVideoPort_StopVideo(p)			(p)->lpVtbl->StopVideo(p)
#define IVideoPort_UpdateVideo(p,a)		(p)->lpVtbl->UpdateVideo(p,a)
#define IVideoPort_WaitForSync(p,a,b,c)		(p)->lpVtbl->WaitForSync(p,a,b,c)
#else
#define IVideoPort_QueryInterface(p,a,b)        (p)->QueryInterface(a,b)
#define IVideoPort_AddRef(p)                    (p)->AddRef()
#define IVideoPort_Release(p)                   (p)->Release()
#define IVideoPort_SetTargetSurface(p,a,b)	(p)->SetTargetSurface(a,b)
#define IVideoPort_Flip(p,a,b)			(p)->Flip(a,b)
#define IVideoPort_GetBandwidthInfo(p,a,b,c,d,e) (p)->GetBandwidthInfo(a,b,c,d,e)
#define IVideoPort_GetColorControls(p,a) 	(p)->GetColorControls(a)
#define IVideoPort_GetInputFormats(p,a,b,c)	(p)->GetInputFormats(a,b,c)
#define IVideoPort_GetOutputFormats(p,a,b,c,d)	(p)->GetOutputFormats(a,b,c,d)
#define IVideoPort_GetFieldPolarity(p,a)	(p)->GetFieldPolarity(a)
#define IVideoPort_GetVideoLine(p,a)		(p)->GetVideoLine(a)
#define IVideoPort_GetVideoSignalStatus(p,a)	(p)->GetVideoSignalStatus(a)
#define IVideoPort_SetColorControls(p,a)	(p)->SetColorControls(a)
#define IVideoPort_StartVideo(p,a)		(p)->StartVideo(a)
#define IVideoPort_StopVideo(p)			(p)->StopVideo()
#define IVideoPort_UpdateVideo(p,a)		(p)->UpdateVideo(a)
#define IVideoPort_WaitForSync(p,a,b,c)		(p)->WaitForSync(a,b,c)
#endif

#endif


/*
 * DDVIDEOPORTCONNECT
 */
typedef struct _DDVIDEOPORTCONNECT
{
    DWORD dwSize;           // size of the DDVIDEOPORTCONNECT structure
    DWORD dwPortWidth;      // Width of the video port
    GUID  guidTypeID;       // Description of video port connection
    DWORD dwFlags;          // Connection flags
    ULONG_PTR dwReserved1;      // Reserved, set to zero.
} DDVIDEOPORTCONNECT;


/*
 * DDVIDEOPORTCAPS
 */
typedef struct _DDVIDEOPORTCAPS
{
    DWORD dwSize;			// size of the DDVIDEOPORTCAPS structure
    DWORD dwFlags;			// indicates which fields contain data
    DWORD dwMaxWidth;			// max width of the video port field
    DWORD dwMaxVBIWidth;		// max width of the VBI data
    DWORD dwMaxHeight; 			// max height of the video port field
    DWORD dwVideoPortID;		// Video port ID (0 - (dwMaxVideoPorts -1))
    DWORD dwCaps;			// Video port capabilities
    DWORD dwFX;				// More video port capabilities
    DWORD dwNumAutoFlipSurfaces;	// Max number of autoflippable surfaces allowed
    DWORD dwAlignVideoPortBoundary;	// Byte restriction of placement within the surface
    DWORD dwAlignVideoPortPrescaleWidth;// Byte restriction of width after prescaling
    DWORD dwAlignVideoPortCropBoundary;	// Byte restriction of left cropping
    DWORD dwAlignVideoPortCropWidth;	// Byte restriction of cropping width
    DWORD dwPreshrinkXStep;		// Width can be shrunk in steps of 1/x
    DWORD dwPreshrinkYStep;		// Height can be shrunk in steps of 1/x
    DWORD dwNumVBIAutoFlipSurfaces;	// Max number of VBI autoflippable surfaces allowed
    DWORD dwNumPreferredAutoflip;	// Optimal number of autoflippable surfaces for hardware
    WORD  wNumFilterTapsX;              // Number of taps the prescaler uses in the X direction (0 - no prescale, 1 - replication, etc.)
    WORD  wNumFilterTapsY;              // Number of taps the prescaler uses in the Y direction (0 - no prescale, 1 - replication, etc.)
} DDVIDEOPORTCAPS;

/*
 * The dwMaxWidth and dwMaxVBIWidth members are valid
 */
#define DDVPD_WIDTH		0x00000001l

/*
 * The dwMaxHeight member is valid
 */
#define DDVPD_HEIGHT		0x00000002l

/*
 * The dwVideoPortID member is valid
 */
#define DDVPD_ID		0x00000004l

/*
 * The dwCaps member is valid
 */
#define DDVPD_CAPS		0x00000008l

/*
 * The dwFX member is valid
 */
#define DDVPD_FX		0x00000010l

/*
 * The dwNumAutoFlipSurfaces member is valid
 */
#define DDVPD_AUTOFLIP		0x00000020l

/*
 * All of the alignment members are valid
 */
#define DDVPD_ALIGN		0x00000040l

/*
 * The dwNumPreferredAutoflip member is valid
 */
#define DDVPD_PREFERREDAUTOFLIP 0x00000080l

/*
 * The wNumFilterTapsX and wNumFilterTapsY fields are valid
 */
#define DDVPD_FILTERQUALITY     0x00000100l

/*
 * DDVIDEOPORTDESC
 */
typedef struct _DDVIDEOPORTDESC
{
    DWORD dwSize;			// size of the DDVIDEOPORTDESC structure
    DWORD dwFieldWidth;			// width of the video port field
    DWORD dwVBIWidth;			// width of the VBI data
    DWORD dwFieldHeight;		// height of the video port field
    DWORD dwMicrosecondsPerField;	// Microseconds per video field
    DWORD dwMaxPixelsPerSecond;		// Maximum pixel rate per second
    DWORD dwVideoPortID;		// Video port ID (0 - (dwMaxVideoPorts -1))
    DWORD dwReserved1;			// Reserved for future use - set to zero (struct padding)
    DDVIDEOPORTCONNECT VideoPortType; 	// Description of video port connection
    ULONG_PTR dwReserved2;		// Reserved for future use - set to zero
    ULONG_PTR dwReserved3;		// Reserved for future use - set to zero
} DDVIDEOPORTDESC;


/*
 * DDVIDEOPORTINFO
 */
typedef struct _DDVIDEOPORTINFO
{
    DWORD dwSize;			// Size of the structure
    DWORD dwOriginX;			// Placement of the video data within the surface.
    DWORD dwOriginY;			// Placement of the video data within the surface.
    DWORD dwVPFlags;			// Video port options
    RECT rCrop;				// Cropping rectangle (optional).
    DWORD dwPrescaleWidth;		// Determines pre-scaling/zooming in the X direction (optional).
    DWORD dwPrescaleHeight;		// Determines pre-scaling/zooming in the Y direction (optional).
    LPDDPIXELFORMAT lpddpfInputFormat;	// Video format written to the video port
    LPDDPIXELFORMAT lpddpfVBIInputFormat; // Input format of the VBI data
    LPDDPIXELFORMAT lpddpfVBIOutputFormat;// Output format of the data
    DWORD dwVBIHeight;			// Specifies the number of lines of data within the vertical blanking interval.
    ULONG_PTR dwReserved1;		// Reserved for future use - set to zero
    ULONG_PTR dwReserved2;		// Reserved for future use - set to zero
} DDVIDEOPORTINFO;


/*
 * DDVIDEOPORTBANDWIDTH
 */
typedef struct _DDVIDEOPORTBANDWIDTH
{
    DWORD dwSize;			// Size of the structure
    DWORD dwCaps;
    DWORD dwOverlay;           		// Zoom factor at which overlay is supported
    DWORD dwColorkey;			// Zoom factor at which overlay w/ colorkey is supported
    DWORD dwYInterpolate;		// Zoom factor at which overlay w/ Y interpolation is supported
    DWORD dwYInterpAndColorkey;		// Zoom factor at which ovelray w/ Y interpolation and colorkeying is supported
    ULONG_PTR dwReserved1;		// Reserved for future use - set to zero
    ULONG_PTR dwReserved2;		// Reserved for future use - set to zero
} DDVIDEOPORTBANDWIDTH;


/*
 * DDVIDEOPORTSTATUS
 */
typedef struct _DDVIDEOPORTSTATUS
{
    DWORD dwSize;			// Size of the structure
    BOOL  bInUse;			// TRUE if video port is currently being used
    DWORD dwFlags;           		// Currently not used
    DWORD dwReserved1;			// Reserved for future use
    DDVIDEOPORTCONNECT VideoPortType;	// Information about the connection
    ULONG_PTR dwReserved2;		// Reserved for future use
    ULONG_PTR dwReserved3;		// Reserved for future use
} DDVIDEOPORTSTATUS;

/*============================================================================
 *
 * Video Port Flags
 *
 * All flags are bit flags.
 *
 *==========================================================================*/

/****************************************************************************
 *
 * VIDEOPORT DDVIDEOPORTCONNECT FLAGS
 *
 ****************************************************************************/

/*
 * When this is set by the driver and passed to the client, this
 * indicates that the video port is capable of double clocking the data.
 * When this is set by the client, this indicates that the video port
 * should enable double clocking.  This flag is only valid with external
 * syncs.
 */
#define DDVPCONNECT_DOUBLECLOCK			0x00000001l

/*
 * When this is set by the driver and passed to the client, this
 * indicates that the video port is capable of using an external VACT
 * signal. When this is set by the client, this indicates that the
 * video port should use the external VACT signal.
 */
#define DDVPCONNECT_VACT			0x00000002l

/*
 * When this is set by the driver and passed to the client, this
 * indicates that the video port is capable of treating even fields
 * like odd fields and visa versa.  When this is set by the client,
 * this indicates that the video port should treat even fields like odd
 * fields.
 */
#define DDVPCONNECT_INVERTPOLARITY		0x00000004l

/*
 * Indicates that any data written to the video port during the VREF
 * period will not be written into the frame buffer. This flag is read only.
 */
#define DDVPCONNECT_DISCARDSVREFDATA		0x00000008l

/*
 * When this is set be the driver and passed to the client, this
 * indicates that the device will write half lines into the frame buffer
 * if half lines are provided by the decoder.  If this is set by the client,
 * this indicates that the decoder will be supplying half lines.
 */
#define DDVPCONNECT_HALFLINE			0x00000010l

/*
 * Indicates that the signal is interlaced. This flag is only
 * set by the client.
 */
#define DDVPCONNECT_INTERLACED			0x00000020l

/*
 * Indicates that video port is shareable and that this video port
 * will use the even fields.  This flag is only set by the client.
 */
#define DDVPCONNECT_SHAREEVEN			0x00000040l

/*
 * Indicates that video port is shareable and that this video port
 * will use the odd fields.  This flag is only set by the client.
 */
#define DDVPCONNECT_SHAREODD			0x00000080l

/****************************************************************************
 *
 * VIDEOPORT DDVIDEOPORTDESC CAPS
 *
 ****************************************************************************/

/*
 * Flip can be performed automatically to avoid tearing.
 */
#define DDVPCAPS_AUTOFLIP			0x00000001l

/*
 * Supports interlaced video
 */
#define DDVPCAPS_INTERLACED			0x00000002l

/*
 * Supports non-interlaced video
 */
#define DDVPCAPS_NONINTERLACED			0x00000004l

/*
 * Indicates that the device can return whether the current field
 * of an interlaced signal is even or odd.
 */
#define DDVPCAPS_READBACKFIELD			0x00000008l

/*
 * Indicates that the device can return the current line of video
 * being written into the frame buffer.
 */
#define DDVPCAPS_READBACKLINE			0x00000010l

/*
 * Allows two gen-locked video streams to share a single video port,
 * where one stream uses the even fields and the other uses the odd
 * fields. Separate parameters (including address, scaling,
 * cropping, etc.) are maintained for both fields.)
 */
#define DDVPCAPS_SHAREABLE			0x00000020l

/*
 * Even fields of video can be automatically discarded.
 */
#define DDVPCAPS_SKIPEVENFIELDS			0x00000040l

/*
 * Odd fields of video can be automatically discarded.
 */
#define DDVPCAPS_SKIPODDFIELDS			0x00000080l

/*
 * Indicates that the device is capable of driving the graphics
 * VSYNC with the video port VSYNC.
 */
#define DDVPCAPS_SYNCMASTER			0x00000100l

/*
 * Indicates that data within the vertical blanking interval can
 * be written to a different surface.
 */
#define DDVPCAPS_VBISURFACE			0x00000200l

/*
 * Indicates that the video port can perform color operations
 * on the incoming data before it is written to the frame buffer.
 */
#define DDVPCAPS_COLORCONTROL			0x00000400l

/*
 * Indicates that the video port can accept VBI data in a different
 * width or format than the regular video data.
 */
#define DDVPCAPS_OVERSAMPLEDVBI			0x00000800l

/*
 * Indicates that the video port can write data directly to system memory
 */
#define DDVPCAPS_SYSTEMMEMORY			0x00001000l

/*
 * Indicates that the VBI and video portions of the video stream can
 * be controlled by an independent processes.
 */
#define DDVPCAPS_VBIANDVIDEOINDEPENDENT		0x00002000l

/*
 * Indicates that the video port contains high quality hardware
 * de-interlacing hardware that should be used instead of the
 * bob/weave algorithms.
 */
#define DDVPCAPS_HARDWAREDEINTERLACE		0x00004000l


/****************************************************************************
 *
 * VIDEOPORT DDVIDEOPORTDESC FX
 *
 ****************************************************************************/

/*
 * Limited cropping is available to crop out the vertical interval data.
 */
#define DDVPFX_CROPTOPDATA			0x00000001l

/*
 * Incoming data can be cropped in the X direction before it is written
 * to the surface.
 */
#define DDVPFX_CROPX				0x00000002l

/*
 * Incoming data can be cropped in the Y direction before it is written
 * to the surface.
 */
#define DDVPFX_CROPY				0x00000004l

/*
 * Supports interleaving interlaced fields in memory.
 */
#define DDVPFX_INTERLEAVE			0x00000008l

/*
 * Supports mirroring left to right as the video data is written
 * into the frame buffer.
 */
#define DDVPFX_MIRRORLEFTRIGHT			0x00000010l

/*
 * Supports mirroring top to bottom as the video data is written
 * into the frame buffer.
 */
#define DDVPFX_MIRRORUPDOWN			0x00000020l

/*
 * Data can be arbitrarily shrunk in the X direction before it
 * is written to the surface.
 */
#define DDVPFX_PRESHRINKX			0x00000040l

/*
 * Data can be arbitrarily shrunk in the Y direction before it
 * is written to the surface.
 */
#define DDVPFX_PRESHRINKY			0x00000080l

/*
 * Data can be binary shrunk (1/2, 1/4, 1/8, etc.) in the X
 * direction before it is written to the surface.
 */
#define DDVPFX_PRESHRINKXB			0x00000100l

/*
 * Data can be binary shrunk (1/2, 1/4, 1/8, etc.) in the Y
 * direction before it is written to the surface.
 */
#define DDVPFX_PRESHRINKYB			0x00000200l

/*
 * Data can be shrunk in increments of 1/x in the X direction
 * (where X is specified in the DDVIDEOPORTCAPS.dwPreshrinkXStep)
 * before it is written to the surface.
 */
#define DDVPFX_PRESHRINKXS			0x00000400l

/*
 * Data can be shrunk in increments of 1/x in the Y direction
 * (where X is specified in the DDVIDEOPORTCAPS.dwPreshrinkYStep)
 * before it is written to the surface.
 */
#define DDVPFX_PRESHRINKYS			0x00000800l

/*
 * Data can be arbitrarily stretched in the X direction before
 * it is written to the surface.
 */
#define DDVPFX_PRESTRETCHX			0x00001000l

/*
 * Data can be arbitrarily stretched in the Y direction before
 * it is written to the surface.
 */
#define DDVPFX_PRESTRETCHY			0x00002000l

/*
 * Data can be integer stretched in the X direction before it is
 * written to the surface.
 */
#define DDVPFX_PRESTRETCHXN			0x00004000l

/*
 * Data can be integer stretched in the Y direction before it is
 * written to the surface.
 */
#define DDVPFX_PRESTRETCHYN			0x00008000l

/*
 * Indicates that data within the vertical blanking interval can
 * be converted independently of the remaining video data.
 */
#define DDVPFX_VBICONVERT			0x00010000l

/*
 * Indicates that scaling can be disabled for data within the
 * vertical blanking interval.
 */
#define DDVPFX_VBINOSCALE			0x00020000l

/*
 * Indicates that the video data can ignore the left and right
 * cropping coordinates when cropping oversampled VBI data.
 */
#define DDVPFX_IGNOREVBIXCROP			0x00040000l

/*
 * Indicates that interleaving can be disabled for data within the
 * vertical blanking interval.
 */
#define DDVPFX_VBINOINTERLEAVE			0x00080000l


/****************************************************************************
 *
 * VIDEOPORT DDVIDEOPORTINFO FLAGS
 *
 ****************************************************************************/

/*
 * Perform automatic flipping.   Auto-flipping is performed between
 * the overlay surface that was attached to the video port using
 * IDirectDrawVideoPort::AttachSurface and the overlay surfaces that
 * are attached to the surface via the IDirectDrawSurface::AttachSurface
 * method.  The flip order is the order in which the overlay surfaces
 * were. attached.
 */
#define DDVP_AUTOFLIP				0x00000001l

/*
 * Perform conversion using the ddpfOutputFormat information.
 */
#define DDVP_CONVERT				0x00000002l

/*
 * Perform cropping using the specified rectangle.
 */
#define DDVP_CROP				0x00000004l

/*
 * Indicates that interlaced fields should be interleaved in memory.
 */
#define DDVP_INTERLEAVE				0x00000008l

/*
 * Indicates that the data should be mirrored left to right as it's
 * written into the frame buffer.
 */
#define DDVP_MIRRORLEFTRIGHT			0x00000010l

/*
 * Indicates that the data should be mirrored top to bottom as it's
 * written into the frame buffer.
 */
#define DDVP_MIRRORUPDOWN			0x00000020l

/*
 * Perform pre-scaling/zooming based on the pre-scale parameters.
 */
#define DDVP_PRESCALE				0x00000040l

/*
 * Ignore input of even fields.
 */
#define DDVP_SKIPEVENFIELDS			0x00000080l

/*
 * Ignore input of odd fields.
 */
#define DDVP_SKIPODDFIELDS			0x00000100l

/*
 * Drive the graphics VSYNCs using the video port VYSNCs.
 */
#define DDVP_SYNCMASTER				0x00000200l

/*
 * The ddpfVBIOutputFormatFormat member contains data that should be used
 * to convert the data within the vertical blanking interval.
 */
#define DDVP_VBICONVERT				0x00000400l

/*
 * Indicates that data within the vertical blanking interval
 * should not be scaled.
 */
#define DDVP_VBINOSCALE				0x00000800l

/*
 * Indicates that these bob/weave decisions should not be
 * overriden by other interfaces.
 */
#define DDVP_OVERRIDEBOBWEAVE			0x00001000l

/*
 * Indicates that the video data should ignore the left and right
 * cropping coordinates when cropping the VBI data.
 */
#define DDVP_IGNOREVBIXCROP			0x00002000l

/*
 * Indicates that interleaving can be disabled for data within the
 * vertical blanking interval.
 */
#define DDVP_VBINOINTERLEAVE			0x00004000l

/*
 * Indicates that the video port should use the hardware
 * de-interlacing hardware.
 */
#define DDVP_HARDWAREDEINTERLACE		0x00008000l

/****************************************************************************
 *
 * DIRIRECTDRAWVIDEOPORT GETINPUTFORMAT/GETOUTPUTFORMAT FLAGS
 *
 ****************************************************************************/

/*
 * Return formats for the video data
 */
#define DDVPFORMAT_VIDEO			0x00000001l

/*
 * Return formats for the VBI data
 */
#define DDVPFORMAT_VBI				0x00000002l

/****************************************************************************
 *
 * DIRIRECTDRAWVIDEOPORT SETTARGETSURFACE FLAGS
 *
 ****************************************************************************/

/*
 * Surface should receive video data (and VBI data if a surface
 * is not explicitly attached for that purpose)
 */
#define DDVPTARGET_VIDEO			0x00000001l

/*
 * Surface should receive VBI data
 */
#define DDVPTARGET_VBI				0x00000002l


/****************************************************************************
 *
 * DIRIRECTDRAWVIDEOPORT WAITFORSYNC FLAGS
 *
 ****************************************************************************/

/*
 * Waits until the beginning of the next VSYNC
 */
#define DDVPWAIT_BEGIN				0x00000001l

/*
 * Waits until the end of the next/current VSYNC
 */
#define DDVPWAIT_END				0x00000002l

/*
 * Waits until the beginning of the specified line
 */
#define DDVPWAIT_LINE				0x00000003l

/****************************************************************************
 *
 * DIRECTDRAWVIDEOPORT FLIP FLAGS
 *
 ****************************************************************************/

/*
 * Flips the normal video surface
 */
#define DDVPFLIP_VIDEO				0x00000001l

/*
 * Flips the VBI surface
 */
#define DDVPFLIP_VBI				0x00000002l

/****************************************************************************
 *
 * DIRIRECTDRAWVIDEOPORT GETVIDEOSIGNALSTATUS VALUES
 *
 ****************************************************************************/

/*
 * No video signal is present at the video port
 */
#define DDVPSQ_NOSIGNAL				0x00000001l

/*
 * A valid video signal is present at the video port
 */
#define DDVPSQ_SIGNALOK				0x00000002l

/****************************************************************************
 *
 * VIDEOPORTBANDWIDTH Flags
 *
 ****************************************************************************/

/*
 * The specified height/width refer to the size of the video port data
 * written into memory, after prescaling has occured.
 */
#define DDVPB_VIDEOPORT				0x00000001l

/*
 * The specified height/width refer to the source size of the overlay.
 */
#define DDVPB_OVERLAY				0x00000002l

/*
 * This is a query for the device to return which caps this device requires.
 */
#define DDVPB_TYPE				0x00000004l

/****************************************************************************
 *
 * VIDEOPORTBANDWIDTH Caps
 *
 ****************************************************************************/

/*
 * The bandwidth for this device is dependant on the overlay source size.
 */
#define DDVPBCAPS_SOURCE			0x00000001l

/*
 * The bandwidth for this device is dependant on the overlay destination
 * size.
 */
#define DDVPBCAPS_DESTINATION			0x00000002l

/****************************************************************************
 *
 * DDVIDEOPORTCONTAINER CreateVideoPort flags
 *
 ****************************************************************************/

/*
 * The process only wants to control the VBI portion of the video stream.
 */
#define DDVPCREATE_VBIONLY			0x00000001l

/*
 * The process only wants to control the non-VBI (video) portion of
 * the video stream.
 */
#define DDVPCREATE_VIDEOONLY			0x00000002l

/****************************************************************************
 *
 * DDVIDEOPORTSTATUS flags
 *
 ****************************************************************************/

/*
 * The video port interface is only controlling the VBI portion of the
 * video stream
 */
#define DDVPSTATUS_VBIONLY			0x00000001l

/*
 * The video port interface is only controlling the video portion of the
 * video stream
 */
#define DDVPSTATUS_VIDEOONLY			0x00000002l


#ifdef __cplusplus
};
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\dx8\dx95type.h ===
/******************************Module*Header*******************************\
*
* Module Name: dx95type.h
*
* Portability module for NT kernel-mode DirectX components created from
* Win95 sources
*
* Copyright (c) 1996-1997 Microsoft Corp.
*
\**************************************************************************/

#ifndef __DX95TYPE_H__
#define __DX95TYPE_H__

// Basic includes
#ifndef NODXINCLUDES
#ifdef WINNT
#include <stddef.h>
// Includes ddrawint.h and d3dnthal.h
#include <winddi.h>
#else // WINNT
#include <ddrawi.h>
#include <d3dhal.h>
#endif // WINNT
#endif // NODXINCLUDES

// Simple memory allocation of N bytes
#ifndef NODXMALLOC
#ifdef WINNT
#define DXMALLOC(n) EngAllocMem(0, n, 'amxD')
#define DXMALLOCZ(n) EngAllocMem(FL_ZERO_MEMORY, n, 'amxD')
#define DXFREE(p) EngFreeMem(p)
#else // WINNT
#define DXMALLOC(n) HeapAlloc(GetProcessHeap(), 0, n)
#define DXMALLOCZ(n) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, n)
#define DXFREE(n) HeapFree(GetProcessHeap(), 0, n)
#endif // WINNT
#endif // NODXMALLOC

// Surface and palette access macros
#ifndef NODXLCL
#ifdef WINNT
#define DDS_LCL(pdds) (pdds)
#define DDP_LCL(pddp) (pddp)
#else // WINNT
#define DDS_LCL(pdds) (((DDRAWI_DDRAWSURFACE_INT *)(pdds))->lpLcl)
#define DDP_LCL(pddp) (((DDRAWI_DDRAWPALETTE_INT *)(pddp))->lpLcl)
#endif // WINNT
#define DDS_LCL_OR_NULL(pdds) ((pdds) == NULL ? NULL : DDS_LCL(pdds))
#define DDP_LCL_OR_NULL(pddp) ((pddp) == NULL ? NULL : DDP_LCL(pddp))
#endif // NODXLCL

// Typedefs and defines to create a Win95-like compilation environment

#ifndef NODX95TYPES
#ifdef WINNT

#if AZN
typedef D3DNTHALDEVICEDESC_V1           D3DDEVICEDESC_V1;
#endif

typedef PDD_SURFACE_LOCAL               LPDDRAWI_DDRAWSURFACE_LCL;
typedef PDD_SURFACE_MORE                LPDDRAWI_DDRAWSURFACE_MORE;
typedef PDD_SURFACE_GLOBAL              LPDDRAWI_DDRAWSURFACE_GBL;
typedef PDD_DIRECTDRAW_GLOBAL           LPDDRAWI_DIRECTDRAW_GBL;
typedef PDD_ATTACHLIST                  LPATTACHLIST;

typedef DDNTCORECAPS                    DDCORECAPS;
typedef PDDNTCORECAPS                   LPDDCORECAPS;
typedef DD_HALINFO                      DDHALINFO;
typedef PDD_HALINFO                     LPDDHALINFO;
typedef DD_MORECAPS                     DDMORECAPS;
typedef PDD_MORECAPS                    LPDDMORECAPS;

// DirectDraw HAL function data structures

typedef PDD_CREATEPALETTEDATA           LPDDHAL_CREATEPALETTEDATA;
typedef PDD_CREATESURFACEDATA           LPDDHAL_CREATESURFACEDATA;
typedef PDD_CREATESURFACEEXDATA         LPDDHAL_CREATESURFACEEXDATA;
typedef PDD_CANCREATESURFACEDATA        LPDDHAL_CANCREATESURFACEDATA;
typedef PDD_WAITFORVERTICALBLANKDATA    LPDDHAL_WAITFORVERTICALBLANKDATA;
typedef PDD_DESTROYDRIVERDATA           LPDDHAL_DESTROYDRIVERDATA;
typedef PDD_SETMODEDATA                 LPDDHAL_SETMODEDATA;
typedef PDD_DRVSETCOLORKEYDATA          LPDDHAL_DRVSETCOLORKEYDATA;
typedef PDD_GETSCANLINEDATA             LPDDHAL_GETSCANLINEDATA;
typedef PDD_MAPMEMORYDATA               LPDDHAL_MAPMEMORYDATA;
typedef PDD_SETEXCLUSIVEMODEDATA        LPDDHAL_SETEXCLUSIVEMODEDATA;
typedef PDD_FLIPTOGDISURFACEDATA        LPDDHAL_FLIPTOGDISURFACEDATA;
typedef PDD_UPDATENONLOCALHEAPDATA      LPDDHAL_UPDATENONLOCALHEAPDATA;
typedef PDD_GETHEAPALIGNMENTDATA        LPDDHAL_GETHEAPALIGNMENTDATA;
typedef DD_CREATEPALETTEDATA            DDHAL_CREATEPALETTEDATA;
typedef DD_CREATESURFACEDATA            DDHAL_CREATESURFACEDATA;
typedef DD_CREATESURFACEEXDATA          DDHAL_CREATESURFACEEXDATA;
typedef DD_CANCREATESURFACEDATA         DDHAL_CANCREATESURFACEDATA;
typedef DD_WAITFORVERTICALBLANKDATA     DDHAL_WAITFORVERTICALBLANKDATA;
typedef DD_DRVSETCOLORKEYDATA           DDHAL_DRVSETCOLORKEYDATA;
typedef DD_GETSCANLINEDATA              DDHAL_GETSCANLINEDATA;
typedef DD_MAPMEMORYDATA                DDHAL_MAPMEMORYDATA;
typedef DD_SETEXCLUSIVEMODEDATA         DDHAL_SETEXCLUSIVEMODEDATA;
typedef DD_FLIPTOGDISURFACEDATA         DDHAL_FLIPTOGDISURFACEDATA;
typedef DD_UPDATENONLOCALHEAPDATA       DDHAL_UPDATENONLOCALHEAPDATA;

typedef PDD_DESTROYPALETTEDATA          LPDDHAL_DESTROYPALETTEDATA;
typedef PDD_SETENTRIESDATA              LPDDHAL_SETENTRIESDATA;
typedef DD_DESTROYPALETTEDATA           DDHAL_DESTROYPALETTEDATA;
typedef DD_SETENTRIESDATA               DDHAL_SETENTRIESDATA;

typedef PDD_BLTDATA                     LPDDHAL_BLTDATA;
typedef PDD_LOCKDATA                    LPDDHAL_LOCKDATA;
typedef PDD_UNLOCKDATA                  LPDDHAL_UNLOCKDATA;
typedef PDD_UPDATEOVERLAYDATA           LPDDHAL_UPDATEOVERLAYDATA;
typedef PDD_SETOVERLAYPOSITIONDATA      LPDDHAL_SETOVERLAYPOSITIONDATA;
typedef PDD_SETPALETTEDATA              LPDDHAL_SETPALETTEDATA;
typedef PDD_FLIPDATA                    LPDDHAL_FLIPDATA;
typedef PDD_DESTROYSURFACEDATA          LPDDHAL_DESTROYSURFACEDATA;
typedef PDD_SETCLIPLISTDATA             LPDDHAL_SETCLIPLISTDATA;
typedef PDD_ADDATTACHEDSURFACEDATA      LPDDHAL_ADDATTACHEDSURFACEDATA;
typedef PDD_SETCOLORKEYDATA             LPDDHAL_SETCOLORKEYDATA;
typedef PDD_GETBLTSTATUSDATA            LPDDHAL_GETBLTSTATUSDATA;
typedef PDD_GETFLIPSTATUSDATA           LPDDHAL_GETFLIPSTATUSDATA;
typedef PDD_GETAVAILDRIVERMEMORYDATA    LPDDHAL_GETAVAILDRIVERMEMORYDATA;
typedef PDD_GETDRIVERINFODATA           LPDDHAL_GETDRIVERINFODATA;
typedef PDD_GETDRIVERSTATEDATA          LPDDHAL_GETDRIVERSTATEDATA;
typedef PDD_DESTROYDDLOCALDATA          LPDDHAL_DESTROYDDLOCALDATA;
typedef DD_BLTDATA                      DDHAL_BLTDATA;
typedef DD_LOCKDATA                     DDHAL_LOCKDATA;
typedef DD_UNLOCKDATA                   DDHAL_UNLOCKDATA;
typedef DD_UPDATEOVERLAYDATA            DDHAL_UPDATEOVERLAYDATA;
typedef DD_SETOVERLAYPOSITIONDATA       DDHAL_SETOVERLAYPOSITIONDATA;
typedef DD_SETPALETTEDATA               DDHAL_SETPALETTEDATA;
typedef DD_FLIPDATA                     DDHAL_FLIPDATA;
typedef DD_DESTROYSURFACEDATA           DDHAL_DESTROYSURFACEDATA;
typedef DD_SETCLIPLISTDATA              DDHAL_SETCLIPLISTDATA;
typedef DD_ADDATTACHEDSURFACEDATA       DDHAL_ADDATTACHEDSURFACEDATA;
typedef DD_SETCOLORKEYDATA              DDHAL_SETCOLORKEYDATA;
typedef DD_GETBLTSTATUSDATA             DDHAL_GETBLTSTATUSDATA;
typedef DD_GETFLIPSTATUSDATA            DDHAL_GETFLIPSTATUSDATA;
typedef DD_GETAVAILDRIVERMEMORYDATA     DDHAL_GETAVAILDRIVERMEMORYDATA;
typedef DD_GETDRIVERINFODATA            DDHAL_GETDRIVERINFODATA;
typedef DD_GETDRIVERSTATEDATA           DDHAL_GETDRIVERSTATEDATA;
typedef DD_DESTROYDDLOCALDATA           DDHAL_DESTROYDDLOCALDATA;

typedef PDD_CANCREATEVPORTDATA          LPDDHAL_CANCREATEVPORTDATA;
typedef PDD_CREATEVPORTDATA             LPDDHAL_CREATEVPORTDATA;
typedef PDD_FLIPVPORTDATA               LPDDHAL_FLIPVPORTDATA;
typedef PDD_GETVPORTCONNECTDATA         LPDDHAL_GETVPORTCONNECTDATA;
typedef PDD_GETVPORTBANDWIDTHDATA       LPDDHAL_GETVPORTBANDWIDTHDATA;
typedef PDD_GETVPORTINPUTFORMATDATA     LPDDHAL_GETVPORTINPUTFORMATDATA;
typedef PDD_GETVPORTOUTPUTFORMATDATA    LPDDHAL_GETVPORTOUTPUTFORMATDATA;
typedef PDD_GETVPORTFIELDDATA           LPDDHAL_GETVPORTFIELDDATA;
typedef PDD_GETVPORTLINEDATA            LPDDHAL_GETVPORTLINEDATA;
typedef PDD_DESTROYVPORTDATA            LPDDHAL_DESTROYVPORTDATA;
typedef PDD_GETVPORTFLIPSTATUSDATA      LPDDHAL_GETVPORTFLIPSTATUSDATA;
typedef PDD_UPDATEVPORTDATA             LPDDHAL_UPDATEVPORTDATA;
typedef PDD_WAITFORVPORTSYNCDATA        LPDDHAL_WAITFORVPORTSYNCDATA;
typedef PDD_GETVPORTSIGNALDATA          LPDDHAL_GETVPORTSIGNALDATA;
typedef PDD_VPORTCOLORDATA              LPDDHAL_VPORTCOLORDATA;
typedef DD_CANCREATEVPORTDATA           DDHAL_CANCREATEVPORTDATA;
typedef DD_CREATEVPORTDATA              DDHAL_CREATEVPORTDATA;
typedef DD_FLIPVPORTDATA                DDHAL_FLIPVPORTDATA;
typedef DD_GETVPORTCONNECTDATA          DDHAL_GETVPORTCONNECTDATA;
typedef DD_GETVPORTBANDWIDTHDATA        DDHAL_GETVPORTBANDWIDTHDATA;
typedef DD_GETVPORTINPUTFORMATDATA      DDHAL_GETVPORTINPUTFORMATDATA;
typedef DD_GETVPORTOUTPUTFORMATDATA     DDHAL_GETVPORTOUTPUTFORMATDATA;
typedef DD_GETVPORTFIELDDATA            DDHAL_GETVPORTFIELDDATA;
typedef DD_GETVPORTLINEDATA             DDHAL_GETVPORTLINEDATA;
typedef DD_DESTROYVPORTDATA             DDHAL_DESTROYVPORTDATA;
typedef DD_GETVPORTFLIPSTATUSDATA       DDHAL_GETVPORTFLIPSTATUSDATA;
typedef DD_UPDATEVPORTDATA              DDHAL_UPDATEVPORTDATA;
typedef DD_WAITFORVPORTSYNCDATA         DDHAL_WAITFORVPORTSYNCDATA;
typedef DD_GETVPORTSIGNALDATA           DDHAL_GETVPORTSIGNALDATA;
typedef DD_VPORTCOLORDATA               DDHAL_VPORTCOLORDATA;

typedef PDD_COLORCONTROLDATA            LPDDHAL_COLORCONTROLDATA;
typedef DD_COLORCONTROLDATA             DDHAL_COLORCONTROLDATA;

typedef PDD_SYNCSURFACEDATA             LPDDHAL_SYNCSURFACEDATA;
typedef PDD_SYNCVIDEOPORTDATA           LPDDHAL_SYNCVIDEOPORTDATA;
typedef DD_SYNCSURFACEDATA              DDHAL_SYNCSURFACEDATA;
typedef DD_SYNCVIDEOPORTDATA            DDHAL_SYNCVIDEOPORTDATA;

typedef PDD_GETMOCOMPGUIDSDATA          LPDDHAL_GETMOCOMPGUIDSDATA;
typedef PDD_GETMOCOMPFORMATSDATA        LPDDHAL_GETMOCOMPFORMATSDATA;
typedef PDD_CREATEMOCOMPDATA            LPDDHAL_CREATEMOCOMPDATA;
typedef PDD_GETMOCOMPCOMPBUFFDATA       LPDDHAL_GETMOCOMPCOMPBUFFDATA;
typedef PDD_GETINTERNALMOCOMPDATA       LPDDHAL_GETINTERNALMOCOMPDATA;
typedef PDD_BEGINMOCOMPFRAMEDATA        LPDDHAL_BEGINMOCOMPFRAMEDATA;
typedef PDD_ENDMOCOMPFRAMEDATA          LPDDHAL_ENDMOCOMPFRAMEDATA;
typedef PDD_RENDERMOCOMPDATA            LPDDHAL_RENDERMOCOMPDATA;
typedef PDD_QUERYMOCOMPSTATUSDATA       LPDDHAL_QUERYMOCOMPSTATUSDATA;
typedef PDD_DESTROYMOCOMPDATA           LPDDHAL_DESTROYMOCOMPDATA;
typedef DD_GETMOCOMPGUIDSDATA           DDHAL_GETMOCOMPGUIDSDATA;
typedef DD_GETMOCOMPFORMATSDATA         DDHAL_GETMOCOMPFORMATSDATA;
typedef DD_CREATEMOCOMPDATA             DDHAL_CREATEMOCOMPDATA;
typedef DD_GETMOCOMPCOMPBUFFDATA        DDHAL_GETMOCOMPCOMPBUFFDATA;
typedef DD_GETINTERNALMOCOMPDATA        DDHAL_GETINTERNALMOCOMPDATA;
typedef DD_BEGINMOCOMPFRAMEDATA         DDHAL_BEGINMOCOMPFRAMEDATA;
typedef DD_ENDMOCOMPFRAMEDATA           DDHAL_ENDMOCOMPFRAMEDATA;
typedef DD_RENDERMOCOMPDATA             DDHAL_RENDERMOCOMPDATA;
typedef DD_QUERYMOCOMPSTATUSDATA        DDHAL_QUERYMOCOMPSTATUSDATA;
typedef DD_DESTROYMOCOMPDATA            DDHAL_DESTROYMOCOMPDATA;

// DirectDraw HAL call backs

typedef PDD_SETCOLORKEY                 LPDDHAL_SETCOLORKEY;
typedef PDD_CANCREATESURFACE            LPDDHAL_CANCREATESURFACE;
typedef PDD_WAITFORVERTICALBLANK        LPDDHAL_WAITFORVERTICALBLANK;
typedef PDD_CREATESURFACE               LPDDHAL_CREATESURFACE;
typedef PDD_DESTROYDRIVER               LPDDHAL_DESTROYDRIVER;
typedef PDD_SETMODE                     LPDDHAL_SETMODE;
typedef PDD_CREATEPALETTE               LPDDHAL_CREATEPALETTE;
typedef PDD_GETSCANLINE                 LPDDHAL_GETSCANLINE;
typedef PDD_MAPMEMORY                   LPDDHAL_MAPMEMORY;
typedef PDD_GETAVAILDRIVERMEMORY        LPDDHAL_GETAVAILDRIVERMEMORY;
typedef PDD_GETDRIVERINFODATA           LPDDHAL_GETDRIVERINFODATA;
typedef PDD_SYNCSURFACEDATA             LPDDHAL_SYNCSURFACEDATA;
typedef PDD_SYNCVIDEOPORTDATA           LPDDHAL_SYNCVIDEOPORTDATA;
typedef PDD_SETEXCLUSIVEMODE            LPDDHAL_SETEXCLUSIVEMODE;
typedef PDD_FLIPTOGDISURFACE            LPDDHAL_FLIPTOGDISURFACE;

typedef PDD_ALPHABLT                    LPDDHAL_ALPHABLT;
typedef PDD_CREATESURFACEEX             LPDDHAL_CREATESURFACEEX;
typedef PDD_GETDRIVERSTATE              LPDDHAL_GETDRIVERSTATE;

typedef PDD_PALCB_DESTROYPALETTE        LPDDHALPALCB_DESTROYPALETTE;
typedef PDD_PALCB_SETENTRIES            LPDDHALPALCB_SETENTRIES;

typedef PDD_SURFCB_LOCK                 LPDDHALSURFCB_LOCK;
typedef PDD_SURFCB_UNLOCK               LPDDHALSURFCB_UNLOCK;
typedef PDD_SURFCB_BLT                  LPDDHALSURFCB_BLT;
typedef PDD_SURFCB_UPDATEOVERLAY        LPDDHALSURFCB_UPDATEOVERLAY;
typedef PDD_SURFCB_SETOVERLAYPOSITION   LPDDHALSURFCB_SETOVERLAYPOSITION;
typedef PDD_SURFCB_SETPALETTE           LPDDHALSURFCB_SETPALETTE;
typedef PDD_SURFCB_FLIP                 LPDDHALSURFCB_FLIP;
typedef PDD_SURFCB_DESTROYSURFACE       LPDDHALSURFCB_DESTROYSURFACE;
typedef PDD_SURFCB_SETCLIPLIST          LPDDHALSURFCB_SETCLIPLIST;
typedef PDD_SURFCB_ADDATTACHEDSURFACE   LPDDHALSURFCB_ADDATTACHEDSURFACE;
typedef PDD_SURFCB_SETCOLORKEY          LPDDHALSURFCB_SETCOLORKEY;
typedef PDD_SURFCB_GETBLTSTATUS         LPDDHALSURFCB_GETBLTSTATUS;
typedef PDD_SURFCB_GETFLIPSTATUS        LPDDHALSURFCB_GETFLIPSTATUS;

typedef PDD_VPORTCB_CANCREATEVIDEOPORT  LPDDHALVPORTCB_CANCREATEVIDEOPORT;
typedef PDD_VPORTCB_CREATEVIDEOPORT     LPDDHALVPORTCB_CREATEVIDEOPORT;
typedef PDD_VPORTCB_FLIP                LPDDHALVPORTCB_FLIP;
typedef PDD_VPORTCB_GETBANDWIDTH        LPDDHALVPORTCB_GETBANDWIDTH;
typedef PDD_VPORTCB_GETINPUTFORMATS     LPDDHALVPORTCB_GETINPUTFORMATS;
typedef PDD_VPORTCB_GETOUTPUTFORMATS    LPDDHALVPORTCB_GETOUTPUTFORMATS;
typedef PDD_VPORTCB_GETFIELD            LPDDHALVPORTCB_GETFIELD;
typedef PDD_VPORTCB_GETLINE             LPDDHALVPORTCB_GETLINE;
typedef PDD_VPORTCB_GETVPORTCONNECT     LPDDHALVPORTCB_GETVPORTCONNECT;
typedef PDD_VPORTCB_DESTROYVPORT        LPDDHALVPORTCB_DESTROYVPORT;
typedef PDD_VPORTCB_GETFLIPSTATUS       LPDDHALVPORTCB_GETFLIPSTATUS;
typedef PDD_VPORTCB_UPDATE              LPDDHALVPORTCB_UPDATE;
typedef PDD_VPORTCB_WAITFORSYNC         LPDDHALVPORTCB_WAITFORSYNC;
typedef PDD_VPORTCB_GETSIGNALSTATUS     LPDDHALVPORTCB_GETSIGNALSTATUS;
typedef PDD_VPORTCB_COLORCONTROL        LPDDHALVPORTCB_COLORCONTROL;

typedef PDD_MOCOMPCB_GETGUIDS           LPDDHALMOCOMPCB_GETGUIDS;
typedef PDD_MOCOMPCB_GETFORMATS         LPDDHALMOCOMPCB_GETFORMATS;
typedef PDD_MOCOMPCB_CREATE             LPDDHALMOCOMPCB_CREATE;
typedef PDD_MOCOMPCB_GETCOMPBUFFINFO    LPDDHALMOCOMPCB_GETCOMPBUFFINFO;
typedef PDD_MOCOMPCB_GETINTERNALINFO    LPDDHALMOCOMPCB_GETINTERNALINFO;
typedef PDD_MOCOMPCB_BEGINFRAME         LPDDHALMOCOMPCB_BEGINFRAME;
typedef PDD_MOCOMPCB_ENDFRAME           LPDDHALMOCOMPCB_ENDFRAME;
typedef PDD_MOCOMPCB_RENDER             LPDDHALMOCOMPCB_RENDER;
typedef PDD_MOCOMPCB_QUERYSTATUS        LPDDHALMOCOMPCB_QUERYSTATUS;
typedef PDD_MOCOMPCB_DESTROY            LPDDHALMOCOMPCB_DESTROY;

typedef DD_CALLBACKS                    DDHAL_DDCALLBACKS;
typedef DD_PALETTECALLBACKS             DDHAL_DDPALETTECALLBACKS;
typedef DD_SURFACECALLBACKS             DDHAL_DDSURFACECALLBACKS;
typedef DD_VIDEOPORTCALLBACKS           DDHAL_DDVIDEOPORTCALLBACKS;
typedef DD_COLORCONTROLCALLBACKS        DDHAL_DDCOLORCONTROLCALLBACKS;
typedef DD_KERNELCALLBACKS              DDHAL_DDKERNELCALLBACKS;
typedef DD_MOTIONCOMPCALLBACKS          DDHAL_DDMOTIONCOMPCALLBACKS;
typedef DD_MISCELLANEOUS2CALLBACKS      DDHAL_DDMISCELLANEOUS2CALLBACKS;
typedef DD_D3DBUFCALLBACKS              DDHAL_D3DBUFCALLBACKS;
typedef DD_NTCALLBACKS                  DDHAL_DDNTCALLBACKS;

typedef PDD_CALLBACKS                   LPDDHAL_DDCALLBACKS;
typedef PDD_PALETTECALLBACKS            LPDDHAL_DDPALETTECALLBACKS;
typedef PDD_SURFACECALLBACKS            LPDDHAL_DDSURFACECALLBACKS;
typedef PDD_VIDEOPORTCALLBACKS          LPDDHAL_DDVIDEOPORTCALLBACKS;
typedef PDD_COLORCONTROLCALLBACKS       LPDDHAL_DDCOLORCONTROLCALLBACKS;
typedef PDD_KERNELCALLBACKS             LPDDHAL_DDKERNELCALLBACKS;
typedef PDD_MOTIONCOMPCALLBACKS         LPDDHAL_DDMOTIONCOMPCALLBACKS;
typedef PDD_MISCELLANEOUS2CALLBACKS     LPDDHAL_DDMISCELLANEOUS2CALLBACKS;
typedef PDD_D3DBUFCALLBACKS             LPDDHAL_D3DBUFCALLBACKS;
typedef PDD_NTCALLBACKS                 LPDDHAL_DDNTCALLBACKS;

// bit definition for dwFlags in dwPaletteFlags in D3DHAL_DP2SETPALETTE
#define DDRAWIPAL_256       0x00000001l // 256 entry palette
#define DDRAWIPAL_16        0x00000002l // 16 entry palette
#define DDRAWIPAL_GDI       0x00000004l // palette allocated through GDI
#define DDRAWIPAL_STORED_8  0x00000008l // palette stored as 8bpp/entry
#define DDRAWIPAL_STORED_16 0x00000010l // palette stored as 16bpp/entry
#define DDRAWIPAL_STORED_24 0x00000020l // palette stored as 24bpp/entry
#define DDRAWIPAL_EXCLUSIVE 0x00000040l // palette being used in exclusive mode
#define DDRAWIPAL_INHEL     0x00000080l // palette is done in the hel
#define DDRAWIPAL_DIRTY         0x00000100l     // gdi palette out 'o sync
#define DDRAWIPAL_ALLOW256  0x00000200l // can fully update palette
#define DDRAWIPAL_4             0x00000400l     // 4 entry palette
#define DDRAWIPAL_2             0x00000800l     // 2 entry palette
#define DDRAWIPAL_STORED_8INDEX 0x00001000l     // palette stored as 8-bit index into dst palette
#define DDRAWIPAL_ALPHA     0x00002000l // palette entries contain alpha

#if AZN
typedef D3DNTHAL_CALLBACKS              D3DHAL_CALLBACKS;
typedef D3DNTHAL_GLOBALDRIVERDATA       D3DHAL_GLOBALDRIVERDATA;
typedef D3DNTHAL_CONTEXTCREATEDATA      D3DHAL_CONTEXTCREATEDATA;
typedef D3DNTHAL_CONTEXTDESTROYDATA     D3DHAL_CONTEXTDESTROYDATA;
typedef D3DNTHAL_CONTEXTDESTROYALLDATA  D3DHAL_CONTEXTDESTROYALLDATA;
typedef D3DNTHAL_SCENECAPTUREDATA       D3DHAL_SCENECAPTUREDATA;
typedef D3DNTHAL_TEXTURECREATEDATA      D3DHAL_TEXTURECREATEDATA;
typedef D3DNTHAL_TEXTUREDESTROYDATA     D3DHAL_TEXTUREDESTROYDATA;
typedef D3DNTHAL_TEXTURESWAPDATA        D3DHAL_TEXTURESWAPDATA;
typedef D3DNTHAL_TEXTUREGETSURFDATA     D3DHAL_TEXTUREGETSURFDATA;

typedef D3DNTHAL_CALLBACKS2             D3DHAL_CALLBACKS2;
typedef D3DNTHAL_SETRENDERTARGETDATA    D3DHAL_SETRENDERTARGETDATA;

typedef D3DNTHAL_CALLBACKS3             D3DHAL_CALLBACKS3;
typedef D3DNTHAL_CLEAR2DATA             D3DHAL_CLEAR2DATA;
typedef D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA   D3DHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef D3DNTHAL_DRAWPRIMITIVES2DATA    D3DHAL_DRAWPRIMITIVES2DATA;
typedef D3DNTHAL_D3DEXTENDEDCAPS        D3DHAL_D3DEXTENDEDCAPS;

typedef LPD3DNTHAL_CALLBACKS            LPD3DHAL_CALLBACKS;
typedef LPD3DNTHAL_GLOBALDRIVERDATA     LPD3DHAL_GLOBALDRIVERDATA;
typedef LPD3DNTHAL_CONTEXTCREATEDATA    LPD3DHAL_CONTEXTCREATEDATA;
typedef LPD3DNTHAL_CONTEXTDESTROYDATA   LPD3DHAL_CONTEXTDESTROYDATA;
typedef LPD3DNTHAL_CONTEXTDESTROYALLDATA LPD3DHAL_CONTEXTDESTROYALLDATA;
typedef LPD3DNTHAL_SCENECAPTUREDATA     LPD3DHAL_SCENECAPTUREDATA;
typedef LPD3DNTHAL_TEXTURECREATEDATA    LPD3DHAL_TEXTURECREATEDATA;
typedef LPD3DNTHAL_TEXTUREDESTROYDATA   LPD3DHAL_TEXTUREDESTROYDATA;
typedef LPD3DNTHAL_TEXTURESWAPDATA      LPD3DHAL_TEXTURESWAPDATA;
typedef LPD3DNTHAL_TEXTUREGETSURFDATA   LPD3DHAL_TEXTUREGETSURFDATA;

typedef LPD3DNTHAL_CALLBACKS2           LPD3DHAL_CALLBACKS2;
typedef LPD3DNTHAL_SETRENDERTARGETDATA  LPD3DHAL_SETRENDERTARGETDATA;

typedef LPD3DNTHAL_CALLBACKS3           LPD3DHAL_CALLBACKS3;
typedef LPD3DNTHAL_CLEAR2DATA           LPD3DHAL_CLEAR2DATA;
typedef LPD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA LPD3DHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef LPD3DNTHAL_DRAWPRIMITIVES2DATA  LPD3DHAL_DRAWPRIMITIVES2DATA;
typedef LPD3DNTHAL_D3DEXTENDEDCAPS      LPD3DHAL_D3DEXTENDEDCAPS;

#define D3DHAL2_CB32_SETRENDERTARGET          D3DNTHAL2_CB32_SETRENDERTARGET

#define D3DHAL_CONTEXT_BAD              D3DNTHAL_CONTEXT_BAD
#define D3DHAL_OUTOFCONTEXTS            D3DNTHAL_OUTOFCONTEXTS
#define D3DHALSTATE_GET_RENDER          D3DNTHALSTATE_GET_RENDER
#define D3DHAL_SCENE_CAPTURE_START      D3DNTHAL_SCENE_CAPTURE_START
#define D3DHAL_SCENE_CAPTURE_END        D3DNTHAL_SCENE_CAPTURE_END

#define D3DHAL3_CB32_CLEAR2                   D3DNTHAL3_CB32_CLEAR2
#define D3DHAL3_CB32_RESERVED                 D3DNTHAL3_CB32_RESERVED
#define D3DHAL3_CB32_VALIDATETEXTURESTAGESTATE  D3DNTHAL3_CB32_VALIDATETEXTURESTAGESTATE
#define D3DHAL3_CB32_DRAWPRIMITIVES2          D3DNTHAL3_CB32_DRAWPRIMITIVES2

//-----------------------------------------------------------------------------
// DrawPrimitives2 DDI
//-----------------------------------------------------------------------------
typedef D3DNTHAL_DP2COMMAND D3DHAL_DP2COMMAND;
typedef LPDNT3DHAL_DP2COMMAND LPD3DHAL_DP2COMMAND;
typedef D3DNTHAL_DP2OPERATION D3DHAL_DP2OPERATION;
typedef D3DNTHAL_DP2POINTS D3DHAL_DP2POINTS;
typedef D3DNTHAL_DP2LINELIST D3DHAL_DP2LINELIST;
typedef D3DNTHAL_DP2INDEXEDLINELIST D3DHAL_DP2INDEXEDLINELIST;
typedef D3DNTHAL_DP2LINESTRIP D3DHAL_DP2LINESTRIP;
typedef D3DNTHAL_DP2INDEXEDLINESTRIP D3DHAL_DP2INDEXEDLINESTRIP;
typedef D3DNTHAL_DP2TRIANGLELIST D3DHAL_DP2TRIANGLELIST;
typedef D3DNTHAL_DP2INDEXEDTRIANGLELIST D3DHAL_DP2INDEXEDTRIANGLELIST;
typedef D3DNTHAL_DP2INDEXEDTRIANGLELIST2 D3DHAL_DP2INDEXEDTRIANGLELIST2;
typedef D3DNTHAL_DP2TRIANGLESTRIP D3DHAL_DP2TRIANGLESTRIP;
typedef D3DNTHAL_DP2INDEXEDTRIANGLESTRIP D3DHAL_DP2INDEXEDTRIANGLESTRIP;
typedef D3DNTHAL_DP2TRIANGLEFAN D3DHAL_DP2TRIANGLEFAN;
typedef D3DNTHAL_DP2INDEXEDTRIANGLEFAN D3DHAL_DP2INDEXEDTRIANGLEFAN;
typedef D3DNTHAL_DP2RENDERSTATE D3DHAL_DP2RENDERSTATE;
typedef D3DNTHAL_DP2TEXTURESTAGESTATE D3DHAL_DP2TEXTURESTAGESTATE;
typedef D3DNTHAL_DP2TRIANGLEFAN_IMM D3DHAL_DP2TRIANGLEFAN_IMM;
typedef D3DNTHAL_DP2STARTVERTEX D3DHAL_DP2STARTVERTEX;
typedef D3DNTHAL_DP2VIEWPORTINFO D3DHAL_DP2VIEWPORTINFO;
typedef D3DNTHAL_DP2WINFO D3DHAL_DP2WINFO;
typedef D3DNTHAL_DP2SETPALETTE      D3DHAL_DP2SETPALETTE;
typedef D3DNTHAL_DP2UPDATEPALETTE   D3DHAL_DP2UPDATEPALETTE;
typedef D3DNTHAL_DP2ZRANGE          D3DHAL_DP2ZRANGE;
typedef D3DNTHAL_DP2SETMATERIAL     D3DHAL_DP2SETMATERIAL;
typedef D3DNTHAL_DP2SETLIGHT        D3DHAL_DP2SETLIGHT;
typedef D3DNTHAL_DP2SETCLIPPLANE    D3DHAL_DP2SETCLIPPLANE;
typedef D3DNTHAL_DP2CREATELIGHT     D3DHAL_DP2CREATELIGHT;
typedef D3DNTHAL_DP2SETTRANSFORM    D3DHAL_DP2SETTRANSFORM;
typedef D3DNTHAL_DP2EXT             D3DHAL_DP2EXT;
typedef D3DNTHAL_DP2TEXBLT          D3DHAL_DP2TEXBLT;
typedef D3DNTHAL_DP2STATESET        D3DHAL_DP2STATESET;
typedef D3DNTHAL_DP2SETPRIORITY     D3DHAL_DP2SETPRIORITY;
typedef D3DNTHAL_DP2SETRENDERTARGET D3DHAL_DP2SETRENDERTARGET;
typedef D3DNTHAL_DP2CLEAR           D3DHAL_DP2CLEAR;
typedef D3DNTHAL_DP2SETTEXLOD       D3DHAL_DP2SETTEXLOD;

#define D3DDP2OP_POINTS               D3DNTDP2OP_POINTS
#define D3DDP2OP_INDEXEDLINELIST      D3DNTDP2OP_INDEXEDLINELIST
#define D3DDP2OP_INDEXEDLINELIST2     D3DNTDP2OP_INDEXEDLINELIST2
#define D3DDP2OP_INDEXEDTRIANGLELIST  D3DNTDP2OP_INDEXEDTRIANGLELIST
#define D3DDP2OP_INDEXEDTRIANGLELIST2 D3DNTDP2OP_INDEXEDTRIANGLELIST2
#define D3DDP2OP_RENDERSTATE          D3DNTDP2OP_RENDERSTATE
#define D3DDP2OP_LINELIST             D3DNTDP2OP_LINELIST
#define D3DDP2OP_LINESTRIP            D3DNTDP2OP_LINESTRIP
#define D3DDP2OP_INDEXEDLINESTRIP     D3DNTDP2OP_INDEXEDLINESTRIP
#define D3DDP2OP_TRIANGLELIST         D3DNTDP2OP_TRIANGLELIST
#define D3DDP2OP_TRIANGLESTRIP        D3DNTDP2OP_TRIANGLESTRIP
#define D3DDP2OP_INDEXEDTRIANGLESTRIP D3DNTDP2OP_INDEXEDTRIANGLESTRIP
#define D3DDP2OP_TRIANGLEFAN          D3DNTDP2OP_TRIANGLEFAN
#define D3DDP2OP_INDEXEDTRIANGLEFAN   D3DNTDP2OP_INDEXEDTRIANGLEFAN
#define D3DDP2OP_TRIANGLEFAN_IMM      D3DNTDP2OP_TRIANGLEFAN_IMM
#define D3DDP2OP_LINELIST_IMM         D3DNTDP2OP_LINELIST_IMM
#define D3DDP2OP_TEXTURESTAGESTATE    D3DNTDP2OP_TEXTURESTAGESTATE
#define D3DDP2OP_VIEWPORTINFO         D3DNTDP2OP_VIEWPORTINFO
#define D3DDP2OP_WINFO                D3DNTDP2OP_WINFO
#define D3DDP2OP_SETPALETTE           D3DNTDP2OP_SETPALETTE
#define D3DDP2OP_UPDATEPALETTE        D3DNTDP2OP_UPDATEPALETTE

#define D3DDP2OP_ZRANGE               D3DNTDP2OP_ZRANGE
#define D3DDP2OP_SETMATERIAL          D3DNTDP2OP_SETMATERIAL
#define D3DDP2OP_SETLIGHT             D3DNTDP2OP_SETLIGHT
#define D3DDP2OP_CREATELIGHT          D3DNTDP2OP_CREATELIGHT
#define D3DDP2OP_SETTRANSFORM         D3DNTDP2OP_SETTRANSFORM
#define D3DDP2OP_EXT                  D3DNTDP2OP_EXT                  
#define D3DDP2OP_TEXBLT               D3DNTDP2OP_TEXBLT
#define D3DDP2OP_STATESET             D3DNTDP2OP_STATESET
#define D3DDP2OP_SETPRIORITY          D3DNTDP2OP_SETPRIORITY
#define D3DDP2OP_SETRENDERTARGET      D3DNTDP2OP_SETRENDERTARGET
#define D3DDP2OP_CLEAR                D3DNTDP2OP_CLEAR
#define D3DDP2OP_SETTEXLOD            D3DNTDP2OP_SETTEXLOD
#define D3DDP2OP_SETCLIPPLANE         D3DNTDP2OP_SETCLIPPLANE

#define D3DERR_COMMAND_UNPARSED       D3DNTERR_COMMAND_UNPARSED
#define D3DHALDP2_USERMEMVERTICES     D3DNTHALDP2_USERMEMVERTICES
#define D3DHALDP2_EXECUTEBUFFER       D3DNTHALDP2_EXECUTEBUFFER
#define D3DHALDP2_SWAPVERTEXBUFFER    D3DNTHALDP2_SWAPVERTEXBUFFER
#define D3DHALDP2_SWAPCOMMANDBUFFER   D3DNTHALDP2_SWAPCOMMANDBUFFER
#define D3DHALDP2_REQVERTEXBUFSIZE    D3DNTHALDP2_REQVERTEXBUFSIZE
#define D3DHALDP2_REQCOMMANDBUFSIZE   D3DNTHALDP2_REQCOMMANDBUFSIZE
#define D3DHALDP2_VIDMEMVERTEXBUF     D3DNTHALDP2_VIDMEMVERTEXBUF
#define D3DHALDP2_VIDMEMCOMMANDBUF    D3DNTHALDP2_VIDMEMCOMMANDBUF


#define PFND3DPARSEUNKNOWNCOMMAND     PFND3DNTPARSEUNKNOWNCOMMAND
#endif // AZN

#endif // WINNT
#endif // NODX95TYPES

#endif // __DX95TYPE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nv32.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  Users and possessors of this source code are     *|
|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|
|*     use this code in individual and commercial software.                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|
|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|
|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|
|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|
|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|
|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|
|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|
|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|
|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|
|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|
|*                                                                           *|
|*     U.S. Government  End  Users.   This source code  is a "commercial     *|
|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|
|*     consisting  of "commercial  computer  software"  and  "commercial     *|
|*     computer  software  documentation,"  as such  terms  are  used in     *|
|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|
|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|
|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|
|*     all U.S. Government End Users  acquire the source code  with only     *|
|*     those rights set forth herein.                                        *|
|*                                                                           *|
 \***************************************************************************/



 /***************************************************************************\
|*                                                                           *|
|*                         NV Architecture Interface                         *|
|*                                                                           *|
|*  <nv32.h> defines a 32-bit wide naming convention  for the functionality  *|
|*  of NVIDIA's Unified Media Architecture (TM).                             *|
|*                                                                           *|
 \***************************************************************************/


#ifndef NV32_INCLUDED
#define NV32_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif

#include <nvtypes.h>


 /***************************************************************************\
|*                                NV Classes                                 *|
 \***************************************************************************/

/*
 * These structures indicate the offsets of hardware registers corresponding to
 * the methods of each class.  Since the first 256 bytes of each subchannel is
 * the NvControlPio registers, the hexadecimal offsets in comments start at
 * 0x100.
 */

/* class NV01_ROOT */
#define  NV01_ROOT                                                 (0x00000000)
/* NvNotification[] fields and values */
#define NV000_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv000Typedef, Nv01Root;
#define NV000_TYPEDEF                                              Nv01Root
/* obsolete stuff */
#define Nv1Root                                                    Nv01Root
#define nv1Root                                                    Nv01Root
#define nv01Root                                                   Nv01Root


/* class NV01_CLASS */
#define  NV01_CLASS                                                (0x00000001)
/* NvNotification[] fields and values */
#define NV001_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv001Typedef, Nv01Class;
#define NV001_TYPEDEF                                              Nv01Class
/* obsolete stuff */
#define  NV1_CLASS                                                 (0x00000001)
#define Nv1Class                                                   Nv01Class
#define nv1Class                                                   Nv01Class
#define nv01Class                                                  Nv01Class


/* class NV01_CONTEXT_DMA_FROM_MEMORY */
#define  NV01_CONTEXT_DMA_FROM_MEMORY                              (0x00000002)
/* NvNotification[] fields and values */
#define NV002_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv002Typedef, Nv01ContextDmaFromMemory;
#define  NV002_TYPEDEF                                 Nv01ContextDmaFromMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_FROM_MEMORY                               (0x00000002)
#define  NV01_CONTEXT_DMA                                          (0x00000002)
#define  Nv1ContextDmaFromMemory                       Nv01ContextDmaFromMemory
#define  nv1ContextDmaFromMemory                       Nv01ContextDmaFromMemory
#define  nv01ContextDmaFromMemory                      Nv01ContextDmaFromMemory


/* class NV01_CONTEXT_DMA_TO_MEMORY */
#define  NV01_CONTEXT_DMA_TO_MEMORY                                (0x00000003)
/* NvNotification[] fields and values */
#define NV003_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv003Typedef, Nv01ContextDmaToMemory;
#define  NV003_TYPEDEF                                   Nv01ContextDmaToMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_TO_MEMORY                                 (0x00000003)
#define  Nv1ContextDmaToMemory                           Nv01ContextDmaToMemory
#define  nv1ContextDmaToMemory                           Nv01ContextDmaToMemory
#define  nv01ContextDmaToMemory                          Nv01ContextDmaToMemory


/* class NV01_TIMER */
#define  NV01_TIMER                                                (0x00000004)
/* NvNotification[] elements */
#define NV004_NOTIFIERS_NOTIFY                                     (0)
#define NV004_NOTIFIERS_SET_ALARM_NOTIFY                           (1)
/* NvNotification[] fields and values */
#define NV004_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV004_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV004_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV004_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV004_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV004_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;            /* ignored                           0100-0103*/
 NvV32 Notify;                 /* NV004_NOTIFY_*                    0104-0107*/
 NvV32 StopTransfer;           /* NV004_STOP_TRANSFER_VALUE         0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;  /* NV01_CONTEXT_DMA                  0180-0183*/
 NvV32 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  NvU32 nanoseconds[2];        /* nsec since 1970-01-01 0=immediate    0-   7*/
 } SetAlarmTime;               /* end of method                         -0307*/
 struct {                      /* start of method                   0308-    */
  NvU32 nanoseconds[2];        /* nsec relative to current time        8-   f*/
 } SetAlarmTimeRelative;       /* end of method                         -030f*/
 NvV32 Reserved02[0x004];
 NvV32 SetAlarmNotify;         /* NV004_SET_ALARM_NOTIFY_*          0320-0323*/
 NvV32 Reserved03[0x737];
} Nv004Typedef, Nv01Timer;
#define NV004_TYPEDEF                                              Nv01Timer
/* dma method offsets, fields, and values */
#define NV004_SET_OBJECT                                           (0x00000000)
#define NV004_NO_OPERATION                                         (0x00000100)
#define NV004_NOTIFY                                               (0x00000104)
#define NV004_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV004_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV004_STOP_TRANSFER                                        (0x00000108)
#define NV004_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV004_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV004_SET_ALARM_TIME                                       (0x00000300)
#define NV004_SET_ALARM_TIME_RELATIVE                              (0x00000308)
#define NV004_SET_ALARM_NOTIFY                                     (0x00000320)
#define NV004_SET_ALARM_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NV004_SET_ALARM_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
/* obsolete stuff */
#define Nv1Timer                                                   Nv01Timer
#define nv1Timer                                                   Nv01Timer
#define nv01Timer                                                  Nv01Timer


/* class NV01_EVENT */
#define  NV01_EVENT                                                (0x00000005)
/* NvNotification[] fields and values */
#define NV003_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct _Nv005Typedef{
 NvV32 Reserved00[0x7c0];
} Nv005Typedef, Nv01Event;
#define NV005_TYPEDEF                                              Nv01Event
/* obsolete stuff */
#define NV1_TIMER                                                  (0x00000004)
#define Nv1Event                                                   Nv01Event
#define nv1Event                                                   Nv01Event
#define nv01Event                                                  Nv01Event


typedef NvV32 Nv006Typedef;

typedef NvV32 Nv007Typedef;

typedef NvV32 Nv008Typedef;

typedef NvV32 Nv009Typedef;

typedef NvV32 Nv00aTypedef;

typedef NvV32 Nv00bTypedef;

typedef NvV32 Nv00cTypedef;

typedef NvV32 Nv00dTypedef;

typedef NvV32 Nv00eTypedef;

typedef NvV32 Nv00fTypedef;

typedef NvV32 Nv010Typedef;

typedef NvV32 Nv011Typedef;


/* class NV01_CONTEXT_BETA */
#define  NV01_CONTEXT_BETA                                         (0x00000012)
/* NvNotification[] elements */
#define NV012_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV012_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV012_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV012_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV012_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV012_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV012_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV012_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetBeta1d31;             /* S1d31 beta value                 0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv012Typedef, Nv01ContextBeta;
#define NV012_TYPEDEF                                           Nv01ContextBeta
/* dma method offsets, fields, and values */
#define NV012_SET_OBJECT                                           (0x00000000)
#define NV012_NO_OPERATION                                         (0x00000100)
#define NV012_NOTIFY                                               (0x00000104)
#define NV012_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV012_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV012_SET_BETA_1D31                                        (0x00000300)
/* obsolete stuff */
#define NV01_BETA_SOLID                                            (0x00000012)
#define NV1_BETA_SOLID                                             (0x00000012)
#define Nv01BetaSolid                                           Nv01ContextBeta
#define nv01BetaSolid                                           Nv01ContextBeta
#define Nv1BetaSolid                                            Nv01ContextBeta
#define nv1BetaSolid                                            Nv01ContextBeta

typedef NvV32 Nv013Typedef;

typedef NvV32 Nv014Typedef;

typedef NvV32 Nv015Typedef;

typedef NvV32 Nv016Typedef;


/* class NV01_CONTEXT_COLOR_KEY */
#define  NV01_CONTEXT_COLOR_KEY                                    (0x00000017)
/* NvNotification[] elements */
#define NV017_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV017_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV017_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV017_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV017_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV017_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV017_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV017_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV017_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetColor;                /* color key value                  0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv017Typedef, Nv01ContextColorKey;
#define NV017_TYPEDEF                                       Nv01ContextColorKey
/* dma method offsets, fields, and values */
#define NV017_SET_OBJECT                                           (0x00000000)
#define NV017_NO_OPERATION                                         (0x00000100)
#define NV017_NOTIFY                                               (0x00000104)
#define NV017_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV017_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV017_SET_COLOR_FORMAT                                     (0x00000300)
#define NV017_SET_COLOR_FORMAT_LE_X16A8Y8                          (0x00000001)
#define NV017_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV017_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV017_SET_COLOR                                            (0x00000304)
/* obsolete stuff */
#define NV01_IMAGE_SOLID                                           (0x00000017)
#define NV1_IMAGE_SOLID                                            (0x00000017)
#define Nv01ImageSolid                                      Nv01ContextColorKey
#define nv01ImageSolid                                      Nv01ContextColorKey
#define Nv1ImageSolid                                       Nv01ContextColorKey
#define nv1ImageSolid                                       Nv01ContextColorKey
#define nv01ContextColorKey                                 Nv01ContextColorKey


/* class NV01_CONTEXT_PATTERN */
#define  NV01_CONTEXT_PATTERN                                      (0x00000018)
/* NvNotification[] elements */
#define NV018_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV018_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV018_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV018_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV018_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV018_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV018_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV018_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV018_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV018_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 SetMonochromeShape;      /* NV018_SET_MONOCHROME_SHAPE_*     0308-030b*/
 NvV32 Reserved02[0x001];
 NvV32 SetMonochromeColor0;     /* color of 0 pixels                0310-0313*/
 NvV32 SetMonochromeColor1;     /* color of 1 pixels                0314-0317*/
 NvV32 SetMonochromePattern0;   /* first  32 bits of pattern data   0318-031b*/
 NvV32 SetMonochromePattern1;   /* second 32 bits of pattern data   031c-031f*/
 NvV32 Reserved03[0x738];
} Nv018Typedef, Nv01ContextPattern;
#define NV018_TYPEDEF                                        Nv01ContextPattern
/* dma method offsets, fields, and values */
#define NV018_SET_OBJECT                                           (0x00000000)
#define NV018_NO_OPERATION                                         (0x00000100)
#define NV018_NOTIFY                                               (0x00000104)
#define NV018_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV018_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV018_SET_COLOR_FORMAT                                     (0x00000300)
#define NV018_SET_COLOR_FORMAT_LE_X16A8Y8                          (0x00000001)
#define NV018_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV018_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV018_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV018_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV018_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV018_SET_MONOCHROME_SHAPE                                 (0x00000308)
#define NV018_SET_MONOCHROME_SHAPE_8X_8Y                           (0x00000000)
#define NV018_SET_MONOCHROME_SHAPE_64X_1Y                          (0x00000001)
#define NV018_SET_MONOCHROME_SHAPE_1X_64Y                          (0x00000002)
#define NV018_SET_MONOCHORME_COLOR0                                (0x00000310)
#define NV018_SET_MONOCHORME_COLOR1                                (0x00000314)
#define NV018_SET_MONOCHORME_PATTERN0                              (0x00000318)
#define NV018_SET_MONOCHORME_PATTERN1                              (0x0000031C)
/* obsolete stuff */
#define NV01_IMAGE_PATTERN                                         (0x00000018)
#define NV1_IMAGE_PATTERN                                          (0x00000018)
#define Nv01ImagePattern                                     Nv01ContextPattern
#define nv01ImagePattern                                     Nv01ContextPattern
#define Nv1ImagePattern                                      Nv01ContextPattern
#define nv1ImagePattern                                      Nv01ContextPattern
#define nv01ContextPattern                                   Nv01ContextPattern


/* class NV01_CONTEXT_CLIP_RECTANGLE */
#define  NV01_CONTEXT_CLIP_RECTANGLE                               (0x00000019)
/* NvNotification[] elements */
#define NV019_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV019_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV019_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV019_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV019_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV019_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV019_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV019_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetPoint;                /* y_x S16_S16                      0300-0303*/
 NvV32 SetSize;                 /* height_width U16_U16             0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv019Typedef, Nv01ContextClipRectangle;
#define NV019_TYPEDEF                                  Nv01ContextClipRectangle
/* dma method offsets, fields, and values */
#define NV019_SET_OBJECT                                           (0x00000000)
#define NV019_NO_OPERATION                                         (0x00000100)
#define NV019_NOTIFY                                               (0x00000104)
#define NV019_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV019_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV019_SET_POINT                                            (0x00000300)
#define NV019_SET_POINT_X                                          15:0
#define NV019_SET_POINT_Y                                          31:16
#define NV019_SET_SIZE                                             (0x00000304)
#define NV019_SET_SIZE_WIDTH                                       15:0
#define NV019_SET_SIZE_HEIGHT                                      31:16
/* obsolete stuff */
#define NV01_IMAGE_BLACK_RECTANGLE                                 (0x00000019)
#define NV1_IMAGE_BLACK_RECTANGLE                                  (0x00000019)
#define Nv01ImageBlackRectangle                        Nv01ContextClipRectangle
#define nv01ImageBlackRectangle                        Nv01ContextClipRectangle
#define Nv1ImageBlackRectangle                         Nv01ContextClipRectangle
#define nv1ImageBlackRectangle                         Nv01ContextClipRectangle
#define nv01ContextClipRectangle                       Nv01ContextClipRectangle

typedef NvV32 Nv01aTypedef;

typedef NvV32 Nv01bTypedef;


/* class NV01_RENDER_SOLID_LIN */
#define  NV01_RENDER_SOLID_LIN                                     (0x0000001C)
/* NvNotification[] elements */
#define NV01C_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01C_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01C_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01C_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point0;                 /* y_x S16_S16 in pixels               0-   3*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               4-   7*/
 } Lin[16];                     /* end of aliased methods in array      -047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 point0X;                /* in pixels, 0 at left                0-   3*/
  NvS32 point0Y;                /* in pixels, 0 at top                 4-   7*/
  NvS32 point1X;                /* in pixels, 0 at left                8-   b*/
  NvS32 point1Y;                /* in pixels, 0 at top                 c-   f*/
 } Lin32[8];                    /* end of aliased methods in array      -04ff*/
 NvV32 PolyLin[32];             /* y_x S16_S16 in pixels            0500-057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } PolyLin32[16];               /* end of aliased methods in array      -05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorPolyLin[16];            /* end of aliased methods in array      -067f*/
 NvV32 Reserved03[0x660];
} Nv01cTypedef, Nv01RenderSolidLin;
#define NV01C_TYPEDEF                                        Nv01RenderSolidLin
/* dma method offsets, fields, and values */
#define NV01C_SET_OBJECT                                           (0x00000000)
#define NV01C_NO_OPERATION                                         (0x00000100)
#define NV01C_NOTIFY                                               (0x00000104)
#define NV01C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01C_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01C_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01C_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01C_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01C_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01C_SET_OPERATION                                        (0x000002FC)
#define NV01C_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01C_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01C_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01C_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01C_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01C_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01C_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01C_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01C_COLOR                                                (0x00000304)
#define NV01C_LIN(a)                                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT0(a)                                        (0x00000400\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT0_X                                         15:0
#define NV01C_LIN_POINT0_Y                                         31:16
#define NV01C_LIN_POINT1(a)                                        (0x00000404\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT1_X                                         15:0
#define NV01C_LIN_POINT1_Y                                         31:16
#define NV01C_LIN32(a)                                             (0x00000480\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT0_X(a)                                    (0x00000480\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT0_Y(a)                                    (0x00000484\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT1_X(a)                                    (0x00000488\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT1_Y(a)                                    (0x0000048C\
                                                                   +(a)*0x0010)
#define NV01C_POLY_LIN(a)                                          (0x00000500\
                                                                   +(a)*0x0004)
#define NV01C_POLY_LIN_X                                           15:0
#define NV01C_POLY_LIN_Y                                           31:16
#define NV01C_POLY_LIN32(a)                                        (0x00000580\
                                                                   +(a)*0x0008)
#define NV01C_POLY_LIN32_X(a)                                      (0x00000580\
                                                                   +(a)*0x0008)
#define NV01C_POLY_LIN32_Y(a)                                      (0x00000584\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN(a)                                    (0x00000600\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_COLOR(a)                              (0x00000600\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_POINT(a)                              (0x00000604\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_POINT_X                               15:0
#define NV01C_COLOR_POLY_LIN_POINT_Y                               31:16
/* obsolete stuff */
#define NV1_RENDER_SOLID_LIN                                       (0x0000001C)
#define Nv1RenderSolidLin                                    Nv01RenderSolidLin
#define nv1RenderSolidLin                                    Nv01RenderSolidLin
#define nv01RenderSolidLin                                   Nv01RenderSolidLin


/* class NV01_RENDER_SOLID_TRIANGLE */
#define  NV01_RENDER_SOLID_TRIANGLE                                (0x0000001D)
/* NvNotification[] elements */
#define NV01D_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01D_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01D_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01D_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x002];
 NvV32 TrianglePoint0;          /* y_x S16_S16 in pixels            0310-0313*/
 NvV32 TrianglePoint1;          /* y_x S16_S16 in pixels            0314-0317*/
 NvV32 TrianglePoint2;          /* y_x S16_S16 in pixels            0318-031b*/
 NvV32 Reserved03[0x001];
 NvS32 Triangle32Point0X;       /* in pixels, 0 at left             0320-0323*/
 NvS32 Triangle32Point0Y;       /* in pixels, 0 at top              0324-0327*/
 NvS32 Triangle32Point1X;       /* in pixels, 0 at left             0328-032b*/
 NvS32 Triangle32Point1Y;       /* in pixels, 0 at top              032c-032f*/
 NvS32 Triangle32Point2X;       /* in pixels, 0 at left             0330-0333*/
 NvS32 Triangle32Point2Y;       /* in pixels, 0 at top              0334-0337*/
 NvV32 Reserved04[0x032];
 NvV32 Trimesh[32];             /* y_x S16_S16 in pixels            0400-047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } Trimesh32[16];               /* end of aliased methods in array      -04ff*/
 struct {                       /* start aliased methods in array   0500-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point0;                 /* y_x S16_S16 in pixels               4-   7*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               8-   b*/
  NvV32 point2;                 /* y_x S16_S16 in pixels               c-   f*/
 } ColorTriangle[8];            /* end of aliased methods in array      -057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorTrimesh[16];            /* end of aliased methods in array      -05ff*/
 NvV32 Reserved05[0x680];
} Nv01dTypedef, Nv01RenderSolidTriangle;
#define NV01D_TYPEDEF                                   Nv01RenderSolidTriangle
/* dma method offsets, fields, and values */
#define NV01D_SET_OBJECT                                           (0x00000000)
#define NV01D_NO_OPERATION                                         (0x00000100)
#define NV01D_NOTIFY                                               (0x00000104)
#define NV01D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01D_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01D_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01D_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01D_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01D_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01D_SET_OPERATION                                        (0x000002FC)
#define NV01D_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01D_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01D_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01D_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01D_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01D_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01D_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01D_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01D_COLOR                                                (0x00000304)
#define NV01D_TRIANGLE_POINT0                                      (0x00000310)
#define NV01D_TRIANGLE_POINT0_X                                    15:0
#define NV01D_TRIANGLE_POINT0_Y                                    31:16
#define NV01D_TRIANGLE_POINT1                                      (0x00000314)
#define NV01D_TRIANGLE_POINT1_X                                    15:0
#define NV01D_TRIANGLE_POINT1_Y                                    31:16
#define NV01D_TRIANGLE_POINT2                                      (0x00000318)
#define NV01D_TRIANGLE_POINT2_X                                    15:0
#define NV01D_TRIANGLE_POINT2_Y                                    31:16
#define NV01D_TRIANGLE32_POINT0_X                                  (0x00000320)
#define NV01D_TRIANGLE32_POINT0_Y                                  (0x00000324)
#define NV01D_TRIANGLE32_POINT1_X                                  (0x00000328)
#define NV01D_TRIANGLE32_POINT1_Y                                  (0x0000032C)
#define NV01D_TRIANGLE32_POINT2_X                                  (0x00000330)
#define NV01D_TRIANGLE32_POINT2_Y                                  (0x00000334)
#define NV01D_TRIMESH(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
#define NV01D_TRIMESH_X                                            15:0
#define NV01D_TRIMESH_Y                                            31:16
#define NV01D_TRIMESH32(a)                                         (0x00000480\
                                                                   +(a)*0x0008)
#define NV01D_TRIMESH32_X(a)                                       (0x00000480\
                                                                   +(a)*0x0008)
#define NV01D_TRIMESH32_Y(a)                                       (0x00000484\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIANGLE(a)                                    (0x00000500\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_COLOR(a)                              (0x00000500\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT0(a)                             (0x00000504\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT0_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT0_Y                              31:16
#define NV01D_COLOR_TRIANGLE_POINT1(a)                             (0x00000508\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT1_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT1_Y                              31:16
#define NV01D_COLOR_TRIANGLE_POINT2(a)                             (0x0000050C\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT2_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT2_Y                              31:16
#define NV01D_COLOR_TRIMESH(a)                                     (0x00000580\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_COLOR(a)                               (0x00000580\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_POINT(a)                               (0x00000584\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_POINT_X                                15:0
#define NV01D_COLOR_TRIMESH_POINT_Y                                31:16
/* obsolete stuff */
#define NV1_RENDER_SOLID_TRIANGLE                                  (0x0000001D)
#define Nv1RenderSolidTriangle                          Nv01RenderSolidTriangle
#define nv1RenderSolidTriangle                          Nv01RenderSolidTriangle
#define nv01RenderSolidTriangle                         Nv01RenderSolidTriangle


/* class NV01_RENDER_SOLID_RECTANGLE */
#define  NV01_RENDER_SOLID_RECTANGLE                               (0x0000001E)
/* NvNotification[] elements */
#define NV01E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01E_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01E_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* y_x S16_S16                         0-   3*/
  NvV32 size;                   /* height_width U16_U16                4-   7*/
 } Rectangle[16];               /* end of method in array in array      -047f*/
 NvV32 Reserved03[0x6e0];
} Nv01eTypedef, Nv01RenderSolidRectangle;
#define NV01E_TYPEDEF                                  Nv01RenderSolidRectangle
/* dma method offsets, fields, and values */
#define NV01E_SET_OBJECT                                           (0x00000000)
#define NV01E_NO_OPERATION                                         (0x00000100)
#define NV01E_NOTIFY                                               (0x00000104)
#define NV01E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01E_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01E_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01E_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01E_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01E_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01E_SET_OPERATION                                        (0x000002FC)
#define NV01E_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01E_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01E_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01E_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01E_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01E_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01E_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01E_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01E_COLOR                                                (0x00000304)
#define NV01E_RECTANGLE(a)                                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_POINT(a)                                   (0x00000400\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_POINT_X                                    15:0
#define NV01E_RECTANGLE_POINT_Y                                    31:16
#define NV01E_RECTANGLE_SIZE(a)                                    (0x00000404\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_SIZE_WIDTH                                 15:0
#define NV01E_RECTANGLE_SIZE_HEIGHT                                31:16
/* obsolete stuff */
#define NV1_RENDER_SOLID_RECTANGLE                                 (0x0000001E)
#define Nv1RenderSolidRectangle                        Nv01RenderSolidRectangle
#define nv1RenderSolidRectangle                        Nv01RenderSolidRectangle
#define nv01RenderSolidRectangle                       Nv01RenderSolidRectangle


/* class NV01_IMAGE_BLIT */
#define  NV01_IMAGE_BLIT                                           (0x0000001F)
/* NvNotification[] elements */
#define NV01F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurfaceSource; /* NV03_CONTEXT_SURFACE_2D_SOURCE   0198-019b*/
 NvV32 SetContextSurfaceDestin; /* NV03_CONTEXT_SURFACE_2D_DESTINAT 019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV01F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved02[0x73d];
} Nv01fTypedef, Nv01ImageBlit;
#define NV01F_TYPEDEF                                             Nv01ImageBlit
/* dma method offsets, fields, and values */
#define NV01F_SET_OBJECT                                           (0x00000000)
#define NV01F_NO_OPERATION                                         (0x00000100)
#define NV01F_NOTIFY                                               (0x00000104)
#define NV01F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV01F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV01F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV01F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV01F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV01F_SET_CONTEXT_SURFACE_SOURCE                           (0x00000198)
#define NV01F_SET_CONTEXT_SURFACE_DESTIN                           (0x0000019C)
#define NV01F_SET_OPERATION                                        (0x000002FC)
#define NV01F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01F_CONTROL_POINT_IN                                     (0x00000300)
#define NV01F_CONTROL_POINT_IN_X                                   15:0
#define NV01F_CONTROL_POINT_IN_Y                                   31:16
#define NV01F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV01F_CONTROL_POINT_OUT_X                                  15:0
#define NV01F_CONTROL_POINT_OUT_Y                                  31:16
#define NV01F_SIZE                                                 (0x00000308)
#define NV01F_SIZE_WIDTH                                           15:0
#define NV01F_SIZE_HEIGHT                                          31:16
/* obsolete stuff */
#define NV1_IMAGE_BLIT                                             (0x0000001F)
#define Nv1ImageBlit                                              Nv01ImageBlit
#define nv1ImageBlit                                              Nv01ImageBlit
#define nv01ImageBlit                                             Nv01ImageBlit

typedef NvV32 Nv020Typedef;


/* class NV01_IMAGE_FROM_CPU */
#define  NV01_IMAGE_FROM_CPU                                       (0x00000021)
/* NvNotification[] elements */
#define NV021_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV021_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV021_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV021_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV021_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV021_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV021_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV021_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV021_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV021_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, in pixels  0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, in pixels  030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[32];               /* packed pixel(s) to add to image  0400-047f*/
 NvV32 Reserved03[0x6e0];
} Nv021Typedef, Nv01ImageFromCpu;
#define NV021_TYPEDEF                                          Nv01ImageFromCpu
/* dma method offsets, fields, and values */
#define NV021_SET_OBJECT                                           (0x00000000)
#define NV021_NO_OPERATION                                         (0x00000100)
#define NV021_NOTIFY                                               (0x00000104)
#define NV021_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV021_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV021_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV021_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV021_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV021_SET_CONTEXT_ROP                                      (0x00000190)
#define NV021_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV021_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV021_SET_OPERATION                                        (0x000002FC)
#define NV021_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV021_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV021_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV021_SET_COLOR_FORMAT                                     (0x00000300)
#define NV021_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV021_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV021_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV021_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV021_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV021_POINT                                                (0x00000304)
#define NV021_POINT_X                                              15:0
#define NV021_POINT_Y                                              31:16
#define NV021_SIZE_OUT                                             (0x00000308)
#define NV021_SIZE_OUT_WIDTH                                       15:0
#define NV021_SIZE_OUT_HEIGHT                                      31:16
#define NV021_SIZE_IN                                              (0x0000030C)
#define NV021_SIZE_IN_WIDTH                                        15:0
#define NV021_SIZE_IN_HEIGHT                                       31:16
#define NV021_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV1_IMAGE_FROM_CPU                                         (0x00000021)
#define Nv1ImageFromCpu                                        Nv01ImageFromCpu
#define nv1ImageFromCpu                                        Nv01ImageFromCpu
#define nv01ImageFromCpu                                       Nv01ImageFromCpu

typedef NvV32 Nv022Typedef;

typedef NvV32 Nv023Typedef;

typedef NvV32 Nv024Typedef;

typedef NvV32 Nv025Typedef;

typedef NvV32 Nv026Typedef;

typedef NvV32 Nv027Typedef;

typedef NvV32 Nv028Typedef;

typedef NvV32 Nv029Typedef;

typedef NvV32 Nv02aTypedef;

typedef NvV32 Nv02bTypedef;

typedef NvV32 Nv02cTypedef;

typedef NvV32 Nv02dTypedef;

typedef NvV32 Nv02eTypedef;

typedef NvV32 Nv02fTypedef;


/* class NV01_NULL */
#define  NV01_NULL                                                 (0x00000030)
/* NvNotification[] fields and values */
#define NV030_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv030Typedef, Nv01Null;
#define NV030_TYPEDEF                                              Nv01Null
/* obsolete stuff */
#define NV1_NULL                                                   (0x00000030)
#define Nv1Null                                                    Nv01Null
#define nv1Null                                                    Nv01Null
#define nv01Null                                                   Nv01Null

typedef NvV32 Nv031Typedef;

typedef NvV32 Nv032Typedef;

typedef NvV32 Nv033Typedef;

typedef NvV32 Nv034Typedef;

typedef NvV32 Nv035Typedef;



/* class NV03_STRETCHED_IMAGE_FROM_CPU */
#define  NV03_STRETCHED_IMAGE_FROM_CPU                             (0x00000036)
/* NvNotification[] elements */
#define NV036_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV036_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV036_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV036_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV036_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV036_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV036_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV036_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV036_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV036_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DeltaDxDu;               /* S12d20 ratio dx/du               0308-030b*/
 NvV32 DeltaDyDv;               /* S12d20 ratio dy/dv               030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv036Typedef, Nv03StretchedImageFromCpu;
#define NV036_TYPEDEF                                 Nv03StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV036_SET_OBJECT                                           (0x00000000)
#define NV036_NO_OPERATION                                         (0x00000100)
#define NV036_NOTIFY                                               (0x00000104)
#define NV036_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV036_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV036_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV036_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV036_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV036_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV036_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV036_SET_OPERATION                                        (0x000002FC)
#define NV036_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV036_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV036_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV036_SET_COLOR_FORMAT                                     (0x00000300)
#define NV036_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV036_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV036_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV036_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV036_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV036_SIZE_IN                                              (0x00000304)
#define NV036_SIZE_IN_WIDTH                                        15:0
#define NV036_SIZE_IN_HEIGHT                                       31:16
#define NV036_DELTA_DX_DU                                          (0x00000308)
#define NV036_DELTA_DY_DV                                          (0x0000030C)
#define NV036_CLIP_POINT                                           (0x00000310)
#define NV036_CLIP_POINT_X                                         15:0
#define NV036_CLIP_POINT_Y                                         31:16
#define NV036_CLIP_SIZE                                            (0x00000314)
#define NV036_CLIP_SIZE_WIDTH                                      15:0
#define NV036_CLIP_SIZE_HEIGHT                                     31:16
#define NV036_POINT_12D4                                           (0x00000318)
#define NV036_POINT_12D4_X                                         15:0
#define NV036_POINT_12D4_Y                                         31:16
#define NV036_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV3_STRETCHED_IMAGE_FROM_CPU                               (0x00000036)
#define Nv3StretchedImageFromCpu                      Nv03StretchedImageFromCpu
#define nv3StretchedImageFromCpu                      Nv03StretchedImageFromCpu
#define nv03StretchedImageFromCpu                     Nv03StretchedImageFromCpu


/* class NV03_SCALED_IMAGE_FROM_MEMORY */
#define  NV03_SCALED_IMAGE_FROM_MEMORY                             (0x00000037)
/* NvNotification[] elements */
#define NV037_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV037_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV037_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV037_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV037_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV037_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV037_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV037_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x05A];
 NvV32 SetColorFormat;          /* NV037_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV037_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DeltaDuDx;               /* S12d20 ratio du/dx               0318-031b*/
 NvV32 DeltaDvDy;               /* S12d20 ratio dv/dy               031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvU32 ImageInPitch;            /* bytes, vertical pixel delta      0404-0407*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv037Typedef, Nv03ScaledImageFromMemory;
#define NV037_TYPEDEF                                 Nv03ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV037_SET_OBJECT                                           (0x00000000)
#define NV037_NO_OPERATION                                         (0x00000100)
#define NV037_NOTIFY                                               (0x00000104)
#define NV037_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV037_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV037_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV037_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV037_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV037_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV037_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV037_SET_COLOR_FORMAT                                     (0x00000300)
#define NV037_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV037_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV037_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV037_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV037_SET_COLOR_FORMAT_LE_V8YB8U8YA8                       (0x00000005)
#define NV037_SET_COLOR_FORMAT_LE_YB8V8YA8U8                       (0x00000006)
#define NV037_SET_OPERATION                                        (0x00000304)
#define NV037_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV037_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV037_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV037_CLIP_POINT                                           (0x00000308)
#define NV037_CLIP_POINT_X                                         15:0
#define NV037_CLIP_POINT_Y                                         31:16
#define NV037_CLIP_SIZE                                            (0x0000030C)
#define NV037_CLIP_SIZE_WIDTH                                      15:0
#define NV037_CLIP_SIZE_HEIGHT                                     31:16
#define NV037_IMAGE_OUT_POINT                                      (0x00000310)
#define NV037_IMAGE_OUT_POINT_X                                    15:0
#define NV037_IMAGE_OUT_POINT_Y                                    31:16
#define NV037_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV037_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV037_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV037_DELTA_DU_DX                                          (0x00000318)
#define NV037_DELTA_DV_DY                                          (0x0000031C)
#define NV037_IMAGE_IN_SIZE                                        (0x00000400)
#define NV037_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV037_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV037_IMAGE_IN_PITCH                                       (0x00000404)
#define NV037_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV037_IMAGE_IN_POINT                                       (0x0000040C)
#define NV037_IMAGE_IN_POINT_U                                     15:0
#define NV037_IMAGE_IN_POINT_V                                     31:16
/* obsolete stuff */
#define NV3_SCALED_IMAGE_FROM_MEMORY                               (0x00000037)
#define Nv3ScaledImageFromMemory                      Nv03ScaledImageFromMemory
#define nv3ScaledImageFromMemory                      Nv03ScaledImageFromMemory
#define nv03ScaledImageFromMemory                     Nv03ScaledImageFromMemory


/* class NV04_DVD_SUBPICTURE */
#define  NV04_DVD_SUBPICTURE                                       (0x00000038)
/* NvNotification[] elements */
#define NV038_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV038_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV038_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV038_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV038_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV038_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV038_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV038_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaOverlay;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageIn;    /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextDmaImageOut;   /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0300-0303*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0304-0307*/
 NvU32 ImageOutFormat;          /* color_pitch V16_U16              0308-030b*/
 NvU32 ImageOutOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 ImageInDeltaDuDx;        /* S12d20 ratio du/dx               0310-0313*/
 NvV32 ImageInDeltaDvDy;        /* S12d20 ratio dv/dy               0314-0317*/
 NvV32 ImageInSize;             /* height_width U16_U16 in texels   0318-031b*/
 NvV32 ImageInFormat;           /* color_pitch V16_U16              031c-031f*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0320-0323*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4 in texels        0324-0317*/
 NvV32 OverlayDeltaDuDx;        /* S12d20 ratio du/dx               0328-032b*/
 NvV32 OverlayDeltaDvDy;        /* S12d20 ratio dv/dy               032c-032f*/
 NvV32 OverlaySize;             /* height_width U16_U16 in texels   0330-0333*/
 NvV32 OverlayFormat;           /* color_pitch V16_U16              0334-0337*/
 NvU32 OverlayOffset;           /* byte offset of top-left texel    0338-033b*/
 NvV32 OverlayPoint;            /* v_u U12d4_U12d4 in texels        033c-033f*/
 NvV32 Reserved02[0x730];
} Nv038Typedef, Nv04DvdSubpicture;
#define NV038_TYPEDEF                                         Nv04DvdSubpicture
/* dma method offsets, fields, and values */
#define NV038_SET_OBJECT                                           (0x00000000)
#define NV038_NO_OPERATION                                         (0x00000100)
#define NV038_NOTIFY                                               (0x00000104)
#define NV038_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV038_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV038_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV038_SET_CONTEXT_DMA_OVERLAY                              (0x00000184)
#define NV038_SET_CONTEXT_DMA_IMAGE_IN                             (0x00000188)
#define NV038_SET_CONTEXT_DMA_IMAGE_OUT                            (0x0000018C)
#define NV038_IMAGE_OUT_POINT                                      (0x00000300)
#define NV038_IMAGE_OUT_POINT_X                                    15:0
#define NV038_IMAGE_OUT_POINT_Y                                    31:16
#define NV038_IMAGE_OUT_SIZE                                       (0x00000304)
#define NV038_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV038_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV038_IMAGE_OUT_FORMAT                                     (0x00000308)
#define NV038_IMAGE_OUT_FORMAT_PITCH                               15:0
#define NV038_IMAGE_OUT_FORMAT_COLOR                               31:16
#define NV038_IMAGE_OUT_FORMAT_COLOR_LE_V8YB8U8YA8                 (0x00000001)
#define NV038_IMAGE_OUT_FORMAT_COLOR_LE_YB8V8YA8U8                 (0x00000002)
#define NV038_IMAGE_OUT_OFFSET                                     (0x0000030C)
#define NV038_IMAGE_IN_DELTA_DU_DX                                 (0x00000310)
#define NV038_IMAGE_IN_DELTA_DV_DY                                 (0x00000314)
#define NV038_IMAGE_IN_SIZE                                        (0x00000318)
#define NV038_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV038_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV038_IMAGE_IN_FORMAT                                      (0x0000031C)
#define NV038_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV038_IMAGE_IN_FORMAT_COLOR                                31:16
#define NV038_IMAGE_IN_FORMAT_COLOR_LE_V8YB8U8YA8                  (0x00000001)
#define NV038_IMAGE_IN_FORMAT_COLOR_LE_YB8V8YA8U8                  (0x00000002)
#define NV038_IMAGE_IN_OFFSET                                      (0x00000320)
#define NV038_IMAGE_IN_POINT                                       (0x00000324)
#define NV038_IMAGE_IN_POINT_U                                     15:0
#define NV038_IMAGE_IN_POINT_V                                     31:16
#define NV038_OVERLAY_DELTA_DU_DX                                  (0x00000328)
#define NV038_OVERLAY_DELTA_DV_DY                                  (0x0000032C)
#define NV038_OVERLAY_SIZE                                         (0x00000330)
#define NV038_OVERLAY_SIZE_WIDTH                                   15:0
#define NV038_OVERLAY_SIZE_HEIGHT                                  31:16
#define NV038_OVERLAY_FORMAT                                       (0x00000334)
#define NV038_OVERLAY_FORMAT_PITCH                                 15:0
#define NV038_OVERLAY_FORMAT_COLOR                                 31:16
#define NV038_OVERLAY_FORMAT_COLOR_LE_A8V8U8Y8                     (0x00000001)
#define NV038_OVERLAY_FORMAT_COLOR_LE_A4V6YB6A4U6YA6               (0x00000002)
#define NV038_OVERLAY_FORMAT_COLOR_LE_TRANSPARENT                  (0x00000003)
#define NV038_OVERLAY_OFFSET                                       (0x00000338)
#define NV038_OVERLAY_POINT                                        (0x0000033C)
#define NV038_OVERLAY_POINT_U                                      15:0
#define NV038_OVERLAY_POINT_V                                      31:16
/* obsolete stuff */
#define NV4_DVD_SUBPICTURE                                         (0x00000038)
#define Nv4DvdSubpicture                                      Nv04DvdSubpicture
#define nv4DvdSubpicture                                      Nv04DvdSubpicture
#define nv04DvdSubpicture                                     Nv04DvdSubpicture


/* class NV03_MEMORY_TO_MEMORY_FORMAT */
#define  NV03_MEMORY_TO_MEMORY_FORMAT                              (0x00000039)
/* NvNotification[] elements */
#define NV039_NOTIFIERS_NOTIFY                                     (0)
#define NV039_NOTIFIERS_BUFFER_NOTIFY                              (1)
/* NvNotification[] fields and values */
#define NV039_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV039_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV039_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV039_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV039_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV039_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV039_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaBufferIn;   /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaBufferOut;  /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x060];
 NvU32 OffsetIn;                /* src offset in bytes              030c-030f*/
 NvU32 OffsetOut;               /* dst offset in bytes              0310-0313*/
 NvS32 PitchIn;                 /* delta in bytes, vert pixel delta 0314-0317*/
 NvS32 PitchOut;                /* delta in bytes, vert pixel delta 0318-031b*/
 NvU32 LineLengthIn;            /* in bytes                         031c-031f*/
 NvU32 LineCount;               /* in lines                         0320-0323*/
 NvV32 Format;                  /* out_in U24_U8                    0324-0327*/
 NvV32 BufferNotify;            /* NV039_BUFFER_NOTIFY_*            0328-032b*/
 NvV32 Reserved02[0x735];
} Nv039Typedef, Nv03MemoryToMemoryFormat;
#define NV039_TYPEDEF                                  Nv03MemoryToMemoryFormat
/* dma method offsets, fields, and values */
#define NV039_SET_OBJECT                                           (0x00000000)
#define NV039_NO_OPERATION                                         (0x00000100)
#define NV039_NOTIFY                                               (0x00000104)
#define NV039_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV039_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV039_SET_CONTEXT_DMA_BUFFER_IN                            (0x00000184)
#define NV039_SET_CONTEXT_DMA_BUFFER_OUT                           (0x00000188)
#define NV039_OFFSET_IN                                            (0x0000030C)
#define NV039_OFFSET_OUT                                           (0x00000310)
#define NV039_PITCH_IN                                             (0x00000314)
#define NV039_PITCH_OUT                                            (0x00000318)
#define NV039_LINE_LENGTH_IN                                       (0x0000031C)
#define NV039_LINE_COUNT                                           (0x00000320)
#define NV039_FORMAT                                               (0x00000324)
#define NV039_FORMAT_IN                                            7:0
#define NV039_FORMAT_OUT                                           31:8
#define NV039_BUFFER_NOTIFY                                        (0x00000328)
#define NV039_BUFFER_NOTIFY_WRITE_ONLY                             (0x00000000)
#define NV039_BUFFER_NOTIFY_WRITE_THEN_AWAKEN                      (0x00000001)
/* obsolete stuff */
#define NV3_MEMORY_TO_MEMORY_FORMAT                                (0x00000039)
#define Nv3MemoryToMemoryFormat                        Nv03MemoryToMemoryFormat
#define nv3MemoryToMemoryFormat                        Nv03MemoryToMemoryFormat
#define nv03MemoryToMemoryFormat                       Nv03MemoryToMemoryFormat

typedef NvV32 Nv03aTypedef;

typedef NvV32 Nv03bTypedef;

typedef NvV32 Nv03cTypedef;

/* class NV01_CONTEXT_DMA_IN_MEMORY */
#define  NV01_CONTEXT_DMA_IN_MEMORY                                (0x0000003D)
/* NvNotification[] fields and values */
#define NV03D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03dTypedef, Nv01ContextDmaInMemory;
#define  NV03D_TYPEDEF                                   Nv01ContextDmaInMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_IN_MEMORY                                 (0x0000003D)
#define  Nv1ContextDmaInMemory                           Nv01ContextDmaInMemory
#define  nv1ContextDmaInMemory                           Nv01ContextDmaInMemory
#define  nv01ContextDmaInMemory                          Nv01ContextDmaInMemory


#define  NV01_MEMORY_SYSTEM                                        (0x0000003E)
/* obsolete stuff */
/* class NV01_CONTEXT_ERROR_TO_MEMORY */
#define   NV01_CONTEXT_ERROR_TO_MEMORY                             (0x0000003E)
/* NvNotification[] fields and values */
#define NV03E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03eTypedef, Nv01ContextErrorToMemory;
#define  NV03E_TYPEDEF                                 Nv01ContextErrorToMemory
#define  NV1_CONTEXT_ERROR_TO_MEMORY                               (0x0000003E)
#define  Nv1ContextErrorToMemory                       Nv01ContextErrorToMemory
#define  nv1ContextErrorToMemory                       Nv01ContextErrorToMemory
#define  nv01ContextErrorToMemory                      Nv01ContextErrorToMemory


/* class NV01_MEMORY_LOCAL_PRIVILEGED */
#define  NV01_MEMORY_LOCAL_PRIVILEGED                              (0x0000003F)
/* NvNotification[] fields and values */
#define NV03F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03fTypedef, Nv01MemoryLocalPrivileged;
#define NV03F_TYPEDEF                                 Nv01MemoryLocalPrivileged
/* obsolete stuff */
#define NV01_MEMORY_PRIVILEGED                                     (0x0000003F)
#define NV1_MEMORY_PRIVILEGED                                      (0x0000003F)
#define Nv01MemoryPrivileged                          Nv01MemoryLocalPrivileged
#define nv01MemoryPrivileged                          Nv01MemoryLocalPrivileged
#define Nv1MemoryPrivileged                           Nv01MemoryLocalPrivileged
#define nv1MemoryPrivileged                           Nv01MemoryLocalPrivileged
#define nv01MemoryLocalPrivileged                     Nv01MemoryLocalPrivileged


/* class NV01_MEMORY_LOCAL_USER */

/* Class MEMORY_LOCAL_USER refers to framebuffer heap memory that is local to our device
   and accessable to every client.  This is in contrast to MEMORY_SYSTEM, that is 
   considered local to the system CPU, and MEMORY_LOCAL_PRIVILEGED, that refers to
   local instance memory and the local priveledge register space. - Chuck Moidel*/

/* Please note that RmAllocMemory(NV01_MEMORY_LOCAL_USER) and RmAlloc(NV01_MEMORY_LOCAL USER) 
   do VERY different things.  The older RmAllocMemory(NV01_MEMORY_LOCAL_USER) function does 
   not allocate ANY framebuffer memory.  It only allocates and returns a dumb linear mapping
   to the entire framebuffer. RmAlloc(NV01_MEMORY_LOCAL USER) on the other hand allocates blocks
   from the framebuffer heap.  - Chuck Moidel*/

#define  NV01_MEMORY_LOCAL_USER                                    (0x00000040)
/* NvNotification[] fields and values */
#define NV040_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv040Typedef, Nv01MemoryLocalUser;
#define NV040_TYPEDEF                                       Nv01MemoryLocalUser
/* obsolete stuff */
#define NV01_MEMORY_USER                                           (0x00000040)
#define NV1_MEMORY_USER                                            (0x00000040)
#define Nv01MemoryUser                                      Nv01MemoryLocalUser
#define nv01MemoryUser                                      Nv01MemoryLocalUser
#define Nv1MemoryUser                                       Nv01MemoryLocalUser
#define nv1MemoryUser                                       Nv01MemoryLocalUser
#define nv01MemoryLocalUser                                 Nv01MemoryLocalUser


/* class NV03_VIDEO_LUT_CURSOR_PAL */
#define  NV03_VIDEO_LUT_CURSOR_PAL                                 (0x00000041)
/* NvNotification[] elements */
#define NV041_NOTIFIERS_NOTIFY                                     (0)
#define NV041_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV041_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (3+(b))
#define NV041_NOTIFIERS_SET_LUT(b)                                 (5+(b))
#define NV041_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (7+(b))
#define NV041_NOTIFIERS_SET_CURSOR_POINT(b)                        (9+(b))
#define NV041_NOTIFIERS_SET_ENCODER(b)                             (11+(b))
/* NvNotification[] fields and values */
#define NV041_NOTIFICATION_INFO16_OFFSET_VALID                     (0x0001)
#define NV041_NOTIFICATION_INFO16_OFFSET_INVALID                   (0x0002)
#define NV041_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV041_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV041_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV041_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV041_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV041_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV041_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV041_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV041_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01D];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 SetContextDmaCursor;     /* NV01_CONTEXT_DMA                 0190-0193*/
 NvV32 Reserved01[0x05B];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvU32 size;                   /* height_width U16_U16 in pixels      4-   7*/
  NvV32 format;                 /* pitch_color_field_notify            8-   b*/
 } SetImage[2];                 /* end of methods in array              -0317*/
 NvV32 GetImageOffsetNotify[2]; /* NV041_GET_IMAGE_OFFSET_NOTIFY_*  0318-031f*/
 NvV32 SetLut[2];               /* notify_offset V02_U30            0320-0327*/
 NvV32 SetCursorImage[2];       /* notify_offset V02_U30            0328-032f*/
 NvV32 SetCursorPoint[2];       /* notify_y_x V02_S14_S16           0330-0337*/
 NvV32 SetEncoder[2];           /* see text                         0338-033f*/
 NvV32 Reserved02[0x730];
} Nv041Typedef, Nv03VideoLutCursorPal;
#define NV041_TYPEDEF                                     Nv03VideoLutCursorPal
/* dma method offsets, fields, and values */
#define NV041_SET_OBJECT                                           (0x00000000)
#define NV041_NO_OPERATION                                         (0x00000100)
#define NV041_NOTIFY                                               (0x00000104)
#define NV041_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV041_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV041_STOP_TRANSFER                                        (0x00000108)
#define NV041_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV041_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV041_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV041_SET_CONTEXT_DMA_LUT                                  (0x0000018C)
#define NV041_SET_CONTEXT_DMA_CURSOR                               (0x00000190)
#define NV041_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_SIZE(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV041_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV041_SET_IMAGE_FORMAT(b)                                  (0x00000308\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV041_SET_IMAGE_FORMAT_COLOR                               23:16
#define NV041_SET_IMAGE_FORMAT_COLOR_LUT_LE_Y8                     (0x00000000)
#define NV041_SET_IMAGE_FORMAT_COLOR_BYPASS_LE_R5G6B5              (0x00000001)
#define NV041_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1R5G5B5              (0x00000002)
#define NV041_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1X7R8G8B8            (0x00000003)
#define NV041_SET_IMAGE_FORMAT_FIELD                               29:24
#define NV041_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV041_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV041_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV041_SET_IMAGE_FORMAT_NOTIFY                              31:30
#define NV041_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000318\
                                                                   +(b)*0x0004)
#define NV041_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_LUT(b)                                           (0x00000320\
                                                                   +(b)*0x0004)
#define NV041_SET_LUT_OFFSET                                       29:0
#define NV041_SET_LUT_NOTIFY                                       31:30
#define NV041_SET_LUT_NOTIFY_WRITE_ONLY                            (0x00000000)
#define NV041_SET_LUT_NOTIFY_WRITE_THEN_AWAKEN                     (0x00000001)
#define NV041_SET_CURSOR_IMAGE(b)                                  (0x00000328\
                                                                   +(b)*0x0004)
#define NV041_SET_CURSOR_IMAGE_OFFSET                              29:0
#define NV041_SET_CURSOR_IMAGE_NOTIFY                              31:30
#define NV041_SET_CURSOR_IMAGE_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_CURSOR_IMAGE_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_CURSOR_POINT(b)                                  (0x00000330\
                                                                   +(b)*0x0004)
#define NV041_SET_CURSOR_POINT_X                                   15:0
#define NV041_SET_CURSOR_POINT_Y                                   29:16
#define NV041_SET_CURSOR_POINT_NOTIFY                              31:30
#define NV041_SET_CURSOR_POINT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_CURSOR_POINT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_ENCODER(b)                                       (0x00000338\
                                                                   +(b)*0x0004)
#define NV041_SET_ENCODER_UNDERSCAN_LEFT                           4:0
#define NV041_SET_ENCODER_UNDERSCAN_RIGHT                          9:5
#define NV041_SET_ENCODER_UNDERSCAN_TOP                            14:10
#define NV041_SET_ENCODER_UNDERSCAN_BOTTOM                         19:15
#define NV041_SET_ENCODER_FILTER_HORIZONTAL                        21:20
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_ZOH                    (0x00000000)
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_FOH                    (0x00000001)
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_SOH                    (0x00000002)
#define NV041_SET_ENCODER_FILTER_VERTICAL                          23:22
#define NV041_SET_ENCODER_FILTER_VERTICAL_ZOH                      (0x00000000)
#define NV041_SET_ENCODER_FILTER_VERTICAL_FOH                      (0x00000001)
#define NV041_SET_ENCODER_FILTER_VERTICAL_SOH                      (0x00000002)
#define NV041_SET_ENCODER_VERTICAL_FRONT_PORCH_ADJUST              29:24
#define NV041_SET_ENCODER_REFRESH                                  30:30
#define NV041_SET_ENCODER_REFRESH_INTERLACED                       (0x00000000)
#define NV041_SET_ENCODER_REFRESH_NONINTERLACED                    (0x00000001)
#define NV041_SET_ENCODER_NOTIFY                                   31:31
#define NV041_SET_ENCODER_NOTIFY_WRITE_ONLY                        (0x00000000)
#define NV041_SET_ENCODER_NOTIFY_WRITE_THEN_AWAKEN                 (0x00000001)


/* class NV04_CONTEXT_SURFACES_2D */
#define  NV04_CONTEXT_SURFACES_2D                                  (0x00000042)
/* NvNotification[] elements */
#define NV042_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV042_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV042_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV042_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV042_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV042_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV042_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV042_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImageSource;/* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageDestin;/* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05d];
 NvV32 SetColorFormat;          /* NV042_SET_COLOR_FORMAT_*         0300-0303*/
 NvU32 SetPitch;                /* destin_source U16_U16            0304-0307*/
 NvU32 SetOffsetSource;         /* byte offset of top-left pixel    0308-030b*/
 NvU32 SetOffsetDestin;         /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved02[0x73c];
} Nv042Typedef, Nv04ContextSurfaces2d;
#define NV042_TYPEDEF                                     Nv04ContextSurfaces2d
/* dma method offsets, fields, and values */
#define NV042_SET_OBJECT                                           (0x00000000)
#define NV042_NO_OPERATION                                         (0x00000100)
#define NV042_NOTIFY                                               (0x00000104)
#define NV042_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV042_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV042_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV042_SET_CONTEXT_DMA_IMAGE_SOURCE                         (0x00000184)
#define NV042_SET_CONTEXT_DMA_IMAGE_DESTIN                         (0x00000188)
#define NV042_SET_COLOR_FORMAT                                     (0x00000300)
#define NV042_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV042_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV042_SET_COLOR_FORMAT_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV042_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000004)
#define NV042_SET_COLOR_FORMAT_LE_Y16                              (0x00000005)
#define NV042_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV042_SET_COLOR_FORMAT_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV042_SET_COLOR_FORMAT_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV042_SET_COLOR_FORMAT_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV042_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x0000000A)
#define NV042_SET_COLOR_FORMAT_LE_Y32                              (0x0000000B)
#define NV042_SET_PITCH                                            (0x00000304)
#define NV042_SET_PITCH_SOURCE                                     15:0
#define NV042_SET_PITCH_DESTIN                                     31:16
#define NV042_SET_OFFSET_SOURCE                                    (0x00000308)
#define NV042_SET_OFFSET_DESTIN                                    (0x0000030C)
/* obsolete stuff */
#define NV4_CONTEXT_SURFACES_2D                                    (0x00000042)
#define Nv4ContextSurfaces2d                              Nv04ContextSurfaces2d
#define nv4ContextSurfaces2d                              Nv04ContextSurfaces2d
#define nv4ContextSurfaces2D                              Nv04ContextSurfaces2d
#define nv04ContextSurfaces2d                             Nv04ContextSurfaces2d


/* class NV03_CONTEXT_ROP */
#define  NV03_CONTEXT_ROP                                          (0x00000043)
/* NvNotification[] elements */
#define NV043_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV043_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV043_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV043_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV043_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV043_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV043_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV043_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetRop5;                 /* 32-bit ROP5                      0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv043Typedef, Nv03ContextRop;
#define NV043_TYPEDEF                                            Nv03ContextRop
/* dma method offsets, fields, and values */
#define NV043_SET_OBJECT                                           (0x00000000)
#define NV043_NO_OPERATION                                         (0x00000100)
#define NV043_NOTIFY                                               (0x00000104)
#define NV043_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV043_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV043_SET_ROP5                                             (0x00000300)
/* obsolete stuff */
#define NV3_CONTEXT_ROP                                            (0x00000043)
#define Nv3ContextRop                                            Nv03ContextRop
#define nv3ContextRop                                            Nv03ContextRop
#define nv03ContextRop                                           Nv03ContextRop


/* class NV04_CONTEXT_PATTERN */
#define  NV04_CONTEXT_PATTERN                                      (0x00000044)
/* NvNotification[] elements */
#define NV044_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV044_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV044_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV044_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV044_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV044_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV044_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV044_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV044_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV044_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 SetMonochromeShape;      /* NV044_SET_MONOCHROME_SHAPE_*     0308-030b*/
 NvV32 SetPatternSelect;        /* NV044_SET_PATTERN_SELECT_*       030c-030f*/
 NvV32 SetMonochromeColor0;     /* color of 0 pixels                0310-0313*/
 NvV32 SetMonochromeColor1;     /* color of 1 pixels                0314-0317*/
 NvV32 SetMonochromePattern0;   /* first  32 bits of pattern data   0318-031b*/
 NvV32 SetMonochromePattern1;   /* second 32 bits of pattern data   031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 SetPatternY8[16];        /* y3_y2_y1_y0 U8_U8_U8_U8          0400-043f*/
 NvV32 Reserved03[0x030];
 NvV32 SetPatternR5G6B5[32];    /* see text                         0500-057f*/
 NvV32 Reserved04[0x020];
 NvV32 SetPatternX1R5G5B5[32];  /* see text                         0600-067f*/
 NvV32 Reserved05[0x020];
 NvV32 SetPatternX8R8G8B8[64];  /* ignore_red_green_blu U8_U8_U8_U8 0700-07ff*/
 NvV32 Reserved06[0x600];
} Nv044Typedef, Nv04ContextPattern;
#define NV044_TYPEDEF                                          Nv04ContextPattern
/* dma method offsets, fields, and values */
#define NV044_SET_OBJECT                                           (0x00000000)
#define NV044_NO_OPERATION                                         (0x00000100)
#define NV044_NOTIFY                                               (0x00000104)
#define NV044_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV044_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV044_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV044_SET_COLOR_FORMAT                                     (0x00000300)
#define NV044_SET_COLOR_FORMAT_LE_A16R5G6B5                        (0x00000001)
#define NV044_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV044_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV044_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV044_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV044_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV044_SET_MONOCHROME_SHAPE                                 (0x00000308)
#define NV044_SET_MONOCHROME_SHAPE_8X_8Y                           (0x00000000)
#define NV044_SET_MONOCHROME_SHAPE_64X_1Y                          (0x00000001)
#define NV044_SET_MONOCHROME_SHAPE_1X_64Y                          (0x00000002)
#define NV044_SET_PATTERN_SELECT                                   (0x0000030C)
#define NV044_SET_PATTERN_SELECT_MONOCHROME                        (0x00000001)
#define NV044_SET_PATTERN_SELECT_COLOR                             (0x00000002)
#define NV044_SET_MONOCHORME_COLOR0                                (0x00000310)
#define NV044_SET_MONOCHORME_COLOR1                                (0x00000314)
#define NV044_SET_MONOCHORME_PATTERN0                              (0x00000318)
#define NV044_SET_MONOCHORME_PATTERN1                              (0x0000031C)

#define NV044_SET_MONOCHROME_COLOR0                                (0x00000310)
#define NV044_SET_MONOCHROME_COLOR1                                (0x00000314)
#define NV044_SET_MONOCHROME_PATTERN0                              (0x00000318)
#define NV044_SET_MONOCHROME_PATTERN1                              (0x0000031C)

#define NV044_SET_PATTERN_Y8(i)                                    (0x00000400\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_Y8_Y0                                    7:0
#define NV044_SET_PATTERN_Y8_Y1                                    15:8
#define NV044_SET_PATTERN_Y8_Y2                                    23:16
#define NV044_SET_PATTERN_Y8_Y3                                    31:24
#define NV044_SET_PATTERN_R5G6B5(i)                                (0x00000500\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_R5G6B5_BLUE0                             4:0
#define NV044_SET_PATTERN_R5G6B5_GREEN0                            10:5
#define NV044_SET_PATTERN_R5G6B5_RED0                              15:11
#define NV044_SET_PATTERN_R5G6B5_BLUE1                             20:16
#define NV044_SET_PATTERN_R5G6B5_GREEN1                            26:21
#define NV044_SET_PATTERN_R5G6B5_RED1                              31:27
#define NV044_SET_PATTERN_X1R5G5B5(i)                              (0x00000600\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_X1R5G5B5_BLUE0                           4:0
#define NV044_SET_PATTERN_X1R5G5B5_GREEN0                          9:5
#define NV044_SET_PATTERN_X1R5G5B5_RED0                            14:10
#define NV044_SET_PATTERN_X1R5G5B5_IGNORE0                         15:15
#define NV044_SET_PATTERN_X1R5G5B5_BLUE1                           20:16
#define NV044_SET_PATTERN_X1R5G5B5_GREEN1                          25:21
#define NV044_SET_PATTERN_X1R5G5B5_RED1                            30:26
#define NV044_SET_PATTERN_X1R5G5B5_IGNORE1                         31:31
#define NV044_SET_PATTERN_X8R8G8B8(i)                              (0x00000700\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_X8R8G8B8_BLUE                            7:0
#define NV044_SET_PATTERN_X8R8G8B8_GREEN                           15:8
#define NV044_SET_PATTERN_X8R8G8B8_RED                             23:16
#define NV044_SET_PATTERN_X8R8G8B8_IGNORE                          31:24
/* obsolete stuff */
#define NV4_CONTEXT_PATTERN                                        (0x00000044)
#define Nv04ImagePattern                                     Nv04ContextPattern
#define Nv4ImagePattern                                      Nv04ContextPattern
#define nv4ImagePattern                                      Nv04ContextPattern
#define Nv4ContextPattern                                    Nv04ContextPattern
#define nv4ContextPattern                                    Nv04ContextPattern
#define nv04ContextPattern                                   Nv04ContextPattern


/* class NV03_VIDEO_LUT_CURSOR_NTSC */
#define  NV03_VIDEO_LUT_CURSOR_NTSC                                (0x00000045)
/* NvNotification[] elements */
#define NV045_NOTIFIERS_NOTIFY                                     (0)
#define NV045_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV045_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (3+(b))
#define NV045_NOTIFIERS_SET_LUT(b)                                 (5+(b))
#define NV045_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (7+(b))
#define NV045_NOTIFIERS_SET_CURSOR_POINT(b)                        (9+(b))
#define NV045_NOTIFIERS_SET_ENCODER(b)                             (11+(b))
/* NvNotification[] fields and values */
#define NV045_NOTIFICATION_INFO16_OFFSET_VALID                     (0x0001)
#define NV045_NOTIFICATION_INFO16_OFFSET_INVALID                   (0x0002)
#define NV045_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV045_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV045_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV045_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV045_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV045_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV045_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV045_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV045_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01D];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 SetContextDmaCursor;     /* NV01_CONTEXT_DMA                 0190-0193*/
 NvV32 Reserved01[0x05B];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvU32 size;                   /* height_width U16_U16 in pixels      4-   7*/
  NvV32 format;                 /* pitch_color_field_notify            8-   b*/
 } SetImage[2];                 /* end of methods in array              -0317*/
 NvV32 GetImageOffsetNotify[2]; /* NV045_GET_IMAGE_OFFSET_NOTIFY_*  0318-031f*/
 NvV32 SetLut[2];               /* notify_offset V02_U30            0320-0327*/
 NvV32 SetCursorImage[2];       /* notify_offset V02_U30            0328-032f*/
 NvV32 SetCursorPoint[2];       /* notify_y_x V02_S14_S16           0330-0337*/
 NvV32 SetEncoder[2];           /* see text                         0338-033f*/
 NvV32 Reserved02[0x730];
} Nv045Typedef, Nv03VideoLutCursorNtsc;
#define NV045_TYPEDEF                                    Nv03VideoLutCursorNtsc
/* dma method offsets, fields, and values */
#define NV045_SET_OBJECT                                           (0x00000000)
#define NV045_NO_OPERATION                                         (0x00000100)
#define NV045_NOTIFY                                               (0x00000104)
#define NV045_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV045_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV045_STOP_TRANSFER                                        (0x00000108)
#define NV045_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV045_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV045_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV045_SET_CONTEXT_DMA_LUT                                  (0x0000018C)
#define NV045_SET_CONTEXT_DMA_CURSOR                               (0x00000190)
#define NV045_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_SIZE(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV045_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV045_SET_IMAGE_FORMAT(b)                                  (0x00000308\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV045_SET_IMAGE_FORMAT_COLOR                               23:16
#define NV045_SET_IMAGE_FORMAT_COLOR_LUT_LE_Y8                     (0x00000000)
#define NV045_SET_IMAGE_FORMAT_COLOR_BYPASS_LE_R5G6B5              (0x00000001)
#define NV045_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1R5G5B5              (0x00000002)
#define NV045_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1X7R8G8B8            (0x00000003)
#define NV045_SET_IMAGE_FORMAT_FIELD                               29:24
#define NV045_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV045_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV045_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV045_SET_IMAGE_FORMAT_NOTIFY                              31:30
#define NV045_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000318\
                                                                   +(b)*0x0004)
#define NV045_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_LUT(b)                                           (0x00000320\
                                                                   +(b)*0x0004)
#define NV045_SET_LUT_OFFSET                                       29:0
#define NV045_SET_LUT_NOTIFY                                       31:30
#define NV045_SET_LUT_NOTIFY_WRITE_ONLY                            (0x00000000)
#define NV045_SET_LUT_NOTIFY_WRITE_THEN_AWAKEN                     (0x00000001)
#define NV045_SET_CURSOR_IMAGE(b)                                  (0x00000328\
                                                                   +(b)*0x0004)
#define NV045_SET_CURSOR_IMAGE_OFFSET                              29:0
#define NV045_SET_CURSOR_IMAGE_NOTIFY                              31:30
#define NV045_SET_CURSOR_IMAGE_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_CURSOR_IMAGE_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_CURSOR_POINT(b)                                  (0x00000330\
                                                                   +(b)*0x0004)
#define NV045_SET_CURSOR_POINT_X                                   15:0
#define NV045_SET_CURSOR_POINT_Y                                   29:16
#define NV045_SET_CURSOR_POINT_NOTIFY                              31:30
#define NV045_SET_CURSOR_POINT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_CURSOR_POINT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_ENCODER(b)                                       (0x00000338\
                                                                   +(b)*0x0004)
#define NV045_SET_ENCODER_UNDERSCAN_LEFT                           4:0
#define NV045_SET_ENCODER_UNDERSCAN_RIGHT                          9:5
#define NV045_SET_ENCODER_UNDERSCAN_TOP                            14:10
#define NV045_SET_ENCODER_UNDERSCAN_BOTTOM                         19:15
#define NV045_SET_ENCODER_FILTER_HORIZONTAL                        21:20
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_ZOH                    (0x00000000)
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_FOH                    (0x00000001)
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_SOH                    (0x00000002)
#define NV045_SET_ENCODER_FILTER_VERTICAL                          23:22
#define NV045_SET_ENCODER_VERTICAL_FRONT_PORCH_ADJUST              29:24
#define NV045_SET_ENCODER_FILTER_VERTICAL_ZOH                      (0x00000000)
#define NV045_SET_ENCODER_FILTER_VERTICAL_FOH                      (0x00000001)
#define NV045_SET_ENCODER_FILTER_VERTICAL_SOH                      (0x00000002)
#define NV045_SET_ENCODER_REFRESH                                  30:30
#define NV045_SET_ENCODER_REFRESH_INTERLACED                       (0x00000000)
#define NV045_SET_ENCODER_REFRESH_NONINTERLACED                    (0x00000001)
#define NV045_SET_ENCODER_NOTIFY                                   31:31
#define NV045_SET_ENCODER_NOTIFY_WRITE_ONLY                        (0x00000000)
#define NV045_SET_ENCODER_NOTIFY_WRITE_THEN_AWAKEN                 (0x00000001)


/* class NV04_VIDEO_LUT_CURSOR_DAC */
#define  NV04_VIDEO_LUT_CURSOR_DAC                                 (0x00000046)
/* NvNotification[] elements */
#define NV046_NOTIFIERS_NOTIFY                                     (0)
#define NV046_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV046_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV046_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV046_NOTIFIERS_SET_DAC(b)                                 (7+(b))
/* NvNotification[] fields and values */
#define NV046_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV046_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV046_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV046_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV046_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV046_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV046_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV046_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV046_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV046_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV046_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV046_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV046_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV046_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x057];
 NvV32 SetPanOffset;            /* byte offset for panning          0220-0223*/
 NvV32 GetOffset;               /* NV046_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_pitch V1_U16_U16             4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv046Typedef, Nv04VideoLutCursorDac;
#define NV046_TYPEDEF                                     Nv04VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV046_SET_OBJECT                                           (0x00000000)
#define NV046_NO_OPERATION                                         (0x00000100)
#define NV046_NOTIFY                                               (0x00000104)
#define NV046_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV046_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV046_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV046_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV046_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV046_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV046_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV046_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV046_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV046_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV046_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV046_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV046_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV046_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV046_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV046_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV046_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV046_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV046_SET_PAN_OFFSET                                       (0x00000220)
#define NV046_GET_OFFSET                                           (0x000002FC)
#define NV046_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV046_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV046_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV046_SET_IMAGE_FORMAT_FLAGS                               27:25
#define NV046_SET_IMAGE_FORMAT_FLAGS_COMPLETE_ON_OBJECT_CLEANUP    (0x00000001)
#define NV046_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV046_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV046_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV046_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV046_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV046_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV046_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV046_SET_CURSOR_POINT                                     (0x00000330)
#define NV046_SET_CURSOR_POINT_X                                   15:0
#define NV046_SET_CURSOR_POINT_Y                                   31:16
#define NV046_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV046_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV046_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV046_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV046_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV046_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV046_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV046_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV046_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV046_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV046_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV046_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV046_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV046_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV046_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV046_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV046_SET_DAC_FORMAT_COLOR                                 19:16
#define NV046_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV046_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV046_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV046_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV046_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV046_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV046_SET_DAC_FORMAT_PRIMARY_DEVICE                        28:28
#define NV046_SET_DAC_FORMAT_PRIMARY_DEVICE_FALSE                  (0x00000000)
#define NV046_SET_DAC_FORMAT_PRIMARY_DEVICE_TRUE                   (0x00000001)
#define NV046_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV046_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV046_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


/* class NV04_VIDEO_OVERLAY */
#define  NV04_VIDEO_OVERLAY                                        (0x00000047)
/* NvNotification[] elements */
#define NV047_NOTIFIERS_NOTIFY                                     (0)
#define NV047_NOTIFIERS_SET_OVERLAY(b)                             (1+(b))
/* NvNotification[] fields and values */
#define NV047_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV047_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV047_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV047_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV047_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV047_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV047_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV047_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV047_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV047_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 StopOverlay[2];          /* NV047_STOP_OVERLAY_*             0120-0127*/
 NvV32 Reserved01[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved02[0x006];
 NvV32 SetContextDmaOverlay[2]; /* NV01_CONTEXT_DMA                 019c-01a3*/
 NvV32 Reserved03[0x056];
 NvV32 GetOffset;               /* NV047_GET_OFFSET_*               02FC-02FF*/
 NvV32 Reserved04[0x040];
 struct {                       /* start of methods in array        0400-    */
  NvV32 reserved05[0x017];      /* see text                           00-  5b*/
  NvV32 colorKey;               /* see text                           5c-  5f*/
  NvU32 offset;                 /* byte offset of top-left texel      60-  63*/
  NvV32 sizeIn;                 /* height_width U16_U16               64-  67*/
  NvV32 pointIn;                /* t_s U12d4_U12d4                    68-  6b*/
  NvV32 dsDx;                   /* U12d20 ds/dx                       6c-  6f*/
  NvV32 dtDy;                   /* U12d20 dt/dy                       70-  73*/
  NvV32 pointOut;               /* y_x U16_U16                        74-  77*/
  NvV32 sizeOut;                /* height_width U16_U16               78-  7b*/
  NvV32 format;                 /* format_display_color_pitch         7c-  7f*/
 } SetOverlay[2];               /* end of methods in array              -04ff*/
 NvV32 SetOverlayPointOutA;     /* y_x U16_U16                      0500-0503*/
 NvV32 Reserved06[0x6bf];
} Nv047Typedef, Nv04VideoOverlay;
#define NV047_TYPEDEF                                          Nv04VideoOverlay
/* dma method offsets, fields, and values */
#define NV047_SET_OBJECT                                           (0x00000000)
#define NV047_NO_OPERATION                                         (0x00000100)
#define NV047_NOTIFY                                               (0x00000104)
#define NV047_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV047_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV047_STOP_OVERLAY(b)                                      (0x00000120\
                                                                   +(b)*0x0004)
#define NV047_STOP_OVERLAY_AS_SOON_AS_POSSIBLE                     (0x00000000)
#define NV047_STOP_OVERLAY_BETWEEN_BUFFERS                         (0x00000001)
#define NV047_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV047_SET_CONTEXT_DMA_OVERLAY(b)                           (0x0000019C\
                                                                   +(b)*0x0004)
#define NV047_SET_OVERLAY(b)                                       (0x00000400\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_COLORKEY(b)                              (0x0000045C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_OFFSET(b)                                (0x00000460\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_IN(b)                               (0x00000464\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_IN_WIDTH                            15:0
#define NV047_SET_OVERLAY_SIZE_IN_HEIGHT                           31:16
#define NV047_SET_OVERLAY_POINT_IN(b)                              (0x00000468\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_IN_S                               15:0
#define NV047_SET_OVERLAY_POINT_IN_T                               31:16
#define NV047_SET_OVERLAY_DS_DX(b)                                 (0x0000046C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_DT_DY(b)                                 (0x00000470\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_OUT(b)                             (0x00000474\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_OUT_X                              15:0
#define NV047_SET_OVERLAY_POINT_OUT_Y                              31:16
#define NV047_SET_OVERLAY_SIZE_OUT(b)                              (0x00000478\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_OUT_WIDTH                           15:0
#define NV047_SET_OVERLAY_SIZE_OUT_HEIGHT                          31:16
#define NV047_SET_OVERLAY_FORMAT(b)                                (0x0000047C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_FORMAT_PITCH                             15:0
#define NV047_SET_OVERLAY_FORMAT_COLOR                             19:16
#define NV047_SET_OVERLAY_FORMAT_COLOR_LE_YB8CR8YA8CB8             (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_COLOR_LE_CR8YB8CB8YA8             (0x00000001)
#define NV047_SET_OVERLAY_FORMAT_DISPLAY                           30:20
#define NV047_SET_OVERLAY_FORMAT_DISPLAY_ALWAYS                    (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_DISPLAY_COLOR_KEY_EQUAL           (0x00000001)
#define NV047_SET_OVERLAY_FORMAT_NOTIFY                            31:31
#define NV047_SET_OVERLAY_FORMAT_NOTIFY_WRITE_ONLY                 (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_NOTIFY_WRITE_THEN_AWAKEN          (0x00000001)
#define NV047_SET_OVERLAY_POINT_OUT_A                              (0x00000500)
#define NV047_SET_OVERLAY_POINT_OUT_A_X                            15:0
#define NV047_SET_OVERLAY_POINT_OUT_A_Y                            31:16

/* class NV03_DX3_TEXTURED_TRIANGLE */
#define  NV03_DX3_TEXTURED_TRIANGLE                                (0x00000048)
/* NvNotification[] elements */
#define NV048_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV048_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV048_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV048_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV048_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV048_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV048_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV048_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaTexture;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextSurfaceColor;  /* NV03_CONTEXT_SURFACE_3D_COLOR    018c-018f*/
 NvV32 SetContextSurfaceZeta;   /* NV03_CONTEXT_SURFACE_3D_DEPTH    0190-0193*/
 NvV32 Reserved01[0x05c];
 NvU32 TextureOffset;           /* offset in bytes                  0304-0307*/
 NvV32 TextureFormat;           /* see text                         0308-030b*/
 NvV32 TextureFilter;           /* ignre_sizeAdjust_spreadY_spreadX 030c-030f*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0310-0313*/
 NvV32 Control0;                /* see text                         0314-0317*/
 NvV32 Control1;                /* alphafunc_alpharef V24_U8        0318-031b*/
 NvV32 Reserved02[0x339];
 struct {                       /* start of method in array         1000-    */
  NvV32 specular;               /* fog_i5-i0 U0d8_U4_U4_U4_U4_U4_U4   00-  03*/
  NvV32 color;                  /* X8R8G8B8 or A8R8G8B8               04-  07*/
  NvF32 sx;                     /* screen x coordinate                08-  0b*/
  NvF32 sy;                     /* screen y coordinate                0c-  0f*/
  NvF32 sz;                     /* screen z coordinate                10-  13*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[128];               /* end of method in array               -1fff*/
} Nv048Typedef, Nv03Dx3TexturedTriangle;
#define NV048_TYPEDEF                                   Nv03Dx3TexturedTriangle
/* dma method offsets, fields, and values */
#define NV048_SET_OBJECT                                           (0x00000000)
#define NV048_NO_OPERATION                                         (0x00000100)
#define NV048_NOTIFY                                               (0x00000104)
#define NV048_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV048_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV048_SET_CONTEXT_DMA_TEXTURE                              (0x00000184)
#define NV048_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV048_SET_CONTEXT_SURFACE_COLOR                            (0x0000018C)
#define NV048_SET_CONTEXT_SURFACE_ZETA                             (0x00000190)
#define NV048_TEXTURE_OFFSET                                       (0x00000304)
#define NV048_TEXTURE_FORMAT                                       (0x00000308)
#define NV048_TEXTURE_FORMAT_VALUE                                 15:0
#define NV048_TEXTURE_FORMAT_KEY                                   19:16
#define NV048_TEXTURE_FORMAT_KEY_DISABLED                          (0x00000000)
#define NV048_TEXTURE_FORMAT_KEY_ENABLED                           (0x00000001)
#define NV048_TEXTURE_FORMAT_COLOR                                 23:20
#define NV048_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                     (0x00000000)
#define NV048_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                     (0x00000001)
#define NV048_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                     (0x00000002)
#define NV048_TEXTURE_FORMAT_COLOR_LE_R5G6B5                       (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MIN                              27:24
#define NV048_TEXTURE_FORMAT_SIZE_MIN_4X4                          (0x00000002)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_8X8                          (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_16X16                        (0x00000004)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_32X32                        (0x00000005)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_64X64                        (0x00000006)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_128X128                      (0x00000007)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_256X256                      (0x00000008)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_512X512                      (0x00000009)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_1024X1024                    (0x0000000A)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_2048X2048                    (0x0000000B)
#define NV048_TEXTURE_FORMAT_SIZE_MAX                              31:28
#define NV048_TEXTURE_FORMAT_SIZE_MAX_4X4                          (0x00000002)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_8X8                          (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_16X16                        (0x00000004)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_32X32                        (0x00000005)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_64X64                        (0x00000006)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_128X128                      (0x00000007)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_256X256                      (0x00000008)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_512X512                      (0x00000009)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_1024X1024                    (0x0000000A)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_2048X2048                    (0x0000000B)
#define NV048_TEXTURE_FILTER                                       (0x0000030C)
#define NV048_TEXTURE_FILTER_SPREAD_X                              4:0
#define NV048_TEXTURE_FILTER_IGNORE0                               7:5
#define NV048_TEXTURE_FILTER_SPREAD_Y                              12:8
#define NV048_TEXTURE_FILTER_IGNORE1                               15:13
#define NV048_TEXTURE_FILTER_SIZE_ADJUST                           23:16
#define NV048_TEXTURE_FILTER_IGNORE2                               31:24
#define NV048_FOG_COLOR                                            (0x00000310)
#define NV048_CONTROL0                                             (0x00000314)
#define NV048_CONTROL0_INTERPOLATOR                                3:0
#define NV048_CONTROL0_INTERPOLATOR_ZOH_CORNER                     (0x00000000)
#define NV048_CONTROL0_INTERPOLATOR_ZOH_CENTER                     (0x00000001)
#define NV048_CONTROL0_INTERPOLATOR_FOH_CENTER                     (0x00000002)
#define NV048_CONTROL0_WRAP_U                                      5:4
#define NV048_CONTROL0_WRAP_U_CYLINDRICAL                          (0x00000000)
#define NV048_CONTROL0_WRAP_U_WRAP                                 (0x00000001)
#define NV048_CONTROL0_WRAP_U_MIRROR                               (0x00000002)
#define NV048_CONTROL0_WRAP_U_CLAMP                                (0x00000003)
#define NV048_CONTROL0_WRAP_V                                      7:6
#define NV048_CONTROL0_WRAP_V_CYLINDRICAL                          (0x00000000)
#define NV048_CONTROL0_WRAP_V_WRAP                                 (0x00000001)
#define NV048_CONTROL0_WRAP_V_MIRROR                               (0x00000002)
#define NV048_CONTROL0_WRAP_V_CLAMP                                (0x00000003)
#define NV048_CONTROL0_COLOR_FORMAT                                9:8
#define NV048_CONTROL0_COLOR_FORMAT_LE_X8R8G8B8                    (0x00000000)
#define NV048_CONTROL0_COLOR_FORMAT_LE_A8R8G8B8                    (0x00000001)
#define NV048_CONTROL0_SOURCE_COLOR                                11:10
#define NV048_CONTROL0_SOURCE_COLOR_NORMAL                         (0x00000000)
#define NV048_CONTROL0_SOURCE_COLOR_COLOR_INVERSE                  (0x00000001)
#define NV048_CONTROL0_SOURCE_COLOR_ALPHA_INVERSE                  (0x00000002)
#define NV048_CONTROL0_SOURCE_COLOR_ALPHA_ONE                      (0x00000003)
#define NV048_CONTROL0_CULLING                                     14:12
#define NV048_CONTROL0_CULLING_NONE                                (0x00000001)
#define NV048_CONTROL0_CULLING_COUNTERCLOCKWISE                    (0x00000002)
#define NV048_CONTROL0_CULLING_CLOCKWISE                           (0x00000003)
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE                        15:15
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV048_CONTROL0_ZFUNC                                       19:16
#define NV048_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV048_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV048_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV048_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV048_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV048_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV048_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV048_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV048_CONTROL0_ZETA_WRITE                                  23:20
#define NV048_CONTROL0_ZETA_WRITE_NEVER                            (0x00000000)
#define NV048_CONTROL0_ZETA_WRITE_ALPHA                            (0x00000001)
#define NV048_CONTROL0_ZETA_WRITE_ALPHA_ZETA                       (0x00000002)
#define NV048_CONTROL0_ZETA_WRITE_ZETA                             (0x00000003)
#define NV048_CONTROL0_ZETA_WRITE_ALWAYS                           (0x00000004)
#define NV048_CONTROL0_COLOR_WRITE                                 27:24
#define NV048_CONTROL0_COLOR_WRITE_NEVER                           (0x00000000)
#define NV048_CONTROL0_COLOR_WRITE_ALPHA                           (0x00000001)
#define NV048_CONTROL0_COLOR_WRITE_ALPHA_ZETA                      (0x00000002)
#define NV048_CONTROL0_COLOR_WRITE_ZETA                            (0x00000003)
#define NV048_CONTROL0_COLOR_WRITE_ALWAYS                          (0x00000004)
#define NV048_CONTROL0_ROP                                         28:28
#define NV048_CONTROL0_ROP_BLEND_AND                               (0x00000000)
#define NV048_CONTROL0_ROP_ADD_WITH_SATURATION                     (0x00000001)
#define NV048_CONTROL0_BLEND_BETA                                  29:29
#define NV048_CONTROL0_BLEND_BETA_SRCALPHA                         (0x00000000)
#define NV048_CONTROL0_BLEND_BETA_DESTCOLOR                        (0x00000001)
#define NV048_CONTROL0_BLEND_INPUT0                                30:30
#define NV048_CONTROL0_BLEND_INPUT0_DESTCOLOR                      (0x00000000)
#define NV048_CONTROL0_BLEND_INPUT0_ZERO                           (0x00000001)
#define NV048_CONTROL0_BLEND_INPUT1                                31:31
#define NV048_CONTROL0_BLEND_INPUT1_SRCCOLOR                       (0x00000000)
#define NV048_CONTROL0_BLEND_INPUT1_ZERO                           (0x00000001)
#define NV048_CONTROL1                                             (0x00000318)
#define NV048_CONTROL1_ALPHAREF                                    7:0
#define NV048_CONTROL1_ALPHAFUNC                                   31:8
#define NV048_CONTROL1_ALPHAFUNC_NEVER                             (0x00000001)
#define NV048_CONTROL1_ALPHAFUNC_LESS                              (0x00000002)
#define NV048_CONTROL1_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV048_CONTROL1_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV048_CONTROL1_ALPHAFUNC_GREATER                           (0x00000005)
#define NV048_CONTROL1_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV048_CONTROL1_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV048_CONTROL1_ALPHAFUNC_ALWAYS                            (0x00000008)

#define NV048_TLVERTEX(a)                                          (0x00001000\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SPECULAR(a)                                 (0x00001000\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SPECULAR_I0                                 3:0
#define NV048_TLVERTEX_SPECULAR_I1                                 7:4
#define NV048_TLVERTEX_SPECULAR_I2                                 11:8
#define NV048_TLVERTEX_SPECULAR_I3                                 15:12
#define NV048_TLVERTEX_SPECULAR_I4                                 19:16
#define NV048_TLVERTEX_SPECULAR_I5                                 23:20
#define NV048_TLVERTEX_SPECULAR_FOG                                31:24
#define NV048_TLVERTEX_COLOR(a)                                    (0x00001004\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SX(a)                                       (0x00001008\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SY(a)                                       (0x0000100C\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SZ(a)                                       (0x00001010\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_RHW(a)                                      (0x00001014\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_TU(a)                                       (0x00001018\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_TV(a)                                       (0x0000101C\
                                                                   +(a)*0x0020)
/* obsolete stuff */
#define NV3_DX3_TEXTURED_TRIANGLE                                  (0x00000048)
#define Nv3Dx3TexturedTriangle                          Nv03Dx3TexturedTriangle
#define nv3Dx3TexturedTriangle                          Nv03Dx3TexturedTriangle
#define nv03Dx3TexturedTriangle                         Nv03Dx3TexturedTriangle

/* class NV05_VIDEO_LUT_CURSOR_DAC */
#define  NV05_VIDEO_LUT_CURSOR_DAC                                 (0x00000049)
#define NV049_NOTIFIERS_NOTIFY                                     (0)
#define NV049_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV049_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV049_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV049_NOTIFIERS_SET_DAC(b)                                 (7+(b))
#define NV049_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV049_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV049_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV049_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV049_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV049_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV049_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV049_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV049_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV049_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV049_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV049_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV049_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV049_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x057];
 NvV32 SetPanOffset;            /* byte offset for panning          0220-0223*/
 NvV32 GetOffset;               /* NV049_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       4-   7*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels       8-   b*/
  NvV32 totalSize;              /* height_width U16_U16                c-   f*/
  NvV32 pixelClock;             /* in Hertz                           10-  13*/
  NvV32 format;                 /* see text                           14-  17*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x724];
} Nv049Typedef, NV05VideoLutCursorDac;
#define NV049_TYPEDEF                                     NV05VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV049_SET_OBJECT                                           (0x00000000)
#define NV049_NO_OPERATION                                         (0x00000100)
#define NV049_NOTIFY                                               (0x00000104)
#define NV049_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV049_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV049_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV049_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV049_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV049_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV049_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV049_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV049_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV049_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV049_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV049_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV049_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV049_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV049_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV049_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV049_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV049_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV049_SET_PAN_OFFSET                                       (0x00000220)
#define NV049_GET_OFFSET                                           (0x000002FC)
#define NV049_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV049_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV049_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV049_SET_IMAGE_FORMAT_WHEN                                23:20
#define NV049_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV049_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV049_SET_IMAGE_FORMAT_FLAGS                               27:25
#define NV049_SET_IMAGE_FORMAT_FLAGS_COMPLETE_ON_OBJECT_CLEANUP    (0x00000001)
#define NV049_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV049_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV049_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV049_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV049_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV049_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV049_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV049_SET_CURSOR_POINT                                     (0x00000330)
#define NV049_SET_CURSOR_POINT_X                                   15:0
#define NV049_SET_CURSOR_POINT_Y                                   31:16
#define NV049_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV049_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV049_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000344\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV049_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV049_SET_DAC_VERTICAL_SYNC(b)                             (0x00000348\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV049_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV049_SET_DAC_TOTAL_SIZE(b)                                (0x0000034C\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV049_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV049_SET_DAC_PIXEL_CLOCK(b)                               (0x00000350\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_FORMAT(b)                                    (0x00000354\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV049_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV049_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV049_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV049_SET_DAC_FORMAT_COLOR                                 19:16
#define NV049_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV049_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV049_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV049_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV049_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV049_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV049_SET_DAC_FORMAT_PRIMARY_DEVICE                        28:28
#define NV049_SET_DAC_FORMAT_PRIMARY_DEVICE_FALSE                  (0x00000000)
#define NV049_SET_DAC_FORMAT_PRIMARY_DEVICE_TRUE                   (0x00000001)
#define NV049_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV049_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV049_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


/* class NV04_GDI_RECTANGLE_TEXT */
#define  NV04_GDI_RECTANGLE_TEXT                                   (0x0000004A)
/* NvNotification[] elements */
#define NV04A_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV04A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* memory data structures */
typedef struct {                /* start of data structure          0000-    */
   NvV32 size;                  /* height_width U16_U16 in pixels      0-   3*/
   NvV32 monochrome[1];         /* 32 monochrome pixels per write      4-   7*/
} Nv04aCharacter8[];            /* end of data structure                -0007*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels      0-   3*/
  NvV32 monochrome[3];          /* 32 monochrome pixels per write      4-   f*/
} Nv04aCharacter16[];           /* end of data structure                -000f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[7];          /* 32 monochrome pixels per write     04-  1f*/
} Nv04aCharacter32[];           /* end of data structure                -001f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[15];         /* 32 monochrome pixels per write     04-  3f*/
} Nv04aCharacter64[];           /* end of data structure                -003f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[31];         /* 32 monochrome pixels per write     04-  7f*/
} Nv04aCharacter128[];          /* end of data structure                -007f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[63];         /* 32 monochrome pixels per write     04-  ff*/
} Nv04aCharacter256[];          /* end of data structure                -00ff*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels    000- 003*/
  NvV32 monochrome[127];        /* 32 monochrome pixels per write    004- 1ff*/
} Nv04aCharacter512[];          /* end of data structure                -01ff*/
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaFonts;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV04A_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV04A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV04A_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 Reserved02[0x03D];
 NvV32 Color1A;                 /* rectangle color                  03fc-03ff*/
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* x_y S16_S16 in pixels               0-   3*/
  NvV32 size;                   /* width_height U16_U16 in pixels      4-   7*/
 } UnclippedRectangle[32];      /* end of aliased methods in array      -04ff*/
 NvV32 Reserved03[0x03D];
 NvV32 ClipPoint0B;             /* top_left S16_S16 in pixels       05f4-05f7*/
 NvV32 ClipPoint1B;             /* bottom_right S16_S16 in pixels   05f8-05fb*/
 NvV32 Color1B;                 /* rectangle color                  05fc-05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 point0;                 /* top_left S16_S16 in pixels          0-   3*/
  NvV32 point1;                 /* bottom_right S16_S16 in pixels      4-   7*/
 } ClippedRectangle[32];        /* end of aliased methods in array      -06ff*/
 NvV32 Reserved04[0x03B];
 NvV32 ClipPoint0C;             /* top_left S16_S16 in pixels       07ec-07ef*/
 NvV32 ClipPoint1C;             /* bottom_right S16_S16 in pixe     07f0-07f3*/
 NvV32 Color1C;                 /* color of 1 pixels                07f4-07f7*/
 NvV32 SizeC;                   /* height_width U16_U16 in pixels   07f8-07fb*/
 NvV32 PointC;                  /* y_x S16_S16 in pixels            07fc-07ff*/
 NvV32 MonochromeColor1C[128];  /* 32 monochrome pixels per write   0800-09ff*/
 NvV32 Reserved05[0x079];
 NvV32 ClipPoint0E;             /* top_left S16_S16 in pixels       0be4-0be7*/
 NvV32 ClipPoint1E;             /* bottom_right S16_S16 in pixels   0be8-0beb*/
 NvV32 Color0E;                 /* color of 0 pixels                0bec-0bef*/
 NvV32 Color1E;                 /* color of 1 pixels                0bf0-0bf3*/
 NvV32 SizeInE;                 /* height_width U16_U16 in pixels   0bf4-0bf7*/
 NvV32 SizeOutE;                /* height_width U16_U16 in pixels   0bf8-0bfb*/
 NvV32 PointE;                  /* y_x S16_S16 in pixels            0bfc-0bff*/
 NvV32 MonochromeColor01E[128]; /* 32 monochrome pixels per write   0c00-0dff*/
 NvV32 Reserved06[0x07C];
 NvV32 FontF;                   /* pitch_offset V4_U28              0ff0-0ff3*/
 NvV32 ClipPoint0F;             /* top_left S16_S16 in pixels       0ff4-0ff7*/
 NvV32 ClipPoint1F;             /* bottom_right S16_S16 in pixels   0ff8-0ffb*/
 NvV32 Color1F;                 /* color of 1 pixels                0ffc-0fff*/
 NvV32 CharacterColor1F[256];   /* y_x_index S12_S12_U8             1000-13ff*/
 NvV32 Reserved07[0x0FC];
 NvV32 FontG;                   /* pitch_offset V4_U28              17f0-17f3*/
 NvV32 ClipPoint0G;             /* top_left S16_S16 in pixels       17f4-17f7*/
 NvV32 ClipPoint1G;             /* bottom_right S16_S16 in pixels   17f8-17fb*/
 NvV32 Color1G;                 /* color of 1 pixels                17fc-17ff*/
 struct {                       /* start aliased methods in array   1800-    */
  NvV32 point;                  /* y_x S16_S16 in pixels               0-   3*/
  NvU32 index;                  /* 0<=index<=65525                     4-   7*/
 } CharacterColor1G[256];       /* end of aliased methods in array      -1fff*/
} Nv04aTypedef, Nv04GdiRectangleText;
#define NV04A_TYPEDEF                                      Nv04GdiRectangleText
/* dma method offsets, fields, and values */
#define NV04A_SET_OBJECT                                           (0x00000000)
#define NV04A_NO_OPERATION                                         (0x00000100)
#define NV04A_NOTIFY                                               (0x00000104)
#define NV04A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04A_SET_CONTEXT_DMA_FONTS                                (0x00000184)
#define NV04A_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV04A_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV04A_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV04A_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV04A_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV04A_SET_OPERATION                                        (0x000002FC)
#define NV04A_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV04A_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV04A_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV04A_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV04A_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV04A_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV04A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV04A_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV04A_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV04A_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV04A_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV04A_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV04A_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV04A_COLOR1_A                                             (0x000003FC)
#define NV04A_UNCLIPPED_RECTANGLE(a)                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_POINT(a)                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_POINT_Y                          15:0
#define NV04A_UNCLIPPED_RECTANGLE_POINT_X                          31:16
#define NV04A_UNCLIPPED_RECTANGLE_SIZE(a)                          (0x00000404\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                      15:0
#define NV04A_UNCLIPPED_RECTANGLE_SIZE_WIDTH                       31:16
#define NV04A_CLIP_POINT0_B                                        (0x000005F4)
#define NV04A_CLIP_POINT0_B_LEFT                                   15:0
#define NV04A_CLIP_POINT0_B_TOP                                    31:16
#define NV04A_CLIP_POINT1_B                                        (0x000005F8)
#define NV04A_CLIP_POINT1_B_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_B_BOTTOM                                 31:16
#define NV04A_COLOR1_B                                             (0x000005FC)
#define NV04A_CLIPPED_RECTANGLE(a)                                 (0x00000600\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_0(a)                         (0x00000600\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_0_LEFT                       15:0
#define NV04A_CLIPPED_RECTANGLE_POINT_0_TOP                        31:16
#define NV04A_CLIPPED_RECTANGLE_POINT_1(a)                         (0x00000604\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_1_RIGHT                      15:0
#define NV04A_CLIPPED_RECTANGLE_POINT_1_BOTTOM                     31:16
#define NV04A_CLIP_POINT0_C                                        (0x000007EC)
#define NV04A_CLIP_POINT0_C_LEFT                                   15:0
#define NV04A_CLIP_POINT0_C_TOP                                    31:16
#define NV04A_CLIP_POINT1_C                                        (0x000007F0)
#define NV04A_CLIP_POINT1_C_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_C_BOTTOM                                 31:16
#define NV04A_COLOR1_C                                             (0x000007F4)
#define NV04A_SIZE_C                                               (0x000007F8)
#define NV04A_SIZE_C_WIDTH                                         15:0
#define NV04A_SIZE_C_HEIGHT                                        31:16
#define NV04A_POINT_C                                              (0x000007FC)
#define NV04A_POINT_C_X                                            15:0
#define NV04A_POINT_C_Y                                            31:16
#define NV04A_MONOCHROME_COLOR1_C(a)                               (0x00000800\
                                                                   +(a)*0x0004)
#define NV04A_CLIP_POINT0_E                                        (0x00000BE4)
#define NV04A_CLIP_POINT0_E_LEFT                                   15:0
#define NV04A_CLIP_POINT0_E_TOP                                    31:16
#define NV04A_CLIP_POINT1_E                                        (0x00000BE8)
#define NV04A_CLIP_POINT1_E_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_E_BOTTOM                                 31:16
#define NV04A_COLOR0_E                                             (0x00000BEC)
#define NV04A_COLOR1_E                                             (0x00000BF0)
#define NV04A_SIZE_IN_E                                            (0x00000BF4)
#define NV04A_SIZE_IN_E_WIDTH                                      15:0
#define NV04A_SIZE_IN_E_HEIGHT                                     31:16
#define NV04A_SIZE_OUT_E                                           (0x00000BF8)
#define NV04A_SIZE_OUT_E_WIDTH                                     15:0
#define NV04A_SIZE_OUT_E_HEIGHT                                    31:16
#define NV04A_POINT_E                                              (0x00000BFC)
#define NV04A_POINT_E_X                                            15:0
#define NV04A_POINT_E_Y                                            31:16
#define NV04A_MONOCHROME_COLOR01_E(a)                              (0x00000C00\
                                                                   +(a)*0x0004)
#define NV04A_FONT_F                                               (0x00000FF0)
#define NV04A_FONT_F_OFFSET                                        27:0
#define NV04A_FONT_F_PITCH                                         31:28
#define NV04A_FONT_F_PITCH_8                                       (0x00000003)
#define NV04A_FONT_F_PITCH_16                                      (0x00000004)
#define NV04A_FONT_F_PITCH_32                                      (0x00000005)
#define NV04A_FONT_F_PITCH_64                                      (0x00000006)
#define NV04A_FONT_F_PITCH_128                                     (0x00000007)
#define NV04A_FONT_F_PITCH_256                                     (0x00000008)
#define NV04A_FONT_F_PITCH_512                                     (0x00000009)
#define NV04A_CLIP_POINT0_F                                        (0x00000FF4)
#define NV04A_CLIP_POINT0_F_LEFT                                   15:0
#define NV04A_CLIP_POINT0_F_TOP                                    31:16
#define NV04A_CLIP_POINT1_F                                        (0x00000FF8)
#define NV04A_CLIP_POINT1_F_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_F_BOTTOM                                 31:16
#define NV04A_COLOR1_F                                             (0x00000FFC)
#define NV04A_CHARACTER_COLOR1_F(a)                                (0x00001000\
                                                                   +(a)*0x0004)
#define NV04A_CHARACTER_COLOR1_F_INDEX                             7:0
#define NV04A_CHARACTER_COLOR1_F_X                                 19:8
#define NV04A_CHARACTER_COLOR1_F_Y                                 31:20
#define NV04A_FONT_G                                               (0x000017F0)
#define NV04A_FONT_G_OFFSET                                        27:0
#define NV04A_FONT_G_PITCH                                         31:28
#define NV04A_FONT_G_PITCH_8                                       (0x00000003)
#define NV04A_FONT_G_PITCH_16                                      (0x00000004)
#define NV04A_FONT_G_PITCH_32                                      (0x00000005)
#define NV04A_FONT_G_PITCH_64                                      (0x00000006)
#define NV04A_FONT_G_PITCH_128                                     (0x00000007)
#define NV04A_FONT_G_PITCH_256                                     (0x00000008)
#define NV04A_FONT_G_PITCH_512                                     (0x00000009)
#define NV04A_CLIP_POINT0_G                                        (0x000017F4)
#define NV04A_CLIP_POINT0_G_LEFT                                   15:0
#define NV04A_CLIP_POINT0_G_TOP                                    31:16
#define NV04A_CLIP_POINT1_G                                        (0x000017F8)
#define NV04A_CLIP_POINT1_G_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_G_BOTTOM                                 31:16
#define NV04A_COLOR1_G                                             (0x000017FC)
#define NV04A_CHARACTER_COLOR1_G(a)                                (0x00001800\
                                                                   +(a)*0x0008)
#define NV04A_CHARACTER_COLOR1_G_POINT(a)                          (0x00001800\
                                                                   +(a)*0x0008)
#define NV04A_CHARACTER_COLOR1_G_POINT_X                           15:0
#define NV04A_CHARACTER_COLOR1_G_POINT_Y                           31:16
#define NV04A_CHARACTER_COLOR1_G_INDEX(a)                          (0x00001804\
                                                                   +(a)*0x0008)
/* obsolete stuff */
#define NV4_GDI_RECTANGLE_TEXT                                     (0x0000004A)
#define Nv4GdiRectangleText                                Nv04GdiRectangleText
#define nv4GdiRectangleText                                Nv04GdiRectangleText
#define nv04GdiRectangleText                               Nv04GdiRectangleText


/* class NV03_GDI_RECTANGLE_TEXT */
#define  NV03_GDI_RECTANGLE_TEXT                                   (0x0000004B)
/* NvNotification[] elements */
#define NV04B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV04B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04B_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0184-0187*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0188-018b*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                018c-018f*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0190-0193*/
 NvV32 Reserved01[0x05a];
 NvV32 SetOperation;            /* NV04B_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV04B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV04B_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 Reserved02[0x03d];
 NvV32 Color1A;                 /* rectangle color                  03fc-03ff*/
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* x_y S16_S16 in pixels               0-   3*/
  NvV32 size;                   /* width_height U16_U16 in pixels      4-   7*/
 } UnclippedRectangle[64];      /* end of aliased methods in array      -05ff*/
 NvV32 Reserved03[0x07D];
 NvV32 ClipPoint0B;             /* top_left S16_S16 in pixels       07f4-07f7*/
 NvV32 ClipPoint1B;             /* bottom_right S16_S16 in pixels   07f8-07fb*/
 NvV32 Color1B;                 /* rectangle color                  07fc-07ff*/
 struct {                       /* start aliased methods in array   0800-    */
  NvV32 point0;                 /* top_left S16_S16 in pixels          0-   3*/
  NvV32 point1;                 /* bottom_right S16_S16 in pixels      4-   7*/
 } ClippedRectangle[64];        /* end of aliased methods in array      -09ff*/
 NvV32 Reserved04[0x07B];
 NvV32 ClipPoint0C;             /* top_left S16_S16 in pixels       0bec-0bef*/
 NvV32 ClipPoint1C;             /* bottom_right S16_S16 in pixels   0bf0-0bf3*/
 NvV32 Color1C;                 /* color of 1 pixels                0bf4-0bf7*/
 NvV32 SizeC;                   /* height_width U16_U16 in pixels   0bf8-0bfb*/
 NvV32 PointC;                  /* y_x S16_S16 in pixels            0bfc-0bff*/
 NvV32 MonochromeColor1C[128];  /* 32 monochrome pixels per write   0c00-0dff*/
 NvV32 Reserved05[0x07A];
 NvV32 ClipPoint0D;             /* top_left S16_S16 in pixels       0fe8-0feb*/
 NvV32 ClipPoint1D;             /* bottom_right S16_S16 in pixels   0fec-0fef*/
 NvV32 Color1D;                 /* color of 1 pixels                0ff0-0ff3*/
 NvV32 SizeInD;                 /* height_width U16_U16 in pixels   0ff4-0ff7*/
 NvV32 SizeOutD;                /* height_width U16_U16 in pixels   0ff8-0ffb*/
 NvV32 PointD;                  /* y_x S16_S16 in pixels            0ffc-0fff*/
 NvV32 MonochromeColor1D[128];  /* 32 monochrome pixels per write   1000-11ff*/
 NvV32 Reserved06[0x079];
 NvV32 ClipPoint0E;             /* top_left S16_S16 in pixels       13e4-13e7*/
 NvV32 ClipPoint1E;             /* bottom_right S16_S16 in pixels   13e8-13eb*/
 NvV32 Color0E;                 /* color of 0 pixels                13ec-13ef*/
 NvV32 Color1E;                 /* color of 1 pixels                13f0-13f3*/
 NvV32 SizeInE;                 /* height_width U16_U16 in pixels   13f4-13f7*/
 NvV32 SizeOutE;                /* height_width U16_U16 in pixels   13f8-13fb*/
 NvV32 PointE;                  /* y_x S16_S16 in pixels            13fc-13ff*/
 NvV32 MonochromeColor01E[128]; /* 32 monochrome pixels per write   1400-15ff*/
 NvV32 Reserved07[0x280];
} Nv04bTypedef, Nv03GdiRectangleText;
#define NV04B_TYPEDEF                                      Nv03GdiRectangleText
/* dma method offsets, fields, and values */
#define NV04B_SET_OBJECT                                           (0x00000000)
#define NV04B_NO_OPERATION                                         (0x00000100)
#define NV04B_NOTIFY                                               (0x00000104)
#define NV04B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV04B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04B_SET_CONTEXT_PATTERN                                  (0x00000184)
#define NV04B_SET_CONTEXT_ROP                                      (0x00000188)
#define NV04B_SET_CONTEXT_BETA1                                    (0x0000018C)
#define NV04B_SET_CONTEXT_SURFACE                                  (0x00000190)
#define NV04B_SET_OPERATION                                        (0x000002FC)
#define NV04B_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV04B_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV04B_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV04B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV04B_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV04B_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV04B_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV04B_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV04B_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV04B_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV04B_COLOR1_A                                             (0x000003FC)
#define NV04B_UNCLIPPED_RECTANGLE(a)                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_POINT(a)                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_POINT_X                          15:0
#define NV04B_UNCLIPPED_RECTANGLE_POINT_Y                          31:16
#define NV04B_UNCLIPPED_RECTANGLE_SIZE(a)                          (0x00000404\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_SIZE_WIDTH                       15:0
#define NV04B_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                      31:16
#define NV04B_CLIP_POINT0_B                                        (0x000007F4)
#define NV04B_CLIP_POINT0_B_LEFT                                   15:0
#define NV04B_CLIP_POINT0_B_TOP                                    31:16
#define NV04B_CLIP_POINT1_B                                        (0x000007F8)
#define NV04B_CLIP_POINT1_B_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_B_BOTTOM                                 31:16
#define NV04B_COLOR1_B                                             (0x000007FC)
#define NV04B_CLIPPED_RECTANGLE(a)                                 (0x00000800\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT0(a)                          (0x00000800\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT0_LEFT                        15:0
#define NV04B_CLIPPED_RECTANGLE_POINT0_TOP                         31:16
#define NV04B_CLIPPED_RECTANGLE_POINT1(a)                          (0x00000804\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT1_RIGHT                       15:0
#define NV04B_CLIPPED_RECTANGLE_POINT1_BOTTOM                      31:16
#define NV04B_CLIP_POINT0_C                                        (0x00000BEC)
#define NV04B_CLIP_POINT0_C_LEFT                                   15:0
#define NV04B_CLIP_POINT0_C_TOP                                    31:16
#define NV04B_CLIP_POINT1_C                                        (0x00000BF0)
#define NV04B_CLIP_POINT1_C_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_C_BOTTOM                                 31:16
#define NV04B_COLOR1_C                                             (0x00000BF4)
#define NV04B_SIZE_C                                               (0x00000BF8)
#define NV04B_SIZE_C_WIDTH                                         15:0
#define NV04B_SIZE_C_HEIGHT                                        31:16
#define NV04B_POINT_C                                              (0x00000BFC)
#define NV04B_POINT_C_X                                            15:0
#define NV04B_POINT_C_Y                                            31:16
#define NV04B_MONOCHROME_COLOR1_C(a)                               (0x00000C00\
                                                                   +(a)*0x0004)
#define NV04B_CLIP_POINT0_D                                        (0x00000FE8)
#define NV04B_CLIP_POINT0_D_LEFT                                   15:0
#define NV04B_CLIP_POINT0_D_TOP                                    31:16
#define NV04B_CLIP_POINT1_D                                        (0x00000FEC)
#define NV04B_CLIP_POINT1_D_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_D_BOTTOM                                 31:16
#define NV04B_COLOR1_D                                             (0x00000FF0)
#define NV04B_SIZE_IN_D                                            (0x00000FF4)
#define NV04B_SIZE_IN_D_WIDTH                                      15:0
#define NV04B_SIZE_IN_D_HEIGHT                                     31:16
#define NV04B_SIZE_OUT_D                                           (0x00000FF8)
#define NV04B_SIZE_OUT_D_WIDTH                                     15:0
#define NV04B_SIZE_OUT_D_HEIGHT                                    31:16
#define NV04B_POINT_D                                              (0x00000FFC)
#define NV04B_POINT_D_X                                            15:0
#define NV04B_POINT_D_Y                                            31:16
#define NV04B_MONOCHROME_COLOR1_D(a)                               (0x00001000\
                                                                   +(a)*0x0004)
#define NV04B_CLIP_POINT0_E                                        (0x000013E4)
#define NV04B_CLIP_POINT0_E_LEFT                                   15:0
#define NV04B_CLIP_POINT0_E_TOP                                    31:16
#define NV04B_CLIP_POINT1_E                                        (0x000013E8)
#define NV04B_CLIP_POINT1_E_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_E_BOTTOM                                 31:16
#define NV04B_COLOR0_E                                             (0x000013EC)
#define NV04B_COLOR1_E                                             (0x000013F0)
#define NV04B_SIZE_IN_E                                            (0x000013F4)
#define NV04B_SIZE_IN_E_WIDTH                                      15:0
#define NV04B_SIZE_IN_E_HEIGHT                                     31:16
#define NV04B_SIZE_OUT_E                                           (0x000013F8)
#define NV04B_SIZE_OUT_E_WIDTH                                     15:0
#define NV04B_SIZE_OUT_E_HEIGHT                                    31:16
#define NV04B_POINT_E                                              (0x000013FC)
#define NV04B_POINT_E_X                                            15:0
#define NV04B_POINT_E_Y                                            31:16
#define NV04B_MONOCHROME_COLOR01_E(a)                              (0x00001400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV3_GDI_RECTANGLE_TEXT                                     (0x0000004B)
#define Nv3GdiRectangleText                                Nv03GdiRectangleText
#define nv3GdiRectangleText                                Nv03GdiRectangleText
#define nv03GdiRectangleText                               Nv03GdiRectangleText

typedef NvV32 Nv04cTypedef;


/* class NV03_EXTERNAL_VIDEO_DECODER */
#define  NV03_EXTERNAL_VIDEO_DECODER                               (0x0000004D)
/* NvNotification[] elements */
#define NV04D_NOTIFIERS_NOTIFY                                     (0)
#define NV04D_NOTIFIERS_SET_VBI_FORMAT_NOTIFY(b)                   (1+(b))
#define NV04D_NOTIFIERS_GET_VBI_OFFSET_NOTIFY(b)                   (3+(b))
#define NV04D_NOTIFIERS_SET_IMAGE_FORMAT_NOTIFY(b)                 (5+(b))
#define NV04D_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (7+(b))
/* NvNotification[] fields and values */
#define NV04D_NOTIFICATION_INFO16_FIELD_NOT_STARTED                (0x0000)
#define NV04D_NOTIFICATION_INFO16_FIELD_VALID_OFFSET               (0x0001)
#define NV04D_NOTIFICATION_INFO16_FIELD_DONE                       (0x0002)
#define NV04D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04D_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04D_NOTIFY_*                   0104-0107*/
 NvV32 StopTransferVbi;         /* NV04D_STOP_TRANSFER_VBI_VALUE    0108-010b*/
 NvV32 StopTransferImage;       /* NV04D_STOP_TRANSFER_IMAGE_VALUE  010c-010f*/
 NvV32 Reserved00[0x01c];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaVbi[2];     /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 Reserved01[0x059];
 NvU32 SetImageConfig;          /* data width, task bit, null data  02f8-02fb*/
 NvU32 SetImageStartLine;       /* lines                            02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvV32 size;                   /* height_firstLine U16_U16            0-   3*/
  NvU32 offset;                 /* byte offset of top-left pixel       4-   7*/
  NvV32 format;                 /* notify_field_pitch V8_V8_U16        8-   b*/
 } SetVbi[2];                   /* end of methods in array              -0317*/
 NvV32 GetVbiOffsetNotify[2];   /* NV04D_GET_VBI_OFFSET_NOTIFY_*    0318-031f*/
 struct {                       /* start of methods in array        0320-    */
  NvV32 sizeIn;                 /* height_width U16_U16 in pixels      0-   3*/
  NvV32 sizeOut;                /* height_width U16_U16 in pixels      4-   7*/
  NvU32 offset;                 /* byte offset of top-left pixel       8-   b*/
  NvV32 format;                 /* notify_field_pitch V8_V8_U16        c-   f*/
 } SetImage[2];                 /* end of methods in array              -033f*/
 NvV32 GetImageOffsetNotify[2]; /* NV04D_GET_IMAGE_OFFSET_NOTIFY_*  0340-0347*/
 NvV32 Reserved02[0x72e];
} Nv04dTypedef, Nv03ExternalVideoDecoder;
#define NV04D_TYPEDEF                                  Nv03ExternalVideoDecoder
/* dma method offsets, fields, and values */
#define NV04D_SET_OBJECT                                           (0x00000000)
#define NV04D_NO_OPERATION                                         (0x00000100)
#define NV04D_NOTIFY                                               (0x00000104)
#define NV04D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04D_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04D_STOP_TRANSFER_VBI                                    (0x00000108)
#define NV04D_STOP_TRANSFER_VBI_VALUE                              (0x00000000)
#define NV04D_STOP_TRANSFER_IMAGE                                  (0x0000010C)
#define NV04D_STOP_TRANSFER_IMAGE_VALUE                            (0x00000000)
#define NV04D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04D_SET_CONTEXT_DMA_VBI(b)                               (0x00000184\
                                                                   +(b)*0x0004)
#define NV04D_SET_CONTEXT_DMA_IMAGE(b)                             (0x0000018C\
                                                                   +(b)*0x0004)
#define NV04D_SET_IMAGE_CONFIG                                     (0x000002f8)
#define NV04D_SET_IMAGE_CONFIG_DATA_WIDTH                          7:0
#define NV04D_SET_IMAGE_CONFIG_TASK                                8:8
#define NV04D_SET_IMAGE_CONFIG_TASK_A                              (0x00000000)
#define NV04D_SET_IMAGE_CONFIG_TASK_B                              (0x00000001)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA                           13:12
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_DISABLED                  (0x00000000)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_BYTE_ENABLED              (0x00000001)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_LINE_ENABLED              (0x00000002)
#define NV04D_SET_IMAGE_CONFIG_NULL_VALUE                          31:16
#define NV04D_SET_IMAGE_START_LINE                                 (0x000002FC)
#define NV04D_SET_VBI(b)                                           (0x00000300\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_SIZE(b)                                      (0x00000300\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_SIZE_FIRST_LINE                              15:0
#define NV04D_SET_VBI_SIZE_HEIGHT                                  31:16
#define NV04D_SET_VBI_OFFSET(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_FORMAT(b)                                    (0x00000308\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_FORMAT_PITCH                                 15:0
#define NV04D_SET_VBI_FORMAT_FIELD                                 23:16
#define NV04D_SET_VBI_FORMAT_FIELD_PROGRESSIVE                     (0x00000000)
#define NV04D_SET_VBI_FORMAT_FIELD_EVEN_FIELD                      (0x00000001)
#define NV04D_SET_VBI_FORMAT_FIELD_ODD_FIELD                       (0x00000002)
#define NV04D_SET_VBI_FORMAT_NOTIFY                                31:24
#define NV04D_SET_VBI_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV04D_SET_VBI_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV04D_GET_VBI_OFFSET_NOTIFY(b)                             (0x00000318\
                                                                   +(b)*0x0004)
#define NV04D_GET_VBI_OFFSET_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV04D_GET_VBI_OFFSET_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV04D_SET_IMAGE(b)                                         (0x00000320\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_IN(b)                                 (0x00000320\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_IN_WIDTH                              15:0
#define NV04D_SET_IMAGE_SIZE_IN_HEIGHT                             31:16
#define NV04D_SET_IMAGE_SIZE_OUT(b)                                (0x00000324\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_OUT_WIDTH                             15:0
#define NV04D_SET_IMAGE_SIZE_OUT_HEIGHT                            31:16
#define NV04D_SET_IMAGE_OFFSET(b)                                  (0x00000328\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_FORMAT(b)                                  (0x0000032C\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV04D_SET_IMAGE_FORMAT_FIELD                               23:16
#define NV04D_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV04D_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV04D_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV04D_SET_IMAGE_FORMAT_NOTIFY                              31:24
#define NV04D_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV04D_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000340\
                                                                   +(b)*0x0004)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_VIDEO_DECOMPRESSOR                            (0x0000004E)
#define Nv3ExternalVideoDecoder                        Nv03ExternalVideoDecoder
#define nv3ExternalVideoDecoder                        Nv03ExternalVideoDecoder
#define nv03ExternalVideoDecoder                       Nv03ExternalVideoDecoder


/* class NV03_EXTERNAL_VIDEO_DECOMPRESSOR */
#define  NV03_EXTERNAL_VIDEO_DECOMPRESSOR                          (0x0000004E)
/* NvNotification[] elements */
#define NV04E_NOTIFIERS_NOTIFY                                     (0)
#define NV04E_NOTIFIERS_SET_DATA_NOTIFY(b)                         (1+(b))
#define NV04E_NOTIFIERS_SET_IMAGE_NOTIFY(b)                        (3+(b))
/* NvNotification[] fields and values */
#define NV04E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04E_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04E_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV04E_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaData[2];    /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 Reserved01[0x05b];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* in bytes                            0-   3*/
  NvU32 length;                 /* in bytes                            4-   7*/
  NvV32 notify;                 /* NV04E_SET_DATA_NOTIFY_*             8-   b*/
 } SetData[2];                  /* end of methods in array              -0317*/
 struct {                       /* start of methods in array        0318-    */
  NvV32 formatIn;               /* zero_field V16_V16                 00-  03*/
  NvV32 size;                   /* height_width U16_U16 in pixels     04-  07*/
  NvU32 offsetOut;              /* byte offset of top-left pixel      08-  0b*/
  NvV32 formatOut;              /* ignore_pitch V16_U16               0c-  0f*/
  NvV32 notify;                 /* NV04E_SET_IMAGE_NOTIFY_*           10-  13*/
 } SetImage[2];                 /* end of methods in array              -033f*/
 NvV32 Reserved02[0x730];
} Nv04eTypedef, Nv03ExternalVideoDecompressor;
#define NV04E_TYPEDEF                             Nv03ExternalVideoDecompressor
/* dma method offsets, fields, and values */
#define NV04E_SET_OBJECT                                           (0x00000000)
#define NV04E_NO_OPERATION                                         (0x00000100)
#define NV04E_NOTIFY                                               (0x00000104)
#define NV04E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04E_STOP_TRANSFER                                        (0x00000108)
#define NV04E_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV04E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04E_SET_CONTEXT_DMA_DATA(b)                              (0x00000184\
                                                                   +(b)*0x0004)
#define NV04E_SET_CONTEXT_DMA_IMAGE(b)                             (0x0000018C\
                                                                   +(b)*0x0004)
#define NV04E_SET_DATA(b)                                          (0x00000300\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_OFFSET(b)                                   (0x00000300\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_LENGTH(b)                                   (0x00000304\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_NOTIFY(b)                                   (0x00000308\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_NOTIFY_WRITE_ONLY                           (0x00000000)
#define NV04E_SET_DATA_NOTIFY_WRITE_THEN_AWAKEN                    (0x00000001)
#define NV04E_SET_IMAGE(b)                                         (0x00000318\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_IN(b)                               (0x00000318\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD                            15:0
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_PROGRESSIVE                (0x00000001)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_EVEN_FIELD                 (0x00000002)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_ODD_FIELD                  (0x00000003)
#define NV04E_SET_IMAGE_FORMAT_IN_ZERO                             31:16
#define NV04E_SET_IMAGE_SIZE(b)                                    (0x0000031C\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV04E_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV04E_SET_IMAGE_OFFSET_OUT(b)                              (0x00000320\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_OUT(b)                              (0x00000324\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_OUT_PITCH                           15:0
#define NV04E_SET_IMAGE_FORMAT_OUT_IGNORE                          31:16
#define NV04E_SET_IMAGE_NOTIFY(b)                                  (0x00000328\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NV04E_SET_IMAGE_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_VIDEO_DECOMPRESSOR                            (0x0000004E)
#define Nv3ExternalVideoDecompressor              Nv03ExternalVideoDecompressor
#define nv3ExternalVideoDecompressor              Nv03ExternalVideoDecompressor
#define nv03ExternalVideoDecompressor             Nv03ExternalVideoDecompressor


/* class NV01_EXTERNAL_PARALLEL_BUS */
#define  NV01_EXTERNAL_PARALLEL_BUS                                (0x0000004F)
/* NvNotification[] elements */
#define NV04F_NOTIFIERS_NOTIFY                                     (0)
#define NV04F_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV04F_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV04F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04F_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04F_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV04F_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV04F_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV04F_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv04fTypedef, Nv01ExternalParallelBus;
#define NV04F_TYPEDEF                                   Nv01ExternalParallelBus
/* dma method offsets, fields, and values */
#define NV04F_SET_OBJECT                                           (0x00000000)
#define NV04F_NO_OPERATION                                         (0x00000100)
#define NV04F_NOTIFY                                               (0x00000104)
#define NV04F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04F_STOP_TRANSFER                                        (0x00000108)
#define NV04F_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV04F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04F_WRITE                                                (0x00000300)
#define NV04F_WRITE_SIZE                                           (0x00000300)
#define NV04F_WRITE_SIZE_DATA                                      15:0
#define NV04F_WRITE_SIZE_ADDRESS                                   31:16
#define NV04F_WRITE_ADDRESS                                        (0x00000304)
#define NV04F_WRITE_DATA                                           (0x00000308)
#define NV04F_READ                                                 (0x0000030C)
#define NV04F_READ_SIZE                                            (0x0000030C)
#define NV04F_READ_SIZE_DATA                                       15:0
#define NV04F_READ_SIZE_ADDRESS                                    31:16
#define NV04F_READ_ADDRESS                                         (0x00000310)
#define NV04F_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV04F_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV04F_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV04F_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV04F_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV04F_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV1_EXTERNAL_PARALLEL_BUS                                  (0x0000004F)
#define Nv1ExternalParallelBus                          Nv01ExternalParallelBus
#define nv1ExternalParallelBus                          Nv01ExternalParallelBus
#define nv01ExternalParallelBus                         Nv01ExternalParallelBus


/* class NV03_EXTERNAL_MONITOR_BUS */
#define  NV03_EXTERNAL_MONITOR_BUS                                 (0x00000050)
/* NvNotification[] elements */
#define NV050_NOTIFIERS_NOTIFY                                     (0)
#define NV050_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV050_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV050_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV050_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV050_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV050_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV050_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV050_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV050_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV050_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV050_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV050_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV050_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv050Typedef, Nv03ExternalMonitorBus;
#define NV050_TYPEDEF                                    Nv03ExternalMonitorBus
/* dma method offsets, fields, and values */
#define NV050_SET_OBJECT                                           (0x00000000)
#define NV050_NO_OPERATION                                         (0x00000100)
#define NV050_NOTIFY                                               (0x00000104)
#define NV050_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV050_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV050_STOP_TRANSFER                                        (0x00000108)
#define NV050_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV050_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV050_WRITE                                                (0x00000300)
#define NV050_WRITE_SIZE                                           (0x00000300)
#define NV050_WRITE_SIZE_DATA                                      15:0
#define NV050_WRITE_SIZE_ADDRESS                                   31:16
#define NV050_WRITE_ADDRESS                                        (0x00000304)
#define NV050_WRITE_DATA                                           (0x00000308)
#define NV050_READ                                                 (0x0000030C)
#define NV050_READ_SIZE                                            (0x0000030C)
#define NV050_READ_SIZE_DATA                                       15:0
#define NV050_READ_SIZE_ADDRESS                                    31:16
#define NV050_READ_ADDRESS                                         (0x00000310)
#define NV050_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV050_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV050_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV050_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV050_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV050_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_MONITOR_BUS                                   (0x00000050)
#define Nv3ExternalMonitorBus                            Nv03ExternalMonitorBus
#define nv3ExternalMonitorBus                            Nv03ExternalMonitorBus
#define nv03ExternalMonitorBus                           Nv03ExternalMonitorBus


/* class NV04_EXTERNAL_SERIAL_BUS */
#define  NV04_EXTERNAL_SERIAL_BUS                                  (0x00000051)
/* NvNotification[] elements */
#define NV051_NOTIFIERS_NOTIFY                                     (0)
#define NV051_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV051_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV051_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV051_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV051_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV051_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV051_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV051_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV051_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV051_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV051_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV051_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV051_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv051Typedef, Nv04ExternalSerialBus;
#define NV051_TYPEDEF                                     Nv04ExternalSerialBus
/* dma method offsets, fields, and values */
#define NV051_SET_OBJECT                                           (0x00000000)
#define NV051_NO_OPERATION                                         (0x00000100)
#define NV051_NOTIFY                                               (0x00000104)
#define NV051_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV051_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV051_STOP_TRANSFER                                        (0x00000108)
#define NV051_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV051_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV051_WRITE                                                (0x00000300)
#define NV051_WRITE_SIZE                                           (0x00000300)
#define NV051_WRITE_SIZE_DATA                                      15:0
#define NV051_WRITE_SIZE_ADDRESS                                   31:16
#define NV051_WRITE_ADDRESS                                        (0x00000304)
#define NV051_WRITE_DATA                                           (0x00000308)
#define NV051_READ                                                 (0x0000030C)
#define NV051_READ_SIZE                                            (0x0000030C)
#define NV051_READ_SIZE_DATA                                       15:0
#define NV051_READ_SIZE_ADDRESS                                    31:16
#define NV051_READ_ADDRESS                                         (0x00000310)
#define NV051_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV051_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV051_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV051_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV051_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV051_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV03_EXTERNAL_SERIAL_BUS                                   (0x00000051)
#define NV3_EXTERNAL_SERIAL_BUS                                    (0x00000051)
#define Nv03ExternalSerialBus                             Nv04ExternalSerialBus
#define nv03ExternalSerialBus                             Nv04ExternalSerialBus
#define Nv3ExternalSerialBus                              Nv04ExternalSerialBus
#define nv3ExternalSerialBus                              Nv04ExternalSerialBus
#define nv04ExternalSerialBus                             Nv04ExternalSerialBus


/* class NV04_CONTEXT_SURFACE_SWIZZLED */
#define  NV04_CONTEXT_SURFACE_SWIZZLED                             (0x00000052)
/* NvNotification[] elements */
#define NV052_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV052_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV052_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV052_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV052_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV052_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV052_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV052_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetFormat;               /* height_width_color V8_V8_V16     0300-0303*/
 NvU32 SetOffset;               /* byte offset of top-left pixel    0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv052Typedef, Nv04ContextSurfaceSwizzled;
#define NV052_TYPEDEF                                Nv04ContextSurfaceSwizzled
/* dma method offsets, fields, and values */
#define NV052_SET_OBJECT                                           (0x00000000)
#define NV052_NO_OPERATION                                         (0x00000100)
#define NV052_NOTIFY                                               (0x00000104)
#define NV052_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV052_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV052_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV052_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV052_SET_FORMAT                                           (0x00000300)
#define NV052_SET_FORMAT_COLOR                                     15:0
#define NV052_SET_FORMAT_COLOR_LE_Y8                               (0x00000001)
#define NV052_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV052_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV052_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000004)
#define NV052_SET_FORMAT_COLOR_LE_Y16                              (0x00000005)
#define NV052_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV052_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV052_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x0000000A)
#define NV052_SET_FORMAT_COLOR_LE_Y32                              (0x0000000B)
#define NV052_SET_FORMAT_WIDTH                                     23:16
#define NV052_SET_FORMAT_WIDTH_1                                   (0x00000000)
#define NV052_SET_FORMAT_WIDTH_2                                   (0x00000001)
#define NV052_SET_FORMAT_WIDTH_4                                   (0x00000002)
#define NV052_SET_FORMAT_WIDTH_8                                   (0x00000003)
#define NV052_SET_FORMAT_WIDTH_16                                  (0x00000004)
#define NV052_SET_FORMAT_WIDTH_32                                  (0x00000005)
#define NV052_SET_FORMAT_WIDTH_64                                  (0x00000006)
#define NV052_SET_FORMAT_WIDTH_128                                 (0x00000007)
#define NV052_SET_FORMAT_WIDTH_256                                 (0x00000008)
#define NV052_SET_FORMAT_WIDTH_512                                 (0x00000009)
#define NV052_SET_FORMAT_WIDTH_1024                                (0x0000000A)
#define NV052_SET_FORMAT_WIDTH_2048                                (0x0000000B)
#define NV052_SET_FORMAT_HEIGHT                                    31:24
#define NV052_SET_FORMAT_HEIGHT_1                                  (0x00000000)
#define NV052_SET_FORMAT_HEIGHT_2                                  (0x00000001)
#define NV052_SET_FORMAT_HEIGHT_4                                  (0x00000002)
#define NV052_SET_FORMAT_HEIGHT_8                                  (0x00000003)
#define NV052_SET_FORMAT_HEIGHT_16                                 (0x00000004)
#define NV052_SET_FORMAT_HEIGHT_32                                 (0x00000005)
#define NV052_SET_FORMAT_HEIGHT_64                                 (0x00000006)
#define NV052_SET_FORMAT_HEIGHT_128                                (0x00000007)
#define NV052_SET_FORMAT_HEIGHT_256                                (0x00000008)
#define NV052_SET_FORMAT_HEIGHT_512                                (0x00000009)
#define NV052_SET_FORMAT_HEIGHT_1024                               (0x0000000A)
#define NV052_SET_FORMAT_HEIGHT_2048                               (0x0000000B)
#define NV052_SET_OFFSET                                           (0x00000304)
/* obsolete stuff */
#define NV4_CONTEXT_SURFACE_SWIZZLED                               (0x00000052)
#define Nv4ContextSurfaceSwizzled                    Nv04ContextSurfaceSwizzled
#define nv4ContextSurfaceSwizzled                    Nv04ContextSurfaceSwizzled
#define nv04ContextSurfaceSwizzled                   Nv04ContextSurfaceSwizzled


/* class NV04_CONTEXT_SURFACES_3D */
#define  NV04_CONTEXT_SURFACES_3D                                  (0x00000053)
/* NvNotification[] elements */
#define NV053_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV053_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV053_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV053_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV053_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV053_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV053_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV053_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaColor;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaZeta;       /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05b];
 NvV32 SetClipHorizontal;       /* width_x U16_U16                  02F8-02FB*/
 NvV32 SetClipVertical;         /* height_y U16_U16                 02FC-02FF*/
 NvV32 SetFormat;               /* height_width_type_color all V8   0300-0303*/
 NvV32 SetClipSize;             /* height_width U16_U16             0304-0307*/
 NvU32 SetPitch;                /* zeta_color U16_U16               0308-030b*/
 NvU32 SetOffsetColor;          /* byte offset of top-left pixel    030c-030f*/
 NvU32 SetOffsetZeta;           /* byte offset of top-left pixel    0310-0313*/
 NvV32 Reserved02[0x73b];
} Nv053Typedef, Nv04ContextSurfaces3d;
#define NV053_TYPEDEF                                     Nv04ContextSurfaces3d
/* dma method offsets, fields, and values */
#define NV053_SET_OBJECT                                           (0x00000000)
#define NV053_NO_OPERATION                                         (0x00000100)
#define NV053_NOTIFY                                               (0x00000104)
#define NV053_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV053_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV053_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV053_SET_CONTEXT_DMA_COLOR                                (0x00000184)
#define NV053_SET_CONTEXT_DMA_ZETA                                 (0x00000188)
#define NV053_SET_FORMAT                                           (0x00000300)
#define NV053_SET_FORMAT_COLOR                                     7:0
#define NV053_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000001)
#define NV053_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000002)
#define NV053_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000003)
#define NV053_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000004)
#define NV053_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000005)
#define NV053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000006)
#define NV053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000007)
#define NV053_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x00000008)
#define NV053_SET_FORMAT_TYPE                                      15:8
#define NV053_SET_FORMAT_TYPE_PITCH                                (0x00000001)
#define NV053_SET_FORMAT_TYPE_SWIZZLE                              (0x00000002)
#define NV053_SET_FORMAT_WIDTH                                     23:16
#define NV053_SET_FORMAT_HEIGHT                                    31:24
#define NV053_SET_CLIP_HORIZONTAL                                  (0x000002F8)
#define NV053_SET_CLIP_HORIZONTAL_X                                15:0
#define NV053_SET_CLIP_HORIZONTAL_WIDTH                            31:16
#define NV053_SET_CLIP_VERTICAL                                    (0x000002FC)
#define NV053_SET_CLIP_VERTICAL_Y                                  15:0
#define NV053_SET_CLIP_VERTICAL_HEIGHT                             31:16
#define NV053_SET_CLIP_SIZE                                        (0x00000304)
#define NV053_SET_CLIP_SIZE_WIDTH                                  15:0
#define NV053_SET_CLIP_SIZE_HEIGHT                                 31:16
#define NV053_SET_PITCH                                            (0x00000308)
#define NV053_SET_PITCH_COLOR                                      15:0
#define NV053_SET_PITCH_ZETA                                       31:16
#define NV053_SET_OFFSET_COLOR                                     (0x0000030C)
#define NV053_SET_OFFSET_ZETA                                      (0x00000310)
/* obsolete stuff */
#define NV04_CONTEXT_SURFACES_ARGB_ZS                              (0x00000053)
#define NV4_CONTEXT_SURFACES_ARGB_ZS                               (0x00000053)
#define Nv04ContextSurfacesArgbZs                         Nv04ContextSurfaces3d
#define nv04ContextSurfacesArgbZs                         Nv04ContextSurfaces3d
#define Nv4ContextSurfacesArgbZs                          Nv04ContextSurfaces3d
#define nv4ContextSurfacesArgbZs                          Nv04ContextSurfaces3d
#define nv04ContextSurfaces3d                             Nv04ContextSurfaces3d


/* class NV04_DX5_TEXTURED_TRIANGLE */
#define  NV04_DX5_TEXTURED_TRIANGLE                                (0x00000054)
/* NvNotification[] elements */
#define NV054_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV054_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV054_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV054_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV054_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV054_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV054_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV054_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ColorKey;                /* texture color key value          0300-0303*/
 NvU32 Offset;                  /* texture offset in bytes          0304-0307*/
 NvV32 Format;                  /* see text                         0308-030b*/
 NvV32 Filter;                  /* see text                         030c-030f*/
 NvV32 Blend;                   /* see text                         0310-0313*/
 NvV32 Control;                 /* see text                         0314-0317*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0318-031b*/
 NvV32 Reserved02[0x039];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[16];                /* end of methods in array              -05ff*/
 NvV32 DrawPrimitive[64];       /* see text                         0600-06ff*/
 NvV32 Reserved03[0x640];
} Nv054Typedef, Nv04Dx5TexturedTriangle;
#define NV054_TYPEDEF                                   Nv04Dx5TexturedTriangle
/* dma method offsets, fields, and values */
#define NV054_SET_OBJECT                                           (0x00000000)
#define NV054_NO_OPERATION                                         (0x00000100)
#define NV054_NOTIFY                                               (0x00000104)
#define NV054_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV054_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV054_STALL_PIPE                                           (0x00000108)
#define NV054_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV054_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV054_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV054_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV054_COLOR_KEY                                            (0x00000300)
#define NV054_OFFSET                                               (0x00000304)
#define NV054_FORMAT                                               (0x00000308)
#define NV054_FORMAT_CONTEXT_DMA                                   1:0
#define NV054_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV054_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV054_FORMAT_COLORKEYENABLE                                3:2
#define NV054_FORMAT_COLORKEYENABLE_FALSE                          (0x00000000)
#define NV054_FORMAT_COLORKEYENABLE_TRUE                           (0x00000001)
#define NV054_FORMAT_ORIGIN_ZOH                                    5:4
#define NV054_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV054_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV054_FORMAT_ORIGIN_FOH                                    7:6
#define NV054_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV054_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV054_FORMAT_COLOR                                         11:8
#define NV054_FORMAT_COLOR_LE_Y8                                   (0x00000001)
#define NV054_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV054_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV054_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV054_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV054_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV054_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV054_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV054_FORMAT_BASE_SIZE_U                                   19:16
#define NV054_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV054_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV054_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV054_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV054_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV054_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV054_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV054_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV054_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV054_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV054_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV054_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV054_FORMAT_BASE_SIZE_V                                   23:20
#define NV054_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV054_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV054_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV054_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV054_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV054_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV054_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV054_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV054_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV054_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV054_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV054_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV054_FORMAT_TEXTUREADDRESSU                               26:24
#define NV054_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV054_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV054_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV054_FORMAT_WRAPU                                         27:27
#define NV054_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV054_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSV                               30:28
#define NV054_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV054_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV054_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV054_FORMAT_WRAPV                                         31:31
#define NV054_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV054_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV054_FILTER                                               (0x0000030C)
#define NV054_FILTER_KERNEL_SIZE_X                                 7:0
#define NV054_FILTER_KERNEL_SIZE_Y                                 14:8
#define NV054_FILTER_MIPMAP_DITHER_ENABLE                          15:15
#define NV054_FILTER_MIPMAP_DITHER_ENABLE_FALSE                    (0x00000000)
#define NV054_FILTER_MIPMAP_DITHER_ENABLE_TRUE                     (0x00000001)
#define NV054_FILTER_MIPMAPLODBIAS                                 23:16
#define NV054_FILTER_TEXTUREMIN                                    26:24
#define NV054_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV054_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV054_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV054_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV054_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV054_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE                     27:27
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE_FALSE               (0x00000000)
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE_TRUE                (0x00000001)
#define NV054_FILTER_TEXTUREMAG                                    30:28
#define NV054_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV054_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV054_FILTER_TEXTUREMAG_MIPNEAREST                         (0x00000003)
#define NV054_FILTER_TEXTUREMAG_MIPLINEAR                          (0x00000004)
#define NV054_FILTER_TEXTUREMAG_LINEARMIPNEAREST                   (0x00000005)
#define NV054_FILTER_TEXTUREMAG_LINEARMIPLINEAR                    (0x00000006)
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE                    31:31
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_FALSE              (0x00000000)
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_TRUE               (0x00000001)
#define NV054_BLEND                                                (0x00000310)
#define NV054_BLEND_TEXTUREMAPBLEND                                3:0
#define NV054_BLEND_TEXTUREMAPBLEND_DECAL                          (0x00000001)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATE                       (0x00000002)
#define NV054_BLEND_TEXTUREMAPBLEND_DECALALPHA                     (0x00000003)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATEALPHA                  (0x00000004)
#define NV054_BLEND_TEXTUREMAPBLEND_DECALMASK                      (0x00000005)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATEMASK                   (0x00000006)
#define NV054_BLEND_TEXTUREMAPBLEND_COPY                           (0x00000007)
#define NV054_BLEND_TEXTUREMAPBLEND_ADD                            (0x00000008)
#define NV054_BLEND_MASK_BIT                                       5:4
#define NV054_BLEND_MASK_BIT_LSB                                   (0x00000001)
#define NV054_BLEND_MASK_BIT_MSB                                   (0x00000002)
#define NV054_BLEND_SHADEMODE                                      7:6
#define NV054_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV054_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV054_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV054_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV054_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV054_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV054_BLEND_SPECULARENABLE                                 15:12
#define NV054_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV054_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV054_BLEND_FOGENABLE                                      19:16
#define NV054_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV054_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV054_BLEND_ALPHABLENDENABLE                               23:20
#define NV054_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV054_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV054_BLEND_SRCBLEND                                       27:24
#define NV054_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV054_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV054_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV054_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV054_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV054_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV054_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV054_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV054_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV054_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV054_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV054_BLEND_DESTBLEND                                      31:28
#define NV054_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV054_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV054_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV054_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV054_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV054_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV054_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV054_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV054_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV054_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV054_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV054_CONTROL                                              (0x00000314)
#define NV054_CONTROL_ALPHAREF                                     7:0
#define NV054_CONTROL_ALPHAFUNC                                    11:8
#define NV054_CONTROL_ALPHAFUNC_NEVER                              (0x00000001)
#define NV054_CONTROL_ALPHAFUNC_LESS                               (0x00000002)
#define NV054_CONTROL_ALPHAFUNC_EQUAL                              (0x00000003)
#define NV054_CONTROL_ALPHAFUNC_LESSEQUAL                          (0x00000004)
#define NV054_CONTROL_ALPHAFUNC_GREATER                            (0x00000005)
#define NV054_CONTROL_ALPHAFUNC_NOTEQUAL                           (0x00000006)
#define NV054_CONTROL_ALPHAFUNC_GREATEREQUAL                       (0x00000007)
#define NV054_CONTROL_ALPHAFUNC_ALWAYS                             (0x00000008)
#define NV054_CONTROL_ALPHATESTENABLE                              12:12
#define NV054_CONTROL_ALPHATESTENABLE_FALSE                        (0x00000000)
#define NV054_CONTROL_ALPHATESTENABLE_TRUE                         (0x00000001)
#define NV054_CONTROL_ORIGIN                                       13:13
#define NV054_CONTROL_ORIGIN_CENTER                                (0x00000000)
#define NV054_CONTROL_ORIGIN_CORNER                                (0x00000001)
#define NV054_CONTROL_ZENABLE                                      15:14
#define NV054_CONTROL_ZENABLE_FALSE                                (0x00000000)
#define NV054_CONTROL_ZENABLE_TRUE                                 (0x00000001)
#define NV054_CONTROL_ZFUNC                                        19:16
#define NV054_CONTROL_ZFUNC_NEVER                                  (0x00000001)
#define NV054_CONTROL_ZFUNC_LESS                                   (0x00000002)
#define NV054_CONTROL_ZFUNC_EQUAL                                  (0x00000003)
#define NV054_CONTROL_ZFUNC_LESSEQUAL                              (0x00000004)
#define NV054_CONTROL_ZFUNC_GREATER                                (0x00000005)
#define NV054_CONTROL_ZFUNC_NOTEQUAL                               (0x00000006)
#define NV054_CONTROL_ZFUNC_GREATEREQUAL                           (0x00000007)
#define NV054_CONTROL_ZFUNC_ALWAYS                                 (0x00000008)
#define NV054_CONTROL_CULLMODE                                     21:20
#define NV054_CONTROL_CULLMODE_NONE                                (0x00000001)
#define NV054_CONTROL_CULLMODE_CW                                  (0x00000002)
#define NV054_CONTROL_CULLMODE_CCW                                 (0x00000003)
#define NV054_CONTROL_DITHERENABLE                                 22:22
#define NV054_CONTROL_DITHERENABLE_FALSE                           (0x00000000)
#define NV054_CONTROL_DITHERENABLE_TRUE                            (0x00000001)
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE                         23:23
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE_FALSE                   (0x00000000)
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE_TRUE                    (0x00000001)
#define NV054_CONTROL_ZWRITEENABLE                                 29:24
#define NV054_CONTROL_ZWRITEENABLE_FALSE                           (0x00000000)
#define NV054_CONTROL_ZWRITEENABLE_TRUE                            (0x00000001)
#define NV054_CONTROL_Z_FORMAT                                     31:30
#define NV054_CONTROL_Z_FORMAT_FIXED                               (0x00000001)
#define NV054_CONTROL_Z_FORMAT_FLOAT                               (0x00000002)
#define NV054_FOG_COLOR                                            (0x00000318)
#define NV054_TLVERTEX(i)                                          (0x00000400\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SX(i)                                       (0x00000400\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SY(i)                                       (0x00000404\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SZ(i)                                       (0x00000408\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_RHW(i)                                      (0x0000040C\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_COLOR(i)                                    (0x00000410\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_COLOR_BLUE                                  7:0
#define NV054_TLVERTEX_COLOR_GREEN                                 15:8
#define NV054_TLVERTEX_COLOR_RED                                   23:16
#define NV054_TLVERTEX_COLOR_ALPHA                                 31:24
#define NV054_TLVERTEX_SPECULAR(i)                                 (0x00000414\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SPECULAR_BLUE                               7:0
#define NV054_TLVERTEX_SPECULAR_GREEN                              15:8
#define NV054_TLVERTEX_SPECULAR_RED                                23:16
#define NV054_TLVERTEX_SPECULAR_FOG                                31:24
#define NV054_TLVERTEX_TU(i)                                       (0x00000418\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_TV(i)                                       (0x0000041C\
                                                                   +(i)*0x0020)
#define NV054_DRAW_PRIMITIVE(a)                                    (0x00000600\
                                                                   +(a)*0x0004)
#define NV054_DRAW_PRIMITIVE_I0                                    3:0
#define NV054_DRAW_PRIMITIVE_I1                                    7:4
#define NV054_DRAW_PRIMITIVE_I2                                    11:8
#define NV054_DRAW_PRIMITIVE_I3                                    15:12
#define NV054_DRAW_PRIMITIVE_I4                                    19:16
#define NV054_DRAW_PRIMITIVE_I5                                    31:20
/* obsolete stuff */
#define NV4_DX5_TEXTURED_TRIANGLE                                  (0x00000054)
#define Nv4Dx5TexturedTriangle                          Nv04Dx5TexturedTriangle
#define nv4Dx5TexturedTriangle                          Nv04Dx5TexturedTriangle
#define nv04Dx5TexturedTriangle                         Nv04Dx5TexturedTriangle


/* class NV04_DX6_MULTI_TEXTURE_TRIANGLE */
#define  NV04_DX6_MULTI_TEXTURE_TRIANGLE                           (0x00000055)
/* NvNotification[] elements */
#define NV055_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV055_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV055_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV055_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV055_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV055_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV055_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV055_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05e];
 NvU32 Offset[2];               /* offset in bytes                  0308-030f*/
 NvV32 Format[2];               /* see text                         0310-0317*/
 NvV32 Filter[2];               /* see text                         0318-031f*/
 NvV32 Combine0Alpha;           /* see text                         0320-0323*/
 NvV32 Combine0Color;           /* see text                         0324-0327*/
 NvV32 Reserved02[0x001];
 NvV32 Combine1Alpha;           /* see text                         032c-032f*/
 NvV32 Combine1Color;           /* see text                         0330-0333*/
 NvV32 CombineFactor;           /* A8R8G8B8                         0334-0337*/
 NvV32 Blend;                   /* see text                         0338-033b*/
 NvV32 Control0;                /* see text                         033c-033f*/
 NvV32 Control1;                /* see text                         0340-0343*/
 NvV32 Control2;                /* see text                         0344-0347*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0348-034b*/
 NvV32 Reserved03[0x02D];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu0;                    /* texture 0 u coordinate             18-  1b*/
  NvF32 tv0;                    /* texture 0 v coordinate             1c-  1f*/
  NvF32 tu1;                    /* texture 1 u coordinate             20-  23*/
  NvF32 tv1;                    /* texture 1 v coordinate             24-  27*/
 } Tlmtvertex[8];               /* end of methods in array              -053f*/
 NvV32 DrawPrimitive[48];       /* see text                         0540-05ff*/
 NvV32 Reserved04[0x680];
} Nv055Typedef, Nv04Dx6MultiTextureTriangle;
#define NV055_TYPEDEF                               Nv04Dx6MultiTextureTriangle
/* dma method offsets, fields, and values */
#define NV055_SET_OBJECT                                           (0x00000000)
#define NV055_NO_OPERATION                                         (0x00000100)
#define NV055_NOTIFY                                               (0x00000104)
#define NV055_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV055_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV055_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV055_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV055_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV055_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV055_OFFSET(b)                                            (0x00000308\
                                                                   +(b)*0x0004)
#define NV055_FORMAT(b)                                            (0x00000310\
                                                                   +(b)*0x0004)
#define NV055_FORMAT_CONTEXT_DMA                                   3:0
#define NV055_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV055_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV055_FORMAT_ORIGIN_ZOH                                    5:4
#define NV055_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV055_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV055_FORMAT_ORIGIN_FOH                                    7:6
#define NV055_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV055_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV055_FORMAT_COLOR                                         11:8
#define NV055_FORMAT_COLOR_LE_AY8                                  (0x00000001)
#define NV055_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV055_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV055_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV055_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV055_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV055_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV055_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV055_FORMAT_BASE_SIZE_U                                   19:16
#define NV055_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV055_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV055_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV055_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV055_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV055_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV055_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV055_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV055_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV055_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV055_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV055_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV055_FORMAT_BASE_SIZE_V                                   23:20
#define NV055_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV055_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV055_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV055_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV055_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV055_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV055_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV055_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV055_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV055_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV055_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV055_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV055_FORMAT_TEXTUREADDRESSU                               26:24
#define NV055_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV055_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV055_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV055_FORMAT_WRAPU                                         27:27
#define NV055_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV055_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSV                               30:28
#define NV055_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV055_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV055_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV055_FORMAT_WRAPV                                         31:31
#define NV055_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV055_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV055_FILTER(b)                                            (0x00000318\
                                                                   +(b)*0x0004)
#define NV055_FILTER_KERNEL_SIZE_X                                 7:0
#define NV055_FILTER_KERNEL_SIZE_Y                                 14:8
#define NV055_FILTER_MIPMAP_DITHER_ENABLE                          15:15
#define NV055_FILTER_MIPMAP_DITHER_ENABLE_FALSE                    (0x00000000)
#define NV055_FILTER_MIPMAP_DITHER_ENABLE_TRUE                     (0x00000001)
#define NV055_FILTER_MIPMAPLODBIAS                                 23:16
#define NV055_FILTER_TEXTUREMIN                                    26:24
#define NV055_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV055_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV055_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV055_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV055_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV055_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE                     27:27
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE_FALSE               (0x00000000)
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE_TRUE                (0x00000001)
#define NV055_FILTER_TEXTUREMAG                                    30:28
#define NV055_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV055_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV055_FILTER_TEXTUREMAG_MIPNEAREST                         (0x00000003)
#define NV055_FILTER_TEXTUREMAG_MIPLINEAR                          (0x00000004)
#define NV055_FILTER_TEXTUREMAG_LINEARMIPNEAREST                   (0x00000005)
#define NV055_FILTER_TEXTUREMAG_LINEARMIPLINEAR                    (0x00000006)
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE                    31:31
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_FALSE              (0x00000000)
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_TRUE               (0x00000001)
#define NV055_COMBINE_0_ALPHA                                      (0x00000320)
#define NV055_COMBINE_0_ALPHA_INVERSE_0                            0:0
#define NV055_COMBINE_0_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_0                              1:1
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0                           7:2
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_1                            8:8
#define NV055_COMBINE_0_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_1                              9:9
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1                           15:10
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_2                            16:16
#define NV055_COMBINE_0_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_2                              17:17
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2                           23:18
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_3                            24:24
#define NV055_COMBINE_0_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_3                              25:25
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3                           28:26
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_OPERATION                            31:29
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_0_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_0_COLOR                                      (0x00000324)
#define NV055_COMBINE_0_COLOR_INVERSE_0                            0:0
#define NV055_COMBINE_0_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_0                              1:1
#define NV055_COMBINE_0_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0                           7:2
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_1                            8:8
#define NV055_COMBINE_0_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_1                              9:9
#define NV055_COMBINE_0_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1                           15:10
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_2                            16:16
#define NV055_COMBINE_0_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_2                              17:17
#define NV055_COMBINE_0_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2                           23:18
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_3                            24:24
#define NV055_COMBINE_0_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_3                              25:25
#define NV055_COMBINE_0_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3                           28:26
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_OPERATION                            31:29
#define NV055_COMBINE_0_COLOR_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_0_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_0_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_0_COLOR_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_1_ALPHA                                      (0x0000032C)
#define NV055_COMBINE_1_ALPHA_INVERSE_0                            0:0
#define NV055_COMBINE_1_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_0                              1:1
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0                           7:2
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_1                            8:8
#define NV055_COMBINE_1_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_1                              9:9
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1                           15:10
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_2                            16:16
#define NV055_COMBINE_1_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_2                              17:17
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2                           23:18
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_3                            24:24
#define NV055_COMBINE_1_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_3                              25:25
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3                           28:26
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_OPERATION                            31:29
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_1_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_1_COLOR                                      (0x00000330)
#define NV055_COMBINE_1_COLOR_INVERSE_0                            0:0
#define NV055_COMBINE_1_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_0                              1:1
#define NV055_COMBINE_1_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0                           7:2
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_1                            8:8
#define NV055_COMBINE_1_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_1                              9:9
#define NV055_COMBINE_1_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1                           15:10
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_2                            16:16
#define NV055_COMBINE_1_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_2                              17:17
#define NV055_COMBINE_1_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2                           23:18
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_3                            24:24
#define NV055_COMBINE_1_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_3                              25:25
#define NV055_COMBINE_1_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3                           28:26
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_OPERATION                            31:29
#define NV055_COMBINE_1_COLOR_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_1_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_1_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_1_COLOR_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
/* The following NV055_COMBINE_*** defines can be used without regard to the combiner number */
#define NV055_COMBINE_ALPHA_INVERSE_0                              0:0
#define NV055_COMBINE_ALPHA_INVERSE_0_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_0_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_0                                1:1
#define NV055_COMBINE_ALPHA_ARGUMENT_0                             7:2
#define NV055_COMBINE_ALPHA_ARGUMENT_0_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_1                              8:8
#define NV055_COMBINE_ALPHA_INVERSE_1_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_1_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_1                                9:9
#define NV055_COMBINE_ALPHA_ARGUMENT_1                             15:10
#define NV055_COMBINE_ALPHA_ARGUMENT_1_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_2                              16:16
#define NV055_COMBINE_ALPHA_INVERSE_2_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_2_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_2                                17:17
#define NV055_COMBINE_ALPHA_ARGUMENT_2                             23:18
#define NV055_COMBINE_ALPHA_ARGUMENT_2_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_3                              24:24
#define NV055_COMBINE_ALPHA_INVERSE_3_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_3_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_3                                25:25
#define NV055_COMBINE_ALPHA_ARGUMENT_3                             28:26
#define NV055_COMBINE_ALPHA_ARGUMENT_3_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_OPERATION                              31:29
#define NV055_COMBINE_ALPHA_OPERATION_ADD                          (0x00000001)
#define NV055_COMBINE_ALPHA_OPERATION_ADD2                         (0x00000002)
#define NV055_COMBINE_ALPHA_OPERATION_ADD4                         (0x00000003)
#define NV055_COMBINE_ALPHA_OPERATION_ADDSIGNED                    (0x00000004)
#define NV055_COMBINE_ALPHA_OPERATION_MUX                          (0x00000005)
#define NV055_COMBINE_ALPHA_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV055_COMBINE_ALPHA_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_0                              0:0
#define NV055_COMBINE_COLOR_INVERSE_0_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_0_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_0                                1:1
#define NV055_COMBINE_COLOR_ALPHA_0_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_0_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_0                             7:2
#define NV055_COMBINE_COLOR_ARGUMENT_0_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_0_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_1                              8:8
#define NV055_COMBINE_COLOR_INVERSE_1_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_1_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_1                                9:9
#define NV055_COMBINE_COLOR_ALPHA_1_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_1_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_1                             15:10
#define NV055_COMBINE_COLOR_ARGUMENT_1_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_1_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_2                              16:16
#define NV055_COMBINE_COLOR_INVERSE_2_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_2_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_2                                17:17
#define NV055_COMBINE_COLOR_ALPHA_2_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_2_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_2                             23:18
#define NV055_COMBINE_COLOR_ARGUMENT_2_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_2_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_3                              24:24
#define NV055_COMBINE_COLOR_INVERSE_3_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_3_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_3                                25:25
#define NV055_COMBINE_COLOR_ALPHA_3_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_3_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_3                             28:26
#define NV055_COMBINE_COLOR_ARGUMENT_3_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_3_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_OPERATION                              31:29
#define NV055_COMBINE_COLOR_OPERATION_ADD                          (0x00000001)
#define NV055_COMBINE_COLOR_OPERATION_ADD2                         (0x00000002)
#define NV055_COMBINE_COLOR_OPERATION_ADD4                         (0x00000003)
#define NV055_COMBINE_COLOR_OPERATION_ADDSIGNED                    (0x00000004)
#define NV055_COMBINE_COLOR_OPERATION_MUX                          (0x00000005)
#define NV055_COMBINE_COLOR_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV055_COMBINE_COLOR_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV055_COMBINE_FACTOR                                       (0x00000334)
#define NV055_COMBINE_FACTOR_BLUE                                  7:0
#define NV055_COMBINE_FACTOR_GREEN                                 15:8
#define NV055_COMBINE_FACTOR_RED                                   23:16
#define NV055_COMBINE_FACTOR_ALPHA                                 31:24
#define NV055_BLEND                                                (0x00000338)
#define NV055_BLEND_MASK_BIT                                       5:0
#define NV055_BLEND_MASK_BIT_LSB                                   (0x00000010)
#define NV055_BLEND_MASK_BIT_MSB                                   (0x00000020)
#define NV055_BLEND_SHADEMODE                                      7:6
#define NV055_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV055_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV055_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV055_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV055_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV055_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV055_BLEND_SPECULARENABLE                                 15:12
#define NV055_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV055_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV055_BLEND_FOGENABLE                                      19:16
#define NV055_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV055_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV055_BLEND_ALPHABLENDENABLE                               23:20
#define NV055_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV055_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV055_BLEND_SRCBLEND                                       27:24
#define NV055_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV055_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV055_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV055_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV055_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV055_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV055_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV055_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV055_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV055_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV055_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV055_BLEND_DESTBLEND                                      31:28
#define NV055_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV055_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV055_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV055_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV055_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV055_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV055_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV055_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV055_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV055_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV055_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV055_CONTROL0                                             (0x0000033C)
#define NV055_CONTROL0_ALPHAREF                                    7:0
#define NV055_CONTROL0_ALPHAFUNC                                   11:8
#define NV055_CONTROL0_ALPHAFUNC_NEVER                             (0x00000001)
#define NV055_CONTROL0_ALPHAFUNC_LESS                              (0x00000002)
#define NV055_CONTROL0_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV055_CONTROL0_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV055_CONTROL0_ALPHAFUNC_GREATER                           (0x00000005)
#define NV055_CONTROL0_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV055_CONTROL0_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV055_CONTROL0_ALPHAFUNC_ALWAYS                            (0x00000008)
#define NV055_CONTROL0_ALPHATESTENABLE                             12:12
#define NV055_CONTROL0_ALPHATESTENABLE_FALSE                       (0x00000000)
#define NV055_CONTROL0_ALPHATESTENABLE_TRUE                        (0x00000001)
#define NV055_CONTROL0_ORIGIN                                      13:13
#define NV055_CONTROL0_ORIGIN_CENTER                               (0x00000000)
#define NV055_CONTROL0_ORIGIN_CORNER                               (0x00000001)
#define NV055_CONTROL0_ZENABLE                                     15:14
#define NV055_CONTROL0_ZENABLE_FALSE                               (0x00000000)
#define NV055_CONTROL0_ZENABLE_TRUE                                (0x00000001)
#define NV055_CONTROL0_ZFUNC                                       19:16
#define NV055_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV055_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV055_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV055_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV055_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV055_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV055_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV055_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV055_CONTROL0_CULLMODE                                    21:20
#define NV055_CONTROL0_CULLMODE_NONE                               (0x00000001)
#define NV055_CONTROL0_CULLMODE_CW                                 (0x00000002)
#define NV055_CONTROL0_CULLMODE_CCW                                (0x00000003)
#define NV055_CONTROL0_DITHERENABLE                                22:22
#define NV055_CONTROL0_DITHERENABLE_FALSE                          (0x00000000)
#define NV055_CONTROL0_DITHERENABLE_TRUE                           (0x00000001)
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE                        23:23
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV055_CONTROL0_ZWRITEENABLE                                24:24
#define NV055_CONTROL0_ZWRITEENABLE_FALSE                          (0x00000000)
#define NV055_CONTROL0_ZWRITEENABLE_TRUE                           (0x00000001)
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE                        25:25
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                  (0x00000000)
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                   (0x00000001)
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE                          26:26
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV055_CONTROL0_RED_WRITE_ENABLE                            27:27
#define NV055_CONTROL0_RED_WRITE_ENABLE_FALSE                      (0x00000000)
#define NV055_CONTROL0_RED_WRITE_ENABLE_TRUE                       (0x00000001)
#define NV055_CONTROL0_GREEN_WRITE_ENABLE                          28:28
#define NV055_CONTROL0_GREEN_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV055_CONTROL0_GREEN_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV055_CONTROL0_BLUE_WRITE_ENABLE                           29:29
#define NV055_CONTROL0_BLUE_WRITE_ENABLE_FALSE                     (0x00000000)
#define NV055_CONTROL0_BLUE_WRITE_ENABLE_TRUE                      (0x00000001)
#define NV055_CONTROL0_Z_FORMAT                                    31:30
#define NV055_CONTROL0_Z_FORMAT_FIXED                              (0x00000001)
#define NV055_CONTROL0_Z_FORMAT_FLOAT                              (0x00000002)
#define NV055_CONTROL1                                             (0x00000340)
#define NV055_CONTROL1_STENCIL_TEST_ENABLE                         3:0
#define NV055_CONTROL1_STENCIL_TEST_ENABLE_FALSE                   (0x00000000)
#define NV055_CONTROL1_STENCIL_TEST_ENABLE_TRUE                    (0x00000001)
#define NV055_CONTROL1_STENCIL_FUNC                                7:4
#define NV055_CONTROL1_STENCIL_FUNC_NEVER                          (0x00000001)
#define NV055_CONTROL1_STENCIL_FUNC_LESS                           (0x00000002)
#define NV055_CONTROL1_STENCIL_FUNC_EQUAL                          (0x00000003)
#define NV055_CONTROL1_STENCIL_FUNC_LESSEQUAL                      (0x00000004)
#define NV055_CONTROL1_STENCIL_FUNC_GREATER                        (0x00000005)
#define NV055_CONTROL1_STENCIL_FUNC_NOTEQUAL                       (0x00000006)
#define NV055_CONTROL1_STENCIL_FUNC_GREATEREQUAL                   (0x00000007)
#define NV055_CONTROL1_STENCIL_FUNC_ALWAYS                         (0x00000008)
#define NV055_CONTROL1_STENCIL_REF                                 15:8
#define NV055_CONTROL1_STENCIL_MASK_READ                           23:16
#define NV055_CONTROL1_STENCIL_MASK_WRITE                          31:24
#define NV055_CONTROL2                                             (0x00000344)
#define NV055_CONTROL2_STENCIL_OP_FAIL                             3:0
#define NV055_CONTROL2_STENCIL_OP_FAIL_KEEP                        (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_FAIL_ZERO                        (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_FAIL_REPLACE                     (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INCRSAT                     (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_FAIL_DECRSAT                     (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INVERT                      (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INCR                        (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_FAIL_DECR                        (0x00000008)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL                            7:4
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_KEEP                       (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_ZERO                       (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_REPLACE                    (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INCRSAT                    (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_DECRSAT                    (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INVERT                     (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INCR                       (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_DECR                       (0x00000008)
#define NV055_CONTROL2_STENCIL_OP_ZPASS                            31:8
#define NV055_CONTROL2_STENCIL_OP_ZPASS_KEEP                       (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_ZERO                       (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_REPLACE                    (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INCRSAT                    (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_DECRSAT                    (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INVERT                     (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INCR                       (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_DECR                       (0x00000008)
#define NV055_FOG_COLOR                                            (0x00000348)
#define NV055_TLMTVERTEX(i)                                        (0x00000400\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SX(i)                                     (0x00000400\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SY(i)                                     (0x00000404\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SZ(i)                                     (0x00000408\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_RHW(i)                                    (0x0000040C\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_COLOR(i)                                  (0x00000410\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_COLOR_BLUE                                7:0
#define NV055_TLMTVERTEX_COLOR_GREEN                               15:8
#define NV055_TLMTVERTEX_COLOR_RED                                 23:16
#define NV055_TLMTVERTEX_COLOR_ALPHA                               31:24
#define NV055_TLMTVERTEX_SPECULAR(i)                               (0x00000414\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SPECULAR_BLUE                             7:0
#define NV055_TLMTVERTEX_SPECULAR_GREEN                            15:8
#define NV055_TLMTVERTEX_SPECULAR_RED                              23:16
#define NV055_TLMTVERTEX_SPECULAR_FOG                              31:24
#define NV055_TLMTVERTEX_TU0(i)                                    (0x00000418\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TV0(i)                                    (0x0000041C\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TU1(i)                                    (0x00000420\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TV1(i)                                    (0x00000424\
                                                                   +(i)*0x0028)
#define NV055_DRAW_PRIMITIVE(a)                                    (0x00000540\
                                                                   +(a)*0x0004)
#define NV055_DRAW_PRIMITIVE_I0                                    3:0
#define NV055_DRAW_PRIMITIVE_I1                                    7:4
#define NV055_DRAW_PRIMITIVE_I2                                    11:8
#define NV055_DRAW_PRIMITIVE_I3                                    15:12
#define NV055_DRAW_PRIMITIVE_I4                                    19:16
#define NV055_DRAW_PRIMITIVE_I5                                    31:20
/* obsolete stuff */
#define NV4_DX6_MULTI_TEXTURE_TRIANGLE                             (0x00000055)
#define Nv4Dx6MultiTextureTriangle                  Nv04Dx6MultiTextureTriangle
#define nv4Dx6MultiTextureTriangle                  Nv04Dx6MultiTextureTriangle
#define nv04Dx6MultiTextureTriangle                 Nv04Dx6MultiTextureTriangle


// This typedef really should be the same as Nv10CelsiusPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.


typedef NvV32 Nv056Typedef;


/* class NV10_CELSIUS_PRIMITIVE */
#define  NV10_CELSIUS_PRIMITIVE                                    (0x00000056)
/* NvNotification[] elements */
#define NV056_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV056_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV056_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV056_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV056_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV056_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV056_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved00[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved01[0x2c/4];
    NvV32 PmTrigger;
    NvV32 Reserved02[0x3c/4];
    NvV32 SetContextDmaNotifies;
    NvV32 SetContextDmaA;
    NvV32 SetContextDmaB;
    NvV32 SetContextDmaVertex;
    NvV32 SetContextDmaState;
    NvV32 SetContextDmaColor;
    NvV32 SetContextDmaZeta;
    NvV32 Reserved03[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved04[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved05[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvV32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvV32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvV32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvV32 SetStencilFuncRef;
    NvV32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvV32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvV32 SetMaterialEmission[3];
    NvV32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
        NvV32 S;
        NvV32 T;
        NvV32 R;
        NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvV32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved06[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved07[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved08[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved09[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0b[0xc8/4];
    struct {
        NvF32 AmbientColor[3];
        NvF32 DiffuseColor[3];
        NvF32 SpecularColor[3];
        NvF32 LocalRange;
        NvF32 InfiniteHalfVector[3];
        NvF32 InfiniteDirection[3];
        NvF32 SpotFalloff[3];
        NvF32 SpotDirection[4];
        NvF32 LocalPosition[3];
        NvF32 LocalAttenuation[3];
        NvV32 Reserved0c[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0d[0xc/4];
    NvF32 SetVertex4f[4];
    NvS16 SetVertex4s[4];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0e[0x4/4];
    NvS16 SetNormal3s[3];
    NvV16 Reserved0f[0xa/2];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvV32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvV32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS16 SetTexcoord0_2s[2];
    NvV32 Reserved10[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS16 SetTexcoord0_4s[4];
    NvF32 SetTexcoord1_2f[2];
    NvS16 SetTexcoord1_2s[2];
    NvV32 Reserved11[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS16 SetTexcoord1_4s[4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved12[0x4/4];
    NvV32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 Reserved13[0xbc/4];
    NvV32 SetBeginEnd;
    NvV16 ArrayElement16[256];
    NvV32 Reserved14[0xfc/4];
    NvV32 SetBeginEnd2;
    NvV32 ArrayElement32[64];
    NvV32 Reserved15[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 SetMaterialEmissionSW[3];
    NvV32 Reserved16[1];
    NvF32 SetViewportOffsetSW[4];
    NvF32 SetPassthruViewportOffsetSW[4];
    NvV32 Reserved17[0x1a4/4];
    NvV32 SetBeginEnd4;
    NvV32 InlineArray[512];
} Nv10CelsiusPrimitive;


#define NV056_TYPEDEF                                      Nv10CelsiusPrimitive
#define NV056_SET_OBJECT                                           (0x00000000)


#define NV056_DEBUG_INIT(i)                                        (0x00001600+(i)*4)


#define NV056_FLUSH                                                        0x00000728


#define NV056_NO_OPERATION                                                 0x00000100


#define NV056_NOTIFY                                                       0x00000104
#define NV056_NOTIFY_TYPE                                                        23:0
#define NV056_NOTIFY_TYPE_WRITE_ONLY                                       0x00000000
#define NV056_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                0x00000001


#define NV056_SET_WARNING_ENABLE                                           0x00000108
#define NV056_SET_WARNING_ENABLE_V                                               23:0
#define NV056_SET_WARNING_ENABLE_V_FALSE                                   0x00000000
#define NV056_SET_WARNING_ENABLE_V_TRUE                                    0x00000001


#define NV056_GET_STATE                                                    0x0000010c
#define NV056_GET_STATE_GETSTATE                                                 31:0
#define NV056_GET_STATE_GETSTATE_ALL_STATE                                 0x00000001
#define NV056_GET_STATE_PUTSTATE_ALL_STATE                                 0x00000002
#define NV056_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                   0x00000003
#define NV056_GET_STATE_GETSTATE_RENDERING_STATE                           0x00000004
#define NV056_GET_STATE_GETSTATE_GEOMETRY_STATE                            0x00000005
#define NV056_GET_STATE_GETSTATE_SNAPSHOT_PRIM_ASSM                        0x00000006
#define NV056_GET_STATE_GETSTATE_RELOAD_PRIM_ASSM                          0x00000007

#define NV056_WAIT_FOR_IDLE                                                0x00000110


#define NV056_PM_TRIGGER                                                   0x00000140


#define NV056_SET_CONTEXT_DMA_NOTIFIES                                     0x00000180


#define NV056_SET_CONTEXT_DMA_A                                            0x00000184


#define NV056_SET_CONTEXT_DMA_B                                            0x00000188


#define NV056_SET_CONTEXT_DMA_VERTEX                                       0x0000018c


#define NV056_SET_CONTEXT_DMA_STATE                                        0x00000190


#define NV056_SET_CONTEXT_DMA_COLOR                                        0x00000194


#define NV056_SET_CONTEXT_DMA_ZETA                                         0x00000198


#define NV056_SET_SURFACE_CLIP_HORIZONTAL                                  0x00000200
#define NV056_SET_SURFACE_CLIP_HORIZONTAL_X                                      15:0
#define NV056_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                 31:16


#define NV056_SET_SURFACE_CLIP_VERTICAL                                    0x00000204
#define NV056_SET_SURFACE_CLIP_VERTICAL_Y                                        15:0
#define NV056_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                  31:16


#define NV056_SET_SURFACE_FORMAT                                           0x00000208
#define NV056_SET_SURFACE_FORMAT_COLOR                                            7:0
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                0x00000001
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                0x00000002
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                           0x00000003
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                0x00000004
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                0x00000005
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            0x00000006
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            0x00000007
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000008
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_B8                               0x00000009
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_G8B8                             0x0000000A
#define NV056_SET_SURFACE_FORMAT_TYPE                                            15:8
#define NV056_SET_SURFACE_FORMAT_TYPE_PITCH                                0x00000001
#define NV056_SET_SURFACE_FORMAT_TYPE_SWIZZLE                              0x00000002
#define NV056_SET_SURFACE_FORMAT_WIDTH                                          23:16
#define NV056_SET_SURFACE_FORMAT_WIDTH_1                                   0x00000000
#define NV056_SET_SURFACE_FORMAT_WIDTH_2                                   0x00000001
#define NV056_SET_SURFACE_FORMAT_WIDTH_4                                   0x00000002
#define NV056_SET_SURFACE_FORMAT_WIDTH_8                                   0x00000003
#define NV056_SET_SURFACE_FORMAT_WIDTH_16                                  0x00000004
#define NV056_SET_SURFACE_FORMAT_WIDTH_32                                  0x00000005
#define NV056_SET_SURFACE_FORMAT_WIDTH_64                                  0x00000006
#define NV056_SET_SURFACE_FORMAT_WIDTH_128                                 0x00000007
#define NV056_SET_SURFACE_FORMAT_WIDTH_256                                 0x00000008
#define NV056_SET_SURFACE_FORMAT_WIDTH_512                                 0x00000009
#define NV056_SET_SURFACE_FORMAT_WIDTH_1024                                0x0000000A
#define NV056_SET_SURFACE_FORMAT_WIDTH_2048                                0x0000000B
#define NV056_SET_SURFACE_FORMAT_HEIGHT                                         31:24
#define NV056_SET_SURFACE_FORMAT_HEIGHT_1                                  0x00000000
#define NV056_SET_SURFACE_FORMAT_HEIGHT_2                                  0x00000001
#define NV056_SET_SURFACE_FORMAT_HEIGHT_4                                  0x00000002
#define NV056_SET_SURFACE_FORMAT_HEIGHT_8                                  0x00000003
#define NV056_SET_SURFACE_FORMAT_HEIGHT_16                                 0x00000004
#define NV056_SET_SURFACE_FORMAT_HEIGHT_32                                 0x00000005
#define NV056_SET_SURFACE_FORMAT_HEIGHT_64                                 0x00000006
#define NV056_SET_SURFACE_FORMAT_HEIGHT_128                                0x00000007
#define NV056_SET_SURFACE_FORMAT_HEIGHT_256                                0x00000008
#define NV056_SET_SURFACE_FORMAT_HEIGHT_512                                0x00000009
#define NV056_SET_SURFACE_FORMAT_HEIGHT_1024                               0x0000000A
#define NV056_SET_SURFACE_FORMAT_HEIGHT_2048                               0x0000000B


#define NV056_SET_SURFACE_PITCH                                            0x0000020c
#define NV056_SET_SURFACE_PITCH_COLOR                                            15:0
#define NV056_SET_SURFACE_PITCH_ZETA                                            31:16


#define NV056_SET_SURFACE_COLOR_OFFSET                                     0x00000210
#define NV056_SET_SURFACE_COLOR_OFFSET_V                                         31:0


#define NV056_SET_SURFACE_ZETA_OFFSET                                      0x00000214
#define NV056_SET_SURFACE_ZETA_OFFSET_V                                          31:0


#define NV056_SET_TEXTURE_OFFSET(i)                                (0x00000218+(i)*4)
#define NV056_SET_TEXTURE_OFFSET_V                                               31:0


#define NV056_SET_TEXTURE_FORMAT(i)                                (0x00000220+(i)*4)
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA                                      1:0
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                   2:2
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                      0x00000000
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                       0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                       4:3
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                         0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH                                       6:5
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                         0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_COLOR                                           11:7
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_Y8                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_AY8                              0x00000001
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                         0x00000003
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                         0x00000004
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                           0x00000005
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000006
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                         0x00000007
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                      0x00000008
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                        0x00000009
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                      0x0000000A
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                      0x0000000B
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                    0x0000000C
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                   0x0000000E
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                   0x0000000F
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                   0x00000010
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                     0x00000011
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                   0x00000012
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                         0x00000013
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                        0x00000014
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                      0x00000015
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                       0x00000016
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                       0x00000017
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                     0x00000018
#define NV056_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                  15:12
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U                                    19:16
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                             0x00000000
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                             0x00000003
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                            0x00000004
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                            0x00000005
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                            0x00000006
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                           0x00000007
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                           0x00000008
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                           0x00000009
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                          0x0000000A
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                          0x0000000B
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V                                    23:20
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                             0x00000000
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                             0x00000003
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                            0x00000004
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                            0x00000005
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                            0x00000006
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                           0x00000007
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                           0x00000008
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                           0x00000009
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                          0x0000000A
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                          0x0000000B
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                                26:24
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                      0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                    0x00000002
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                     0x00000003
#define NV056_SET_TEXTURE_FORMAT_WRAPU                                          27:27
#define NV056_SET_TEXTURE_FORMAT_WRAPU_FALSE                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_WRAPU_TRUE                                0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                                30:28
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                      0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                    0x00000002
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                     0x00000003
#define NV056_SET_TEXTURE_FORMAT_WRAPV                                          31:31
#define NV056_SET_TEXTURE_FORMAT_WRAPV_FALSE                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_WRAPV_TRUE                                0x00000001


#define NV056_SET_TEXTURE_CONTROL0(i)                              (0x00000228+(i)*4)
#define NV056_SET_TEXTURE_CONTROL0_ENABLE                                       30:30
#define NV056_SET_TEXTURE_CONTROL0_ENABLE_FALSE                            0x00000000
#define NV056_SET_TEXTURE_CONTROL0_ENABLE_TRUE                             0x00000001
#define NV056_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                29:18
#define NV056_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                 17:6
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                  5:4
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                         0x00000000
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                         0x00000001
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                             3:3
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                0x00000000
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                 0x00000001
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                              2:2
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                 0x00000000
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                  0x00000001
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                            1:0
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE               0x00000000
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA               0x00000001
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                0x00000002
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                0x00000003


#define NV056_SET_TEXTURE_CONTROL1(i)                              (0x00000230+(i)*4)
#define NV056_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                  31:16
#define NV056_SET_TEXTURE_CONTROL1_ZERO                                          15:0


#define NV056_SET_TEXTURE_CONTROL2(i)                              (0x00000238+(i)*4)
#define NV056_SET_TEXTURE_CONTROL2_PERTURB_DU                                    11:0
#define NV056_SET_TEXTURE_CONTROL2_PERTURB_DV                                   23:12
#define NV056_SET_TEXTURE_CONTROL2_IMAGE_LODF                                   31:24


#define NV056_SET_TEXTURE_IMAGE_RECT(i)                            (0x00000240+(i)*4)
#define NV056_SET_TEXTURE_IMAGE_RECT_WIDTH                                      31:16
#define NV056_SET_TEXTURE_IMAGE_RECT_HEIGHT                                      15:0


#define NV056_SET_TEXTURE_FILTER(i)                                (0x00000248+(i)*4)
#define NV056_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                   23:0
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN                                     27:24
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                        0x00000001
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                         0x00000002
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                     0x00000003
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                      0x00000004
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST               0x00000005
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR                0x00000006
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG                                     31:28
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                        0x00000001
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                         0x00000002


#define NV056_SET_TEXTURE_PALETTE(i)                               (0x00000250+(i)*4)
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA                                     5:0
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                            0x00000000
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                            0x00000001
#define NV056_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                 31:6


#define NV056_SET_COMBINER_ALPHA_ICW(i)                            (0x00000260+(i)*4)
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP                                      31:29
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA                                    28:28
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE                                   27:24
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP                                      23:21
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA                                    20:20
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE                                   19:16
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP                                      15:13
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA                                    12:12
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE                                    11:8
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP                                        7:5
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA                                      4:4
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE                                     3:0
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV056_SET_COMBINER_COLOR_ICW(i)                            (0x00000268+(i)*4)
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP                                      31:29
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA                                    28:28
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE                                   27:24
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP                                      23:21
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA                                    20:20
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE                                   19:16
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP                                      15:13
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA                                    12:12
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE                                    11:8
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP                                        7:5
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA                                      4:4
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE                                     3:0
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV056_SET_COMBINE_FACTOR(i)                                (0x00000270+(i)*4)
#define NV056_SET_COMBINE_FACTOR_BLUE                                             7:0
#define NV056_SET_COMBINE_FACTOR_GREEN                                           15:8
#define NV056_SET_COMBINE_FACTOR_RED                                            23:16
#define NV056_SET_COMBINE_FACTOR_ALPHA                                          31:24


#define NV056_SET_COMBINER_ALPHA_OCW(i)                            (0x00000278+(i)*4)
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION                                  31:15
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                     0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                0x00000001
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                0x00000002
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS           0x00000003
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1               0x00000006
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                 14:14
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                      0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                       0x00000001
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST                                     11:8
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST                                       7:4
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                          0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                          0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                          0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                          0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                          0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                          0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                          0x0000000D
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST                                       3:0
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                          0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                          0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                          0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                          0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                          0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                          0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                          0x0000000D


#define NV056_SET_COMBINER0_COLOR_OCW                                      0x00000280
#define NV056_SET_COMBINER0_COLOR_OCW_ZERO                                      31:27
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION                                 26:15
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                                14:14
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST                                    11:8
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST                                      7:4
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST                                      3:0
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV056_SET_COMBINER1_COLOR_OCW                                      0x00000284
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                           31:28
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                  0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                  0x00000002
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT                                27:27
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                       0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                       0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION                                 26:15
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                                14:14
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST                                    11:8
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST                                      7:4
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST                                      3:0
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV056_SET_COMBINER_SPECULAR_FOG_CW0                                0x00000288
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                           31:29
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                             28:28
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                            27:24
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                           23:21
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                             20:20
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                            19:16
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                           15:13
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                             12:12
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                             11:8
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                             7:5
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                               4:4
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                              3:0
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD           0x0000000F


#define NV056_SET_COMBINER_SPECULAR_FOG_CW1                                0x0000028c
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                           31:29
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                             28:28
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                            27:24
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                           23:21
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                             20:20
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                            19:16
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                           15:13
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                             12:12
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                             11:8
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                        7:7
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE           0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE            0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                6:6
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE   0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE    0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12               5:0
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE   0x00000020


#define NV056_SET_CONTROL0                                                 0x00000290
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA                                   31:24
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                        0x00000000
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                         0x00000001
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE                                   23:20
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                        0x00000000
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                         0x00000001
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                 19:16
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                      0x00000000
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                       0x00000001
#define NV056_SET_CONTROL0_Z_FORMAT                                             15:12
#define NV056_SET_CONTROL0_Z_FORMAT_FIXED                                  0x00000000
#define NV056_SET_CONTROL0_Z_FORMAT_FLOAT                                  0x00000001
#define NV056_SET_CONTROL0_WBUFFER_SELECT                                        11:8
#define NV056_SET_CONTROL0_WBUFFER_SELECT_0                                0x00000000
#define NV056_SET_CONTROL0_WBUFFER_SELECT_1                                0x00000001
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE                                   7:0
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                       0x00000001


#define NV056_SET_LIGHT_CONTROL                                            0x00000294
#define NV056_SET_LIGHT_CONTROL_LOCALEYE                                        31:16
#define NV056_SET_LIGHT_CONTROL_LOCALEYE_FALSE                             0x00000000
#define NV056_SET_LIGHT_CONTROL_LOCALEYE_TRUE                              0x00000001
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE                                 15:2
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                    0x00000000
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT                0x00000001
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                              1:1
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                 0x00000000
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                  0x00000001
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                                0:0
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                   0x00000000
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                    0x00000001


#define NV056_SET_COLOR_MATERIAL                                           0x00000298
#define NV056_SET_COLOR_MATERIAL_V                                               31:0
#define NV056_SET_COLOR_MATERIAL_V_DISABLED                                0x00000000
#define NV056_SET_COLOR_MATERIAL_V_EMISSION                                0x00000001
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT                                 0x00000002
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                        0x00000003
#define NV056_SET_COLOR_MATERIAL_V_DIFFUSE                                 0x00000004
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                        0x00000005
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                         0x00000006
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE                0x00000007
#define NV056_SET_COLOR_MATERIAL_V_SPECULAR                                0x00000008
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                       0x00000009
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                        0x0000000A
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR               0x0000000B
#define NV056_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                        0x0000000C
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR               0x0000000D
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR                0x0000000E
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR       0x0000000F


#define NV056_SET_FOG_MODE                                                 0x0000029c
#define NV056_SET_FOG_MODE_FOG_MODE                                              31:0
#define NV056_SET_FOG_MODE_FOG_MODE_LINEAR                                 0x00002601
#define NV056_SET_FOG_MODE_FOG_MODE_EXP                                    0x00000800
#define NV056_SET_FOG_MODE_FOG_MODE_EXP2                                   0x00000801
#define NV056_SET_FOG_MODE_FOG_MODE_EXP_ABS                                0x00000802
#define NV056_SET_FOG_MODE_FOG_MODE_EXP2_ABS                               0x00000803


#define NV056_SET_FOG_GEN_MODE                                             0x000002a0
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE                                      31:0
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                      0x00000000
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                         0x00000001
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                         0x00000002
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                     0x00000003


#define NV056_SET_FOG_ENABLE                                               0x000002a4
#define NV056_SET_FOG_ENABLE_V                                                   31:0
#define NV056_SET_FOG_ENABLE_V_FALSE                                       0x00000000
#define NV056_SET_FOG_ENABLE_V_TRUE                                        0x00000001


#define NV056_SET_FOG_COLOR                                               0x000002a8
#define NV056_SET_FOG_COLOR_FOG_COLOR_RED                                        7:0
#define NV056_SET_FOG_COLOR_FOG_COLOR_GREEN                                     15:8
#define NV056_SET_FOG_COLOR_FOG_COLOR_BLUE                                     23:16
#define NV056_SET_FOG_COLOR_FOG_COLOR_ALPHA                                    31:24


#define NV056_SET_COLOR_KEY_COLOR(i)                               (0x000002ac+(i)*4)
#define NV056_SET_COLOR_KEY_COLOR_V                                              31:0


#define NV056_SET_WINDOW_CLIP_TYPE                                         0x000002b4
#define NV056_SET_WINDOW_CLIP_TYPE_V                                             31:0
#define NV056_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                             0x00000000
#define NV056_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                             0x00000001


#define NV056_SET_WINDOW_CLIP_HORIZONTAL(i)                        (0x000002c0+(i)*4)
#define NV056_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                    15:0
#define NV056_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                   31:16


#define NV056_SET_WINDOW_CLIP_VERTICAL(i)                          (0x000002e0+(i)*4)
#define NV056_SET_WINDOW_CLIP_VERTICAL_YMIN                                      15:0
#define NV056_SET_WINDOW_CLIP_VERTICAL_YMAX                                     31:16


#define NV056_SET_ALPHA_TEST_ENABLE                                        0x00000300
#define NV056_SET_ALPHA_TEST_ENABLE_V                                            31:0
#define NV056_SET_ALPHA_TEST_ENABLE_V_FALSE                                0x00000000
#define NV056_SET_ALPHA_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV056_SET_BLEND_ENABLE                                             0x00000304
#define NV056_SET_BLEND_ENABLE_V                                                 31:0
#define NV056_SET_BLEND_ENABLE_V_FALSE                                     0x00000000
#define NV056_SET_BLEND_ENABLE_V_TRUE                                      0x00000001


#define NV056_SET_CULL_FACE_ENABLE                                         0x00000308
#define NV056_SET_CULL_FACE_ENABLE_V                                             31:0
#define NV056_SET_CULL_FACE_ENABLE_V_FALSE                                 0x00000000
#define NV056_SET_CULL_FACE_ENABLE_V_TRUE                                  0x00000001


#define NV056_SET_DEPTH_TEST_ENABLE                                        0x0000030c
#define NV056_SET_DEPTH_TEST_ENABLE_V                                            31:0
#define NV056_SET_DEPTH_TEST_ENABLE_V_FALSE                                0x00000000
#define NV056_SET_DEPTH_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV056_SET_DITHER_ENABLE                                            0x00000310
#define NV056_SET_DITHER_ENABLE_V                                                31:0
#define NV056_SET_DITHER_ENABLE_V_FALSE                                    0x00000000
#define NV056_SET_DITHER_ENABLE_V_TRUE                                     0x00000001


#define NV056_SET_LIGHTING_ENABLE                                          0x00000314
#define NV056_SET_LIGHTING_ENABLE_V                                              31:0
#define NV056_SET_LIGHTING_ENABLE_V_FALSE                                  0x00000000
#define NV056_SET_LIGHTING_ENABLE_V_TRUE                                   0x00000001


#define NV056_SET_POINT_PARAMS_ENABLE                                      0x00000318
#define NV056_SET_POINT_PARAMS_ENABLE_V                                          31:0
#define NV056_SET_POINT_PARAMS_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_POINT_PARAMS_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_POINT_SMOOTH_ENABLE                                      0x0000031c
#define NV056_SET_POINT_SMOOTH_ENABLE_V                                          31:0
#define NV056_SET_POINT_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_POINT_SMOOTH_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_LINE_SMOOTH_ENABLE                                       0x00000320
#define NV056_SET_LINE_SMOOTH_ENABLE_V                                           31:0
#define NV056_SET_LINE_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV056_SET_LINE_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV056_SET_POLY_SMOOTH_ENABLE                                       0x00000324
#define NV056_SET_POLY_SMOOTH_ENABLE_V                                           31:0
#define NV056_SET_POLY_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV056_SET_POLY_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV056_SET_SKIN_ENABLE                                              0x00000328
#define NV056_SET_SKIN_ENABLE_V                                                  31:0
#define NV056_SET_SKIN_ENABLE_V_FALSE                                      0x00000000
#define NV056_SET_SKIN_ENABLE_V_TRUE                                       0x00000001


#define NV056_SET_STENCIL_TEST_ENABLE                                      0x0000032c
#define NV056_SET_STENCIL_TEST_ENABLE_V                                          31:0
#define NV056_SET_STENCIL_TEST_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_STENCIL_TEST_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_POLY_OFFSET_POINT_ENABLE                                 0x00000330
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V                                     31:0
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                         0x00000000
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                          0x00000001


#define NV056_SET_POLY_OFFSET_LINE_ENABLE                                  0x00000334
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V                                      31:0
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                          0x00000000
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                           0x00000001


#define NV056_SET_POLY_OFFSET_FILL_ENABLE                                  0x00000338
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V                                      31:0
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                          0x00000000
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                           0x00000001


#define NV056_SET_ALPHA_FUNC                                               0x0000033c
#define NV056_SET_ALPHA_FUNC_V                                                   31:0
#define NV056_SET_ALPHA_FUNC_V_NEVER                                       0x00000200
#define NV056_SET_ALPHA_FUNC_V_LESS                                        0x00000201
#define NV056_SET_ALPHA_FUNC_V_EQUAL                                       0x00000202
#define NV056_SET_ALPHA_FUNC_V_LEQUAL                                      0x00000203
#define NV056_SET_ALPHA_FUNC_V_GREATER                                     0x00000204
#define NV056_SET_ALPHA_FUNC_V_NOTEQUAL                                    0x00000205
#define NV056_SET_ALPHA_FUNC_V_GEQUAL                                      0x00000206
#define NV056_SET_ALPHA_FUNC_V_ALWAYS                                      0x00000207


#define NV056_SET_ALPHA_REF                                                0x00000340


#define NV056_SET_BLEND_FUNC_SFACTOR                                       0x00000344
#define NV056_SET_BLEND_FUNC_SFACTOR_V                                           31:0
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ZERO                                0x00000000
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE                                 0x00000001
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                           0x00000300
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                           0x00000302
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV056_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                           0x00000304
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV056_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                           0x00000306
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                  0x00000308
#define NV056_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV056_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV056_SET_BLEND_FUNC_DFACTOR                                       0x00000348
#define NV056_SET_BLEND_FUNC_DFACTOR_V                                           31:0
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ZERO                                0x00000000
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE                                 0x00000001
#define NV056_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                           0x00000300
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV056_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                           0x00000302
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV056_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                           0x00000304
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV056_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                           0x00000306
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV056_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV056_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV056_SET_BLEND_COLOR                                              0x0000034c
#define NV056_SET_BLEND_COLOR_V                                                  31:0


#define NV056_SET_BLEND_EQUATION                                           0x00000350
#define NV056_SET_BLEND_EQUATION_V                                               31:0
#define NV056_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                           0x0000800A
#define NV056_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                   0x0000800B
#define NV056_SET_BLEND_EQUATION_V_FUNC_ADD                                0x00008006
#define NV056_SET_BLEND_EQUATION_V_MIN                                     0x00008007
#define NV056_SET_BLEND_EQUATION_V_MAX                                     0x00008008


#define NV056_SET_DEPTH_FUNC                                               0x00000354
#define NV056_SET_DEPTH_FUNC_V                                                   31:0
#define NV056_SET_DEPTH_FUNC_V_NEVER                                       0x00000200
#define NV056_SET_DEPTH_FUNC_V_LESS                                        0x00000201
#define NV056_SET_DEPTH_FUNC_V_EQUAL                                       0x00000202
#define NV056_SET_DEPTH_FUNC_V_LEQUAL                                      0x00000203
#define NV056_SET_DEPTH_FUNC_V_GREATER                                     0x00000204
#define NV056_SET_DEPTH_FUNC_V_NOTEQUAL                                    0x00000205
#define NV056_SET_DEPTH_FUNC_V_GEQUAL                                      0x00000206
#define NV056_SET_DEPTH_FUNC_V_ALWAYS                                      0x00000207


#define NV056_SET_COLOR_MASK                                               0x00000358
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                 31:24
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                       0x00000001
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE                                   23:16
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                        0x00000000
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                         0x00000001
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                  15:8
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                       0x00000001
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                    7:0
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                       0x00000000
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                        0x00000001


#define NV056_SET_DEPTH_MASK                                               0x0000035c
#define NV056_SET_DEPTH_MASK_V                                                   31:0
#define NV056_SET_DEPTH_MASK_V_FALSE                                       0x00000000
#define NV056_SET_DEPTH_MASK_V_TRUE                                        0x00000001


#define NV056_SET_STENCIL_MASK                                             0x00000360
#define NV056_SET_STENCIL_MASK_V                                                 31:0


#define NV056_SET_STENCIL_FUNC                                             0x00000364
#define NV056_SET_STENCIL_FUNC_V                                                 31:0
#define NV056_SET_STENCIL_FUNC_V_NEVER                                     0x00000200
#define NV056_SET_STENCIL_FUNC_V_LESS                                      0x00000201
#define NV056_SET_STENCIL_FUNC_V_EQUAL                                     0x00000202
#define NV056_SET_STENCIL_FUNC_V_LEQUAL                                    0x00000203
#define NV056_SET_STENCIL_FUNC_V_GREATER                                   0x00000204
#define NV056_SET_STENCIL_FUNC_V_NOTEQUAL                                  0x00000205
#define NV056_SET_STENCIL_FUNC_V_GEQUAL                                    0x00000206
#define NV056_SET_STENCIL_FUNC_V_ALWAYS                                    0x00000207


#define NV056_SET_STENCIL_FUNC_REF                                         0x00000368
#define NV056_SET_STENCIL_FUNC_REF_V                                             31:0


#define NV056_SET_STENCIL_FUNC_MASK                                        0x0000036c
#define NV056_SET_STENCIL_FUNC_MASK_V                                            31:0


#define NV056_SET_STENCIL_OP_FAIL                                          0x00000370
#define NV056_SET_STENCIL_OP_FAIL_V                                              31:0
#define NV056_SET_STENCIL_OP_FAIL_V_KEEP                                   0x00001E00
#define NV056_SET_STENCIL_OP_FAIL_V_ZERO                                   0x00000000
#define NV056_SET_STENCIL_OP_FAIL_V_REPLACE                                0x00001E01
#define NV056_SET_STENCIL_OP_FAIL_V_INCRSAT                                0x00001E02
#define NV056_SET_STENCIL_OP_FAIL_V_DECRSAT                                0x00001E03
#define NV056_SET_STENCIL_OP_FAIL_V_INVERT                                 0x0000150A
#define NV056_SET_STENCIL_OP_FAIL_V_INCR                                   0x00008507
#define NV056_SET_STENCIL_OP_FAIL_V_DECR                                   0x00008508


#define NV056_SET_STENCIL_OP_ZFAIL                                         0x00000374
#define NV056_SET_STENCIL_OP_ZFAIL_V                                             31:0
#define NV056_SET_STENCIL_OP_ZFAIL_V_KEEP                                  0x00001E00
#define NV056_SET_STENCIL_OP_ZFAIL_V_ZERO                                  0x00000000
#define NV056_SET_STENCIL_OP_ZFAIL_V_REPLACE                               0x00001E01
#define NV056_SET_STENCIL_OP_ZFAIL_V_INCRSAT                               0x00001E02
#define NV056_SET_STENCIL_OP_ZFAIL_V_DECRSAT                               0x00001E03
#define NV056_SET_STENCIL_OP_ZFAIL_V_INVERT                                0x0000150A
#define NV056_SET_STENCIL_OP_ZFAIL_V_INCR                                  0x00008507
#define NV056_SET_STENCIL_OP_ZFAIL_V_DECR                                  0x00008508


#define NV056_SET_STENCIL_OP_ZPASS                                         0x00000378
#define NV056_SET_STENCIL_OP_ZPASS_V                                             31:0
#define NV056_SET_STENCIL_OP_ZPASS_V_KEEP                                  0x00001E00
#define NV056_SET_STENCIL_OP_ZPASS_V_ZERO                                  0x00000000
#define NV056_SET_STENCIL_OP_ZPASS_V_REPLACE                               0x00001E01
#define NV056_SET_STENCIL_OP_ZPASS_V_INCRSAT                               0x00001E02
#define NV056_SET_STENCIL_OP_ZPASS_V_DECRSAT                               0x00001E03
#define NV056_SET_STENCIL_OP_ZPASS_V_INVERT                                0x0000150A
#define NV056_SET_STENCIL_OP_ZPASS_V_INCR                                  0x00008507
#define NV056_SET_STENCIL_OP_ZPASS_V_DECR                                  0x00008508


#define NV056_SET_SHADE_MODE                                               0x0000037c
#define NV056_SET_SHADE_MODE_V                                                   31:0
#define NV056_SET_SHADE_MODE_V_FLAT                                        0x00001D00
#define NV056_SET_SHADE_MODE_V_SMOOTH                                      0x00001D01


#define NV056_SET_LINE_WIDTH                                               0x00000380
#define NV056_SET_LINE_WIDTH_V                                                   31:0


#define NV056_SET_POLYGON_OFFSET_SCALE_FACTOR                              0x00000384
#define NV056_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                  31:0


#define NV056_SET_POLYGON_OFFSET_BIAS                                      0x00000388
#define NV056_SET_POLYGON_OFFSET_BIAS_V                                          31:0


#define NV056_SET_FRONT_POLYGON_MODE                                       0x0000038c
#define NV056_SET_FRONT_POLYGON_MODE_V                                           31:0
#define NV056_SET_FRONT_POLYGON_MODE_V_POINT                               0x00001B00
#define NV056_SET_FRONT_POLYGON_MODE_V_LINE                                0x00001B01
#define NV056_SET_FRONT_POLYGON_MODE_V_FILL                                0x00001B02


#define NV056_SET_BACK_POLYGON_MODE                                        0x00000390
#define NV056_SET_BACK_POLYGON_MODE_V                                            31:0
#define NV056_SET_BACK_POLYGON_MODE_V_POINT                                0x00001B00
#define NV056_SET_BACK_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV056_SET_BACK_POLYGON_MODE_V_FILL                                 0x00001B02


#define NV056_SET_CLIP_MIN                                                 0x00000394
#define NV056_SET_CLIP_MIN_V                                                     31:0


#define NV056_SET_CLIP_MAX                                                 0x00000398
#define NV056_SET_CLIP_MAX_V                                                     31:0


#define NV056_SET_CULL_FACE                                                0x0000039c
#define NV056_SET_CULL_FACE_V                                                    31:0
#define NV056_SET_CULL_FACE_V_FRONT                                        0x00000404
#define NV056_SET_CULL_FACE_V_BACK                                         0x00000405
#define NV056_SET_CULL_FACE_V_FRONT_AND_BACK                               0x00000408


#define NV056_SET_FRONT_FACE                                               0x000003a0
#define NV056_SET_FRONT_FACE_V                                                   31:0
#define NV056_SET_FRONT_FACE_V_CW                                          0x00000900
#define NV056_SET_FRONT_FACE_V_CCW                                         0x00000901


#define NV056_SET_NORMALIZATION_ENABLE                                     0x000003a4
#define NV056_SET_NORMALIZATION_ENABLE_V                                         31:0
#define NV056_SET_NORMALIZATION_ENABLE_V_FALSE                             0x00000000
#define NV056_SET_NORMALIZATION_ENABLE_V_TRUE                              0x00000001


#define NV056_SET_MATERIAL_EMISSION(i)                             (0x000003a8+(i)*4)


#define NV056_SET_MATERIAL_ALPHA                                           0x000003b4


#define NV056_SET_SPECULAR_ENABLE                                          0x000003b8
#define NV056_SET_SPECULAR_ENABLE_V                                              31:0
#define NV056_SET_SPECULAR_ENABLE_V_FALSE                                  0x00000000
#define NV056_SET_SPECULAR_ENABLE_V_TRUE                                   0x00000001


#define NV056_SET_LIGHT_ENABLE_MASK                                        0x000003bc
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0                                        1:0
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1                                        3:2
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2                                        5:4
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3                                        7:6
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4                                        9:8
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5                                      11:10
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6                                      13:12
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7                                      15:14
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                            0x00000003


#define NV056_SET_TEXGEN_S(i)                                     (0x000003c0+(i)*16)
#define NV056_SET_TEXGEN_S_V                                                     31:0
#define NV056_SET_TEXGEN_S_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_S_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_S_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_S_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_S_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_S_V_SPHERE_MAP                                    0x00002402
#define NV056_SET_TEXGEN_S_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_T(i)                                     (0x000003c4+(i)*16)
#define NV056_SET_TEXGEN_T_V                                                     31:0
#define NV056_SET_TEXGEN_T_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_T_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_T_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_T_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_T_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_T_V_SPHERE_MAP                                    0x00002402
#define NV056_SET_TEXGEN_T_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_R(i)                                     (0x000003c8+(i)*16)
#define NV056_SET_TEXGEN_R_V                                                     31:0
#define NV056_SET_TEXGEN_R_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_R_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_R_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_R_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_R_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_R_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_Q(i)                                     (0x000003cc+(i)*16)
#define NV056_SET_TEXGEN_Q_V                                                     31:0
#define NV056_SET_TEXGEN_Q_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_Q_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_Q_V_OBJECT_LINEAR                                 0x00002401


#define NV056_SET_TEXTURE_MATRIX0_ENABLE                                   0x000003e0
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V                                       31:0
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                           0x00000000
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                            0x00000001


#define NV056_SET_TEXTURE_MATRIX1_ENABLE                                   0x000003e4
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V                                       31:0
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                           0x00000000
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                            0x00000001


#define NV056_SET_TLMODE                                                   0x000003e8
#define NV056_SET_TLMODE_PASSTHROUGH                                              0:0
#define NV056_SET_TLMODE_PASSTHROUGH_TRUE                                  0x00000001
#define NV056_SET_TLMODE_PASSTHROUGH_FALSE                                 0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_0                                               1:1
#define NV056_SET_TLMODE_W_DIVIDE_0_DISABLE                                0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_0_ENABLE                                 0x00000001
#define NV056_SET_TLMODE_W_DIVIDE_1                                               2:2
#define NV056_SET_TLMODE_W_DIVIDE_1_DISABLE                                0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_1_ENABLE                                 0x00000001


#define NV056_SET_POINT_SIZE                                               0x000003ec
#define NV056_SET_POINT_SIZE_V                                                   31:0


#define NV056_SET_SWATH_WIDTH                                              0x000003f0
#define NV056_SET_SWATH_WIDTH_V                                                  31:0
#define NV056_SET_SWATH_WIDTH_V_8                                          0x00000000
#define NV056_SET_SWATH_WIDTH_V_16                                         0x00000001
#define NV056_SET_SWATH_WIDTH_V_32                                         0x00000002
#define NV056_SET_SWATH_WIDTH_V_64                                         0x00000003


#define NV056_SET_FLAT_SHADE_OP                                            0x000003f4
#define NV056_SET_FLAT_SHADE_OP_V                                                31:0
#define NV056_SET_FLAT_SHADE_OP_V_LAST_VTX                                 0x00000000
#define NV056_SET_FLAT_SHADE_OP_V_FIRST_VTX                                0x00000001


#define NV056_SET_MODEL_VIEW_MATRIX0(i)                            (0x00000400+(i)*4)


#define NV056_SET_MODEL_VIEW_MATRIX1(i)                            (0x00000440+(i)*4)


#define NV056_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                    (0x00000480+(i)*4)


#define NV056_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                    (0x000004c0+(i)*4)


#define NV056_SET_COMPOSITE_MATRIX(i)                              (0x00000500+(i)*4)


#define NV056_SET_TEXTURE_MATRIX0(i)                               (0x00000540+(i)*4)


#define NV056_SET_TEXTURE_MATRIX1(i)                               (0x00000580+(i)*4)


#define NV056_SET_TEXGEN_SPLANE0(i)                                (0x00000600+(i)*4)


#define NV056_SET_TEXGEN_TPLANE0(i)                                (0x00000610+(i)*4)


#define NV056_SET_TEXGEN_RPLANE0(i)                                (0x00000620+(i)*4)


#define NV056_SET_TEXGEN_QPLANE0(i)                                (0x00000630+(i)*4)


#define NV056_SET_TEXGEN_SPLANE1(i)                                (0x00000640+(i)*4)


#define NV056_SET_TEXGEN_TPLANE1(i)                                (0x00000650+(i)*4)


#define NV056_SET_TEXGEN_RPLANE1(i)                                (0x00000660+(i)*4)


#define NV056_SET_TEXGEN_QPLANE1(i)                                (0x00000670+(i)*4)


#define NV056_SET_FOG_PARAMS(i)                                    (0x00000680+(i)*4)


#define NV056_SET_FOG_PLANE(i)                                     (0x0000068c+(i)*4)


#define NV056_SET_SPECULAR_PARAMS(i)                               (0x000006a0+(i)*4)


#define NV056_SET_SCENE_AMBIENT_COLOR(i)                           (0x000006c4+(i)*4)


#define NV056_SET_VIEWPORT_OFFSET(i)                               (0x000006e8+(i)*4)


#define NV056_SET_POINT_PARAMS(i)                                  (0x000006f8+(i)*4)


#define NV056_SET_EYE_POSITION(i)                                  (0x00000718+(i)*4)

#define NV056_SET_EYE_DIRECTION_SW(i)                              (0x0000072c+(i)*4)


#define NV056_SET_LIGHT_AMBIENT_COLOR(i,j)                 (0x00000800+(i)*128+(j)*4)


#define NV056_SET_LIGHT_DIFFUSE_COLOR(i,j)                 (0x0000080c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPECULAR_COLOR(i,j)                (0x00000818+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_RANGE(i)                           (0x00000824+(i)*128)


#define NV056_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)          (0x00000828+(i)*128+(j)*4)


#define NV056_SET_LIGHT_INFINITE_DIRECTION(i,j)            (0x00000834+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPOT_FALLOFF(i,j)                  (0x00000840+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPOT_DIRECTION(i,j)                (0x0000084c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_POSITION(i,j)                (0x0000085c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_ATTENUATION(i,j)             (0x00000868+(i)*128+(j)*4)


#define NV056_SET_VERTEX3F(i)                                      (0x00000c00+(i)*4)


#define NV056_SET_VERTEX4F(i)                                      (0x00000c18+(i)*4)


#define NV056_SET_VERTEX4S(i)                                      (0x00000c28+(i)*4)


#define NV056_SET_NORMAL3F(i)                                      (0x00000c30+(i)*4)


#define NV056_SET_NORMAL3S(i)                                      (0x00000c40+(i)*2)


#define NV056_SET_DIFFUSE_COLOR4F(i)                               (0x00000c50+(i)*4)


#define NV056_SET_DIFFUSE_COLOR3F(i)                               (0x00000c60+(i)*4)


#define NV056_SET_DIFFUSE_COLOR4UB                                         0x00000c6c


#define NV056_SET_SPECULAR_COLOR4F(i)                              (0x00000c70+(i)*4)


#define NV056_SET_SPECULAR_COLOR3F(i)                              (0x00000c80+(i)*4)


#define NV056_SET_SPECULAR_COLOR4UB                                        0x00000c8c


#define NV056_SET_TEXCOORD0_2F(i)                                  (0x00000c90+(i)*4)


#define NV056_SET_TEXCOORD0_2S(i)                                  (0x00000c98+(i)*2)


#define NV056_SET_TEXCOORD0_4F(i)                                  (0x00000ca0+(i)*4)


#define NV056_SET_TEXCOORD0_4S(i)                                  (0x00000cb0+(i)*2)


#define NV056_SET_TEXCOORD1_2F(i)                                  (0x00000cb8+(i)*4)


#define NV056_SET_TEXCOORD1_2S(i)                                  (0x00000cc0+(i)*2)


#define NV056_SET_TEXCOORD1_4F(i)                                  (0x00000cc8+(i)*4)


#define NV056_SET_TEXCOORD1_4S(i)                                  (0x00000cd8+(i)*2)


#define NV056_SET_FOG1F                                                    0x00000ce0


#define NV056_SET_WEIGHT1F                                                 0x00000ce4


#define NV056_SET_EDGE_FLAG                                                0x00000cec


#define NV056_INVALIDATE_VERTEX_CACHE_FILE                                 0x00000cf0


#define NV056_INVALIDATE_VERTEX_FILE                                       0x00000cf4


#define NV056_TL_NOP                                                       0x00000cf8


#define NV056_TL_SYNC                                                      0x00000cfc


#define NV056_SET_VERTEX_ARRAY_OFFSET                                      0x00000d00
#define NV056_SET_VERTEX_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_VERTEX_ARRAY_FORMAT                                      0x00000d04
#define NV056_SET_VERTEX_ARRAY_FORMAT_W                                         31:24
#define NV056_SET_VERTEX_ARRAY_FORMAT_W_NONE                               0x00000000
#define NV056_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                            0x00000001
#define NV056_SET_VERTEX_ARRAY_FORMAT_STRIDE                                     23:8
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_2                               0x00000002
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_4                               0x00000004
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_DIFFUSE_ARRAY_OFFSET                                     0x00000d08
#define NV056_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                    27:0


#define NV056_SET_DIFFUSE_ARRAY_FORMAT                                     0x00000d0c
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                    31:8
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                       7:4
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                       3:0
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA             0x00000000
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA             0x00000004


#define NV056_SET_SPECULAR_ARRAY_OFFSET                                    0x00000d10
#define NV056_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                   27:0


#define NV056_SET_SPECULAR_ARRAY_FORMAT                                    0x00000d14
#define NV056_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                   31:8
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE                                      7:4
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE                                      3:0
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004


#define NV056_SET_TEX_COORD0_ARRAY_OFFSET                                  0x00000d18
#define NV056_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                 27:0


#define NV056_SET_TEX_COORD0_ARRAY_FORMAT                                  0x00000d1c
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                 31:8
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                    7:4
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                    3:0
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV056_SET_TEX_COORD1_ARRAY_OFFSET                                  0x00000d20
#define NV056_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                 27:0


#define NV056_SET_TEX_COORD1_ARRAY_FORMAT                                  0x00000d24
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                 31:8
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                    7:4
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                    3:0
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV056_SET_NORMAL_ARRAY_OFFSET                                      0x00000d28
#define NV056_SET_NORMAL_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_NORMAL_ARRAY_FORMAT                                      0x00000d2c
#define NV056_SET_NORMAL_ARRAY_FORMAT_STRIDE                                     31:8
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_WEIGHT_ARRAY_OFFSET                                      0x00000d30
#define NV056_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_WEIGHT_ARRAY_FORMAT                                      0x00000d34
#define NV056_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                     31:8
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                               0x00000001
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_FOG_ARRAY_OFFSET                                         0x00000d38
#define NV056_SET_FOG_ARRAY_OFFSET_OFFSET                                        27:0


#define NV056_SET_FOG_ARRAY_FORMAT                                         0x00000d3c
#define NV056_SET_FOG_ARRAY_FORMAT_STRIDE                                        31:8
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE                                           7:4
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE_0                                  0x00000000
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE_1                                  0x00000001
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE                                           3:0
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                              0x00000001
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                              0x00000002


#define NV056_SET_BEGIN_END                                                0x00000dfc
#define NV056_SET_BEGIN_END_OP                                                   31:0
#define NV056_SET_BEGIN_END_OP_END                                         0x00000000
#define NV056_SET_BEGIN_END_OP_POINTS                                      0x00000001
#define NV056_SET_BEGIN_END_OP_LINES                                       0x00000002
#define NV056_SET_BEGIN_END_OP_LINE_LOOP                                   0x00000003
#define NV056_SET_BEGIN_END_OP_LINE_STRIP                                  0x00000004
#define NV056_SET_BEGIN_END_OP_TRIANGLES                                   0x00000005
#define NV056_SET_BEGIN_END_OP_TRIANGLE_STRIP                              0x00000006
#define NV056_SET_BEGIN_END_OP_TRIANGLE_FAN                                0x00000007
#define NV056_SET_BEGIN_END_OP_QUADS                                       0x00000008
#define NV056_SET_BEGIN_END_OP_QUAD_STRIP                                  0x00000009
#define NV056_SET_BEGIN_END_OP_POLYGON                                     0x0000000A


#define NV056_ARRAY_ELEMENT16(i)                                   (0x00000e00+(i)*2)


#define NV056_SET_BEGIN_END2                                               0x000010fc
#define NV056_SET_BEGIN_END2_OP                                                  31:0
#define NV056_SET_BEGIN_END2_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END2_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END2_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END2_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END2_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END2_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END2_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END2_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END2_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END2_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END2_OP_POLYGON                                    0x0000000A


#define NV056_ARRAY_ELEMENT32(i)                                   (0x00001100+(i)*4)


#define NV056_SET_BEGIN_END3                                               0x000013fc
#define NV056_SET_BEGIN_END3_OP                                                  31:0
#define NV056_SET_BEGIN_END3_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END3_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END3_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END3_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END3_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END3_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END3_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END3_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END3_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END3_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END3_OP_POLYGON                                    0x0000000A


#define NV056_DRAW_ARRAYS(i)                                       (0x00001400+(i)*4)
#define NV056_DRAW_ARRAYS_COUNT                                                 31:24
#define NV056_DRAW_ARRAYS_START_INDEX                                            23:0


/* These methods are accepted between a begin/end. */
#define NV056_SET_MATERIAL_EMISSION_SW(i)                          (0x00001628+(i)*4)
#define NV056_SET_VIEWPORT_OFFSET_SW(i)                            (0x00001638+(i)*4)
/* The PASSTHRU_VIEWPORT_OFFSET aliases to row 1 of the MODEL_VIEW_MATRIX1 */
#define NV056_SET_PASSTHRU_VIEWPORT_OFFSET_SW(i)                   (0x00001648+(i)*4)


#define NV056_SET_BEGIN_END4                                               0x000017fc
#define NV056_SET_BEGIN_END4_OP                                                  31:0
#define NV056_SET_BEGIN_END4_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END4_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END4_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END4_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END4_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END4_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END4_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END4_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END4_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END4_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END4_OP_POLYGON                                    0x0000000A


#define NV056_INLINE_ARRAY(i)                                      (0x00001800+(i)*4)


/* class NV04_CONTEXT_COLOR_KEY */
#define  NV04_CONTEXT_COLOR_KEY                                    (0x00000057)
/* NvNotification[] elements */
#define NV057_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV057_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV057_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV057_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV057_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV057_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV057_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV057_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV057_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetColor;                /* color key value                  0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv057Typedef, Nv04ContextColorKey;
#define NV057_TYPEDEF                                       Nv04ContextColorKey
/* dma method offsets, fields, and values */
#define NV057_SET_OBJECT                                           (0x00000000)
#define NV057_NO_OPERATION                                         (0x00000100)
#define NV057_NOTIFY                                               (0x00000104)
#define NV057_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV057_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV057_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV057_SET_COLOR_FORMAT                                     (0x00000300)
#define NV057_SET_COLOR_FORMAT_LE_A16R5G6B5                        (0x00000001)
#define NV057_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV057_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV057_SET_COLOR                                            (0x00000304)
/* obsolete stuff */
#define NV4_CONTEXT_COLOR_KEY                                      (0x00000057)
#define Nv4ContextColorKey                                  Nv04ContextColorKey
#define nv4ContextColorKey                                  Nv04ContextColorKey
#define nv04ContextColorKey                                 Nv04ContextColorKey


/* class NV03_CONTEXT_SURFACE_2D_DESTINATION */
#define  NV03_CONTEXT_SURFACE_2D_DESTINATION                       (0x00000058)
/* NvNotification[] elements */
#define NV058_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV058_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV058_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV058_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV058_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV058_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV058_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV058_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV058_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv058Typedef, Nv03ContextSurface2dDestination;
#define NV058_TYPEDEF                           Nv03ContextSurface2dDestination
/* dma method offsets, fields, and values */
#define NV058_SET_OBJECT                                           (0x00000000)
#define NV058_NO_OPERATION                                         (0x00000100)
#define NV058_NOTIFY                                               (0x00000104)
#define NV058_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV058_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV058_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV058_SET_COLOR_FORMAT                                     (0x00000300)
#define NV058_SET_COLOR_FORMAT_LE_Y8                               (0x01010000)
#define NV058_SET_COLOR_FORMAT_LE_Y16                              (0x01010001)
#define NV058_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x01000000)
#define NV058_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000001)
#define NV058_SET_IMAGE_PITCH                                      (0x00000308)
#define NV058_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_0                                     (0x00000058)
#define NV3_CONTEXT_SURFACE_0                                      (0x00000058)
#define Nv03ContextSurface0                     Nv03ContextSurface2dDestination
#define nv03ContextSurface0                     Nv03ContextSurface2dDestination
#define Nv3ContextSurface0                      Nv03ContextSurface2dDestination
#define nv3ContextSurface0                      Nv03ContextSurface2dDestination
#define nv03ContextSurface2dDestination         Nv03ContextSurface2dDestination


/* class NV03_CONTEXT_SURFACE_2D_SOURCE */
#define  NV03_CONTEXT_SURFACE_2D_SOURCE                            (0x00000059)
/* NvNotification[] elements */
#define NV059_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV059_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV059_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV059_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV059_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV059_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV059_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV059_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV059_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv059Typedef, Nv03ContextSurface2dSource;
#define NV059_TYPEDEF                                Nv03ContextSurface2dSource
/* dma method offsets, fields, and values */
#define NV059_SET_OBJECT                                           (0x00000000)
#define NV059_NO_OPERATION                                         (0x00000100)
#define NV059_NOTIFY                                               (0x00000104)
#define NV059_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV059_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV059_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV059_SET_COLOR_FORMAT                                     (0x00000300)
#define NV059_SET_COLOR_FORMAT_LE_Y8                               (0x01010000)
#define NV059_SET_COLOR_FORMAT_LE_Y16                              (0x01010001)
#define NV059_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x01000000)
#define NV059_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000001)
#define NV059_SET_IMAGE_PITCH                                      (0x00000308)
#define NV059_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_1                                     (0x00000059)
#define NV3_CONTEXT_SURFACE_1                                      (0x00000059)
#define Nv03ContextSurface1                          Nv03ContextSurface2dSource
#define nv03ContextSurface1                          Nv03ContextSurface2dSource
#define Nv3ContextSurface1                           Nv03ContextSurface2dSource
#define nv3ContextSurface1                           Nv03ContextSurface2dSource
#define nv03ContextSurface2dSource                   Nv03ContextSurface2dSource


/* class NV03_CONTEXT_SURFACE_3D_COLOR */
#define  NV03_CONTEXT_SURFACE_3D_COLOR                             (0x0000005A)
/* NvNotification[] elements */
#define NV05A_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV05A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv05aTypedef, Nv03ContextSurface3dColor;
#define NV05A_TYPEDEF                                 Nv03ContextSurface3dColor
/* dma method offsets, fields, and values */
#define NV05A_SET_OBJECT                                           (0x00000000)
#define NV05A_NO_OPERATION                                         (0x00000100)
#define NV05A_NOTIFY                                               (0x00000104)
#define NV05A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV05A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05A_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV05A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05A_SET_COLOR_FORMAT_DUMMY_0                             (0x01010000)
#define NV05A_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5_1              (0x01010001)
#define NV05A_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5_2              (0x01000000)
#define NV05A_SET_COLOR_FORMAT_DUMMY_3                             (0x00000001)
#define NV05A_SET_IMAGE_PITCH                                      (0x00000308)
#define NV05A_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_2                                     (0x0000005A)
#define NV3_CONTEXT_SURFACE_2                                      (0x0000005A)
#define Nv03ContextSurface2                           Nv03ContextSurface3dColor
#define nv03ContextSurface2                           Nv03ContextSurface3dColor
#define Nv3ContextSurface2                            Nv03ContextSurface3dColor
#define nv3ContextSurface2                            Nv03ContextSurface3dColor
#define nv03ContextSurface3dColor                     Nv03ContextSurface3dColor


/* class NV03_CONTEXT_SURFACE_3D_DEPTH */
#define  NV03_CONTEXT_SURFACE_3D_DEPTH                             (0x0000005B)
/* NvNotification[] elements */
#define NV05B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05B_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV05B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 NvDummy;                   /* ignored                          0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv05bTypedef, Nv03ContextSurface3dDepth;
#define NV05B_TYPEDEF                                 Nv03ContextSurface3dDepth
/* dma method offsets, fields, and values */
#define NV05B_SET_OBJECT                                           (0x00000000)
#define NV05B_NO_OPERATION                                         (0x00000100)
#define NV05B_NOTIFY                                               (0x00000104)
#define NV05B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV05B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05B_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV05B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05B_SET_COLOR_FORMAT_LE_W16_0                            (0x01010000)
#define NV05B_SET_COLOR_FORMAT_LE_W16_1                            (0x01010001)
#define NV05B_SET_COLOR_FORMAT_LE_W16_2                            (0x01000000)
#define NV05B_SET_COLOR_FORMAT_LE_W16_3                            (0x00000001)
#define NV05B_DUMMY                                                (0x00000308)
#define NV05B_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_3                                     (0x0000005B)
#define NV3_CONTEXT_SURFACE_3                                      (0x0000005B)
#define Nv03ContextSurface3                           Nv03ContextSurface3dDepth
#define nv03ContextSurface3                           Nv03ContextSurface3dDepth
#define Nv3ContextSurface3                            Nv03ContextSurface3dDepth
#define nv3ContextSurface3                            Nv03ContextSurface3dDepth
#define nv03ContextSurface3dDepth                     Nv03ContextSurface3dDepth


/* class NV04_RENDER_SOLID_LIN */
#define  NV04_RENDER_SOLID_LIN                                     (0x0000005C)
/* NvNotification[] elements */
#define NV05C_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05C_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05C_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05C_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point0;                 /* y_x S16_S16 in pixels            0400-0403*/
  NvV32 point1;                 /* y_x S16_S16 in pixels            0404-0407*/
 } Lin[16];                     /* end of aliased methods in array      -047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 point0X;                /* in pixels, 0 at left                0-   3*/
  NvS32 point0Y;                /* in pixels, 0 at top                 4-   7*/
  NvS32 point1X;                /* in pixels, 0 at left                8-   b*/
  NvS32 point1Y;                /* in pixels, 0 at top                 c-   f*/
 } Lin32[8];                    /* end of aliased methods in array      -04ff*/
 NvV32 PolyLin[32];             /* y_x S16_S16 in pixels            0500-057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } PolyLin32[16];               /* end of aliased methods in array      -05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorPolyLin[16];            /* end of aliased methods in array      -067f*/
 NvV32 Reserved03[0x660];
} Nv05cTypedef, Nv04RenderSolidLin;
#define NV05C_TYPEDEF                                        Nv04RenderSolidLin
/* dma method offsets, fields, and values */
#define NV05C_SET_OBJECT                                           (0x00000000)
#define NV05C_NO_OPERATION                                         (0x00000100)
#define NV05C_NOTIFY                                               (0x00000104)
#define NV05C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05C_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05C_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05C_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05C_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05C_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05C_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05C_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05C_SET_OPERATION                                        (0x000002FC)
#define NV05C_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05C_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05C_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05C_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05C_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05C_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05C_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05C_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05C_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05C_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05C_COLOR                                                (0x00000304)
#define NV05C_LIN(a)                                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT0(a)                                        (0x00000400\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT0_X                                         15:0
#define NV05C_LIN_POINT0_Y                                         31:16
#define NV05C_LIN_POINT1(a)                                        (0x00000404\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT1_X                                         15:0
#define NV05C_LIN_POINT1_Y                                         31:16
#define NV05C_LIN32(a)                                             (0x00000480\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT0_X(a)                                    (0x00000480\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT0_Y(a)                                    (0x00000484\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT1_X(a)                                    (0x00000488\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT1_Y(a)                                    (0x0000048C\
                                                                   +(a)*0x0010)
#define NV05C_POLY_LIN(a)                                          (0x00000500\
                                                                   +(a)*0x0004)
#define NV05C_POLY_LIN_X                                           15:0
#define NV05C_POLY_LIN_Y                                           31:16
#define NV05C_POLY_LIN32(a)                                        (0x00000580\
                                                                   +(a)*0x0008)
#define NV05C_POLY_LIN32_X(a)                                      (0x00000580\
                                                                   +(a)*0x0008)
#define NV05C_POLY_LIN32_Y(a)                                      (0x00000584\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN(a)                                    (0x00000600\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_COLOR(a)                              (0x00000600\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_POINT(a)                              (0x00000604\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_POINT_X                               15:0
#define NV05C_COLOR_POLY_LIN_POINT_Y                               31:16
/* obsolete stuff */
#define NV4_RENDER_SOLID_LIN                                       (0x0000005C)
#define Nv4RenderSolidLin                                    Nv04RenderSolidLin
#define nv4RenderSolidLin                                    Nv04RenderSolidLin
#define nv04RenderSolidLin                                   Nv04RenderSolidLin


/* class NV04_RENDER_SOLID_TRIANGLE */
#define  NV04_RENDER_SOLID_TRIANGLE                                (0x0000005D)
/* NvNotification[] elements */
#define NV05D_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05D_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05D_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05D_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x002];
 NvV32 TrianglePoint0;          /* y_x S16_S16 in pixels            0310-0313*/
 NvV32 TrianglePoint1;          /* y_x S16_S16 in pixels            0314-0317*/
 NvV32 TrianglePoint2;          /* y_x S16_S16 in pixels            0318-031b*/
 NvV32 Reserved03[0x001];
 NvS32 Triangle32Point0X;       /* in pixels, 0 at left             0320-0323*/
 NvS32 Triangle32Point0Y;       /* in pixels, 0 at top              0324-0327*/
 NvS32 Triangle32Point1X;       /* in pixels, 0 at left             0328-032b*/
 NvS32 Triangle32Point1Y;       /* in pixels, 0 at top              032c-032f*/
 NvS32 Triangle32Point2X;       /* in pixels, 0 at left             0330-0333*/
 NvS32 Triangle32Point2Y;       /* in pixels, 0 at top              0334-0337*/
 NvV32 Reserved04[0x032];
 NvV32 Trimesh[32];             /* y_x S16_S16 in pixels            0400-047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } Trimesh32[16];               /* end of aliased methods in array      -04ff*/
 struct {                       /* start aliased methods in array   0500-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point0;                 /* y_x S16_S16 in pixels               4-   7*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               8-   b*/
  NvV32 point2;                 /* y_x S16_S16 in pixels               c-   f*/
 } ColorTriangle[8];            /* end of aliased methods in array      -057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorTrimesh[16];            /* end of aliased methods in array      -05ff*/
 NvV32 Reserved05[0x680];
} Nv05dTypedef, Nv04RenderSolidTriangle;
#define NV05D_TYPEDEF                                   Nv04RenderSolidTriangle
/* dma method offsets, fields, and values */
#define NV05D_SET_OBJECT                                           (0x00000000)
#define NV05D_NO_OPERATION                                         (0x00000100)
#define NV05D_NOTIFY                                               (0x00000104)
#define NV05D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05D_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05D_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05D_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05D_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05D_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05D_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05D_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05D_SET_OPERATION                                        (0x000002FC)
#define NV05D_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05D_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05D_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05D_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05D_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05D_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05D_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05D_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05D_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05D_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05D_COLOR                                                (0x00000304)
#define NV05D_TRIANGLE                                             (0x00000310)
#define NV05D_TRIANGLE_POINT0                                      (0x00000310)
#define NV05D_TRIANGLE_POINT0_X                                    15:0
#define NV05D_TRIANGLE_POINT0_Y                                    31:16
#define NV05D_TRIANGLE_POINT1                                      (0x00000314)
#define NV05D_TRIANGLE_POINT1_X                                    15:0
#define NV05D_TRIANGLE_POINT1_Y                                    31:16
#define NV05D_TRIANGLE_POINT2                                      (0x00000318)
#define NV05D_TRIANGLE_POINT2_X                                    15:0
#define NV05D_TRIANGLE_POINT2_Y                                    31:16
#define NV05D_TRIANGLE32_POINT0_X                                  (0x00000320)
#define NV05D_TRIANGLE32_POINT0_Y                                  (0x00000324)
#define NV05D_TRIANGLE32_POINT1_X                                  (0x00000328)
#define NV05D_TRIANGLE32_POINT1_Y                                  (0x0000032C)
#define NV05D_TRIANGLE32_POINT2_X                                  (0x00000330)
#define NV05D_TRIANGLE32_POINT2_Y                                  (0x00000334)
#define NV05D_TRIMESH(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
#define NV05D_TRIMESH_X                                            15:0
#define NV05D_TRIMESH_Y                                            31:16
#define NV05D_TRIMESH32(a)                                         (0x00000480\
                                                                   +(a)*0x0008)
#define NV05D_TRIMESH32_X(a)                                       (0x00000480\
                                                                   +(a)*0x0008)
#define NV05D_TRIMESH32_Y(a)                                       (0x00000484\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIANGLE(a)                                    (0x00000500\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_COLOR(a)                              (0x00000500\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT0(a)                             (0x00000504\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT0_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT0_Y                              31:16
#define NV05D_COLOR_TRIANGLE_POINT1(a)                             (0x00000508\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT1_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT1_Y                              31:16
#define NV05D_COLOR_TRIANGLE_POINT2(a)                             (0x0000050C\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT2_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT2_Y                              31:16
#define NV05D_COLOR_TRIMESH(a)                                     (0x00000580\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_COLOR(a)                               (0x00000580\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_POINT(a)                               (0x00000584\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_POINT_X                                15:0
#define NV05D_COLOR_TRIMESH_POINT_Y                                31:16
/* obsolete stuff */
#define NV4_RENDER_SOLID_TRIANGLE                                  (0x0000005D)
#define Nv4RenderSolidTriangle                          Nv04RenderSolidTriangle
#define nv4RenderSolidTriangle                          Nv04RenderSolidTriangle
#define nv04RenderSolidTriangle                         Nv04RenderSolidTriangle


/* class NV04_RENDER_SOLID_RECTANGLE */
#define  NV04_RENDER_SOLID_RECTANGLE                               (0x0000005E)
/* NvNotification[] elements */
#define NV05E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05E_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05E_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* y_x S16_S16                         0-   3*/
  NvV32 size;                   /* height_width U16_U16                4-   7*/
 } Rectangle[16];               /* end of aliased methods in array      -047f*/
 NvV32 Reserved03[0x6e0];
} Nv05eTypedef, Nv04RenderSolidRectangle;
#define NV05E_TYPEDEF                                  Nv04RenderSolidRectangle
/* dma method offsets, fields, and values */
#define NV05E_SET_OBJECT                                           (0x00000000)
#define NV05E_NO_OPERATION                                         (0x00000100)
#define NV05E_NOTIFY                                               (0x00000104)
#define NV05E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05E_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05E_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05E_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05E_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05E_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05E_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05E_SET_OPERATION                                        (0x000002FC)
#define NV05E_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05E_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05E_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05E_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05E_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05E_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05E_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05E_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05E_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05E_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05E_COLOR                                                (0x00000304)
#define NV05E_RECTANGLE(a)                                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_POINT(a)                                   (0x00000400\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_POINT_X                                    15:0
#define NV05E_RECTANGLE_POINT_Y                                    31:16
#define NV05E_RECTANGLE_SIZE(a)                                    (0x00000404\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_SIZE_WIDTH                                 15:0
#define NV05E_RECTANGLE_SIZE_HEIGHT                                31:16
/* obsolete stuff */
#define NV4_RENDER_SOLID_RECTANGLE                                 (0x0000005E)
#define Nv4RenderSolidRectangle                        Nv04RenderSolidRectangle
#define nv4RenderSolidRectangle                        Nv04RenderSolidRectangle
#define nv04RenderSolidRectangle                       Nv04RenderSolidRectangle


/* class NV04_IMAGE_BLIT */
#define  NV04_IMAGE_BLIT                                           (0x0000005F)
/* NvNotification[] elements */
#define NV05F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV05F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved02[0x73d];
} Nv05fTypedef, Nv04ImageBlit;
#define NV05F_TYPEDEF                                             Nv04ImageBlit
/* dma method offsets, fields, and values */
#define NV05F_SET_OBJECT                                           (0x00000000)
#define NV05F_NO_OPERATION                                         (0x00000100)
#define NV05F_NOTIFY                                               (0x00000104)
#define NV05F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV05F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV05F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV05F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV05F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV05F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV05F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV05F_SET_OPERATION                                        (0x000002FC)
#define NV05F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05F_CONTROL_POINT_IN                                     (0x00000300)
#define NV05F_CONTROL_POINT_IN_X                                   15:0
#define NV05F_CONTROL_POINT_IN_Y                                   31:16
#define NV05F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV05F_CONTROL_POINT_OUT_X                                  15:0
#define NV05F_CONTROL_POINT_OUT_Y                                  31:16
#define NV05F_SIZE                                                 (0x00000308)
#define NV05F_SIZE_WIDTH                                           15:0
#define NV05F_SIZE_HEIGHT                                          31:16
/* obsolete stuff */
#define NV4_IMAGE_BLIT                                             (0x0000005F)
#define Nv4ImageBlit                                              Nv04ImageBlit
#define nv4ImageBlit                                              Nv04ImageBlit
#define nv04ImageBlit                                             Nv04ImageBlit


/* class NV04_INDEXED_IMAGE_FROM_CPU */
#define  NV04_INDEXED_IMAGE_FROM_CPU                               (0x00000060)
/* NvNotification[] elements */
#define NV060_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV060_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV060_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV060_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV060_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV060_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV060_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV060_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0188-018b*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      018c-018f*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0190-0193*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0194-0197*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                019c-019f*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 01a0-01a3*/
 NvV32 Reserved01[0x08F];
 NvV32 SetColorConversion;      /* NV060_SET_COLOR_CONVERSION_*     03e0-03e3*/
 NvV32 SetOperation;            /* NV060_SET_OPERATION_*            03e4-03e7*/
 NvV32 SetColorFormat;          /* NV060_SET_COLOR_FORMAT_*         03e8-03eb*/
 NvV32 IndexFormat;             /* NV060_INDEX_FORMAT_*             03ec-03ef*/
 NvU32 LutOffset;               /* offset in bytes                  03f0-03f3*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            03f4-03f7*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     03f8-03fb*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     03fc-03ff*/
 NvV32 Indices[1792];           /* source indices (packed texels)   0400-1fff*/
} Nv060Typedef, Nv04IndexedImageFromCpu;
#define NV060_TYPEDEF                                   Nv04IndexedImageFromCpu
/* dma method offsets, fields, and values */
#define NV060_SET_OBJECT                                           (0x00000000)
#define NV060_NO_OPERATION                                         (0x00000100)
#define NV060_NOTIFY                                               (0x00000104)
#define NV060_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV060_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV060_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV060_SET_CONTEXT_DMA_LUT                                  (0x00000184)
#define NV060_SET_CONTEXT_COLOR_KEY                                (0x00000188)
#define NV060_SET_CONTEXT_CLIP_RECTANGLE                           (0x0000018C)
#define NV060_SET_CONTEXT_PATTERN                                  (0x00000190)
#define NV060_SET_CONTEXT_ROP                                      (0x00000194)
#define NV060_SET_CONTEXT_BETA1                                    (0x00000198)
#define NV060_SET_CONTEXT_BETA4                                    (0x0000019C)
#define NV060_SET_CONTEXT_SURFACE                                  (0x000001A0)
#define NV060_SET_COLOR_CONVERSION                                 (0x000003E0)
#define NV060_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV060_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV060_SET_OPERATION                                        (0x000003E4)
#define NV060_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV060_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV060_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV060_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV060_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV060_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV060_SET_COLOR_FORMAT                                     (0x000003E8)
#define NV060_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV060_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV060_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV060_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV060_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV060_INDEX_FORMAT                                         (0x000003EC)
#define NV060_INDEX_FORMAT_LE_I8                                   (0x00000000)
#define NV060_INDEX_FORMAT_SVGA65_I4                               (0x00000001)
#define NV060_LUT_OFFSET                                           (0x000003F0)
#define NV060_POINT                                                (0x000003F4)
#define NV060_POINT_X                                              15:0
#define NV060_POINT_Y                                              31:16
#define NV060_SIZE_OUT                                             (0x000003F8)
#define NV060_SIZE_OUT_WIDTH                                       15:0
#define NV060_SIZE_OUT_HEIGHT                                      31:16
#define NV060_SIZE_IN                                              (0x000003FC)
#define NV060_SIZE_IN_WIDTH                                        15:0
#define NV060_SIZE_IN_HEIGHT                                       31:16
#define NV060_INDICES(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV4_INDEXED_IMAGE_FROM_CPU                                 (0x00000060)
#define Nv4IndexedImageFromCpu                          Nv04IndexedImageFromCpu
#define nv4IndexedImageFromCpu                          Nv04IndexedImageFromCpu
#define nv04IndexedImageFromCpu                         Nv04IndexedImageFromCpu


/* class NV04_IMAGE_FROM_CPU */
#define  NV04_IMAGE_FROM_CPU                                       (0x00000061)
/* NvNotification[] elements */
#define NV061_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV061_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV061_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV061_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV061_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV061_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV061_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV061_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV061_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV061_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv061Typedef, Nv04ImageFromCpu;
#define NV061_TYPEDEF                                          Nv04ImageFromCpu
/* dma method offsets, fields, and values */
#define NV061_SET_OBJECT                                           (0x00000000)
#define NV061_NO_OPERATION                                         (0x00000100)
#define NV061_NOTIFY                                               (0x00000104)
#define NV061_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV061_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV061_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV061_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV061_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV061_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV061_SET_CONTEXT_ROP                                      (0x00000190)
#define NV061_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV061_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV061_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV061_SET_OPERATION                                        (0x000002FC)
#define NV061_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV061_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV061_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV061_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV061_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV061_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV061_SET_COLOR_FORMAT                                     (0x00000300)
#define NV061_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV061_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV061_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV061_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV061_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV061_POINT                                                (0x00000304)
#define NV061_POINT_X                                              15:0
#define NV061_POINT_Y                                              31:16
#define NV061_SIZE_OUT                                             (0x00000308)
#define NV061_SIZE_OUT_WIDTH                                       15:0
#define NV061_SIZE_OUT_HEIGHT                                      31:16
#define NV061_SIZE_IN                                              (0x0000030C)
#define NV061_SIZE_IN_WIDTH                                        15:0
#define NV061_SIZE_IN_HEIGHT                                       31:16
#define NV061_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV4_IMAGE_FROM_CPU                                         (0x00000061)
#define Nv4ImageFromCpu                                        Nv04ImageFromCpu
#define nv4ImageFromCpu                                        Nv04ImageFromCpu
#define nv04ImageFromCpu                                       Nv04ImageFromCpu


/* class NV10_CONTEXT_SURFACES_2D */
#define  NV10_CONTEXT_SURFACES_2D                                  (0x00000062)
/* NvNotification[] elements */
#define NV062_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV062_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV062_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV062_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV062_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV062_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV062_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV062_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImageSource;/* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageDestin;/* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05d];
 NvV32 SetColorFormat;          /* NV062_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetPitch;                /* destin_source U16_U16            0304-0307*/
 NvU32 SetOffsetSource;         /* byte offset of top-left pixel    0308-030b*/
 NvU32 SetOffsetDestin;         /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved02[0x73c];
} Nv062Typedef, Nv10ContextSurfaces2d;
#define NV062_TYPEDEF                                     Nv10ContextSurfaces2d
/* dma method offsets, fields, and values */
#define NV062_SET_OBJECT                                           (0x00000000)
#define NV062_NO_OPERATION                                         (0x00000100)
#define NV062_NOTIFY                                               (0x00000104)
#define NV062_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV062_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV062_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV062_SET_CONTEXT_DMA_IMAGE_SOURCE                         (0x00000184)
#define NV062_SET_CONTEXT_DMA_IMAGE_DESTIN                         (0x00000188)
#define NV062_SET_COLOR_FORMAT                                     (0x00000300)
#define NV062_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV062_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV062_SET_COLOR_FORMAT_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV062_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000004)
#define NV062_SET_COLOR_FORMAT_LE_Y16                              (0x00000005)
#define NV062_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV062_SET_COLOR_FORMAT_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV062_SET_COLOR_FORMAT_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV062_SET_COLOR_FORMAT_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV062_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x0000000A)
#define NV062_SET_COLOR_FORMAT_LE_Y32                              (0x0000000B)
#define NV062_SET_PITCH                                            (0x00000304)
#define NV062_SET_PITCH_SOURCE                                     15:0
#define NV062_SET_PITCH_DESTIN                                     31:16
#define NV062_SET_OFFSET_SOURCE                                    (0x00000308)
#define NV062_SET_OFFSET_DESTIN                                    (0x0000030C)


/* class NV05_SCALED_IMAGE_FROM_MEMORY */
#define  NV05_SCALED_IMAGE_FROM_MEMORY                             (0x00000063)
/* NvNotification[] elements */
#define NV063_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV063_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV063_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV063_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV063_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV063_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV063_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV063_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV063_SET_COLOR_CONVERSION_*     02fc-02ff*/
 NvV32 SetColorFormat;          /* NV063_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV063_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv063Typedef, Nv05ScaledImageFromMemory;
#define NV063_TYPEDEF                                 Nv05ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV063_SET_OBJECT                                           (0x00000000)
#define NV063_NO_OPERATION                                         (0x00000100)
#define NV063_NOTIFY                                               (0x00000104)
#define NV063_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV063_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV063_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV063_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV063_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV063_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV063_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV063_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV063_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV063_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV063_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV063_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV063_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV063_SET_COLOR_FORMAT                                     (0x00000300)
#define NV063_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV063_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV063_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV063_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV063_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV063_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV063_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV063_SET_OPERATION                                        (0x00000304)
#define NV063_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV063_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV063_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV063_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV063_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV063_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV063_CLIP_POINT                                           (0x00000308)
#define NV063_CLIP_POINT_X                                         15:0
#define NV063_CLIP_POINT_Y                                         31:16
#define NV063_CLIP_SIZE                                            (0x0000030C)
#define NV063_CLIP_SIZE_WIDTH                                      15:0
#define NV063_CLIP_SIZE_HEIGHT                                     31:16
#define NV063_IMAGE_OUT_POINT                                      (0x00000310)
#define NV063_IMAGE_OUT_POINT_X                                    15:0
#define NV063_IMAGE_OUT_POINT_Y                                    31:16
#define NV063_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV063_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV063_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV063_DS_DX                                                (0x00000318)
#define NV063_DT_DY                                                (0x0000031C)
#define NV063_IMAGE_IN_SIZE                                        (0x00000400)
#define NV063_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV063_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV063_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV063_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV063_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV063_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV063_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV063_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV063_IMAGE_IN                                             (0x0000040C)
#define NV063_IMAGE_IN_POINT_U                                     15:0
#define NV063_IMAGE_IN_POINT_V                                     31:16


/* class NV05_INDEXED_IMAGE_FROM_CPU */
#define  NV05_INDEXED_IMAGE_FROM_CPU                               (0x00000064)
/* NvNotification[] elements */
#define NV064_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV064_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV064_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV064_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV064_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV064_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV064_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV064_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0188-018b*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      018c-018f*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0190-0193*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0194-0197*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                019c-019f*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 01a0-01a3*/
 NvV32 Reserved01[0x08f];
 NvV32 SetColorConversion;      /* NV064_SET_COLOR_CONVERSION_*     03e0-03e3*/
 NvV32 SetOperation;            /* NV064_SET_OPERATION_*            03e4-03e7*/
 NvV32 SetColorFormat;          /* NV064_SET_COLOR_FORMAT_*         03e8-03eb*/
 NvV32 IndexFormat;             /* NV064_INDEX_FORMAT_*             03ec-03ef*/
 NvU32 LutOffset;               /* offset in bytes                  03f0-03f3*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            03f4-03f7*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     03f8-03fb*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     03fc-03ff*/
 NvV32 Indices[1792];           /* source indices (packed texels)   0400-1fff*/
} Nv064Typedef, Nv05IndexedImageFromCpu;
#define NV064_TYPEDEF                                   Nv05IndexedImageFromCpu
/* dma method offsets, fields, and values */
#define NV064_SET_OBJECT                                           (0x00000000)
#define NV064_NO_OPERATION                                         (0x00000100)
#define NV064_NOTIFY                                               (0x00000104)
#define NV064_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV064_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV064_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV064_SET_CONTEXT_DMA_LUT                                  (0x00000184)
#define NV064_SET_CONTEXT_COLOR_KEY                                (0x00000188)
#define NV064_SET_CONTEXT_CLIP_RECTANGLE                           (0x0000018C)
#define NV064_SET_CONTEXT_PATTERN                                  (0x00000190)
#define NV064_SET_CONTEXT_ROP                                      (0x00000194)
#define NV064_SET_CONTEXT_BETA1                                    (0x00000198)
#define NV064_SET_CONTEXT_BETA4                                    (0x0000019C)
#define NV064_SET_CONTEXT_SURFACE                                  (0x000001A0)
#define NV064_SET_COLOR_CONVERSION                                 (0x000003E0)
#define NV064_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV064_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV064_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV064_SET_OPERATION                                        (0x000003E4)
#define NV064_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV064_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV064_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV064_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV064_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV064_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV064_SET_COLOR_FORMAT                                     (0x000003E8)
#define NV064_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV064_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV064_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV064_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV064_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV064_INDEX_FORMAT                                         (0x000003EC)
#define NV064_INDEX_FORMAT_LE_I8                                   (0x00000000)
#define NV064_INDEX_FORMAT_SVGA65_I4                               (0x00000001)
#define NV064_LUT_OFFSET                                           (0x000003F0)
#define NV064_POINT                                                (0x000003F4)
#define NV064_POINT_X                                              15:0
#define NV064_POINT_Y                                              31:16
#define NV064_SIZE_OUT                                             (0x000003F8)
#define NV064_SIZE_OUT_WIDTH                                       15:0
#define NV064_SIZE_OUT_HEIGHT                                      31:16
#define NV064_SIZE_IN                                              (0x000003FC)
#define NV064_SIZE_IN_WIDTH                                        15:0
#define NV064_SIZE_IN_HEIGHT                                       31:16
#define NV064_INDICES(a)                                           (0x00000400\
                                                                   +(a)*0x0004)


/* class NV05_IMAGE_FROM_CPU */
#define  NV05_IMAGE_FROM_CPU                                       (0x00000065)
/* NvNotification[] elements */
#define NV065_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV065_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV065_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV065_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV065_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV065_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV065_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV065_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x056];
 NvV32 SetColorConversion;      /* NV065_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV065_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV065_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv065Typedef, Nv05ImageFromCpu;
#define NV065_TYPEDEF                                          Nv05ImageFromCpu
/* dma method offsets, fields, and values */
#define NV065_SET_OBJECT                                           (0x00000000)
#define NV065_NO_OPERATION                                         (0x00000100)
#define NV065_NOTIFY                                               (0x00000104)
#define NV065_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV065_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV065_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV065_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV065_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV065_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV065_SET_CONTEXT_ROP                                      (0x00000190)
#define NV065_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV065_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV065_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV065_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV065_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV065_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV065_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV065_SET_OPERATION                                        (0x000002FC)
#define NV065_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV065_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV065_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV065_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV065_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV065_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV065_SET_COLOR_FORMAT                                     (0x00000300)
#define NV065_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV065_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV065_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV065_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV065_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV065_POINT                                                (0x00000304)
#define NV065_POINT_X                                              15:0
#define NV065_POINT_Y                                              31:16
#define NV065_SIZE_OUT                                             (0x00000308)
#define NV065_SIZE_OUT_WIDTH                                       15:0
#define NV065_SIZE_OUT_HEIGHT                                      31:16
#define NV065_SIZE_IN                                              (0x0000030C)
#define NV065_SIZE_IN_WIDTH                                        15:0
#define NV065_SIZE_IN_HEIGHT                                       31:16
#define NV065_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


 /* class NV05_STRETCHED_IMAGE_FROM_CPU */
#define  NV05_STRETCHED_IMAGE_FROM_CPU                             (0x00000066)
/* NvNotification[] elements */
#define NV066_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV066_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV066_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV066_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV066_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV066_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV066_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct _Nv066Typedef{
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV066_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x057];
 NvV32 SetColorConversion;      /* NV066_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV066_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV066_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DxDs;                    /* S12d20 dx/ds                     0308-030b*/
 NvV32 DyDt;                    /* S12d20 dy/dt                     030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv066Typedef, Nv05StretchedImageFromCpu;
#define NV066_TYPEDEF                                 Nv05StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV066_SET_OBJECT                                           (0x00000000)
#define NV066_NO_OPERATION                                         (0x00000100)
#define NV066_NOTIFY                                               (0x00000104)
#define NV066_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV066_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV066_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV066_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV066_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV066_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV066_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV066_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV066_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV066_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV066_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV066_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV066_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV066_SET_OPERATION                                        (0x000002FC)
#define NV066_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV066_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV066_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV066_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV066_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV066_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV066_SET_COLOR_FORMAT                                     (0x00000300)
#define NV066_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV066_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV066_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV066_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV066_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV066_SIZE_IN                                              (0x00000304)
#define NV066_SIZE_IN_WIDTH                                        15:0
#define NV066_SIZE_IN_HEIGHT                                       31:16
#define NV066_DX_DS                                                (0x00000308)
#define NV066_DY_DT                                                (0x0000030C)
#define NV066_CLIP_POINT                                           (0x00000310)
#define NV066_CLIP_POINT_X                                         15:0
#define NV066_CLIP_POINT_Y                                         31:16
#define NV066_CLIP_SIZE                                            (0x00000314)
#define NV066_CLIP_SIZE_WIDTH                                      15:0
#define NV066_CLIP_SIZE_HEIGHT                                     31:16
#define NV066_POINT_12D4                                           (0x00000318)
#define NV066_POINT_12D4_X                                         15:0
#define NV066_POINT_12D4_Y                                         31:16
#define NV066_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


/* class NV10_VIDEO_LUT_CURSOR_DAC */
#define  NV10_VIDEO_LUT_CURSOR_DAC                                 (0x00000067)
/* NvNotification[] elements */
#define NV067_NOTIFIERS_NOTIFY                                     (0)
#define NV067_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV067_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV067_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV067_NOTIFIERS_SET_DAC(b)                                 (7+(b))
/* NvNotification[] fields and values */
#define NV067_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV067_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV067_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV067_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV067_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV067_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV067_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV067_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV067_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV067_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV067_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV067_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV067_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV067_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x057];
 NvV32 SetPanOffset;            /* byte offset for panning          0220-0223*/
 NvV32 GetOffset;               /* NV067_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_color_height_width           4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv067Typedef, Nv10VideoLutCursorDac;
#define NV067_TYPEDEF                                     Nv10VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV067_SET_OBJECT                                           (0x00000000)
#define NV067_NO_OPERATION                                         (0x00000100)
#define NV067_NOTIFY                                               (0x00000104)
#define NV067_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV067_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV067_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV067_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV067_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV067_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV067_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV067_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV067_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV067_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV067_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV067_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV067_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV067_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV067_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV067_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV067_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV067_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV067_SET_PAN_OFFSET                                       (0x00000220)
#define NV067_GET_OFFSET                                           (0x000002FC)
#define NV067_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV067_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV067_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV067_SET_IMAGE_FORMAT_WHEN                                23:20
#define NV067_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV067_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV067_SET_IMAGE_FORMAT_FLAGS                               27:25
#define NV067_SET_IMAGE_FORMAT_FLAGS_COMPLETE_ON_OBJECT_CLEANUP    (0x00000001)
#define NV067_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV067_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV067_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV067_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV067_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV067_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_FORMAT_WIDTH                        7:0
#define NV067_SET_CURSOR_IMAGE_FORMAT_HEIGHT                       15:8
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR                        30:16
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_ROP1R5G5B5          (0x00000000)
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A1R5G5B5            (0x00000001)
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A8R8G8B8            (0x00000002)
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY                       31:31
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV067_SET_CURSOR_POINT                                     (0x00000330)
#define NV067_SET_CURSOR_POINT_X                                   15:0
#define NV067_SET_CURSOR_POINT_Y                                   31:16
#define NV067_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV067_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV067_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV067_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV067_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV067_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV067_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV067_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV067_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV067_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV067_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV067_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV067_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV067_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV067_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV067_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV067_SET_DAC_FORMAT_COLOR                                 19:16
#define NV067_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV067_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV067_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV067_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV067_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV067_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV067_SET_DAC_FORMAT_PRIMARY_DEVICE                        28:28
#define NV067_SET_DAC_FORMAT_PRIMARY_DEVICE_FALSE                  (0x00000000)
#define NV067_SET_DAC_FORMAT_PRIMARY_DEVICE_TRUE                   (0x00000001)
#define NV067_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV067_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV067_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)

// Added by Chuck Moidel
/* class NV04_HEAP_OWNER */
#define NV04_HEAP_OWNER                                            (0x0000006F)
/* NvNotification[] fields and values */
#define NV06F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06fTypedef, Nv04HeapOwner;
#define NV06F_TYPEDEF                                              Nv04HeapOwner
#define Nv06FTypedef                                               Nv04HeapOwner

typedef NvV32 Nv070Typedef;

typedef NvV32 Nv071Typedef;


/* class NV04_CONTEXT_BETA */
#define  NV04_CONTEXT_BETA                                         (0x00000072)
/* NvNotification[] elements */
#define NV072_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV072_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV072_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV072_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV072_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV072_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV072_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV072_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetBetaFactor;           /* A8R8G8B8 beta values             0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv072Typedef, Nv04ContextBeta;
#define NV072_TYPEDEF                                           Nv04ContextBeta
/* dma method offsets, fields, and values */
#define NV072_SET_OBJECT                                           (0x00000000)
#define NV072_NO_OPERATION                                         (0x00000100)
#define NV072_NOTIFY                                               (0x00000104)
#define NV072_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV072_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV072_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV072_SET_BETA_FACTOR                                      (0x00000300)
#define NV072_SET_BETA_FACTOR_BLUE                                 7:0
#define NV072_SET_BETA_FACTOR_GREEN                                15:8
#define NV072_SET_BETA_FACTOR_RED                                  23:16
#define NV072_SET_BETA_FACTOR_ALPHA                                31:24
/* obsolete stuff */
#define NV4_CONTEXT_BETA                                           (0x00000072)
#define Nv4ContextBeta                                          Nv04ContextBeta
#define nv4ContextBeta                                          Nv04ContextBeta
#define nv04ContextBeta                                         Nv04ContextBeta

typedef NvV32 Nv073Typedef;

typedef NvV32 Nv074Typedef;

typedef NvV32 Nv075Typedef;


/* class NV04_STRETCHED_IMAGE_FROM_CPU */
#define  NV04_STRETCHED_IMAGE_FROM_CPU                             (0x00000076)
/* NvNotification[] elements */
#define NV076_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV076_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV076_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV076_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV076_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV076_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV076_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV076_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV076_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV076_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DeltaDxDu;               /* S12d20 ratio dx/du               0308-030b*/
 NvV32 DeltaDyDv;               /* S12d20 ratio dy/dv               030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv076Typedef, Nv04StretchedImageFromCpu;
#define NV076_TYPEDEF                                 Nv04StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV076_SET_OBJECT                                           (0x00000000)
#define NV076_NO_OPERATION                                         (0x00000100)
#define NV076_NOTIFY                                               (0x00000104)
#define NV076_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV076_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV076_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV076_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV076_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV076_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV076_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV076_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV076_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV076_SET_OPERATION                                        (0x000002FC)
#define NV076_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV076_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV076_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV076_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV076_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV076_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV076_SET_COLOR_FORMAT                                     (0x00000300)
#define NV076_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV076_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV076_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV076_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV076_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV076_SIZE_IN                                              (0x00000304)
#define NV076_SIZE_IN_WIDTH                                        15:0
#define NV076_SIZE_IN_HEIGHT                                       31:16
#define NV076_DELTA_DX_DU                                          (0x00000308)
#define NV076_DELTA_DY_DV                                          (0x0000030C)
#define NV076_CLIP_POINT                                           (0x00000310)
#define NV076_CLIP_POINT_X                                         15:0
#define NV076_CLIP_POINT_Y                                         31:16
#define NV076_CLIP_SIZE                                            (0x00000314)
#define NV076_CLIP_SIZE_WIDTH                                      15:0
#define NV076_CLIP_SIZE_HEIGHT                                     31:16
#define NV076_POINT_12D4                                           (0x00000318)
#define NV076_POINT_12D4_X                                         15:0
#define NV076_POINT_12D4_Y                                         31:16
#define NV076_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV4_STRETCHED_IMAGE_FROM_CPU                               (0x00000076)
#define Nv4StretchedImageFromCpu                      Nv04StretchedImageFromCpu
#define nv4StretchedImageFromCpu                      Nv04StretchedImageFromCpu
#define nv04StretchedImageFromCpu                     Nv04StretchedImageFromCpu


/* class NV04_SCALED_IMAGE_FROM_MEMORY */
#define  NV04_SCALED_IMAGE_FROM_MEMORY                             (0x00000077)
/* NvNotification[] elements */
#define NV077_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV077_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV077_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV077_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV077_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV077_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV077_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV077_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x059];
 NvV32 SetColorFormat;          /* NV077_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV077_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DeltaDuDx;               /* S12d20 ratio du/dx               0318-031b*/
 NvV32 DeltaDvDy;               /* S12d20 ratio dv/dy               031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvU32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv077Typedef, Nv04ScaledImageFromMemory;
#define NV077_TYPEDEF                                 Nv04ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV077_SET_OBJECT                                           (0x00000000)
#define NV077_NO_OPERATION                                         (0x00000100)
#define NV077_NOTIFY                                               (0x00000104)
#define NV077_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV077_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV077_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV077_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV077_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV077_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV077_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV077_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV077_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV077_SET_COLOR_FORMAT                                     (0x00000300)
#define NV077_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV077_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV077_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV077_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV077_SET_COLOR_FORMAT_LE_V8YB8U8YA8                       (0x00000005)
#define NV077_SET_COLOR_FORMAT_LE_YB8V8YA8U8                       (0x00000006)
#define NV077_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV077_SET_OPERATION                                        (0x00000304)
#define NV077_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV077_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV077_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV077_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV077_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV077_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV077_CLIP_POINT                                           (0x00000308)
#define NV077_CLIP_POINT_X                                         15:0
#define NV077_CLIP_POINT_Y                                         31:16
#define NV077_CLIP_SIZE                                            (0x0000030C)
#define NV077_CLIP_SIZE_WIDTH                                      15:0
#define NV077_CLIP_SIZE_HEIGHT                                     31:16
#define NV077_IMAGE_OUT_POINT                                      (0x00000310)
#define NV077_IMAGE_OUT_POINT_X                                    15:0
#define NV077_IMAGE_OUT_POINT_Y                                    31:16
#define NV077_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV077_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV077_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV077_DELTA_DU_DX                                          (0x00000318)
#define NV077_DELTA_DV_DY                                          (0x0000031C)
#define NV077_IMAGE_IN_SIZE                                        (0x00000400)
#define NV077_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV077_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV077_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV077_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV077_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV077_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV077_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV077_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV077_IMAGE_IN                                             (0x0000040C)
#define NV077_IMAGE_IN_POINT_U                                     15:0
#define NV077_IMAGE_IN_POINT_V                                     31:16
/* obsolete stuff */
#define NV4_SCALED_IMAGE_FROM_MEMORY                               (0x00000077)
#define Nv4ScaledImageFromMemory                      Nv04ScaledImageFromMemory
#define nv4ScaledImageFromMemory                      Nv04ScaledImageFromMemory
#define nv04ScaledImageFromMemory                     Nv04ScaledImageFromMemory

typedef NvV32 Nv078Typedef;

typedef NvV32 Nv079Typedef;

/* class NV10_VIDEO_OVERLAY */
#define  NV10_VIDEO_OVERLAY                                        (0x0000007A)
/* NvNotification[] elements */
#define NV07A_NOTIFIERS_NOTIFY                                     (0)
#define NV07A_NOTIFIERS_SET_OVERLAY(b)                             (1+(b))
/* NvNotification[] fields and values */
#define NV07A_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV07A_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV07A_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV07A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV07A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 StopOverlay[2];          /* NV07A_STOP_OVERLAY_*             0120-0127*/
 NvV32 Reserved01[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved02[0x006];
 NvV32 SetContextDmaOverlay[2]; /* NV01_CONTEXT_DMA                 019c-01a3*/
 NvV32 Reserved03[0x097];
 struct {                       /* start of methods in array        0400-    */
  NvV32 reserved05[0x015];      /* see text                           00-  53*/
  NvV32 luminance;              /* brightness_contrast S16_U8d8       54-  57*/
  NvV32 chrominance;            /* saturationSine_saturationCosine    58-  5b*/
  NvV32 colorKey;               /* see text                           5c-  5f*/
  NvU32 offset;                 /* byte offset of top-left texel      60-  63*/
  NvV32 sizeIn;                 /* height_width U16_U16               64-  67*/
  NvV32 pointIn;                /* t_s U12d4_U12d4                    68-  6b*/
  NvV32 duDx;                   /* U12d20 du/dx                       6c-  6f*/
  NvV32 dvDy;                   /* U12d20 dv/dy                       70-  73*/
  NvV32 pointOut;               /* y_x U16_U16                        74-  77*/
  NvV32 sizeOut;                /* height_width U16_U16               78-  7b*/
  NvV32 format;                 /* see text                           7c-  7f*/
 } SetOverlay[2];               /* end of methods in array              -04ff*/
 NvV32 SetOverlayPointOutA;     /* y_x U16_U16                      0500-0503*/
 NvV32 SetOverlayLuminanceA;    /* brightness_contrast S16_U8d8     0504-0507*/
 NvV32 SetOverlayChrominanceA;  /* saturationSine_saturationCosine  0508-050b*/
 NvV32 Reserved04[0x6bd];
} Nv07aTypedef, Nv10VideoOverlay;
#define NV07A_TYPEDEF                                          Nv10VideoOverlay
/* dma method offsets, fields, and values */
#define NV07A_SET_OBJECT                                           (0x00000000)
#define NV07A_NO_OPERATION                                         (0x00000100)
#define NV07A_NOTIFY                                               (0x00000104)
#define NV07A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07A_STOP_OVERLAY(b)                                      (0x00000120\
                                                                   +(b)*0x0004)
#define NV07A_STOP_OVERLAY_AS_SOON_AS_POSSIBLE                     (0x00000000)
#define NV07A_STOP_OVERLAY_BETWEEN_BUFFERS                         (0x00000001)
#define NV07A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07A_SET_CONTEXT_DMA_OVERLAY(b)                           (0x0000019C\
                                                                   +(b)*0x0004)
#define NV07A_SET_OVERLAY(b)                                       (0x00000400\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_LUMINANCE(b)                             (0x00000454\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_LUMINANCE_CONTRAST                       15:0
#define NV07A_SET_OVERLAY_LUMINANCE_BRIGHTNESS                     31:16
#define NV07A_SET_OVERLAY_CHROMINANCE(b)                           (0x00000458\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_CHROMINANCE_SATURATION_COSINE            15:0
#define NV07A_SET_OVERLAY_CHROMINANCE_SATURATION_SINE              31:16
#define NV07A_SET_OVERLAY_COLORKEY(b)                              (0x0000045C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_OFFSET(b)                                (0x00000460\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_IN(b)                               (0x00000464\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_IN_WIDTH                            15:0
#define NV07A_SET_OVERLAY_SIZE_IN_HEIGHT                           31:16
#define NV07A_SET_OVERLAY_POINT_IN(b)                              (0x00000468\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_IN_S                               15:0
#define NV07A_SET_OVERLAY_POINT_IN_T                               31:16
#define NV07A_SET_OVERLAY_DU_DX(b)                                 (0x0000046C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_DV_DY(b)                                 (0x00000470\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_OUT(b)                             (0x00000474\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_OUT_X                              15:0
#define NV07A_SET_OVERLAY_POINT_OUT_Y                              31:16
#define NV07A_SET_OVERLAY_SIZE_OUT(b)                              (0x00000478\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_OUT_WIDTH                           15:0
#define NV07A_SET_OVERLAY_SIZE_OUT_HEIGHT                          31:16
#define NV07A_SET_OVERLAY_FORMAT(b)                                (0x0000047C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_FORMAT_PITCH                             15:0
#define NV07A_SET_OVERLAY_FORMAT_COLOR                             19:16
#define NV07A_SET_OVERLAY_FORMAT_COLOR_LE_YB8CR8YA8CB8             (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_LE_CR8YB8CB8YA8             (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH                23:20
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_OVERLAY   (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_IMAGE     (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_MATRIX                            30:24
#define NV07A_SET_OVERLAY_FORMAT_MATRIX_ITURBT601                  (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_MATRIX_ITURBT709                  (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY                            31:31
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY_WRITE_ONLY                 (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY_WRITE_THEN_AWAKEN          (0x00000001)
#define NV07A_SET_OVERLAY_POINT_OUT_A                              (0x00000500)
#define NV07A_SET_OVERLAY_POINT_OUT_A_X                            15:0
#define NV07A_SET_OVERLAY_POINT_OUT_A_Y                            31:16
#define NV07A_SET_OVERLAY_LUMINANCE_A                              (0x00000504)
#define NV07A_SET_OVERLAY_LUMINANCE_A_CONTRAST                     15:0
#define NV07A_SET_OVERLAY_LUMINANCE_A_BRIGHTNESS                   31:16
#define NV07A_SET_OVERLAY_CHROMINANCE_A                            (0x00000508)
#define NV07A_SET_OVERLAY_CHROMINANCE_A_SATURATION_COSINE          15:0
#define NV07A_SET_OVERLAY_CHROMINANCE_A_SATURATION_SINE            31:16

/* class NV10_TEXTURE_FROM_CPU */
#define  NV10_TEXTURE_FROM_CPU                                     (0x0000007B)
/* NvNotification[] elements */
#define NV07B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV07B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV089_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV07B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 Size;                    /* height_width U16_U16, pixels     0308-030b*/
 NvV32 ClipHorizontal;          /* width_x U16_U16                  030c-030f*/
 NvV32 ClipVertical;            /* height_y U16_U16                 0310-0313*/
 NvV32 Reserved02[0x03b];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 a;                      /* source colors (packed texels)       0-   3*/
  NvV32 b;                      /* source colors (packed texels)       4-   7*/
 } Color[896];                  /* end of aliased methods in array      -1fff*/
} Nv07bTypedef, Nv10TextureFromCpu;
#define NV07B_TYPEDEF                                        Nv10TextureFromCpu
/* dma method offsets, fields, and values */
#define NV07B_SET_OBJECT                                           (0x00000000)
#define NV07B_NO_OPERATION                                         (0x00000100)
#define NV07B_NOTIFY                                               (0x00000104)
#define NV07B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07B_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07B_SET_CONTEXT_SURFACE                                  (0x00000184)
#define NV07B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV07B_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV07B_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV07B_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV07B_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV07B_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV07B_POINT                                                (0x00000304)
#define NV07B_POINT_X                                              15:0
#define NV07B_POINT_Y                                              31:16
#define NV07B_SIZE                                                 (0x00000308)
#define NV07B_SIZE_WIDTH                                           15:0
#define NV07B_SIZE_HEIGHT                                          31:16
#define NV07B_CLIP_HORIZONTAL                                      (0x0000030C)
#define NV07B_CLIP_HORIZONTAL_X                                    15:0
#define NV07B_CLIP_HORIZONTAL_WIDTH                                31:16
#define NV07B_CLIP_VERTICAL                                        (0x00000310)
#define NV07B_CLIP_VERTICAL_Y                                      15:0
#define NV07B_CLIP_VERTICAL_HEIGHT                                 31:16
#define NV07B_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0008)
#define NV07B_COLOR_A(a)                                           (0x00000400\
                                                                   +(a)*0x0008)
#define NV07B_COLOR_B(a)                                           (0x00000404\
                                                                   +(a)*0x0008)
#define NV07B_COLOR__SIZE_1                                        896

/* class NV15_VIDEO_LUT_CURSOR_DAC */
#define  NV15_VIDEO_LUT_CURSOR_DAC                                 (0x0000007C)
/* NvNotification[] elements */
#define NV07C_NOTIFIERS_NOTIFY                                     (0)
#define NV07C_NOTIFIERS_GET_OFFSET                                 (0)
#define NV07C_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV07C_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV07C_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV07C_NOTIFIERS_SET_DAC(b)                                 (7+(b))
#define NV07C_NOTIFIERS_SET_HOTPLUG                                9            //note to emp#742 - HOTPLUG notifier
/* NvNotification[] fields and values */
#define NV07C_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV07C_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV07C_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV07C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV07C_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV07C_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV07C_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV07C_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV07C_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 SetContextDmaSemaphore;  /* NV01_CONTEXT_DMA                 019c-019f*/
 NvV32 SetHotPlug;              /* control the hotplug interrupt    01a0-01a3*/
 NvV32 SetPanOffset;            /* byte offset for panning          0220-0223*/
 NvV32 Reserved01[0x052];
 NvU32 SetSemaphoreOffset;      /* set semaphore offset             02f0-02f3*/
 NvU32 SetSemaphoreRelease;     /* set semaphore release value      02f4-02f7*/
 NvV32 SetOffsetRange;          /* NV07C_SET_OFFSET_RANGE_*         02f8-02fb*/
 NvV32 GetOffset;               /* NV07C_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_color_height_width           4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv07cTypedef, Nv12VideoLutCursorDac;
#define NV07C_TYPEDEF                                     Nv12VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV07C_SET_OBJECT                                           (0x00000000)
#define NV07C_NO_OPERATION                                         (0x00000100)
#define NV07C_NOTIFY                                               (0x00000104)
#define NV07C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07C_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07C_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV07C_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV07C_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV07C_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV07C_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV07C_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV07C_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV07C_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV07C_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV07C_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV07C_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV07C_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV07C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07C_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_SEMAPHORE                            (0x0000019c)

#define NV07C_SET_HOTPLUG                                          (0x000001a0)
#define NV07C_SET_HOTPLUG_NOHOTSWAP                                (0x00000000)
#define NV07C_SET_HOTPLUG_PLUG                                     (0x00000010)
#define NV07C_SET_HOTPLUG_UNPLUG                                   (0x00000100)

#define NV07C_SET_PAN_OFFSET                                       (0x00000220)

#define NV07C_SET_SEMAPHORE_OFFSET                                 (0x000002f0)
#define NV07C_SET_SEMAPHORE_OFFSET_V                               31:0
#define NV07C_SET_SEMAPHORE_RELEASE                                (0x000002f4)
#define NV07C_SET_SEMAPHORE_RELEASE_V                              31:0

#define NV07C_SET_OFFSET_RANGE                                     (0x000002F8)
#define NV07C_SET_OFFSET_RANGE_START                               14:0
#define NV07C_SET_OFFSET_RANGE_STOP                                30:16
#define NV07C_SET_OFFSET_RANGE_POLARITY                            31:31
#define NV07C_SET_OFFSET_RANGE_POLARITY_IN_RANGE                   (0x00000000)
#define NV07C_SET_OFFSET_RANGE_POLARITY_OUT_RANGE                  (0x00000001)
#define NV07C_GET_OFFSET                                           (0x000002FC)
#define NV07C_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV07C_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV07C_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV07C_SET_IMAGE_FORMAT_WHEN                                23:20
#define NV07C_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC                      24:24
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_DISABLED             (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_ENABLED              (0x00000001)
#define NV07C_SET_IMAGE_FORMAT_FLAGS                               27:25
#define NV07C_SET_IMAGE_FORMAT_FLAGS_COMPLETE_ON_OBJECT_CLEANUP    (0x00000001)
#define NV07C_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV07C_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV07C_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV07C_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV07C_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_WIDTH                        7:0
#define NV07C_SET_CURSOR_IMAGE_FORMAT_HEIGHT                       15:8
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR                        30:16
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_ROP1R5G5B5          (0x00000000)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A1R5G5B5            (0x00000001)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A8R8G8B8            (0x00000002)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_PM_LE_A8R8G8B8         (0x00000003)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY                       31:31
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV07C_SET_CURSOR_POINT                                     (0x00000330)
#define NV07C_SET_CURSOR_POINT_X                                   15:0
#define NV07C_SET_CURSOR_POINT_Y                                   31:16
#define NV07C_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV07C_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV07C_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV07C_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV07C_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV07C_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV07C_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV07C_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV07C_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV07C_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV07C_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV07C_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV07C_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV07C_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV07C_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV07C_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV07C_SET_DAC_FORMAT_COLOR                                 19:16
#define NV07C_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV07C_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV07C_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV07C_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV07C_SET_DAC_FORMAT_HEAD                                  27:26
#define NV07C_SET_DAC_FORMAT_HEAD_0                                (0x00000000)
#define NV07C_SET_DAC_FORMAT_HEAD_1                                (0x00000001)
#define NV07C_SET_DAC_FORMAT_PRIMARY_DEVICE                        28:28
#define NV07C_SET_DAC_FORMAT_PRIMARY_DEVICE_FALSE                  (0x00000000)
#define NV07C_SET_DAC_FORMAT_PRIMARY_DEVICE_TRUE                   (0x00000001)
#define NV07C_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV07C_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV07C_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


/* class NV20_VIDEO_LUT_CURSOR_DAC */
#define  NV20_VIDEO_LUT_CURSOR_DAC                                 (0x0000207C)
/* NvNotification[] elements */
#define NV207C_NOTIFIERS_NOTIFY                                    (0)
#define NV207C_NOTIFIERS_GET_OFFSET                                (0)
#define NV207C_NOTIFIERS_SET_IMAGE(b)                              (1+(b))
#define NV207C_NOTIFIERS_SET_LUT(b)                                (3+(b))
#define NV207C_NOTIFIERS_SET_CURSOR_IMAGE(b)                       (5+(b))
#define NV207C_NOTIFIERS_SET_DAC(b)                                (7+(b))
#define NV207C_NOTIFIERS_SET_HOTPLUG                                9            //note to emp#742 - HOTPLUG notifier
/* NvNotification[] fields and values */
#define NV207C_NOTIFICATION_INFO16_NOT_STARTED                     (0x0000)
#define NV207C_NOTIFICATION_INFO16_VALID_OFFSET                    (0x0001)
#define NV207C_NOTIFICATION_INFO16_DONE                            (0x0002)
#define NV207C_NOTIFICATION_STATUS_IN_PROGRESS                     (0x8000)
#define NV207C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT          (0x4000)
#define NV207C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT              (0x2000)
#define NV207C_NOTIFICATION_STATUS_ERROR_INVALID_STATE             (0x1000)
#define NV207C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE              (0x0800)
#define NV207C_NOTIFICATION_STATUS_DONE_SUCCESS                    (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV207C_NOTIFY_*                  0104-0107*/
 NvV32 StopImage[2];            /* NV207C_STOP_IMAGE_*              0108-010f*/
 NvV32 StopLut[2];              /* NV207C_STOP_LUT_*                0110-0117*/
 NvV32 StopCursorImage[2];      /* NV207C_STOP_CURSOR_IMAGE_*       0118-011f*/
 NvV32 StopDac[2];              /* NV207C_STOP_DAC_*                0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 SetContextDmaSemaphore;  /* NV01_CONTEXT_DMA                 019c-019f*/
 NvV32 SetHotPlug;              /* control the hotplug interrupt    01a0-01a3*/
 NvV32 SetPanOffset;            /* byte offset for panning          0220-0223*/
 NvV32 Reserved01[0x052];
 NvU32 SetSemaphoreOffset;      /* set semaphore offset             02f0-02f3*/
 NvU32 SetSemaphoreRelease;     /* set semaphore release value      02f4-02f7*/
 NvV32 SetOffsetRange;          /* NV207C_SET_OFFSET_RANGE_*        02f8-02fb*/
 NvV32 GetOffset;               /* NV207C_GET_OFFSET_*              02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_color_height_width           4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv207cTypedef, Nv20VideoLutCursorDac;
#define NV207C_TYPEDEF                                    Nv20VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV207C_SET_OBJECT                                          (0x00000000)
#define NV207C_NO_OPERATION                                        (0x00000100)
#define NV207C_NOTIFY                                              (0x00000104)
#define NV207C_NOTIFY_WRITE_ONLY                                   (0x00000000)
#define NV207C_NOTIFY_WRITE_THEN_AWAKEN                            (0x00000001)
#define NV207C_STOP_IMAGE(b)                                       (0x00000108\
                                                                   +(b)*0x0004)
#define NV207C_STOP_IMAGE_AS_SOON_AS_POSSIBLE                      (0x00000000)
#define NV207C_STOP_IMAGE_BETWEEN_BUFFERS                          (0x00000001)
#define NV207C_STOP_LUT(b)                                         (0x00000110\
                                                                   +(b)*0x0004)
#define NV207C_STOP_LUT_AS_SOON_AS_POSSIBLE                        (0x00000000)
#define NV207C_STOP_LUT_BETWEEN_BUFFERS                            (0x00000001)
#define NV207C_STOP_CURSOR_IMAGE(b)                                (0x00000118\
                                                                   +(b)*0x0004)
#define NV207C_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE               (0x00000000)
#define NV207C_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                   (0x00000001)
#define NV207C_STOP_DAC(b)                                         (0x00000120\
                                                                   +(b)*0x0004)
#define NV207C_STOP_DAC_AS_SOON_AS_POSSIBLE                        (0x00000000)
#define NV207C_STOP_DAC_BETWEEN_BUFFERS                            (0x00000001)
#define NV207C_SET_CONTEXT_DMA_NOTIFIES                            (0x00000180)
#define NV207C_SET_CONTEXT_DMA_IMAGE(b)                            (0x00000184\
                                                                   +(b)*0x0004)
#define NV207C_SET_CONTEXT_DMA_LUT(b)                              (0x0000018C\
                                                                   +(b)*0x0004)
#define NV207C_SET_CONTEXT_DMA_CURSOR(b)                           (0x00000194\
                                                                   +(b)*0x0004)
#define NV207C_SET_CONTEXT_DMA_SEMAPHORE                           (0x0000019c)

#define NV07C_SET_HOTPLUG                                          (0x000001a0)
#define NV07C_SET_HOTPLUG_NOHOTSWAP                                (0x00000000)
#define NV07C_SET_HOTPLUG_PLUG                                     (0x00000010)
#define NV07C_SET_HOTPLUG_UNPLUG                                   (0x00000100)

#define NV207C_SET_PAN_OFFSET                                      (0x00000220)
#define NV207C_SET_SEMAPHORE_OFFSET                                (0x000002f0)
#define NV207C_SET_SEMAPHORE_OFFSET_V                              31:0
#define NV207C_SET_SEMAPHORE_RELEASE                               (0x000002f4)
#define NV207C_SET_SEMAPHORE_RELEASE_V                             31:0
#define NV207C_SET_OFFSET_RANGE                                    (0x000002F8)
#define NV207C_SET_OFFSET_RANGE_START                              14:0
#define NV207C_SET_OFFSET_RANGE_STOP                               30:16
#define NV207C_SET_OFFSET_RANGE_POLARITY                           31:31
#define NV207C_SET_OFFSET_RANGE_POLARITY_IN_RANGE                  (0x00000000)
#define NV207C_SET_OFFSET_RANGE_POLARITY_OUT_RANGE                 (0x00000001)
#define NV207C_GET_OFFSET                                          (0x000002FC)
#define NV207C_GET_OFFSET_IMAGE_0                                  (0x00000000)
#define NV207C_GET_OFFSET_IMAGE_1                                  (0x00000001)
#define NV207C_SET_IMAGE(b)                                        (0x00000300\
                                                                   +(b)*0x0008)
#define NV207C_SET_IMAGE_OFFSET(b)                                 (0x00000300\
                                                                   +(b)*0x0008)
#define NV207C_SET_IMAGE_FORMAT(b)                                 (0x00000304\
                                                                   +(b)*0x0008)
#define NV207C_SET_IMAGE_FORMAT_PITCH                              15:0
#define NV207C_SET_IMAGE_FORMAT_WHEN                               23:20
#define NV207C_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER             (0x00000000)
#define NV207C_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                   (0x00000001)

#define NV207C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC                     24:24
#define NV207C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_DISABLED            (0x00000000)
#define NV207C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_ENABLED             (0x00000001)
#define NV207C_SET_IMAGE_FORMAT_FLAGS                              27:25
#define NV207C_SET_IMAGE_FORMAT_FLAGS_COMPLETE_ON_OBJECT_CLEANUP   (0x00000001)
#define NV207C_SET_IMAGE_FORMAT_NOTIFY                             31:31
#define NV207C_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                  (0x00000000)
#define NV207C_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN           (0x00000001)
#define NV207C_SET_LUT(b)                                          (0x00000310\
                                                                   +(b)*0x0008)
#define NV207C_SET_LUT_OFFSET(b)                                   (0x00000310\
                                                                   +(b)*0x0008)
#define NV207C_SET_LUT_FORMAT(b)                                   (0x00000314\
                                                                   +(b)*0x0008)
#define NV207C_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                    (0x00000000)
#define NV207C_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN             (0x00000001)
#define NV207C_SET_CURSOR_IMAGE(b)                                 (0x00000320\
                                                                   +(b)*0x0008)
#define NV207C_SET_CURSOR_IMAGE_OFFSET(b)                          (0x00000320\
                                                                   +(b)*0x0008)
#define NV207C_SET_CURSOR_IMAGE_FORMAT(b)                          (0x00000324\
                                                                   +(b)*0x0008)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_WIDTH                       7:0
#define NV207C_SET_CURSOR_IMAGE_FORMAT_HEIGHT                      15:8
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR                       30:16
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_ROP1R5G5B5         (0x00000000)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A1R5G5B5           (0x00000001)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A8R8G8B8           (0x00000002)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR_PM_LE_A8R8G8B8        (0x00000003)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_COLOR_XOR_LE_A8R8G8B8       (0x00000004)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_NOTIFY                      31:31
#define NV207C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY           (0x00000000)
#define NV207C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN    (0x00000001)
#define NV207C_SET_CURSOR_POINT                                    (0x00000330)
#define NV207C_SET_CURSOR_POINT_X                                  15:0
#define NV207C_SET_CURSOR_POINT_Y                                  31:16
#define NV207C_SET_DAC(b)                                          (0x00000340\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_IMAGE_SIZE(b)                               (0x00000340\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_IMAGE_SIZE_WIDTH                            15:0
#define NV207C_SET_DAC_IMAGE_SIZE_HEIGHT                           31:16
#define NV207C_SET_DAC_HORIZONTAL_BLANK(b)                         (0x00000344\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_HORIZONTAL_BLANK_START                      15:0
#define NV207C_SET_DAC_HORIZONTAL_BLANK_WIDTH                      31:16
#define NV207C_SET_DAC_HORIZONTAL_SYNC(b)                          (0x00000348\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_HORIZONTAL_SYNC_START                       15:0
#define NV207C_SET_DAC_HORIZONTAL_SYNC_WIDTH                       31:16
#define NV207C_SET_DAC_VERTICAL_BLANK(b)                           (0x0000034c\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_VERTICAL_BLANK_START                        15:0
#define NV207C_SET_DAC_VERTICAL_BLANK_WIDTH                        31:16
#define NV207C_SET_DAC_VERTICAL_SYNC(b)                            (0x00000350\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_VERTICAL_SYNC_START                         15:0
#define NV207C_SET_DAC_VERTICAL_SYNC_WIDTH                         31:16
#define NV207C_SET_DAC_TOTAL_SIZE(b)                               (0x00000354\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_TOTAL_SIZE_WIDTH                            15:0
#define NV207C_SET_DAC_TOTAL_SIZE_HEIGHT                           31:16
#define NV207C_SET_DAC_PIXEL_CLOCK(b)                              (0x00000358\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_FORMAT(b)                                   (0x0000035c\
                                                                   +(b)*0x0020)
#define NV207C_SET_DAC_FORMAT_DOUBLE_SCAN                          0:0
#define NV207C_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                 (0x00000000)
#define NV207C_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                  (0x00000001)
#define NV207C_SET_DAC_FORMAT_INTERLACE                            1:1
#define NV207C_SET_DAC_FORMAT_INTERLACE_DISABLED                   (0x00000000)
#define NV207C_SET_DAC_FORMAT_INTERLACE_ENABLED                    (0x00000001)
#define NV207C_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV207C_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE             (0x00000000)
#define NV207C_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE             (0x00000001)
#define NV207C_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV207C_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE               (0x00000000)
#define NV207C_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE               (0x00000001)
#define NV207C_SET_DAC_FORMAT_COLOR                                 19:16
#define NV207C_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                      (0x00000000)
#define NV207C_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5               (0x00000001)
#define NV207C_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5               (0x00000002)
#define NV207C_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8             (0x00000003)
#define NV207C_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV207C_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                     (0x00000000)
#define NV207C_SET_DAC_FORMAT_DISPLAY_TYPE_TV                      (0x00000001)
#define NV207C_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                     (0x00000003)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                   (0x00000000)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                   (0x00000001)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_PAL_M                    (0x00000002)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_PAL_A                    (0x00000003)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_PAL_N                    (0x00000004)
#define NV207C_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                   (0x00000005)
#define NV207C_SET_DAC_FORMAT_HEAD                                 27:26
#define NV207C_SET_DAC_FORMAT_HEAD_0                               (0x00000000)
#define NV207C_SET_DAC_FORMAT_HEAD_1                               (0x00000001)
#define NV207C_SET_DAC_FORMAT_PRIMARY_DEVICE                       28:28
#define NV207C_SET_DAC_FORMAT_PRIMARY_DEVICE_FALSE                 (0x00000000)
#define NV207C_SET_DAC_FORMAT_PRIMARY_DEVICE_TRUE                  (0x00000001)
#define NV207C_SET_DAC_FORMAT_NOTIFY                               31:31
#define NV207C_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                    (0x00000000)
#define NV207C_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN             (0x00000001)


typedef NvV32 Nv07dTypedef;

typedef NvV32 Nv07eTypedef;

typedef NvV32 Nv07fTypedef;


/* class NV01_DEVICE_0 */
#define  NV01_DEVICE_0                                             (0x00000080)
/* NvNotification[] fields and values */
#define NV080_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv080Typedef, Nv01Device0;
#define  NV080_TYPEDEF                                             Nv01Device0


/* class NV01_DEVICE_1 */
#define  NV01_DEVICE_1                                             (0x00000081)
/* NvNotification[] fields and values */
#define NV081_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv081Typedef, Nv01Device1;
#define  NV081_TYPEDEF                                             Nv01Device1


/* class NV01_DEVICE_2 */
#define  NV01_DEVICE_2                                             (0x00000082)
/* NvNotification[] fields and values */
#define NV082_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv082Typedef, Nv01Device2;
#define  NV082_TYPEDEF                                             Nv01Device2


/* class NV01_DEVICE_3 */
#define  NV01_DEVICE_3                                             (0x00000083)
/* NvNotification[] fields and values */
#define NV083_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv083Typedef, Nv01Device3;
#define  NV083_TYPEDEF                                             Nv01Device3


/* class NV01_DEVICE_4 */
#define  NV01_DEVICE_4                                             (0x00000084)
/* NvNotification[] fields and values */
#define NV084_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv084Typedef, Nv01Device4;
#define  NV084_TYPEDEF                                             Nv01Device4


/* class NV01_DEVICE_5 */
#define  NV01_DEVICE_5                                             (0x00000085)
/* NvNotification[] fields and values */
#define NV085_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv085Typedef, Nv01Device5;
#define  NV085_TYPEDEF                                             Nv01Device5


/* class NV01_DEVICE_6 */
#define  NV01_DEVICE_6                                             (0x00000086)
/* NvNotification[] fields and values */
#define NV086_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv086Typedef, Nv01Device6;
#define  NV086_TYPEDEF                                             Nv01Device6


/* class NV01_DEVICE_7 */
#define  NV01_DEVICE_7                                             (0x00000087)
/* NvNotification[] fields and values */
#define NV087_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv087Typedef, Nv01Device7;
#define  NV087_TYPEDEF                                             Nv01Device7


/* class NV10_DVD_SUBPICTURE */
#define  NV10_DVD_SUBPICTURE                                       (0x00000088)
/* NvNotification[] elements */
#define NV088_NOTIFIERS_SET_NOTIFY                                 (0)
/* NvNotification[] fields and values */
#define NV088_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV088_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV088_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV088_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV088_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV088_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV088_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaOverlay;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageIn;    /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextDmaImageOut;   /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0300-0303*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0304-0307*/
 NvU32 ImageOutFormat;          /* color_pitch V16_U16              0308-030b*/
 NvU32 ImageOutOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 ImageInDsDx;             /* S12d20 ds/dx                     0310-0313*/
 NvV32 ImageInDtDy;             /* S12d20 dt/dy                     0314-0317*/
 NvV32 ImageInSize;             /* height_width U16_U16 in texels   0318-031b*/
 NvV32 ImageInFormat;           /* color_pitch V16_U16              031c-031f*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0320-0323*/
 NvV32 ImageInPoint;            /* t_s U12d4_U12d4 in texels        0324-0317*/
 NvV32 OverlayDsDx;             /* S12d20 ds/dx                     0328-032b*/
 NvV32 OverlayDtDy;             /* S12d20 dt/dy                     032c-032f*/
 NvV32 OverlaySize;             /* height_width U16_U16 in texels   0330-0333*/
 NvV32 OverlayFormat;           /* color_pitch V16_U16              0334-0337*/
 NvU32 OverlayOffset;           /* byte offset of top-left texel    0338-033b*/
 NvV32 OverlayPoint;            /* t_s U12d4_U12d4 in texels        033c-033f*/
 NvV32 Reserved02[0x730];
} Nv088Typedef, Nv10DvdSubpicture;
#define NV088_TYPEDEF                                         Nv10DvdSubpicture
/* dma method offsets, fields, and values */
#define NV088_SET_OBJECT                                           (0x00000000)
#define NV088_NO_OPERATION                                         (0x00000100)
#define NV088_NOTIFY                                               (0x00000104)
#define NV088_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV088_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV088_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV088_SET_CONTEXT_DMA_OVERLAY                              (0x00000184)
#define NV088_SET_CONTEXT_DMA_IMAGE_IN                             (0x00000188)
#define NV088_SET_CONTEXT_DMA_IMAGE_OUT                            (0x0000018C)
#define NV088_IMAGE_OUT_POINT                                      (0x00000300)
#define NV088_IMAGE_OUT_POINT_X                                    15:0
#define NV088_IMAGE_OUT_POINT_Y                                    31:16
#define NV088_IMAGE_OUT_SIZE                                       (0x00000304)
#define NV088_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV088_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV088_IMAGE_OUT_FORMAT                                     (0x00000308)
#define NV088_IMAGE_OUT_FORMAT_PITCH                               15:0
#define NV088_IMAGE_OUT_FORMAT_COLOR                               31:16
#define NV088_IMAGE_OUT_FORMAT_COLOR_LE_CR8YB8CB8YA8               (0x00000001)
#define NV088_IMAGE_OUT_FORMAT_COLOR_LE_YB8CR8YA8CB8               (0x00000002)
#define NV088_IMAGE_OUT_OFFSET                                     (0x0000030C)
#define NV088_IMAGE_IN_DS_DX                                       (0x00000310)
#define NV088_IMAGE_IN_DT_DY                                       (0x00000314)
#define NV088_IMAGE_IN_SIZE                                        (0x00000318)
#define NV088_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV088_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV088_IMAGE_IN_FORMAT                                      (0x0000031C)
#define NV088_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV088_IMAGE_IN_FORMAT_COLOR                                31:16
#define NV088_IMAGE_IN_FORMAT_COLOR_LE_CR8YB8CB8YA8                (0x00000001)
#define NV088_IMAGE_IN_FORMAT_COLOR_LE_YB8CR8YA8CB8                (0x00000002)
#define NV088_IMAGE_IN_OFFSET                                      (0x00000320)
#define NV088_IMAGE_IN_POINT                                       (0x00000324)
#define NV088_IMAGE_IN_POINT_S                                     15:0
#define NV088_IMAGE_IN_POINT_T                                     31:16
#define NV088_OVERLAY_DS_DX                                        (0x00000328)
#define NV088_OVERLAY_DT_DY                                        (0x0000032C)
#define NV088_OVERLAY_SIZE                                         (0x00000330)
#define NV088_OVERLAY_SIZE_WIDTH                                   15:0
#define NV088_OVERLAY_SIZE_HEIGHT                                  31:16
#define NV088_OVERLAY_FORMAT                                       (0x00000334)
#define NV088_OVERLAY_FORMAT_PITCH                                 15:0
#define NV088_OVERLAY_FORMAT_COLOR                                 31:16
#define NV088_OVERLAY_FORMAT_COLOR_LE_A8CR8CB8Y8                   (0x00000001)
#define NV088_OVERLAY_FORMAT_COLOR_LE_A4CR6YB6A4CB6YA6             (0x00000002)
#define NV088_OVERLAY_FORMAT_COLOR_LE_TRANSPARENT                  (0x00000003)
#define NV088_OVERLAY_OFFSET                                       (0x00000338)
#define NV088_OVERLAY_POINT                                        (0x0000033C)
#define NV088_OVERLAY_POINT_S                                      15:0
#define NV088_OVERLAY_POINT_T                                      31:16


/* class NV10_SCALED_IMAGE_FROM_MEMORY */
#define  NV10_SCALED_IMAGE_FROM_MEMORY                             (0x00000089)
/* NvNotification[] elements */
#define NV089_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV089_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV089_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV089_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV089_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV089_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV089_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV089_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV089_SET_COLOR_CONVERSION_*     02fc-02ff*/
 NvV32 SetColorFormat;          /* NV089_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV089_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv089Typedef, Nv10ScaledImageFromMemory;
#define NV089_TYPEDEF                                 Nv10ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV089_SET_OBJECT                                           (0x00000000)
#define NV089_NO_OPERATION                                         (0x00000100)
#define NV089_NOTIFY                                               (0x00000104)
#define NV089_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV089_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV089_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV089_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV089_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV089_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV089_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV089_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV089_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV089_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV089_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV089_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV089_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV089_SET_COLOR_FORMAT                                     (0x00000300)
#define NV089_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV089_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV089_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV089_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV089_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV089_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV089_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV089_SET_COLOR_FORMAT_LE_Y8                               (0x00000008)
#define NV089_SET_COLOR_FORMAT_LE_AY8                              (0x00000009)
#define NV089_SET_OPERATION                                        (0x00000304)
#define NV089_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV089_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV089_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV089_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV089_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV089_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV089_CLIP_POINT                                           (0x00000308)
#define NV089_CLIP_POINT_X                                         15:0
#define NV089_CLIP_POINT_Y                                         31:16
#define NV089_CLIP_SIZE                                            (0x0000030C)
#define NV089_CLIP_SIZE_WIDTH                                      15:0
#define NV089_CLIP_SIZE_HEIGHT                                     31:16
#define NV089_IMAGE_OUT_POINT                                      (0x00000310)
#define NV089_IMAGE_OUT_POINT_X                                    15:0
#define NV089_IMAGE_OUT_POINT_Y                                    31:16
#define NV089_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV089_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV089_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV089_DS_DX                                                (0x00000318)
#define NV089_DT_DY                                                (0x0000031C)
#define NV089_IMAGE_IN_SIZE                                        (0x00000400)
#define NV089_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV089_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV089_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV089_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV089_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV089_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV089_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV089_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV089_IMAGE_IN                                             (0x0000040C)
#define NV089_IMAGE_IN_POINT_U                                     15:0
#define NV089_IMAGE_IN_POINT_V                                     31:16


/* class NV11_SCALED_IMAGE_FROM_MEMORY */
#define  NV11_SCALED_IMAGE_FROM_MEMORY                             (0x00001189)
/* NvNotification[] elements */
#define NV1189_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV1189_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV1189_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV1189_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV1189_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV1189_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV1189_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV1189_NOTIFY_*                  0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV1189_SET_COLOR_CONVERSION_*    02fc-02ff*/
 NvV32 SetColorFormat;          /* NV1189_SET_COLOR_FORMAT_*        0300-0303*/
 NvV32 SetOperation;            /* NV1189_SET_OPERATION_*           0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv1189Typedef, Nv11ScaledImageFromMemory;
#define NV1189_TYPEDEF                                 Nv11ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV1189_SET_OBJECT                                           (0x00000000)
#define NV1189_NO_OPERATION                                         (0x00000100)
#define NV1189_NOTIFY                                               (0x00000104)
#define NV1189_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV1189_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV1189_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV1189_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV1189_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV1189_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV1189_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV1189_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV1189_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV1189_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV1189_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV1189_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV1189_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV1189_SET_COLOR_FORMAT                                     (0x00000300)
#define NV1189_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV1189_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV1189_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV1189_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV1189_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV1189_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV1189_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV1189_SET_COLOR_FORMAT_LE_Y8                               (0x00000008)
#define NV1189_SET_COLOR_FORMAT_LE_AY8                              (0x00000009)
#define NV1189_SET_OPERATION                                        (0x00000304)
#define NV1189_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV1189_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV1189_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV1189_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV1189_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV1189_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV1189_CLIP_POINT                                           (0x00000308)
#define NV1189_CLIP_POINT_X                                         15:0
#define NV1189_CLIP_POINT_Y                                         31:16
#define NV1189_CLIP_SIZE                                            (0x0000030C)
#define NV1189_CLIP_SIZE_WIDTH                                      15:0
#define NV1189_CLIP_SIZE_HEIGHT                                     31:16
#define NV1189_IMAGE_OUT_POINT                                      (0x00000310)
#define NV1189_IMAGE_OUT_POINT_X                                    15:0
#define NV1189_IMAGE_OUT_POINT_Y                                    31:16
#define NV1189_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV1189_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV1189_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV1189_DS_DX                                                (0x00000318)
#define NV1189_DT_DY                                                (0x0000031C)
#define NV1189_IMAGE_IN_SIZE                                        (0x00000400)
#define NV1189_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV1189_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV1189_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV1189_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV1189_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV1189_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV1189_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV1189_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV1189_IMAGE_IN                                             (0x0000040C)
#define NV1189_IMAGE_IN_POINT_U                                     15:0
#define NV1189_IMAGE_IN_POINT_V                                     31:16


/* class NV10_IMAGE_FROM_CPU */
#define  NV10_IMAGE_FROM_CPU                                       (0x0000008A)
#define NV08A_NOTIFIERS_NOTIFY                                     (0)
#define NV08A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV08A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV08A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV08A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV08A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV08A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV08A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x056];
 NvV32 SetColorConversion;      /* NV08A_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV08A_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV08A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 a;                      /* source colors (packed texels)       0-   3*/
  NvV32 b;                      /* source colors (packed texels)       4-   7*/
 } Color[896];                  /* end of aliased methods in array      -1fff*/
} Nv08ATypedef, NV10ImageFromCpu;
#define NV08A_TYPEDEF                                          NV10ImageFromCpu
/* dma method offsets, fields, and values */
#define NV08A_SET_OBJECT                                           (0x00000000)
#define NV08A_NO_OPERATION                                         (0x00000100)
#define NV08A_NOTIFY                                               (0x00000104)
#define NV08A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV08A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV08A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV08A_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV08A_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV08A_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV08A_SET_CONTEXT_ROP                                      (0x00000190)
#define NV08A_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV08A_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV08A_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV08A_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV08A_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV08A_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV08A_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV08A_SET_OPERATION                                        (0x000002FC)
#define NV08A_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV08A_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV08A_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV08A_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV08A_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV08A_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV08A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV08A_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV08A_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV08A_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV08A_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV08A_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV08A_POINT                                                (0x00000304)
#define NV08A_POINT_X                                              15:0
#define NV08A_POINT_Y                                              31:16
#define NV08A_SIZE_OUT                                             (0x00000308)
#define NV08A_SIZE_OUT_WIDTH                                       15:0
#define NV08A_SIZE_OUT_HEIGHT                                      31:16
#define NV08A_SIZE_IN                                              (0x0000030C)
#define NV08A_SIZE_IN_WIDTH                                        15:0
#define NV08A_SIZE_IN_HEIGHT                                       31:16
#define NV08A_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


/* class NV10_CONTEXT_SURFACES_3D */
#define  NV10_CONTEXT_SURFACES_3D                                  (0x00000093)
/* NvNotification[] elements */
#define NV093_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV093_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV093_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV093_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV093_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV093_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV093_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV093_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaColor;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaZeta;       /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05b];
 NvV32 SetClipHorizontal;       /* width_x U16_U16                  02f8-02fb*/
 NvV32 SetClipVertical;         /* height_y U16_U16                 02fc-02ff*/
 NvV32 SetFormat;               /* height_width_type_color all V8   0300-0303*/
 NvV32 SetClipSize;             /* height_width U16_U16             0304-0307*/
 NvV32 SetPitch;                /* zeta_color U16_U16               0308-030b*/
 NvU32 SetOffsetColor;          /* byte offset of top-left pixel    030c-030f*/
 NvU32 SetOffsetZeta;           /* byte offset of top-left pixel    0310-0313*/
 NvV32 Reserved02[0x73b];
} Nv093Typedef, Nv10ContextSurfaces3d;
#define NV093_TYPEDEF                                     Nv10ContextSurfaces3d
/* dma method offsets, fields, and values */
#define NV093_SET_OBJECT                                           (0x00000000)
#define NV093_NO_OPERATION                                         (0x00000100)
#define NV093_NOTIFY                                               (0x00000104)
#define NV093_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV093_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV093_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV093_SET_CONTEXT_DMA_COLOR                                (0x00000184)
#define NV093_SET_CONTEXT_DMA_ZETA                                 (0x00000188)
#define NV093_SET_CLIP_HORIZONTAL                                  (0x000002F8)
#define NV093_SET_CLIP_HORIZONTAL_X                                15:0
#define NV093_SET_CLIP_HORIZONTAL_WIDTH                            31:16
#define NV093_SET_CLIP_VERTICAL                                    (0x000002FC)
#define NV093_SET_CLIP_VERTICAL_Y                                  15:0
#define NV093_SET_CLIP_VERTICAL_HEIGHT                             31:16
#define NV093_SET_FORMAT                                           (0x00000300)
#define NV093_SET_FORMAT_COLOR                                     7:0
#define NV093_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000001)
#define NV093_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000002)
#define NV093_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000003)
#define NV093_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000004)
#define NV093_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000005)
#define NV093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000006)
#define NV093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000007)
#define NV093_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x00000008)
#define NV093_SET_FORMAT_TYPE                                      15:8
#define NV093_SET_FORMAT_TYPE_PITCH                                (0x00000001)
#define NV093_SET_FORMAT_TYPE_SWIZZLE                              (0x00000002)
#define NV093_SET_FORMAT_WIDTH                                     23:16
#define NV093_SET_FORMAT_HEIGHT                                    31:24
#define NV093_SET_CLIP_SIZE                                        (0x00000304)
#define NV093_SET_CLIP_SIZE_WIDTH                                  15:0
#define NV093_SET_CLIP_SIZE_HEIGHT                                 31:16
#define NV093_SET_PITCH                                            (0x00000308)
#define NV093_SET_PITCH_COLOR                                      15:0
#define NV093_SET_PITCH_ZETA                                       31:16
#define NV093_SET_OFFSET_COLOR                                     (0x0000030C)
#define NV093_SET_OFFSET_ZETA                                      (0x00000310)



/* class NV10_DX5_TEXTURED_TRIANGLE */
#define  NV10_DX5_TEXTURED_TRIANGLE                                (0x00000094)
/* NvNotification[] elements */
#define NV094_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV094_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV094_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV094_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV094_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV094_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV094_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV094_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ColorKeyValue;           /* see text                         0300-0303*/
 NvU32 Offset;                  /* texture offset in bytes          0304-0307*/
 NvV32 Format;                  /* see text                         0308-030b*/
 NvV32 Filter;                  /* see text                         030c-030f*/
 NvV32 Blend;                   /* see text                         0310-0313*/
 NvV32 Control;                 /* see text                         0314-0317*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0318-031b*/
 NvV32 Reserved02[0x039];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[16];                /* end of methods in array              -05ff*/
 NvV32 DrawPrimitive[64];       /* see text                         0600-06ff*/
 NvV32 Reserved03[0x640];
} Nv094Typedef, Nv10Dx5TexturedTriangle;
#define NV094_TYPEDEF                                   Nv10Dx5TexturedTriangle
/* dma method offsets, fields, and values */
#define NV094_SET_OBJECT                                           (0x00000000)
#define NV094_NO_OPERATION                                         (0x00000100)
#define NV094_NOTIFY                                               (0x00000104)
#define NV094_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV094_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV094_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV094_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV094_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV094_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV094_COLOR_KEY_VALUE                                      (0x00000300)
#define NV094_OFFSET                                               (0x00000304)
#define NV094_FORMAT                                               (0x00000308)
#define NV094_FORMAT_CONTEXT_DMA                                   1:0
#define NV094_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV094_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV094_FORMAT_COLOR_KEY_MATCH                               3:2
#define NV094_FORMAT_COLOR_KEY_MATCH_SRCCOPY                       (0x00000000)
#define NV094_FORMAT_COLOR_KEY_MATCH_ZERO_ALPHA                    (0x00000001)
#define NV094_FORMAT_ORIGIN_ZOH                                    5:4
#define NV094_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV094_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV094_FORMAT_ORIGIN_FOH                                    7:6
#define NV094_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV094_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV094_FORMAT_COLOR                                         11:8
#define NV094_FORMAT_COLOR_LE_Y8                                   (0x00000001)
#define NV094_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV094_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV094_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV094_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV094_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV094_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV094_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV094_FORMAT_BASE_SIZE_U                                   19:16
#define NV094_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV094_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV094_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV094_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV094_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV094_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV094_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV094_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV094_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV094_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV094_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV094_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV094_FORMAT_BASE_SIZE_V                                   23:20
#define NV094_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV094_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV094_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV094_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV094_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV094_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV094_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV094_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV094_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV094_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV094_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV094_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV094_FORMAT_TEXTUREADDRESSU                               26:24
#define NV094_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV094_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV094_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV094_FORMAT_WRAPU                                         27:27
#define NV094_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV094_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSV                               30:28
#define NV094_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV094_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV094_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV094_FORMAT_WRAPV                                         31:31
#define NV094_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV094_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV094_FILTER                                               (0x0000030C)
#define NV094_FILTER_IGNORE0                                       4:0
#define NV094_FILTER_ZERO0                                         7:5
#define NV094_FILTER_IGNORE1                                       12:8
#define NV094_FILTER_ZERO1                                         14:13
#define NV094_FILTER_IGNORE2                                       15:15
#define NV094_FILTER_MIPMAPLODBIAS                                 23:16
#define NV094_FILTER_TEXTUREMIN                                    26:24
#define NV094_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV094_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV094_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV094_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV094_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV094_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV094_FILTER_IGNORE3                                       27:27
#define NV094_FILTER_TEXTUREMAG                                    30:28
#define NV094_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV094_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV094_FILTER_IGNORE4                                       31:31
#define NV094_BLEND                                                (0x00000310)
#define NV094_BLEND_TEXTUREMAPBLEND                                3:0
#define NV094_BLEND_TEXTUREMAPBLEND_DECAL                          (0x00000001)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATE                       (0x00000002)
#define NV094_BLEND_TEXTUREMAPBLEND_DECALALPHA                     (0x00000003)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATEALPHA                  (0x00000004)
#define NV094_BLEND_TEXTUREMAPBLEND_DECALMASK                      (0x00000005)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATEMASK                   (0x00000006)
#define NV094_BLEND_TEXTUREMAPBLEND_COPY                           (0x00000007)
#define NV094_BLEND_TEXTUREMAPBLEND_ADD                            (0x00000008)
#define NV094_BLEND_MASK_BIT                                       5:4
#define NV094_BLEND_MASK_BIT_LSB                                   (0x00000001)
#define NV094_BLEND_MASK_BIT_MSB                                   (0x00000002)
#define NV094_BLEND_SHADEMODE                                      7:6
#define NV094_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV094_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV094_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV094_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV094_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV094_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV094_BLEND_SPECULARENABLE                                 15:12
#define NV094_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV094_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV094_BLEND_FOGENABLE                                      19:16
#define NV094_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV094_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV094_BLEND_ALPHABLENDENABLE                               23:20
#define NV094_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV094_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV094_BLEND_SRCBLEND                                       27:24
#define NV094_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV094_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV094_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV094_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV094_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV094_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV094_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV094_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV094_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV094_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV094_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV094_BLEND_DESTBLEND                                      31:28
#define NV094_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV094_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV094_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV094_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV094_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV094_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV094_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV094_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV094_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV094_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV094_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV094_CONTROL                                              (0x00000314)
#define NV094_CONTROL_ALPHAREF                                     7:0
#define NV094_CONTROL_ALPHAFUNC                                    11:8
#define NV094_CONTROL_ALPHAFUNC_NEVER                              (0x00000001)
#define NV094_CONTROL_ALPHAFUNC_LESS                               (0x00000002)
#define NV094_CONTROL_ALPHAFUNC_EQUAL                              (0x00000003)
#define NV094_CONTROL_ALPHAFUNC_LESSEQUAL                          (0x00000004)
#define NV094_CONTROL_ALPHAFUNC_GREATER                            (0x00000005)
#define NV094_CONTROL_ALPHAFUNC_NOTEQUAL                           (0x00000006)
#define NV094_CONTROL_ALPHAFUNC_GREATEREQUAL                       (0x00000007)
#define NV094_CONTROL_ALPHAFUNC_ALWAYS                             (0x00000008)
#define NV094_CONTROL_ALPHATESTENABLE                              12:12
#define NV094_CONTROL_ALPHATESTENABLE_FALSE                        (0x00000000)
#define NV094_CONTROL_ALPHATESTENABLE_TRUE                         (0x00000001)
#define NV094_CONTROL_ORIGIN                                       13:13
#define NV094_CONTROL_ORIGIN_CENTER                                (0x00000000)
#define NV094_CONTROL_ORIGIN_CORNER                                (0x00000001)
#define NV094_CONTROL_ZENABLE                                      15:14
#define NV094_CONTROL_ZENABLE_FALSE                                (0x00000000)
#define NV094_CONTROL_ZENABLE_TRUE                                 (0x00000001)
#define NV094_CONTROL_ZFUNC                                        19:16
#define NV094_CONTROL_ZFUNC_NEVER                                  (0x00000001)
#define NV094_CONTROL_ZFUNC_LESS                                   (0x00000002)
#define NV094_CONTROL_ZFUNC_EQUAL                                  (0x00000003)
#define NV094_CONTROL_ZFUNC_LESSEQUAL                              (0x00000004)
#define NV094_CONTROL_ZFUNC_GREATER                                (0x00000005)
#define NV094_CONTROL_ZFUNC_NOTEQUAL                               (0x00000006)
#define NV094_CONTROL_ZFUNC_GREATEREQUAL                           (0x00000007)
#define NV094_CONTROL_ZFUNC_ALWAYS                                 (0x00000008)
#define NV094_CONTROL_CULLMODE                                     21:20
#define NV094_CONTROL_CULLMODE_NONE                                (0x00000001)
#define NV094_CONTROL_CULLMODE_CW                                  (0x00000002)
#define NV094_CONTROL_CULLMODE_CCW                                 (0x00000003)
#define NV094_CONTROL_DITHERENABLE                                 22:22
#define NV094_CONTROL_DITHERENABLE_FALSE                           (0x00000000)
#define NV094_CONTROL_DITHERENABLE_TRUE                            (0x00000001)
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE                         23:23
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE_FALSE                   (0x00000000)
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE_TRUE                    (0x00000001)
#define NV094_CONTROL_ZWRITEENABLE                                 29:24
#define NV094_CONTROL_ZWRITEENABLE_FALSE                           (0x00000000)
#define NV094_CONTROL_ZWRITEENABLE_TRUE                            (0x00000001)
#define NV094_CONTROL_Z_FORMAT                                     31:30
#define NV094_CONTROL_Z_FORMAT_FIXED                               (0x00000001)
#define NV094_CONTROL_Z_FORMAT_FLOAT                               (0x00000002)
#define NV094_FOG_COLOR                                            (0x00000318)
#define NV094_TLVERTEX(i)                                          (0x00000400\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SX(i)                                       (0x00000400\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SY(i)                                       (0x00000404\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SZ(i)                                       (0x00000408\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_RHW(i)                                      (0x0000040C\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_COLOR(i)                                    (0x00000410\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_COLOR_BLUE                                  7:0
#define NV094_TLVERTEX_COLOR_GREEN                                 15:8
#define NV094_TLVERTEX_COLOR_RED                                   23:16
#define NV094_TLVERTEX_COLOR_ALPHA                                 31:24
#define NV094_TLVERTEX_SPECULAR(i)                                 (0x00000414\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SPECULAR_BLUE                               7:0
#define NV094_TLVERTEX_SPECULAR_GREEN                              15:8
#define NV094_TLVERTEX_SPECULAR_RED                                23:16
#define NV094_TLVERTEX_SPECULAR_FOG                                31:24
#define NV094_TLVERTEX_TU(i)                                       (0x00000418\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_TV(i)                                       (0x0000041C\
                                                                   +(i)*0x0020)
#define NV094_DRAW_PRIMITIVE(a)                                    (0x00000600\
                                                                   +(a)*0x0004)
#define NV094_DRAW_PRIMITIVE_I0                                    3:0
#define NV094_DRAW_PRIMITIVE_I1                                    7:4
#define NV094_DRAW_PRIMITIVE_I2                                    11:8
#define NV094_DRAW_PRIMITIVE_I3                                    15:12
#define NV094_DRAW_PRIMITIVE_I4                                    19:16
#define NV094_DRAW_PRIMITIVE_I5                                    31:20



/* class NV10_DX6_MULTI_TEXTURE_TRIANGLE */
#define  NV10_DX6_MULTI_TEXTURE_TRIANGLE                           (0x00000095)
/* NvNotification[] elements */
#define NV095_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV095_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV095_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV095_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV095_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV095_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV095_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV095_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05e];
 NvU32 Offset[2];               /* offset in bytes                  0308-030f*/
 NvV32 Format[2];               /* see text                         0310-0317*/
 NvV32 Filter[2];               /* see text                         0318-031f*/
 NvV32 Combine0Alpha;           /* see text                         0320-0323*/
 NvV32 Combine0Color;           /* see text                         0324-0327*/
 NvV32 Reserved02;
 NvV32 Combine1Alpha;           /* see text                         032c-032f*/
 NvV32 Combine1Color;           /* see text                         0330-0333*/
 NvV32 CombineFactor;           /* A8R8G8B8                         0334-0337*/
 NvV32 Blend;                   /* see text                         0338-033b*/
 NvV32 Control0;                /* see text                         033c-033f*/
 NvV32 Control1;                /* see text                         0340-0343*/
 NvV32 Control2;                /* see text                         0344-0347*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0348-034b*/
 NvV32 Reserved03[0x02D];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu0;                    /* texture 0 u coordinate             18-  1b*/
  NvF32 tv0;                    /* texture 0 v coordinate             1c-  1f*/
  NvF32 tu1;                    /* texture 1 u coordinate             20-  23*/
  NvF32 tv1;                    /* texture 1 v coordinate             24-  27*/
 } Tlmtvertex[8];               /* end of methods in array              -053f*/
 NvV32 DrawPrimitive[48];       /* see text                         0540-05ff*/
 NvV32 Reserved04[0x680];
} Nv095Typedef, Nv10Dx6MultiTextureTriangle;
#define NV095_TYPEDEF                               Nv10Dx6MultiTextureTriangle
/* dma method offsets, fields, and values */
#define NV095_SET_OBJECT                                           (0x00000000)
#define NV095_NO_OPERATION                                         (0x00000100)
#define NV095_NOTIFY                                               (0x00000104)
#define NV095_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV095_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV095_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV095_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV095_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV095_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV095_OFFSET(b)                                            (0x00000308\
                                                                   +(b)*0x0004)
#define NV095_FORMAT(b)                                            (0x00000310\
                                                                   +(b)*0x0004)
#define NV095_FORMAT_CONTEXT_DMA                                   3:0
#define NV095_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV095_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV095_FORMAT_ORIGIN_ZOH                                    5:4
#define NV095_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV095_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV095_FORMAT_ORIGIN_FOH                                    7:6
#define NV095_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV095_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV095_FORMAT_COLOR                                         11:8
#define NV095_FORMAT_COLOR_LE_AY8                                  (0x00000001)
#define NV095_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV095_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV095_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV095_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV095_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV095_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV095_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV095_FORMAT_BASE_SIZE_U                                   19:16
#define NV095_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV095_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV095_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV095_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV095_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV095_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV095_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV095_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV095_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV095_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV095_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV095_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV095_FORMAT_BASE_SIZE_V                                   23:20
#define NV095_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV095_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV095_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV095_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV095_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV095_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV095_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV095_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV095_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV095_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV095_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV095_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV095_FORMAT_TEXTUREADDRESSU                               26:24
#define NV095_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV095_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV095_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV095_FORMAT_WRAPU                                         27:27
#define NV095_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV095_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSV                               30:28
#define NV095_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV095_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV095_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV095_FORMAT_WRAPV                                         31:31
#define NV095_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV095_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV095_FILTER(b)                                            (0x00000318\
                                                                   +(b)*0x0004)
#define NV095_FILTER_IGNORE0                                       4:0
#define NV095_FILTER_ZERO0                                         7:5
#define NV095_FILTER_IGNORE1                                       12:8
#define NV095_FILTER_ZERO1                                         14:13
#define NV095_FILTER_IGNORE2                                       15:15
#define NV095_FILTER_MIPMAPLODBIAS                                 23:16
#define NV095_FILTER_TEXTUREMIN                                    26:24
#define NV095_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV095_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV095_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV095_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV095_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV095_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV095_FILTER_IGNORE3                                       27:27
#define NV095_FILTER_TEXTUREMAG                                    30:28
#define NV095_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV095_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV095_FILTER_IGNORE4                                       31:31
#define NV095_COMBINE_0_ALPHA                                      (0x00000320)
#define NV095_COMBINE_0_ALPHA_INVERSE_0                            0:0
#define NV095_COMBINE_0_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_0                              1:1
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0                           7:2
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_1                            8:8
#define NV095_COMBINE_0_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_1                              9:9
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1                           15:10
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_2                            16:16
#define NV095_COMBINE_0_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_2                              17:17
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2                           23:18
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_3                            24:24
#define NV095_COMBINE_0_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_3                              25:25
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3                           28:26
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_OPERATION                            31:29
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_0_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_0_COLOR                                      (0x00000324)
#define NV095_COMBINE_0_COLOR_INVERSE_0                            0:0
#define NV095_COMBINE_0_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_0                              1:1
#define NV095_COMBINE_0_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0                           7:2
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_1                            8:8
#define NV095_COMBINE_0_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_1                              9:9
#define NV095_COMBINE_0_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1                           15:10
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_2                            16:16
#define NV095_COMBINE_0_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_2                              17:17
#define NV095_COMBINE_0_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2                           23:18
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_3                            24:24
#define NV095_COMBINE_0_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_3                              25:25
#define NV095_COMBINE_0_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3                           28:26
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_OPERATION                            31:29
#define NV095_COMBINE_0_COLOR_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_0_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_0_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_0_COLOR_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_1_ALPHA                                      (0x0000032C)
#define NV095_COMBINE_1_ALPHA_INVERSE_0                            0:0
#define NV095_COMBINE_1_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_0                              1:1
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0                           7:2
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_1                            8:8
#define NV095_COMBINE_1_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_1                              9:9
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1                           15:10
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_2                            16:16
#define NV095_COMBINE_1_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_2                              17:17
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2                           23:18
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_3                            24:24
#define NV095_COMBINE_1_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_3                              25:25
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3                           28:26
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_OPERATION                            31:29
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_1_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_1_COLOR                                      (0x00000330)
#define NV095_COMBINE_1_COLOR_INVERSE_0                            0:0
#define NV095_COMBINE_1_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_0                              1:1
#define NV095_COMBINE_1_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0                           7:2
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_1                            8:8
#define NV095_COMBINE_1_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_1                              9:9
#define NV095_COMBINE_1_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1                           15:10
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_2                            16:16
#define NV095_COMBINE_1_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_2                              17:17
#define NV095_COMBINE_1_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2                           23:18
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_3                            24:24
#define NV095_COMBINE_1_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_3                              25:25
#define NV095_COMBINE_1_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3                           28:26
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_OPERATION                            31:29
#define NV095_COMBINE_1_COLOR_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_1_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_1_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_1_COLOR_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
/* The following NV095_COMBINE_*** defines can be used without regard to the combiner number */
#define NV095_COMBINE_ALPHA_INVERSE_0                              0:0
#define NV095_COMBINE_ALPHA_INVERSE_0_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_0_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_0                                1:1
#define NV095_COMBINE_ALPHA_ARGUMENT_0                             7:2
#define NV095_COMBINE_ALPHA_ARGUMENT_0_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_1                              8:8
#define NV095_COMBINE_ALPHA_INVERSE_1_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_1_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_1                                9:9
#define NV095_COMBINE_ALPHA_ARGUMENT_1                             15:10
#define NV095_COMBINE_ALPHA_ARGUMENT_1_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_2                              16:16
#define NV095_COMBINE_ALPHA_INVERSE_2_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_2_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_2                                17:17
#define NV095_COMBINE_ALPHA_ARGUMENT_2                             23:18
#define NV095_COMBINE_ALPHA_ARGUMENT_2_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_3                              24:24
#define NV095_COMBINE_ALPHA_INVERSE_3_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_3_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_3                                25:25
#define NV095_COMBINE_ALPHA_ARGUMENT_3                             28:26
#define NV095_COMBINE_ALPHA_ARGUMENT_3_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_OPERATION                              31:29
#define NV095_COMBINE_ALPHA_OPERATION_ADD                          (0x00000001)
#define NV095_COMBINE_ALPHA_OPERATION_ADD2                         (0x00000002)
#define NV095_COMBINE_ALPHA_OPERATION_ADD4                         (0x00000003)
#define NV095_COMBINE_ALPHA_OPERATION_ADDSIGNED                    (0x00000004)
#define NV095_COMBINE_ALPHA_OPERATION_MUX                          (0x00000005)
#define NV095_COMBINE_ALPHA_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV095_COMBINE_ALPHA_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_0                              0:0
#define NV095_COMBINE_COLOR_INVERSE_0_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_0_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_0                                1:1
#define NV095_COMBINE_COLOR_ALPHA_0_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_0_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_0                             7:2
#define NV095_COMBINE_COLOR_ARGUMENT_0_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_0_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_1                              8:8
#define NV095_COMBINE_COLOR_INVERSE_1_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_1_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_1                                9:9
#define NV095_COMBINE_COLOR_ALPHA_1_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_1_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_1                             15:10
#define NV095_COMBINE_COLOR_ARGUMENT_1_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_1_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_2                              16:16
#define NV095_COMBINE_COLOR_INVERSE_2_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_2_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_2                                17:17
#define NV095_COMBINE_COLOR_ALPHA_2_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_2_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_2                             23:18
#define NV095_COMBINE_COLOR_ARGUMENT_2_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_2_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_3                              24:24
#define NV095_COMBINE_COLOR_INVERSE_3_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_3_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_3                                25:25
#define NV095_COMBINE_COLOR_ALPHA_3_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_3_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_3                             28:26
#define NV095_COMBINE_COLOR_ARGUMENT_3_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_3_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_OPERATION                              31:29
#define NV095_COMBINE_COLOR_OPERATION_ADD                          (0x00000001)
#define NV095_COMBINE_COLOR_OPERATION_ADD2                         (0x00000002)
#define NV095_COMBINE_COLOR_OPERATION_ADD4                         (0x00000003)
#define NV095_COMBINE_COLOR_OPERATION_ADDSIGNED                    (0x00000004)
#define NV095_COMBINE_COLOR_OPERATION_MUX                          (0x00000005)
#define NV095_COMBINE_COLOR_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV095_COMBINE_COLOR_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV095_COMBINE_FACTOR                                       (0x00000334)
#define NV095_COMBINE_FACTOR_BLUE                                  7:0
#define NV095_COMBINE_FACTOR_GREEN                                 15:8
#define NV095_COMBINE_FACTOR_RED                                   23:16
#define NV095_COMBINE_FACTOR_ALPHA                                 31:24
#define NV095_BLEND                                                (0x00000338)
#define NV095_BLEND_MASK_BIT                                       5:0
#define NV095_BLEND_MASK_BIT_LSB                                   (0x00000010)
#define NV095_BLEND_MASK_BIT_MSB                                   (0x00000020)
#define NV095_BLEND_SHADEMODE                                      7:6
#define NV095_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV095_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV095_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV095_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV095_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV095_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV095_BLEND_SPECULARENABLE                                 15:12
#define NV095_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV095_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV095_BLEND_FOGENABLE                                      19:16
#define NV095_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV095_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV095_BLEND_ALPHABLENDENABLE                               23:20
#define NV095_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV095_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV095_BLEND_SRCBLEND                                       27:24
#define NV095_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV095_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV095_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV095_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV095_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV095_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV095_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV095_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV095_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV095_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV095_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV095_BLEND_DESTBLEND                                      31:28
#define NV095_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV095_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV095_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV095_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV095_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV095_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV095_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV095_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV095_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV095_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV095_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV095_CONTROL0                                             (0x0000033C)
#define NV095_CONTROL0_ALPHAREF                                    7:0
#define NV095_CONTROL0_ALPHAFUNC                                   11:8
#define NV095_CONTROL0_ALPHAFUNC_NEVER                             (0x00000001)
#define NV095_CONTROL0_ALPHAFUNC_LESS                              (0x00000002)
#define NV095_CONTROL0_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV095_CONTROL0_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV095_CONTROL0_ALPHAFUNC_GREATER                           (0x00000005)
#define NV095_CONTROL0_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV095_CONTROL0_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV095_CONTROL0_ALPHAFUNC_ALWAYS                            (0x00000008)
#define NV095_CONTROL0_ALPHATESTENABLE                             12:12
#define NV095_CONTROL0_ALPHATESTENABLE_FALSE                       (0x00000000)
#define NV095_CONTROL0_ALPHATESTENABLE_TRUE                        (0x00000001)
#define NV095_CONTROL0_ORIGIN                                      13:13
#define NV095_CONTROL0_ORIGIN_CENTER                               (0x00000000)
#define NV095_CONTROL0_ORIGIN_CORNER                               (0x00000001)
#define NV095_CONTROL0_ZENABLE                                     15:14
#define NV095_CONTROL0_ZENABLE_FALSE                               (0x00000000)
#define NV095_CONTROL0_ZENABLE_TRUE                                (0x00000001)
#define NV095_CONTROL0_ZFUNC                                       19:16
#define NV095_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV095_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV095_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV095_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV095_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV095_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV095_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV095_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV095_CONTROL0_CULLMODE                                    21:20
#define NV095_CONTROL0_CULLMODE_NONE                               (0x00000001)
#define NV095_CONTROL0_CULLMODE_CW                                 (0x00000002)
#define NV095_CONTROL0_CULLMODE_CCW                                (0x00000003)
#define NV095_CONTROL0_DITHERENABLE                                22:22
#define NV095_CONTROL0_DITHERENABLE_FALSE                          (0x00000000)
#define NV095_CONTROL0_DITHERENABLE_TRUE                           (0x00000001)
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE                        23:23
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV095_CONTROL0_ZWRITEENABLE                                24:24
#define NV095_CONTROL0_ZWRITEENABLE_FALSE                          (0x00000000)
#define NV095_CONTROL0_ZWRITEENABLE_TRUE                           (0x00000001)
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE                        25:25
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                  (0x00000000)
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                   (0x00000001)
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE                          26:26
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV095_CONTROL0_RED_WRITE_ENABLE                            27:27
#define NV095_CONTROL0_RED_WRITE_ENABLE_FALSE                      (0x00000000)
#define NV095_CONTROL0_RED_WRITE_ENABLE_TRUE                       (0x00000001)
#define NV095_CONTROL0_GREEN_WRITE_ENABLE                          28:28
#define NV095_CONTROL0_GREEN_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV095_CONTROL0_GREEN_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV095_CONTROL0_BLUE_WRITE_ENABLE                           29:29
#define NV095_CONTROL0_BLUE_WRITE_ENABLE_FALSE                     (0x00000000)
#define NV095_CONTROL0_BLUE_WRITE_ENABLE_TRUE                      (0x00000001)
#define NV095_CONTROL0_Z_FORMAT                                    31:30
#define NV095_CONTROL0_Z_FORMAT_FIXED                              (0x00000001)
#define NV095_CONTROL0_Z_FORMAT_FLOAT                              (0x00000002)
#define NV095_CONTROL1                                             (0x00000340)
#define NV095_CONTROL1_STENCIL_TEST_ENABLE                         3:0
#define NV095_CONTROL1_STENCIL_TEST_ENABLE_FALSE                   (0x00000000)
#define NV095_CONTROL1_STENCIL_TEST_ENABLE_TRUE                    (0x00000001)
#define NV095_CONTROL1_STENCIL_FUNC                                7:4
#define NV095_CONTROL1_STENCIL_FUNC_NEVER                          (0x00000001)
#define NV095_CONTROL1_STENCIL_FUNC_LESS                           (0x00000002)
#define NV095_CONTROL1_STENCIL_FUNC_EQUAL                          (0x00000003)
#define NV095_CONTROL1_STENCIL_FUNC_LESSEQUAL                      (0x00000004)
#define NV095_CONTROL1_STENCIL_FUNC_GREATER                        (0x00000005)
#define NV095_CONTROL1_STENCIL_FUNC_NOTEQUAL                       (0x00000006)
#define NV095_CONTROL1_STENCIL_FUNC_GREATEREQUAL                   (0x00000007)
#define NV095_CONTROL1_STENCIL_FUNC_ALWAYS                         (0x00000008)
#define NV095_CONTROL1_STENCIL_REF                                 15:8
#define NV095_CONTROL1_STENCIL_MASK_READ                           23:16
#define NV095_CONTROL1_STENCIL_MASK_WRITE                          31:24
#define NV095_CONTROL2                                             (0x00000344)
#define NV095_CONTROL2_STENCIL_OP_FAIL                             3:0
#define NV095_CONTROL2_STENCIL_OP_FAIL_KEEP                        (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_FAIL_ZERO                        (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_FAIL_REPLACE                     (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INCRSAT                     (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_FAIL_DECRSAT                     (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INVERT                      (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INCR                        (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_FAIL_DECR                        (0x00000008)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL                            7:4
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_KEEP                       (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_ZERO                       (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_REPLACE                    (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INCRSAT                    (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_DECRSAT                    (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INVERT                     (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INCR                       (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_DECR                       (0x00000008)
#define NV095_CONTROL2_STENCIL_OP_ZPASS                            31:8
#define NV095_CONTROL2_STENCIL_OP_ZPASS_KEEP                       (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_ZERO                       (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_REPLACE                    (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INCRSAT                    (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_DECRSAT                    (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INVERT                     (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INCR                       (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_DECR                       (0x00000008)
#define NV095_FOG_COLOR                                            (0x00000348)
#define NV095_TLMTVERTEX(i)                                        (0x00000400\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SX(i)                                     (0x00000400\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SY(i)                                     (0x00000404\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SZ(i)                                     (0x00000408\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_RHW(i)                                    (0x0000040C\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_COLOR(i)                                  (0x00000410\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_COLOR_BLUE                                7:0
#define NV095_TLMTVERTEX_COLOR_GREEN                               15:8
#define NV095_TLMTVERTEX_COLOR_RED                                 23:16
#define NV095_TLMTVERTEX_COLOR_ALPHA                               31:24
#define NV095_TLMTVERTEX_SPECULAR(i)                               (0x00000414\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SPECULAR_BLUE                             7:0
#define NV095_TLMTVERTEX_SPECULAR_GREEN                            15:8
#define NV095_TLMTVERTEX_SPECULAR_RED                              23:16
#define NV095_TLMTVERTEX_SPECULAR_FOG                              31:24
#define NV095_TLMTVERTEX_TU0(i)                                    (0x00000418\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TV0(i)                                    (0x0000041C\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TU1(i)                                    (0x00000420\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TV1(i)                                    (0x00000424\
                                                                   +(i)*0x0028)
#define NV095_DRAW_PRIMITIVE(a)                                    (0x00000540\
                                                                   +(a)*0x0004)
#define NV095_DRAW_PRIMITIVE_I0                                    3:0
#define NV095_DRAW_PRIMITIVE_I1                                    7:4
#define NV095_DRAW_PRIMITIVE_I2                                    11:8
#define NV095_DRAW_PRIMITIVE_I3                                    15:12
#define NV095_DRAW_PRIMITIVE_I4                                    19:16
#define NV095_DRAW_PRIMITIVE_I5                                    31:20

// This typedef really should be the same as Nv12CelsiusPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.


typedef NvV32 Nv096Typedef;


/* class NV15_CELSIUS_PRIMITIVE */
#define  NV15_CELSIUS_PRIMITIVE                                    (0x00000096)
/* NvNotification[] elements */
#define NV096_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV096_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV096_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV096_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV096_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV096_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV096_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved00[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved01[0xc/4];
    NvV32 SyncSetRead;
    NvV32 SyncSetWrite;
    NvV32 SyncSetModulo;
    NvV32 SyncIncrementWrite;
    NvV32 SyncStall;
    NvV32 Reserved17[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved02[0x3c/4];
    NvV32 SetContextDmaNotifies;
    NvV32 SetContextDmaA;
    NvV32 SetContextDmaB;
    NvV32 SetContextDmaVertex;
    NvV32 SetContextDmaState;
    NvV32 SetContextDmaColor;
    NvV32 SetContextDmaZeta;
    NvV32 Reserved03[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved04[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved05[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvV32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvV32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvV32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvV32 SetStencilFuncRef;
    NvV32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvV32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvV32 SetMaterialEmission[3];
    NvV32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
        NvV32 S;
        NvV32 T;
        NvV32 R;
        NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvV32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved06[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved07[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved08[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved09[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0b[0xc8/4];
    struct {
        NvF32 AmbientColor[3];
        NvF32 DiffuseColor[3];
        NvF32 SpecularColor[3];
        NvF32 LocalRange;
        NvF32 InfiniteHalfVector[3];
        NvF32 InfiniteDirection[3];
        NvF32 SpotFalloff[3];
        NvF32 SpotDirection[4];
        NvF32 LocalPosition[3];
        NvF32 LocalAttenuation[3];
        NvV32 Reserved0c[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0d[0xc/4];
    NvF32 SetVertex4f[4];
    NvS16 SetVertex4s[4];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0e[0x4/4];
    NvS16 SetNormal3s[3];
    NvV16 Reserved0f[0xa/2];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvV32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvV32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS16 SetTexcoord0_2s[2];
    NvV32 Reserved10[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS16 SetTexcoord0_4s[4];
    NvF32 SetTexcoord1_2f[2];
    NvS16 SetTexcoord1_2s[2];
    NvV32 Reserved11[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS16 SetTexcoord1_4s[4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved12[0x4/4];
    NvV32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 Reserved13[0xbc/4];
    NvV32 SetBeginEnd;
    NvV16 ArrayElement16[256];
    NvV32 Reserved14[0xfc/4];
    NvV32 SetBeginEnd2;
    NvV32 ArrayElement32[64];
    NvV32 Reserved15[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 SetMaterialEmissionSW[3];
    NvV32 Reserved16[1];
    NvF32 SetViewportOffsetSW[4];
    NvF32 SetPassthruViewportOffsetSW[4];
    NvV32 Reserved18[0x1a4/4];
    NvV32 SetBeginEnd4;
    NvV32 InlineArray[512];
} Nv12CelsiusPrimitive;


#define NV096_TYPEDEF                                      Nv12CelsiusPrimitive
#define NV096_SET_OBJECT                                           (0x00000000)


#define NV096_DEBUG_INIT(i)                                        (0x00001600+(i)*4)


#define NV096_FLUSH                                                        0x00000728


#define NV096_NO_OPERATION                                                 0x00000100


#define NV096_NOTIFY                                                       0x00000104
#define NV096_NOTIFY_TYPE                                                        23:0
#define NV096_NOTIFY_TYPE_WRITE_ONLY                                       0x00000000
#define NV096_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                0x00000001


#define NV096_SET_WARNING_ENABLE                                           0x00000108
#define NV096_SET_WARNING_ENABLE_V                                               23:0
#define NV096_SET_WARNING_ENABLE_V_FALSE                                   0x00000000
#define NV096_SET_WARNING_ENABLE_V_TRUE                                    0x00000001


#define NV096_GET_STATE                                                    0x0000010c
#define NV096_GET_STATE_GETSTATE                                                 31:0
#define NV096_GET_STATE_GETSTATE_ALL_STATE                                 0x00000001
#define NV096_GET_STATE_PUTSTATE_ALL_STATE                                 0x00000002
#define NV096_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                   0x00000003
#define NV096_GET_STATE_GETSTATE_RENDERING_STATE                           0x00000004
#define NV096_GET_STATE_GETSTATE_GEOMETRY_STATE                            0x00000005
#define NV096_GET_STATE_GETSTATE_SNAPSHOT_PRIM_ASSM                        0x00000006
#define NV096_GET_STATE_GETSTATE_RELOAD_PRIM_ASSM                          0x00000007

#define NV096_WAIT_FOR_IDLE                                                0x00000110

#define NV096_SYNC_SET_READ                                                0x00000120
#define NV096_SYNC_SET_WRITE                                               0x00000124
#define NV096_SYNC_SET_MODULO                                              0x00000128
#define NV096_SYNC_INCREMENT_WRITE                                         0x0000012c
#define NV096_SYNC_STALL                                                   0x00000130

#define NV096_PM_TRIGGER                                                   0x00000140


#define NV096_SET_CONTEXT_DMA_NOTIFIES                                     0x00000180


#define NV096_SET_CONTEXT_DMA_A                                            0x00000184


#define NV096_SET_CONTEXT_DMA_B                                            0x00000188


#define NV096_SET_CONTEXT_DMA_VERTEX                                       0x0000018c


#define NV096_SET_CONTEXT_DMA_STATE                                        0x00000190


#define NV096_SET_CONTEXT_DMA_COLOR                                        0x00000194


#define NV096_SET_CONTEXT_DMA_ZETA                                         0x00000198


#define NV096_SET_SURFACE_CLIP_HORIZONTAL                                  0x00000200
#define NV096_SET_SURFACE_CLIP_HORIZONTAL_X                                      15:0
#define NV096_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                 31:16


#define NV096_SET_SURFACE_CLIP_VERTICAL                                    0x00000204
#define NV096_SET_SURFACE_CLIP_VERTICAL_Y                                        15:0
#define NV096_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                  31:16


#define NV096_SET_SURFACE_FORMAT                                           0x00000208
#define NV096_SET_SURFACE_FORMAT_COLOR                                            7:0
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                0x00000001
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                0x00000002
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                           0x00000003
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                0x00000004
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                0x00000005
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            0x00000006
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            0x00000007
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000008
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_B8                               0x00000009
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_G8B8                             0x0000000A
#define NV096_SET_SURFACE_FORMAT_TYPE                                            15:8
#define NV096_SET_SURFACE_FORMAT_TYPE_PITCH                                0x00000001
#define NV096_SET_SURFACE_FORMAT_TYPE_SWIZZLE                              0x00000002
#define NV096_SET_SURFACE_FORMAT_WIDTH                                          23:16
#define NV096_SET_SURFACE_FORMAT_WIDTH_1                                   0x00000000
#define NV096_SET_SURFACE_FORMAT_WIDTH_2                                   0x00000001
#define NV096_SET_SURFACE_FORMAT_WIDTH_4                                   0x00000002
#define NV096_SET_SURFACE_FORMAT_WIDTH_8                                   0x00000003
#define NV096_SET_SURFACE_FORMAT_WIDTH_16                                  0x00000004
#define NV096_SET_SURFACE_FORMAT_WIDTH_32                                  0x00000005
#define NV096_SET_SURFACE_FORMAT_WIDTH_64                                  0x00000006
#define NV096_SET_SURFACE_FORMAT_WIDTH_128                                 0x00000007
#define NV096_SET_SURFACE_FORMAT_WIDTH_256                                 0x00000008
#define NV096_SET_SURFACE_FORMAT_WIDTH_512                                 0x00000009
#define NV096_SET_SURFACE_FORMAT_WIDTH_1024                                0x0000000A
#define NV096_SET_SURFACE_FORMAT_WIDTH_2048                                0x0000000B
#define NV096_SET_SURFACE_FORMAT_HEIGHT                                         31:24
#define NV096_SET_SURFACE_FORMAT_HEIGHT_1                                  0x00000000
#define NV096_SET_SURFACE_FORMAT_HEIGHT_2                                  0x00000001
#define NV096_SET_SURFACE_FORMAT_HEIGHT_4                                  0x00000002
#define NV096_SET_SURFACE_FORMAT_HEIGHT_8                                  0x00000003
#define NV096_SET_SURFACE_FORMAT_HEIGHT_16                                 0x00000004
#define NV096_SET_SURFACE_FORMAT_HEIGHT_32                                 0x00000005
#define NV096_SET_SURFACE_FORMAT_HEIGHT_64                                 0x00000006
#define NV096_SET_SURFACE_FORMAT_HEIGHT_128                                0x00000007
#define NV096_SET_SURFACE_FORMAT_HEIGHT_256                                0x00000008
#define NV096_SET_SURFACE_FORMAT_HEIGHT_512                                0x00000009
#define NV096_SET_SURFACE_FORMAT_HEIGHT_1024                               0x0000000A
#define NV096_SET_SURFACE_FORMAT_HEIGHT_2048                               0x0000000B


#define NV096_SET_SURFACE_PITCH                                            0x0000020c
#define NV096_SET_SURFACE_PITCH_COLOR                                            15:0
#define NV096_SET_SURFACE_PITCH_ZETA                                            31:16


#define NV096_SET_SURFACE_COLOR_OFFSET                                     0x00000210
#define NV096_SET_SURFACE_COLOR_OFFSET_V                                         31:0


#define NV096_SET_SURFACE_ZETA_OFFSET                                      0x00000214
#define NV096_SET_SURFACE_ZETA_OFFSET_V                                          31:0


#define NV096_SET_TEXTURE_OFFSET(i)                                (0x00000218+(i)*4)
#define NV096_SET_TEXTURE_OFFSET_V                                               31:0


#define NV096_SET_TEXTURE_FORMAT(i)                                (0x00000220+(i)*4)
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA                                      1:0
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                   2:2
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                      0x00000000
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                       0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                       4:3
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                         0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH                                       6:5
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                         0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_COLOR                                           11:7
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_Y8                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_AY8                              0x00000001
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                         0x00000003
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                         0x00000004
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                           0x00000005
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000006
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                         0x00000007
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                      0x00000008
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                        0x00000009
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                      0x0000000A
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                      0x0000000B
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                    0x0000000C
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                   0x0000000E
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                   0x0000000F
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                   0x00000010
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                     0x00000011
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                   0x00000012
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                         0x00000013
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                        0x00000014
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                      0x00000015
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                       0x00000016
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                       0x00000017
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                     0x00000018
#define NV096_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                  15:12
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U                                    19:16
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                             0x00000000
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                             0x00000003
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                            0x00000004
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                            0x00000005
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                            0x00000006
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                           0x00000007
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                           0x00000008
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                           0x00000009
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                          0x0000000A
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                          0x0000000B
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V                                    23:20
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                             0x00000000
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                             0x00000003
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                            0x00000004
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                            0x00000005
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                            0x00000006
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                           0x00000007
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                           0x00000008
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                           0x00000009
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                          0x0000000A
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                          0x0000000B
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                                26:24
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                      0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                    0x00000002
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                     0x00000003
#define NV096_SET_TEXTURE_FORMAT_WRAPU                                          27:27
#define NV096_SET_TEXTURE_FORMAT_WRAPU_FALSE                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_WRAPU_TRUE                                0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                                30:28
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                      0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                    0x00000002
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                     0x00000003
#define NV096_SET_TEXTURE_FORMAT_WRAPV                                          31:31
#define NV096_SET_TEXTURE_FORMAT_WRAPV_FALSE                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_WRAPV_TRUE                                0x00000001


#define NV096_SET_TEXTURE_CONTROL0(i)                              (0x00000228+(i)*4)
#define NV096_SET_TEXTURE_CONTROL0_ENABLE                                       30:30
#define NV096_SET_TEXTURE_CONTROL0_ENABLE_FALSE                            0x00000000
#define NV096_SET_TEXTURE_CONTROL0_ENABLE_TRUE                             0x00000001
#define NV096_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                29:18
#define NV096_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                 17:6
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                  5:4
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                         0x00000000
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                         0x00000001
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                             3:3
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                0x00000000
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                 0x00000001
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                              2:2
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                 0x00000000
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                  0x00000001
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                            1:0
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE               0x00000000
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA               0x00000001
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                0x00000002
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                0x00000003


#define NV096_SET_TEXTURE_CONTROL1(i)                              (0x00000230+(i)*4)
#define NV096_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                  31:16
#define NV096_SET_TEXTURE_CONTROL1_ZERO                                          15:0


#define NV096_SET_TEXTURE_CONTROL2(i)                              (0x00000238+(i)*4)
#define NV096_SET_TEXTURE_CONTROL2_PERTURB_DU                                    11:0
#define NV096_SET_TEXTURE_CONTROL2_PERTURB_DV                                   23:12
#define NV096_SET_TEXTURE_CONTROL2_IMAGE_LODF                                   31:24


#define NV096_SET_TEXTURE_IMAGE_RECT(i)                            (0x00000240+(i)*4)
#define NV096_SET_TEXTURE_IMAGE_RECT_WIDTH                                      31:16
#define NV096_SET_TEXTURE_IMAGE_RECT_HEIGHT                                      15:0


#define NV096_SET_TEXTURE_FILTER(i)                                (0x00000248+(i)*4)
#define NV096_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                   23:0
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN                                     27:24
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                        0x00000001
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                         0x00000002
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                     0x00000003
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                      0x00000004
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST               0x00000005
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR                0x00000006
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG                                     31:28
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                        0x00000001
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                         0x00000002


#define NV096_SET_TEXTURE_PALETTE(i)                               (0x00000250+(i)*4)
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA                                     5:0
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                            0x00000000
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                            0x00000001
#define NV096_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                 31:6


#define NV096_SET_COMBINER_ALPHA_ICW(i)                            (0x00000260+(i)*4)
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP                                      31:29
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA                                    28:28
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE                                   27:24
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP                                      23:21
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA                                    20:20
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE                                   19:16
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP                                      15:13
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA                                    12:12
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE                                    11:8
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP                                        7:5
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA                                      4:4
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE                                     3:0
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV096_SET_COMBINER_COLOR_ICW(i)                            (0x00000268+(i)*4)
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP                                      31:29
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA                                    28:28
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE                                   27:24
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP                                      23:21
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA                                    20:20
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE                                   19:16
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP                                      15:13
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA                                    12:12
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE                                    11:8
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP                                        7:5
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA                                      4:4
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE                                     3:0
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV096_SET_COMBINE_FACTOR(i)                                (0x00000270+(i)*4)
#define NV096_SET_COMBINE_FACTOR_BLUE                                             7:0
#define NV096_SET_COMBINE_FACTOR_GREEN                                           15:8
#define NV096_SET_COMBINE_FACTOR_RED                                            23:16
#define NV096_SET_COMBINE_FACTOR_ALPHA                                          31:24


#define NV096_SET_COMBINER_ALPHA_OCW(i)                            (0x00000278+(i)*4)
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION                                  31:15
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                     0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                0x00000001
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                0x00000002
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS           0x00000003
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1               0x00000006
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                 14:14
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                      0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                       0x00000001
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST                                     11:8
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST                                       7:4
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                          0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                          0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                          0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                          0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                          0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                          0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                          0x0000000D
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST                                       3:0
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                          0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                          0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                          0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                          0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                          0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                          0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                          0x0000000D


#define NV096_SET_COMBINER0_COLOR_OCW                                      0x00000280
#define NV096_SET_COMBINER0_COLOR_OCW_ZERO                                      31:27
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION                                 26:15
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                                14:14
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST                                    11:8
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST                                      7:4
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST                                      3:0
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV096_SET_COMBINER1_COLOR_OCW                                      0x00000284
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                           31:28
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                  0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                  0x00000002
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT                                27:27
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                       0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                       0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION                                 26:15
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                                14:14
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST                                    11:8
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST                                      7:4
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST                                      3:0
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV096_SET_COMBINER_SPECULAR_FOG_CW0                                0x00000288
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                           31:29
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                             28:28
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                            27:24
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                           23:21
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                             20:20
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                            19:16
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                           15:13
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                             12:12
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                             11:8
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                             7:5
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                               4:4
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                              3:0
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD           0x0000000F


#define NV096_SET_COMBINER_SPECULAR_FOG_CW1                                0x0000028c
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                           31:29
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                             28:28
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                            27:24
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                           23:21
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                             20:20
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                            19:16
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                           15:13
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                             12:12
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                             11:8
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                        7:7
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE           0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE            0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                6:6
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE   0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE    0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12               5:0
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE   0x00000020


#define NV096_SET_CONTROL0                                                 0x00000290
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA                                   31:24
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                        0x00000000
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                         0x00000001
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE                                   23:20
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                        0x00000000
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                         0x00000001
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                 19:16
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                      0x00000000
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                       0x00000001
#define NV096_SET_CONTROL0_Z_FORMAT                                             15:12
#define NV096_SET_CONTROL0_Z_FORMAT_FIXED                                  0x00000000
#define NV096_SET_CONTROL0_Z_FORMAT_FLOAT                                  0x00000001
#define NV096_SET_CONTROL0_WBUFFER_SELECT                                        11:8
#define NV096_SET_CONTROL0_WBUFFER_SELECT_0                                0x00000000
#define NV096_SET_CONTROL0_WBUFFER_SELECT_1                                0x00000001
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE                                   7:0
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                       0x00000001


#define NV096_SET_LIGHT_CONTROL                                            0x00000294
#define NV096_SET_LIGHT_CONTROL_LOCALEYE                                        31:16
#define NV096_SET_LIGHT_CONTROL_LOCALEYE_FALSE                             0x00000000
#define NV096_SET_LIGHT_CONTROL_LOCALEYE_TRUE                              0x00000001
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE                                 15:2
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                    0x00000000
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT                0x00000001
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                              1:1
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                 0x00000000
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                  0x00000001
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                                0:0
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                   0x00000000
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                    0x00000001


#define NV096_SET_COLOR_MATERIAL                                           0x00000298
#define NV096_SET_COLOR_MATERIAL_V                                               31:0
#define NV096_SET_COLOR_MATERIAL_V_DISABLED                                0x00000000
#define NV096_SET_COLOR_MATERIAL_V_EMISSION                                0x00000001
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT                                 0x00000002
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                        0x00000003
#define NV096_SET_COLOR_MATERIAL_V_DIFFUSE                                 0x00000004
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                        0x00000005
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                         0x00000006
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE                0x00000007
#define NV096_SET_COLOR_MATERIAL_V_SPECULAR                                0x00000008
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                       0x00000009
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                        0x0000000A
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR               0x0000000B
#define NV096_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                        0x0000000C
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR               0x0000000D
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR                0x0000000E
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR       0x0000000F


#define NV096_SET_FOG_MODE                                                 0x0000029c
#define NV096_SET_FOG_MODE_FOG_MODE                                              31:0
#define NV096_SET_FOG_MODE_FOG_MODE_LINEAR                                 0x00002601
#define NV096_SET_FOG_MODE_FOG_MODE_EXP                                    0x00000800
#define NV096_SET_FOG_MODE_FOG_MODE_EXP2                                   0x00000801
#define NV096_SET_FOG_MODE_FOG_MODE_EXP_ABS                                0x00000802
#define NV096_SET_FOG_MODE_FOG_MODE_EXP2_ABS                               0x00000803


#define NV096_SET_FOG_GEN_MODE                                             0x000002a0
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE                                      31:0
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                      0x00000000
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                         0x00000001
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                         0x00000002
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                     0x00000003


#define NV096_SET_FOG_ENABLE                                               0x000002a4
#define NV096_SET_FOG_ENABLE_V                                                   31:0
#define NV096_SET_FOG_ENABLE_V_FALSE                                       0x00000000
#define NV096_SET_FOG_ENABLE_V_TRUE                                        0x00000001


#define NV096_SET_FOG_COLOR                                               0x000002a8
#define NV096_SET_FOG_COLOR_FOG_COLOR_RED                                        7:0
#define NV096_SET_FOG_COLOR_FOG_COLOR_GREEN                                     15:8
#define NV096_SET_FOG_COLOR_FOG_COLOR_BLUE                                     23:16
#define NV096_SET_FOG_COLOR_FOG_COLOR_ALPHA                                    31:24


#define NV096_SET_COLOR_KEY_COLOR(i)                               (0x000002ac+(i)*4)
#define NV096_SET_COLOR_KEY_COLOR_V                                              31:0


#define NV096_SET_WINDOW_CLIP_TYPE                                         0x000002b4
#define NV096_SET_WINDOW_CLIP_TYPE_V                                             31:0
#define NV096_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                             0x00000000
#define NV096_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                             0x00000001


#define NV096_SET_WINDOW_CLIP_HORIZONTAL(i)                        (0x000002c0+(i)*4)
#define NV096_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                    15:0
#define NV096_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                   31:16


#define NV096_SET_WINDOW_CLIP_VERTICAL(i)                          (0x000002e0+(i)*4)
#define NV096_SET_WINDOW_CLIP_VERTICAL_YMIN                                      15:0
#define NV096_SET_WINDOW_CLIP_VERTICAL_YMAX                                     31:16


#define NV096_SET_ALPHA_TEST_ENABLE                                        0x00000300
#define NV096_SET_ALPHA_TEST_ENABLE_V                                            31:0
#define NV096_SET_ALPHA_TEST_ENABLE_V_FALSE                                0x00000000
#define NV096_SET_ALPHA_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV096_SET_BLEND_ENABLE                                             0x00000304
#define NV096_SET_BLEND_ENABLE_V                                                 31:0
#define NV096_SET_BLEND_ENABLE_V_FALSE                                     0x00000000
#define NV096_SET_BLEND_ENABLE_V_TRUE                                      0x00000001


#define NV096_SET_CULL_FACE_ENABLE                                         0x00000308
#define NV096_SET_CULL_FACE_ENABLE_V                                             31:0
#define NV096_SET_CULL_FACE_ENABLE_V_FALSE                                 0x00000000
#define NV096_SET_CULL_FACE_ENABLE_V_TRUE                                  0x00000001


#define NV096_SET_DEPTH_TEST_ENABLE                                        0x0000030c
#define NV096_SET_DEPTH_TEST_ENABLE_V                                            31:0
#define NV096_SET_DEPTH_TEST_ENABLE_V_FALSE                                0x00000000
#define NV096_SET_DEPTH_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV096_SET_DITHER_ENABLE                                            0x00000310
#define NV096_SET_DITHER_ENABLE_V                                                31:0
#define NV096_SET_DITHER_ENABLE_V_FALSE                                    0x00000000
#define NV096_SET_DITHER_ENABLE_V_TRUE                                     0x00000001


#define NV096_SET_LIGHTING_ENABLE                                          0x00000314
#define NV096_SET_LIGHTING_ENABLE_V                                              31:0
#define NV096_SET_LIGHTING_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_LIGHTING_ENABLE_V_TRUE                                   0x00000001


#define NV096_SET_POINT_PARAMS_ENABLE                                      0x00000318
#define NV096_SET_POINT_PARAMS_ENABLE_V                                          31:0
#define NV096_SET_POINT_PARAMS_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_POINT_PARAMS_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_POINT_SMOOTH_ENABLE                                      0x0000031c
#define NV096_SET_POINT_SMOOTH_ENABLE_V                                          31:0
#define NV096_SET_POINT_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_POINT_SMOOTH_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_LINE_SMOOTH_ENABLE                                       0x00000320
#define NV096_SET_LINE_SMOOTH_ENABLE_V                                           31:0
#define NV096_SET_LINE_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV096_SET_LINE_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV096_SET_POLY_SMOOTH_ENABLE                                       0x00000324
#define NV096_SET_POLY_SMOOTH_ENABLE_V                                           31:0
#define NV096_SET_POLY_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV096_SET_POLY_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV096_SET_SKIN_ENABLE                                              0x00000328
#define NV096_SET_SKIN_ENABLE_V                                                  31:0
#define NV096_SET_SKIN_ENABLE_V_FALSE                                      0x00000000
#define NV096_SET_SKIN_ENABLE_V_TRUE                                       0x00000001


#define NV096_SET_STENCIL_TEST_ENABLE                                      0x0000032c
#define NV096_SET_STENCIL_TEST_ENABLE_V                                          31:0
#define NV096_SET_STENCIL_TEST_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_STENCIL_TEST_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_POLY_OFFSET_POINT_ENABLE                                 0x00000330
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V                                     31:0
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                         0x00000000
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                          0x00000001


#define NV096_SET_POLY_OFFSET_LINE_ENABLE                                  0x00000334
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V                                      31:0
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                          0x00000000
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                           0x00000001


#define NV096_SET_POLY_OFFSET_FILL_ENABLE                                  0x00000338
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V                                      31:0
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                          0x00000000
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                           0x00000001


#define NV096_SET_ALPHA_FUNC                                               0x0000033c
#define NV096_SET_ALPHA_FUNC_V                                                   31:0
#define NV096_SET_ALPHA_FUNC_V_NEVER                                       0x00000200
#define NV096_SET_ALPHA_FUNC_V_LESS                                        0x00000201
#define NV096_SET_ALPHA_FUNC_V_EQUAL                                       0x00000202
#define NV096_SET_ALPHA_FUNC_V_LEQUAL                                      0x00000203
#define NV096_SET_ALPHA_FUNC_V_GREATER                                     0x00000204
#define NV096_SET_ALPHA_FUNC_V_NOTEQUAL                                    0x00000205
#define NV096_SET_ALPHA_FUNC_V_GEQUAL                                      0x00000206
#define NV096_SET_ALPHA_FUNC_V_ALWAYS                                      0x00000207


#define NV096_SET_ALPHA_REF                                                0x00000340


#define NV096_SET_BLEND_FUNC_SFACTOR                                       0x00000344
#define NV096_SET_BLEND_FUNC_SFACTOR_V                                           31:0
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ZERO                                0x00000000
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE                                 0x00000001
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                           0x00000300
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                           0x00000302
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV096_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                           0x00000304
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV096_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                           0x00000306
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                  0x00000308
#define NV096_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV096_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV096_SET_BLEND_FUNC_DFACTOR                                       0x00000348
#define NV096_SET_BLEND_FUNC_DFACTOR_V                                           31:0
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ZERO                                0x00000000
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE                                 0x00000001
#define NV096_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                           0x00000300
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV096_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                           0x00000302
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV096_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                           0x00000304
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV096_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                           0x00000306
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV096_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV096_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV096_SET_BLEND_COLOR                                              0x0000034c
#define NV096_SET_BLEND_COLOR_V                                                  31:0


#define NV096_SET_BLEND_EQUATION                                           0x00000350
#define NV096_SET_BLEND_EQUATION_V                                               31:0
#define NV096_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                           0x0000800A
#define NV096_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                   0x0000800B
#define NV096_SET_BLEND_EQUATION_V_FUNC_ADD                                0x00008006
#define NV096_SET_BLEND_EQUATION_V_MIN                                     0x00008007
#define NV096_SET_BLEND_EQUATION_V_MAX                                     0x00008008


#define NV096_SET_DEPTH_FUNC                                               0x00000354
#define NV096_SET_DEPTH_FUNC_V                                                   31:0
#define NV096_SET_DEPTH_FUNC_V_NEVER                                       0x00000200
#define NV096_SET_DEPTH_FUNC_V_LESS                                        0x00000201
#define NV096_SET_DEPTH_FUNC_V_EQUAL                                       0x00000202
#define NV096_SET_DEPTH_FUNC_V_LEQUAL                                      0x00000203
#define NV096_SET_DEPTH_FUNC_V_GREATER                                     0x00000204
#define NV096_SET_DEPTH_FUNC_V_NOTEQUAL                                    0x00000205
#define NV096_SET_DEPTH_FUNC_V_GEQUAL                                      0x00000206
#define NV096_SET_DEPTH_FUNC_V_ALWAYS                                      0x00000207


#define NV096_SET_COLOR_MASK                                               0x00000358
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                 31:24
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                       0x00000001
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE                                   23:16
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                        0x00000000
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                         0x00000001
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                  15:8
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                       0x00000001
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                    7:0
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                       0x00000000
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                        0x00000001


#define NV096_SET_DEPTH_MASK                                               0x0000035c
#define NV096_SET_DEPTH_MASK_V                                                   31:0
#define NV096_SET_DEPTH_MASK_V_FALSE                                       0x00000000
#define NV096_SET_DEPTH_MASK_V_TRUE                                        0x00000001


#define NV096_SET_STENCIL_MASK                                             0x00000360
#define NV096_SET_STENCIL_MASK_V                                                 31:0


#define NV096_SET_STENCIL_FUNC                                             0x00000364
#define NV096_SET_STENCIL_FUNC_V                                                 31:0
#define NV096_SET_STENCIL_FUNC_V_NEVER                                     0x00000200
#define NV096_SET_STENCIL_FUNC_V_LESS                                      0x00000201
#define NV096_SET_STENCIL_FUNC_V_EQUAL                                     0x00000202
#define NV096_SET_STENCIL_FUNC_V_LEQUAL                                    0x00000203
#define NV096_SET_STENCIL_FUNC_V_GREATER                                   0x00000204
#define NV096_SET_STENCIL_FUNC_V_NOTEQUAL                                  0x00000205
#define NV096_SET_STENCIL_FUNC_V_GEQUAL                                    0x00000206
#define NV096_SET_STENCIL_FUNC_V_ALWAYS                                    0x00000207


#define NV096_SET_STENCIL_FUNC_REF                                         0x00000368
#define NV096_SET_STENCIL_FUNC_REF_V                                             31:0


#define NV096_SET_STENCIL_FUNC_MASK                                        0x0000036c
#define NV096_SET_STENCIL_FUNC_MASK_V                                            31:0


#define NV096_SET_STENCIL_OP_FAIL                                          0x00000370
#define NV096_SET_STENCIL_OP_FAIL_V                                              31:0
#define NV096_SET_STENCIL_OP_FAIL_V_KEEP                                   0x00001E00
#define NV096_SET_STENCIL_OP_FAIL_V_ZERO                                   0x00000000
#define NV096_SET_STENCIL_OP_FAIL_V_REPLACE                                0x00001E01
#define NV096_SET_STENCIL_OP_FAIL_V_INCRSAT                                0x00001E02
#define NV096_SET_STENCIL_OP_FAIL_V_DECRSAT                                0x00001E03
#define NV096_SET_STENCIL_OP_FAIL_V_INVERT                                 0x0000150A
#define NV096_SET_STENCIL_OP_FAIL_V_INCR                                   0x00008507
#define NV096_SET_STENCIL_OP_FAIL_V_DECR                                   0x00008508


#define NV096_SET_STENCIL_OP_ZFAIL                                         0x00000374
#define NV096_SET_STENCIL_OP_ZFAIL_V                                             31:0
#define NV096_SET_STENCIL_OP_ZFAIL_V_KEEP                                  0x00001E00
#define NV096_SET_STENCIL_OP_ZFAIL_V_ZERO                                  0x00000000
#define NV096_SET_STENCIL_OP_ZFAIL_V_REPLACE                               0x00001E01
#define NV096_SET_STENCIL_OP_ZFAIL_V_INCRSAT                               0x00001E02
#define NV096_SET_STENCIL_OP_ZFAIL_V_DECRSAT                               0x00001E03
#define NV096_SET_STENCIL_OP_ZFAIL_V_INVERT                                0x0000150A
#define NV096_SET_STENCIL_OP_ZFAIL_V_INCR                                  0x00008507
#define NV096_SET_STENCIL_OP_ZFAIL_V_DECR                                  0x00008508


#define NV096_SET_STENCIL_OP_ZPASS                                         0x00000378
#define NV096_SET_STENCIL_OP_ZPASS_V                                             31:0
#define NV096_SET_STENCIL_OP_ZPASS_V_KEEP                                  0x00001E00
#define NV096_SET_STENCIL_OP_ZPASS_V_ZERO                                  0x00000000
#define NV096_SET_STENCIL_OP_ZPASS_V_REPLACE                               0x00001E01
#define NV096_SET_STENCIL_OP_ZPASS_V_INCRSAT                               0x00001E02
#define NV096_SET_STENCIL_OP_ZPASS_V_DECRSAT                               0x00001E03
#define NV096_SET_STENCIL_OP_ZPASS_V_INVERT                                0x0000150A
#define NV096_SET_STENCIL_OP_ZPASS_V_INCR                                  0x00008507
#define NV096_SET_STENCIL_OP_ZPASS_V_DECR                                  0x00008508


#define NV096_SET_SHADE_MODE                                               0x0000037c
#define NV096_SET_SHADE_MODE_V                                                   31:0
#define NV096_SET_SHADE_MODE_V_FLAT                                        0x00001D00
#define NV096_SET_SHADE_MODE_V_SMOOTH                                      0x00001D01


#define NV096_SET_LINE_WIDTH                                               0x00000380
#define NV096_SET_LINE_WIDTH_V                                                   31:0


#define NV096_SET_POLYGON_OFFSET_SCALE_FACTOR                              0x00000384
#define NV096_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                  31:0


#define NV096_SET_POLYGON_OFFSET_BIAS                                      0x00000388
#define NV096_SET_POLYGON_OFFSET_BIAS_V                                          31:0


#define NV096_SET_FRONT_POLYGON_MODE                                       0x0000038c
#define NV096_SET_FRONT_POLYGON_MODE_V                                           31:0
#define NV096_SET_FRONT_POLYGON_MODE_V_POINT                               0x00001B00
#define NV096_SET_FRONT_POLYGON_MODE_V_LINE                                0x00001B01
#define NV096_SET_FRONT_POLYGON_MODE_V_FILL                                0x00001B02


#define NV096_SET_BACK_POLYGON_MODE                                        0x00000390
#define NV096_SET_BACK_POLYGON_MODE_V                                            31:0
#define NV096_SET_BACK_POLYGON_MODE_V_POINT                                0x00001B00
#define NV096_SET_BACK_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV096_SET_BACK_POLYGON_MODE_V_FILL                                 0x00001B02


#define NV096_SET_CLIP_MIN                                                 0x00000394
#define NV096_SET_CLIP_MIN_V                                                     31:0


#define NV096_SET_CLIP_MAX                                                 0x00000398
#define NV096_SET_CLIP_MAX_V                                                     31:0


#define NV096_SET_CULL_FACE                                                0x0000039c
#define NV096_SET_CULL_FACE_V                                                    31:0
#define NV096_SET_CULL_FACE_V_FRONT                                        0x00000404
#define NV096_SET_CULL_FACE_V_BACK                                         0x00000405
#define NV096_SET_CULL_FACE_V_FRONT_AND_BACK                               0x00000408


#define NV096_SET_FRONT_FACE                                               0x000003a0
#define NV096_SET_FRONT_FACE_V                                                   31:0
#define NV096_SET_FRONT_FACE_V_CW                                          0x00000900
#define NV096_SET_FRONT_FACE_V_CCW                                         0x00000901


#define NV096_SET_NORMALIZATION_ENABLE                                     0x000003a4
#define NV096_SET_NORMALIZATION_ENABLE_V                                         31:0
#define NV096_SET_NORMALIZATION_ENABLE_V_FALSE                             0x00000000
#define NV096_SET_NORMALIZATION_ENABLE_V_TRUE                              0x00000001


#define NV096_SET_MATERIAL_EMISSION(i)                             (0x000003a8+(i)*4)


#define NV096_SET_MATERIAL_ALPHA                                           0x000003b4


#define NV096_SET_SPECULAR_ENABLE                                          0x000003b8
#define NV096_SET_SPECULAR_ENABLE_V                                              31:0
#define NV096_SET_SPECULAR_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_SPECULAR_ENABLE_V_TRUE                                   0x00000001


#define NV096_SET_LIGHT_ENABLE_MASK                                        0x000003bc
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0                                        1:0
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1                                        3:2
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2                                        5:4
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3                                        7:6
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4                                        9:8
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5                                      11:10
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6                                      13:12
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7                                      15:14
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                            0x00000003


#define NV096_SET_TEXGEN_S(i)                                     (0x000003c0+(i)*16)
#define NV096_SET_TEXGEN_S_V                                                     31:0
#define NV096_SET_TEXGEN_S_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_S_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_S_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_S_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_S_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_S_V_SPHERE_MAP                                    0x00002402
#define NV096_SET_TEXGEN_S_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_T(i)                                     (0x000003c4+(i)*16)
#define NV096_SET_TEXGEN_T_V                                                     31:0
#define NV096_SET_TEXGEN_T_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_T_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_T_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_T_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_T_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_T_V_SPHERE_MAP                                    0x00002402
#define NV096_SET_TEXGEN_T_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_R(i)                                     (0x000003c8+(i)*16)
#define NV096_SET_TEXGEN_R_V                                                     31:0
#define NV096_SET_TEXGEN_R_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_R_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_R_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_R_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_R_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_R_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_Q(i)                                     (0x000003cc+(i)*16)
#define NV096_SET_TEXGEN_Q_V                                                     31:0
#define NV096_SET_TEXGEN_Q_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_Q_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_Q_V_OBJECT_LINEAR                                 0x00002401


#define NV096_SET_TEXTURE_MATRIX0_ENABLE                                   0x000003e0
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V                                       31:0
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                           0x00000000
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                            0x00000001


#define NV096_SET_TEXTURE_MATRIX1_ENABLE                                   0x000003e4
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V                                       31:0
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                           0x00000000
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                            0x00000001


#define NV096_SET_TLMODE                                                   0x000003e8
#define NV096_SET_TLMODE_PASSTHROUGH                                              0:0
#define NV096_SET_TLMODE_PASSTHROUGH_TRUE                                  0x00000001
#define NV096_SET_TLMODE_PASSTHROUGH_FALSE                                 0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_0                                               1:1
#define NV096_SET_TLMODE_W_DIVIDE_0_DISABLE                                0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_0_ENABLE                                 0x00000001
#define NV096_SET_TLMODE_W_DIVIDE_1                                               2:2
#define NV096_SET_TLMODE_W_DIVIDE_1_DISABLE                                0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_1_ENABLE                                 0x00000001


#define NV096_SET_POINT_SIZE                                               0x000003ec
#define NV096_SET_POINT_SIZE_V                                                   31:0


#define NV096_SET_SWATH_WIDTH                                              0x000003f0
#define NV096_SET_SWATH_WIDTH_V                                                  31:0
#define NV096_SET_SWATH_WIDTH_V_8                                          0x00000000
#define NV096_SET_SWATH_WIDTH_V_16                                         0x00000001
#define NV096_SET_SWATH_WIDTH_V_32                                         0x00000002
#define NV096_SET_SWATH_WIDTH_V_64                                         0x00000003


#define NV096_SET_FLAT_SHADE_OP                                            0x000003f4
#define NV096_SET_FLAT_SHADE_OP_V                                                31:0
#define NV096_SET_FLAT_SHADE_OP_V_LAST_VTX                                 0x00000000
#define NV096_SET_FLAT_SHADE_OP_V_FIRST_VTX                                0x00000001


#define NV096_SET_MODEL_VIEW_MATRIX0(i)                            (0x00000400+(i)*4)


#define NV096_SET_MODEL_VIEW_MATRIX1(i)                            (0x00000440+(i)*4)


#define NV096_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                    (0x00000480+(i)*4)


#define NV096_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                    (0x000004c0+(i)*4)


#define NV096_SET_COMPOSITE_MATRIX(i)                              (0x00000500+(i)*4)


#define NV096_SET_TEXTURE_MATRIX0(i)                               (0x00000540+(i)*4)


#define NV096_SET_TEXTURE_MATRIX1(i)                               (0x00000580+(i)*4)


#define NV096_SET_TEXGEN_SPLANE0(i)                                (0x00000600+(i)*4)


#define NV096_SET_TEXGEN_TPLANE0(i)                                (0x00000610+(i)*4)


#define NV096_SET_TEXGEN_RPLANE0(i)                                (0x00000620+(i)*4)


#define NV096_SET_TEXGEN_QPLANE0(i)                                (0x00000630+(i)*4)


#define NV096_SET_TEXGEN_SPLANE1(i)                                (0x00000640+(i)*4)


#define NV096_SET_TEXGEN_TPLANE1(i)                                (0x00000650+(i)*4)


#define NV096_SET_TEXGEN_RPLANE1(i)                                (0x00000660+(i)*4)


#define NV096_SET_TEXGEN_QPLANE1(i)                                (0x00000670+(i)*4)


#define NV096_SET_FOG_PARAMS(i)                                    (0x00000680+(i)*4)


#define NV096_SET_FOG_PLANE(i)                                     (0x0000068c+(i)*4)


#define NV096_SET_SPECULAR_PARAMS(i)                               (0x000006a0+(i)*4)


#define NV096_SET_SCENE_AMBIENT_COLOR(i)                           (0x000006c4+(i)*4)


#define NV096_SET_VIEWPORT_OFFSET(i)                               (0x000006e8+(i)*4)


#define NV096_SET_POINT_PARAMS(i)                                  (0x000006f8+(i)*4)


#define NV096_SET_EYE_POSITION(i)                                  (0x00000718+(i)*4)

#define NV096_SET_EYE_DIRECTION_SW(i)                              (0x0000072c+(i)*4)


#define NV096_SET_LIGHT_AMBIENT_COLOR(i,j)                 (0x00000800+(i)*128+(j)*4)


#define NV096_SET_LIGHT_DIFFUSE_COLOR(i,j)                 (0x0000080c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPECULAR_COLOR(i,j)                (0x00000818+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_RANGE(i)                           (0x00000824+(i)*128)


#define NV096_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)          (0x00000828+(i)*128+(j)*4)


#define NV096_SET_LIGHT_INFINITE_DIRECTION(i,j)            (0x00000834+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPOT_FALLOFF(i,j)                  (0x00000840+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPOT_DIRECTION(i,j)                (0x0000084c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_POSITION(i,j)                (0x0000085c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_ATTENUATION(i,j)             (0x00000868+(i)*128+(j)*4)


#define NV096_SET_VERTEX3F(i)                                      (0x00000c00+(i)*4)


#define NV096_SET_VERTEX4F(i)                                      (0x00000c18+(i)*4)


#define NV096_SET_VERTEX4S(i)                                      (0x00000c28+(i)*4)


#define NV096_SET_NORMAL3F(i)                                      (0x00000c30+(i)*4)


#define NV096_SET_NORMAL3S(i)                                      (0x00000c40+(i)*2)


#define NV096_SET_DIFFUSE_COLOR4F(i)                               (0x00000c50+(i)*4)


#define NV096_SET_DIFFUSE_COLOR3F(i)                               (0x00000c60+(i)*4)


#define NV096_SET_DIFFUSE_COLOR4UB                                         0x00000c6c


#define NV096_SET_SPECULAR_COLOR4F(i)                              (0x00000c70+(i)*4)


#define NV096_SET_SPECULAR_COLOR3F(i)                              (0x00000c80+(i)*4)


#define NV096_SET_SPECULAR_COLOR4UB                                        0x00000c8c


#define NV096_SET_TEXCOORD0_2F(i)                                  (0x00000c90+(i)*4)


#define NV096_SET_TEXCOORD0_2S(i)                                  (0x00000c98+(i)*2)


#define NV096_SET_TEXCOORD0_4F(i)                                  (0x00000ca0+(i)*4)


#define NV096_SET_TEXCOORD0_4S(i)                                  (0x00000cb0+(i)*2)


#define NV096_SET_TEXCOORD1_2F(i)                                  (0x00000cb8+(i)*4)


#define NV096_SET_TEXCOORD1_2S(i)                                  (0x00000cc0+(i)*2)


#define NV096_SET_TEXCOORD1_4F(i)                                  (0x00000cc8+(i)*4)


#define NV096_SET_TEXCOORD1_4S(i)                                  (0x00000cd8+(i)*2)


#define NV096_SET_FOG1F                                                    0x00000ce0


#define NV096_SET_WEIGHT1F                                                 0x00000ce4


#define NV096_SET_EDGE_FLAG                                                0x00000cec


#define NV096_INVALIDATE_VERTEX_CACHE_FILE                                 0x00000cf0


#define NV096_INVALIDATE_VERTEX_FILE                                       0x00000cf4


#define NV096_TL_NOP                                                       0x00000cf8


#define NV096_TL_SYNC                                                      0x00000cfc


#define NV096_SET_VERTEX_ARRAY_OFFSET                                      0x00000d00
#define NV096_SET_VERTEX_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_VERTEX_ARRAY_FORMAT                                      0x00000d04
#define NV096_SET_VERTEX_ARRAY_FORMAT_W                                         31:24
#define NV096_SET_VERTEX_ARRAY_FORMAT_W_NONE                               0x00000000
#define NV096_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                            0x00000001
#define NV096_SET_VERTEX_ARRAY_FORMAT_STRIDE                                     23:8
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_2                               0x00000002
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_4                               0x00000004
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_DIFFUSE_ARRAY_OFFSET                                     0x00000d08
#define NV096_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                    27:0


#define NV096_SET_DIFFUSE_ARRAY_FORMAT                                     0x00000d0c
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                    31:8
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                       7:4
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                       3:0
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA             0x00000000
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA             0x00000004


#define NV096_SET_SPECULAR_ARRAY_OFFSET                                    0x00000d10
#define NV096_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                   27:0


#define NV096_SET_SPECULAR_ARRAY_FORMAT                                    0x00000d14
#define NV096_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                   31:8
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE                                      7:4
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE                                      3:0
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004


#define NV096_SET_TEX_COORD0_ARRAY_OFFSET                                  0x00000d18
#define NV096_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                 27:0


#define NV096_SET_TEX_COORD0_ARRAY_FORMAT                                  0x00000d1c
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                 31:8
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                    7:4
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                    3:0
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV096_SET_TEX_COORD1_ARRAY_OFFSET                                  0x00000d20
#define NV096_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                 27:0


#define NV096_SET_TEX_COORD1_ARRAY_FORMAT                                  0x00000d24
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                 31:8
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                    7:4
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                    3:0
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV096_SET_NORMAL_ARRAY_OFFSET                                      0x00000d28
#define NV096_SET_NORMAL_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_NORMAL_ARRAY_FORMAT                                      0x00000d2c
#define NV096_SET_NORMAL_ARRAY_FORMAT_STRIDE                                     31:8
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_WEIGHT_ARRAY_OFFSET                                      0x00000d30
#define NV096_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_WEIGHT_ARRAY_FORMAT                                      0x00000d34
#define NV096_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                     31:8
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                               0x00000001
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_FOG_ARRAY_OFFSET                                         0x00000d38
#define NV096_SET_FOG_ARRAY_OFFSET_OFFSET                                        27:0


#define NV096_SET_FOG_ARRAY_FORMAT                                         0x00000d3c
#define NV096_SET_FOG_ARRAY_FORMAT_STRIDE                                        31:8
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE                                           7:4
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE_0                                  0x00000000
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE_1                                  0x00000001
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE                                           3:0
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                              0x00000001
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                              0x00000002

#define NV096_SET_LOGIC_OP_ENABLE                                          0x00000d40
#define NV096_SET_LOGIC_OP_ENABLE_V                                              31:0
#define NV096_SET_LOGIC_OP_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_LOGIC_OP_ENABLE_V_TRUE                                   0x00000001

#define NV096_SET_LOGIC_OP                                                 0x00000d44
#define NV096_SET_LOGIC_OP_V                                                     31:0
#define NV096_SET_LOGIC_OP_V_CLEAR                                         0x00001500
#define NV096_SET_LOGIC_OP_V_AND                                           0x00001501
#define NV096_SET_LOGIC_OP_V_AND_REVERSE                                   0x00001502
#define NV096_SET_LOGIC_OP_V_COPY                                          0x00001503
#define NV096_SET_LOGIC_OP_V_AND_INVERTED                                  0x00001504
#define NV096_SET_LOGIC_OP_V_NOOP                                          0x00001505
#define NV096_SET_LOGIC_OP_V_XOR                                           0x00001506
#define NV096_SET_LOGIC_OP_V_OR                                            0x00001507
#define NV096_SET_LOGIC_OP_V_NOR                                           0x00001508
#define NV096_SET_LOGIC_OP_V_EQUIV                                         0x00001509
#define NV096_SET_LOGIC_OP_V_INVERT                                        0x0000150a
#define NV096_SET_LOGIC_OP_V_OR_REVERSE                                    0x0000150b
#define NV096_SET_LOGIC_OP_V_COPY_INVERTED                                 0x0000150c
#define NV096_SET_LOGIC_OP_V_OR_INVERTED                                   0x0000150d
#define NV096_SET_LOGIC_OP_V_NAND                                          0x0000150e
#define NV096_SET_LOGIC_OP_V_SET                                           0x0000150f

#define NV096_SET_BEGIN_END                                                0x00000dfc
#define NV096_SET_BEGIN_END_OP                                                   31:0
#define NV096_SET_BEGIN_END_OP_END                                         0x00000000
#define NV096_SET_BEGIN_END_OP_POINTS                                      0x00000001
#define NV096_SET_BEGIN_END_OP_LINES                                       0x00000002
#define NV096_SET_BEGIN_END_OP_LINE_LOOP                                   0x00000003
#define NV096_SET_BEGIN_END_OP_LINE_STRIP                                  0x00000004
#define NV096_SET_BEGIN_END_OP_TRIANGLES                                   0x00000005
#define NV096_SET_BEGIN_END_OP_TRIANGLE_STRIP                              0x00000006
#define NV096_SET_BEGIN_END_OP_TRIANGLE_FAN                                0x00000007
#define NV096_SET_BEGIN_END_OP_QUADS                                       0x00000008
#define NV096_SET_BEGIN_END_OP_QUAD_STRIP                                  0x00000009
#define NV096_SET_BEGIN_END_OP_POLYGON                                     0x0000000A


#define NV096_ARRAY_ELEMENT16(i)                                   (0x00000e00+(i)*2)


#define NV096_SET_BEGIN_END2                                               0x000010fc
#define NV096_SET_BEGIN_END2_OP                                                  31:0
#define NV096_SET_BEGIN_END2_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END2_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END2_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END2_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END2_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END2_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END2_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END2_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END2_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END2_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END2_OP_POLYGON                                    0x0000000A


#define NV096_ARRAY_ELEMENT32(i)                                   (0x00001100+(i)*4)


#define NV096_SET_BEGIN_END3                                               0x000013fc
#define NV096_SET_BEGIN_END3_OP                                                  31:0
#define NV096_SET_BEGIN_END3_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END3_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END3_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END3_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END3_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END3_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END3_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END3_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END3_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END3_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END3_OP_POLYGON                                    0x0000000A


#define NV096_DRAW_ARRAYS(i)                                       (0x00001400+(i)*4)
#define NV096_DRAW_ARRAYS_COUNT                                                 31:24
#define NV096_DRAW_ARRAYS_START_INDEX                                            23:0


/* These methods are accepted between a begin/end. */
#define NV096_SET_MATERIAL_EMISSION_SW(i)                          (0x00001628+(i)*4)
#define NV096_SET_VIEWPORT_OFFSET_SW(i)                            (0x00001638+(i)*4)
/* The PASSTHRU_VIEWPORT_OFFSET aliases to row 1 of the MODEL_VIEW_MATRIX1 */
#define NV096_SET_PASSTHRU_VIEWPORT_OFFSET_SW(i)                   (0x00001648+(i)*4)


#define NV096_SET_BEGIN_END4                                               0x000017fc
#define NV096_SET_BEGIN_END4_OP                                                  31:0
#define NV096_SET_BEGIN_END4_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END4_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END4_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END4_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END4_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END4_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END4_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END4_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END4_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END4_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END4_OP_POLYGON                                    0x0000000A


#define NV096_INLINE_ARRAY(i)                                      (0x00001800+(i)*4)



typedef NvV32 Nv1196Typedef;


/* class NV11_CELSIUS_PRIMITIVE */
#define  NV11_CELSIUS_PRIMITIVE                                    (0x00001196)
/* NvNotification[] elements */
#define NV1196_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV1196_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV1196_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV1196_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV1196_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV1196_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV1196_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved0004[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved0114[0xc/4];
    NvV32 SetFlipRead;
    NvV32 SetFlipWrite;
    NvV32 SetFlipModulo;
    NvV32 FlipIncrementWrite;
    NvV32 FlipStall;
    NvV32 Reserved0134[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved0144[0x3c/4];
    NvU32 SetContextDmaNotifies;
    NvU32 SetContextDmaA;
    NvU32 SetContextDmaB;
    NvU32 SetContextDmaVertex;
    NvU32 SetContextDmaState;
    NvU32 SetContextDmaColor;
    NvU32 SetContextDmaZeta;
    NvV32 Reserved019c[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved0258[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvU32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved02b8[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvU32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvU32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvU32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvU32 SetStencilFuncRef;
    NvU32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvU32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvF32 SetMaterialEmission[3];
    NvF32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
    NvV32 S;
    NvV32 T;
    NvV32 R;
    NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvU32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved03f8[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved05c0[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved069c[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved06b8[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved06d0[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0738[0xc8/4];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvF32 LocalRange;
    NvF32 InfiniteHalfVector[3];
    NvF32 InfiniteDirection[3];
    NvF32 SpotFalloff[3];
    NvF32 SpotDirection[4];
    NvF32 LocalPosition[3];
    NvF32 LocalAttenuation[3];
    NvV32 Reserved0874[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0c0c[0xc/4];
    NvF32 SetVertex4f[4];
    NvS32 SetVertex4s[2];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0c3c[0x4/4];
    NvS32 SetNormal3s[2];
    NvV32 Reserved0c48[0x8/4];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvU32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvU32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS32 SetTexcoord0_2s;
    NvV32 Reserved0c9c[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS32 SetTexcoord0_4s[2];
    NvF32 SetTexcoord1_2f[2];
    NvS32 SetTexcoord1_2s;
    NvV32 Reserved0cc4[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS32 SetTexcoord1_4s[2];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved0ce8[0x4/4];
    NvU32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 SetLogicOpEnable;
    NvV32 SetLogicOp;
    NvV32 Reserved0d48[0xb4/4];
    NvV32 SetBeginEnd;
    NvV32 ArrayElement16[128];
    NvV32 Reserved1000[0xfc/4];
    NvV32 SetBeginEnd2;
    NvU32 ArrayElement32[64];
    NvV32 Reserved1200[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 SetMaterialEmissionSW[3];
    NvV32 Reserved1634[1];
    NvF32 SetViewportOffsetSW[4];
    NvF32 SetPassthruViewportOffsetSW[4];
    NvV32 Reserved1648[0x1a4/4];
    NvV32 SetBeginEnd4;
    NvU32 InlineArray[512];
} Nv11CelsiusPrimitive;

#define NV1196_TYPEDEF                                      Nv11CelsiusPrimitive
#define NV1196_SET_OBJECT                                          (0x00000000)

#define NV1196_NO_OPERATION                                                0x00000100
#define NV1196_NO_OPERATION_V                                                    31:0

#define NV1196_FLUSH                                                       0x00000728
#define NV1196_FLUSH_V                                                           31:0

#define NV1196_NOTIFY                                                      0x00000104
#define NV1196_NOTIFY_TYPE                                                       31:0
#define NV1196_NOTIFY_TYPE_WRITE_ONLY                                      0x00000000
#define NV1196_NOTIFY_TYPE_WRITE_THEN_AWAKEN                               0x00000001

#define NV1196_SET_WARNING_ENABLE                                          0x00000108
#define NV1196_SET_WARNING_ENABLE_V                                              31:0
#define NV1196_SET_WARNING_ENABLE_V_STOP                                   0x00000000
#define NV1196_SET_WARNING_ENABLE_V_WRITE_ONLY                             0x00000001
#define NV1196_SET_WARNING_ENABLE_V_WRITE_THEN_AWAKEN                      0x00000002

#define NV1196_GET_STATE                                                   0x0000010c
#define NV1196_GET_STATE_GETSTATE                                                31:0
#define NV1196_GET_STATE_GETSTATE_ALL_STATE                                0x00000001
#define NV1196_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                  0x00000002
#define NV1196_GET_STATE_GETSTATE_RENDERING_STATE                          0x00000003
#define NV1196_GET_STATE_GETSTATE_GEOMETRY_STATE                           0x00000004

#define NV1196_WAIT_FOR_IDLE                                               0x00000110
#define NV1196_WAIT_FOR_IDLE_V                                                   31:0

#define NV1196_PM_TRIGGER                                                  0x00000140
#define NV1196_PM_TRIGGER_V                                                      31:0
#define NV1196_PM_TRIGGER_V_NOP                                            0x00000000
#define NV1196_PM_TRIGGER_V_TRIGGER                                        0x00000001

#define NV1196_SET_FLIP_READ                                               0x00000120
#define NV1196_SET_FLIP_WRITE                                              0x00000124
#define NV1196_SET_FLIP_MODULO                                             0x00000128
#define NV1196_FLIP_INCREMENT_WRITE                                        0x0000012c
#define NV1196_FLIP_STALL                                                  0x00000130

#define NV1196_SET_CONTEXT_DMA_NOTIFIES                                    0x00000180
#define NV1196_SET_CONTEXT_DMA_NOTIFIES_V                                        31:0

#define NV1196_SET_CONTEXT_DMA_A                                           0x00000184
#define NV1196_SET_CONTEXT_DMA_A_V                                               31:0

#define NV1196_SET_CONTEXT_DMA_B                                           0x00000188
#define NV1196_SET_CONTEXT_DMA_B_V                                               31:0

#define NV1196_SET_CONTEXT_DMA_VERTEX                                      0x0000018c
#define NV1196_SET_CONTEXT_DMA_VERTEX_V                                          31:0

#define NV1196_SET_CONTEXT_DMA_STATE                                       0x00000190
#define NV1196_SET_CONTEXT_DMA_STATE_V                                           31:0

#define NV1196_SET_CONTEXT_DMA_COLOR                                       0x00000194
#define NV1196_SET_CONTEXT_DMA_COLOR_V                                           31:0

#define NV1196_SET_CONTEXT_DMA_ZETA                                        0x00000198
#define NV1196_SET_CONTEXT_DMA_ZETA_V                                            31:0

#define NV1196_SET_SURFACE_CLIP_HORIZONTAL                                 0x00000200
#define NV1196_SET_SURFACE_CLIP_HORIZONTAL_X                                     15:0
#define NV1196_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                31:16

#define NV1196_SET_SURFACE_CLIP_VERTICAL                                   0x00000204
#define NV1196_SET_SURFACE_CLIP_VERTICAL_Y                                       15:0
#define NV1196_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                 31:16

#define NV1196_SET_SURFACE_FORMAT                                          0x00000208
#define NV1196_SET_SURFACE_FORMAT_COLOR                                           7:0
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5               0x00000001
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5               0x00000002
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                          0x00000003
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8               0x00000004
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8               0x00000005
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8           0x00000006
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8           0x00000007
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                        0x00000008
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_B8                              0x00000009
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_G8B8                            0x0000000A
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1R5G5B5_Z1R5G5B5           0x00000011
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1R5G5B5_O1R5G5B5           0x00000012
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_R5G6B5                      0x00000013
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X8R8G8B8_Z8R8G8B8           0x00000014
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X8R8G8B8_O8R8G8B8           0x00000015
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1A7R8G8B8_Z1A7R8G8B8       0x00000016
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1A7R8G8B8_O1A7R8G8B8       0x00000017
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_A8R8G8B8                    0x00000018
#define NV1196_SET_SURFACE_FORMAT_TYPE                                           15:8
#define NV1196_SET_SURFACE_FORMAT_TYPE_PITCH                               0x00000001
#define NV1196_SET_SURFACE_FORMAT_TYPE_SWIZZLE                             0x00000002
#define NV1196_SET_SURFACE_FORMAT_WIDTH                                         23:16
#define NV1196_SET_SURFACE_FORMAT_WIDTH_1                                  0x00000000
#define NV1196_SET_SURFACE_FORMAT_WIDTH_2                                  0x00000001
#define NV1196_SET_SURFACE_FORMAT_WIDTH_4                                  0x00000002
#define NV1196_SET_SURFACE_FORMAT_WIDTH_8                                  0x00000003
#define NV1196_SET_SURFACE_FORMAT_WIDTH_16                                 0x00000004
#define NV1196_SET_SURFACE_FORMAT_WIDTH_32                                 0x00000005
#define NV1196_SET_SURFACE_FORMAT_WIDTH_64                                 0x00000006
#define NV1196_SET_SURFACE_FORMAT_WIDTH_128                                0x00000007
#define NV1196_SET_SURFACE_FORMAT_WIDTH_256                                0x00000008
#define NV1196_SET_SURFACE_FORMAT_WIDTH_512                                0x00000009
#define NV1196_SET_SURFACE_FORMAT_WIDTH_1024                               0x0000000A
#define NV1196_SET_SURFACE_FORMAT_WIDTH_2048                               0x0000000B
#define NV1196_SET_SURFACE_FORMAT_HEIGHT                                        31:24
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_1                                 0x00000000
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_2                                 0x00000001
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_4                                 0x00000002
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_8                                 0x00000003
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_16                                0x00000004
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_32                                0x00000005
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_64                                0x00000006
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_128                               0x00000007
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_256                               0x00000008
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_512                               0x00000009
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_1024                              0x0000000A
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_2048                              0x0000000B

#define NV1196_SET_SURFACE_PITCH                                           0x0000020c
#define NV1196_SET_SURFACE_PITCH_COLOR                                           15:0
#define NV1196_SET_SURFACE_PITCH_ZETA                                           31:16

#define NV1196_SET_SURFACE_COLOR_OFFSET                                    0x00000210
#define NV1196_SET_SURFACE_COLOR_OFFSET_V                                        31:0

#define NV1196_SET_SURFACE_ZETA_OFFSET                                     0x00000214
#define NV1196_SET_SURFACE_ZETA_OFFSET_V                                         31:0

#define NV1196_SET_TEXTURE_OFFSET(i)                               (0x00000218+(i)*4)
#define NV1196_SET_TEXTURE_OFFSET_V                                              31:0

#define NV1196_SET_TEXTURE_FORMAT(i)                               (0x00000220+(i)*4)
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA                                     1:0
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                  2:2
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                     0x00000000
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                      0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                      4:3
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                        0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH                                      6:5
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                        0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_COLOR                                          11:7
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_Y8                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_AY8                             0x00000001
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                        0x00000003
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                        0x00000004
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                          0x00000005
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                        0x00000006
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                        0x00000007
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                     0x00000008
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                       0x00000009
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                     0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                     0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                   0x0000000C
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                  0x0000000E
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                  0x0000000F
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                  0x00000010
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                    0x00000011
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                  0x00000012
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                        0x00000013
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                       0x00000014
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                     0x00000015
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                      0x00000016
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                      0x00000017
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                    0x00000018
#define NV1196_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U                                   19:16
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                            0x00000000
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                            0x00000003
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                           0x00000004
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                           0x00000005
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                           0x00000006
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                          0x00000007
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                          0x00000008
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                          0x00000009
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                         0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                         0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V                                   23:20
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                            0x00000000
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                            0x00000003
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                           0x00000004
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                           0x00000005
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                           0x00000006
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                          0x00000007
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                          0x00000008
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                          0x00000009
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                         0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                         0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                               26:24
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                     0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                   0x00000002
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                    0x00000003
#define NV1196_SET_TEXTURE_FORMAT_WRAPU                                         27:27
#define NV1196_SET_TEXTURE_FORMAT_WRAPU_FALSE                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_WRAPU_TRUE                               0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                               30:28
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                     0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                   0x00000002
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                    0x00000003
#define NV1196_SET_TEXTURE_FORMAT_WRAPV                                         31:31
#define NV1196_SET_TEXTURE_FORMAT_WRAPV_FALSE                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_WRAPV_TRUE                               0x00000001

#define NV1196_SET_TEXTURE_CONTROL0(i)                             (0x00000228+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE                                      31:30
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE_FALSE                           0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE_TRUE                            0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                               29:18
#define NV1196_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                17:6
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                 5:4
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                        0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                        0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                            3:3
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE               0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                             2:2
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                 0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                           1:0
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE              0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA              0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA               0x00000002
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL               0x00000003

#define NV1196_SET_TEXTURE_CONTROL1(i)                             (0x00000230+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                 31:16

#define NV1196_SET_TEXTURE_CONTROL2(i)                             (0x00000238+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL2_PERTURB_DU                                   11:0
#define NV1196_SET_TEXTURE_CONTROL2_PERTURB_DV                                  23:12
#define NV1196_SET_TEXTURE_CONTROL2_IMAGE_LODF                                  31:24

#define NV1196_SET_TEXTURE_IMAGE_RECT(i)                           (0x00000240+(i)*4)
#define NV1196_SET_TEXTURE_IMAGE_RECT_WIDTH                                     31:16
#define NV1196_SET_TEXTURE_IMAGE_RECT_HEIGHT                                     15:0

#define NV1196_SET_TEXTURE_FILTER(i)                               (0x00000248+(i)*4)
#define NV1196_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                  12:0
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN                                    27:24
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                       0x00000001
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                        0x00000002
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                    0x00000003
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                     0x00000004
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST              0x00000005
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR               0x00000006
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG                                    31:28
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                       0x00000001
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                        0x00000002

#define NV1196_SET_TEXTURE_PALETTE(i)                              (0x00000250+(i)*4)
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA                                    5:0
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                           0x00000000
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                           0x00000001
#define NV1196_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                31:6

#define NV1196_SET_COMBINER_ALPHA_ICW(i)                           (0x00000260+(i)*4)
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP                                     31:29
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA                                   28:28
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE                                  27:24
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP                                     23:21
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA                                   20:20
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE                                  19:16
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP                                     15:13
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA                                   12:12
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE                                   11:8
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP                                       7:5
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA                                     4:4
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE                                    3:0
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                       0x0000000D

#define NV1196_SET_COMBINER_COLOR_ICW(i)                           (0x00000268+(i)*4)
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP                                     31:29
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA                                   28:28
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE                                  27:24
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP                                     23:21
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA                                   20:20
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE                                  19:16
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP                                     15:13
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA                                   12:12
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE                                   11:8
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP                                       7:5
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA                                     4:4
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE                                    3:0
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                       0x0000000D

#define NV1196_SET_COMBINE_FACTOR(i)                               (0x00000270+(i)*4)
#define NV1196_SET_COMBINE_FACTOR_BLUE                                            7:0
#define NV1196_SET_COMBINE_FACTOR_GREEN                                          15:8
#define NV1196_SET_COMBINE_FACTOR_RED                                           23:16
#define NV1196_SET_COMBINE_FACTOR_ALPHA                                         31:24

#define NV1196_SET_COMBINER_ALPHA_OCW(i)                           (0x00000278+(i)*4)
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION                                 31:15
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                14:14
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST                                    11:8
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST                                      7:4
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                         0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                         0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                         0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                         0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                         0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                         0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                         0x0000000D
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST                                      3:0
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                         0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                         0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                         0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                         0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                         0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                         0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                         0x0000000D

#define NV1196_SET_COMBINER0_COLOR_OCW                                     0x00000280
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION                                31:15
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                   0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS              0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1              0x00000002
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS         0x00000003
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2              0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1             0x00000006
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                               14:14
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                    0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                     0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                            13:13
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                            12:12
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST                                   11:8
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                       0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                       0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                       0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                       0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                       0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                       0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                       0x0000000D
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST                                     7:4
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST                                     3:0
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                        0x0000000D

#define NV1196_SET_COMBINER1_COLOR_OCW                                     0x00000284
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                          31:28
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                 0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                 0x00000002
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT                               27:27
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                      0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                      0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION                                26:15
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                   0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS              0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1              0x00000002
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS         0x00000003
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2              0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1             0x00000006
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                               14:14
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                    0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                     0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                            13:13
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                            12:12
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST                                   11:8
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                       0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                       0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                       0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                       0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                       0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                       0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                       0x0000000D
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST                                     7:4
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST                                     3:0
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                        0x0000000D

#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0                               0x00000288
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                          31:29
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                            28:28
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                           27:24
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                          23:21
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                            20:20
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                           19:16
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                          15:13
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                            12:12
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                            11:8
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                            7:5
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                              4:4
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                             3:0
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD          0x0000000F

#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1                               0x0000028c
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                          31:29
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                            28:28
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                           27:24
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                          23:21
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                            20:20
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                           19:16
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                          15:13
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                            12:12
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                            11:8
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                       7:7
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE          0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE           0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5               6:6
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE  0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE   0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12              5:0
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE  0x00000020

#define NV1196_SET_CONTROL0                                                0x00000290
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA                                  31:24
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                       0x00000000
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                        0x00000001
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE                                  23:20
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                       0x00000000
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                        0x00000001
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                19:16
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_CONTROL0_Z_FORMAT                                            15:12
#define NV1196_SET_CONTROL0_Z_FORMAT_FIXED                                 0x00000000
#define NV1196_SET_CONTROL0_Z_FORMAT_FLOAT                                 0x00000001
#define NV1196_SET_CONTROL0_WBUFFER_SELECT                                       11:8
#define NV1196_SET_CONTROL0_WBUFFER_SELECT_0                               0x00000000
#define NV1196_SET_CONTROL0_WBUFFER_SELECT_1                               0x00000001
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE                                  7:0
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                      0x00000001

#define NV1196_SET_LIGHT_CONTROL                                           0x00000294
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE                                       31:16
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE_FALSE                            0x00000000
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE_TRUE                             0x00000001
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE                                15:2
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                   0x00000000
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT               0x00000001
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                             1:1
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                0x00000000
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                 0x00000001
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                               0:0
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                  0x00000000
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                   0x00000001

#define NV1196_SET_COLOR_MATERIAL                                          0x00000298
#define NV1196_SET_COLOR_MATERIAL_V                                              31:0
#define NV1196_SET_COLOR_MATERIAL_V_DISABLED                               0x00000000
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION                               0x00000001
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT                                0x00000002
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                       0x00000003
#define NV1196_SET_COLOR_MATERIAL_V_DIFFUSE                                0x00000004
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                       0x00000005
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                        0x00000006
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE               0x00000007
#define NV1196_SET_COLOR_MATERIAL_V_SPECULAR                               0x00000008
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                      0x00000009
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                       0x0000000A
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR              0x0000000B
#define NV1196_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                       0x0000000C
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR              0x0000000D
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR               0x0000000E
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR      0x0000000F

#define NV1196_SET_FOG_MODE                                                0x0000029c
#define NV1196_SET_FOG_MODE_FOG_MODE                                             31:0
#define NV1196_SET_FOG_MODE_FOG_MODE_LINEAR                                0x00002601
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP                                   0x00000800
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP2                                  0x00000801
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP_ABS                               0x00000802
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP2_ABS                              0x00000803

#define NV1196_SET_FOG_GEN_MODE                                            0x000002a0
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE                                     31:0
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                     0x00000000
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                        0x00000001
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                        0x00000002
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                    0x00000003

#define NV1196_SET_FOG_ENABLE                                              0x000002a4
#define NV1196_SET_FOG_ENABLE_V                                                  31:0
#define NV1196_SET_FOG_ENABLE_V_FALSE                                      0x00000000
#define NV1196_SET_FOG_ENABLE_V_TRUE                                       0x00000001

#define NV1196_SET_FOG_COLOR                                               0x000002a8
#define NV1196_SET_FOG_COLOR_RED                                                  7:0
#define NV1196_SET_FOG_COLOR_GREEN                                               15:8
#define NV1196_SET_FOG_COLOR_BLUE                                               23:16
#define NV1196_SET_FOG_COLOR_ALPHA                                              31:24

#define NV1196_SET_COLOR_KEY_COLOR(i)                              (0x000002ac+(i)*4)
#define NV1196_SET_COLOR_KEY_COLOR_V                                             31:0

#define NV1196_SET_WINDOW_CLIP_TYPE                                        0x000002b4
#define NV1196_SET_WINDOW_CLIP_TYPE_V                                            31:0
#define NV1196_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                            0x00000000
#define NV1196_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                            0x00000001

#define NV1196_SET_WINDOW_CLIP_HORIZONTAL(i)                       (0x000002c0+(i)*4)
#define NV1196_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                   11:0
#define NV1196_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                  27:16

#define NV1196_SET_WINDOW_CLIP_VERTICAL(i)                         (0x000002e0+(i)*4)
#define NV1196_SET_WINDOW_CLIP_VERTICAL_YMIN                                     11:0
#define NV1196_SET_WINDOW_CLIP_VERTICAL_YMAX                                    27:16

#define NV1196_SET_ALPHA_TEST_ENABLE                                       0x00000300
#define NV1196_SET_ALPHA_TEST_ENABLE_V                                           31:0
#define NV1196_SET_ALPHA_TEST_ENABLE_V_FALSE                               0x00000000
#define NV1196_SET_ALPHA_TEST_ENABLE_V_TRUE                                0x00000001

#define NV1196_SET_BLEND_ENABLE                                            0x00000304
#define NV1196_SET_BLEND_ENABLE_V                                                31:0
#define NV1196_SET_BLEND_ENABLE_V_FALSE                                    0x00000000
#define NV1196_SET_BLEND_ENABLE_V_TRUE                                     0x00000001

#define NV1196_SET_CULL_FACE_ENABLE                                        0x00000308
#define NV1196_SET_CULL_FACE_ENABLE_V                                            31:0
#define NV1196_SET_CULL_FACE_ENABLE_V_FALSE                                0x00000000
#define NV1196_SET_CULL_FACE_ENABLE_V_TRUE                                 0x00000001

#define NV1196_SET_DEPTH_TEST_ENABLE                                       0x0000030c
#define NV1196_SET_DEPTH_TEST_ENABLE_V                                           31:0
#define NV1196_SET_DEPTH_TEST_ENABLE_V_FALSE                               0x00000000
#define NV1196_SET_DEPTH_TEST_ENABLE_V_TRUE                                0x00000001

#define NV1196_SET_DITHER_ENABLE                                           0x00000310
#define NV1196_SET_DITHER_ENABLE_V                                               31:0
#define NV1196_SET_DITHER_ENABLE_V_FALSE                                   0x00000000
#define NV1196_SET_DITHER_ENABLE_V_TRUE                                    0x00000001

#define NV1196_SET_LIGHTING_ENABLE                                         0x00000314
#define NV1196_SET_LIGHTING_ENABLE_V                                             31:0
#define NV1196_SET_LIGHTING_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_LIGHTING_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_POINT_PARAMS_ENABLE                                     0x00000318
#define NV1196_SET_POINT_PARAMS_ENABLE_V                                         31:0
#define NV1196_SET_POINT_PARAMS_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_POINT_PARAMS_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_POINT_SMOOTH_ENABLE                                     0x0000031c
#define NV1196_SET_POINT_SMOOTH_ENABLE_V                                         31:0
#define NV1196_SET_POINT_SMOOTH_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_POINT_SMOOTH_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_LINE_SMOOTH_ENABLE                                      0x00000320
#define NV1196_SET_LINE_SMOOTH_ENABLE_V                                          31:0
#define NV1196_SET_LINE_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV1196_SET_LINE_SMOOTH_ENABLE_V_TRUE                               0x00000001

#define NV1196_SET_POLY_SMOOTH_ENABLE                                      0x00000324
#define NV1196_SET_POLY_SMOOTH_ENABLE_V                                          31:0
#define NV1196_SET_POLY_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV1196_SET_POLY_SMOOTH_ENABLE_V_TRUE                               0x00000001

#define NV1196_SET_SKIN_ENABLE                                             0x00000328
#define NV1196_SET_SKIN_ENABLE_V                                                 31:0
#define NV1196_SET_SKIN_ENABLE_V_FALSE                                     0x00000000
#define NV1196_SET_SKIN_ENABLE_V_TRUE                                      0x00000001

#define NV1196_SET_STENCIL_TEST_ENABLE                                     0x0000032c
#define NV1196_SET_STENCIL_TEST_ENABLE_V                                         31:0
#define NV1196_SET_STENCIL_TEST_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_STENCIL_TEST_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_POLY_OFFSET_POINT_ENABLE                                0x00000330
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V                                    31:0
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                        0x00000000
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                         0x00000001

#define NV1196_SET_POLY_OFFSET_LINE_ENABLE                                 0x00000334
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V                                     31:0
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                         0x00000000
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                          0x00000001

#define NV1196_SET_POLY_OFFSET_FILL_ENABLE                                 0x00000338
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V                                     31:0
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                         0x00000000
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                          0x00000001

#define NV1196_SET_ALPHA_FUNC                                              0x0000033c
#define NV1196_SET_ALPHA_FUNC_V                                                  31:0
#define NV1196_SET_ALPHA_FUNC_V_NEVER                                      0x00000200
#define NV1196_SET_ALPHA_FUNC_V_LESS                                       0x00000201
#define NV1196_SET_ALPHA_FUNC_V_EQUAL                                      0x00000202
#define NV1196_SET_ALPHA_FUNC_V_LEQUAL                                     0x00000203
#define NV1196_SET_ALPHA_FUNC_V_GREATER                                    0x00000204
#define NV1196_SET_ALPHA_FUNC_V_NOTEQUAL                                   0x00000205
#define NV1196_SET_ALPHA_FUNC_V_GEQUAL                                     0x00000206
#define NV1196_SET_ALPHA_FUNC_V_ALWAYS                                     0x00000207

#define NV1196_SET_ALPHA_REF                                               0x00000340
#define NV1196_SET_ALPHA_REF_V                                                   31:0

#define NV1196_SET_BLEND_FUNC_SFACTOR                                      0x00000344
#define NV1196_SET_BLEND_FUNC_SFACTOR_V                                          31:0
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ZERO                               0x00000000
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE                                0x00000001
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                          0x00000300
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                0x00000301
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                          0x00000302
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                0x00000303
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                          0x00000304
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                0x00000305
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                          0x00000306
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                0x00000307
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                 0x00000308
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                     0x00008001
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR           0x00008002
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                     0x00008003
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA           0x00008004

#define NV1196_SET_BLEND_FUNC_DFACTOR                                      0x00000348
#define NV1196_SET_BLEND_FUNC_DFACTOR_V                                          31:0
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ZERO                               0x00000000
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE                                0x00000001
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                          0x00000300
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                0x00000301
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                          0x00000302
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                0x00000303
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                          0x00000304
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                0x00000305
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                          0x00000306
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                0x00000307
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA_SATURATE                 0x00000308
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                     0x00008001
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR           0x00008002
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                     0x00008003
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA           0x00008004

#define NV1196_SET_BLEND_COLOR                                             0x0000034c
#define NV1196_SET_BLEND_COLOR_V                                                 31:0

#define NV1196_SET_BLEND_EQUATION                                          0x00000350
#define NV1196_SET_BLEND_EQUATION_V                                              31:0
#define NV1196_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                          0x0000800A
#define NV1196_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                  0x0000800B
#define NV1196_SET_BLEND_EQUATION_V_FUNC_ADD                               0x00008006
#define NV1196_SET_BLEND_EQUATION_V_MIN                                    0x00008007
#define NV1196_SET_BLEND_EQUATION_V_MAX                                    0x00008008

#define NV1196_SET_DEPTH_FUNC                                              0x00000354
#define NV1196_SET_DEPTH_FUNC_V                                                  31:0
#define NV1196_SET_DEPTH_FUNC_V_NEVER                                      0x00000200
#define NV1196_SET_DEPTH_FUNC_V_LESS                                       0x00000201
#define NV1196_SET_DEPTH_FUNC_V_EQUAL                                      0x00000202
#define NV1196_SET_DEPTH_FUNC_V_LEQUAL                                     0x00000203
#define NV1196_SET_DEPTH_FUNC_V_GREATER                                    0x00000204
#define NV1196_SET_DEPTH_FUNC_V_NOTEQUAL                                   0x00000205
#define NV1196_SET_DEPTH_FUNC_V_GEQUAL                                     0x00000206
#define NV1196_SET_DEPTH_FUNC_V_ALWAYS                                     0x00000207

#define NV1196_SET_COLOR_MASK                                              0x00000358
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                31:24
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE                                  23:16
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                       0x00000000
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                        0x00000001
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                 15:8
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                   7:0
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                      0x00000000
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                       0x00000001

#define NV1196_SET_DEPTH_MASK                                              0x0000035c
#define NV1196_SET_DEPTH_MASK_V                                                  31:0
#define NV1196_SET_DEPTH_MASK_V_FALSE                                      0x00000000
#define NV1196_SET_DEPTH_MASK_V_TRUE                                       0x00000001

#define NV1196_SET_STENCIL_MASK                                            0x00000360
#define NV1196_SET_STENCIL_MASK_V                                                31:0

#define NV1196_SET_STENCIL_FUNC                                            0x00000364
#define NV1196_SET_STENCIL_FUNC_V                                                31:0
#define NV1196_SET_STENCIL_FUNC_V_NEVER                                    0x00000200
#define NV1196_SET_STENCIL_FUNC_V_LESS                                     0x00000201
#define NV1196_SET_STENCIL_FUNC_V_EQUAL                                    0x00000202
#define NV1196_SET_STENCIL_FUNC_V_LEQUAL                                   0x00000203
#define NV1196_SET_STENCIL_FUNC_V_GREATER                                  0x00000204
#define NV1196_SET_STENCIL_FUNC_V_NOTEQUAL                                 0x00000205
#define NV1196_SET_STENCIL_FUNC_V_GEQUAL                                   0x00000206
#define NV1196_SET_STENCIL_FUNC_V_ALWAYS                                   0x00000207

#define NV1196_SET_STENCIL_FUNC_REF                                        0x00000368
#define NV1196_SET_STENCIL_FUNC_REF_V                                            31:0

#define NV1196_SET_STENCIL_FUNC_MASK                                       0x0000036c
#define NV1196_SET_STENCIL_FUNC_MASK_V                                           31:0

#define NV1196_SET_STENCIL_OP_FAIL                                         0x00000370
#define NV1196_SET_STENCIL_OP_FAIL_V                                             31:0
#define NV1196_SET_STENCIL_OP_FAIL_V_KEEP                                  0x00001E00
#define NV1196_SET_STENCIL_OP_FAIL_V_ZERO                                  0x00000000
#define NV1196_SET_STENCIL_OP_FAIL_V_REPLACE                               0x00001E01
#define NV1196_SET_STENCIL_OP_FAIL_V_INCRSAT                               0x00001E02
#define NV1196_SET_STENCIL_OP_FAIL_V_DECRSAT                               0x00001E03
#define NV1196_SET_STENCIL_OP_FAIL_V_INVERT                                0x0000150A
#define NV1196_SET_STENCIL_OP_FAIL_V_INCR                                  0x00008507
#define NV1196_SET_STENCIL_OP_FAIL_V_DECR                                  0x00008508

#define NV1196_SET_STENCIL_OP_ZFAIL                                        0x00000374
#define NV1196_SET_STENCIL_OP_ZFAIL_V                                            31:0
#define NV1196_SET_STENCIL_OP_ZFAIL_V_KEEP                                 0x00001E00
#define NV1196_SET_STENCIL_OP_ZFAIL_V_ZERO                                 0x00000000
#define NV1196_SET_STENCIL_OP_ZFAIL_V_REPLACE                              0x00001E01
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INCRSAT                              0x00001E02
#define NV1196_SET_STENCIL_OP_ZFAIL_V_DECRSAT                              0x00001E03
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INVERT                               0x0000150A
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INCR                                 0x00008507
#define NV1196_SET_STENCIL_OP_ZFAIL_V_DECR                                 0x00008508

#define NV1196_SET_STENCIL_OP_ZPASS                                        0x00000378
#define NV1196_SET_STENCIL_OP_ZPASS_V                                            31:0
#define NV1196_SET_STENCIL_OP_ZPASS_V_KEEP                                 0x00001E00
#define NV1196_SET_STENCIL_OP_ZPASS_V_ZERO                                 0x00000000
#define NV1196_SET_STENCIL_OP_ZPASS_V_REPLACE                              0x00001E01
#define NV1196_SET_STENCIL_OP_ZPASS_V_INCRSAT                              0x00001E02
#define NV1196_SET_STENCIL_OP_ZPASS_V_DECRSAT                              0x00001E03
#define NV1196_SET_STENCIL_OP_ZPASS_V_INVERT                               0x0000150A
#define NV1196_SET_STENCIL_OP_ZPASS_V_INCR                                 0x00008507
#define NV1196_SET_STENCIL_OP_ZPASS_V_DECR                                 0x00008508

#define NV1196_SET_SHADE_MODE                                              0x0000037c
#define NV1196_SET_SHADE_MODE_V                                                  31:0
#define NV1196_SET_SHADE_MODE_V_FLAT                                       0x00001D00
#define NV1196_SET_SHADE_MODE_V_SMOOTH                                     0x00001D01

#define NV1196_SET_LINE_WIDTH                                              0x00000380
#define NV1196_SET_LINE_WIDTH_V                                                  31:0

#define NV1196_SET_POLYGON_OFFSET_SCALE_FACTOR                             0x00000384
#define NV1196_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                 31:0

#define NV1196_SET_POLYGON_OFFSET_BIAS                                     0x00000388
#define NV1196_SET_POLYGON_OFFSET_BIAS_V                                         31:0

#define NV1196_SET_FRONT_POLYGON_MODE                                      0x0000038c
#define NV1196_SET_FRONT_POLYGON_MODE_V                                          31:0
#define NV1196_SET_FRONT_POLYGON_MODE_V_POINT                              0x00001B00
#define NV1196_SET_FRONT_POLYGON_MODE_V_LINE                               0x00001B01
#define NV1196_SET_FRONT_POLYGON_MODE_V_FILL                               0x00001B02

#define NV1196_SET_BACK_POLYGON_MODE                                       0x00000390
#define NV1196_SET_BACK_POLYGON_MODE_V                                           31:0
#define NV1196_SET_BACK_POLYGON_MODE_V_POINT                               0x00001B00
#define NV1196_SET_BACK_POLYGON_MODE_V_LINE                                0x00001B01
#define NV1196_SET_BACK_POLYGON_MODE_V_FILL                                0x00001B02

#define NV1196_SET_CLIP_MIN                                                0x00000394
#define NV1196_SET_CLIP_MIN_V                                                    31:0

#define NV1196_SET_CLIP_MAX                                                0x00000398
#define NV1196_SET_CLIP_MAX_V                                                    31:0

#define NV1196_SET_CULL_FACE                                               0x0000039c
#define NV1196_SET_CULL_FACE_V                                                   31:0
#define NV1196_SET_CULL_FACE_V_FRONT                                       0x00000404
#define NV1196_SET_CULL_FACE_V_BACK                                        0x00000405
#define NV1196_SET_CULL_FACE_V_FRONT_AND_BACK                              0x00000408

#define NV1196_SET_FRONT_FACE                                              0x000003a0
#define NV1196_SET_FRONT_FACE_V                                                  31:0
#define NV1196_SET_FRONT_FACE_V_CW                                         0x00000900
#define NV1196_SET_FRONT_FACE_V_CCW                                        0x00000901

#define NV1196_SET_NORMALIZATION_ENABLE                                    0x000003a4
#define NV1196_SET_NORMALIZATION_ENABLE_V                                        31:0
#define NV1196_SET_NORMALIZATION_ENABLE_V_FALSE                            0x00000000
#define NV1196_SET_NORMALIZATION_ENABLE_V_TRUE                             0x00000001

#define NV1196_SET_MATERIAL_EMISSION(i)                            (0x000003a8+(i)*4)
#define NV1196_SET_MATERIAL_EMISSION_V                                           31:0

#define NV1196_SET_MATERIAL_ALPHA                                          0x000003b4
#define NV1196_SET_MATERIAL_ALPHA_V                                              31:0

#define NV1196_SET_SPECULAR_ENABLE                                         0x000003b8
#define NV1196_SET_SPECULAR_ENABLE_V                                             31:0
#define NV1196_SET_SPECULAR_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_SPECULAR_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_LIGHT_ENABLE_MASK                                       0x000003bc
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0                                       1:0
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1                                       3:2
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2                                       5:4
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3                                       7:6
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4                                       9:8
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5                                     11:10
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6                                     13:12
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7                                     15:14
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                           0x00000003

#define NV1196_SET_TEXGEN_S(i)                                    (0x000003c0+(i)*16)
#define NV1196_SET_TEXGEN_S_V                                                    31:0
#define NV1196_SET_TEXGEN_S_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_S_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_S_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_S_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_S_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_S_V_SPHERE_MAP                                   0x00002402
#define NV1196_SET_TEXGEN_S_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_T(i)                                    (0x000003c4+(i)*16)
#define NV1196_SET_TEXGEN_T_V                                                    31:0
#define NV1196_SET_TEXGEN_T_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_T_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_T_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_T_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_T_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_T_V_SPHERE_MAP                                   0x00002402
#define NV1196_SET_TEXGEN_T_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_R(i)                                    (0x000003c8+(i)*16)
#define NV1196_SET_TEXGEN_R_V                                                    31:0
#define NV1196_SET_TEXGEN_R_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_R_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_R_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_R_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_R_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_R_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_Q(i)                                    (0x000003cc+(i)*16)
#define NV1196_SET_TEXGEN_Q_V                                                    31:0
#define NV1196_SET_TEXGEN_Q_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_Q_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_Q_V_OBJECT_LINEAR                                0x00002401

#define NV1196_SET_TEXTURE_MATRIX0_ENABLE                                  0x000003e0
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V                                      31:0
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                          0x00000000
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                           0x00000001

#define NV1196_SET_TEXTURE_MATRIX1_ENABLE                                  0x000003e4
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V                                      31:0
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                          0x00000000
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                           0x00000001

#define NV1196_SET_TLMODE                                                  0x000003e8
#define NV1196_SET_TLMODE_PASSTHROUGH                                             0:0
#define NV1196_SET_TLMODE_PASSTHROUGH_TRUE                                 0x00000001
#define NV1196_SET_TLMODE_PASSTHROUGH_FALSE                                0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_0                                              1:1
#define NV1196_SET_TLMODE_W_DIVIDE_0_DISABLE                               0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_0_ENABLE                                0x00000001
#define NV1196_SET_TLMODE_W_DIVIDE_1                                              2:2
#define NV1196_SET_TLMODE_W_DIVIDE_1_DISABLE                               0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_1_ENABLE                                0x00000001

#define NV1196_SET_POINT_SIZE                                              0x000003ec
#define NV1196_SET_POINT_SIZE_V                                                  31:0

#define NV1196_SET_SWATH_WIDTH                                             0x000003f0
#define NV1196_SET_SWATH_WIDTH_V                                                 31:0
#define NV1196_SET_SWATH_WIDTH_V_8                                         0x00000000
#define NV1196_SET_SWATH_WIDTH_V_16                                        0x00000001
#define NV1196_SET_SWATH_WIDTH_V_32                                        0x00000002
#define NV1196_SET_SWATH_WIDTH_V_64                                        0x00000003

#define NV1196_SET_FLAT_SHADE_OP                                           0x000003f4
#define NV1196_SET_FLAT_SHADE_OP_V                                               31:0
#define NV1196_SET_FLAT_SHADE_OP_V_LAST_VTX                                0x00000000
#define NV1196_SET_FLAT_SHADE_OP_V_FIRST_VTX                               0x00000001

#define NV1196_SET_MODEL_VIEW_MATRIX0(i)                           (0x00000400+(i)*4)
#define NV1196_SET_MODEL_VIEW_MATRIX0_V                                          31:0

#define NV1196_SET_MODEL_VIEW_MATRIX1(i)                           (0x00000440+(i)*4)
#define NV1196_SET_MODEL_VIEW_MATRIX1_V                                          31:0

#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                   (0x00000480+(i)*4)
#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX0_V                                  31:0

#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                   (0x000004c0+(i)*4)
#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX1_V                                  31:0

#define NV1196_SET_COMPOSITE_MATRIX(i)                             (0x00000500+(i)*4)
#define NV1196_SET_COMPOSITE_MATRIX_V                                            31:0

#define NV1196_SET_TEXTURE_MATRIX0(i)                              (0x00000540+(i)*4)
#define NV1196_SET_TEXTURE_MATRIX0_V                                             31:0

#define NV1196_SET_TEXTURE_MATRIX1(i)                              (0x00000580+(i)*4)
#define NV1196_SET_TEXTURE_MATRIX1_V                                             31:0

#define NV1196_SET_TEXGEN_SPLANE0(i)                               (0x00000600+(i)*4)
#define NV1196_SET_TEXGEN_SPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_TPLANE0(i)                               (0x00000610+(i)*4)
#define NV1196_SET_TEXGEN_TPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_RPLANE0(i)                               (0x00000620+(i)*4)
#define NV1196_SET_TEXGEN_RPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_QPLANE0(i)                               (0x00000630+(i)*4)
#define NV1196_SET_TEXGEN_QPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_SPLANE1(i)                               (0x00000640+(i)*4)
#define NV1196_SET_TEXGEN_SPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_TPLANE1(i)                               (0x00000650+(i)*4)
#define NV1196_SET_TEXGEN_TPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_RPLANE1(i)                               (0x00000660+(i)*4)
#define NV1196_SET_TEXGEN_RPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_QPLANE1(i)                               (0x00000670+(i)*4)
#define NV1196_SET_TEXGEN_QPLANE1_V                                              31:0

#define NV1196_SET_FOG_PARAMS(i)                                   (0x00000680+(i)*4)
#define NV1196_SET_FOG_PARAMS_V                                                  31:0

#define NV1196_SET_FOG_PLANE(i)                                    (0x0000068c+(i)*4)
#define NV1196_SET_FOG_PLANE_V                                                   31:0

#define NV1196_SET_SPECULAR_PARAMS(i)                              (0x000006a0+(i)*4)
#define NV1196_SET_SPECULAR_PARAMS_V                                             31:0

#define NV1196_SET_SCENE_AMBIENT_COLOR(i)                          (0x000006c4+(i)*4)
#define NV1196_SET_SCENE_AMBIENT_COLOR_V                                         31:0

#define NV1196_SET_VIEWPORT_OFFSET(i)                              (0x000006e8+(i)*4)
#define NV1196_SET_VIEWPORT_OFFSET_V                                             31:0

#define NV1196_SET_POINT_PARAMS(i)                                 (0x000006f8+(i)*4)
#define NV1196_SET_POINT_PARAMS_V                                                31:0

#define NV1196_SET_EYE_POSITION(i)                                 (0x00000718+(i)*4)
#define NV1196_SET_EYE_POSITION_V                                                31:0

#define NV1196_SET_EYE_DIRECTION_SW(i)                             (0x0000072c+(i)*4)

#define NV1196_SET_LIGHT_AMBIENT_COLOR(i,j)                (0x00000800+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_AMBIENT_COLOR_V                                         31:0

#define NV1196_SET_LIGHT_DIFFUSE_COLOR(i,j)                (0x0000080c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_DIFFUSE_COLOR_V                                         31:0

#define NV1196_SET_LIGHT_SPECULAR_COLOR(i,j)               (0x00000818+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPECULAR_COLOR_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_RANGE(i)                          (0x00000824+(i)*128)
#define NV1196_SET_LIGHT_LOCAL_RANGE_V                                           31:0

#define NV1196_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)         (0x00000828+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_INFINITE_HALF_VECTOR_V                                  31:0

#define NV1196_SET_LIGHT_INFINITE_DIRECTION(i,j)           (0x00000834+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_INFINITE_DIRECTION_V                                    31:0

#define NV1196_SET_LIGHT_SPOT_FALLOFF(i,j)                 (0x00000840+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPOT_FALLOFF_V                                          31:0

#define NV1196_SET_LIGHT_SPOT_DIRECTION(i,j)               (0x0000084c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPOT_DIRECTION_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_POSITION(i,j)               (0x0000085c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_LOCAL_POSITION_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_ATTENUATION(i,j)            (0x00000868+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_LOCAL_ATTENUATION_V                                     31:0

#define NV1196_SET_VERTEX3F(i)                                     (0x00000c00+(i)*4)
#define NV1196_SET_VERTEX3F_V                                                    31:0

#define NV1196_SET_VERTEX4F(i)                                     (0x00000c18+(i)*4)
#define NV1196_SET_VERTEX4F_V                                                    31:0

#define NV1196_SET_VERTEX4S(i)                                     (0x00000c28+(i)*4)
#define NV1196_SET_VERTEX4S_V                                                    31:0

#define NV1196_SET_NORMAL3F(i)                                     (0x00000c30+(i)*4)
#define NV1196_SET_NORMAL3F_V                                                    31:0

#define NV1196_SET_NORMAL3S(i)                                     (0x00000c40+(i)*4)
#define NV1196_SET_NORMAL3S_V                                                    31:0

#define NV1196_SET_DIFFUSE_COLOR4F(i)                              (0x00000c50+(i)*4)
#define NV1196_SET_DIFFUSE_COLOR4F_V                                             31:0

#define NV1196_SET_DIFFUSE_COLOR3F(i)                              (0x00000c60+(i)*4)
#define NV1196_SET_DIFFUSE_COLOR3F_V                                             31:0

#define NV1196_SET_DIFFUSE_COLOR4UB                                        0x00000c6c
#define NV1196_SET_DIFFUSE_COLOR4UB_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR4F(i)                             (0x00000c70+(i)*4)
#define NV1196_SET_SPECULAR_COLOR4F_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR3F(i)                             (0x00000c80+(i)*4)
#define NV1196_SET_SPECULAR_COLOR3F_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR4UB                                       0x00000c8c
#define NV1196_SET_SPECULAR_COLOR4UB_V                                           31:0

#define NV1196_SET_TEXCOORD0_2F(i)                                 (0x00000c90+(i)*4)
#define NV1196_SET_TEXCOORD0_2F_V                                                31:0

#define NV1196_SET_TEXCOORD0_2S                                            0x00000c98
#define NV1196_SET_TEXCOORD0_2S_V                                                31:0

#define NV1196_SET_TEXCOORD0_4F(i)                                 (0x00000ca0+(i)*4)
#define NV1196_SET_TEXCOORD0_4F_V                                                31:0

#define NV1196_SET_TEXCOORD0_4S(i)                                 (0x00000cb0+(i)*4)
#define NV1196_SET_TEXCOORD0_4S_V                                                31:0

#define NV1196_SET_TEXCOORD1_2F(i)                                 (0x00000cb8+(i)*4)
#define NV1196_SET_TEXCOORD1_2F_V                                                31:0

#define NV1196_SET_TEXCOORD1_2S                                            0x00000cc0
#define NV1196_SET_TEXCOORD1_2S_V                                                31:0

#define NV1196_SET_TEXCOORD1_4F(i)                                 (0x00000cc8+(i)*4)
#define NV1196_SET_TEXCOORD1_4F_V                                                31:0

#define NV1196_SET_TEXCOORD1_4S(i)                                 (0x00000cd8+(i)*4)
#define NV1196_SET_TEXCOORD1_4S_V                                                31:0

#define NV1196_SET_FOG1F                                                   0x00000ce0
#define NV1196_SET_FOG1F_V                                                       31:0

#define NV1196_SET_WEIGHT1F                                                0x00000ce4
#define NV1196_SET_WEIGHT1F_V                                                    31:0

#define NV1196_SET_EDGE_FLAG                                               0x00000cec
#define NV1196_SET_EDGE_FLAG_V                                                   31:0

#define NV1196_INVALIDATE_VERTEX_CACHE_FILE                                0x00000cf0
#define NV1196_INVALIDATE_VERTEX_CACHE_FILE_V                                    31:0

#define NV1196_INVALIDATE_VERTEX_FILE                                      0x00000cf4
#define NV1196_INVALIDATE_VERTEX_FILE_V                                          31:0

#define NV1196_TL_NOP                                                      0x00000cf8
#define NV1196_TL_NOP_V                                                          31:0

#define NV1196_TL_SYNC                                                     0x00000cfc
#define NV1196_TL_SYNC_V                                                         31:0

#define NV1196_SET_VERTEX_ARRAY_OFFSET                                     0x00000d00
#define NV1196_SET_VERTEX_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_DIFFUSE_ARRAY_OFFSET                                    0x00000d08
#define NV1196_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                   31:0

#define NV1196_SET_SPECULAR_ARRAY_OFFSET                                   0x00000d10
#define NV1196_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                  31:0

#define NV1196_SET_TEX_COORD0_ARRAY_OFFSET                                 0x00000d18
#define NV1196_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                31:0

#define NV1196_SET_TEX_COORD1_ARRAY_OFFSET                                 0x00000d20
#define NV1196_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                31:0

#define NV1196_SET_NORMAL_ARRAY_OFFSET                                     0x00000d28
#define NV1196_SET_NORMAL_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_WEIGHT_ARRAY_OFFSET                                     0x00000d30
#define NV1196_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_FOG_ARRAY_OFFSET                                        0x00000d38
#define NV1196_SET_FOG_ARRAY_OFFSET_OFFSET                                       31:0

#define NV1196_SET_VERTEX_ARRAY_FORMAT                                     0x00000d04
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W                                        31:24
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W_NONE                              0x00000000
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                           0x00000001
#define NV1196_SET_VERTEX_ARRAY_FORMAT_STRIDE                                    23:8
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_2                              0x00000002
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_DIFFUSE_ARRAY_FORMAT                                    0x00000d0c
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                   31:8
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                      7:4
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                      3:0
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004

#define NV1196_SET_SPECULAR_ARRAY_FORMAT                                   0x00000d14
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                  31:8
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE                                     7:4
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                            0x00000000
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                            0x00000003
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                            0x00000004
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE                                     3:0
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA           0x00000000
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                        0x00000002
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA           0x00000004

#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT                                 0x00000d1c
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                31:8
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                   7:4
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                          0x00000000
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                          0x00000001
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                          0x00000002
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                          0x00000003
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                          0x00000004
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                   3:0
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                      0x00000001
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                      0x00000002

#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT                                 0x00000d24
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                31:8
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                   7:4
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                          0x00000000
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                          0x00000001
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                          0x00000002
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                          0x00000003
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                          0x00000004
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                   3:0
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                      0x00000001
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                      0x00000002

#define NV1196_SET_NORMAL_ARRAY_FORMAT                                     0x00000d2c
#define NV1196_SET_NORMAL_ARRAY_FORMAT_STRIDE                                    31:8
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_WEIGHT_ARRAY_FORMAT                                     0x00000d34
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                    31:8
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                              0x00000001
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_FOG_ARRAY_FORMAT                                        0x00000d3c
#define NV1196_SET_FOG_ARRAY_FORMAT_STRIDE                                       31:8
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE                                          7:4
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE_0                                 0x00000000
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE_1                                 0x00000001
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE                                          3:0
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                             0x00000001
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                             0x00000002

#define NV1196_SET_LOGIC_OP_ENABLE                                         0x00000d40
#define NV1196_SET_LOGIC_OP_ENABLE_V                                             31:0
#define NV1196_SET_LOGIC_OP_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_LOGIC_OP_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_LOGIC_OP                                                0x00000d44
#define NV1196_SET_LOGIC_OP_V                                                    31:0
#define NV1196_SET_LOGIC_OP_V_CLEAR                                        0x00001500
#define NV1196_SET_LOGIC_OP_V_AND                                          0x00001501
#define NV1196_SET_LOGIC_OP_V_AND_REVERSE                                  0x00001502
#define NV1196_SET_LOGIC_OP_V_COPY                                         0x00001503
#define NV1196_SET_LOGIC_OP_V_AND_INVERTED                                 0x00001504
#define NV1196_SET_LOGIC_OP_V_NOOP                                         0x00001505
#define NV1196_SET_LOGIC_OP_V_XOR                                          0x00001506
#define NV1196_SET_LOGIC_OP_V_OR                                           0x00001507
#define NV1196_SET_LOGIC_OP_V_NOR                                          0x00001508
#define NV1196_SET_LOGIC_OP_V_EQUIV                                        0x00001509
#define NV1196_SET_LOGIC_OP_V_INVERT                                       0x0000150A
#define NV1196_SET_LOGIC_OP_V_OR_REVERSE                                   0x0000150B
#define NV1196_SET_LOGIC_OP_V_COPY_INVERTED                                0x0000150C
#define NV1196_SET_LOGIC_OP_V_OR_INVERTED                                  0x0000150D
#define NV1196_SET_LOGIC_OP_V_NAND                                         0x0000150E
#define NV1196_SET_LOGIC_OP_V_SET                                          0x0000150F

#define NV1196_SET_BEGIN_END                                               0x00000dfc
#define NV1196_SET_BEGIN_END_OP                                                  31:0
#define NV1196_SET_BEGIN_END_OP_END                                        0x00000000
#define NV1196_SET_BEGIN_END_OP_POINTS                                     0x00000001
#define NV1196_SET_BEGIN_END_OP_LINES                                      0x00000002
#define NV1196_SET_BEGIN_END_OP_LINE_LOOP                                  0x00000003
#define NV1196_SET_BEGIN_END_OP_LINE_STRIP                                 0x00000004
#define NV1196_SET_BEGIN_END_OP_TRIANGLES                                  0x00000005
#define NV1196_SET_BEGIN_END_OP_TRIANGLE_STRIP                             0x00000006
#define NV1196_SET_BEGIN_END_OP_TRIANGLE_FAN                               0x00000007
#define NV1196_SET_BEGIN_END_OP_QUADS                                      0x00000008
#define NV1196_SET_BEGIN_END_OP_QUAD_STRIP                                 0x00000009
#define NV1196_SET_BEGIN_END_OP_POLYGON                                    0x0000000A

#define NV1196_ARRAY_ELEMENT16(i)                                  (0x00000e00+(i)*4)
#define NV1196_ARRAY_ELEMENT16_VERTEX0                                           15:0
#define NV1196_ARRAY_ELEMENT16_VERTEX1                                          31:16

#define NV1196_SET_BEGIN_END2                                              0x000010fc
#define NV1196_SET_BEGIN_END2_OP                                                 31:0
#define NV1196_SET_BEGIN_END2_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END2_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END2_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END2_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END2_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END2_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END2_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END2_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END2_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END2_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END2_OP_POLYGON                                   0x0000000A

#define NV1196_ARRAY_ELEMENT32(i)                                  (0x00001100+(i)*4)
#define NV1196_ARRAY_ELEMENT32_V                                                 31:0

#define NV1196_SET_BEGIN_END3                                              0x000013fc
#define NV1196_SET_BEGIN_END3_OP                                                 31:0
#define NV1196_SET_BEGIN_END3_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END3_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END3_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END3_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END3_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END3_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END3_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END3_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END3_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END3_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END3_OP_POLYGON                                   0x0000000A

#define NV1196_DRAW_ARRAYS(i)                                      (0x00001400+(i)*4)
#define NV1196_DRAW_ARRAYS_COUNT                                                31:24
#define NV1196_DRAW_ARRAYS_START_INDEX                                           23:0

/* These methods are accepted between a begin/end. */
#define NV1196_SET_MATERIAL_EMISSION_SW(i)                          (0x00001628+(i)*4)
#define NV1196_SET_VIEWPORT_OFFSET_SW(i)                            (0x00001638+(i)*4)
/* The PASSTHRU_VIEWPORT_OFFSET aliases to row 1 of the MODEL_VIEW_MATRIX1 */
#define NV1196_SET_PASSTHRU_VIEWPORT_OFFSET_SW(i)                   (0x00001648+(i)*4)

#define NV1196_SET_BEGIN_END4                                              0x000017fc
#define NV1196_SET_BEGIN_END4_OP                                                 31:0
#define NV1196_SET_BEGIN_END4_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END4_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END4_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END4_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END4_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END4_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END4_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END4_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END4_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END4_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END4_OP_POLYGON                                   0x0000000A

#define NV1196_INLINE_ARRAY(i)                                     (0x00001800+(i)*4)
#define NV1196_INLINE_ARRAY_V                                                    31:0

#define NV1196_DEBUG_INIT(i)                                       (0x00001600+(i)*4)
#define NV1196_DEBUG_INIT_V                                                      31:0


// This typedef really should be the same as Nv20KelvinPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.

typedef NvV32 Nv097Typedef;

/* class NV20_KELVIN_PRIMITIVE */
#define  NV20_KELVIN_PRIMITIVE                                    (0x00000097)
/* NvNotification[] elements */
#define NV097_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV097_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV097_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV097_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV097_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV097_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV097_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved0004[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved0114[0xc/4];
    NvU32 SetFlipRead;
    NvU32 SetFlipWrite;
    NvU32 SetFlipModulo;
    NvV32 FlipIncrementWrite;
    NvV32 FlipStall;
    NvV32 Reserved0134[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved0144[0x3c/4];
    NvU32 SetContextDmaNotifies;
    NvU32 SetContextDmaA;
    NvU32 SetContextDmaB;
    NvV32 Reserved018c[0x4/4];
    NvU32 SetContextDmaState;
    NvU32 SetContextDmaColor;
    NvU32 SetContextDmaZeta;
    NvU32 SetContextDmaVertexA;
    NvU32 SetContextDmaVertexB;
    NvU32 SetContextDmaSemaphore;
    NvU32 SetContextDmaReport;
    NvV32 Reserved01ac[0x54/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvV32 Reserved0218[0x48/4];
    NvV32 SetCombinerAlphaICW[8];
    NvV32 Reserved0280[0x8/4];
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 Reserved02ac[0x8/4];
    NvV32 SetWindowClipType;
    NvV32 Reserved02b8[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinMode;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvU32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvU32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvU32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvU32 SetStencilFuncRef;
    NvU32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvU32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvF32 SetMaterialEmission[3];
    NvF32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
    NvV32 S;
    NvV32 T;
    NvV32 R;
    NvV32 Q;
    } SetTexgen[4];
    NvV32 Reserved0400[0x20/4];
    NvV32 SetTextureMatrixEnable[4];
    NvV32 Reserved0430[0xc/4];
    NvU32 SetPointSize;
    NvF32 SetProjectionMatrix[16];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetModelViewMatrix2[16];
    NvF32 SetModelViewMatrix3[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix2[16];
    NvF32 SetInverseModelViewMatrix3[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvF32 SetTextureMatrix2[16];
    NvF32 SetTextureMatrix3[16];
    NvV32 Reserved07c0[0x80/4];
    struct {
    NvF32 S[4];
    NvF32 T[4];
    NvF32 R[4];
    NvF32 Q[4];
    } SetTexgenPlane[4];
    NvV32 Reserved0940[0x80/4];
    NvF32 SetFogParams[3];
    NvV32 SetTexgenViewModel;
    NvF32 SetFogPlane[4];
    NvF32 SetSpecularParams[6];
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved0a00[0x10/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a1c[0x4/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 SetCombinerFactor0[8];
    NvV32 SetCombinerFactor1[8];
    NvV32 SetCombinerAlphaOCW[8];
    NvV32 SetCombinerColorICW[8];
    NvU32 SetColorKeyColor[4];
    NvF32 SetViewportScale[4];
    NvU32 SetTransformProgram[32];
    NvF32 SetTransformConstant[32];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvV32 Reserved0c24[0x1c/4];
    } SetBackLight[8];
    NvV32 Reserved0e00[0x200/4];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvF32 LocalRange;
    NvF32 InfiniteHalfVector[3];
    NvF32 InfiniteDirection[3];
    NvF32 SpotFalloff[3];
    NvF32 SpotDirection[4];
    NvF32 LocalPosition[3];
    NvF32 LocalAttenuation[3];
    NvV32 Reserved1074[0xc/4];
    } SetLight[8];
    NvV32 Reserved1400[0x7c/4];
    NvV32 SetStippleControl;
    NvU32 SetStipplePattern[32];
    NvF32 SetVertex3f[3];
    NvV32 Reserved150c[0xc/4];
    NvF32 SetVertex4f[4];
    NvS32 SetVertex4s[2];
    NvF32 SetNormal3f[3];
    NvV32 Reserved153c[0x4/4];
    NvS32 SetNormal3s[2];
    NvV32 Reserved1548[0x8/4];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvU32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvU32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS32 SetTexcoord0_2s;
    NvV32 Reserved159c[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS32 SetTexcoord0_4s[2];
    NvF32 SetTexcoord1_2f[2];
    NvS32 SetTexcoord1_2s;
    NvV32 Reserved15c4[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS32 SetTexcoord1_4s[2];
    NvF32 SetTexcoord2_2f[2];
    NvS32 SetTexcoord2_2s;
    NvV32 Reserved15ec[0x4/4];
    NvF32 SetTexcoord2_4f[4];
    NvS32 SetTexcoord2_4s[2];
    NvF32 SetTexcoord3_2f[2];
    NvS32 SetTexcoord3_2s;
    NvV32 Reserved1614[0xc/4];
    NvF32 SetTexcoord3_4f[4];
    NvS32 SetTexcoord3_4s[2];
    NvV32 Reserved1638[0x60/4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvF32 SetWeight2f[2];
    NvV32 Reserved16a8[0x8/4];
    NvF32 SetWeight3f[3];
    NvV32 SetEdgeFlag;
    NvF32 SetWeight4f[4];
    NvF32 SetTransformFixedConst3[4];
    NvF32 SetTransformFixedConst0[4];
    NvF32 SetTransformFixedConst1[4];
    NvF32 SetTransformFixedConst2[4];
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvV32 SetVertexDataArrayOffset[16];
    NvV32 SetVertexDataArrayFormat[16];
    NvF32 SetBackSceneAmbientColor[3];
    NvF32 SetBackMaterialAlpha;
    NvF32 SetBackMaterialEmission[3];
    NvV32 SetLogicOpEnable;
    NvV32 SetLogicOp;
    NvV32 SetTwoSideLightEn;
    NvV32 ClearReportValue;
    NvV32 SetZpassPixelCountEnable;
    NvV32 GetReport;
    NvF32 SetTLConstZero[3];
    NvF32 SetEyeDirection[3];
    NvF32 SetLinearFogConst[3];
    NvV32 SetShaderClipPlaneMode;
    NvV32 SetBeginEnd;
    NvV32 ArrayElement16;
    NvV32 Reserved1804[0x4/4];
    NvU32 ArrayElement32;
    NvV32 Reserved180c[0x4/4];
    NvV32 DrawArrays;
    NvV32 Reserved1814[0x4/4];
    NvU32 InlineArray;
    NvF32 SetEyeVector[3];
    NvU32 InlineVertexReuse;
    NvV32 Reserved182c[0x54/4];
    struct {
    NvF32 M[2];
    } SetVertexData2f[16];
    NvS32 SetVertexData2s[16];
    NvS32 SetVertexData4ub[16];
    struct {
    NvS32 M[2];
    } SetVertexData4s[16];
    struct {
    NvF32 M[4];
    } SetVertexData4f[16];
    struct {
    NvU32 Offset;
    NvV32 Format;
    NvV32 Address;
    NvV32 Control0;
    NvV32 Control1;
    NvV32 Filter;
    NvV32 Reserved1b18[0x4/4];
    NvV32 ImageRect;
    NvV32 Palette;
    NvU32 BorderColor;
    NvF32 SetBumpEnvMat00;
    NvF32 SetBumpEnvMat01;
    NvF32 SetBumpEnvMat11;
    NvF32 SetBumpEnvMat10;
    NvF32 SetBumpEnvScale;
    NvF32 SetBumpEnvOffset;
    } SetTexture[4];
    NvV32 Reserved1c00[0x164/4];
    NvV32 ParkAttribute;
    NvV32 UnparkAttribute;
    NvU32 SetSemaphoreOffset;
    NvU32 BackEndWriteSemaphoreRelease;
    NvU32 TextureReadSemaphoreRelease;
    NvV32 SetZMinMaxControl;
    NvV32 SetAntiAliasingControl;
    NvV32 SetCompressZBufferEn;
    NvV32 SetOccludeZStencilEn;
    NvV32 Reserved1d88[0x4/4];
    NvU32 SetZStencilClearValue;
    NvU32 SetColorClearValue;
    NvV32 ClearSurface;
    NvV32 SetClearRectHorizontal;
    NvV32 SetClearRectVertical;
    NvV32 Reserved1da0[0x40/4];
    NvV32 SetBeginPatch0;
    NvV32 SetBeginPatch1;
    NvV32 SetBeginPatch2;
    NvV32 SetBeginPatch3;
    NvV32 SetEndPatch;
    NvV32 SetBeginEndSwatch;
    NvV32 SetBeginEndCurve;
    NvV32 Reserved1dfc[0x4/4];
    NvF32 SetCurveCoefficients[4];
    NvV32 SetBeginTransition0;
    NvV32 SetBeginTransition1;
    NvV32 SetBeginTransition2;
    NvV32 SetEndTransition;
    NvV32 SetSpecularFogFactor[2];
    NvF32 SetBackSpecularParams[6];
    NvV32 SetCombinerColorOCW[8];
    NvV32 SetCombinerControl;
    NvV32 Reserved1e64[0x4/4];
    NvF32 SetShadowZSlopeThreshold;
    NvV32 SetShadowDepthFunc;
    NvV32 SetShaderStageProgram;
    NvV32 SetDotRGBMapping;
    NvV32 SetShaderOtherStageInput;
    NvV32 Reserved1e7c[0x4/4];
    NvF32 SetTransformData[4];
    NvU32 LaunchTransformProgram;
    NvV32 SetTransformExecutionMode;
    NvV32 SetTransformProgramCxtWriteEn;
    NvU32 SetTransformProgramLoad;
    NvU32 SetTransformProgramStart;
    NvU32 SetTransformConstantLoad;
    NvV32 Reserved1ea8[0x118/4];
    NvV32 DebugInit[10];
    NvV32 Reserved1fe8[0x18/4];
} Nv20KelvinPrimitive;

#define NV097_NO_OPERATION                                                  0x00000100

#define NV097_NOTIFY                                                        0x00000104
#define NV097_NOTIFY_TYPE                                                         31:0
#define NV097_NOTIFY_TYPE_WRITE_ONLY                                        0x00000000
#define NV097_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                 0x00000001

#define NV097_SET_WARNING_ENABLE                                            0x00000108
#define NV097_SET_WARNING_ENABLE_V                                                31:0
#define NV097_SET_WARNING_ENABLE_V_STOP                                     0x00000000
#define NV097_SET_WARNING_ENABLE_V_WRITE_ONLY                               0x00000001
#define NV097_SET_WARNING_ENABLE_V_WRITE_THEN_AWAKEN                        0x00000002

#define NV097_GET_STATE                                                     0x0000010c
#define NV097_GET_STATE_GETSTATE                                                  31:0
#define NV097_GET_STATE_GETSTATE_ALL_STATE                                  0x00000001
#define NV097_GET_STATE_GETSTATE_PUT_ALL_STATE                              0x00000002
#define NV097_GET_STATE_GETSTATE_SNAPSHOT_PRIM_ASSM                         0x00000006
#define NV097_GET_STATE_GETSTATE_RELOAD_PRIM_ASSM                           0x00000007

#define NV097_WAIT_FOR_IDLE                                                 0x00000110

#define NV097_PM_TRIGGER                                                    0x00000140
#define NV097_PM_TRIGGER_V                                                        31:0
#define NV097_PM_TRIGGER_V_NOP                                              0x00000000
#define NV097_PM_TRIGGER_V_TRIGGER                                          0x00000001

#define NV097_SET_FLIP_READ                                                 0x00000120
#define NV097_SET_FLIP_READ_V                                                     31:0

#define NV097_SET_FLIP_WRITE                                                0x00000124
#define NV097_SET_FLIP_WRITE_V                                                    31:0

#define NV097_SET_FLIP_MODULO                                               0x00000128
#define NV097_SET_FLIP_MODULO_V                                                   31:0

#define NV097_FLIP_INCREMENT_WRITE                                          0x0000012c

#define NV097_FLIP_STALL                                                    0x00000130

#define NV097_SET_CONTEXT_DMA_NOTIFIES                                      0x00000180
#define NV097_SET_CONTEXT_DMA_NOTIFIES_V                                          31:0

#define NV097_SET_CONTEXT_DMA_A                                             0x00000184
#define NV097_SET_CONTEXT_DMA_A_V                                                 31:0

#define NV097_SET_CONTEXT_DMA_B                                             0x00000188
#define NV097_SET_CONTEXT_DMA_B_V                                                 31:0

#define NV097_SET_CONTEXT_DMA_STATE                                         0x00000190
#define NV097_SET_CONTEXT_DMA_STATE_V                                             31:0

#define NV097_SET_CONTEXT_DMA_COLOR                                         0x00000194
#define NV097_SET_CONTEXT_DMA_COLOR_V                                             31:0

#define NV097_SET_CONTEXT_DMA_ZETA                                          0x00000198
#define NV097_SET_CONTEXT_DMA_ZETA_V                                              31:0

#define NV097_SET_CONTEXT_DMA_VERTEX_A                                      0x0000019c
#define NV097_SET_CONTEXT_DMA_VERTEX_A_V                                          31:0

#define NV097_SET_CONTEXT_DMA_VERTEX_B                                      0x000001a0
#define NV097_SET_CONTEXT_DMA_VERTEX_B_V                                          31:0

#define NV097_SET_CONTEXT_DMA_SEMAPHORE                                     0x000001a4
#define NV097_SET_CONTEXT_DMA_SEMAPHORE_V                                         31:0

#define NV097_SET_CONTEXT_DMA_REPORT                                        0x000001a8
#define NV097_SET_CONTEXT_DMA_REPORT_V                                            31:0

#define NV097_SET_SURFACE_CLIP_HORIZONTAL                                   0x00000200
#define NV097_SET_SURFACE_CLIP_HORIZONTAL_X                                       15:0
#define NV097_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                  31:16

#define NV097_SET_SURFACE_CLIP_VERTICAL                                     0x00000204
#define NV097_SET_SURFACE_CLIP_VERTICAL_Y                                         15:0
#define NV097_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                   31:16

#define NV097_SET_SURFACE_PITCH                                             0x0000020c
#define NV097_SET_SURFACE_PITCH_COLOR                                             15:0
#define NV097_SET_SURFACE_PITCH_ZETA                                             31:16

#define NV097_SET_SURFACE_COLOR_OFFSET                                      0x00000210
#define NV097_SET_SURFACE_COLOR_OFFSET_V                                          31:0

#define NV097_SET_SURFACE_ZETA_OFFSET                                       0x00000214
#define NV097_SET_SURFACE_ZETA_OFFSET_V                                           31:0

#define NV097_SET_COMBINER_ALPHA_ICW(i)                             (0x00000260+(i)*4)
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP                                       31:29
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA                                     28:28
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE                                    27:24
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP                                       23:21
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA                                     20:20
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE                                    19:16
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP                                       15:13
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA                                     12:12
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE                                     11:8
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP                                         7:5
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA                                       4:4
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE                                      3:0
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                         0x0000000D

#define NV097_SET_COMBINER_COLOR_ICW(i)                             (0x00000ac0+(i)*4)
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP                                       31:29
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA                                     28:28
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE                                    27:24
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP                                       23:21
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA                                     20:20
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE                                    19:16
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP                                       15:13
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA                                     12:12
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE                                     11:8
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP                                         7:5
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA                                       4:4
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE                                      3:0
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                         0x0000000D

#define NV097_SET_COMBINER_FACTOR0(i)                               (0x00000a60+(i)*4)
#define NV097_SET_COMBINER_FACTOR0_BLUE                                            7:0
#define NV097_SET_COMBINER_FACTOR0_GREEN                                          15:8
#define NV097_SET_COMBINER_FACTOR0_RED                                           23:16
#define NV097_SET_COMBINER_FACTOR0_ALPHA                                         31:24

#define NV097_SET_COMBINER_FACTOR1(i)                               (0x00000a80+(i)*4)
#define NV097_SET_COMBINER_FACTOR1_BLUE                                            7:0
#define NV097_SET_COMBINER_FACTOR1_GREEN                                          15:8
#define NV097_SET_COMBINER_FACTOR1_RED                                           23:16
#define NV097_SET_COMBINER_FACTOR1_ALPHA                                         31:24

#define NV097_SET_COMBINER_ALPHA_OCW(i)                             (0x00000aa0+(i)*4)
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION                                   31:15
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                      0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                 0x00000001
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                 0x00000002
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS            0x00000003
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                 0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1                0x00000006
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                  14:14
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                       0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                        0x00000001
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST                                      11:8
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                          0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                          0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                          0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                          0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                          0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_A                          0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_B                          0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                          0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                          0x0000000D
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST                                        7:4
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                           0x0000000D
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST                                        3:0
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                           0x0000000D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0                                 0x00000288
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                            31:29
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                              28:28
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                             27:24
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                            23:21
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                              20:20
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                             19:16
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                            15:13
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                              12:12
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                              11:8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                              7:5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                                4:4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                               3:0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD            0x0000000F

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1                                 0x0000028c
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                            31:29
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                              28:28
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                             27:24
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                            23:21
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                              20:20
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                             19:16
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                            15:13
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                              12:12
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                              11:8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                         7:7
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE            0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE             0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                 6:6
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE    0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE     0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12                5:0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE    0x00000020

#define NV097_SET_CONTROL0                                                  0x00000290
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT                                   31:28
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_PASS                         0x00000000
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_CRYCB_TO_RGB                 0x00000001
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_SCRYSCB_TO_RGB               0x00000002
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA                                    27:24
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                         0x00000000
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                          0x00000001
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE                                    23:20
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                         0x00000000
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                          0x00000001
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                  19:16
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                       0x00000000
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                        0x00000001
#define NV097_SET_CONTROL0_Z_FORMAT                                              15:12
#define NV097_SET_CONTROL0_Z_FORMAT_FIXED                                   0x00000000
#define NV097_SET_CONTROL0_Z_FORMAT_FLOAT                                   0x00000001
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE                                    7:0
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                        0x00000001

#define NV097_SET_LIGHT_CONTROL                                             0x00000294
#define NV097_SET_LIGHT_CONTROL_LOCALEYE                                         16:16
#define NV097_SET_LIGHT_CONTROL_LOCALEYE_FALSE                              0x00000000
#define NV097_SET_LIGHT_CONTROL_LOCALEYE_TRUE                               0x00000001
#define NV097_SET_LIGHT_CONTROL_SOUT                                             31:17
#define NV097_SET_LIGHT_CONTROL_SOUT_ZERO_OUT                               0x00000000
#define NV097_SET_LIGHT_CONTROL_SOUT_PASSTHROUGH                            0x00000001
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                               1:0
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                  0x00000000
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                   0x00000001

#define NV097_SET_COLOR_MATERIAL                                            0x00000298
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL                                 1:0
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_DISABLE                  0x00000000
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_DIFFUSE_VTX_COLOR        0x00000001
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_SPECULAR_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL                                  3:2
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_DISABLE                   0x00000000
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_DIFFUSE_VTX_COLOR         0x00000001
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_SPECULAR_VTX_COLOR        0x00000002
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL                                     5:4
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_DISABLE                      0x00000000
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_DIFFUSE_VTX_COLOR            0x00000001
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_SPECULAR_VTX_COLOR           0x00000002
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL                                 7:6
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_DISABLE                  0x00000000
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_DIFFUSE_VTX_COLOR        0x00000001
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_SPECULAR_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL                            9:8
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_DISABLE             0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_DIFF_VTX_COLOR      0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_SPEC_VTX_COLOR      0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL                           11:10
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_DISABLE              0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_DIFF_VTX_COLOR       0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_SPEC_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL                              13:12
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_DISABLE                 0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_DIFF_VTX_COLOR          0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_SPEC_VTX_COLOR          0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL                          15:14
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_DISABLE             0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_DIFF_VTX_COLOR      0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_SPEC_VTX_COLOR      0x00000002

#define NV097_SET_FOG_MODE                                                  0x0000029c
#define NV097_SET_FOG_MODE_V                                                      31:0
#define NV097_SET_FOG_MODE_V_LINEAR                                         0x00002601
#define NV097_SET_FOG_MODE_V_EXP                                            0x00000800
#define NV097_SET_FOG_MODE_V_EXP2                                           0x00000801
#define NV097_SET_FOG_MODE_V_EXP_ABS                                        0x00000802
#define NV097_SET_FOG_MODE_V_EXP2_ABS                                       0x00000803
#define NV097_SET_FOG_MODE_V_LINEAR_ABS                                     0x00000804

#define NV097_SET_FOG_GEN_MODE                                              0x000002a0
#define NV097_SET_FOG_GEN_MODE_V                                                  31:0
#define NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA                                 0x00000000
#define NV097_SET_FOG_GEN_MODE_V_RADIAL                                     0x00000001
#define NV097_SET_FOG_GEN_MODE_V_PLANAR                                     0x00000002
#define NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR                                 0x00000003
#define NV097_SET_FOG_GEN_MODE_V_FOG_X                                      0x00000006

#define NV097_SET_FOG_ENABLE                                                0x000002a4
#define NV097_SET_FOG_ENABLE_V                                                    31:0
#define NV097_SET_FOG_ENABLE_V_FALSE                                        0x00000000
#define NV097_SET_FOG_ENABLE_V_TRUE                                         0x00000001

#define NV097_SET_FOG_COLOR                                                 0x000002a8
#define NV097_SET_FOG_COLOR_RED                                                    7:0
#define NV097_SET_FOG_COLOR_GREEN                                                 15:8
#define NV097_SET_FOG_COLOR_BLUE                                                 23:16
#define NV097_SET_FOG_COLOR_ALPHA                                                31:24

#define NV097_SET_COLOR_KEY_COLOR(i)                                (0x00000ae0+(i)*4)
#define NV097_SET_COLOR_KEY_COLOR_V                                               31:0

#define NV097_SET_WINDOW_CLIP_TYPE                                          0x000002b4
#define NV097_SET_WINDOW_CLIP_TYPE_V                                              31:0
#define NV097_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                              0x00000000
#define NV097_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                              0x00000001

#define NV097_SET_WINDOW_CLIP_HORIZONTAL(i)                         (0x000002c0+(i)*4)
#define NV097_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                     11:0
#define NV097_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                    27:16

#define NV097_SET_WINDOW_CLIP_VERTICAL(i)                           (0x000002e0+(i)*4)
#define NV097_SET_WINDOW_CLIP_VERTICAL_YMIN                                       11:0
#define NV097_SET_WINDOW_CLIP_VERTICAL_YMAX                                      27:16

#define NV097_SET_ALPHA_TEST_ENABLE                                         0x00000300
#define NV097_SET_ALPHA_TEST_ENABLE_V                                             31:0
#define NV097_SET_ALPHA_TEST_ENABLE_V_FALSE                                 0x00000000
#define NV097_SET_ALPHA_TEST_ENABLE_V_TRUE                                  0x00000001

#define NV097_SET_BLEND_ENABLE                                              0x00000304
#define NV097_SET_BLEND_ENABLE_V                                                  31:0
#define NV097_SET_BLEND_ENABLE_V_FALSE                                      0x00000000
#define NV097_SET_BLEND_ENABLE_V_TRUE                                       0x00000001

#define NV097_SET_CULL_FACE_ENABLE                                          0x00000308
#define NV097_SET_CULL_FACE_ENABLE_V                                              31:0
#define NV097_SET_CULL_FACE_ENABLE_V_FALSE                                  0x00000000
#define NV097_SET_CULL_FACE_ENABLE_V_TRUE                                   0x00000001

#define NV097_SET_DEPTH_TEST_ENABLE                                         0x0000030c
#define NV097_SET_DEPTH_TEST_ENABLE_V                                             31:0
#define NV097_SET_DEPTH_TEST_ENABLE_V_FALSE                                 0x00000000
#define NV097_SET_DEPTH_TEST_ENABLE_V_TRUE                                  0x00000001

#define NV097_SET_DITHER_ENABLE                                             0x00000310
#define NV097_SET_DITHER_ENABLE_V                                                 31:0
#define NV097_SET_DITHER_ENABLE_V_FALSE                                     0x00000000
#define NV097_SET_DITHER_ENABLE_V_TRUE                                      0x00000001

#define NV097_SET_LIGHTING_ENABLE                                           0x00000314
#define NV097_SET_LIGHTING_ENABLE_V                                               31:0
#define NV097_SET_LIGHTING_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_LIGHTING_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_POINT_PARAMS_ENABLE                                       0x00000318
#define NV097_SET_POINT_PARAMS_ENABLE_V                                           31:0
#define NV097_SET_POINT_PARAMS_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_POINT_PARAMS_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_POINT_SMOOTH_ENABLE                                       0x0000031c
#define NV097_SET_POINT_SMOOTH_ENABLE_V                                           31:0
#define NV097_SET_POINT_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_POINT_SMOOTH_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_LINE_SMOOTH_ENABLE                                        0x00000320
#define NV097_SET_LINE_SMOOTH_ENABLE_V                                            31:0
#define NV097_SET_LINE_SMOOTH_ENABLE_V_FALSE                                0x00000000
#define NV097_SET_LINE_SMOOTH_ENABLE_V_TRUE                                 0x00000001

#define NV097_SET_POLY_SMOOTH_ENABLE                                        0x00000324
#define NV097_SET_POLY_SMOOTH_ENABLE_V                                            31:0
#define NV097_SET_POLY_SMOOTH_ENABLE_V_FALSE                                0x00000000
#define NV097_SET_POLY_SMOOTH_ENABLE_V_TRUE                                 0x00000001

#define NV097_SET_STIPPLE_CONTROL                                           0x0000147c
#define NV097_SET_STIPPLE_CONTROL_V                                               31:0
#define NV097_SET_STIPPLE_CONTROL_V_OFF                                     0x00000000
#define NV097_SET_STIPPLE_CONTROL_V_POLYGON                                 0x00000001

#define NV097_SET_STIPPLE_PATTERN(i)                                (0x00001480+(i)*4)
#define NV097_SET_STIPPLE_PATTERN_V                                               31:0

#define NV097_SET_SKIN_MODE                                                 0x00000328
#define NV097_SET_SKIN_MODE_V                                                     31:0
#define NV097_SET_SKIN_MODE_V_OFF                                           0x00000000
#define NV097_SET_SKIN_MODE_V_2G                                            0x00000001
#define NV097_SET_SKIN_MODE_V_2                                             0x00000002
#define NV097_SET_SKIN_MODE_V_3G                                            0x00000003
#define NV097_SET_SKIN_MODE_V_3                                             0x00000004
#define NV097_SET_SKIN_MODE_V_4G                                            0x00000005
#define NV097_SET_SKIN_MODE_V_4                                             0x00000006

#define NV097_SET_STENCIL_TEST_ENABLE                                       0x0000032c
#define NV097_SET_STENCIL_TEST_ENABLE_V                                           31:0
#define NV097_SET_STENCIL_TEST_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_STENCIL_TEST_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_POLY_OFFSET_POINT_ENABLE                                  0x00000330
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V                                      31:0
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                          0x00000000
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                           0x00000001

#define NV097_SET_POLY_OFFSET_LINE_ENABLE                                   0x00000334
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V                                       31:0
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                           0x00000000
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                            0x00000001

#define NV097_SET_POLY_OFFSET_FILL_ENABLE                                   0x00000338
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V                                       31:0
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                           0x00000000
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                            0x00000001

#define NV097_SET_ALPHA_FUNC                                                0x0000033c
#define NV097_SET_ALPHA_FUNC_V                                                    31:0
#define NV097_SET_ALPHA_FUNC_V_NEVER                                        0x00000200
#define NV097_SET_ALPHA_FUNC_V_LESS                                         0x00000201
#define NV097_SET_ALPHA_FUNC_V_EQUAL                                        0x00000202
#define NV097_SET_ALPHA_FUNC_V_LEQUAL                                       0x00000203
#define NV097_SET_ALPHA_FUNC_V_GREATER                                      0x00000204
#define NV097_SET_ALPHA_FUNC_V_NOTEQUAL                                     0x00000205
#define NV097_SET_ALPHA_FUNC_V_GEQUAL                                       0x00000206
#define NV097_SET_ALPHA_FUNC_V_ALWAYS                                       0x00000207

#define NV097_SET_ALPHA_REF                                                 0x00000340
#define NV097_SET_ALPHA_REF_V                                                     31:0

#define NV097_SET_BLEND_FUNC_SFACTOR                                        0x00000344
#define NV097_SET_BLEND_FUNC_SFACTOR_V                                            31:0
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ZERO                                 0x00000000
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE                                  0x00000001
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                            0x00000300
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                  0x00000301
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                            0x00000302
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                  0x00000303
#define NV097_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                            0x00000304
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                  0x00000305
#define NV097_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                            0x00000306
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                  0x00000307
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                   0x00000308
#define NV097_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                       0x00008001
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR             0x00008002
#define NV097_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                       0x00008003
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA             0x00008004

#define NV097_SET_BLEND_FUNC_DFACTOR                                        0x00000348
#define NV097_SET_BLEND_FUNC_DFACTOR_V                                            31:0
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ZERO                                 0x00000000
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE                                  0x00000001
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                            0x00000300
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                  0x00000301
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                            0x00000302
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                  0x00000303
#define NV097_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                            0x00000304
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                  0x00000305
#define NV097_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                            0x00000306
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                  0x00000307
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA_SATURATE                   0x00000308
#define NV097_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                       0x00008001
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR             0x00008002
#define NV097_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                       0x00008003
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA             0x00008004

#define NV097_SET_BLEND_COLOR                                               0x0000034c
#define NV097_SET_BLEND_COLOR_V                                                   31:0

#define NV097_SET_BLEND_EQUATION                                            0x00000350
#define NV097_SET_BLEND_EQUATION_V                                                31:0
#define NV097_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                            0x0000800A
#define NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                    0x0000800B
#define NV097_SET_BLEND_EQUATION_V_FUNC_ADD                                 0x00008006
#define NV097_SET_BLEND_EQUATION_V_MIN                                      0x00008007
#define NV097_SET_BLEND_EQUATION_V_MAX                                      0x00008008
#define NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT_SIGNED             0x0000F005
#define NV097_SET_BLEND_EQUATION_V_FUNC_ADD_SIGNED                          0x0000F006

#define NV097_SET_DEPTH_FUNC                                                0x00000354
#define NV097_SET_DEPTH_FUNC_V                                                    31:0
#define NV097_SET_DEPTH_FUNC_V_NEVER                                        0x00000200
#define NV097_SET_DEPTH_FUNC_V_LESS                                         0x00000201
#define NV097_SET_DEPTH_FUNC_V_EQUAL                                        0x00000202
#define NV097_SET_DEPTH_FUNC_V_LEQUAL                                       0x00000203
#define NV097_SET_DEPTH_FUNC_V_GREATER                                      0x00000204
#define NV097_SET_DEPTH_FUNC_V_NOTEQUAL                                     0x00000205
#define NV097_SET_DEPTH_FUNC_V_GEQUAL                                       0x00000206
#define NV097_SET_DEPTH_FUNC_V_ALWAYS                                       0x00000207

#define NV097_SET_COLOR_MASK                                                0x00000358
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                  31:24
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                        0x00000001
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE                                    23:16
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                         0x00000000
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                          0x00000001
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                   15:8
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                        0x00000001
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                     7:0
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                        0x00000000
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                         0x00000001

#define NV097_SET_DEPTH_MASK                                                0x0000035c
#define NV097_SET_DEPTH_MASK_V                                                    31:0
#define NV097_SET_DEPTH_MASK_V_FALSE                                        0x00000000
#define NV097_SET_DEPTH_MASK_V_TRUE                                         0x00000001

#define NV097_SET_STENCIL_MASK                                              0x00000360
#define NV097_SET_STENCIL_MASK_V                                                  31:0

#define NV097_SET_STENCIL_FUNC                                              0x00000364
#define NV097_SET_STENCIL_FUNC_V                                                  31:0
#define NV097_SET_STENCIL_FUNC_V_NEVER                                      0x00000200
#define NV097_SET_STENCIL_FUNC_V_LESS                                       0x00000201
#define NV097_SET_STENCIL_FUNC_V_EQUAL                                      0x00000202
#define NV097_SET_STENCIL_FUNC_V_LEQUAL                                     0x00000203
#define NV097_SET_STENCIL_FUNC_V_GREATER                                    0x00000204
#define NV097_SET_STENCIL_FUNC_V_NOTEQUAL                                   0x00000205
#define NV097_SET_STENCIL_FUNC_V_GEQUAL                                     0x00000206
#define NV097_SET_STENCIL_FUNC_V_ALWAYS                                     0x00000207

#define NV097_SET_STENCIL_FUNC_REF                                          0x00000368
#define NV097_SET_STENCIL_FUNC_REF_V                                              31:0

#define NV097_SET_STENCIL_FUNC_MASK                                         0x0000036c
#define NV097_SET_STENCIL_FUNC_MASK_V                                             31:0

#define NV097_SET_STENCIL_OP_FAIL                                           0x00000370
#define NV097_SET_STENCIL_OP_FAIL_V                                               31:0
#define NV097_SET_STENCIL_OP_FAIL_V_KEEP                                    0x00001E00
#define NV097_SET_STENCIL_OP_FAIL_V_ZERO                                    0x00000000
#define NV097_SET_STENCIL_OP_FAIL_V_REPLACE                                 0x00001E01
#define NV097_SET_STENCIL_OP_FAIL_V_INCRSAT                                 0x00001E02
#define NV097_SET_STENCIL_OP_FAIL_V_DECRSAT                                 0x00001E03
#define NV097_SET_STENCIL_OP_FAIL_V_INVERT                                  0x0000150A
#define NV097_SET_STENCIL_OP_FAIL_V_INCR                                    0x00008507
#define NV097_SET_STENCIL_OP_FAIL_V_DECR                                    0x00008508

#define NV097_SET_STENCIL_OP_ZFAIL                                          0x00000374
#define NV097_SET_STENCIL_OP_ZFAIL_V                                              31:0
#define NV097_SET_STENCIL_OP_ZFAIL_V_KEEP                                   0x00001E00
#define NV097_SET_STENCIL_OP_ZFAIL_V_ZERO                                   0x00000000
#define NV097_SET_STENCIL_OP_ZFAIL_V_REPLACE                                0x00001E01
#define NV097_SET_STENCIL_OP_ZFAIL_V_INCRSAT                                0x00001E02
#define NV097_SET_STENCIL_OP_ZFAIL_V_DECRSAT                                0x00001E03
#define NV097_SET_STENCIL_OP_ZFAIL_V_INVERT                                 0x0000150A
#define NV097_SET_STENCIL_OP_ZFAIL_V_INCR                                   0x00008507
#define NV097_SET_STENCIL_OP_ZFAIL_V_DECR                                   0x00008508

#define NV097_SET_STENCIL_OP_ZPASS                                          0x00000378
#define NV097_SET_STENCIL_OP_ZPASS_V                                              31:0
#define NV097_SET_STENCIL_OP_ZPASS_V_KEEP                                   0x00001E00
#define NV097_SET_STENCIL_OP_ZPASS_V_ZERO                                   0x00000000
#define NV097_SET_STENCIL_OP_ZPASS_V_REPLACE                                0x00001E01
#define NV097_SET_STENCIL_OP_ZPASS_V_INCRSAT                                0x00001E02
#define NV097_SET_STENCIL_OP_ZPASS_V_DECRSAT                                0x00001E03
#define NV097_SET_STENCIL_OP_ZPASS_V_INVERT                                 0x0000150A
#define NV097_SET_STENCIL_OP_ZPASS_V_INCR                                   0x00008507
#define NV097_SET_STENCIL_OP_ZPASS_V_DECR                                   0x00008508

#define NV097_SET_SHADE_MODE                                                0x0000037c
#define NV097_SET_SHADE_MODE_V                                                    31:0
#define NV097_SET_SHADE_MODE_V_FLAT                                         0x00001D00
#define NV097_SET_SHADE_MODE_V_SMOOTH                                       0x00001D01

#define NV097_SET_LINE_WIDTH                                                0x00000380
#define NV097_SET_LINE_WIDTH_V                                                    31:0

#define NV097_SET_POLYGON_OFFSET_SCALE_FACTOR                               0x00000384
#define NV097_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                   31:0

#define NV097_SET_POLYGON_OFFSET_BIAS                                       0x00000388
#define NV097_SET_POLYGON_OFFSET_BIAS_V                                           31:0

#define NV097_SET_FRONT_POLYGON_MODE                                        0x0000038c
#define NV097_SET_FRONT_POLYGON_MODE_V                                            31:0
#define NV097_SET_FRONT_POLYGON_MODE_V_POINT                                0x00001B00
#define NV097_SET_FRONT_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV097_SET_FRONT_POLYGON_MODE_V_FILL                                 0x00001B02

#define NV097_SET_BACK_POLYGON_MODE                                         0x00000390
#define NV097_SET_BACK_POLYGON_MODE_V                                             31:0
#define NV097_SET_BACK_POLYGON_MODE_V_POINT                                 0x00001B00
#define NV097_SET_BACK_POLYGON_MODE_V_LINE                                  0x00001B01
#define NV097_SET_BACK_POLYGON_MODE_V_FILL                                  0x00001B02

#define NV097_SET_CLIP_MIN                                                  0x00000394
#define NV097_SET_CLIP_MIN_V                                                      31:0

#define NV097_SET_CLIP_MAX                                                  0x00000398
#define NV097_SET_CLIP_MAX_V                                                      31:0

#define NV097_SET_CULL_FACE                                                 0x0000039c
#define NV097_SET_CULL_FACE_V                                                     31:0
#define NV097_SET_CULL_FACE_V_FRONT                                         0x00000404
#define NV097_SET_CULL_FACE_V_BACK                                          0x00000405
#define NV097_SET_CULL_FACE_V_FRONT_AND_BACK                                0x00000408

#define NV097_SET_FRONT_FACE                                                0x000003a0
#define NV097_SET_FRONT_FACE_V                                                    31:0
#define NV097_SET_FRONT_FACE_V_CW                                           0x00000900
#define NV097_SET_FRONT_FACE_V_CCW                                          0x00000901

#define NV097_SET_NORMALIZATION_ENABLE                                      0x000003a4
#define NV097_SET_NORMALIZATION_ENABLE_V                                          31:0
#define NV097_SET_NORMALIZATION_ENABLE_V_FALSE                              0x00000000
#define NV097_SET_NORMALIZATION_ENABLE_V_TRUE                               0x00000001

#define NV097_SET_MATERIAL_EMISSION(i)                              (0x000003a8+(i)*4)
#define NV097_SET_MATERIAL_EMISSION_V                                             31:0

#define NV097_SET_MATERIAL_ALPHA                                            0x000003b4
#define NV097_SET_MATERIAL_ALPHA_V                                                31:0

#define NV097_SET_BACK_MATERIAL_ALPHA                                       0x000017ac
#define NV097_SET_BACK_MATERIAL_ALPHA_V                                           31:0

#define NV097_SET_SPECULAR_ENABLE                                           0x000003b8
#define NV097_SET_SPECULAR_ENABLE_V                                               31:0
#define NV097_SET_SPECULAR_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_SPECULAR_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_LIGHT_ENABLE_MASK                                         0x000003bc
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0                                         1:0
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1                                         3:2
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2                                         5:4
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3                                         7:6
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4                                         9:8
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5                                       11:10
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6                                       13:12
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7                                       15:14
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                             0x00000003

#define NV097_SET_VERTEX_DATA2F_M(i,j)                        (0x00001880+(i)*8+(j)*4)
#define NV097_SET_VERTEX_DATA2F_M_V                                               31:0

#define NV097_SET_VERTEX_DATA4F_M(i,j)                       (0x00001a00+(i)*16+(j)*4)
#define NV097_SET_VERTEX_DATA4F_M_V                                               31:0

#define NV097_SET_VERTEX_DATA2S(i)                                  (0x00001900+(i)*4)
#define NV097_SET_VERTEX_DATA2S_V                                                 31:0

#define NV097_SET_VERTEX_DATA4UB(i)                                 (0x00001940+(i)*4)
#define NV097_SET_VERTEX_DATA4UB_V                                                31:0

#define NV097_SET_VERTEX_DATA4S_M(i,j)                        (0x00001980+(i)*8+(j)*4)
#define NV097_SET_VERTEX_DATA4S_M_V                                               31:0

#define NV097_SET_TEXGEN_S(i)                                      (0x000003c0+(i)*16)
#define NV097_SET_TEXGEN_S_V                                                      31:0
#define NV097_SET_TEXGEN_S_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_S_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_S_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_S_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_S_V_OBJECT_LINEAR                                  0x00002401
#define NV097_SET_TEXGEN_S_V_SPHERE_MAP                                     0x00002402

#define NV097_SET_TEXGEN_T(i)                                      (0x000003c4+(i)*16)
#define NV097_SET_TEXGEN_T_V                                                      31:0
#define NV097_SET_TEXGEN_T_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_T_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_T_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_T_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_T_V_OBJECT_LINEAR                                  0x00002401
#define NV097_SET_TEXGEN_T_V_SPHERE_MAP                                     0x00002402

#define NV097_SET_TEXGEN_R(i)                                      (0x000003c8+(i)*16)
#define NV097_SET_TEXGEN_R_V                                                      31:0
#define NV097_SET_TEXGEN_R_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_R_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_R_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_R_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_R_V_OBJECT_LINEAR                                  0x00002401

#define NV097_SET_TEXGEN_Q(i)                                      (0x000003cc+(i)*16)
#define NV097_SET_TEXGEN_Q_V                                                      31:0
#define NV097_SET_TEXGEN_Q_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_Q_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_Q_V_OBJECT_LINEAR                                  0x00002401

#define NV097_SET_TEXGEN_VIEW_MODEL                                         0x000009cc
#define NV097_SET_TEXGEN_VIEW_MODEL_V                                             31:0
#define NV097_SET_TEXGEN_VIEW_MODEL_V_LOCAL_VIEWER                          0x00000000
#define NV097_SET_TEXGEN_VIEW_MODEL_V_INFINITE_VIEWER                       0x00000001

#define NV097_SET_TEXTURE_MATRIX_ENABLE(i)                          (0x00000420+(i)*4)
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V                                         31:0
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V_FALSE                             0x00000000
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V_TRUE                              0x00000001

#define NV097_SET_POINT_SIZE                                                0x0000043c
#define NV097_SET_POINT_SIZE_V                                                    31:0

#define NV097_SET_SWATH_WIDTH                                               0x000009f8
#define NV097_SET_SWATH_WIDTH_V                                                   31:0
#define NV097_SET_SWATH_WIDTH_V_8                                           0x00000000
#define NV097_SET_SWATH_WIDTH_V_16                                          0x00000001
#define NV097_SET_SWATH_WIDTH_V_32                                          0x00000002
#define NV097_SET_SWATH_WIDTH_V_64                                          0x00000003
#define NV097_SET_SWATH_WIDTH_V_128                                         0x00000004
#define NV097_SET_SWATH_WIDTH_V_OFF                                         0x0000000F

#define NV097_SET_FLAT_SHADE_OP                                             0x000009fc
#define NV097_SET_FLAT_SHADE_OP_V                                                 31:0
#define NV097_SET_FLAT_SHADE_OP_V_LAST_VTX                                  0x00000000
#define NV097_SET_FLAT_SHADE_OP_V_FIRST_VTX                                 0x00000001

#define NV097_SET_PROJECTION_MATRIX(i)                              (0x00000440+(i)*4)
#define NV097_SET_PROJECTION_MATRIX_V                                             31:0

#define NV097_SET_MODEL_VIEW_MATRIX0(i)                             (0x00000480+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX0_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX1(i)                             (0x000004c0+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX1_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX2(i)                             (0x00000500+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX2_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX3(i)                             (0x00000540+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX3_V                                            31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                     (0x00000580+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX0_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                     (0x000005c0+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX1_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX2(i)                     (0x00000600+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX2_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX3(i)                     (0x00000640+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX3_V                                    31:0

#define NV097_SET_COMPOSITE_MATRIX(i)                               (0x00000680+(i)*4)
#define NV097_SET_COMPOSITE_MATRIX_V                                              31:0

#define NV097_SET_TEXTURE_MATRIX0(i)                                (0x000006c0+(i)*4)
#define NV097_SET_TEXTURE_MATRIX0_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX1(i)                                (0x00000700+(i)*4)
#define NV097_SET_TEXTURE_MATRIX1_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX2(i)                                (0x00000740+(i)*4)
#define NV097_SET_TEXTURE_MATRIX2_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX3(i)                                (0x00000780+(i)*4)
#define NV097_SET_TEXTURE_MATRIX3_V                                               31:0

#define NV097_SET_TEXGEN_PLANE_S(i,j)                        (0x00000840+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_S_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_T(i,j)                        (0x00000850+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_T_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_R(i,j)                        (0x00000860+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_R_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_Q(i,j)                        (0x00000870+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_Q_V                                                31:0

#define NV097_SET_FOG_PARAMS(i)                                     (0x000009c0+(i)*4)
#define NV097_SET_FOG_PARAMS_V                                                    31:0

#define NV097_SET_FOG_PLANE(i)                                      (0x000009d0+(i)*4)
#define NV097_SET_FOG_PLANE_V                                                     31:0

#define NV097_SET_SPECULAR_PARAMS(i)                                (0x000009e0+(i)*4)
#define NV097_SET_SPECULAR_PARAMS_V                                               31:0

#define NV097_SET_BACK_SPECULAR_PARAMS(i)                           (0x00001e28+(i)*4)
#define NV097_SET_BACK_SPECULAR_PARAMS_V                                          31:0

#define NV097_SET_SCENE_AMBIENT_COLOR(i)                            (0x00000a10+(i)*4)
#define NV097_SET_SCENE_AMBIENT_COLOR_V                                           31:0

#define NV097_SET_VIEWPORT_SCALE(i)                                 (0x00000af0+(i)*4)
#define NV097_SET_VIEWPORT_SCALE_V                                                31:0

#define NV097_SET_VIEWPORT_OFFSET(i)                                (0x00000a20+(i)*4)
#define NV097_SET_VIEWPORT_OFFSET_V                                               31:0

#define NV097_SET_POINT_PARAMS(i)                                   (0x00000a30+(i)*4)
#define NV097_SET_POINT_PARAMS_V                                                  31:0

#define NV097_SET_EYE_POSITION(i)                                   (0x00000a50+(i)*4)
#define NV097_SET_EYE_POSITION_V                                                  31:0

#define NV097_SET_BACK_LIGHT_AMBIENT_COLOR(i,j)              (0x00000c00+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_AMBIENT_COLOR_V                                      31:0

#define NV097_SET_BACK_LIGHT_DIFFUSE_COLOR(i,j)              (0x00000c0c+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_DIFFUSE_COLOR_V                                      31:0

#define NV097_SET_BACK_LIGHT_SPECULAR_COLOR(i,j)             (0x00000c18+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_SPECULAR_COLOR_V                                     31:0

#define NV097_SET_LIGHT_AMBIENT_COLOR(i,j)                  (0x00001000+(i)*128+(j)*4)
#define NV097_SET_LIGHT_AMBIENT_COLOR_V                                           31:0

#define NV097_SET_LIGHT_DIFFUSE_COLOR(i,j)                  (0x0000100c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_DIFFUSE_COLOR_V                                           31:0

#define NV097_SET_LIGHT_SPECULAR_COLOR(i,j)                 (0x00001018+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPECULAR_COLOR_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_RANGE(i)                            (0x00001024+(i)*128)
#define NV097_SET_LIGHT_LOCAL_RANGE_V                                             31:0

#define NV097_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)           (0x00001028+(i)*128+(j)*4)
#define NV097_SET_LIGHT_INFINITE_HALF_VECTOR_V                                    31:0

#define NV097_SET_LIGHT_INFINITE_DIRECTION(i,j)             (0x00001034+(i)*128+(j)*4)
#define NV097_SET_LIGHT_INFINITE_DIRECTION_V                                      31:0

#define NV097_SET_LIGHT_SPOT_FALLOFF(i,j)                   (0x00001040+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPOT_FALLOFF_V                                            31:0

#define NV097_SET_LIGHT_SPOT_DIRECTION(i,j)                 (0x0000104c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPOT_DIRECTION_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_POSITION(i,j)                 (0x0000105c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_LOCAL_POSITION_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_ATTENUATION(i,j)              (0x00001068+(i)*128+(j)*4)
#define NV097_SET_LIGHT_LOCAL_ATTENUATION_V                                       31:0

#define NV097_SET_VERTEX3F(i)                                       (0x00001500+(i)*4)
#define NV097_SET_VERTEX3F_V                                                      31:0

#define NV097_SET_VERTEX4F(i)                                       (0x00001518+(i)*4)
#define NV097_SET_VERTEX4F_V                                                      31:0

#define NV097_SET_VERTEX4S(i)                                       (0x00001528+(i)*4)
#define NV097_SET_VERTEX4S_V                                                      31:0

#define NV097_SET_NORMAL3F(i)                                       (0x00001530+(i)*4)
#define NV097_SET_NORMAL3F_V                                                      31:0

#define NV097_SET_NORMAL3S(i)                                       (0x00001540+(i)*4)
#define NV097_SET_NORMAL3S_V                                                      31:0

#define NV097_SET_DIFFUSE_COLOR4F(i)                                (0x00001550+(i)*4)
#define NV097_SET_DIFFUSE_COLOR4F_V                                               31:0

#define NV097_SET_DIFFUSE_COLOR3F(i)                                (0x00001560+(i)*4)
#define NV097_SET_DIFFUSE_COLOR3F_V                                               31:0

#define NV097_SET_DIFFUSE_COLOR4UB                                          0x0000156c
#define NV097_SET_DIFFUSE_COLOR4UB_V                                              31:0

#define NV097_SET_SPECULAR_COLOR4F(i)                               (0x00001570+(i)*4)
#define NV097_SET_SPECULAR_COLOR4F_V                                              31:0

#define NV097_SET_SPECULAR_COLOR3F(i)                               (0x00001580+(i)*4)
#define NV097_SET_SPECULAR_COLOR3F_V                                              31:0

#define NV097_SET_SPECULAR_COLOR4UB                                         0x0000158c
#define NV097_SET_SPECULAR_COLOR4UB_V                                             31:0

#define NV097_SET_TEXCOORD0_2F(i)                                   (0x00001590+(i)*4)
#define NV097_SET_TEXCOORD0_2F_V                                                  31:0

#define NV097_SET_TEXCOORD0_2S                                              0x00001598
#define NV097_SET_TEXCOORD0_2S_V                                                  31:0

#define NV097_SET_TEXCOORD0_4F(i)                                   (0x000015a0+(i)*4)
#define NV097_SET_TEXCOORD0_4F_V                                                  31:0

#define NV097_SET_TEXCOORD0_4S(i)                                   (0x000015b0+(i)*4)
#define NV097_SET_TEXCOORD0_4S_V                                                  31:0

#define NV097_SET_TEXCOORD1_2F(i)                                   (0x000015b8+(i)*4)
#define NV097_SET_TEXCOORD1_2F_V                                                  31:0

#define NV097_SET_TEXCOORD1_2S                                              0x000015c0
#define NV097_SET_TEXCOORD1_2S_V                                                  31:0

#define NV097_SET_TEXCOORD1_4F(i)                                   (0x000015c8+(i)*4)
#define NV097_SET_TEXCOORD1_4F_V                                                  31:0

#define NV097_SET_TEXCOORD1_4S(i)                                   (0x000015d8+(i)*4)
#define NV097_SET_TEXCOORD1_4S_V                                                  31:0

#define NV097_SET_TEXCOORD2_2F(i)                                   (0x000015e0+(i)*4)
#define NV097_SET_TEXCOORD2_2F_V                                                  31:0

#define NV097_SET_TEXCOORD2_2S                                              0x000015e8
#define NV097_SET_TEXCOORD2_2S_V                                                  31:0

#define NV097_SET_TEXCOORD2_4F(i)                                   (0x000015f0+(i)*4)
#define NV097_SET_TEXCOORD2_4F_V                                                  31:0

#define NV097_SET_TEXCOORD2_4S(i)                                   (0x00001600+(i)*4)
#define NV097_SET_TEXCOORD2_4S_V                                                  31:0

#define NV097_SET_TEXCOORD3_2F(i)                                   (0x00001608+(i)*4)
#define NV097_SET_TEXCOORD3_2F_V                                                  31:0

#define NV097_SET_TEXCOORD3_2S                                              0x00001610
#define NV097_SET_TEXCOORD3_2S_V                                                  31:0

#define NV097_SET_TEXCOORD3_4F(i)                                   (0x00001620+(i)*4)
#define NV097_SET_TEXCOORD3_4F_V                                                  31:0

#define NV097_SET_TEXCOORD3_4S(i)                                   (0x00001630+(i)*4)
#define NV097_SET_TEXCOORD3_4S_V                                                  31:0

#define NV097_SET_FOG1F                                                     0x00001698
#define NV097_SET_FOG1F_V                                                         31:0

#define NV097_SET_WEIGHT1F                                                  0x0000169c
#define NV097_SET_WEIGHT1F_V                                                      31:0

#define NV097_SET_WEIGHT2F(i)                                       (0x000016a0+(i)*4)
#define NV097_SET_WEIGHT2F_V                                                      31:0

#define NV097_SET_WEIGHT3F(i)                                       (0x000016b0+(i)*4)
#define NV097_SET_WEIGHT3F_V                                                      31:0

#define NV097_SET_WEIGHT4F(i)                                       (0x000016c0+(i)*4)
#define NV097_SET_WEIGHT4F_V                                                      31:0

#define NV097_SET_EDGE_FLAG                                                 0x000016bc
#define NV097_SET_EDGE_FLAG_V                                                     31:0
#define NV097_SET_EDGE_FLAG_V_FALSE                                         0x00000000
#define NV097_SET_EDGE_FLAG_V_TRUE                                          0x00000001

#define NV097_SET_TRANSFORM_FIXED_CONST0(i)                         (0x000016e0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST0_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST1(i)                         (0x000016f0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST1_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST2(i)                         (0x00001700+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST2_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST3(i)                         (0x000016d0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST3_V                                        31:0

#define NV097_SET_TLCONST_ZERO(i)                                   (0x000017d4+(i)*4)
#define NV097_SET_TLCONST_ZERO_V                                                  31:0

#define NV097_SET_EYE_DIRECTION(i)                                  (0x000017e0+(i)*4)
#define NV097_SET_EYE_DIRECTION_V                                                 31:0

#define NV097_SET_LINEAR_FOG_CONST(i)                               (0x000017ec+(i)*4)
#define NV097_SET_LINEAR_FOG_CONST_V                                              31:0

#define NV097_INVALIDATE_VERTEX_CACHE_FILE                                  0x00001710

#define NV097_INVALIDATE_VERTEX_FILE                                        0x00001714

#define NV097_TL_NOP                                                        0x00001718

#define NV097_TL_SYNC                                                       0x0000171c

#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET(i)                       (0x00001720+(i)*4)
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA                           31:31
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA_VERTEX_A             0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA_VERTEX_B             0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_OFFSET                                 30:0

#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT(i)                       (0x00001760+(i)*4)
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_STRIDE                                 31:8
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE                                    7:4
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_DISABLED                    0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_3W                          0x00000007
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE                                    3:0
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_UB_D3D                      0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_S1                          0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_F                           0x00000002
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_UB_OGL                      0x00000004
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_S32K                        0x00000005
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_CMP                         0x00000006

#define NV097_SET_LOGIC_OP_ENABLE                                           0x000017bc
#define NV097_SET_LOGIC_OP_ENABLE_V                                               31:0
#define NV097_SET_LOGIC_OP_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_LOGIC_OP_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_LOGIC_OP                                                  0x000017c0
#define NV097_SET_LOGIC_OP_V                                                      31:0
#define NV097_SET_LOGIC_OP_V_CLEAR                                          0x00001500
#define NV097_SET_LOGIC_OP_V_AND                                            0x00001501
#define NV097_SET_LOGIC_OP_V_AND_REVERSE                                    0x00001502
#define NV097_SET_LOGIC_OP_V_COPY                                           0x00001503
#define NV097_SET_LOGIC_OP_V_AND_INVERTED                                   0x00001504
#define NV097_SET_LOGIC_OP_V_NOOP                                           0x00001505
#define NV097_SET_LOGIC_OP_V_XOR                                            0x00001506
#define NV097_SET_LOGIC_OP_V_OR                                             0x00001507
#define NV097_SET_LOGIC_OP_V_NOR                                            0x00001508
#define NV097_SET_LOGIC_OP_V_EQUIV                                          0x00001509
#define NV097_SET_LOGIC_OP_V_INVERT                                         0x0000150A
#define NV097_SET_LOGIC_OP_V_OR_REVERSE                                     0x0000150B
#define NV097_SET_LOGIC_OP_V_COPY_INVERTED                                  0x0000150C
#define NV097_SET_LOGIC_OP_V_OR_INVERTED                                    0x0000150D
#define NV097_SET_LOGIC_OP_V_NAND                                           0x0000150E
#define NV097_SET_LOGIC_OP_V_SET                                            0x0000150F

#define NV097_SET_BEGIN_END                                                 0x000017fc
#define NV097_SET_BEGIN_END_OP                                                    31:0
#define NV097_SET_BEGIN_END_OP_END                                          0x00000000
#define NV097_SET_BEGIN_END_OP_POINTS                                       0x00000001
#define NV097_SET_BEGIN_END_OP_LINES                                        0x00000002
#define NV097_SET_BEGIN_END_OP_LINE_LOOP                                    0x00000003
#define NV097_SET_BEGIN_END_OP_LINE_STRIP                                   0x00000004
#define NV097_SET_BEGIN_END_OP_TRIANGLES                                    0x00000005
#define NV097_SET_BEGIN_END_OP_TRIANGLE_STRIP                               0x00000006
#define NV097_SET_BEGIN_END_OP_TRIANGLE_FAN                                 0x00000007
#define NV097_SET_BEGIN_END_OP_QUADS                                        0x00000008
#define NV097_SET_BEGIN_END_OP_QUAD_STRIP                                   0x00000009
#define NV097_SET_BEGIN_END_OP_POLYGON                                      0x0000000A

#define NV097_ARRAY_ELEMENT16                                               0x00001800
#define NV097_ARRAY_ELEMENT16_VERTEX0                                             15:0
#define NV097_ARRAY_ELEMENT16_VERTEX1                                            31:16

#define NV097_ARRAY_ELEMENT32                                               0x00001808
#define NV097_ARRAY_ELEMENT32_V                                                   31:0

#define NV097_DRAW_ARRAYS                                                   0x00001810
#define NV097_DRAW_ARRAYS_COUNT                                                  31:24
#define NV097_DRAW_ARRAYS_START_INDEX                                             23:0

#define NV097_INLINE_VERTEX_REUSE                                           0x00001828
#define NV097_INLINE_VERTEX_REUSE_V                                               31:0

#define NV097_INLINE_ARRAY                                                  0x00001818
#define NV097_INLINE_ARRAY_V                                                      31:0

#define NV097_SET_TEXTURE_OFFSET(i)                                (0x00001b00+(i)*64)
#define NV097_SET_TEXTURE_OFFSET_V                                                31:0

#define NV097_SET_TEXTURE_FORMAT(i)                                (0x00001b04+(i)*64)
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA                                       1:0
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                    2:2
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                       0x00000000
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                        0x00000001
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE                                     3:3
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE_TEXTURE                      0x00000000
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE_COLOR                        0x00000001
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY                                    7:4
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_ONE                         0x00000001
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_TWO                         0x00000002
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_THREE                       0x00000003
#define NV097_SET_TEXTURE_FORMAT_COLOR                                            15:8
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_Y8                                0x00000000
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_AY8                               0x00000001
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A1R5G5B5                          0x00000002
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_X1R5G5B5                          0x00000003
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A4R4G4B4                          0x00000004
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R5G6B5                            0x00000005
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8R8G8B8                          0x00000006
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_X8R8G8B8                          0x00000007
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_I8_A8R8G8B8                       0x0000000B
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT1_A1R5G5B5                      0x0000000C
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT23_A8R8G8B8                     0x0000000E
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT45_A8R8G8B8                     0x0000000F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A1R5G5B5                    0x00000010
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R5G6B5                      0x00000011
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8R8G8B8                    0x00000012
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_Y8                          0x00000013
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_SY8                         0x00000014
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X7SY9                       0x00000015
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R8B8                        0x00000016
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_G8B8                        0x00000017
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_SG8SB8                      0x00000018
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8                                0x00000019
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8Y8                              0x0000001A
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_AY8                         0x0000001B
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X1R5G5B5                    0x0000001C
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A4R4G4B4                    0x0000001D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X8R8G8B8                    0x0000001E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8                          0x0000001F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8Y8                        0x00000020
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_CR8YB8CB8YA8                0x00000024
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_YB8CR8YA8CB8                0x00000025
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8CR8CB8Y8                  0x00000026
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R6G5B5                            0x00000027
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_G8B8                              0x00000028
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R8B8                              0x00000029
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_X8_Y24_FIXED                0x0000002A
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_X8_Y24_FLOAT                0x0000002B
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_Y16_FIXED                   0x0000002C
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_Y16_FLOAT                   0x0000002D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED          0x0000002E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT          0x0000002F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_Y16_FIXED             0x00000030
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT             0x00000031
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_Y16                               0x00000032
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_YB_16_YA_16                       0x00000033
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_A4V6YB6A4U6YA6              0x00000034
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_Y16                         0x00000035
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_YB16YA16                    0x00000036
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R6G5B5                      0x00000037
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R5G5B5A1                          0x00000038
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R4G4B4A4                          0x00000039
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8                          0x0000003A
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_B8G8R8A8                          0x0000003B
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R8G8B8A8                          0x0000003C
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R5G5B5A1                    0x0000003D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R4G4B4A4                    0x0000003E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8B8G8R8                    0x0000003F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_B8G8R8A8                    0x00000040
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R8G8B8A8                    0x00000041
#define NV097_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                   19:16
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U                                     23:20
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                            0x00000009
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                           0x0000000A
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                           0x0000000B
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_4096                           0x0000000C
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V                                     27:24
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                            0x00000009
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                           0x0000000A
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                           0x0000000B
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_4096                           0x0000000C
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P                                     31:28
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_512                            0x00000009

#define NV097_SET_TEXTURE_ADDRESS(i)                               (0x00001b08+(i)*64)
#define NV097_SET_TEXTURE_ADDRESS_U                                                3:0
#define NV097_SET_TEXTURE_ADDRESS_U_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_U_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_U_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_U_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_U_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U                                        7:4
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_V                                               11:8
#define NV097_SET_TEXTURE_ADDRESS_V_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_V_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_V_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_V_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_V_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V                                      15:12
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_P                                              19:16
#define NV097_SET_TEXTURE_ADDRESS_P_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_P_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_P_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_P_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_P_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P                                      23:20
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q                                      31:24
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q_TRUE                            0x00000001

#define NV097_SET_TEXTURE_CONTROL0(i)                              (0x00001b0c+(i)*64)
#define NV097_SET_TEXTURE_CONTROL0_ENABLE                                        31:30
#define NV097_SET_TEXTURE_CONTROL0_ENABLE_FALSE                             0x00000000
#define NV097_SET_TEXTURE_CONTROL0_ENABLE_TRUE                              0x00000001
#define NV097_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                 29:18
#define NV097_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                  17:6
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                   5:4
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                          0x00000000
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                          0x00000001
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_2                          0x00000002
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_3                          0x00000003
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                              3:3
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                 0x00000000
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                  0x00000001
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                               2:2
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                  0x00000000
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                   0x00000001
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                             1:0
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE                0x00000000
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA                0x00000001
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                 0x00000002
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                 0x00000003

#define NV097_SET_TEXTURE_CONTROL1(i)                              (0x00001b10+(i)*64)
#define NV097_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                   31:16

#define NV097_SET_TEXTURE_FILTER(i)                                (0x00001b14+(i)*64)
#define NV097_SET_TEXTURE_FILTER_MIPMAP_LOD_BIAS                                  12:0
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL                              15:13
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL_QUINCUNX                0x00000001
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL_GAUSSIAN_3              0x00000002
#define NV097_SET_TEXTURE_FILTER_MIN                                             23:16
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_LOD0                               0x00000001
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_LOD0                              0x00000002
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_NEARESTLOD                         0x00000003
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_NEARESTLOD                        0x00000004
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_TENT_LOD                           0x00000005
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_TENT_LOD                          0x00000006
#define NV097_SET_TEXTURE_FILTER_MIN_CONVOLUTION_2D_LOD0                    0x00000007
#define NV097_SET_TEXTURE_FILTER_MAG                                             27:24
#define NV097_SET_TEXTURE_FILTER_MAG_BOX_LOD0                               0x00000001
#define NV097_SET_TEXTURE_FILTER_MAG_TENT_LOD0                              0x00000002
#define NV097_SET_TEXTURE_FILTER_MAG_CONVOLUTION_2D_LOD0                    0x00000004
#define NV097_SET_TEXTURE_FILTER_ASIGNED                                         28:28
#define NV097_SET_TEXTURE_FILTER_ASIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_ASIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_RSIGNED                                         29:29
#define NV097_SET_TEXTURE_FILTER_RSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_RSIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_GSIGNED                                         30:30
#define NV097_SET_TEXTURE_FILTER_GSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_GSIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_BSIGNED                                         31:31
#define NV097_SET_TEXTURE_FILTER_BSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_BSIGNED_BIT_ENABLED                        0x00000001

#define NV097_SET_TEXTURE_IMAGE_RECT(i)                            (0x00001b1c+(i)*64)
#define NV097_SET_TEXTURE_IMAGE_RECT_WIDTH                                       31:16
#define NV097_SET_TEXTURE_IMAGE_RECT_HEIGHT                                       15:0

#define NV097_SET_TEXTURE_PALETTE(i)                               (0x00001b20+(i)*64)
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA                                      1:0
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                             0x00000000
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                             0x00000001
#define NV097_SET_TEXTURE_PALETTE_LENGTH                                           5:2
#define NV097_SET_TEXTURE_PALETTE_LENGTH_256                                0x00000000
#define NV097_SET_TEXTURE_PALETTE_LENGTH_128                                0x00000001
#define NV097_SET_TEXTURE_PALETTE_LENGTH_64                                 0x00000002
#define NV097_SET_TEXTURE_PALETTE_LENGTH_32                                 0x00000003
#define NV097_SET_TEXTURE_PALETTE_OFFSET                                          31:6

#define NV097_SET_TEXTURE_BORDER_COLOR(i)                          (0x00001b24+(i)*64)
#define NV097_SET_TEXTURE_BORDER_COLOR_V                                          31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT00(i)                    (0x00001b28+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT00_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT01(i)                    (0x00001b2c+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT01_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT11(i)                    (0x00001b30+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT11_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT10(i)                    (0x00001b34+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT10_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_SCALE(i)                    (0x00001b38+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_SCALE_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_OFFSET(i)                   (0x00001b3c+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_OFFSET_V                                   31:0

#define NV097_PARK_ATTRIBUTE                                                0x00001d64

#define NV097_UNPARK_ATTRIBUTE                                              0x00001d68

#define NV097_SET_SEMAPHORE_OFFSET                                          0x00001d6c
#define NV097_SET_SEMAPHORE_OFFSET_V                                              31:0

#define NV097_BACK_END_WRITE_SEMAPHORE_RELEASE                              0x00001d70
#define NV097_BACK_END_WRITE_SEMAPHORE_RELEASE_V                                  31:0

#define NV097_TEXTURE_READ_SEMAPHORE_RELEASE                                0x00001d74
#define NV097_TEXTURE_READ_SEMAPHORE_RELEASE_V                                    31:0

#define NV097_SET_ZMIN_MAX_CONTROL                                          0x00001d78
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN                                3:0
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN_FALSE                   0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN_TRUE                    0x00000001
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN                                       7:4
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN_CULL                           0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN_CLAMP                          0x00000001
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W                                  11:8
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W_FALSE                      0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W_TRUE                       0x00000001

#define NV097_SET_ANTI_ALIASING_CONTROL                                     0x00001d7c
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE                                     3:0
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE_FALSE                        0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE_TRUE                         0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE                          7:4
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE_DISABLE           0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE_ENABLE            0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE                              11:8
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE_DISABLE                0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE_ENABLE                 0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_SAMPLE_MASK                              31:16

#define NV097_SET_COMPRESS_ZBUFFER_EN                                       0x00001d80
#define NV097_SET_COMPRESS_ZBUFFER_EN_V                                           31:0
#define NV097_SET_COMPRESS_ZBUFFER_EN_V_DISABLE                             0x00000000
#define NV097_SET_COMPRESS_ZBUFFER_EN_V_ENABLE                              0x00000001

#define NV097_SET_OCCLUDE_ZSTENCIL_EN                                       0x00001d84
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN                                  0:0
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN_DISABLE                   0x00000000
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN_ENABLE                    0x00000001
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN                           1:1
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN_DISABLE            0x00000000
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN_ENABLE             0x00000001

#define NV097_SET_SURFACE_FORMAT                                            0x00000208
#define NV097_SET_SURFACE_FORMAT_COLOR                                             3:0
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                 0x00000001
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                 0x00000002
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                            0x00000003
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                 0x00000004
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                 0x00000005
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8             0x00000006
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8             0x00000007
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                          0x00000008
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_B8                                0x00000009
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_G8B8                              0x0000000A
#define NV097_SET_SURFACE_FORMAT_ZETA                                              7:4
#define NV097_SET_SURFACE_FORMAT_ZETA_Z16                                   0x00000001
#define NV097_SET_SURFACE_FORMAT_ZETA_Z24S8                                 0x00000002
#define NV097_SET_SURFACE_FORMAT_TYPE                                             11:8
#define NV097_SET_SURFACE_FORMAT_TYPE_PITCH                                 0x00000001
#define NV097_SET_SURFACE_FORMAT_TYPE_SWIZZLE                               0x00000002
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING                                   15:12
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_1                     0x00000000
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_CORNER_2              0x00000001
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_SQUARE_OFFSET_4              0x00000002
#define NV097_SET_SURFACE_FORMAT_WIDTH                                           23:16
#define NV097_SET_SURFACE_FORMAT_WIDTH_1                                    0x00000000
#define NV097_SET_SURFACE_FORMAT_WIDTH_2                                    0x00000001
#define NV097_SET_SURFACE_FORMAT_WIDTH_4                                    0x00000002
#define NV097_SET_SURFACE_FORMAT_WIDTH_8                                    0x00000003
#define NV097_SET_SURFACE_FORMAT_WIDTH_16                                   0x00000004
#define NV097_SET_SURFACE_FORMAT_WIDTH_32                                   0x00000005
#define NV097_SET_SURFACE_FORMAT_WIDTH_64                                   0x00000006
#define NV097_SET_SURFACE_FORMAT_WIDTH_128                                  0x00000007
#define NV097_SET_SURFACE_FORMAT_WIDTH_256                                  0x00000008
#define NV097_SET_SURFACE_FORMAT_WIDTH_512                                  0x00000009
#define NV097_SET_SURFACE_FORMAT_WIDTH_1024                                 0x0000000A
#define NV097_SET_SURFACE_FORMAT_WIDTH_2048                                 0x0000000B
#define NV097_SET_SURFACE_FORMAT_WIDTH_4096                                 0x0000000C
#define NV097_SET_SURFACE_FORMAT_HEIGHT                                          31:24
#define NV097_SET_SURFACE_FORMAT_HEIGHT_1                                   0x00000000
#define NV097_SET_SURFACE_FORMAT_HEIGHT_2                                   0x00000001
#define NV097_SET_SURFACE_FORMAT_HEIGHT_4                                   0x00000002
#define NV097_SET_SURFACE_FORMAT_HEIGHT_8                                   0x00000003
#define NV097_SET_SURFACE_FORMAT_HEIGHT_16                                  0x00000004
#define NV097_SET_SURFACE_FORMAT_HEIGHT_32                                  0x00000005
#define NV097_SET_SURFACE_FORMAT_HEIGHT_64                                  0x00000006
#define NV097_SET_SURFACE_FORMAT_HEIGHT_128                                 0x00000007
#define NV097_SET_SURFACE_FORMAT_HEIGHT_256                                 0x00000008
#define NV097_SET_SURFACE_FORMAT_HEIGHT_512                                 0x00000009
#define NV097_SET_SURFACE_FORMAT_HEIGHT_1024                                0x0000000A
#define NV097_SET_SURFACE_FORMAT_HEIGHT_2048                                0x0000000B
#define NV097_SET_SURFACE_FORMAT_HEIGHT_4096                                0x0000000C

#define NV097_SET_ZSTENCIL_CLEAR_VALUE                                      0x00001d8c
#define NV097_SET_ZSTENCIL_CLEAR_VALUE_V                                          31:0

#define NV097_SET_COLOR_CLEAR_VALUE                                         0x00001d90
#define NV097_SET_COLOR_CLEAR_VALUE_V                                             31:0

#define NV097_CLEAR_SURFACE                                                 0x00001d94
#define NV097_CLEAR_SURFACE_Z                                                      0:0
#define NV097_CLEAR_SURFACE_Z_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_Z_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_STENCIL                                                1:1
#define NV097_CLEAR_SURFACE_STENCIL_DISABLE                                 0x00000000
#define NV097_CLEAR_SURFACE_STENCIL_ENABLE                                  0x00000001
#define NV097_CLEAR_SURFACE_R                                                      4:4
#define NV097_CLEAR_SURFACE_R_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_R_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_G                                                      5:5
#define NV097_CLEAR_SURFACE_G_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_G_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_B                                                      6:6
#define NV097_CLEAR_SURFACE_B_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_B_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_A                                                      7:7
#define NV097_CLEAR_SURFACE_A_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_A_ENABLE                                        0x00000001

#define NV097_SET_CLEAR_RECT_HORIZONTAL                                     0x00001d98
#define NV097_SET_CLEAR_RECT_HORIZONTAL_XMIN                                      15:0
#define NV097_SET_CLEAR_RECT_HORIZONTAL_XMAX                                     31:16

#define NV097_SET_CLEAR_RECT_VERTICAL                                       0x00001d9c
#define NV097_SET_CLEAR_RECT_VERTICAL_YMIN                                        15:0
#define NV097_SET_CLEAR_RECT_VERTICAL_YMAX                                       31:16

#define NV097_SET_BEGIN_PATCH0                                              0x00001de0
#define NV097_SET_BEGIN_PATCH0_POSITION_DEGREE                                     3:0
#define NV097_SET_BEGIN_PATCH0_PARAM1_DEGREE                                       7:4
#define NV097_SET_BEGIN_PATCH0_PARAM2_DEGREE                                      11:8
#define NV097_SET_BEGIN_PATCH0_PARAM3_DEGREE                                     15:12
#define NV097_SET_BEGIN_PATCH0_PARAM4_DEGREE                                     19:16
#define NV097_SET_BEGIN_PATCH0_PARAM5_DEGREE                                     23:20
#define NV097_SET_BEGIN_PATCH0_PARAM6_DEGREE                                     27:24
#define NV097_SET_BEGIN_PATCH0_PARAM7_DEGREE                                     31:28

#define NV097_SET_BEGIN_PATCH1                                              0x00001de4
#define NV097_SET_BEGIN_PATCH1_PARAM8_DEGREE                                       3:0
#define NV097_SET_BEGIN_PATCH1_PARAM9_DEGREE                                       7:4
#define NV097_SET_BEGIN_PATCH1_PARAM10_DEGREE                                     11:8
#define NV097_SET_BEGIN_PATCH1_PARAM11_DEGREE                                    15:12
#define NV097_SET_BEGIN_PATCH1_PARAM12_DEGREE                                    19:16
#define NV097_SET_BEGIN_PATCH1_PARAM13_DEGREE                                    23:20
#define NV097_SET_BEGIN_PATCH1_PARAM14_DEGREE                                    27:24
#define NV097_SET_BEGIN_PATCH1_PARAM15_DEGREE                                    31:28

#define NV097_SET_BEGIN_PATCH2                                              0x00001de8
#define NV097_SET_BEGIN_PATCH2_SWATCH_ROWS                                         7:0
#define NV097_SET_BEGIN_PATCH2_SWATCH_COLS                                        15:8
#define NV097_SET_BEGIN_PATCH2_SWATCH_SIZE                                       20:16
#define NV097_SET_BEGIN_PATCH2_PARTIAL_SWATCH_WIDTH                              25:21
#define NV097_SET_BEGIN_PATCH2_PARTIAL_SWATCH_HEIGHT                             30:26
#define NV097_SET_BEGIN_PATCH2_PATCH_TYPE                                        31:31
#define NV097_SET_BEGIN_PATCH2_PATCH_TYPE_SQUARE                            0x00000000

#define NV097_SET_BEGIN_PATCH3                                              0x00001dec
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS                                            2:0
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_NONE                                0x00000000
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST                               0x00000001
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_LAST                                0x00000002
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST_AND_LAST                      0x00000003
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_REV_FIRST                           0x00000005
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_REV_LAST                            0x00000006
#define NV097_SET_BEGIN_PATCH3_COL_TRNS                                            5:3
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_NONE                                0x00000000
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST                               0x00000001
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_LAST                                0x00000002
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST_AND_LAST                      0x00000003
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_REV_FIRST                           0x00000005
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_REV_LAST                            0x00000006
#define NV097_SET_BEGIN_PATCH3_POSITION_GUARD_CURVE_DEGREE                         9:6
#define NV097_SET_BEGIN_PATCH3_NORMAL_GUARD_CURVE_DEGREE                         13:10
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE                                         15:14
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_TRI_STRIP                          0x00000000
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_REVERSED_TRI_STRIP                 0x00000001
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_BW_TRI_STRIP                       0x00000002
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_BW_REVERSED_TRI_STRIP              0x00000003
#define NV097_SET_BEGIN_PATCH3_TESSELATION                                       16:16
#define NV097_SET_BEGIN_PATCH3_TESSELATION_ADAPTIVE_STITCH                  0x00000000
#define NV097_SET_BEGIN_PATCH3_TESSELATION_FIXED_STITCH                     0x00000001
#define NV097_SET_BEGIN_PATCH3_NUM_COEFFS                                        31:24

#define NV097_SET_END_PATCH                                                 0x00001df0

#define NV097_SET_BEGIN_END_SWATCH                                          0x00001df4
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD                                      3:0
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_END                           0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_BEGIN                         0x00000001
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH                                       7:4
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_CONTINUE                       0x00000000
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_NEW                            0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW                                 11:8
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_FALSE                     0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_TRUE                      0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL                                15:12
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_FALSE                     0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_TRUE                      0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH                                  19:16
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_FULL_HEIGHT                 0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_PARTIAL_HEIGHT              0x00000001
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH                                 31:20
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_FULL_WIDTH                 0x00000000
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_PARTIAL_WIDTH              0x00000001

#define NV097_SET_BEGIN_END_CURVE                                           0x00001df8
#define NV097_SET_BEGIN_END_CURVE_CMD                                              3:0
#define NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA                        0x00000000
#define NV097_SET_BEGIN_END_CURVE_CMD_STRIP_CURVE                           0x00000001
#define NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE                      0x00000002
#define NV097_SET_BEGIN_END_CURVE_CMD_RIGHT_GUARD_CURVE                     0x00000003
#define NV097_SET_BEGIN_END_CURVE_CMD_OUTER_TRANSITION_CURVE                0x00000004
#define NV097_SET_BEGIN_END_CURVE_CMD_INNER_TRANSITION_CURVE                0x00000005
#define NV097_SET_BEGIN_END_CURVE_CMD_OUTER_END_PT                          0x00000006
#define NV097_SET_BEGIN_END_CURVE_CMD_INNER_END_PT                          0x00000007

#define NV097_SET_CURVE_COEFFICIENTS(i)                             (0x00001e00+(i)*4)
#define NV097_SET_CURVE_COEFFICIENTS_V                                            31:0

#define NV097_SET_BEGIN_TRANSITION0                                         0x00001e10
#define NV097_SET_BEGIN_TRANSITION0_POSITION_DEGREE                                3:0
#define NV097_SET_BEGIN_TRANSITION0_PARAM1_DEGREE                                  7:4
#define NV097_SET_BEGIN_TRANSITION0_PARAM2_DEGREE                                 11:8
#define NV097_SET_BEGIN_TRANSITION0_PARAM3_DEGREE                                15:12
#define NV097_SET_BEGIN_TRANSITION0_PARAM4_DEGREE                                19:16
#define NV097_SET_BEGIN_TRANSITION0_PARAM5_DEGREE                                23:20
#define NV097_SET_BEGIN_TRANSITION0_PARAM6_DEGREE                                27:24
#define NV097_SET_BEGIN_TRANSITION0_PARAM7_DEGREE                                31:28

#define NV097_SET_BEGIN_TRANSITION1                                         0x00001e14
#define NV097_SET_BEGIN_TRANSITION1_PARAM8_DEGREE                                  3:0
#define NV097_SET_BEGIN_TRANSITION1_PARAM9_DEGREE                                  7:4
#define NV097_SET_BEGIN_TRANSITION1_PARAM10_DEGREE                                11:8
#define NV097_SET_BEGIN_TRANSITION1_PARAM11_DEGREE                               15:12
#define NV097_SET_BEGIN_TRANSITION1_PARAM12_DEGREE                               19:16
#define NV097_SET_BEGIN_TRANSITION1_PARAM13_DEGREE                               23:20
#define NV097_SET_BEGIN_TRANSITION1_PARAM14_DEGREE                               27:24
#define NV097_SET_BEGIN_TRANSITION1_PARAM15_DEGREE                               31:28

#define NV097_SET_BEGIN_TRANSITION2                                         0x00001e18
#define NV097_SET_BEGIN_TRANSITION2_INSIDE_SEGMENTS                                9:0
#define NV097_SET_BEGIN_TRANSITION2_OUTSIDE_SEGMENTS                             19:10
#define NV097_SET_BEGIN_TRANSITION2_NUM_COEFFS                                   31:24

#define NV097_SET_END_TRANSITION                                            0x00001e1c

#define NV097_SET_SHADOW_ZSLOPE_THRESHOLD                                   0x00001e68
#define NV097_SET_SHADOW_ZSLOPE_THRESHOLD_V                                       31:0

#define NV097_SET_SHADOW_DEPTH_FUNC                                         0x00001e6c
#define NV097_SET_SHADOW_DEPTH_FUNC_V                                             31:0
#define NV097_SET_SHADOW_DEPTH_FUNC_V_NEVER                                 0x00000000
#define NV097_SET_SHADOW_DEPTH_FUNC_V_LESS                                  0x00000001
#define NV097_SET_SHADOW_DEPTH_FUNC_V_EQUAL                                 0x00000002
#define NV097_SET_SHADOW_DEPTH_FUNC_V_LEQUAL                                0x00000003
#define NV097_SET_SHADOW_DEPTH_FUNC_V_GREATER                               0x00000004
#define NV097_SET_SHADOW_DEPTH_FUNC_V_NOTEQUAL                              0x00000005
#define NV097_SET_SHADOW_DEPTH_FUNC_V_GEQUAL                                0x00000006
#define NV097_SET_SHADOW_DEPTH_FUNC_V_ALWAYS                                0x00000007

#define NV097_SET_SHADER_STAGE_PROGRAM                                      0x00001e70
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0                                      4:0
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1                                      9:5
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DOT_PRODUCT                   0x00000011
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2                                    14:10
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BRDF                          0x00000008
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_ST                        0x00000009
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_ZW                        0x0000000A
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_REFLECT_DIFFUSE           0x0000000B
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_PRODUCT                   0x00000011
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3                                    19:15
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BRDF                          0x00000008
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_ST                        0x00000009
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_ZW                        0x0000000A
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_REFLECT_SPECULAR          0x0000000C
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_STR_3D                    0x0000000D
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_STR_CUBE                  0x0000000E
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_REFLECT_SPECULAR_CONST    0x00000012

#define NV097_SET_EYE_VECTOR(i)                                     (0x0000181c+(i)*4)
#define NV097_SET_EYE_VECTOR_V                                                    31:0

#define NV097_SET_DOT_RGBMAPPING                                            0x00001e74
#define NV097_SET_DOT_RGBMAPPING_STAGE1                                            3:0
#define NV097_SET_DOT_RGBMAPPING_STAGE1_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_NV                  0x00000007
#define NV097_SET_DOT_RGBMAPPING_STAGE2                                            7:4
#define NV097_SET_DOT_RGBMAPPING_STAGE2_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_NV                  0x00000007
#define NV097_SET_DOT_RGBMAPPING_STAGE3                                           11:8
#define NV097_SET_DOT_RGBMAPPING_STAGE3_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_NV                  0x00000007

#define NV097_SET_SHADER_CLIP_PLANE_MODE                                    0x000017f8
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S                                  0:0
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T                                  1:1
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R                                  2:2
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q                                  3:3
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S                                  4:4
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T                                  5:5
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R                                  6:6
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q                                  7:7
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S                                  8:8
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T                                  9:9
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R                                10:10
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q                                11:11
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S                                12:12
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T                                13:13
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R                                14:14
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q                                15:15
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q_CLIPGEZ                   0x00000001

#define NV097_SET_SHADER_OTHER_STAGE_INPUT                                  0x00001e78
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE1                                 15:0
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE1_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2                                19:16
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2_INSTAGE_1                 0x00000001
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3                                23:20
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_1                 0x00000001
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_2                 0x00000002

#define NV097_SET_SPECULAR_FOG_FACTOR(i)                            (0x00001e20+(i)*4)
#define NV097_SET_SPECULAR_FOG_FACTOR_BLUE                                         7:0
#define NV097_SET_SPECULAR_FOG_FACTOR_GREEN                                       15:8
#define NV097_SET_SPECULAR_FOG_FACTOR_RED                                        23:16
#define NV097_SET_SPECULAR_FOG_FACTOR_ALPHA                                      31:24

#define NV097_SET_COMBINER_CONTROL                                          0x00001e60
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT                                 7:0
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_ONE                      0x00000001
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_TWO                      0x00000002
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_THREE                    0x00000003
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_FOUR                     0x00000004
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_FIVE                     0x00000005
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_SIX                      0x00000006
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_SEVEN                    0x00000007
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_EIGHT                    0x00000008
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT                                     11:8
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT_LSB                           0x00000000
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT_MSB                           0x00000001
#define NV097_SET_COMBINER_CONTROL_FACTOR0                                       15:12
#define NV097_SET_COMBINER_CONTROL_FACTOR0_SAME_FACTOR_ALL                  0x00000000
#define NV097_SET_COMBINER_CONTROL_FACTOR0_EACH_STAGE                       0x00000001
#define NV097_SET_COMBINER_CONTROL_FACTOR1                                       31:16
#define NV097_SET_COMBINER_CONTROL_FACTOR1_SAME_FACTOR_ALL                  0x00000000
#define NV097_SET_COMBINER_CONTROL_FACTOR1_EACH_STAGE                       0x00000001

#define NV097_SET_COMBINER_COLOR_OCW(i)                             (0x00001e40+(i)*4)
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB                              31:19
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB_DISABLE                 0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB_AB_DST_ENABLE           0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD                              18:18
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD_DISABLE                 0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD_CD_DST_ENABLE           0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_OP                                          17:15
#define NV097_SET_COMBINER_COLOR_OCW_OP_NOSHIFT                             0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_OP_NOSHIFT_BIAS                        0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY1                        0x00000002
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY1_BIAS                   0x00000003
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY2                        0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTRIGHTBY1                       0x00000006
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE                                  14:14
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE_FALSE                       0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE_TRUE                        0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE                               13:13
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE_FALSE                    0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE_TRUE                     0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE                               12:12
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE_FALSE                    0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE_TRUE                     0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST                                      11:8
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_0                          0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_4                          0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_5                          0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_8                          0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_9                          0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_A                          0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_B                          0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_C                          0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_D                          0x0000000D
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST                                        7:4
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_D                           0x0000000D
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST                                        3:0
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_D                           0x0000000D

#define NV097_SET_TRANSFORM_EXECUTION_MODE                                  0x00001e94
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE                                    1:0
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE_FIXED                       0x00000000
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE_PROGRAM                     0x00000002
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE                             31:2
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE_USER                  0x00000000
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE_PRIV                  0x00000001

#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN                            0x00001e98
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V                                31:0
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V_READ_ONLY                0x00000000
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V_READ_WRITE               0x00000001

#define NV097_SET_TRANSFORM_PROGRAM_LOAD                                    0x00001e9c
#define NV097_SET_TRANSFORM_PROGRAM_LOAD_PROG_LD_PTR                              31:0

#define NV097_SET_TRANSFORM_PROGRAM_START                                   0x00001ea0
#define NV097_SET_TRANSFORM_PROGRAM_START_V                                       31:0

#define NV097_SET_TRANSFORM_PROGRAM(i)                              (0x00000b00+(i)*4)
#define NV097_SET_TRANSFORM_PROGRAM_V                                             31:0

#define NV097_SET_TRANSFORM_CONSTANT_LOAD                                   0x00001ea4
#define NV097_SET_TRANSFORM_CONSTANT_LOAD_CONST_LD_PTR                            31:0

#define NV097_SET_TRANSFORM_CONSTANT(i)                             (0x00000b80+(i)*4)
#define NV097_SET_TRANSFORM_CONSTANT_V                                            31:0

#define NV097_SET_TRANSFORM_DATA(i)                                 (0x00001e80+(i)*4)
#define NV097_SET_TRANSFORM_DATA_V                                                31:0

#define NV097_LAUNCH_TRANSFORM_PROGRAM                                      0x00001e90
#define NV097_LAUNCH_TRANSFORM_PROGRAM_V                                          31:0

#define NV097_SET_TWO_SIDE_LIGHT_EN                                         0x000017c4
#define NV097_SET_TWO_SIDE_LIGHT_EN_V                                             31:0
#define NV097_SET_TWO_SIDE_LIGHT_EN_V_FALSE                                 0x00000000
#define NV097_SET_TWO_SIDE_LIGHT_EN_V_TRUE                                  0x00000001

#define NV097_SET_BACK_SCENE_AMBIENT_COLOR(i)                       (0x000017a0+(i)*4)
#define NV097_SET_BACK_SCENE_AMBIENT_COLOR_V                                      31:0

#define NV097_SET_BACK_MATERIAL_EMISSION(i)                         (0x000017b0+(i)*4)
#define NV097_SET_BACK_MATERIAL_EMISSION_V                                        31:0

#define NV097_CLEAR_REPORT_VALUE                                            0x000017c8
#define NV097_CLEAR_REPORT_VALUE_TYPE                                             31:0
#define NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT                       0x00000001

#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE                                  0x000017cc
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V                                      31:0
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V_FALSE                          0x00000000
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V_TRUE                           0x00000001

#define NV097_GET_REPORT                                                    0x000017d0
#define NV097_GET_REPORT_OFFSET                                                   23:0
#define NV097_GET_REPORT_TYPE                                                    31:24
#define NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT                               0x00000001

/* These methods are accepted between a begin/end. */
#define NV097_SET_VIEWPORT_OFFSET_SW(i)                             (0x00001f00+(i)*4)
/* The PASSTHRU_VIEWPORT_OFFSET aliases to row 1 of the MODEL_VIEW_MATRIX1 */
#define NV097_SET_PASSTHRU_VIEWPORT_OFFSET_SW(i)                    (0x00001f10+(i)*4)

#define NV097_DEBUG_INIT(i)                                         (0x00001fc0+(i)*4)
#define NV097_DEBUG_INIT_V                                                        31:0
#define NV097_TYPEDEF                                              Nv20KelvinPrimitive
#define NV097_SET_OBJECT                                                  (0x00000000)


// XXXmjc Shaun Ho and John Montrym will roll these into the master file at some point.
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_ZERO               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_DIFFUSE            NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPECULAR           NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX0               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX1               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX2               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX3               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPARE0             NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPARE1             NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_ZERO                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_DIFFUSE             NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPECULAR            NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX0                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX1                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX2                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX3                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPARE0              NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPARE1              NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_ZERO                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_DIFFUSE             NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPECULAR            NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX0                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX1                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX2                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX3                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPARE0              NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPARE1              NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_ZERO               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_DIFFUSE            NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPECULAR           NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX0               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX1               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX2               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX3               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPARE0             NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPARE1             NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_ZERO                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_DIFFUSE             NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPECULAR            NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX0                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX1                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX2                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX3                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPARE0              NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPARE1              NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_ZERO                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_DIFFUSE             NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPECULAR            NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX0                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX1                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX2                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX3                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPARE0              NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPARE1              NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D


/* class NV15_CONTEXT_SURFACE_SWIZZLED */
#define  NV15_CONTEXT_SURFACE_SWIZZLED                             (0x0000009E)
/* NvNotification[] elements */
#define NV09E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV09E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV09E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV09E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV09E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV09E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV09E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV09E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetFormat;               /* height_width_color V8_V8_V16     0300-0303*/
 NvU32 SetOffset;               /* byte offset of top-left pixel    0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv09eTypedef, Nv15ContextSurfaceSwizzled;
#define NV09E_TYPEDEF                                Nv15ContextSurfaceSwizzled
/* dma method offsets, fields, and values */
#define NV09E_SET_OBJECT                                           (0x00000000)
#define NV09E_NO_OPERATION                                         (0x00000100)
#define NV09E_NOTIFY                                               (0x00000104)
#define NV09E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV09E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV09E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV09E_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV09E_SET_FORMAT                                           (0x00000300)
#define NV09E_SET_FORMAT_COLOR                                     15:0
#define NV09E_SET_FORMAT_COLOR_LE_Y8                               (0x00000001)
#define NV09E_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV09E_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV09E_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000004)
#define NV09E_SET_FORMAT_COLOR_LE_Y16                              (0x00000005)
#define NV09E_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV09E_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV09E_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV09E_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV09E_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x0000000A)
#define NV09E_SET_FORMAT_COLOR_LE_Y32                              (0x0000000B)
#define NV09E_SET_FORMAT_WIDTH                                     23:16
#define NV09E_SET_FORMAT_WIDTH_2                                   (0x00000001)
#define NV09E_SET_FORMAT_WIDTH_4                                   (0x00000002)
#define NV09E_SET_FORMAT_WIDTH_8                                   (0x00000003)
#define NV09E_SET_FORMAT_WIDTH_16                                  (0x00000004)
#define NV09E_SET_FORMAT_WIDTH_32                                  (0x00000005)
#define NV09E_SET_FORMAT_WIDTH_64                                  (0x00000006)
#define NV09E_SET_FORMAT_WIDTH_128                                 (0x00000007)
#define NV09E_SET_FORMAT_WIDTH_256                                 (0x00000008)
#define NV09E_SET_FORMAT_WIDTH_512                                 (0x00000009)
#define NV09E_SET_FORMAT_WIDTH_1024                                (0x0000000A)
#define NV09E_SET_FORMAT_WIDTH_2048                                (0x0000000B)
#define NV09E_SET_FORMAT_HEIGHT                                    31:24
#define NV09E_SET_FORMAT_HEIGHT_2                                  (0x00000001)
#define NV09E_SET_FORMAT_HEIGHT_4                                  (0x00000002)
#define NV09E_SET_FORMAT_HEIGHT_8                                  (0x00000003)
#define NV09E_SET_FORMAT_HEIGHT_16                                 (0x00000004)
#define NV09E_SET_FORMAT_HEIGHT_32                                 (0x00000005)
#define NV09E_SET_FORMAT_HEIGHT_64                                 (0x00000006)
#define NV09E_SET_FORMAT_HEIGHT_128                                (0x00000007)
#define NV09E_SET_FORMAT_HEIGHT_256                                (0x00000008)
#define NV09E_SET_FORMAT_HEIGHT_512                                (0x00000009)
#define NV09E_SET_FORMAT_HEIGHT_1024                               (0x0000000A)
#define NV09E_SET_FORMAT_HEIGHT_2048                               (0x0000000B)
#define NV09E_SET_OFFSET                                           (0x00000304)


/* class NV15_IMAGE_BLIT */
#define  NV15_IMAGE_BLIT                                           (0x0000009F)
/* NvNotification[] elements */
#define NV09F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV09F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV09F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV09F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV09F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV09F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV09F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV09F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 SyncSetRead;             /*                                  0120-0123*/
 NvV32 SyncSetWrite;            /*                                  0124-0127*/
 NvV32 SyncSetModulo;           /*                                  0128-012b*/
 NvV32 SyncIncrementWrite;      /* ignored                          012c-012f*/
 NvV32 SyncStall;               /* ignored                          0130-0133*/
 NvV32 SyncIncrementReadRange;  /* scanline range to check 0 or 1   0134-0137*/
 NvV32 Reserved02[0x012];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved03[0x057];
 NvV32 SetOperation;            /* NV09F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved04[0x73d];
} Nv09fTypedef, Nv12ImageBlit;
#define NV09F_TYPEDEF                                             Nv12ImageBlit
/* dma method offsets, fields, and values */
#define NV09F_SET_OBJECT                                           (0x00000000)
#define NV09F_NO_OPERATION                                         (0x00000100)
#define NV09F_NOTIFY                                               (0x00000104)
#define NV09F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV09F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV09F_SYNC_SET_READ                                        (0x00000120)
#define NV09F_SYNC_SET_WRITE                                       (0x00000124)
#define NV09F_SYNC_SET_MODULO                                      (0x00000128)
#define NV09F_SYNC_INCREMENT_WRITE                                 (0x0000012C)
#define NV09F_SYNC_STALL                                           (0x00000130)
#define NV09F_SYNC_INCREMENT_READ_RANGE                            (0x00000134)
#define NV09F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV09F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV09F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV09F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV09F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV09F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV09F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV09F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV09F_SET_OPERATION                                        (0x000002FC)
#define NV09F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV09F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV09F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV09F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV09F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV09F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV09F_CONTROL_POINT_IN                                     (0x00000300)
#define NV09F_CONTROL_POINT_IN_X                                   15:0
#define NV09F_CONTROL_POINT_IN_Y                                   31:16
#define NV09F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV09F_CONTROL_POINT_OUT_X                                  15:0
#define NV09F_CONTROL_POINT_OUT_Y                                  31:16
#define NV09F_SIZE                                                 (0x00000308)
#define NV09F_SIZE_WIDTH                                           15:0
#define NV09F_SIZE_HEIGHT                                          31:16


/* class NV20_IMAGE_BLIT */
#define  NV20_IMAGE_BLIT                                            (0x0000205F)
/* NvNotification[] elements */
#define NV205F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV205F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV205F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV205F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV205F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV205F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV205F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV205F_NOTIFY_*                  0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 SyncSetRead;             /*                                  0120-0123*/
 NvV32 SyncSetWrite;            /*                                  0124-0127*/
 NvV32 SyncSetModulo;           /*                                  0128-012b*/
 NvV32 SyncIncrementWrite;      /* ignored                          012c-012f*/
 NvV32 SyncStall;               /* ignored                          0130-0133*/
 NvV32 SyncIncrementReadRange;  /* ignored                          0134-0137*/
 NvV32 Reserved02[0x012];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved03[0x057];
 NvV32 SetOperation;            /* NV205F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved04[0x73d];
} Nv205fTypedef, Nv20ImageBlit;
#define NV205F_TYPEDEF                                             Nv20ImageBlit
/* dma method offsets, fields, and values */
#define NV205F_SET_OBJECT                                           (0x00000000)
#define NV205F_NO_OPERATION                                         (0x00000100)
#define NV205F_NOTIFY                                               (0x00000104)
#define NV205F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV205F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV205F_SYNC_SET_READ                                        (0x00000120)
#define NV205F_SYNC_SET_WRITE                                       (0x00000124)
#define NV205F_SYNC_SET_MODULO                                      (0x00000128)
#define NV205F_SYNC_INCREMENT_WRITE                                 (0x0000012C)
#define NV205F_SYNC_STALL                                           (0x00000130)
#define NV205F_SYNC_INCREMENT_READ_RANGE                            (0x00000134)
#define NV205F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV205F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV205F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV205F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV205F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV205F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV205F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV205F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV205F_SET_OPERATION                                        (0x000002FC)
#define NV205F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV205F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV205F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV205F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV205F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV205F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV205F_CONTROL_POINT_IN                                     (0x00000300)
#define NV205F_CONTROL_POINT_IN_X                                   15:0
#define NV205F_CONTROL_POINT_IN_Y                                   31:16
#define NV205F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV205F_CONTROL_POINT_OUT_X                                  15:0
#define NV205F_CONTROL_POINT_OUT_Y                                  31:16
#define NV205F_SIZE                                                 (0x00000308)
#define NV205F_SIZE_WIDTH                                           15:0
#define NV205F_SIZE_HEIGHT                                          31:16


/* class NV03_DEVICE_XX */
#define  NV03_DEVICE_XX                                            (0x000000FF)
/* NvNotification[] fields and values */
#define NV0FF_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0FFTypedef, Nv03DeviceXX;
#define  NV0FF_TYPEDEF                                             Nv03DeviceXX

typedef V032 Nvff0Typedef;

typedef V032 Nvff1Typedef;

typedef V032 Nvff2Typedef;

typedef V032 Nvff3Typedef;

typedef V032 Nvff4Typedef;


/* class NV_CONTEXT_ERROR_TO_MEMORY */
#define  NV_CONTEXT_ERROR_TO_MEMORY                                (0x00000FF5)
/* NvNotification[] elements */
#define NVFF5_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF5_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF5_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF5_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} Nvff5Typedef, NvContextErrorToMemory;
#define NVFF5_TYPEDEF                                    NvContextErrorToMemory
/* dma method offsets, fields, and values */
#define NVFF5_SET_OBJECT(s)                              (0x00040000+8192*(s))
#define NVFF5_NO_OPERATION(s)                            (0x00040100+8192*(s))
#define NVFF5_NOTIFY(s)                                  (0x00040104+8192*(s))
#define NVFF5_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF5_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF5_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00040180+8192*(s))
#define NVFF5_SET_DMA_SPECIFIER(s)                       (0x000C0300+8192*(s))
/* obsolete stuff */
#define nvContextErrorToMemory                           NvContextErrorToMemory


/* class NV_VIDEO_COLOR_KEY */
#define  NV_VIDEO_COLOR_KEY                                        (0x00000FF6)
/* NvNotification[] elements */
#define NVFF6_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF6_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF6_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF6_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput[3];        /* NV1_PATCHCORD_VIDEO               0204-020b*/
 V032 Reserved02[0x03c];
 V032 SetColorFormat;          /* NVFF6_SET_COLOR_FORMAT_*          0300-0303*/
 V032 SetColorKey;             /* color to compare with             0304-0307*/
 V032 SetPoint;                /* y_x, S16_S16 in pixels, top-left  0308-030b*/
 V032 SetSize;                 /* height_width U16_U16 in pixels    030c-030f*/
 V032 Reserved03[0x73c];
} Nvff6Typedef, NvVideoColorKey;
#define NVFF6_TYPEDEF                                    NvVideoColorKey
/* dma method offsets, fields, and values */
#define NVFF6_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF6_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF6_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF6_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF6_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF6_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF6_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF6_SET_VIDEO_INPUT(s,i)                       (0x00000204+8192*(s)+\
                                                                       4*(i))
#define NVFF6_SET_COLOR_FORMAT(s)                        (0x00000300+8192*(s))
#define NVFF6_SET_COLOR_FORMAT_LE_X16A8Y8                (0x00000001)
#define NVFF6_SET_COLOR_FORMAT_LE_X24Y8                  (0x00000002)
#define NVFF6_SET_COLOR_FORMAT_LE_X16A1R5G5B5            (0x00000003)
#define NVFF6_SET_COLOR_FORMAT_LE_X17R5G5B5              (0x00000004)
#define NVFF6_SET_COLOR_FORMAT_LE_A16R5G6B5              (0x00000005)
#define NVFF6_SET_COLOR_FORMAT_LE_A8R8G8B8               (0x00000006)
#define NVFF6_SET_COLOR_FORMAT_LE_X8R8G8B8               (0x00000007)
#define NVFF6_SET_COLOR_FORMAT_LE_A16Y16                 (0x00000008)
#define NVFF6_SET_COLOR_FORMAT_LE_X16Y16                 (0x00000009)
#define NVFF6_SET_COLOR_KEY(s)                           (0x00000304+8192*(s))
#define NVFF6_SET_POINT(s)                               (0x00000308+8192*(s))
#define NVFF6_SET_POINT_X                                15:0
#define NVFF6_SET_POINT_Y                                31:16
#define NVFF6_SET_SIZE(s)                                (0x0000030C+8192*(s))
#define NVFF6_SET_SIZE_WIDTH                             15:0
#define NVFF6_SET_SIZE_HEIGHT                            31:16
/* obsolete stuff */
#define nvVideoColorKey                                  NvVideoColorKey


/* class NV_VIDEO_SCALER */
#define  NV_VIDEO_SCALER                                           (0x00000FF7)
/* NvNotification[] elements */
#define NVFF7_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF7_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF7_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF7_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput;           /* NV1_PATCHCORD_VIDEO               0204-0207*/
 V032 Reserved02[0x03e];
 V032 SetDeltaDuDx;            /* S12d20 ratio du/dx                0300-0303*/
 V032 SetDeltaDvDy;            /* S12d20 ratio dv/dy                0304-0307*/
 V032 SetPoint;                /* y_x S16_S16 in pixels, top-left   0308-030b*/
 V032 Reserved03[0x73d];
} Nvff7Typedef, NvVideoScaler;
#define NVFF7_TYPEDEF                                    NvVideoScaler
/* dma method offsets, fields, and values */
#define NVFF7_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF7_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF7_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF7_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF7_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF7_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF7_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF7_SET_VIDEO_INPUT(s)                         (0x00000204+8192*(s))
#define NVFF7_SET_DELTA_DU_DX(s)                         (0x00000300+8192*(s))
#define NVFF7_SET_DELTA_DV_DY(s)                         (0x00000304+8192*(s))
#define NVFF7_SET_POINT(s)                               (0x00000308+8192*(s))
#define NVFF7_SET_POINT_X                                15:0
#define NVFF7_SET_POINT_Y                                31:16
/* obsolete stuff */
#define nvVideoScaler                                    NvVideoScaler


/* class NV_VIDEO_FROM_MEMORY */
#define  NV_VIDEO_FROM_MEMORY                                      (0x00000FF8)
/* NvNotification[] elements */
#define NVFF8_NOTIFIERS_NOTIFY                                     (0)
#define NVFF8_NOTIFIERS_IMAGE_SCAN(b)                              (1+(b))
#define NVFF8_NOTIFIERS_GET_OFFSET_NOTIFY(b)                       (3+(b))
/* NvNotification[] fields and values */
#define NVFF8_NOTIFICATION_INFO16_BUFFER_NOT_STARTED               (0x0001)
#define NVFF8_NOTIFICATION_INFO16_BUFFER_OFFSET_VALID              (0x0002)
#define NVFF8_NOTIFICATION_INFO16_BUFFER_DONE                      (0x0003)
#define NVFF8_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF8_NOTIFICATION_STATUS_ERROR_BAD_PATCH                  (0x0400)
#define NVFF8_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NVFF8_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF8_NOTIFY_*                    0104-0107*/
 V032 StopTransfer;            /* NVFF8_STOP_TRANSFER_VALUE         0108-010b*/
 V032 SetPatch;                /* NVFF8_SET_PATCH_*                 010c-010f*/
 V032 Reserved00[0x01c];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 SetContextDmaImage[2];   /* NV1_CONTEXT_DMA_FROM_MEMORY       0184-018b*/
 V032 Reserved01[0x01d];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 Reserved02[0x03f];
 struct {                      /* start of methods in array         0300-    */
  U032 offset;                 /* byte offset of top-left pixel       00-  03*/
  U032 pitch;                  /* bytes, vertical pixel delta         04-  07*/
  V032 size;                   /* height_width U16_U16 in pixels      08-  0b*/
  V032 format;                 /* field_color V16_V16                 0c-  0f*/
  V032 notify;                 /* NVFF8_IMAGE_SCAN_NOTIFY_*           10-  13*/
 } ImageScan[2];               /* end of methods in array               -0327*/
 V032 GetOffsetNotify[2];      /* NVFF8_GET_OFFSET_NOTIFY_*         0328-032f*/
 V032 Reserved03[0x734];
} Nvff8Typedef, NvVideoFromMemory;
#define NVFF8_TYPEDEF                                    NvVideoFromMemory
/* dma method offsets, fields, and values */
#define NVFF8_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF8_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF8_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF8_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF8_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF8_STOP_TRANSFER(s)                           (0x00000108+8192*(s))
#define NVFF8_STOP_TRANSFER_VALUE                        (0x00000000)
#define NVFF8_SET_PATCH(s)                               (0x0000010C+8192*(s))
#define NVFF8_SET_PATCH_INVALIDATE                       (0x00000000)
#define NVFF8_SET_PATCH_VALIDATE                         (0x00000001)
#define NVFF8_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF8_SET_CONTEXT_DMA_IMAGE(s,b)                 (0x00000184+8192*(s)+\
                                                                        4*(b))
#define NVFF8_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF8_IMAGE_SCAN(s,b)                            (0x00000300+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_OFFSET(s,b)                     (0x00000300+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_PITCH(s,b)                      (0x00000304+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_SIZE(s,b)                       (0x00000308+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_SIZE_WIDTH                      15:0
#define NVFF8_IMAGE_SCAN_SIZE_HEIGHT                     31:16
#define NVFF8_IMAGE_SCAN_FORMAT(s,b)                     (0x0000030C+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR                    15:0
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_Y8              (0x00000001)
#define NV_VFM_FORMAT_COLOR_LE_Y8_P4                      0x00000001
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_V8YB8U8YA8      (0x00000002)
#define NV_VFM_FORMAT_COLOR_LE_V8Y8U8Y8                   0x00000002
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_YB8V8YA8U8      (0x00000003)
#define NV_VFM_FORMAT_COLOR_LE_Y8V8Y8U8                   0x00000003
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_GY1R5G5B5       (0x00000004)
#define NV_VFM_FORMAT_COLOR_LE_X1R5G5B5_P2                0x00000004
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_R5G6B5          (0x00000005)
#define NV_VFM_FORMAT_COLOR_LE_R5G6B5_P2                  0x00000005
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_GY1X7R8G8B8     (0x00000006)
#define NV_VFM_FORMAT_COLOR_LE_X8R8G8B8                   0x00000006
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD                    31:16
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_PROGRESSIVE        (0x00000001)
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_EVEN_FIELD         (0x00000002)
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_ODD_FIELD          (0x00000003)
#define NVFF8_IMAGE_SCAN_NOTIFY(s,b)                     (0x00000310+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_NOTIFY_WRITE_ONLY               (0x00000000)
#define NVFF8_IMAGE_SCAN_NOTIFY_WRITE_THEN_AWAKEN        (0x00000001)
#define NVFF8_GET_OFFSET_NOTIFY(s,b)                     (0x00000328+8192*(s)+\
                                                                        4*(b))
#define NVFF8_GET_OFFSET_NOTIFY_WRITE_ONLY               (0x00000000)
#define NVFF8_GET_OFFSET_NOTIFY_WRITE_THEN_AWAKEN        (0x00000001)
/* obsolete stuff */
#define nvVideoFromMemory                                NvVideoFromMemory
#define SetImageCtxDma                                   SetContextDmaImage
#define SetImageNotifyCtxDma                             SetContextDmaNotifies


/* class NV_VIDEO_COLORMAP */
#define  NV_VIDEO_COLORMAP                                         (0x00000FF9)
/* NvNotification[] elements */
#define NVFF9_NOTIFIERS_NOTIFY                                     (0)
#define NVFF9_NOTIFIERS_COLORMAP_DIRTY_NOTIFY                      (1)
/* NvNotification[] fields and values */
#define NVFF9_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF9_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF9_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 SetContextDmaColormap;   /* NV_CONTEXT_DMA_FROM_MEMORY        0184-0187*/
 V032 Reserved01[0x01e];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput;           /* NV1_PATCHCORD_VIDEO               0204-0207*/
 V032 Reserved02[0x040];
 U032 SetColormapStart;        /* offset in bytes                   0308-030b*/
 U032 SetColormapLength;       /* in bytes                          030c-030f*/
 U032 ColormapDirtyStart;      /* start of region to update         0310-0313*/
 U032 ColormapDirtyLength;     /* in bytes, starts transfer         0314-0317*/
 V032 Reserved03[0x73a];
} Nvff9Typedef, NvVideoColormap;
#define NVFF9_TYPEDEF                                    NvVideoColormap
/* dma method offsets, fields, and values */
#define NVFF9_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF9_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF9_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF9_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF9_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF9_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF9_SET_CONTEXT_DMA_COLORMAP(s)                (0x00000184+8192*(s))
#define NVFF9_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF9_SET_VIDEO_INPUT(s)                         (0x00000204+8192*(s))
#define NVFF9_SET_COLORMAP_START(s)                      (0x00000308+8192*(s))
#define NVFF9_SET_COLORMAP_LENGTH(s)                     (0x0000030C+8192*(s))
#define NVFF9_COLORMAP_DIRTY_START(s)                    (0x00000310+8192*(s))
#define NVFF9_COLORMAP_DIRTY_LENGTH(s)                   (0x00000314+8192*(s))
/* obsolete stuff */
#define nvVideoColormap                                  NvVideoColormap


/* class NV_VIDEO_SINK */
#define  NV_VIDEO_SINK                                             (0x00000FFA)
/* NvNotification[] elements */
#define NVFFA_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFA_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFA_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFA_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoInput[64];       /* NV1_PATCHCORD_VIDEO               0200-02ff*/
 V032 Reserved02[0x740];
} NvffaTypedef, NvVideoSink;
#define NVFFA_TYPEDEF                                    NvVideoSink
/* dma method offsets, fields, and values */
#define NVFFA_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFA_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFA_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFA_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFA_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFA_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFA_SET_VIDEO_INPUT(s,i)                       (0x00000200+8192*(s)+\
                                                                        4*(i))
/* obsolete stuff */
#define nvVideoSink                                      NvVideoSink


/* class NV_PATCHCORD_VIDEO */
#define  NV_PATCHCORD_VIDEO                                        (0x00000FFB)
/* NvNotification[] entries, values, errors, warnings */
#define NVFFB_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 V032 Reserved00[0x7c0];
} NvffbTypedef, NvPatchcordVideo;
#define NVFFB_TYPEDEF                                    NvPatchcordVideo
/* obsolete stuff */
#define nvPatchcordVideo                                 NvPatchcordVideo


/* class NV_CONTEXT_DMA_IN_MEMORY */
#define  NV_CONTEXT_DMA_IN_MEMORY                                  (0x00000FFC)
/* NvNotification[] elements */
#define NVFFC_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFC_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFC_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFC_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* On X86 address[1] is the selector    0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffcTypedef, NvContextDmaInMemory;
#define NVFFC_TYPEDEF                                    NvContextDmaInMemory
/* dma method offsets, fields, and values */
#define NVFFC_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFC_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFC_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFC_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFC_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFC_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFC_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaInMemory                             NvContextDmaInMemory


/* class NV_CONTEXT_DMA_TO_MEMORY */
#define  NV_CONTEXT_DMA_TO_MEMORY                                  (0x00000FFD)
/* NvNotification[] elements */
#define NVFFD_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFD_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFD_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFD_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffdTypedef, NvContextDmaToMemory;
#define NVFFD_TYPEDEF                                    NvContextDmaToMemory
/* dma method offsets, fields, and values */
#define NVFFD_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFD_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFD_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFD_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFD_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFD_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFD_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaToMemory                             NvContextDmaToMemory


/* class NV_CONTEXT_DMA_FROM_MEMORY */
#define  NV_CONTEXT_DMA_FROM_MEMORY                                (0x00000FFE)
/* NvNotification[] elements */
#define NVFFE_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFE_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFE_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFE_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffeTypedef, NvContextDmaFromMemory;
#define NVFFE_TYPEDEF                                    NvContextDmaFromMemory
/* dma method offsets, fields, and values */
#define NVFFE_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFE_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFE_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFE_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFE_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFE_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFE_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaFromMemory                           NvContextDmaFromMemory


/* class NV_CLASS */
#define  NV_CLASS                                                  (0x00000FFF)
/* NvNotification[] elements */
#define NVFFF_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFF_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFF_NOTIFICATION_STATUS_WARNING_UNAVAILABLE              (0x0002)
#define NVFFF_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFF_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 V032 Create;                  /* 32-bit handle of new object       0300-0303*/
 V032 Destroy;                 /* 32-bit handle of object           0304-0307*/
 V032 Reserved02[0x73e];
} NvfffTypedef, NvClass;
#define NVFFF_TYPEDEF                                    NvClass
/* dma method offsets, fields, and values */
#define NVFFF_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFF_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFF_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFF_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFF_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFF_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFF_CREATE(s)                                  (0x00000300+8192*(s))
#define NVFFF_DESTROY(s)                                 (0x00000304+8192*(s))
/* obsolete stuff */
#define nvClass                                          NvClass



 /***************************************************************************\
|*                                 Channels                                  *|
 \***************************************************************************/

typedef NvV32 Nv068Typedef;

typedef NvV32 Nv069Typedef;

/* class NV03_CHANNEL_PIO */
#define  NV03_CHANNEL_PIO                                          (0x0000006A)
/* NvNotification[] fields and values */
#define NV06A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV06A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06A_NOTIFICATION_STATUS_ERROR_FLOW_CONTROL               (0x0200)
/* pio subchannel method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x003];
#ifdef NV_BIG_ENDIAN
 NvU32 Free;                    /* 32 bit free count, read only     0010-0013*/
 NvU32 Zero;                    /* zeroes, read only                0014-0017*/
#else
 NvU16 Free;                    /* free count, read only            0010-0011*/
 NvU16 Zero[3];                 /* zeroes, read only                0012-0017*/
#endif
 NvV32 Reserved01[0x03A];
} Nv03ControlPio;
typedef volatile struct {
 NvV32 SetObject;               /* handle of current object         0000-0003*/
 Nv03ControlPio control;        /* flow control                     0000-00ff*/
 union {                        /* start of class methods           0100-    */
  Nv000Typedef NV000_TYPEDEF;
  Nv001Typedef NV001_TYPEDEF;
  Nv002Typedef NV002_TYPEDEF;
  Nv003Typedef NV003_TYPEDEF;
  Nv004Typedef NV004_TYPEDEF;
  Nv005Typedef NV005_TYPEDEF;
  Nv006Typedef NV006_TYPEDEF;
  Nv007Typedef NV007_TYPEDEF;
  Nv008Typedef NV008_TYPEDEF;
  Nv009Typedef NV009_TYPEDEF;
  Nv00aTypedef NV00A_TYPEDEF;
  Nv00bTypedef NV00B_TYPEDEF;
  Nv00cTypedef NV00C_TYPEDEF;
  Nv00dTypedef NV00D_TYPEDEF;
  Nv00eTypedef NV00E_TYPEDEF;
  Nv00fTypedef NV00F_TYPEDEF;
  Nv010Typedef NV010_TYPEDEF;
  Nv011Typedef NV011_TYPEDEF;
  Nv012Typedef NV012_TYPEDEF;
  Nv013Typedef NV013_TYPEDEF;
  Nv014Typedef NV014_TYPEDEF;
  Nv015Typedef NV015_TYPEDEF;
  Nv016Typedef NV016_TYPEDEF;
  Nv017Typedef NV017_TYPEDEF;
  Nv018Typedef NV018_TYPEDEF;
  Nv019Typedef NV019_TYPEDEF;
  Nv01aTypedef NV01A_TYPEDEF;
  Nv01bTypedef NV01B_TYPEDEF;
  Nv01cTypedef NV01C_TYPEDEF;
  Nv01dTypedef NV01D_TYPEDEF;
  Nv01eTypedef NV01E_TYPEDEF;
  Nv01fTypedef NV01F_TYPEDEF;
  Nv020Typedef NV020_TYPEDEF;
  Nv021Typedef NV021_TYPEDEF;
  Nv022Typedef NV022_TYPEDEF;
  Nv023Typedef NV023_TYPEDEF;
  Nv024Typedef NV024_TYPEDEF;
  Nv025Typedef NV025_TYPEDEF;
  Nv026Typedef NV026_TYPEDEF;
  Nv027Typedef NV027_TYPEDEF;
  Nv028Typedef NV028_TYPEDEF;
  Nv029Typedef NV029_TYPEDEF;
  Nv02aTypedef NV02A_TYPEDEF;
  Nv02bTypedef NV02B_TYPEDEF;
  Nv02cTypedef NV02C_TYPEDEF;
  Nv02dTypedef NV02D_TYPEDEF;
  Nv02eTypedef NV02E_TYPEDEF;
  Nv02fTypedef NV02F_TYPEDEF;
  Nv030Typedef NV030_TYPEDEF;
  Nv031Typedef NV031_TYPEDEF;
  Nv032Typedef NV032_TYPEDEF;
  Nv033Typedef NV033_TYPEDEF;
  Nv034Typedef NV034_TYPEDEF;
  Nv035Typedef NV035_TYPEDEF;
  Nv036Typedef NV036_TYPEDEF;
  Nv037Typedef NV037_TYPEDEF;
  Nv038Typedef NV038_TYPEDEF;
  Nv039Typedef NV039_TYPEDEF;
  Nv03aTypedef NV03A_TYPEDEF;
  Nv03bTypedef NV03B_TYPEDEF;
  Nv03cTypedef NV03C_TYPEDEF;
  Nv03dTypedef NV03D_TYPEDEF;
  Nv03eTypedef NV03E_TYPEDEF;
  Nv03fTypedef NV03F_TYPEDEF;
  Nv040Typedef NV040_TYPEDEF;
  Nv041Typedef NV041_TYPEDEF;
  Nv042Typedef NV042_TYPEDEF;
  Nv043Typedef NV043_TYPEDEF;
  Nv044Typedef NV044_TYPEDEF;
  Nv045Typedef NV045_TYPEDEF;
  Nv046Typedef NV046_TYPEDEF;
  Nv047Typedef NV047_TYPEDEF;
  Nv048Typedef NV048_TYPEDEF;
  Nv049Typedef NV049_TYPEDEF;
  Nv04aTypedef NV04A_TYPEDEF;
  Nv04bTypedef NV04B_TYPEDEF;
  Nv04cTypedef NV04C_TYPEDEF;
  Nv04dTypedef NV04D_TYPEDEF;
  Nv04eTypedef NV04E_TYPEDEF;
  Nv04fTypedef NV04F_TYPEDEF;
  Nv050Typedef NV050_TYPEDEF;
  Nv051Typedef NV051_TYPEDEF;
  Nv052Typedef NV052_TYPEDEF;
  Nv053Typedef NV053_TYPEDEF;
  Nv054Typedef NV054_TYPEDEF;
  Nv055Typedef NV055_TYPEDEF;
  Nv096Typedef NV096_TYPEDEF;
  Nv057Typedef NV057_TYPEDEF;
  Nv058Typedef NV058_TYPEDEF;
  Nv059Typedef NV059_TYPEDEF;
  Nv05aTypedef NV05A_TYPEDEF;
  Nv05bTypedef NV05B_TYPEDEF;
  Nv05cTypedef NV05C_TYPEDEF;
  Nv05dTypedef NV05D_TYPEDEF;
  Nv05eTypedef NV05E_TYPEDEF;
  Nv05fTypedef NV05F_TYPEDEF;
  Nv060Typedef NV060_TYPEDEF;
  Nv061Typedef NV061_TYPEDEF;
  Nv062Typedef NV062_TYPEDEF;
  Nv063Typedef NV063_TYPEDEF;
  Nv064Typedef NV064_TYPEDEF;
  Nv065Typedef NV065_TYPEDEF;
  Nv066Typedef NV066_TYPEDEF;
  Nv067Typedef NV067_TYPEDEF;
/*Nv068Typedef NV068_TYPEDEF;*/
/*Nv069Typedef NV069_TYPEDEF;*/
/*Nv06aTypedef NV06A_TYPEDEF;*/
/*Nv06bTypedef NV06B_TYPEDEF;*/
/*Nv06cTypedef NV06C_TYPEDEF;*/
/*Nv06dTypedef NV06D_TYPEDEF;*/
/*Nv06eTypedef NV06E_TYPEDEF;*/
  Nv06fTypedef NV06F_TYPEDEF;
  Nv070Typedef NV070_TYPEDEF;
  Nv071Typedef NV071_TYPEDEF;
  Nv072Typedef NV072_TYPEDEF;
  Nv073Typedef NV073_TYPEDEF;
  Nv074Typedef NV074_TYPEDEF;
  Nv075Typedef NV075_TYPEDEF;
  Nv076Typedef NV076_TYPEDEF;
  Nv077Typedef NV077_TYPEDEF;
  Nv078Typedef NV078_TYPEDEF;
  Nv079Typedef NV079_TYPEDEF;
  Nv07aTypedef NV07A_TYPEDEF;
  Nv07bTypedef NV07B_TYPEDEF;
  Nv07cTypedef NV07C_TYPEDEF;
  Nv07dTypedef NV07D_TYPEDEF;
  Nv07eTypedef NV07E_TYPEDEF;
  Nv07fTypedef NV07F_TYPEDEF;
  Nv080Typedef NV080_TYPEDEF;
  Nv081Typedef NV081_TYPEDEF;
  Nv082Typedef NV082_TYPEDEF;
  Nv083Typedef NV083_TYPEDEF;
  Nv084Typedef NV084_TYPEDEF;
  Nv085Typedef NV085_TYPEDEF;
  Nv086Typedef NV086_TYPEDEF;
  Nv087Typedef NV087_TYPEDEF;
  Nv088Typedef NV088_TYPEDEF;
  Nv089Typedef NV089_TYPEDEF;
  Nv093Typedef NV093_TYPEDEF;
  Nv094Typedef NV094_TYPEDEF;
  Nv095Typedef NV095_TYPEDEF;
  Nvff0Typedef NVFF0_TYPEDEF;
  Nvff1Typedef NVFF1_TYPEDEF;
  Nvff2Typedef NVFF2_TYPEDEF;
  Nvff3Typedef NVFF3_TYPEDEF;
  Nvff4Typedef NVFF4_TYPEDEF;
  Nvff5Typedef NVFF5_TYPEDEF;
  Nvff6Typedef NVFF6_TYPEDEF;
  Nvff7Typedef NVFF7_TYPEDEF;
  Nvff8Typedef NVFF8_TYPEDEF;
  Nvff9Typedef NVFF9_TYPEDEF;
  NvffaTypedef NVFFA_TYPEDEF;
  NvffbTypedef NVFFB_TYPEDEF;
  NvffcTypedef NVFFC_TYPEDEF;
  NvffdTypedef NVFFD_TYPEDEF;
  NvffeTypedef NVFFE_TYPEDEF;
  NvfffTypedef NVFFF_TYPEDEF;
#ifdef __GNUC__         /* anon union does not work on GCC */
 }  cls   ;         /* end of class methods                  -1fff*/
#else  /* __GNUC__ */
 }  /* cls */  ;    /* end of class methods                  -1fff*/
#endif /* __GNUC__ */

} Nv03SubchannelPio;
/* pio channel */
typedef volatile struct {      /* start of array of subchannels     0000-    */
 Nv03SubchannelPio subchannel[8];/*subchannel                       0000-1fff*/
} Nv03ChannelPio;              /* end of array of subchannels           -ffff*/
/* fields and values */
#define NV06A_FIFO_GUARANTEED_SIZE                                 (0x007C)
#define NV06A_FIFO_EMPTY                                           (0x007C)
#define NV06A_FIFO_FULL                                            (0x0000)
/* obsolete stuff */
#define NV3_CHANNEL_PIO                                            (0x0000006A)
#define Nv3ControlPio                                            Nv03ControlPio
#define Nv3SubchannelPio                                      Nv03SubchannelPio
#define Nv3ChannelPio                                            Nv03ChannelPio
#define NvChannel                                                Nv03ChannelPio
#define nv03ChannelPio                                           Nv03ChannelPio


/* class NV03_CHANNEL_DMA */
#define  NV03_CHANNEL_DMA                                          (0x0000006B)
/* NvNotification[] fields and values */
#define NV06B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06bTypedef, Nv03ChannelDma;
#define NV06B_TYPEDEF                                            Nv03ChannelDma
#define nv03ChannelDma                                           Nv03ChannelDma


/* class NV04_CHANNEL_PIO */
#define  NV04_CHANNEL_PIO                                          (0x0000006D)
/* NvNotification[] fields and values */
#define NV06D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV06D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06D_NOTIFICATION_STATUS_ERROR_FLOW_CONTROL               (0x0200)
/* pio subchannel method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x003];
#ifdef NV_BIG_ENDIAN
 NvU32 Free;                    /* 32 bit free count, read only     0010-0013*/
 NvU32 Zero;                    /* zeroes, read only                0014-0017*/
#else
 NvU16 Free;                    /* free count, read only            0010-0011*/
 NvU16 Zero[3];                 /* zeroes, read only                0012-0017*/
#endif
 NvV32 Reserved01[0x03A];
} Nv04ControlPio;
typedef volatile struct {
 NvV32 SetObject;               /* handle of current object         0000-0003*/
 Nv04ControlPio control;        /* flow control                     0000-00ff*/
 union {                        /* start of class methods           0100-    */
  Nv000Typedef NV000_TYPEDEF;
  Nv001Typedef NV001_TYPEDEF;
  Nv002Typedef NV002_TYPEDEF;
  Nv003Typedef NV003_TYPEDEF;
  Nv004Typedef NV004_TYPEDEF;
  Nv005Typedef NV005_TYPEDEF;
  Nv006Typedef NV006_TYPEDEF;
  Nv007Typedef NV007_TYPEDEF;
  Nv008Typedef NV008_TYPEDEF;
  Nv009Typedef NV009_TYPEDEF;
  Nv00aTypedef NV00A_TYPEDEF;
  Nv00bTypedef NV00B_TYPEDEF;
  Nv00cTypedef NV00C_TYPEDEF;
  Nv00dTypedef NV00D_TYPEDEF;
  Nv00eTypedef NV00E_TYPEDEF;
  Nv00fTypedef NV00F_TYPEDEF;
  Nv010Typedef NV010_TYPEDEF;
  Nv011Typedef NV011_TYPEDEF;
  Nv012Typedef NV012_TYPEDEF;
  Nv013Typedef NV013_TYPEDEF;
  Nv014Typedef NV014_TYPEDEF;
  Nv015Typedef NV015_TYPEDEF;
  Nv016Typedef NV016_TYPEDEF;
  Nv017Typedef NV017_TYPEDEF;
  Nv018Typedef NV018_TYPEDEF;
  Nv019Typedef NV019_TYPEDEF;
  Nv01aTypedef NV01A_TYPEDEF;
  Nv01bTypedef NV01B_TYPEDEF;
  Nv01cTypedef NV01C_TYPEDEF;
  Nv01dTypedef NV01D_TYPEDEF;
  Nv01eTypedef NV01E_TYPEDEF;
  Nv01fTypedef NV01F_TYPEDEF;
  Nv020Typedef NV020_TYPEDEF;
  Nv021Typedef NV021_TYPEDEF;
  Nv022Typedef NV022_TYPEDEF;
  Nv023Typedef NV023_TYPEDEF;
  Nv024Typedef NV024_TYPEDEF;
  Nv025Typedef NV025_TYPEDEF;
  Nv026Typedef NV026_TYPEDEF;
  Nv027Typedef NV027_TYPEDEF;
  Nv028Typedef NV028_TYPEDEF;
  Nv029Typedef NV029_TYPEDEF;
  Nv02aTypedef NV02A_TYPEDEF;
  Nv02bTypedef NV02B_TYPEDEF;
  Nv02cTypedef NV02C_TYPEDEF;
  Nv02dTypedef NV02D_TYPEDEF;
  Nv02eTypedef NV02E_TYPEDEF;
  Nv02fTypedef NV02F_TYPEDEF;
  Nv030Typedef NV030_TYPEDEF;
  Nv031Typedef NV031_TYPEDEF;
  Nv032Typedef NV032_TYPEDEF;
  Nv033Typedef NV033_TYPEDEF;
  Nv034Typedef NV034_TYPEDEF;
  Nv035Typedef NV035_TYPEDEF;
  Nv036Typedef NV036_TYPEDEF;
  Nv037Typedef NV037_TYPEDEF;
  Nv038Typedef NV038_TYPEDEF;
  Nv039Typedef NV039_TYPEDEF;
  Nv03aTypedef NV03A_TYPEDEF;
  Nv03bTypedef NV03B_TYPEDEF;
  Nv03cTypedef NV03C_TYPEDEF;
  Nv03dTypedef NV03D_TYPEDEF;
  Nv03eTypedef NV03E_TYPEDEF;
  Nv03fTypedef NV03F_TYPEDEF;
  Nv040Typedef NV040_TYPEDEF;
  Nv041Typedef NV041_TYPEDEF;
  Nv042Typedef NV042_TYPEDEF;
  Nv043Typedef NV043_TYPEDEF;
  Nv044Typedef NV044_TYPEDEF;
  Nv045Typedef NV045_TYPEDEF;
  Nv046Typedef NV046_TYPEDEF;
  Nv047Typedef NV047_TYPEDEF;
  Nv048Typedef NV048_TYPEDEF;
  Nv049Typedef NV049_TYPEDEF;
  Nv04aTypedef NV04A_TYPEDEF;
  Nv04bTypedef NV04B_TYPEDEF;
  Nv04cTypedef NV04C_TYPEDEF;
  Nv04dTypedef NV04D_TYPEDEF;
  Nv04eTypedef NV04E_TYPEDEF;
  Nv04fTypedef NV04F_TYPEDEF;
  Nv050Typedef NV050_TYPEDEF;
  Nv051Typedef NV051_TYPEDEF;
  Nv052Typedef NV052_TYPEDEF;
  Nv053Typedef NV053_TYPEDEF;
  Nv054Typedef NV054_TYPEDEF;
  Nv055Typedef NV055_TYPEDEF;
  Nv096Typedef NV096_TYPEDEF;
  Nv057Typedef NV057_TYPEDEF;
  Nv058Typedef NV058_TYPEDEF;
  Nv059Typedef NV059_TYPEDEF;
  Nv05aTypedef NV05A_TYPEDEF;
  Nv05bTypedef NV05B_TYPEDEF;
  Nv05cTypedef NV05C_TYPEDEF;
  Nv05dTypedef NV05D_TYPEDEF;
  Nv05eTypedef NV05E_TYPEDEF;
  Nv05fTypedef NV05F_TYPEDEF;
  Nv060Typedef NV060_TYPEDEF;
  Nv061Typedef NV061_TYPEDEF;
  Nv062Typedef NV062_TYPEDEF;
  Nv063Typedef NV063_TYPEDEF;
  Nv064Typedef NV064_TYPEDEF;
  Nv065Typedef NV065_TYPEDEF;
  Nv066Typedef NV066_TYPEDEF;
  Nv067Typedef NV067_TYPEDEF;
/*Nv068Typedef NV068_TYPEDEF;*/
/*Nv069Typedef NV069_TYPEDEF;*/
/*Nv06aTypedef NV06A_TYPEDEF;*/
/*Nv06bTypedef NV06B_TYPEDEF;*/
/*Nv06cTypedef NV06C_TYPEDEF;*/
/*Nv06dTypedef NV06D_TYPEDEF;*/
/*Nv06eTypedef NV06E_TYPEDEF;*/
  Nv06fTypedef NV06F_TYPEDEF;
  Nv070Typedef NV070_TYPEDEF;
  Nv071Typedef NV071_TYPEDEF;
  Nv072Typedef NV072_TYPEDEF;
  Nv073Typedef NV073_TYPEDEF;
  Nv074Typedef NV074_TYPEDEF;
  Nv075Typedef NV075_TYPEDEF;
  Nv076Typedef NV076_TYPEDEF;
  Nv077Typedef NV077_TYPEDEF;
  Nv078Typedef NV078_TYPEDEF;
  Nv079Typedef NV079_TYPEDEF;
  Nv07aTypedef NV07A_TYPEDEF;
  Nv07bTypedef NV07B_TYPEDEF;
  Nv07cTypedef NV07C_TYPEDEF;
  Nv07dTypedef NV07D_TYPEDEF;
  Nv07eTypedef NV07E_TYPEDEF;
  Nv07fTypedef NV07F_TYPEDEF;
  Nv080Typedef NV080_TYPEDEF;
  Nv081Typedef NV081_TYPEDEF;
  Nv082Typedef NV082_TYPEDEF;
  Nv083Typedef NV083_TYPEDEF;
  Nv084Typedef NV084_TYPEDEF;
  Nv085Typedef NV085_TYPEDEF;
  Nv086Typedef NV086_TYPEDEF;
  Nv087Typedef NV087_TYPEDEF;
  Nv088Typedef NV088_TYPEDEF;
  Nv089Typedef NV089_TYPEDEF;
  Nv093Typedef NV093_TYPEDEF;
  Nv094Typedef NV094_TYPEDEF;
  Nv095Typedef NV095_TYPEDEF;
  Nv097Typedef NV097_TYPEDEF;
  Nv1189Typedef NV1189_TYPEDEF;
  Nv205fTypedef NV205F_TYPEDEF;
  Nv207cTypedef NV207C_TYPEDEF;
  Nvff0Typedef NVFF0_TYPEDEF;
  Nvff1Typedef NVFF1_TYPEDEF;
  Nvff2Typedef NVFF2_TYPEDEF;
  Nvff3Typedef NVFF3_TYPEDEF;
  Nvff4Typedef NVFF4_TYPEDEF;
  Nvff5Typedef NVFF5_TYPEDEF;
  Nvff6Typedef NVFF6_TYPEDEF;
  Nvff7Typedef NVFF7_TYPEDEF;
  Nvff8Typedef NVFF8_TYPEDEF;
  Nvff9Typedef NVFF9_TYPEDEF;
  NvffaTypedef NVFFA_TYPEDEF;
  NvffbTypedef NVFFB_TYPEDEF;
  NvffcTypedef NVFFC_TYPEDEF;
  NvffdTypedef NVFFD_TYPEDEF;
  NvffeTypedef NVFFE_TYPEDEF;
  NvfffTypedef NVFFF_TYPEDEF;
#ifdef __GNUC__         /* anon union does not work on GCC */
 }  cls   ;         /* end of class methods                  -1fff*/
#else  /* __GNUC__ */
 }  /* cls */  ;    /* end of class methods                  -1fff*/
#endif /* __GNUC__ */
} Nv04SubchannelPio;
/* pio channel */
typedef volatile struct {      /* start of array of subchannels     0000-    */
 Nv04SubchannelPio subchannel[8];/*subchannel                       0000-1fff*/
} Nv04ChannelPio;              /* end of array of subchannels           -ffff*/
/* fields and values */
#define NV06D_FIFO_GUARANTEED_SIZE                                 (0x0200)
#define NV06D_FIFO_EMPTY                                           (0x0200)
#define NV06D_FIFO_FULL                                            (0x0000)


/* class NV04_CHANNEL_DMA */
#define  NV04_CHANNEL_DMA                                          (0x0000006C)
/* NvNotification[] fields and values */
#define NV06C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06cTypedef, Nv04ChannelDma;
#define NV06C_TYPEDEF                                            Nv04ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only            0040-0043*/
 NvU32 Get;                     /* get offset, read only             0044-0047*/
 NvV32 Ignored01[0x002];
 NvU32 StallNotifier;           /* Set stall notifier                0050-0053*/
 NvU32 StallChannel;            /* Stall the channel                 0054-0057*/
 NvV32 Ignored02[0x7EA];
} Nv04ControlDma;
/* obsolete stuff */
#define NV4_CHANNEL_DMA                                            (0x0000006C)
#define Nv4ChannelDma                                            Nv04ChannelDma
#define nv4ChannelDma                                            Nv04ChannelDma
#define Nv4ControlDma                                            Nv04ControlDma


/* class NV10_CHANNEL_DMA */
#define  NV10_CHANNEL_DMA                                          (0x0000006E)
/* NvNotification[] fields and values */
#define NV06E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06eTypedef, Nv10ChannelDma;
#define NV06E_TYPEDEF                                            Nv10ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only           0040-0043*/
 NvU32 Get;                     /* get offset, read only            0044-0047*/
 NvU32 Reference;               /* reference value, read only       0048-004b*/
 NvV32 Ignored01[0x7ed];
} Nv06eControl, Nv10ControlDma;
/* fields and values */
#define NV06E_NUMBER_OF_SUBCHANNELS                                (8)
#define NV06E_SET_OBJECT                                           (0x00000000)
#define NV06E_SET_REFERENCE                                        (0x00000050)
#define NV06E_SWAP_EXTENSION                                       (0x00000090)

/* class NV20_CHANNEL_DMA */
#define  NV20_CHANNEL_DMA                                          (0x0000206E)
/* NvNotification[] fields and values */
#define NV206E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT              (0x2000)
#define NV206E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT          (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv206eTypedef, Nv20ChannelDma;
#define NV206E_TYPEDEF                                           Nv20ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only           0040-0043*/
 NvU32 Get;                     /* get offset, read only            0044-0047*/
 NvU32 Reference;               /* reference value, read only       0048-004b*/
 NvV32 Ignored01[0x7ed];
} Nv206eControl, Nv20ControlDma;
/* fields and values */
#define NV206E_NUMBER_OF_SUBCHANNELS                               (8)
#define NV206E_SET_OBJECT                                          (0x00000000)
#define NV206E_SET_REFERENCE                                       (0x00000050)
#define NV206E_SET_CONTEXT_DMA_SEMAPHORE                           (0x00000060)
#define NV206E_SEMAPHORE_OFFSET                                    (0x00000064)
#define NV206E_SEMAPHORE_ACQUIRE                                   (0x00000068)
#define NV206E_SEMAPHORE_RELEASE                                   (0x0000006c)
#define NV206E_SWAP_EXTENSION                                      (0x00000090)
#define NV206E_SUBROUTINE_RETURN_SW                                (0x0000009c)

 /***************************************************************************\
|*                            Well Known Objects                             *|
 \***************************************************************************/


/* object NV01_NULL_OBJECT */
#define   NV01_NULL_OBJECT                                         (0x00000000)
/* obsolete stuff */
#define NV1_NULL_OBJECT                                            (0x00000000)



 /***************************************************************************\
|*                               Notification                                *|
 \***************************************************************************/


/***** NvNotification Structure *****/
/*
 * NV objects return information about method completion to clients via an
 * array of notification structures in main memory.
 *
 * The client sets the status field to NV???_NOTIFICATION_STATUS_IN_PROGRESS.
 * NV fills in the NvNotification[] data structure in the following order:
 * timeStamp, otherInfo32, otherInfo16, and then status.
 */


/* memory data structures */
typedef volatile struct {
 struct {                      /*                                   0000-    */
  NvU32 nanoseconds[2];        /* nanoseconds since Jan. 1, 1970       0-   7*/
 } timeStamp;                  /*                                       -0007*/
 NvV32 info32;                 /* info returned depends on method   0008-000b*/
 NvV16 info16;                 /* info returned depends on method   000c-000d*/
 NvV16 status;                 /* user sets bit 15, NV sets status  000e-000f*/
} NvNotification;
/* status values */

 /***************************************************************************\
|*                          NvGraphicsState                                  *|
 \***************************************************************************/
/***** NvGraphicsState Structure *****/
/*
 * This represents the state structure that's passed between the Celsius
 * GetState method and the RM (in nv10 and eventually the HW). The context
 * DMA passed to NV056_SET_CONTEXT_DMA_STATE should be at least this size.
 */

typedef volatile struct {
    struct _PerFragmentState {
        // *** dword 0
        NvU32          pad0 : 8;
        NvU32     alphaFunc : 4;
        NvU32          pad1 : 4;
        NvU32     depthFunc : 4;
        NvU32          pad2 : 4;
        NvU32     depthMask : 1;
        NvU32          pad3 : 1;
        NvU32     alphaMask : 1;
        NvU32       redMask : 1;
        NvU32     greenMask : 1;
        NvU32      blueMask : 1;
        NvU32          pad4 : 2;
        // *** dword 1
        NvU32          pad5 : 4;
        NvU32   stencilFunc : 4;
        NvU32    stencilRef : 8;
        NvU32          pad6 : 8;
        NvU32   stencilMask : 8;
        // *** dword 2
        NvU32       sfailOp : 4;
        NvU32       zfailOp : 4;
        NvU32       zpassOp : 4;
        NvU32         pad7 : 20;
        // *** dword 3
        NvU32 blendEquation : 3;
        NvU32          pad8 : 1;
        NvU32      srcBlend : 4;
        NvU32     destBlend : 4;
        NvU32         pad9 : 20;
    } PerFragmentState;
    struct _PerVertexState {
        NvF32           pad0[4];
        NvF32   primaryColor[4];
        NvF32 secondaryColor[3];
        NvF32          fogCoord;
        NvF32    texCoord[2][4];
        NvF32         normal[3];
        NvF32              pad1;
        NvF32      vertexWeight;
        NvU32           pad2[7];
        NvU32              pad3;
        NvU32      edgeFlag : 8;
        NvU32         pad4 : 24;
        NvU32           pad5[2];
    } PerVertexState;
    NvU32       glBeginEndState;
    struct _VertexArrayState {
        NvU32      vertexOffset;
        NvU32      vertexFormat;
        NvU32     diffuseOffset;
        NvU32     diffuseFormat;
        NvU32    specularOffset;
        NvU32    specularFormat;
        NvU32   texCoord0Offset;
        NvU32   texCoord0Format;
        NvU32   texCoord1Offset;
        NvU32   texCoord1Format;
        NvU32      normalOffset;
        NvU32      normalFormat;
        NvU32      weightOffset;
        NvU32      weightFormat;
        NvU32         fogOffset;
        NvU32         fogFormat;
    } VertexArrayState;
    struct _PrimitiveAssmState {
        NvU32    primAssm[3*16];
    } PrimitiveAssmState;
} NvGraphicsState;

 /***************************************************************************\
|*                          Object Allocation Parameters                     *|
 \***************************************************************************/

// XXX need to add versioning to these
//     version #'s should probably have engine number encoded to protect against
//     caller using the wrong typedef.
// XXX need to convert to engine creation params whenever possible
// XXX try to delete pInfo

// class 0x07c creation parameters
typedef struct
{
    NvU32   version;
    NvP64   pInfo;
    NvU32   logicalHeadId;

} NV07C_ALLOCATION_PARAMETERS;

// class 0x207c creation parameters
typedef struct
{
    NvU32   version;
    NvP64   pInfo;
    NvU32   logicalHeadId;

} NV207C_ALLOCATION_PARAMETERS;

// class 0x07a creation parameters
typedef struct
{
    NvU32   version;
    NvP64   pInfo;
    NvU32   logicalHeadId;

} NV07A_ALLOCATION_PARAMETERS;

// GR engine creation parameters
typedef struct
{
    NvU32   version;
    NvU32   flags;
} NV_GR_ALLOCATION_PARAMETERS;

// GR engine flags; must match hal layout.
#define NV_GR_ALLOCATION_PARAMETERS_FLAGS_ENDIAN_OVERRIDE          1:0
#define NV_GR_ALLOCATION_PARAMETERS_FLAGS_ENDIAN_OVERRIDE_NONE      0     // use native endianness
#define NV_GR_ALLOCATION_PARAMETERS_FLAGS_ENDIAN_OVERRIDE_LITTLE    1
#define NV_GR_ALLOCATION_PARAMETERS_FLAGS_ENDIAN_OVERRIDE_BIG       2

 /***************************************************************************\
|*                          NVIDIA Debug Extensions                         *|
 \***************************************************************************/

/*
 * These class numbers are a temporary hack to allow the debugger
 * client to use the NvAlloc interface to access debugger services.
 */
#define  NVDE_REGISTER_DEBUGGER                                    (0xDE000001)
#define  NVDE_UNREGISTER_DEBUGGER                                  (0xDE000002)
#define  NVDE_READ_MEMORY                                          (0xDE000003)
#define  NVDE_WRITE_MEMORY                                         (0xDE000004)
#define  NVDE_GET_EVENT_INFORMATION                                (0xDE000005)
#define  NVDE_TEST                                                 (0xDE00ffff)

#define NVDE_DEBUGGER                                              (0xDE000000)

/*
 * Status codes.
 */
#define NVDE_STATUS_SUCCESS                                         (0x0000)
#define NVDE_STATUS_ERROR_STATE_IN_USE                              (0x0001)
#define NVDE_STATUS_ERROR_BAD_ARGUMENT                              (0x0002)

/*
 * Class-specific parameter blocks.
 */
typedef struct
{
    NvU64 EventHandle;
    NvU32 EventClass;
} NVDE_ALLOCATION_PARAMETERS;

// must be replaced by NVDE class
typedef struct
{
    NvU32 TrapEvent;
} NVDE_REGISTER_DEBUGGER_PARAMETERS;

// must be replaced by NVDE class
typedef struct
{
    NvU32 foo;
} NVDE_UNREGISTER_DEBUGGER_PARAMETERS;

// depreciated
typedef struct
{
    NvU32 Address;
    NvU32 Size;
    NvU32 Data;
} NVDE_READ_MEMORY_PARAMETERS;

// depreciated
typedef struct
{
    NvU32 Address;
    NvU32 Size;
    NvU32 Data;
} NVDE_WRITE_MEMORY_PARAMETERS;

// depreciated
typedef struct
{
    NvU32 CallBackAddress;
} NVDE_TEST_PARAMETERS;

typedef NvU32 (*NVDE_TEST_FUNC)(void);

// must be moved to NVDE class
typedef struct
{
    U032 Count;
    U032 Event[32][8];
} NVDE_GET_EVENT_INFORMATION_PARAMETERS;

/* class NV01_DEVICE_AUDIO */
#define  NV01_DEVICE_AUDIO                                         (0x000000A0)
/* NvNotification[] fields and values */
#define NV0A0_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A0_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A0_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0A0Typedef, Nv01DeviceAudio;
#define  NV0A0_TYPEDEF                                             Nv01DeviceAudio

#define NV01_CONTEXT_DMA_AUDIO                                      (0x000000A1)
/* NvNotification[] fields and values */
#define NV0A1_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A1_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A1_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)

#define NV1B_AUDIO_OBJECT                                           (0x000000A2)
/* NvNotification[] fields and values */
#define NV0A2_NOTIFICATION_STATUS_NOT_IMPLEMENTED                   (0x0000)
#define NV0A2_NOTIFICATION_STATUS_REQUESTED                         (0x0001)
#define NV0A2_NOTIFICATION_STATUS_METHOD_UNKNOWN                    (0x0002)
#define NV0A2_NOTIFICATION_STATUS_BAD_ARGUMENT                      (0x2000)
#define NV0A2_NOTIFICATION_STATUS_CURRENT_NOT_SET                   (0x0004)
#define NV0A2_NOTIFICATION_STATUS_ANTECEDENT_NOT_SET                (0x0005)
#define NV0A2_NOTIFICATION_STATUS_VOICE_ACTIVE                      (0x0006)
#define NV0A2_NOTIFICATION_STATUS_NOT_DATA_TYPE_BUFFER              (0x0007)

/* class NV01_DEVICE_EXTERNAL_CODEC */
#define  NV01_DEVICE_EXTERNAL_CODEC                                 (0x000000A3)
/* NvNotification[] fields and values */
#define NV0A0_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A0_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A0_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0A3Typedef, Nv03DeviceExternalCodec;
#define  NV0A3_TYPEDEF                                             Nv01DeviceCodec

#define NV01_CONTEXT_DMA_EXTERNAL_CODEC                             (0x000000A4)
/* NvNotification[] fields and values */
#define NV0A1_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A1_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A1_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)

#define NV01_EXTERNAL_CODEC_OBJECT                                  (0x000000A5)
/* NvNotification[] fields and values */
#define NV0A2_NOTIFICATION_STATUS_NOT_IMPLEMENTED                   (0x0000)
#define NV0A2_NOTIFICATION_STATUS_REQUESTED                         (0x0001)
#define NV0A2_NOTIFICATION_STATUS_METHOD_UNKNOWN                    (0x0002)
#define NV0A2_NOTIFICATION_STATUS_BAD_ARGUMENT                      (0x2000)
#define NV0A2_NOTIFICATION_STATUS_CURRENT_NOT_SET                   (0x0004)
#define NV0A2_NOTIFICATION_STATUS_ANTECEDENT_NOT_SET                (0x0005)
#define NV0A2_NOTIFICATION_STATUS_VOICE_ACTIVE                      (0x0006)
#define NV0A2_NOTIFICATION_STATUS_NOT_DATA_TYPE_BUFFER              (0x0007)

#define NV01_EXTERNAL_CODEC_WRITE                                   (0x000000A6)
// define the errors here later
#define NV01_EXTERNAL_CODEC_READ                                    (0x000000A7)
// define the errors here later

// this IOCTL manages system memory for the client - see AUDIO_ALLOC_MEMORY / AUDIO_FREE_MEMORY
#define NV01_MEMORY_AUDIO		                                    (0x000000A8)

// class 0x0A1 creation params (NV01_CONTEXT_DMA_AUDIO)

typedef union
{
	struct
	{
		NvU32 : 32;
	}codec;

	struct
	{
		NvU32  : 27;
		// interrupts originating from FE/SE
		NvU32 FEMethodOverFlow : 1;	// user method fifo has been overwritten
		NvU32 FEVoice : 1;			// end-of-buffer / end-of-stream
		NvU32 FENotify : 1;			// notifier originating from the FE has been written
		NvU32 DeltaPanic : 1;		// delta panic
		NvU32 DeltaWarning : 1;		// delta warning
	}apu;
	
	NvU32 uValue;					// set to ~0x0 (for codec) if the ISR fn is to be called regardless
} INTR_MASK;

typedef void (*PISRCALLBACK)(NvV32,	/* service context*/ 
							NvU32,	/* interrupt mask (INTR_MASK.uValue) with bits of triggered intr set */
							NvV32);	/* info based on reason */

typedef struct
{
	NvV32			pResList;		/*	address of resource structure	*/
	NvU8			uRevisionID;	/*	HW Revision ID of the chip - byte 0x8 in the PCI config */
	NvV32			pDevObj;		/*	address of device object		*/		
	PISRCALLBACK	pISRFn;			/*	address to an optional ISR		*/
	NvV32			pServiceContext;/*	service context for the ISR		*/
	INTR_MASK		IntrMask;		/*	set the bits for which pISRFn needs to be called	*/
	NvU32			uDeviceRef;		/*	device reference				*/
} AUDIO_INIT_DEVICE;

/*
Arguments:
		IN pResourceList - 	of type PCM_RESOURCE_LIST (WDM) - translated resource list got in IRP_MN_START_DEVICE
				of type CM_CONFIG (Win9X VxD)
				of type PCI_COMMON_CONFIG (NT4)
				TBD for linux.
	 	IN pDeviceObject - only valid in NT and WDM, ignored in Win9X VxD
		IN pISRFn (optional) - not recommended unless it is absolutely necessary.  
								The driver can install it to handle interrupts from the codec if it needs to.  
								Type - void pISRFn(U032 ServiceContext);
		IN uServiceContext (optional) - value passed back to the pISRFn if installed.
		OUT pDeviceRef	- device ref returned by the RM
*/

// notifier structures used between the client and the audio RM
typedef struct 
{
	NvU32 volatile  GSCNT;
	NvU32 volatile  CurrentOffset;
	NvU32 volatile  Zero;
	NvU8 volatile	Res0;
	NvU8 volatile	SamplesAvailable;       // not in sync
	NvU8 volatile	EnvelopeActive;         // not in sync
	NvU8 volatile	Status;
} NV1BA0NOTIFICATION, *PNV1BA0NOTIFICATION;

// notifier for GP
typedef struct 
{
	NvU32 volatile  GSCNT;
    NvU32 volatile	Method;
	NvU32 volatile	Data;
	NvU8 volatile	ReturnCode;
	NvU8 volatile	Res0;
	NvU8 volatile	Res1;
	NvU8 volatile	Status;
} NVAUDGPNOTIFICATION, *PNVAUDGPNOTIFICATION;

// status codes for GP notifiers
#define NV_AUDGP_NOTIFICATION_STATUS_IN_PROGRESS       0x00000000
#define NV_AUDGP_NOTIFICATION_STATUS_DONE_SUCCESS      0x00000001

// defines the "type" for context DMA
#define AUDIO_CONTEXT_DMA_SESGE         0x1
#define AUDIO_CONTEXT_DMA_SESSL         0x2
#define AUDIO_CONTEXT_DMA_GPSGE         0x3
#define AUDIO_CONTEXT_DMA_FENOTIFIER    0x4
#define AUDIO_CONTEXT_DMA_EPSGE         0x5
#define AUDIO_CONTEXT_DMA_GPNOTIFIER    0x6
#define AUDIO_CONTEXT_DMA_EPNOTIFIER    0x7
#define AUDIO_CONTEXT_DMA_GPFXPARAM     0x8
#define AUDIO_CONTEXT_DMA_GPFXDSPCODE   0x9

typedef struct
{
	NvU32	uDeviceRef;         // device reference
	NvU8	uType;              // one of the values defined above
	NvU32	uBaseAddress;       // base address for the type. (must be 4K aligned)
	NvU32	uMaxOffset;         // max offset for the type. (must be 4K aligned)
	NvU32	uHandle;            // OUT: handle of the context DMA
} APU_AP_ALLOC_CONTEXT_DMA;

typedef struct
{
	NvU32	uDeviceRef;         // device reference
	NvU32	uHandle;            // handle of the context DMA
} APU_AP_FREE_CONTEXT_DMA;


#define GSCNT_OFF                   0 
#define GSCNT_ACSYNC                1   /* updated for every AC_SYNC pulse (48KHz) */
#define GSCNT_SW                    2   /* client will update it */
#define GSCNT_FREE_RUNNING          3 

// class 0x0A2 creation parameters (NV1B_AUDIO_PROCESSOR)
typedef union
{
    struct
    {	
        NvU32 FEISORead     : 1;
        NvU32 FEISOWrite    : 1;
        NvU32 FEISONotify   : 1;
        NvU32 FEISOPIO      : 1;
        NvU32 SEISORead     : 1;
        NvU32 SEISOWrite    : 1;
        NvU32 SEISOSampleRead : 1;
        NvU32 GSCNT         : 2;        // see values defined above
        NvU32               : 23;
    }fields;
    
    NvU32 uValue;
} APU_AP_FLAGS;

typedef struct 
{
    NvV32           pObjectDmaBuffer;           // in buffer for global effects dma commands.
    NvV32           pObjectNotifiesBuffer;      // in buffer for voice notifies
    NvV32           pObjectGlobalNotifiesBuffer; // in buffer for global notifies
    APU_AP_FLAGS    flags; 
    VOID_PTR        pioBase; 
    NvU32           limitFifo; 
    NvU32           limitBandwidth; 
    NvU32           limitBlockClock; 
    NvU32           overhead; 
    
    NvU32           uVoiceCount;        // in/out req # of voices , return #
    NvU32           uVoice3dCount;      // in/out req # of 3d voices , return #
    NvU32           uHRTFCount;         // in/out req # of HRTFs, return #
    NvU32           uSubmixCount;       // in/out req # of Submixes, return #
    NvU32           uSegInCount;        // in/out req # of segments for input, return #
    NvU32           uSGEInCount;        // in/out req # of 4K SGE for input, return #
    NvU32           uSGEOutCount;       // in/out req # of 4K SGE for output, return #
    VOID_PTR        pGPCommandQ;        // base address of CommandQ of the GP.  Offsets for method/data
                                        // pair are got from NV1BA0_CHANNEL_DMA_PUT/NV1BA0_CHANNEL_DMA_GET

    // global sample count values - ignored if GSCNT = GSCNT_FREE_RUNNING
    NvU32           uExternalGSCNT;     // in updated according to the GSCNT flag above
    NvU32           uInternalGSCNT;     // in updated by HW, by frame_size everytime output is made to sys mem
    NvU32           uDeltaGSCNT;        // in if (uInternalGSCNT - uExternalGSCNT) < uDeltaGSCNT, HW renders
    
    VOID_PTR        pVoiceList;         // out (DEBUG ONLY) - linear address of the voice structure
    VOID_PTR        pGPScratchLin;      // out linear pointer to GP scratch memory
}APU_AP_CREATE;


typedef struct
{
    VOID_PTR        pioBase;
    NvU32           uUseForAC3;         // in - reserve for Ac-3 encode, no other effects can be loaded

    NvU32           uSGEOutCount;       // in/out req # of 4K SGE for output, return #

    // global sample counts applied only to teh EP
    NvU32           uInternalGSCNT;     // in updated by HW, by frame_size everytime output is made to sys mem
    NvU32           uDeltaGSCNT;        // in if (uInternalGSCNT - APU_AP_CREATE::uExternalGSCNT) < uDeltaGSCNT, HW renders
    NvU32           uStepSize;          // in step size added to uInternalGSCNT each frame
    VOID_PTR        pEPScratchLin;      // out linear pointer to EP scratch memory
    NvU32           uAC3GpOutputOffset; // DEBUG only!  offset into GP scratch that has the AC3 output
} APU_EP_CREATE;

typedef APU_AP_CREATE NV0A2_ALLOCATION_PARAMETERS;

// NV01_EXTERNAL_CODEC_OBJECT

// class 0x0A5 creation parameters (NV01_EXTERNAL_CODEC_OBJECT)
typedef struct
{
	VOID_PTR	pioBaseMixer;
	VOID_PTR	pioBaseAci;
} CODEC_AUDIO_CREATE;

// the object alloc structure is used, both for codec and APU object allocation
// uObjectCode codes
#define	AUDIO_OBJECT_AP					0x1
#define AUDIO_OBJECT_EP					0x2
#define CODEC_OBJECT_AUDIO				0x3
#define CODEC_OBJECT_MODEM				0x4		/* not supported */

typedef struct
{
	NvU32	uDeviceRef;         // device reference
	NvU8	uObjectCode;
	NvV32	pParam;	
} APU_OBJECT;

#define CODEC_ACCESS_08				1
#define CODEC_ACCESS_16				2
#define CODEC_ACCESS_32				4

// alloc params for NV01_EXTERNAL_CODEC_READ & NV01_EXTERNAL_CODEC_WRITE
typedef struct
{
	NvU32	    uDeviceRef;	            // device reference
	VOID_PTR	BaseAddr;               // base address for which read/write is made
	NvU32	    Offset;                 // offset from the base address for which access is to be made
	NvV32	    AccessType;             // hardware access type
	/*
	for BYTE reads/writes	ValidBytes = CODEC_ACCESS_08 valid Val field = u8
	for WORD reads/writes	ValidBytes = CODEC_ACCESS_16 valid Val field = u16
	for DWORD reads/writes	ValidBytes = CODEC_ACCESS_32 valid Val Field = u32
	any other value for ValidBytes is illegal
	*/
	union
	{
		NvU8	u8;
		NvU16	u16;
		NvU32	u32;
	}Val;
}CODEC_ACCESS_PARAMS;


// 0xA8 memory management paramters

#define MEM_ALIGN_4K					0x00000000
#define MEM_ALIGN_8K					0x00000001		
#define MEM_ALIGN_16K					0x00000003
#define MEM_ALIGN_32K					0x00000007
#define MEM_ALIGN_64K					0x0000000F
#define MEM_ALIGN_128K					0x0000001F
#define MEM_ALIGN_DONT_CARE				0xFFFFFFFF

// for allocation use:
typedef struct
{
	NvU32       uSize;          // IN:	size of memory to be allocated in bytes
	NvU32       uAlignMask;     // IN:	alignment mask to get physically contiguous memory
                                // use ALIGN_DONT_CARE if it need not be aligned and physically contiguous
	VOID_PTR    pLinearAddress; // OUT: linear address of allocated memory (NULL on failure)
} AUDIO_ALLOC_MEMORY;

// for freeing memory use:
typedef struct
{
	VOID_PTR    pLinearAddress; // IN: linear address of allocated memory
} AUDIO_FREE_MEMORY;

#ifdef __cplusplus
};          // extern "C" {
#endif

#endif /* NV32_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvARMApi.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
\***************************************************************************/

/*
* nvARmApi.h
*
* NVidia resource manager API header file exported to drivers. (as of now, only
* the audio drivers use it.
*
*/

#if !defined _NVARMAPIH_
#define _NVARMAPIH_

#if defined __cplusplus
extern "C" {
#endif //__cplusplus
    
#include <nvos.h>


// exported functions - OS independent to get to the core

// to be called before anything can be done with the RM
NvU32	NVARM_LoadCore(NvU32 *pDeviceHandle);
void	NVARM_UnloadCore(NvU32 uDeviceHandle);

NvU32	NVARM_Alloc(NvU32 uDeviceHandle, NVOS21_PARAMETERS *pIn);
NvU32	NVARM_Free(NvU32 uDeviceHandle, NV_UNIFIED_FREE *pIn);
    
    
#if defined WIN9XVXD		// change this to whatever the macro is
    
// some imports from resman files... wonder why it's not in common

// this structure is exactly the same as NV_IOCTL_ARCH_STRUCT,
// name's changed to prevent redfinition.
typedef struct
{
    NvU32 nvarchFunction;
    NvU32 nvarchParameters;
} NVA_IOCTL_ARCH_STRUCT;
    
#if !defined NVRM_IOCTL_NV_ARCH
#define NVRM_IOCTL_NV_ARCH				21
#endif
    
#define AVxDCall(service) \
    _asm _emit 0xcd \
    _asm _emit 0x20 \
    _asm _emit (service & 0xff) \
    _asm _emit (service >> 8) & 0xff \
    _asm _emit (service >> 16) & 0xff \
    _asm _emit (service >> 24) & 0xff \
    
NvU32 static __inline
IOCTLCall(NvU32 pDevInfoParam, DIOCPARAMETERS *pParams)
{
    NvU32 dw;
    struct DeviceInfo  *pDevInfo;
    struct VxD_Desc_Block *pDDB;
    
    pDevInfo = (struct DeviceInfo *)pDevInfoParam;
    pDDB = (struct VxD_Desc_Block *)pDevInfo->DI_DDB;
    
    // W32_DEVICEIOCONTROL = 0x23
    _asm pushad
    _asm mov eax, 0x23
    _asm mov ecx, pDDB
    _asm mov esi, pParams
    AVxDCall(0x00010147);		// Directed_Sys_Control
    _asm mov dw, eax
    _asm popad
    return(dw);
}
    
inline NvU32
NVARM_LoadCore(NvU32 *ppDevInfo)
{
    NvU32	dlResult;
    NvU8	*pName = (NvU8*)VXDLDR_NVA_RESMAN_VXD_NAME;
    struct DeviceInfo  *pDevInfo;
    
    _asm pushad
    _asm	mov	edx, pName
    _asm	mov	eax, 1
    AVxDCall(0x00270001);		// VXDLDR_LoadDevice
    _asm	mov	dlResult, eax
    _asm	jc	LoadDeviceError
    // DDB returned in eax
    _asm	mov	pDevInfo, edx
    _asm    popad
    
    *ppDevInfo = (NvU32)pDevInfo;
    dlResult = 0;
    
LoadDeviceError:
    return	(dlResult);
}
    
inline VOID
NVARM_UnloadCore(NvU32 pDevInfoParam)
{	
    struct DeviceInfo *pDevInfo;
    
    pDevInfo = (struct DeviceInfo *)pDevInfoParam;
    
    NvU8	*pName = (NvU8 *)pDevInfo->DI_ModuleName;
    NvU32	deviceID = pDevInfo->DI_DeviceID;

    _asm    pushad
    _asm	mov	ebx, deviceID
    _asm	mov	edx, pName
    AVxDCall(0x00270002);	// VXDLDR_UnloadDevice
    _asm    popad
}

inline NvU32
NVARM_Alloc(NvU32 pDevInfo, NVOS21_PARAMETERS *pIn)
{
    DIOCPARAMETERS ioctlParams;
    NVA_IOCTL_ARCH_STRUCT	params;
    
    params.nvarchFunction = NV04_ALLOC;
    params.nvarchParameters = (NvU32)pIn;
    
    ioctlParams.dwIoControlCode = NVRM_IOCTL_NV_ARCH;
    ioctlParams.lpvInBuffer = (NvU32)&params;
    ioctlParams.cbInBuffer = sizeof(NVA_IOCTL_ARCH_STRUCT);
    ioctlParams.lpvOutBuffer = NULL;
    ioctlParams.cbOutBuffer = 0;
    
    return IOCTLCall(pDevInfo, &ioctlParams);
}

inline NvU32
NVARM_Free(NvU32 pDevInfo, NV_UNIFIED_FREE *pIn)
{
    DIOCPARAMETERS ioctlParams;
    NVA_IOCTL_ARCH_STRUCT	params;
    
    params.nvarchFunction = NV04_UNIFIED_FREE;
    params.nvarchParameters = (NvU32)pIn;
    
    ioctlParams.dwIoControlCode = NVRM_IOCTL_NV_ARCH;
    ioctlParams.lpvInBuffer = (NvU32)&params;
    ioctlParams.cbInBuffer = sizeof(NVA_IOCTL_ARCH_STRUCT);
    ioctlParams.lpvOutBuffer = NULL;
    ioctlParams.cbOutBuffer = 0;
    
    return IOCTLCall(pDevInfo, &ioctlParams);
    
}
    
#endif
    
#if defined WDM

// list of imported functions from the resource manager
// the user still needs to link to the .lib

__declspec(dllimport) NvU32 rmAuDispatch(U032 uFunction, PVOID pIn);

inline NvU32
NVARM_LoadCore(NvU32 *ppDevInfo)
{
    // nothing to do really - except maybe load the driver??

    // I was returning '0', but the client thinks '0' is an invalid value
    *ppDevInfo = 0xF;
    return 0;
}

inline VOID
NVARM_UnloadCore(NvU32 pDevInfoParam)
{
    return;
}

inline NvU32
NVARM_Alloc(NvU32 pDevInfo, NVOS21_PARAMETERS *pIn)
{
    return rmAuDispatch(NV04_ALLOC, (VOID *)pIn);
}

inline NvU32
NVARM_Free(NvU32 pDevInfo, NV_UNIFIED_FREE *pIn)
{
    return rmAuDispatch(NV04_UNIFIED_FREE, (VOID *)pIn);
}

#endif		// WDM

#if defined __cplusplus
}
#endif //__cplusplus

#endif // _NVARMAPIH_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvdload.h ===
/*****************************************************************************\
|*                                                                           *|
|*        Copyright (c) 1993-2001 NVIDIA, Corp.  All rights reserved.        *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.   NVIDIA, Corp. of Sunnyvale, California owns     *|
|*     the copyright  and as design patents  pending  on the design  and     *|
|*     interface  of the NV chips.   Users and possessors of this source     *|
|*     code are hereby granted  a nonexclusive,  royalty-free  copyright     *|
|*     and  design  patent license  to use this code  in individual  and     *|
|*     commercial software.                                                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright (c) 1993-2001  NVIDIA, Corp.    NVIDIA  design  patents     *|
|*     pending in the U.S. and foreign countries.                            *|
|*                                                                           *|
|*     NVIDIA, CORP.  MAKES  NO REPRESENTATION ABOUT  THE SUITABILITY OF     *|
|*     THIS SOURCE CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT     *|
|*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORP. DISCLAIMS     *|
|*     ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,  INCLUDING  ALL     *|
|*     IMPLIED   WARRANTIES  OF  MERCHANTABILITY  AND   FITNESS   FOR  A     *|
|*     PARTICULAR  PURPOSE.   IN NO EVENT SHALL NVIDIA, CORP.  BE LIABLE     *|
|*     FOR ANY SPECIAL, INDIRECT, INCIDENTAL,  OR CONSEQUENTIAL DAMAGES,     *|
|*     OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,  DATA OR     *|
|*     PROFITS,  WHETHER IN AN ACTION  OF CONTRACT,  NEGLIGENCE OR OTHER     *|
|*     TORTIOUS ACTION, ARISING OUT  OF OR IN CONNECTION WITH THE USE OR     *|
|*     PERFORMANCE OF THIS SOURCE CODE.                                      *|
|*                                                                           *|
|*****************************************************************************|
|*                                                                           *|
|* File: nvdload.h                                                           *|
|*                                                                           *|
|*   This file describes the image layout for dynamically loadable driver    *|
|* code.                                                                     *|
|*****************************************************************************|
|*                                                                           *|
|* History:                                                                  *|
|*       Ken Adams (kadams)     02/2001 - wrote it based upon investigatory  *|
|*                                        code from Todd Poynter.            *|
|*                                                                           *|
\*****************************************************************************/

#ifndef _NVDLOAD_H_
#define _NVDLOAD_H_


// defines


#define NV_DLOAD_SECTION_TYPE_DATA  0
#define NV_DLOAD_SECTION_TYPE_CODE  1
#define NV_DLOAD_SECTION_TYPE_BSS   2

#define NV_DLOAD_IMAGE_ENTRY  "nvimg"

#define NV_DLOAD_MAX_SYMWIDTH      40
#define NV_DLOAD_HEADER_MAGIC      0xdead
#define NV_DLOAD_FOOTER_MAGIC      0xbeef


// This is just a swag.  Don't know what if any 
// other than X86 __stdcall will ever make sense.
// These are just arbitrarily made-up numbers.

#define NV_DLOAD_IMAGE_ARCH_X86_STDCALL     0xbe01
#define NV_DLOAD_IMAGE_ARCH_IA64            0xbe02
#define NV_DLOAD_IMAGE_ARCH_PPC             0xbe03


//XXX These entry definitions should probably be 32b vs 64b ABI specific.
// For instance, suggesting NvU32 for memOffset below doesn't make sense for IA64.


typedef struct section_info_entry
{
	NvU16    type;			// data or code
	NvU16    secNumber;		// the section number
	NvU32    dataSize;		// size of the data within this section
	NvU32    numRelocs;		// number of relocations for this section
	NvU32    memOffset;	        // offset within our malloced buffer to this section
} SectionInfoEntry, *PSectionInfoEntry;

typedef struct relocation_info_entry
{
	NvU16    type;                  // relo type (arch specific)
	NvU16    secNumber;		// the section number
	NvU32    symIndex;		// symbol table index
	NvU32    address;		// offset from the memOffset where we do our relocation
} RelocationInfoEntry, *PRelocationInfoEntry;

typedef struct symbol_table_entry
{
	NvU32           value;          // offset (section?)
	NvU32           symIndex;       // symbol table index
	NvU16           secNumber;      // symbols section number
	NvU8	        name[NV_DLOAD_MAX_SYMWIDTH]; // symbol name
} SymbolTableEntry, *PSymbolTableEntry;

typedef struct nv_image_header
{
	NvU16 magicNumber;
	NvU16 arch;
	NvU32 imageSize;       // size of the entire image including this header (after any decompression).
        NvU32 compressedSize;  // non-zero if the image behind the header should be 'inflated'.
	NvU16 nSections;       
	NvU32 nRelocs;
	NvU32 nSymbols;
	NvU32 dataSize;
	NvU32 codeSize;
	NvU32 bssSize;
} NV_ImageHeader, *PNV_ImageHeader;

typedef struct nv_image_footer
{
	unsigned magicNumber;
} NV_ImageFooter, *PNV_ImageFooter;

typedef struct nv_image
{
	NV_ImageHeader			*header;
	SectionInfoEntry		*secTable;
	RelocationInfoEntry		*relocTable;
	SymbolTableEntry		*symTable;
	NvU8				*dataBuffer;
	NvU8				*codeBuffer;
	NvU8                            *bssBuffer;
	NV_ImageFooter			*footer;
} NV_Image, *PNV_Image;


//-----------------------------------------------------------------------------
// Raw Image Layout
//                    NV_ImageHeader
//                    SectionInfoEntry[...]
//                    RelocationInfoEntry[...]
//                    SymbolTableEntry[...]
//                    DataBuffer[...]
//                    CodeBuffer[...]
//                    NV_ImageFooter
//-----------------------------------------------------------------------------

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\Nvcm.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
 \***************************************************************************/

/******************* Operating System Interface Routines *******************\
*                                                                           *
* Module: NVCM.H                                                            *
*   Windows Configuration Manager defines and prototypes.                   *
*                                                                           *
*****************************************************************************
*                                                                           *
* History:                                                                  *
*                                                                           *
*                                                                           *
\***************************************************************************/
#ifndef _NVCM_H_
#define _NVCM_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <nvtypes.h>

//---------------------------------------------------------------------------
//
//  Configuration Defines.
//
//---------------------------------------------------------------------------

#pragma pack(1) // assure byte alignment on structures shared among modules

//
// Index parameters to ConfigGet/Set.  All other values are reserved.
//

//
// NV_CFG_MANUFACTURER - Return the manufacturer of this device
//
//  0 - NVIDIA Corporation
//  (all other values are reserved)
//
#define NV_CFG_MANUFACTURER                     1

//
// NV_CFG_ARCHITECTURE - Return the architecture of this device
//
//  0 - NV0
//  1 - NV1, etc
//
#define NV_CFG_ARCHITECTURE                     2

//
// NV_CFG_REVISION - Return the major revision of this device
//
//  0 - RevA
//  1 - RevB, etc
//
#define NV_CFG_REVISION                         3

/*
** NV_CFG_BIOS_REVISION - Return the current revision of this device's BIOS
**
**  MMNNRRRR - MM   Major Revision
**             NN   Minor Revision
**             RRRR Release Revision
*/
#define NV_CFG_BIOS_REVISION                    4

//
// NV_CFG_BUS_TYPE - Return the bus implementation of this device
//
//  1 - PCI
//  2 - VL
//  4 - AGP
//  All other values are reserved
//
#define NV_CFG_BUS_TYPE                         5

//
// NV_CFG_CRYSTAL_FREQ - Return the PLL crystal frequency of this device
//
//  Value returned in Hz
//
#define NV_CFG_CRYSTAL_FREQ                     6

//
// NV_CFG_BIOS_OEM_REVISION - Return the current OEM revision of this
//                            device's BIOS
//
#define NV_CFG_BIOS_OEM_REVISION                7

//
// NV_CFG_IMPLEMENTATION - Return the implementation of a chip architecture.
//
#define NV_CFG_IMPLEMENTATION                   8

// When ARCHITECTURE is 0x4, IMPLEMENTATIION is:
#define NV_CFG_IMPLEMENTATION_NV04      0x0
#define NV_CFG_IMPLEMENTATION_NV05      0x1
#define NV_CFG_IMPLEMENTATION_NV0A      0x2
// When ARCHITECTURE is 0x10, IMPLEMENTATIION is:
#define NV_CFG_IMPLEMENTATION_NV10      0x0
#define NV_CFG_IMPLEMENTATION_NV15      0x5
#define NV_CFG_IMPLEMENTATION_NV11      0x1

//
// NV_CFG_ADDRESS_NVADDR - Return the linear address of (BAR0) of this device
//
#define NV_CFG_ADDRESS_NVADDR                   9

//
// NV_CFG_ADDRESS - Return the physical PCI address (BAR0) of this device
//
#define NV_CFG_ADDRESS                          10

//
// NV_CFG_IRQ - Return the PCI IRQ assigned to this device
//
#define NV_CFG_IRQ                              11

//
// NV_CFG_IO_NEEDED - Return the detection flag for chipsets that have broken
//                    PCI snoop mastering.
//
#define NV_CFG_IO_NEEDED                        12

//
// NV_CFG_PCI_ID - Return the PCI Vendor and Device ID assigned to this device
//
//      DDDDVVVV -  VVVV    PCI Vendor ID
//                  DDDD    PCI Device ID
//
#define NV_CFG_PCI_ID                           13

//
// NV_CFG_PCI_SUB_ID - Return the PCI Subsystem Vendor and Device ID assigned to this device
//
//      DDDDVVVV -  VVVV    PCI Subsystem Vendor ID
//                  DDDD    PCI Subsystem ID
//
#define NV_CFG_PCI_SUB_ID                       14

//
// NV_CFG_PROCESSOR_TYPE - Return the functionality of the system processor
//
// There are 2 pieces of data passed back, the processor indicator is in
// the low 8 bits and its bitmask of functionality is in the upper 24
//
#define NV_CPU_UNKNOWN         0x00000000    // Unknown / generic
// Intel
#define NV_CPU_P5              0x00000001
#define NV_CPU_P55             0x00000002    // P55C - MMX
#define NV_CPU_P6              0x00000003    // PPro
#define NV_CPU_P2              0x00000004    // PentiumII
#define NV_CPU_P2XC            0x00000005    // Xeon & Celeron
#define NV_CPU_CELA            0x00000006    // Celeron-A
#define NV_CPU_P3              0x00000007    // Pentium-III
#define NV_CPU_P3_INTL2        0x00000008    // Pentium-III w/ integrated L2 (fullspeed, on die, 256K)
#define NV_CPU_P4              0x00000009    // Pentium-IV

#define NV_CPU_IA64            0x00000020    // Itanium

// AMD
#define NV_CPU_K5              0x00000030
#define NV_CPU_K6              0x00000031
#define NV_CPU_K62             0x00000032    // K6-2 w/ 3DNow
#define NV_CPU_K63             0x00000033
#define NV_CPU_K7              0x00000034
// IDT/Centaur
#define NV_CPU_C6              0x00000060    // WinChip C6
#define NV_CPU_C62             0x00000061    // WinChip 2 w/ 3DNow
// Cyrix
#define NV_CPU_GX              0x00000070    // MediaGX
#define NV_CPU_M1              0x00000071    // 6x86
#define NV_CPU_M2              0x00000072    // M2
#define NV_CPU_MGX             0x00000073    // MediaGX w/ MMX
// PowerPC
#define NV_CPU_PPC603          0x00000090    // PowerPC 603
#define NV_CPU_PPC604          0x00000091    // PowerPC 604
#define NV_CPU_PPC750          0x00000092    // PowerPC 750

// Function bits
#define NV_CPU_FUNC_MMX        0x00000100    // supports MMX
#define NV_CPU_FUNC_SSE        0x00000200    // supports SSE
#define NV_CPU_FUNC_3DNOW      0x00000400    // supports 3DNow
#define NV_CPU_FUNC_SSE2       0x00000800    // supports SSE2
#define NV_CPU_FUNC_SFENCE     0x00001000    // supports SFENCE
#define NV_CPU_FUNC_WRITE_COMBINING 0x00002000 // supports write-combining
#define NV_CPU_FUNC_ALTIVEC    0x00004000    // supports ALTIVEC
#define NV_CPU_FUNC_PUT_NEEDS_IO 0x00008000  // requires OUT inst w/PUT updates

#define NV_CFG_PROCESSOR_TYPE                   15

//
// NV_CFG_PROCESSOR_SPEED - Return the speed of the processor in MHz
//
#define NV_CFG_PROCESSOR_SPEED                  16

//
// NV_CFG_GRAPHICS_CAPS - Return the capabilities of the graphics HW
//
#define NV_CFG_GRAPHICS_CAPS                    18

#define NV_CFG_GRAPHICS_CAPS_UNKNOWN            0x00000000
#define NV_CFG_GRAPHICS_CAPS_MAXCLIPS_MASK      0x000000FF  // bits 7:0
#define NV_CFG_GRAPHICS_CAPS_MAXCLIPS_SHIFT     0
#define NV_CFG_GRAPHICS_CAPS_AA_LINES           0x00000100  // bit  8
#define NV_CFG_GRAPHICS_CAPS_AA_POLYS           0x00000200  // bit  9
#define NV_CFG_GRAPHICS_CAPS_AKILL_USERCLIP     0x00000400  // bit 10
#define NV_CFG_GRAPHICS_CAPS_LOGIC_OPS          0x00000800  // bit 11
#define NV_CFG_GRAPHICS_CAPS_NV15_ALINES        0x00001000  // bit 12
#define NV_CFG_GRAPHICS_CAPS_2SIDED_LIGHTING    0x00002000  // bit 13
#define NV_CFG_GRAPHICS_CAPS_QUADRO_GENERIC     0x00004000  // bit 14
#define NV_CFG_GRAPHICS_CAPS_UBB                0x00008000  // bit 15
#define NV_CFG_GRAPHICS_CAPS_NV1X_COLOR_INVARIANCE 0x00010000  // bit 16
#define NV_CFG_GRAPHICS_CAPS_3D_TEXTURES        0x00020000  // bit 17
#define NV_CFG_GRAPHICS_CAPS_ANISOTROPIC        0x00040000  // bit 18
#define NV_CFG_GRAPHICS_CAPS_CLIPPED_ALINES     0x00080000  // bit 19

//
// NV_CFG_INSTANCE_SIZE - Return the size of the instance pool of this device
//
#define NV_CFG_INSTANCE_SIZE                    20

//
// NV_CFG_INSTANCE_SIZE - Return the size of the instance pool of this device
//
#define NV_CFG_INSTANCE_TOTAL                   21

//
// NV_CFG_FIFO_COUNT - Return the number of user fifos allowed in this device
//
#define NV_CFG_FIFO_COUNT                       32

//
// NV_CFG_FIFO_USE_COUNT - Return the number of fifos used in this device
//
#define NV_CFG_FIFO_USE_COUNT                   33

//
// NV_CFG_RAM_SIZE_MB - Return the video memory size (in MB) of this device
//
#define NV_CFG_RAM_SIZE_MB                      40

//
// NV_CFG_RAM_SIZE - Return the video memory size (in bytes) of this device
//
#define NV_CFG_RAM_SIZE                         41

//
// NV_CFG_RAM_TYPE - Return the video memory type of this device
//
//  0 - DRAM (EDO/FPM)
//  1 - SGRAM
//  2 - SDRAM
//  3 - DDR-RAM
//  All other values are reserved
//
#define NV_CFG_RAM_TYPE                         42

#define NV_CFG_RAM_TYPE_DRAM          0
#define NV_CFG_RAM_TYPE_SGRAM         1
#define NV_CFG_RAM_TYPE_SDRAM         2
#define NV_CFG_RAM_TYPE_DDRRAM        3


//
// NV_CFG_AGP_FULLSPEED_FW - Return if AGP Fast Writes are fullspeed
//
#define NV_CFG_AGP_FULLSPEED_FW                 43

//
// NV_CFG_AGP_PHYS_BASE - Return/Set the current physical GART address
//
#define NV_CFG_AGP_PHYS_BASE                    44

//
// NV_CFG_AGP_LINEAR_BASE - Return/Set the current linear GART address
//
#define NV_CFG_AGP_LINEAR_BASE                  45

//
// NV_CFG_AGP_LIMIT - Return/Set the current GART size
//
#define NV_CFG_AGP_LIMIT                        46

//
// NV_CFG_AGP_FW_ENABLE - Return if AGP Fast Writes are enabled
//
#define NV_CFG_AGP_FW_ENABLE                    47

//
// NV_CFG_AGP_HEAP_FREE - Return the amount of free AGP memory
//
#define NV_CFG_AGP_HEAP_FREE                    48

// XXX this isn't be used
#define NV_CFG_AGP_LOAD_DUMMY_PAGES             49

//
// NV_CFG_SCREEN_WIDTH - Return/Set the current display horizontal resolution
//
//  Value defined in pixels
//
// NOTE: Updates to this value will not take affect until NvConfigUpdate().
// This allows batching with other screen size parameters.
//
#define NV_CFG_SCREEN_WIDTH                     50

//
// NV_CFG_SCREEN_HEIGHT - Return/Set the current display vertical resolution
//
//  Value defined in pixels
//
// NOTE: Updates to this value will not take affect until NvConfigUpdate().
// This allows batching with other screen size parameters.
//
#define NV_CFG_SCREEN_HEIGHT                    51

//
// NV_CFG_PIXEL_DEPTH - Return/Set the current display pixel depth
//
//  Value defined in bits per pixel
//
// NOTE: Updates to this value will not take affect until NvConfigUpdate().
// This allows batching with other screen size parameters.
//
#define NV_CFG_PIXEL_DEPTH                      52

//
// NV_CFG_SCREEN_MAX_WIDTH - Returns the maximum horizontal resolution supported by the display type.
//
//  Value defined in pixels
//
#define NV_CFG_SCREEN_MAX_WIDTH                 53

//
// NV_CFG_SCREEN_MAX_HEIGHT - Returns the maximum vertical resolution supported by the display type.
//
//  Value defined in pixels
//
#define NV_CFG_SCREEN_MAX_HEIGHT                54

//
// NV_CFG_VIDEO_ENCODER_TYPE - Return the external video decoder being used by this device
//
#define NV_CFG_VIDEO_ENCODER_TYPE               55

#define TV_ENCODER_NONE                 0x000
#define TV_ENCODER_BROOKTREE            0x100
#define TV_ENCODER_CHRONTEL             0x200
#define TV_ENCODER_PHILIPS              0x400

#define TV_ENCODER_FAMILY( X )          (X & ~0xFF)

#define NV_ENCODER_NONE                 TV_ENCODER_NONE

#define NV_ENCODER_BROOKTREE_868        (TV_ENCODER_BROOKTREE + 1)
#define NV_ENCODER_BROOKTREE_869        (TV_ENCODER_BROOKTREE + 2)
#define NV_ENCODER_BROOKTREE_871        (TV_ENCODER_BROOKTREE + 3)
#define NV_ENCODER_BROOKTREE_870        (TV_ENCODER_BROOKTREE + 4)

#define NV_ENCODER_CHRONTEL_7003        (TV_ENCODER_CHRONTEL + 3)
#define NV_ENCODER_CHRONTEL_7004        (TV_ENCODER_CHRONTEL + 4)
#define NV_ENCODER_CHRONTEL_7005        (TV_ENCODER_CHRONTEL + 5)
#define NV_ENCODER_CHRONTEL_7006        (TV_ENCODER_CHRONTEL + 6)
#define NV_ENCODER_CHRONTEL_7007        (TV_ENCODER_CHRONTEL + 7)
#define NV_ENCODER_CHRONTEL_7008        (TV_ENCODER_CHRONTEL + 8)

#define NV_ENCODER_PHILIPS_7102	        (TV_ENCODER_PHILIPS + 2)
#define NV_ENCODER_PHILIPS_7103	        (TV_ENCODER_PHILIPS + 3)
#define NV_ENCODER_PHILIPS_7108	        (TV_ENCODER_PHILIPS + 8)    // = 7102 encoder + 7114 decoder
#define NV_ENCODER_PHILIPS_7109	        (TV_ENCODER_PHILIPS + 9)    // = 7103 encoder + 7114 decoder
#define NV_ENCODER_PHILIPS_7108B        (TV_ENCODER_PHILIPS + 8 + 0x10)    // early version of 7108 with clock active edge reversed
//
// NV_CFG_PRIMARY_SURFACE_PITCH - Return the display pitch of the primary surface
//
//  Value defined in bytes
//
#define NV_CFG_PRIMARY_SURFACE_PITCH            56

//
// NV_CFG_VIDEO_ENCODER_ID - Return the encoder ID (I2C address)
//
#define NV_CFG_VIDEO_ENCODER_ID                 57

//
// NV_CFG_NUMBER_OF_HEADS - Return the number of CRTC heads on this device
//
#define NV_CFG_NUMBER_OF_HEADS                  58

//
// NV_CFG_DEVICE_INSTANCE - Return the device instance
//
#define NV_CFG_DEVICE_INSTANCE                  59

//
// NV_CFG_NUMBER_OF_ACTIVE_HEADS - Return number of active CRTC heads on this device
//
#define NV_CFG_NUMBER_OF_ACTIVE_HEADS           60

//
// NV_CFG_INITIAL_BOOT_HEAD - Return the dac head that was used to boot the system
//
//  0 - HeadA
//  1 - HeadB
//  All other values are reserved
//
#define NV_CFG_INITIAL_BOOT_HEAD                61

//
// NV_CFG_VIDEO_DISPLAY_TYPE - Return the physical display being used by this device
//
//  0 - Monitor
//  1 - TV
//  2 - Dual Surface
//  3 - Flat Panel
//  All other values are reserved
//
#define NV_CFG_VIDEO_DISPLAY_TYPE               78

//
// NV_CFG_VIDEO_MONITOR_TYPE - Return the monitor format type being used by this device
//
//  0 - VGA
//  2 - NTSC TV
//  3 - PAL TV
//  4 - Flat Panel
//  All other values are reserved
//
#define NV_CFG_VIDEO_MONITOR_TYPE               79

#define MONITOR_TYPE_VGA                0
#define MONITOR_TYPE_NTSC               2
#define MONITOR_TYPE_PAL                3
#define MONITOR_TYPE_FLAT_PANEL         4

//
// NV_CFG_VIDEO_OVERLAY_ALLOWED - Return the video overlay validity in the current
//      desktop resolution
//
//  0 - Video Overlay not allowed
//  1 - Video Overlay is allowed
//  All other values are reserved
//
#define NV_CFG_VIDEO_OVERLAY_ALLOWED            80

//
// NV_CFG_VIDEO_DOWNSCALE_RATIO_X - Return the maximum video overlay downscale ratio
// supported for the given source width in the current desktop resolution
// (assuming the overlay is supported at all -- see above)
//
//  1  - Video Downscaling not supported with this source width
//  2  - Maximum 2X downscaling supported
//  4  - Maximum 4X downscaling supported
//  8  - Maximum 8X downscaling supported
//  16 - Maximum 16X downscaling supported
//  (and so on)
//
#define NV_CFG_VIDEO_DOWNSCALE_RATIO_768        82
#define NV_CFG_VIDEO_DOWNSCALE_RATIO_1280       83
#define NV_CFG_VIDEO_DOWNSCALE_RATIO_1920       84

//
// NV_CFG_FRAMEBUFFER_UNDERSCAN - Return/Set the NV3 (RIVA128) TV Underscan resolution
//
#define NV_CFG_FRAMEBUFFER_UNDERSCAN_X          85
#define NV_CFG_FRAMEBUFFER_UNDERSCAN_Y          86

//
// NV_CFG_VIDEO_OUTPUT_FORMAT - Return/Set the NV4/5/10 TV output format (S-Video, Composite, or Auto)
//
//  0 = Auto
//  1 = Composite
//  2 = S-Video 
//
#define NV_CFG_VIDEO_OUTPUT_FORMAT              90

#define NV_CFG_VIDEO_OUTPUT_FORMAT_AUTOSELECT          0x0
#define NV_CFG_VIDEO_OUTPUT_FORMAT_FORCE_COMPOSITE     0x1
#define NV_CFG_VIDEO_OUTPUT_FORMAT_FORCE_SVIDEO        0x2

//
// NV_CFG_VIDEO_TV_FORMAT - Return the current TV format
//
#define NV_CFG_VIDEO_TV_FORMAT                  109
// must be one of the following formats
#define NTSC_M  0
#define NTSC_J  1
#define PAL_M   2
#define PAL_A   3   // PAL B, D, G, H, I
#define PAL_N   4
#define PAL_NC  5
#define KNOWN_TV_FORMATS 5 // number of formats we know about + 1

//
// NV_CFG_DAC_INPUT_WIDTH - Return the width (in bits) of the current framebuffer bus
//
#define NV_CFG_DAC_INPUT_WIDTH                  110

//
// NV_CFG_DAC_VPLL_*
// NV_CFG_DAC_MPLL_* - Return the individual components of the memory and video PLL's
//
//  The definition of these values is reserved
//
#define NV_CFG_DAC_VPLL_M                       120
#define NV_CFG_DAC_VPLL_N                       121
#define NV_CFG_DAC_VPLL_O                       122
#define NV_CFG_DAC_VPLL_P                       123
#define NV_CFG_DAC_MPLL_M                       130
#define NV_CFG_DAC_MPLL_N                       131
#define NV_CFG_DAC_MPLL_O                       132
#define NV_CFG_DAC_MPLL_P                       133

//
// NV_CFG_BIOS_DEFAULT_TV_TYPE - The TV standard the BIOS uses by default.
//
//  The allowed values are defined as the values for NV_CFG_VIDEO_TV_FORMAT
//
#define NV_CFG_BIOS_DEFAULT_TV_TYPE             134

//
// NV_CFG_INTERRUPTS_ENABLED_STATE - Return / set NV interrupts enable
//
//  Return value of "get" form is 0 or 1.
//  When enabling interrupts, restores them to RM's idea of the current value
//
#define NV_CFG_INTERRUPTS_ENABLED_STATE         140


//
// NV_CFG_ENABLE_HOTKEY_HANDLING  - Return/Set who handles hotkey events
// 
// 1 == resman handles hotkeys on mobile
// 0 == bios handles hotkeys on mobile
// undefined if not on mobile
//
#define NV_CFG_ENABLE_HOTKEY_HANDLING           141
    
//
// NV_CFG_VIDEO_REFRESH_RATE - Return/Set the current display refresh rate (in Hz)
//
#define NV_CFG_VIDEO_REFRESH_RATE               170

//FPCLK control functions mostly useful to Mac display driver
#define NV_CFG_SHUTOFF_FLAT_PANEL               171
#define NV_CFG_TURNON_FLAT_PANEL                172


//
// NV_CFG_VBLANK_TOGGLE - Return/Set the current value of the vertical sync toggle
//
//  This value is toggled to zero (0) during every vertical sync.  By setting it to
//  any other value and then monitoring, a client can detect the presence of a
//  vertical sync signal occuring within a defined time period.
//
#define NV_CFG_VBLANK_TOGGLE                    212

//
// NV_CFG_VBLANK_COUNTER - Return/Set the number of vertical blanks 
//
//  This value is initialized to zero and keeps a running count of the number of
//  vertical blanks since the last reset. Use ConfigSet to reset it to zero.
//
#define NV_CFG_VBLANK_COUNTER                   213

//
// NV_CFG_PRAM_CURRENT_SIZE - Return the currently allocated size of chip
//
#define NV_CFG_PRAM_CURRENT_SIZE                220

//
// NV_CFG_GET_ALL_DEVICES - Return all available display devices (connectors)
//  in bitmask form.
// bits 0..7 represent CRT0..CRT7
// bits 8..15 represent TV0..TV7
// bits 16..23 represent DD0..DD7
// bits 24..31 are reserved
//
#define NV_CFG_GET_ALL_DEVICES                  221

//Same format as NV_CFG_GET_ALL_DEVICES
#define NV_CFG_GET_BOOT_DEVICES                 222

//
// NV_CFG_DAC_PIXEL_CLOCK - Return the current video pixel clock (in Hz) for this device
//
#define NV_CFG_DAC_PIXEL_CLOCK                  250

//                                                              
// NV_CFG_DAC_MEMORY_CLOCK - Return the current memory clock (in Hz) for this device
//
#define NV_CFG_DAC_MEMORY_CLOCK                 251

//
// NV_CFG_DAC_GRAPHICS_CLOCK - Return the current graphics clock (in Hz) for this device
//
#define NV_CFG_DAC_GRAPHICS_CLOCK               253

//
// NV_CFG_DAC_PCLK_LIMIT_8BPP - Return the current 8bpp graphics clock limit (in Hz) for this device
//
#define NV_CFG_DAC_PCLK_LIMIT_8BPP              260

//
// NV_CFG_DAC_PCLK_LIMIT_16BPP - Return the current 16bpp graphics clock limit (in Hz) for this device
//
#define NV_CFG_DAC_PCLK_LIMIT_16BPP             261

//
// NV_CFG_DAC_PCLK_LIMIT_32BPP - Return the current 16bpp graphics clock limit (in Hz) for this device
//
#define NV_CFG_DAC_PCLK_LIMIT_32BPP             262

//
// NV_CFG_MAPPING_BUSDEVICEFUNC - Return the device type for use by the display driver configmgr code
//
//  This value is the device type or'd with the busdevicefunc info (9X specific)
//
#define NV_CFG_MAPPING_BUSDEVICEFUNC            263
              
//
// NV_CFG_ENABLE_VGA_MODE - Set VGA mode flag in the RM for use by the display driver
//
//  0 - disable VGA mode (i.e. set high res graphics mode)
//  1 - enable VGA mode 
//
#define NV_CFG_ENABLE_VGA_MODE                  270

//
// NV_CFG_FLAT_PANEL_DITHER_MODE - Returns the state of the flat panel dithering
//                                 (if it's capable and enabled).
//
#define NV_CFG_FLAT_PANEL_DITHER_MODE           280
#define NV_CFG_FLAT_PANEL_DITHER_MODE_ENABLED   0x00000001
#define NV_CFG_FLAT_PANEL_DITHER_MODE_CAPABLE   0x00000100

//
// NV_CFG_VBLANK_STATUS - Return the current vertical blank status of this device
//
//  0 - device is not currently in vertical blank
//  1 - device is currently in vertical blank
//
#define NV_CFG_VBLANK_STATUS                    500

//
// NV_CFG_GE_STATUS - Return the current graphics activity state of this device
//
//  any value other than zero (0) denotes graphics activity is in progress
//
#define NV_CFG_GE_STATUS                        501

//
// NV_CFG_CURRENT_SCANLINE - Return the current active display scanline of this device
//
//  The value returned may be greater than the current resolution if the display
//  has moved into the vertical blanking period.
//
#define NV_CFG_CURRENT_SCANLINE                 502

//
// NV_CFG_DISPLAY_CHANGE_START - Notify the system that a display change is about to begin
// Note: should use the CFGEX version instead!
//
//  This call must be paired with a CHANGE_END call in order to keep the
//  notification balanced.
//
//  The value is a bitmask of devices that are planned on being enabled with the pending
//  display device change.
//
//      bits 0..7 represent CRT0..CRT7
//      bits 8..15 represent TV0..TV7
//      bits 16..23 represent DD0..DD7
//      bits 24..31 are reserved
//
#define NV_CFG_DISPLAY_CHANGE_START             510


//
// NV_CFG_DISPLAY_CHANGE_END - Notify the system that a display change is now complete
// Note: should use the CFGEX version instead!
//
//  This call must be paired with a CHANGE_START call in order to keep the
//  notification balanced.
//
//  The value is specifically OS-dependent and is based on the needs of the
//  hardware platform.  In most cases the data value is ignored.
//
#define NV_CFG_DISPLAY_CHANGE_END               511

//
// NV_CFG_DISPLAY_CHANGE_CONFIG - Set display properties
//
// Currently only pass the spanning property:
// 1 = spanning mode, 0 = non-spanning
//
#define NV_CFG_DISPLAY_CHANGE_CONFIG            512

//
// NV_CFG_FRAMECAPTURE_CALLBACK - Set the current 16bit callback (VFW) for framecapture
//
//  The value is specifically OS-dependent.  This setting may only be used with ConfigSet
//  and only on those operating systems requiring the callback mechanism.
//
#define NV_CFG_FRAMECAPTURE_CALLBACK            600

// Get the device handle for the device.
// Currently only defined for unix where it returns file descriptor
// for the opened device.  Needed for poll(2) on events

#define NV_CFG_DEVICE_HANDLE                    650

//
// NV_CFG_CRTC_* - Return/Set a CRTC (VGA) register in this device
//
//  All CRTC registers are accessed by adding the index the base value 
//  given here.
//  For example, CR1B is accessed using index (NV_CFG_CRTC+0x1B)
//
#define NV_CFG_CRTC                             768
//
// NOTE: CRTC RESERVED TO INDEX 832
//

//
// The following values are reserved for use by the resource manager 
// performance and debug tools
//
#define NV_CFG_SET_JUMP_WRITE_PUT_READ_GET      833
#define NV_STAT_INTERVAL_NSEC_LO                1000
#define NV_STAT_INTERVAL_NSEC_HI                1001
#define NV_STAT_FIFO_EXCEPTIONS                 1003
#define NV_STAT_FRAMEBUFFER_EXCEPTIONS          1004
#define NV_STAT_GRAPHICS_EXCEPTIONS             1005
#define NV_STAT_TIMER_EXCEPTIONS                1006
#define NV_STAT_CHIP_EXCEPTIONS                 1050
#define NV_STAT_MEM_ALLOCATED                   1100
#define NV_STAT_MEM_LOCKED                      1101
#define NV_STAT_EXEC_NSEC_LO                    1200
#define NV_STAT_EXEC_NSEC_HI                    1201
#define NV_STAT_INT_NSEC_LO                     1202
#define NV_STAT_INT_NSEC_HI                     1203

#define NV_CFG_REGISTRY_STRING                  1300

#define NV_CFG_DEBUG_LEVEL                      1350


//////////////////////////////////////////////////////////////////////////////
//
// The following Config equates are a 16bit subset of the corresponding 
// ConfigEX values
//
// Where possible, make sure to use the 32bit versions of these DDK interfaces
// rather than these legacy equates
//

//
// NV_CFG_GET_FLAT_PANEL_CONNECT_16 - Return the connection status of a 
// digital flat panel
// 
#define NV_CFG_FLAT_PANEL_CONNECT_16            30100

//
// NV_CFG_GET_FLAT_PANEL_CONFIG_16 - Return or update the current format 
// configuration of the active digital flat panel
//
//  0 - scaled
//  1 - centered
//  2 - native
// 
#define NV_CFG_FLAT_PANEL_CONFIG_16             30102

//
// NV_CFG_STEREO_CONFIG - Stereo support Config Parameters
//
//  The subcodes within this entry are NV reserved
//
#define NV_CFG_STEREO_CONFIG                    40000

//
// Parameter to ConfigUpdate.
//
#define NV_CFG_PERMANENT                        1
#define NV_CFG_TEMPORARY                        2


////////////////////////////////////////////////////////////////////
//
// The following Config equates are to be used with the ConfigGetEx()
// and ConfigSetEx() functions.  Rather than just taking a DWORD
// data value, they allow the use of a per-function data structure
// to be used as a parameter block.  
//
// Be careful to only use these equates with the appropriate
// functions.
//

//
// NV_CFGEX_GET_DESKTOP_POSITION_MONITOR - Return the monitor alignment
//
#define NV_CFGEX_GET_DESKTOP_POSITION_MONITOR              100
// Param Structure
typedef struct {
    unsigned long  GetDefault;
    unsigned long  HBlankStart;
    unsigned long  HBlankEnd;
    unsigned long  VBlankStart;
    unsigned long  VBlankEnd;
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
} NV_CFGEX_GET_DESKTOP_POSITION_MONITOR_PARAMS;

//
// NV_CFGEX_SET_DESKTOP_POSITION_MONITOR - Set the new monitor alignment
//
#define NV_CFGEX_SET_DESKTOP_POSITION_MONITOR               101
// Param Structure
typedef struct {
    unsigned long  CommitChanges;
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
} NV_CFGEX_SET_DESKTOP_POSITION_MONITOR_PARAMS;

/************** Desktop position for TV ***********/
#define NV_CFGEX_GET_DESKTOP_POSITION_TV                    102
#define NV_CFGEX_COMMIT_DESKTOP_POSITION_TV                 103

typedef struct {
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
    unsigned char  reg0x80;
    unsigned char  reg0x82;
    unsigned char  reg0x92;
    unsigned char  reg0x98;
    unsigned char  reg0x9A;
    unsigned char  reg0xC8;
    unsigned char  reg0xCA;
    unsigned char  reg0xCC;
} PARAMS_BROOKTREE;

// Register values for flicker filter. Chroma FF is 5:3, Lum FF is 2:0. Control Panel has 4 settings, other values result in OFF.
#define BT_FLICKER_HI   0    // Max FF
#define BT_FLICKER_MED  0x12
#define BT_FLICKER_LO   0x09
#define BT_FLICKER_OFF  0x1b // Place holder in CP.
#define BT_FLICKER_DEF  BT_FLICKER_MED // RM default
// Register values for Luma (Brightness)
#define BT_LUMA_MAX     0xC0  // No attenuation
#define BT_LUMA_DEF     0xC3  // RM default  
#define BT871_LUMA_DEF  0xC4  // RM default  
#define BT_LUMA_MIN     0xC7
// Register values for Chroma (Saturation)
#define BT_CHROMA_MAX   0xC0
#define BT_CHROMA_DEF   0xC2  // RM default
#define BT871_CHROMA_DEF 0xC1  // RM default
#define BT_CHROMA_MIN   0xC7

typedef struct {
    unsigned char  reg0x01; // Flicker Filter
    unsigned char  reg0x08; // overflow bits for V & H position
    unsigned char  reg0x0A; // Horizontal Position
    unsigned char  reg0x0B; // Vertical Position
    unsigned char  reg0x09; // Black Level (Brightness)
    unsigned char  reg0x11; // Contrast
} PARAMS_CHRONTEL;

// The way H2INC groks this exposes an internal error in ML 6.13
#ifndef H2INC
// Param Structure
typedef struct {
    unsigned long  Encoder_ID;  // NV_ENCODER_ type
    unsigned char  Default;     // get default setting if set, else get current
    union {
        PARAMS_BROOKTREE regsBt;
        PARAMS_CHRONTEL  regsCh;
    } u;     // NOTE: some compilers (eg: gcc) does not allow for anonymous sructs
} NV_CFGEX_DESKTOP_POSITION_TV_PARAMS;
#endif  // H2INC

/************** TV Encoder ***********************************/
#define NV_CFGEX_GET_TV_ENCODER_INFO                        104
// Param Structure
// EncoderType:
//      0 - None
//      1 - Chrontel 7003
//      2 - Brooktree 868
//      3 - Brooktree 869
//      All other values are reserved
// TVConnected:
//      0 - Not connected
//      1 - Connected
// EncoderID: I2C address of encoder
typedef struct {
    unsigned long  EncoderType;
    unsigned long  EncoderID;
    unsigned long  TVConnected;
} NV_CFGEX_TV_ENCODER_PARAMS;
#define TV_NOT_CONNECTED    0
#define TV_CONNECTED        1

#define NV_CFGEX_SET_TV_ENCODER_INFO                        105

/************** Flat Panel ***********************************/
#define NV_CFGEX_GET_FLAT_PANEL_INFO                        106
// Param structure
// FlatPanelMode:
//     0 - Not Connected
//     1 - Centered
//     2 - Native
//     3 - Scaled mode
// FlatPanelSizeX:
//     Max horizontal resolution.
// FlatPanelSizeY:
//     Max vertical resolution.
// FlatPanelNativeSupported
typedef struct {
    unsigned long FlatPanelMode;
    unsigned long FlatPanelSizeX;
    unsigned long FlatPanelSizeY;
    long          FlatPanelConnected;
    long          FlatPanelNativeSupported;
} NV_CFGEX_GET_FLATPANEL_INFO_PARAMS;

#define NV_CFGEX_GET_FLATPANEL_INFO_NOT_CONNECTED   0
#define NV_CFGEX_GET_FLATPANEL_INFO_CONNECTED       1
#define NV_CFGEX_GET_FLATPANEL_INFO_SCALED          0
#define NV_CFGEX_GET_FLATPANEL_INFO_CENTERED        1
#define NV_CFGEX_GET_FLATPANEL_INFO_NATIVE          2

#define NV_CFGEX_GET_FLATPANEL_INFO_SCALED_8BIT            0x1100
#define NV_CFGEX_GET_FLATPANEL_INFO_CENTERED_DITHER        0x1101
#define NV_CFGEX_GET_FLATPANEL_INFO_SCALED_ASPECT_CORRECT  0x1102

#define NV_CFGEX_SET_FLAT_PANEL_INFO                        107
#define NV_CFGEX_SET_FLAT_PANEL_SCALING                     109
// Param structure
typedef struct {
    unsigned long CommitChanges;
    unsigned long FlatPanelMode;
} NV_CFGEX_SET_FLATPANEL_INFO_PARAMS;

/************** Monitor **************************************/
#define NV_CFGEX_GET_MONITOR_INFO                           108
// Param structure
// MonitorConnected:
//      0 - Not Connected
//      1 - Connected
typedef struct {
    unsigned long MonitorConnected;
} NV_CFGEX_GET_MONITOR_INFO_PARAMS;

#define NV_CFGEX_GET_MONITOR_INFO_NOT_CONNECTED                0
#define NV_CFGEX_GET_MONITOR_INFO_CONNECTED                    1

/************** Get the current Windows refresh rate and state (real, default or optimal) **************/
#define NV_CFGEX_GET_REFRESH_INFO             111
// Param Structure
typedef struct {
    unsigned long  Head;
    unsigned long ulRefreshRate;
    unsigned long ulState;
} NV_CFGEX_GET_REFRESH_INFO_PARAMS;

// definitions of state flags
#define NV_CFG_REFRESH_FLAG_SPECIFIC          0x00000000 /* use specific value contained in ulRefreshRate */
#define NV_CFG_REFRESH_FLAG_ADAPTER_DEFAULT   0x00000001 /* Windows is using "Adapter Default" setting    */
#define NV_CFG_REFRESH_FLAG_OPTIMAL           0x00000002 /* Windows is using "Optimal" setting            */

/************** Multihead CFGEX_SET **************/

#define NV_CFGEX_SET_DESKTOP_POSITION_MONITOR_MULTI        112
// Param Structure
typedef struct {
    unsigned long  Head;
    unsigned long  CommitChanges;
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
} NV_CFGEX_SET_DESKTOP_POSITION_MONITOR_MULTI_PARAMS;

#define NV_CFGEX_SET_FLAT_PANEL_INFO_MULTI                  113
// Param structure
typedef struct {
    unsigned long Head;
    unsigned long CommitChanges;
    unsigned long FlatPanelMode;
} NV_CFGEX_SET_FLATPANEL_INFO_MULTI_PARAMS;

// The way H2INC groks this exposes an internal error in ML 6.13
#ifndef H2INC
#define NV_CFGEX_COMMIT_DESKTOP_POSITION_TV_MULTI           114
// Param Structure
typedef struct {
    unsigned long  Head;
    unsigned long  Encoder_ID;  // NV_ENCODER_ type
    unsigned char  Default;     // get default setting if set, else get current
    union {
        PARAMS_BROOKTREE regsBt;
        PARAMS_CHRONTEL  regsCh;
    } u;     // NOTE: some compilers (eg: gcc) does not allow for anonymous sructs
} NV_CFGEX_DESKTOP_POSITION_TV_MULTI_PARAMS;

#define NV_CFGEX_GET_DESKTOP_POSITION_TV_MULTI              115

#define NV_CFGEX_GET_DESKTOP_POSITION_MONITOR_MULTI         116
// Param Structure
typedef struct {
    unsigned long  Head;
    unsigned long  GetDefault;
    unsigned long  HBlankStart;
    unsigned long  HBlankEnd;
    unsigned long  VBlankStart;
    unsigned long  VBlankEnd;
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
} NV_CFGEX_GET_DESKTOP_POSITION_MONITOR_MULTI_PARAMS;

// NV_CFGEX_SET_DESKTOP_POSITION_MULTI -- Control the position of the screen on the display device.
// A later interface than the head-based (or single head) interface.
// The control is generalized to move one increment in either (or both) axis. There is no need to get the
// position or to deal with specific register values; the default may be specified, or the last committed
// position may be specifed.
// Up to eight display devices of each type (CRT or TV) can be specifed.
#define NV_CFGEX_SET_DESKTOP_POSITION_MULTI                 117
// Param Structure
typedef struct {
    unsigned long  DeviceMap;   // bits 0..7 represent CRT0..CRT7; bits 8..15 represent TV0..TV7
    unsigned long  Position;    // bits 0..3 represent position; 
                                // bit 4 specifies default; 
                                // bit 5 specifies last committed position
                                // bit 6 specifies committing the position to the registry
} NV_CFGEX_SET_DESKTOP_POSITION_MULTI_PARAMS;

// Position bit defs for NV_CFGEX_SET_DESKTOP_POSITION_MULTI
// If bit is set, move one increment vertical and/or horizontal
#define POS_UP       1
#define POS_DOWN     2
#define POS_RIGHT    4
#define POS_LEFT     8
#define POS_DEFAULT 0x10
#define POS_CANCEL  0x20
#define POS_COMMIT  0x40

#endif // H2INC

#define NV_CFGEX_GET_AGP_CONFIGURATION                      137
#define NV_CFGEX_GET_AGP_CONFIGURATION_UNKNOWN_ID    0xFFFF
// Param Structure
typedef struct {
    union {
        struct NB_Status_Fields {
            unsigned char AGP_Rate:          3;
            unsigned char reserved0:         1;
            unsigned char AGP_FastWrites:    1;
            unsigned char AGP_4G:            1;
            unsigned char reserved1:         2;
            unsigned char reserved2:         1;
            unsigned char AGP_SideBand:      1;
            unsigned char reserved3:         6;
            unsigned char reserved4;
            unsigned char AGP_RequestDepth;
        };
        unsigned long  As_ULong;
    } u_NB_Status;
    union {
        struct NB_Command_Fields {
            unsigned char AGP_Rate:          3;
            unsigned char reserved0:         1;
            unsigned char AGP_FastWrites:    1;
            unsigned char AGP_4G:            1;
            unsigned char reserved1:         2;
            unsigned char AGP_Enable:        1;
            unsigned char AGP_SideBand:      1;
            unsigned char reserved2:         6;
            unsigned char reserved3:         8;
            unsigned char reserved4:         8;
        };
        unsigned long  As_ULong;
    } u_NB_Command;
    union {
        struct NV_Status_Fields {
            unsigned char AGP_Rate:          3;
            unsigned char reserved0:         1;
            unsigned char AGP_FastWrites:    1;
            unsigned char AGP_4G:            1;
            unsigned char reserved1:         2;
            unsigned char reserved2:         1;
            unsigned char AGP_SideBand:      1;
            unsigned char reserved3:         6;
            unsigned char reserved4;
            unsigned char AGP_RequestDepth;
        };
        unsigned long  As_ULong;
    } u_NV_Status;
    union {
        struct NV_Command_Fields {
            unsigned char AGP_Rate:          3;
            unsigned char reserved0:         1;
            unsigned char AGP_FastWrites:    1;
            unsigned char AGP_4G:            1;
            unsigned char reserved1:         2;
            unsigned char AGP_Enable:        1;
            unsigned char AGP_SideBand:      1;
            unsigned char reserved2:         6;
            unsigned char reserved3;
            unsigned char AGP_RequestDepth;
        };
        unsigned long  As_ULong;
    } u_NV_Command;
    unsigned short NB_VendorID;
    unsigned short NB_DeviceID;
} NV_CFGEX_GET_AGP_CONFIGURATION_PARAMS;


/************** Get the offset within the AGP aperture (can't just subtract from linearbase anymore) ***/
#define NV_CFGEX_GET_AGP_OFFSET                 138
// Param Structure
typedef struct {
    void* linaddr;                      // passed in linear address, returned from a AGP space alloc
    void* physaddr;                     // returned physical address
    unsigned long offset;               // returned offset within the AGP aperture
} NV_CFGEX_GET_AGP_OFFSET_PARAMS;

/************** Return/Set the current linear GART address (64 bit clean version of NV_CFG_AGP_LINEAR_BASE above) ***/
#define NV_CFGEX_AGP_LINEAR_BASE                139
// Param Structure
typedef struct {
    void* linaddr;                      // passed in/returned linear address
} NV_CFGEX_AGP_LINEAR_BASE_PARAMS;

/************** Get the Display Type **************/
#define NV_CFGEX_GET_DISPLAY_TYPE               140
// Param Structure
typedef struct {
    unsigned long Type;
    unsigned long TVType;
} NV_CFGEX_GET_DISPLAY_TYPE_PARAMS;

// definitions of Display Types
#define DISPLAY_TYPE_MONITOR            0
#define DISPLAY_TYPE_TV                 1
#define DISPLAY_TYPE_DUALSURFACE        2
#define DISPLAY_TYPE_FLAT_PANEL         3
// definitions of TV types: see NV_CFG_VIDEO_TV_FORMAT

/************** Set the Display Type **************/
#define NV_CFGEX_SET_DISPLAY_TYPE               141
// Param Structure
typedef struct {
    unsigned long Type;
    unsigned long TVType;
} NV_CFGEX_SET_DISPLAY_TYPE_PARAMS;


/************** Get the Display Type for Specified Head **************/
#define NV_CFGEX_GET_DISPLAY_TYPE_MULTI         142
// Param Structure
typedef struct {
    unsigned long Head;
    unsigned long Type;
    unsigned long TVType;
} NV_CFGEX_GET_DISPLAY_TYPE_MULTI_PARAMS;

/************** Get the Display Type of the Specified Head **************/
#define NV_CFGEX_SET_DISPLAY_TYPE_MULTI         143
// Param Structure
typedef struct {
    unsigned long Head;
    unsigned long Type;
    unsigned long TVType;
} NV_CFGEX_SET_DISPLAY_TYPE_MULTI_PARAMS;

/************** Get the Raster Postion for the Specified Head ***********/
#define NV_CFGEX_CURRENT_SCANLINE_MULTI         144
// Param Structure
typedef struct {
    unsigned long Head;
    unsigned long RasterPosition;
} NV_CFGEX_CURRENT_SCANLINE_MULTI_PARAMS;

/************** CRTC Timing ***********/
#define NV_CFGEX_CRTC_TIMING_MULTI              145
// Param Structure
typedef struct {
    unsigned long  Head;
    unsigned long  Reg;                     // data location, see below
    unsigned long  HTotal;
    unsigned long  HDisplayEnd;
    unsigned long  HBlankStart;
    unsigned long  HBlankEnd;
    unsigned long  HRetraceStart;
    unsigned long  HRetraceEnd;
    unsigned long  VTotal;
    unsigned long  VDisplayEnd;
    unsigned long  VBlankStart;
    unsigned long  VBlankEnd;
    unsigned long  VRetraceStart;
    unsigned long  VRetraceEnd;
} NV_CFGEX_CRTC_TIMING_PARAMS;
#define NV_CFGEX_CRTC_PARAMS    14          // number of 32 bit values (HTotal - VRetraceEnd) 
#define NV_CFGEX_CRTC_TIMING_REGISTER 1     // get/set CRTC registers
#define NV_CFGEX_CRTC_TIMING_REGISTRY 2     // get/set Windows registry
#define NV_CFGEX_CRTC_TIMING_DEFAULT  4     // get default registers (set not valid)

/** Return the linear address of (BAR0) of this device (64 bit clean version) */
#define NV_CFGEX_ADDRESS_NVADDR                 146
// Param Structure
typedef struct {
    void* nvaddr;
} NV_CFGEX_ADDRESS_NVADDR_PARAMS;

/************** Get the VBlank Counter for the Specified Head ***********/
#define NV_CFGEX_VBLANK_COUNTER_MULTI           147
// Param Structure
typedef struct {
    unsigned long Head;
    unsigned long VBlankCounter;
} NV_CFGEX_VBLANK_COUNTER_MULTI_PARAMS;

/************** Get VBlank enabled status for specified head ************/
#define NV_CFGEX_VBLANK_ENABLED                 148
// Param Structure
typedef struct {
    unsigned long Head;
    unsigned long Enabled;
} NV_CFGEX_VBLANK_ENABLED_PARAMS;

/************** RESERVED **************/
#define NV_CFGEX_RESERVED                       150

/************** Enable tiling ********************************/
#define NV_CFGEX_ENABLE_TETRIS_TILING                       200

/************** Disable tiling *******************************/
#define NV_CFGEX_DISABLE_TETRIS_TILING                      201

/************** Get the monitor EDID *************************/
#define NV_CFGEX_GET_EDID                                   210
// param structure
typedef struct {
    unsigned char *edidBuffer;
    unsigned long *bufferLength;  // in/out
    unsigned long displayType;  // see NV_CFGEX_GET_DISPLAY_TYPE for legal values
} NV_CFGEX_GET_EDID_PARAMS;

/************** Get the current device BIOS ******************/
#define NV_CFGEX_GET_BIOS                                   215
// param structure
typedef struct {
    unsigned char *biosBuffer;
    unsigned long *bufferLength;  // in/out
} NV_CFGEX_GET_BIOS_PARAMS;

//
//  New versions of ConfigGetEx for multi-head devices
//

//
// NV_CFG_DAC_PCLK_LIMIT_8BPP - Return the current 8bpp graphics clock limit (in Hz) for specified head on this device 
//
#define NV_CFGEX_DAC_PCLK_LIMIT_8BPP            264
typedef struct {
    unsigned long Head;
    unsigned long pclkLimit;
} NV_CFGEX_DAC_PCLK_LIMIT_PARAMS;

//
// NV_CFG_DAC_PCLK_LIMIT_16BPP - Return the current 16bpp graphics clock limit (in Hz) for specified head on this device
//
#define NV_CFGEX_DAC_PCLK_LIMIT_16BPP           265

//
// NV_CFG_DAC_PCLK_LIMIT_32BPP - Return the current 16bpp graphics clock limit (in Hz) for specified head onthis device
//
#define NV_CFGEX_DAC_PCLK_LIMIT_32BPP           266

//
// NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST - Return the pre-dac NV11 color saturation boost value
//
#define NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST  268
typedef struct {
    unsigned long Head;
    unsigned char boostValue;
} NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST_PARAMS;

#define NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST_0          0x00000000
#define NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST_188        0x00000001
#define NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST_375        0x00000002
#define NV_CFGEX_PREDAC_COLOR_SATURATION_BOOST_750        0x00000003

// Another get info for a specified head
#define NV_CFGEX_GET_TV_ENCODER_INFO_MULTI      270
typedef struct {
    unsigned long  Head;
    unsigned long  EncoderType;
    unsigned long  EncoderID;
    unsigned long  TVConnected;
} NV_CFGEX_GET_TV_ENCODER_MULTI_PARAMS;

// Another get info for a specified head
#define NV_CFGEX_GET_FLAT_PANEL_INFO_MULTI       271
// Param structure
// FlatPanelMode:
//     0 - Not Connected
//     1 - Centered
//     2 - Native
//     3 - Scaled mode
// FlatPanelSizeX:
//     Max horizontal resolution.
// FlatPanelSizeY:
//     Max vertical resolution.
// FlatPanelNativeSupported
typedef struct {
    unsigned long Head;
    unsigned long FlatPanelMode;
    unsigned long FlatPanelSizeX;
    unsigned long FlatPanelSizeY;
    long          FlatPanelConnected;
    long          FlatPanelNativeSupported;
} NV_CFGEX_GET_FLATPANEL_INFO_MULTI_PARAMS;

// Return TV encoder type on specified head
#define NV_CFGEX_VIDEO_ENCODER_TYPE             272
typedef struct {
    unsigned long Head;
    unsigned long EncoderType;
} NV_CFGEX_VIDEO_ENCODER_TYPE_PARAMS;

// Return TV encoder ID on specified head
#define NV_CFGEX_VIDEO_ENCODER_ID               273
typedef struct {
    unsigned long Head;
    unsigned long EncoderID;
} NV_CFGEX_VIDEO_ENCODER_ID_PARAMS;

#define NV_CFGEX_GET_EDID_MULTI                 274
// param structure
typedef struct {
    unsigned char *edidBuffer;
    unsigned long *bufferLength;  // in/out
    unsigned long Head;
    unsigned long displayType;  // see NV_CFGEX_GET_DISPLAY_TYPE for legal values
} NV_CFGEX_GET_EDID_MULTI_PARAMS;

#define NV_CFGEX_GET_MONITOR_INFO_MULTI         275
// Param structure
// MonitorConnected:
//      0 - Not Connected
//      1 - Connected
typedef struct {
    unsigned long Head;
    unsigned long MonitorConnected;
} NV_CFGEX_GET_MONITOR_INFO_MULTI_PARAMS;

#define NV_CFGEX_SYNC_STATE                     276
// Param structure
//     set/get the state of HSYNC and VSYNC
typedef struct {
    unsigned long Head;
    unsigned long Hsync;              // non-zero to enable
    unsigned long Vsync;              // non-zero to enable
    unsigned long oldHsync;           // on SETEX, what was previous value
    unsigned long oldVsync;           // ""
} NV_CFGEX_SYNC_STATE_PARAMS;

#define NV_CFGEX_PRIMARY_INFO                    277
// Param structure
//     get the state of the primary surface for the given head
typedef struct {
    unsigned long Head;               // input param; 0 or 1
    unsigned long Pitch;              // output
    unsigned long Offset;             // output; byte offset from beginning of FB
} NV_CFGEX_PRIMARY_INFO_PARAMS;

#define NV_CFGEX_FLAT_PANEL_BRIGHTNESS		278
//param structure
//   -this structure is used for setting and getting the settings of the PWM brightness output.
//   -when the getex command is called for this structure, the only two valid values on return will
//    be PWMControllerEnable and PercentRelativeBrightness. 
typedef struct
{
	unsigned long Head;
    unsigned long FlatPanelBrightnessControlFrequency;
    unsigned long PercentMaximumPWMDutyCycle;
    unsigned long PercentMinimumPWMDutyCycle;
    unsigned long PercentRelativeBrightness;
    signed long PWMControllerEnable;
    signed long InverterCurrentMode;
} NV_CFGEX_FLATPANEL_BRIGHTNESS_PARAMS;

/************** Power Mizer Level Get / Set *******************/ 
// NV_CFGEX_POWER_MIZER - Read or write the runtime power saving level
//   (Intended for laptops, dynamically lowers NVClk and/or MClk.  There is
//   a 'normal' and an 'idle' level for each, the we switch to the idle level
//   when no 3D work is pending)
// Level   2D nvclk - mclk                 3D nvclk - mclk
//  0 - full        - full              full        - full
//  1 - IdleNVClk   - full              full        - full
//  2 - IdleNVClk   - IdleMClkDivide    IdleNVClk   - full
//  3 - IdleNVClk/2 - IdleMClkDivide    IdleNVClk   - IdleMClkDivide
//  4 - IdleNVClk/2 - IdleMClkDivide/2  IdleNVClk/2 - IdleMClkDivide/2
//
// When used with ConfigGetEx, Default returns the system default setting for
// use when a user requests [Restore to Defaults]. Current returns the
// the systems current value.
//
// When used with ConfigSetEx, Default is ignored, and Current is used
// to set the current system value which is also cached in the system
// registry for preservation across reboots.
#define NV_CFGEX_POWER_MIZER                280
typedef struct {
    unsigned long Default;
    unsigned long Current;
} NV_CFGEX_POWER_MIZER_PARAMS;


/************** Return Pitch given Width/Depth ***************/
#define NV_CFGEX_GET_SURFACE_PITCH                          300
// Param structure
typedef struct {
    unsigned long Width;          // in (pixels)
    unsigned long Depth;          // in (bits per pixel)
    unsigned long Pitch;          // out
} NV_CFGEX_GET_SURFACE_PITCH_PARAMS;

/************** Return Pitch/Size given Width/Height/Depth ***/
#define NV_CFGEX_GET_SURFACE_DIMENSIONS                     301
// Param structure
typedef struct {
    unsigned long Width;          // in (pixels)
    unsigned long Height;         // in (pixels)
    unsigned long Depth;          // in (bits per pixel)
    unsigned long Pitch;          // out
    unsigned long Size;           // out
} NV_CFGEX_GET_SURFACE_DIMENSIONS_PARAMS;

/************** Return Supported Classes for a given NV chip */
#define NV_CFGEX_GET_SUPPORTED_CLASSES                      310
//
// Pass in a NULL classBuffer pointer to have the RM fill in the numClasses field.
// This is the number of dword entries that should be allocated by the caller for
// the classBuffer.
//
// Then, make this call again with the filled in classBuffer and the RM will verify
// the numClasses is large enough and fill in classBuffer with the supported class
// numbers.
//
// Param structure
typedef struct {
    unsigned long  numClasses;    // number of supported classes
    unsigned long *classBuffer;   // dword buffer holding supported class values
} NV_CFGEX_GET_SUPPORTED_CLASSES_PARAMS;

/************** Return RM mappings to device's regs/fb *******/
#define NV_CFGEX_GET_DEVICE_MAPPINGS                        311
//
// This call is used by NVDE debugger to retrieve the RM's
// (linear) mappings to a given device's registers and framebuffer.
//
// Param structure
typedef struct {
    void *nvVirtAddr;               // register virtual address
    void *nvPhysAddr;               // register physical address
    void *fbVirtAddr;               // fb virtual address
    void *fbPhysAddr;               // fb physical address
} NV_CFGEX_GET_DEVICE_MAPPINGS_PARAMS;

/************** Set/Get Macrovision Mode *************************/
#define NV_CFGEX_GET_MACROVISION_MODE                       319
#define NV_CFGEX_SET_MACROVISION_MODE                       320
typedef struct {
    unsigned long   head;
    unsigned long   mode;
    unsigned long   resx;
    unsigned long   resy;
    unsigned long   status;
} NV_CFGEX_SET_MACROVISION_MODE_PARAMS;

typedef struct {
    unsigned long   head;
    unsigned long   mode;
    unsigned long   resx;
    unsigned long   resy;
    unsigned long   devAddr;        // device's I2C address
    unsigned long   port;           // I2C port (primary or secondary)
    unsigned long   encoderType;    // Brooktree 868, Chrontel 7003, etc...
    unsigned long   tvStandard;     // NTSC or PAL flavors
    unsigned long   status;
} NV_CFGEX_GET_MACROVISION_MODE_PARAMS;

//
// NV_CFGEX_CHECK_CONNECTED_DEVICES - Return connect status of the specified
//  devices.
// Input: a bitmask that is a subset of the bitmask returned by the
//          NV_CFG_GET_ALL_DEVICES call.  set bits indicate the calling routine
//          want to check the connect status of the corresponding devices.
// Output: set bits in the bitmask indicating the corresponding devices are
//          connected.
//
// bits 0..7 represent CRT0..CRT7
// bits 8..15 represent TV0..TV7
// bits 16..23 represent DD0..DD7
// bits 24..31 are reserved
//
#define NV_CFGEX_CHECK_CONNECTED_DEVICES        321

//
// NV_CFGEX_GET_DEVICES_CONFIGURATION - Return possible configuration for the
//  specified devices.  Pass in OldDevicesConfig and OldDevicesAllocationMap
//  if you want the routine to try to keep existing attached devices on the
//  same heads whenever possible.  Pass in zero for OldDevicesConfig otherwise.
//  
// Input: DevicesConfig - a bitmask that is a subset of the bitmask returned
//              by the NV_CFGEX_CHECK_CONNECTED_DEVICES call. set bits indicate
//              devices to be in the configuration. up to eight bits can be set.
//        OldDevicesConfig - DevicesConfig used from the last call to
//              NV_CFGEX_GET_DEVICES_CONFIGURATION.
//        OldDevicesAllocationMap - DevicesAllocationMap returned by the last
//              call to NV_CFGEX_GET_DEVICES_CONFIGURATION.
// Output: DevicesAllocationMap - a 32-bit value in the following format:
//          nibble0 - head that can be used to connect to device0 (device
//                      corresponds to the rightmost set bit.
//          nibble1 - head that can be used to connect to device1 (device
//                      corresponds to the second rightmost set bit.
//          .
//          .
//
// bits 0..7 represent CRT0..CRT7
// bits 8..15 represent TV0..TV7
// bits 16..23 represent DD0..DD7
// bits 24..31 are reserved
//
typedef struct {
    unsigned long  DevicesConfig;
    unsigned long  DevicesAllocationMap;
    unsigned long  OldDevicesConfig;
    unsigned long  OldDevicesAllocationMap;
} NV_CFGEX_GET_DEVICES_CONFIGURATION_PARAMS;
#define NV_CFGEX_GET_DEVICES_CONFIGURATION      322

// NV_CFGEX_GET_VIDEO_TV_STANDARD - Return the TV standard for the specified TV encoder.
// Input: Device bitmap corresponding to the DevicesAllocationMap in NV_CFGEX_GET_DEVICES_CONFIGURATION and NV_CFGEX_CHECK_CONNECTED_DEVICES.
//      (Only bits 8..15 are valid, bits 8..15 represent encoders 0..7.)
// Output: Dword containing the TV standard for the specified encoder. TV standards are defined as in NV_GET_CFG_VIDEO_TV_FORMAT.
//      (Only bits 0..3 are valid.)
typedef struct {
    unsigned long DevicesConfig;    // input
    unsigned long TVStandard;       // output
} NV_CFGEX_GET_VIDEO_TV_STANDARD_PARAMS;
#define NV_CFGEX_GET_VIDEO_TV_STANDARD          323
#define TV_ENCODER_0    0x000100
#define TV_ENCODER_7    0x008000

// NV_CFGEX_SET_VIDEO_TV_STANDARD - Set the TV standard for the specified TV encoder.
// Input: Device bitmap corresponding to the DevicesAllocationMap in NV_CFGEX_GET_DEVICES_CONFIGURATION and NV_CFGEX_CHECK_CONNECTED_DEVICES.
//      (Only bits 8..15 are valid, bits 8..15 represent encoders 0..7.)
//      TV Standard to use for the specified encoder.
// Output: none
typedef struct {
    unsigned long DevicesConfig;    // input
    unsigned long TVStandard;       // input
} NV_CFGEX_SET_VIDEO_TV_STANDARD_PARAMS;
#define NV_CFGEX_SET_VIDEO_TV_STANDARD          324

//
// NV_CFGEX_DISPLAY_CHANGE_START - Notify the system that a display change is about to begin
//
//  This call must be paired with a CHANGE_END call in order to keep the
//  notification balanced.
//
//  Input:  NewDevices - bitmask of devices that arae planned on being enabled with the
//              pending device change.  See NV_CFGEX_GET_DEVICES_CONFIGURATION for bit defs.
//          Properties - bitmask of display attributes for new configuration (none used at the moment)
//  Output: none
//
#define NV_CFGEX_DISPLAY_CHANGE_SPANNING    0x00000001  //active devices are displaying different images
//#define NV_CFGEX_DISPLAY_CHANGE_EXTENDED    0x00000002  //extended desktop (larger than viewable area)
#define NV_CFGEX_DISPLAY_CHANGE_BRACKETS_MODESET    0x80000000  // bit31 in NewDevices, indicates brackets the modeset

typedef struct {
    unsigned long NewDevices;
    unsigned long Properties;
} NV_CFGEX_DISPLAY_CHANGE_START_PARAMS;
#define NV_CFGEX_DISPLAY_CHANGE_START                    328

//
// NV_CFGEX_DISPLAY_CHANGE_END - Notify the system that a display change is now complete
//
//  This call must be paired with a NV_CFGEX_DISPLAY_CHANGE_START call in order to keep the
//  notification balanced.
//
//  The passed parameters are identical to NV_CFGEX_DISPLAY_CHANGE_START.
//
typedef struct {
    unsigned long NewDevices;
    unsigned long Properties;
} NV_CFGEX_DISPLAY_CHANGE_END_PARAMS;
#define NV_CFGEX_DISPLAY_CHANGE_END                      329



// NV_CFGEX_GET_HOTKEY_EVENT - Report Fn+x hotkey events on a mobile system.
//  Some events are informational -- the BIOS has already acted on the event.
//  Other events indicate an action that must be taken care of by the driver.
//  Currently, only the display enable/disable events fall into this category.
//
// The RM checks the BIOS for new events every vblank.  Note that more than one
//  event may be added to the queue at a time (e.g., display enable/disable events
//  will often occur in sets).  The caller should continue to poll until the
//  call returns NV_HOTKEY_EVENT_NONE_PENDING.
//
// If the BIOS does not support this feature, the RM will return NV_HOTKEY_EVENT_NOT_SUPPORTED.
// 
// Input: a pointer to a NV_CFGEX_GET_HOTKEY_EVENT_PARAMS paramStruct
// Output: the event field will report a number from the event list below
//         the status field, where appropriate, indicates the new state the event is reporting
//
#define NV_CFGEX_GET_HOTKEY_EVENT                            330

//Queue Commands
#define NV_HOTKEY_EVENT_NOT_SUPPORTED        0  //No BIOS hotkey support.  Further polling not required.
#define NV_HOTKEY_EVENT_NONE_PENDING         1  //No hotkey events currently pending
#define NV_HOTKEY_EVENT_DISPLAY_ENABLE       2  //status bits decode to disable/enable state for
                                                // each display (definitions below) (implemented by driver)
//#define NV_HOTKEY_EVENT_DISPLAY_LCD          2  //status 0/1 = disable/enable (implemented by driver)
//#define NV_HOTKEY_EVENT_DISPLAY_CRT          3  //status 0/1 = disable/enable (implemented by driver)
//#define NV_HOTKEY_EVENT_DISPLAY_TV           4  //status 0/1 = disable/enable (implemented by driver)
//#define NV_HOTKEY_EVENT_DISPLAY_DFP          5  //status 0/1 = disable/enable (implemented by driver)
#define NV_HOTKEY_EVENT_DISPLAY_CENTERING    6  //scaled/centered display - status values define below (implemented by BIOS)
                                                // mirrors settings for NV_PRAMDAC_FP_TG_CONTROL_MODE in nv_ref.h

// Status bit definitions for NV_HOTKEY_EVENT_DISPLAY_ENABLE event
// Currently identical to the BIOS register bit definitions, but
// we decode it explicitly to avoid implicit dependencies.
#define NV_HOTKEY_STATUS_DISPLAY_ENABLE_LCD 0x01
#define NV_HOTKEY_STATUS_DISPLAY_ENABLE_CRT 0x02
#define NV_HOTKEY_STATUS_DISPLAY_ENABLE_TV  0x04
#define NV_HOTKEY_STATUS_DISPLAY_ENABLE_DFP 0x08

//Enumeration of centering/scaling settings used with
// NV_HOTKEY_EVENT_DISPLAY_CENTERING event
#define NV_HOTKEY_STATUS_DISPLAY_SCALED     0x00
#define NV_HOTKEY_STATUS_DISPLAY_CENTERED   0x01
#define NV_HOTKEY_STATUS_DISPLAY_NATIVE     0x02

typedef struct {
    unsigned long event;
    unsigned long status;
} NV_CFGEX_GET_HOTKEY_EVENT_PARAMS;


#define NV_CFGEX_GET_LOGICAL_DEV_EDID                331 
// param structure
typedef struct {
    unsigned char *edidBuffer;
    unsigned long *bufferLength;  // in/out
    unsigned long displayMap;
} NV_CFGEX_GET_LOGICAL_DEV_EDID_PARAMS;

#ifndef H2INC

/************** Return Supported Classes for a given NV chip */
#define NV_CFGEX_GET_SUPPORTED_CLASSES64             332
//
// Pass in a NULL classBuffer pointer to have the RM fill in the numClasses field.
// This is the number of dword entries that should be allocated by the caller for
// the classBuffer.
//
// Then, make this call again with the filled in classBuffer and the RM will verify
// the numClasses is large enough and fill in classBuffer with the supported class
// numbers.
//
// This is a 32/64 bit neutral form of NV_CFGEX_GET_SUPPORTED_CLASSES that
// will eventually supercede it but currently using this across the
// board mysteriously causes screen corruption when running a D3D app.
//
// Param structure
typedef struct {
    NvU32 numClasses;           // number of supported classes
    NvP64 classBuffer;          // dword buffer holding supported class values
} NV_CFGEX_GET_SUPPORTED_CLASSES64_PARAMS;

#endif // !H2INC

/***************** Get DAC CRC values *****************/
#define NV_CFGEX_GET_DAC_CRC_VALUES                 333
typedef struct {
    unsigned long Head;         // in
    unsigned long RedCrc;       // out
    unsigned long GreenCrc;     // out
    unsigned long BlueCrc;      // out
} NV_CFGEX_GET_DAC_CRC_VALUES_PARAMS;

#define NV_CFGEX_GET_LOGICAL_DEV_EDID_BLOCK         334
//param structure
typedef struct
{
    unsigned long Head;
    unsigned long DisplayType;
    unsigned short ByteAddress;
    unsigned char * EdidBuffer; //will contain the output of the command
} NV_CFGEX_GET_LOGICAL_DEV_EDID_BLOCK_PARAMS;

// NV_CFGEX_VALIDATE_BANDWIDTH - 
// Validate whether a particular resolution setting is within the
// bandwidth capabilities of the hardware.  Currently, VidScalerHead
// is ignored and the fn is only implemented for NV11 (automaticall
// returns success for other cards).
#define NV_CFGEX_VALIDATE_BANDWIDTH                 335

#define NV_CFGEX_VALIDATE_BANDWIDTH_SCALER_WORST_CASE  0    //Recommended -- RM picks worst case head.
#define NV_CFGEX_VALIDATE_BANDWIDTH_SCALER_ON_HEAD0    1    // scaler will be used only on head 0
#define NV_CFGEX_VALIDATE_BANDWIDTH_SCALER_ON_HEAD1    2    // scaler will be used only on head 1
#define NV_CFGEX_VALIDATE_BANDWIDTH_SCALER_OFF         3    //Note this may mean a resolution may
                                                            // be okayed which will not permit a video scaler
typedef struct {
    unsigned long VidScalerHead;   //See enum list above
    unsigned long HeadActive0;
    unsigned long HeadActive1;

    unsigned long TotalWidth0;
    unsigned long VisibleWidth0;
    unsigned long TotalHeight0;
    unsigned long VisibleHeight0;
    unsigned long PixelDepth0;
    unsigned long PixelClock0;
//    unsigned long RefreshRate0;

    unsigned long TotalWidth1;
    unsigned long VisibleWidth1;
    unsigned long TotalHeight1;
    unsigned long VisibleHeight1;
    unsigned long PixelDepth1;
    unsigned long PixelClock1;
//    unsigned long RefreshRate1;
//    unsigned long status;
} NV_CFGEX_VALIDATE_BANDWIDTH_PARAMS;


/************** Map pointer to user space ********************/
#define NV_CFGEX_MAP_USER_SPACE                             340
typedef struct {
    void           *kAddr; // in : kernel mode address
    unsigned long   mSize; // in : size of mapping
    void           *uAddr; // out: user mode address
    void          **ppMDL; // out: address of pointer to MDL
} NV_CFGEX_MAP_USER_SPACE_PARAMS;

/************** Map pointer to user space ********************/
#define NV_CFGEX_UNMAP_USER_SPACE                           341
typedef struct {
    void           *uAddr; // in: user mode address
    void           *pMDL;  // in: pointer to MDL
} NV_CFGEX_UNMAP_USER_SPACE_PARAMS;
/************** Get PAT and MTRR info ************************/
#define NV_CFGEX_MEM_INFO                                   342
typedef struct {
    unsigned long uPATHigh;
    unsigned long uPATLow;
    unsigned long uMTRRphysBaseHigh[8];
    unsigned long uMTRRphysBaseLow[8];
    unsigned long uMTRRphysMaskHigh[8];
    unsigned long uMTRRphysMaskLow[8];
} NV_CFGEX_MEM_INFO_PARAMS;

/************** Dynamically Load Executable Code *************/ 
#define NV_CFGEX_DLOAD_MODULE                               350
typedef struct
{
	NvP64         MappedModule;
	NvU32         ModuleSize;
} NV_CFGEX_DLOAD_MODULE_PARAMS;



//Reports the results of a query to the SBIOS (via an int10h to our VBIOS).
// The query reports supported special power-saving refresh rates for the
// built-in flat panel. Queried by IBM mobile DLL to then set the FP
// to one of those refresh rates.  Refresh rates reported in Hz.
#define NV_CFGEX_LOW_FP_REFRESH_RATES            360
//param structure
typedef struct
{
    unsigned long fpDefaultHz;
    unsigned long fpLowHz1;
    unsigned long fpLowHz2;
} NV_CFGEX_LOW_FP_REFRESH_RATES_PARAMS;


#pragma pack()

// NvRmOsConfigSet/Get parameters
//
// definitions for OS-specific versions of the config get/set calls.
//   When possible, new config calls should be added to the standard
//   config calls instead of here.
//

// NV_OSCFG_VSL_MODE - Return/Set the passing of VSL to the display manager
//
//  Initial value is 1
// 

#define NV_OSCFG_VSL_MODE                        0x0001


////////////////////////////////////////////////////////////////////
//
// NvRmOsConfigSetEx/GetEx parameters
//
//

//
// Get info about the cards in the system
//
typedef struct
{
    int    flags;               // see below
    int    instance;            // resman's ordinal for the card
    int    bus;                 // bus number (PCI, AGP, etc)
    int    slot;                // card slot
    int    vendor_id;           // PCI vendor id
    int    device_id;
    int    interrupt_line;
} NVCARDINFO, *PNVCARDINFO;

#define NV_CARD_INFO_FLAG_PRESENT       0x0001

#define NV_OSCFGEX_GET_CARD_INFO           100

typedef struct {
    unsigned long NumCards;                // input size of buffer; output # cards
    PNVCARDINFO   pCardInfo;
} NV_OSCFGEX_GET_CARD_INFO_PARAMS;


//---------------------------------------------------------------------------
//
//  Configuration Manager API.
//
//---------------------------------------------------------------------------
//
//
// DWORD NvConfigVersion(VOID)
//
//  Returns the revision of the ddk (config) interface built into the resource manager.
//  This is used for version continuity between all the resource manager files,
//  as well as provides the interface version for people using the config interface.
//
//  The format of this is 0xAAAABBCC, where
//   - 0xAAAA is [nvidia internal]
//   -   0xBB is the software release revision
//   -   0xCC is the minor revision
//
//
// DWORD NvConfigGet(DWORD Index, DWORD DeviceHandle)
//
//  Given an Index from NVCM.H and a pointer to a specific device (see SDK), return
//  the current configuration value.  The format of the value is dependent on the
//  index requested.
//
//
// DWORD NvConfigSet(DWORD Index, DWORD NewValue, DWORD DeviceHandle)
//
//  Given an Index from NVCM.H, a pointer to a specific device (see SDK), and a new
//  value, update the current configuration value.  This call returns the original
//  value in that configuration index.  In general, most new values do not take affect
//  until NvConfigUpdate() is called.  This allows multiple values to be batched
//  together before enabling the change.
//
//
// DWORD NvConfigUpdate(DWORD UpdateFlag, DWORD DeviceHandle)
//
//  Given an update flag and pointer to a specific device (see SDK), perform any previously
//  batched NvConfigSet() calls.  This call returns an error code (0 denotes success).
//  The only UpdateFlag currently in use is NV_CFG_PERMANENT.
//

#ifndef _WIN32
#if defined(__GNUC__) || defined(MACOS)
int NvConfigVersion(int);
int NvConfigGet(int, int);
int NvConfigSet(int, int, int);
int NvConfigUpdate(int, int);
int NvConfigVga(int, int);
#elif !defined(__WATCOMC__)
DWORD FAR PASCAL NvConfigVersion(DWORD);
DWORD FAR PASCAL NvConfigGet(DWORD, DWORD);
DWORD FAR PASCAL NvConfigSet(DWORD, DWORD, DWORD);
DWORD FAR PASCAL NvConfigUpdate(DWORD, DWORD);
DWORD FAR PASCAL NvConfigVga(DWORD, DWORD);
#endif // ! __WATCOMC__

#elif !defined(WINNT)
int __stdcall NvConfigVersion(void);
int __stdcall NvConfigGet(int, int);
int __stdcall NvConfigSet(int, int, int);
int __stdcall NvConfigUpdate(int);
#ifdef __WATCOMC__
#pragma aux (__stdcall) NvConfigVersion "*";
#pragma aux (__stdcall) NvConfigGet "*";
#pragma aux (__stdcall) NvConfigSet "*";
#pragma aux (__stdcall) NvConfigUpdate "*";
#endif // __WATCOMC__
#endif // _WIN32


/////////////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING DEFINES AND ENTRY POINTS ARE NVIDIA RESERVED
//
//---------------------------------------------------------------------------
//
//  Device Defines.
//
//---------------------------------------------------------------------------

//
// Parameter to DeviceGet.
//
#define NV_DEV_BASE                             1
#define NV_DEV_ALTERNATE                        2
#define NV_DEV_BUFFER_0                         3
#define NV_DEV_BUFFER_1                         4
#define NV_DEV_TIMER                            5
#define NV_DEV_PFB                              6
#define NV_DEV_PGRAPH                           7
#define NV_DEV_PRMCIO                           8
#define NV_DEV_PRMVIO                           9
#define NV_DEV_AGP                              10
#define NV_DEV_GAMMA                            11
#define NV_DEV_PRAMDAC                          12
#define NV_DEV_PCRTC                            13
#define NV_DEV_MAX                              13

//---------------------------------------------------------------------------
//
//  Device Pointer API.
//
//---------------------------------------------------------------------------
#ifndef WINNT
#ifndef _WIN32
#if defined(__GNUC__) || defined(MACOS)
int NvIoControl(int, int);
int NvDeviceBaseGet(int, int);
int NvDeviceLimitGet(int, int);
int NvDeviceSelectorGet(int, int);
int NvGetHardwarePointers(int *, int *, int *, int *);
#elif !defined(__WATCOMC__)
//DWORD FAR PASCAL NvIoControl(DWORD, DWORD);
DWORD FAR PASCAL NvDeviceBaseGet(DWORD, DWORD);
DWORD FAR PASCAL NvDeviceLimitGet(DWORD, DWORD);
WORD  FAR PASCAL NvDeviceSelectorGet(DWORD, DWORD);
DWORD FAR PASCAL NvGetHardwarePointers(DWORD *, DWORD *, DWORD *, DWORD *);
#endif // __WATCOMC__
#else  /* WIN32 */
void __stdcall NvIoControl(int, void *);
int  __stdcall NvDeviceBaseGet(int, int);
int  __stdcall NvDeviceLimitGet(int, int);
int  __stdcall NvDeviceSelectorGet(int, int);
int  __stdcall NvGetHardwarePointers(int *, int *, int *, int *, int);
#ifdef __WATCOMC__
#pragma aux (__stdcall) NvIoControl "*";
#pragma aux (__stdcall) NvDeviceBaseGet "*";
#pragma aux (__stdcall) NvDeviceLimitGet "*";
#pragma aux (__stdcall) NvDeviceSelectorGet "*";
#pragma aux (__stdcall) NvGetHardwarePointers "*";
#endif // __WATCOMC__
#endif // _WIN32
#endif // !WINNT
#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _NVCM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\NvImage.h ===
/***************************************************************************\
* Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.            *
* THE INFORMATION CONTAINED HEREIN IS PROPRIETARY AND CONFIDENTIAL TO       *
* NVIDIA, CORPORATION.  USE, REPRODUCTION OR DISCLOSURE TO ANY THIRD PARTY  *
* IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORPORATION.                *
*                                                                           *
*  Portions: Copyright (C) 1995 Microsoft Corporation.  All Rights Reserved.*
*                                                                           *
* Module: NvImage.h                                                         *
*                                                                           *
*****************************************************************************
*                                                                           *
* History:                                                                  *
*       Andrei Osnovich    10/03/2000  Created                              *
*                                                                           *
\***************************************************************************/

#ifndef _NVIMAGE_H_
#define _NVIMAGE_H_

#ifdef  DEFINE_JPEG_TYPES
#include <stdio.h>
#include <string.h>
#include "jpeglib.h"
#else   //~DEFINE_JPEG_TYPES
struct jpeg_decompress_struct {
    DWORD Pan;
};
typedef BYTE JSAMPLE;
#endif  //~DEFINE_JPEG_TYPES

typedef void (__stdcall *SCANLINEPROCESS)(void *, int);

typedef enum _JPEGParameterType_ {
    JPEG_WRITE_QUALITY      = 1,
    JPEG_READ_DEPTH         = 2,
} JPEGPARAMETERTYPE;

#ifdef __cplusplus

typedef class CImageObject
{
    /*
     * methods
     */
public:
    virtual void WINAPI CompressJPEG (void *pAddr, DWORD dwWidth, DWORD dwHeight, char * filename);
    virtual void WINAPI GetJPEGInfoFile (char * filename, DWORD *pWidth, DWORD *pHeight, DWORD *pBPP);
    virtual void WINAPI GetJPEGInfo (char *pcBuffer, int nLength, DWORD *pWidth, DWORD *pHeight, DWORD *pBPP);
    virtual DWORD WINAPI SetJPEGParameters (JPEGPARAMETERTYPE type, DWORD value);
    virtual void WINAPI DecompressJPEGFile (char * filename, SCANLINEPROCESS ScanlineProcess = NULL);
		virtual void WINAPI DecompressJPEG (char *pcBuffer, int nLength, SCANLINEPROCESS ScanlineProcess = NULL);
    virtual void WINAPI GetImageParameters (char *&Start, char *&Current, DWORD &Width, DWORD &Height, DWORD &BPP);
    virtual DWORD WINAPI DestroyImageObject(void);
    CImageObject();
    ~CImageObject();
protected:
    void write_JPEG_file (char * filename, int quality);
    int  get_JPEG_file_info (char * filename, struct jpeg_decompress_struct *pCinfo);
    int  get_JPEG_buffer_info (char *pBuffer, int nLength, struct jpeg_decompress_struct *pCinfo);
    int  read_JPEG_file (char * filename, SCANLINEPROCESS ScanlineProcess);
		int  read_JPEG_buffer (char *pBuffer, int nLength, SCANLINEPROCESS ScanlineProcess);
    void __stdcall InternalScanlineProcess(LPVOID pBuf, int stride);
protected:
    int       out_quality;          /* Specify quality of the subsequent compression 0-100, 100 being highest. */ 
    JSAMPLE * out_image_buffer;	    /* Points to large array of R,G,B-order data */
    int       out_image_height;	    /* Number of rows in image */
    int       out_image_width;		/* Number of columns in image */
    char     *image_buffer;
    char     *image_ptr;
    DWORD     image_width; 
    DWORD     image_height; 
    DWORD     image_depth;  
} CIMAGEOBJECT, *LPCIMAGEOBJECT;


typedef DWORD (WINAPI *CREATEIMAGEOBJECT)(LPCIMAGEOBJECT &pImageOpject);
extern DWORD WINAPI CreateImageObject(LPCIMAGEOBJECT &pImageOpject);

#else   //__cplusplus==0

typedef struct CImageObject
{
    struct  CImageObjectVtbl FAR *lpVtbl;
} CIMAGEOBJECT, *LPCIMAGEOBJECT;

struct  CImageObjectVtbl {
    void    (WINAPI *CompressJPEG)(LPCIMAGEOBJECT, void *pAddr, DWORD dwWidth, DWORD dwHeight, char * filename);
    void    (WINAPI *GetJPEGInfoFile)(LPCIMAGEOBJECT, char * filename, DWORD *pWidth, DWORD *pHeight, DWORD *pBPP);
    void    (WINAPI *GetJPEGInfo)(LPCIMAGEOBJECT, char *pcBuffer, int nLength, DWORD *pWidth, DWORD *pHeight, DWORD *pBPP);
    DWORD   (WINAPI *SetJPEGParameters)(LPCIMAGEOBJECT, JPEGPARAMETERTYPE type, DWORD value);
    void    (WINAPI *DecompressJPEGFile)(LPCIMAGEOBJECT, char * filename, SCANLINEPROCESS ScanlineProcess);
    void    (WINAPI *DecompressJPEG)(LPCIMAGEOBJECT, char *pcBuffer, int nLength, SCANLINEPROCESS ScanlineProcess);
    void    (WINAPI *GetImageParameters)(LPCIMAGEOBJECT, char **Start, char **Current, DWORD *Width, DWORD *Height, DWORD *BPP);
    DWORD   (WINAPI *DestroyImageObject)(LPCIMAGEOBJECT);
};


typedef DWORD (WINAPI *CREATEIMAGEOBJECT)(LPCIMAGEOBJECT *pImageOpject);
extern DWORD WINAPI CreateImageObject(LPCIMAGEOBJECT *pImageOpject);

#endif  //__cplusplus==0

#endif _NVIMAGE_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvos.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
 \***************************************************************************/

 

 /***************************************************************************\
|*                                                                           *|
|*                         NV Architecture Interface                         *|
|*                                                                           *|
|*  <nvos.h>  defines the Operating System function and ioctl interfaces to  *|
|*  NVIDIA's Unified Media Architecture (TM).                                *|
|*                                                                           *|
 \***************************************************************************/


#ifndef NVOS_INCLUDED
#define NVOS_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif

#include <nvtypes.h>

// local defines here
#define FILE_DEVICE_NV 		0x00008000
#define NV_IOCTL_FCT_BASE 	0x00000800

// Use these defines if you are opening the RM vxd or the minivdd using the
// CreateFile inetrface.
// NV3 Resource Manager VXDs
#define NV3_PRIMARY_MINIVDD     "\\\\.\\NV3.VXD"
#define NV3_SECONDARY_MINIVDD   "\\\\.\\NV3MINI2.VXD"
#define NV3_RESMAN_VXD          "\\\\.\\NV3RM.VXD"
// NV4/NV10 Resource Manager VXDs
#define NVX_PRIMARY_MINIVDD     "\\\\.\\NVMINI.VXD"
#define NVX_SECONDARY_MINIVDD   "\\\\.\\NVMINI2.VXD"
#define NVX_RESMAN_VXD          "\\\\.\\NVCORE.VXD"

// Use this define for the resman vxd name if you use the VXDLDR_LoadDevice
// interface.
#define VXDLDR_NV3_RESMAN_VXD_NAME "NV3RM.VXD"
#define VXDLDR_NVX_RESMAN_VXD_NAME "NVCORE.VXD"
#define VXDLDR_NVA_RESMAN_VXD_NAME "NVACORE.VXD"

#if defined(WIN32)
#if !defined(NV_APIENTRY)
#define NV_APIENTRY __stdcall
#ifndef APIENTRY
#define APIENTRY    NV_APIENTRY          // APIENTRY deprecated; use NV_APIENTRY
#endif
#define CAPI        NV_APIENTRY          // CAPI deprecated; use NV_APIENTRY
#endif
#if !defined(NV_FASTCALL)
#define NV_FASTCALL __fastcall
//#define FASTCALL    NV_FASTCALL          // FASTCALL deprecated; use NV_FASTCALL
#endif
#if !defined(NV_INLINE)
#define NV_INLINE __inline
#define INLINE      NV_INLINE            // INLINE deprecated; use NV_INLINE
#endif
#if !defined(NV_CDECLCALL)
#define NV_CDECLCALL __cdecl
#define CDECLCALL   NV_CDECLCALL         // CDECLCALL deprecated; use NV_CDECLCALL
#endif
#if !defined(NV_STDCALL)
#define NV_STDCALL __stdcall
#define STDCALL     NV_STDCALL           // STDCALL deprecated; use NV_STDCALL
#endif

#else /* ! defined(WIN32) */

#define NV_APIENTRY
#define NV_FASTCALL
#define NV_CDECLCALL
#define NV_STDCALL 
#ifdef __GNUC__
#define NV_INLINE     __inline__
#elif defined (macintosh)
#define NV_INLINE inline
#else
#define NV_INLINE
#endif

#endif  /* ! WIN32 */

#define NV_CAPI	NV_APIENTRY


 /***************************************************************************\
|*                              NV OS Functions                              *|
 \***************************************************************************/

/*
	Note:
		This version of the architecture has been changed to allow the 
		RM to return a client handle that will subsequently used to
		identify the client.  NvAllocRoot() returns the handle.  All
		other functions must specify this client handle. 

*/
/* macro NV01_FREE */
#define  NV01_FREE                                                 (0x00000000)

/* parameter values */
#define NVOS00_STATUS_SUCCESS                                      (0x00000000)
#define NVOS00_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS00_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS00_STATUS_ERROR_BAD_OBJECT_OLD                         (0x00000003)
#define NVOS00_STATUS_ERROR_OBJECT_IN_USE                          (0x00000004)
#define NVOS00_STATUS_ERROR_OBJECT_HAS_CHILDERN                    (0x00000005)


/* NT ioctl data structure */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectOld;
  NvV32 status;
} NVOS00_PARAMETERS;

/* macro NV01_ALLOC_ROOT */
#define  NV01_ALLOC_ROOT                                           (0x00000001)

/* status values */
#define NVOS01_STATUS_SUCCESS                                      (0x00000000)
#define NVOS01_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS01_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS01_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS01_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS01_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct
{
    NvV32 hObjectNew;
    NvV32 hClass;
    NvV32 status;
} NVOS01_PARAMETERS;

/* valid hClass values. */
#define  NV01_ROOT                                                 (0x00000000)
#define  NV01_ROOT_USER                                            (0x00000041)

/* macro NV01_ALLOC_MEMORY */
#define  NV01_ALLOC_MEMORY                                         (0x00000002)

/* parameter values */
#define NVOS02_FLAGS_PHYSICALITY                                   7:4
#define NVOS02_FLAGS_PHYSICALITY_CONTIGUOUS                        (0x00000000)
#define NVOS02_FLAGS_PHYSICALITY_NONCONTIGUOUS                     (0x00000001)
#define NVOS02_FLAGS_LOCATION                                      11:8
#define NVOS02_FLAGS_LOCATION_PCI                                  (0x00000000)
#define NVOS02_FLAGS_LOCATION_AGP                                  (0x00000001)
#define NVOS02_FLAGS_COHERENCY                                     15:12
#define NVOS02_FLAGS_COHERENCY_UNCACHED                            (0x00000000)
#define NVOS02_FLAGS_COHERENCY_CACHED                              (0x00000001)
#define NVOS02_FLAGS_COHERENCY_WRITE_COMBINE                       (0x00000002)
#define NVOS02_FLAGS_COHERENCY_WRITE_THROUGH                       (0x00000003)
#define NVOS02_FLAGS_COHERENCY_WRITE_PROTECT                       (0x00000004)
#define NVOS02_FLAGS_COHERENCY_WRITE_BACK                          (0x00000005)
#define NVOS02_STATUS_SUCCESS                                      (0x00000000)
#define NVOS02_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS02_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS02_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS02_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS02_STATUS_ERROR_BAD_FLAGS                              (0x00000005)
#define NVOS02_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000006)

/* parameters */
typedef struct 
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectNew;
  NvV32 hClass;
  NvV32 flags;
  NvP64 pMemory;
  NvU64 pLimit;
  NvV32 status;
} NVOS02_PARAMETERS;

/* macro NV01_ALLOC_CONTEXT_DMA */
#define  NV01_ALLOC_CONTEXT_DMA                                    (0x00000003)

/* parameter values */
#define NVOS03_FLAGS_ACCESS                                        3:0
#define NVOS03_FLAGS_ACCESS_READ_WRITE                             (0x00000000)
#define NVOS03_FLAGS_ACCESS_READ_ONLY                              (0x00000001)
#define NVOS03_FLAGS_ACCESS_WRITE_ONLY                             (0x00000002)
#define NVOS03_FLAGS_PHYSICALITY                                   7:4
#define NVOS03_FLAGS_PHYSICALITY_CONTIGUOUS                        (0x00000000)
#define NVOS03_FLAGS_PHYSICALITY_NONCONTIGUOUS                     (0x00000001)
#define NVOS03_FLAGS_LOCKED                                        11:8
#define NVOS03_FLAGS_LOCKED_ALWAYS                                 (0x00000000)
#define NVOS03_FLAGS_LOCKED_IN_TRANSIT                             (0x00000001)
#define NVOS03_FLAGS_COHERENCY                                     31:12
#define NVOS03_FLAGS_COHERENCY_UNCACHED                            (0x00000000)
#define NVOS03_FLAGS_COHERENCY_CACHED                              (0x00000001)
#define NVOS03_STATUS_SUCCESS                                      (0x00000000)
#define NVOS03_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS03_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS03_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS03_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS03_STATUS_ERROR_BAD_FLAGS                              (0x00000005)
#define NVOS03_STATUS_ERROR_BAD_BASE                               (0x00000006)
#define NVOS03_STATUS_ERROR_BAD_LIMIT                              (0x00000007)
#define NVOS03_STATUS_ERROR_PROTECTION_FAULT                       (0x00000008)
#define NVOS03_STATUS_ERROR_MULTIPLE_MEMORY_TYPES                  (0x00000009)
#define NVOS03_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x0000000A)

/* parameters */
typedef struct
{
    NvV32 hObjectParent;
    NvV32 hObjectNew;
    NvV32 hClass;
    NvV32 flags;
    NvP64 pBase;
    NvU64 limit;
    NvV32 status;
} NVOS03_PARAMETERS;

/* macro NV01_ALLOC_CHANNEL_PIO */
#define  NV01_ALLOC_CHANNEL_PIO                                    (0x00000004)

/* parameter values */
#define NVOS04_FLAGS_FIFO_RUNOUT_IGNORE                            (0x00000000)
#define NVOS04_FLAGS_FIFO_RUNOUT_ERROR                             (0x00000001)
#define NVOS04_STATUS_SUCCESS                                      (0x00000000)
#define NVOS04_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS04_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS04_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS04_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS04_STATUS_ERROR_BAD_OBJECT_ERROR                       (0x00000005)
#define NVOS04_STATUS_ERROR_BAD_FLAGS                              (0x00000006)
#define NVOS04_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000007)

/* parameters */
typedef struct
{
    NvV32 hRoot;
    NvV32 hObjectParent;
    NvV32 hObjectNew;
    NvV32 hClass;
    NvV32 hObjectError;
    NvP64 pChannel;
    NvV32 flags;
    NvV32 status;
} NVOS04_PARAMETERS;

/* macro NV01_ALLOC_OBJECT */
#define  NV01_ALLOC_OBJECT                                         (0x00000005)

/* parameter values */
#define NVOS05_STATUS_SUCCESS                                      (0x00000000)
#define NVOS05_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS05_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS05_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS05_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS05_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectNew;
  NvV32 hClass;
  NvV32 status;
} NVOS05_PARAMETERS;

// ***** this has been changed to allow a device name string to be returned
/* macro NV01_ALLOC_DEVICE */
#define  NV01_ALLOC_DEVICE                                         (0x00000006)

/* parameter values */
#define NVOS06_STATUS_SUCCESS                                      (0x00000000)
#define NVOS06_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS06_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS06_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS06_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS06_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct
{
    NvV32 hObjectParent;
    NvV32 hObjectNew;
    NvV32 hClass;
#if defined(NVRM_64)
    NvP64 szName;
#else
    NvV32 szName;
#endif
    NvV32 status;
} NVOS06_PARAMETERS;

/* macro NV03_ALLOC_CHANNEL_DMA */
#define  NV03_ALLOC_CHANNEL_DMA                                    (0x00000007)

/* parameter values */
#define NVOS07_STATUS_SUCCESS                                      (0x00000000)
#define NVOS07_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS07_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS07_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS07_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS07_STATUS_ERROR_BAD_OBJECT_ERROR                       (0x00000005)
#define NVOS07_STATUS_ERROR_BAD_OBJECT_BUFFER                      (0x00000006)
#define NVOS07_STATUS_ERROR_BAD_OFFSET                             (0x00000007)
#define NVOS07_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000008)

/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectNew;
  NvV32 hClass;
  NvV32 hObjectError;
  NvV32 hObjectBuffer;
  NvU32 offset;
  NvP64 pControl;
  NvV32 status;
} NVOS07_PARAMETERS;

/* macro NV03_DMA_FLOW_CONTROL */
#define  NV03_DMA_FLOW_CONTROL                                     (0x00000008)

/* parameter values */
#define NVOS08_FLAGS_PUT                                           3:0
#define NVOS08_FLAGS_PUT_IGNORE                                    (0x00000000)
#define NVOS08_FLAGS_PUT_UPDATE                                    (0x00000001)
#define NVOS08_FLAGS_JUMP                                          31:4
#define NVOS08_FLAGS_JUMP_IGNORE                                   (0x00000000)
#define NVOS08_FLAGS_JUMP_UPDATE                                   (0x00000001)
#define NVOS08_STATUS_SUCCESS                                      (0x00000000)
#define NVOS08_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS08_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS08_STATUS_ERROR_BAD_FLAGS                              (0x00000003)
#define NVOS08_STATUS_ERROR_BAD_PUT                                (0x00000004)

/* parameters */
typedef struct
{
  NvV32 hChannel;
  NvV32 flags;
  NvU32 put;
  NvU32 get;
  NvV32 status;
} NVOS08_PARAMETERS;

/* macro NV01_INTERRUPT */
#define  NV01_INTERRUPT                                            (0x00000009)

/* parameter values */
#define NVOS09_STATUS_SUCCESS                                      (0x00000000)
#define NVOS09_STATUS_ERROR_BAD_CLIENT                             (0x00000001)
#define NVOS09_STATUS_ERROR_BAD_DEVICE                             (0x00000002)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 status;
} NVOS09_PARAMETERS;

/* macro NV01_ALLOC_EVENT */
#define  NV01_ALLOC_EVENT                                          (0x0000000A)

/* parameter values */
#define NVOS10_STATUS_SUCCESS                                      (0x00000000)
#define NVOS10_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS10_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS10_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000003)
#define NVOS10_STATUS_ERROR_BAD_CLASS                              (0x00000004)
#define NVOS10_STATUS_ERROR_BAD_INDEX                              (0x00000005)
#define NVOS10_STATUS_ERROR_BAD_EVENT                              (0x00000006)
#define NVOS10_STATUS_ERROR_OBJECT_IN_USE                          (0x00000007)

/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectNew;
  NvV32 hClass;
  NvV32 index;
  NvU64 hEvent;
  NvV32 status;
} NVOS10_PARAMETERS;

/* Valid values for hClass in Nv01AllocEvent */
/* Note that NV01_EVENT_OS_EVENT is same as NV01_EVENT_WIN32_EVENT */
/* TODO: delete the WIN32 name */
#define  NV01_EVENT_KERNEL_CALLBACK                                (0x00000078)
#define  NV01_EVENT_OS_EVENT                                       (0x00000079)
#define  NV01_EVENT_WIN32_EVENT                                    NV01_EVENT_OS_EVENT

//
// There's some definite ugly reuse of args in NV01_ARCH_HEAP for the various
// functions. We'd like to rename field names when adding funcs, so the args
// go in the appropriate places.
//
// For example, adding HEAP_INFO_FREE_BLOCKS, should take offset/offset2 args,
// but because it's not a union and some of the drivers refer to their own typedef
// for the struct, we reuse field names that don't apply to the func.
//

/* funct NV03_HEAP */
#define  NV01_ARCH_HEAP                                            (0x0000000B)
/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvU32 function;
  NvU32 owner;
  NvU32 type;       /* holds 16bits of flags and 16bits of type */
  NvU32 depth;
  NvU32 width;
  NvU32 height;
  NvS32 pitch;
  NvU32 offset;     // for NVOS11_HEAP_INFO_FREE_BLOCKS, offset to be considered freed
  NvU32 size;       // for NVOS11_HEAP_INFO, size of largest free block
#if defined(NVRM_64)
  NvP64 address;    // for NVOS11_HEAP_INFO, base address of heap
#else
  NvU32 address;    // for NVOS11_HEAP_INFO, base address of heap
#endif
  NvU32 limit;      // for NVOS11_HEAP_INFO_FREE_BLOCKS, offset to be considered freed
  NvU32 total;
  NvU32 free;
  NvV32 status;
} NVOS11_PARAMETERS;
/* parameter values */
#define NVOS11_HEAP_ALLOC_DEPTH_WIDTH_HEIGHT        1
#define NVOS11_HEAP_ALLOC_SIZE                      2
#define NVOS11_HEAP_FREE                            3
#define NVOS11_HEAP_PURGE                           4
#define NVOS11_HEAP_INFO                            5
#define NVOS11_HEAP_ALLOC_TILED_PITCH_HEIGHT        6
#define NVOS11_HEAP_DESTROY                         7
#define NVOS11_HEAP_INFO_FREE_BLOCKS                8
#define NVOS11_TYPE_IMAGE                           0
#define NVOS11_TYPE_DEPTH                           1
#define NVOS11_TYPE_TEXTURE                         2
#define NVOS11_TYPE_VIDEO_OVERLAY                   3
#define NVOS11_TYPE_FONT                            4
#define NVOS11_TYPE_CURSOR                          5
#define NVOS11_TYPE_DMA                             6
#define NVOS11_TYPE_INSTANCE                        7
#define NVOS11_TYPE_PRIMARY                         8
#define NVOS11_TYPE_IMAGE_TILED                     9
#define NVOS11_TYPE_DEPTH_COMPR16                   10
#define NVOS11_TYPE_DEPTH_COMPR32                   11
#define NVOS11_TYPE_FLAGS                                31:16
#define NVOS11_TYPE_FLAGS_IGNORE_BANK_PLACEMENT     0x00000001
#define NVOS11_TYPE_FLAGS_FORCE_MEM_GROWS_UP        0x00000002
#define NVOS11_TYPE_FLAGS_FORCE_MEM_GROWS_DOWN      0x00000004
#define NVOS11_INVALID_BLOCK_FREE_OFFSET            0xFFFFFFFF
#define NVOS11_STATUS_SUCCESS                       (0x00000000)
#define NVOS11_STATUS_ERROR_INSUFFICIENT_RESOURCES  (0x00000001)
#define NVOS11_STATUS_ERROR_INVALID_FUNCTION        (0x00000002)
#define NVOS11_STATUS_ERROR_INVALID_OWNER           (0x00000003)
#define NVOS11_STATUS_ERROR_INVALID_HEAP            (0x00000004)

/* function OS0C */
#define  NV01_CONFIG_VERSION                                       (0x0000000C)

/* parameter values */
#define NVOS12_STATUS_SUCCESS                                      (0x00000000)
#define NVOS12_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS12_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS12_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS12_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 version;
  NvV32 status;
} NVOS12_PARAMETERS;

/* function OS0D */
#define  NV01_CONFIG_GET                                           (0x0000000D)

/* parameter values */
#define NVOS13_STATUS_SUCCESS                                      (0x00000000)
#define NVOS13_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS13_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS13_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS13_STATUS_ERROR_BAD_INDEX                              (0x00000004)
#define NVOS13_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
  NvV32 value;
  NvV32 status;
} NVOS13_PARAMETERS;

/* function OS0E */
#define  NV01_CONFIG_SET                                           (0x0000000E)

/* parameter values */
#define NVOS14_STATUS_SUCCESS                                      (0x00000000)
#define NVOS14_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS14_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS14_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS14_STATUS_ERROR_BAD_INDEX                              (0x00000004)
#define NVOS14_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
  NvV32 oldValue;
  NvV32 newValue;
  NvV32 status;
} NVOS14_PARAMETERS;

/* function OS0F */
#define  NV01_CONFIG_UPDATE                                        (0x0000000F)

/* parameter values */
#define NVOS15_STATUS_SUCCESS                                      (0x00000000)
#define NVOS15_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS15_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS15_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS15_STATUS_ERROR_BAD_FLAGS                              (0x00000004)
#define NVOS15_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 flags;
  NvV32 status;
} NVOS15_PARAMETERS;

/* function OS16 */
#define  NV04_RING0_CALLBACK                                        (0x00000010)

/* parameter values */
#define NVOS16_STATUS_SUCCESS                                       (0x00000000)

/* callback function prototype */
typedef NvU32 (*RING0CALLBACKPROC)(NvU32, NvU32);

/* parameters */
typedef struct
{
    NvV32             hClient;
    NvV32             hDevice;
#if defined(NVRM_64)
    NvP64             functionPtr;
#else
    RING0CALLBACKPROC functionPtr;
#endif
    NvU32             param1;
    NvU32             param2;
    NvV32             status;
} NVRM_RING0CALLBACK_PARAMS;

/* function OS17 */
#define  NV04_CONFIG_GET_EX                                        (0x00000011)

/* parameter values */
#define NVOS_CGE_STATUS_SUCCESS                                    (0x00000000)
#define NVOS_CGE_STATUS_ERROR_OPERATING_SYSTEM                     (0x00000001)
#define NVOS_CGE_STATUS_ERROR_BAD_CLIENT                           (0x00000002)
#define NVOS_CGE_STATUS_ERROR_BAD_DEVICE                           (0x00000003)
#define NVOS_CGE_STATUS_ERROR_BAD_INDEX                            (0x00000004)
#define NVOS_CGE_STATUS_ERROR_INSUFFICIENT_RESOURCES               (0x00000005)
#define NVOS_CGE_STATUS_ERROR_BAD_PARAM_STRUCT                     (0x00000006)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
#if defined(NVRM_64)
  NvP64 paramStructPtr;
#else
  NvV32 paramStructPtr;
#endif
  NvU32 paramSize;
  NvV32 status;
} NVOS_CONFIG_GET_EX_PARAMS;

/* function OS18 */
#define  NV04_CONFIG_SET_EX                                        (0x00000012)

/* parameter values */
#define NVOS_CSE_STATUS_SUCCESS                                    (0x00000000)
#define NVOS_CSE_STATUS_ERROR_OPERATING_SYSTEM                     (0x00000001)
#define NVOS_CSE_STATUS_ERROR_BAD_CLIENT                           (0x00000002)
#define NVOS_CSE_STATUS_ERROR_BAD_DEVICE                           (0x00000003)
#define NVOS_CSE_STATUS_ERROR_BAD_INDEX                            (0x00000004)
#define NVOS_CSE_STATUS_ERROR_INSUFFICIENT_RESOURCES               (0x00000005)
#define NVOS_CSE_STATUS_ERROR_BAD_PARAM_STRUCT                     (0x00000006)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
#if defined(NVRM_64)
  NvP64 paramStructPtr;
#else
  NvV32 paramStructPtr;
#endif
  NvU32 paramSize;
  NvV32 status;
} NVOS_CONFIG_SET_EX_PARAMS;

/* function OS19 */
#define  NV04_I2C_ACCESS                                           (0x00000013)

/* parameter values */
#define NVOS_I2C_ACCESS_STATUS_SUCCESS                             (0x00000000)
#define NVOS_I2C_ACCESS_STATUS_ERROR_OPERATING_SYSTEM              (0x00000001)
#define NVOS_I2C_ACCESS_STATUS_ERROR_BAD_CLIENT                    (0x00000002)
#define NVOS_I2C_ACCESS_STATUS_ERROR_BAD_DEVICE                    (0x00000003)
#define NVOS_I2C_ACCESS_STATUS_ERROR_INSUFFICIENT_RESOURCES        (0x00000004)
#define NVOS_I2C_ACCESS_STATUS_ERROR_BAD_PARAM_STRUCT              (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
#if defined(NVRM_64)
  NvP64 paramStructPtr;
#else
  NvV32 paramStructPtr;
#endif
  NvU32 paramSize;
  NvV32 status;
} NVOS_I2C_ACCESS_PARAMS;

/* function OS20 */
#define  NV01_DEBUG_CONTROL                                        (0x000000014)

/* parameter values */
#define NVOS20_STATUS_SUCCESS                                      (0x00000000)
#define NVOS20_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS20_STATUS_ERROR_BAD_DEVICE                             (0x00000002)
#define NVOS20_STATUS_ERROR_BAD_FLAGS                              (0x00000003)
#define NVOS20_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000004)

/* parameters */
typedef struct 
{
    NvV32 hRoot;
    NvV32 command;
    NvP64 pArgs;
    NvV32 status;
} NVOS20_PARAMETERS;

/* current values for command */
#define NVOS20_COMMAND_RM_FAILURE_ENABLE           0x0001
#define NVOS20_COMMAND_RM_FAILURE_DISABLE          0x0002

/* function OS21 */
#define  NV04_ALLOC                                                (0x00000015)

/* parameter values */
#define NVOS21_STATUS_SUCCESS                                      (0x00000000)
#define NVOS21_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS21_STATUS_ERROR_BAD_ROOT                               (0x00000002)
#define NVOS21_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000003)
#define NVOS21_STATUS_ERROR_BAD_OBJECT_NEW                         (0x00000004)
#define NVOS21_STATUS_ERROR_BAD_CLASS                              (0x00000005)
#define NVOS21_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000006)

/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectNew;
  NvV32 hClass;
  NvP64 pAllocParms;
  NvV32 status;
} NVOS21_PARAMETERS;

/* function OS22 */
#define  NV04_POWER_MANAGEMENT                                     (0x00000016)

/* parameter values */
#define NVOS22_STATUS_SUCCESS                                      (0x00000000)
#define NVOS22_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS22_STATUS_ERROR_BAD_ROOT                               (0x00000002)
#define NVOS22_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000003)
#define NVOS22_STATUS_ERROR_BAD_CLIENT                             (0x00000004)
#define NVOS22_STATUS_ERROR_BAD_CLASS                              (0x00000005)
#define NVOS22_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000006)
#define NVOS22_STATUS_ERROR_NO_DEVICE                              (0x00000007)

/* parameters */
typedef struct
{
  NvV32 hRoot;
  NvV32 hDevice;
  NvV32 command;
  NvV32 head;
  void *params;
  NvV32 status;
} NVOS22_PARAMETERS;

/* Command values */

#define NVOS22_POWER_SLEEP               0x0001
#define NVOS22_POWER_WAKE                0x0002
#define NVOS22_POWER_WAKE_BIOS_HAS_RUN   0x0003
#define NVOS22_POWER_DOZE                0x0004
#define NVOS22_POWER_WAKE_TO_DOZE        0x0005
#define NVOS22_POWER_GET_LEVEL           0x0008

/* function OS21 */
#define  NV10_AGP_INIT                                             (0x000000015)
#define  NV10_AGP_TEARDOWN                                         (0x000000016)

/* parameters */
typedef struct 
{
  NvV32 hDevice;
  NvV32 config;
  NvV32 status;
} NVOS_AGP_PARAMS;

/* parameter values */
#define NVOS_AGP_CONFIG_DISABLE_AGP                            	        (0x00000000)
#define NVOS_AGP_CONFIG_NVAGP                                           (0x00000001)
#define NVOS_AGP_CONFIG_AGPGART                                         (0x00000002)
#define NVOS_AGP_CONFIG_ANYAGP                                          (0x00000003)

#define NVOS_AGP_STATUS_SUCCESS                             		(0x00000000)
#define NVOS_AGP_STATUS_ERROR_OPERATING_SYSTEM              		(0x00000001)
#define NVOS_AGP_STATUS_ERROR_BAD_CLIENT                           	(0x00000002)
#define NVOS_AGP_STATUS_ERROR_BAD_DEVICE                           	(0x00000003)

/* function OS25 */
#define NV04_OSCONFIG_SET                                           (0x00000019)

/* parameter values */
#define NVOS25_STATUS_SUCCESS                                      (0x00000000)
#define NVOS25_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS25_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS25_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS25_STATUS_ERROR_BAD_INDEX                              (0x00000004)
#define NVOS25_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
  NvV32 oldValue;
  NvV32 newValue;
  NvV32 status;
} NVOS25_PARAMETERS;

/* function OS26 */
#define NV04_OSCONFIG_GET                                           (0x0000001A)

/* parameter values */
#define NVOS26_STATUS_SUCCESS                                      (0x00000000)
#define NVOS26_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS26_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS26_STATUS_ERROR_BAD_DEVICE                             (0x00000003)
#define NVOS26_STATUS_ERROR_BAD_INDEX                              (0x00000004)
#define NVOS26_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
  NvV32 value;
  NvV32 status;
} NVOS26_PARAMETERS;

/* function OS27 */
#define NV04_OSCONFIG_GET_EX                                        (0x0000001B)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
#if defined(NVRM_64)
  NvP64 paramStructPtr;
#else
  NvV32 paramStructPtr;
#endif
  NvU32 paramSize;
  NvV32 status;
} NVOS_OSCONFIG_GET_EX_PARAMS;

/* function OS28 */
#define NV04_OSCONFIG_SET_EX                                        (0x0000001C)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 index;
#if defined(NVRM_64)
  NvP64 paramStructPtr;
#else
  NvV32 paramStructPtr;
#endif
  NvU32 paramSize;
  NvV32 status;
} NVOS_OSCONFIG_SET_EX_PARAMS;

/* function OS2A */
#define NV04_SWAP_EXT                                              (0x00000020)

/* parameter values */
#define NVOS2A_FLAGS_SWAP                                          1:0
#define NVOS2A_FLAGS_SWAP_BARRIER                                  (0x00000000)
#define NVOS2A_FLAGS_SWAP_GROUP                                    (0x00000001)
#define NVOS2A_FLAGS_ACTION                                        3:2
#define NVOS2A_FLAGS_ACTION_INIT                                   (0x00000000)
#define NVOS2A_FLAGS_ACTION_ADD                                    (0x00000001)
#define NVOS2A_FLAGS_ACTION_REMOVE                                 (0x00000002)
#define NVOS2A_STATUS_SUCCESS                                      (0x00000000)
#define NVOS2A_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS2A_STATUS_ERROR_BAD_CLIENT                             (0x00000002)
#define NVOS2A_STATUS_ERROR_BAD_GROUP                              (0x00000003)
#define NVOS2A_STATUS_ERROR_BAD_DEVICE                             (0x00000004)
#define NVOS2A_STATUS_ERROR_INSUFFICIENT_RESOURCES                 (0x00000005)

/* parameters */
typedef struct 
{
  NvV32 hClient;
  NvV32 hDevice;
  NvV32 hChannel;
  NvV32 flags;
  NvV32 group_id;
  NvV32 barrier_id;
  NvV32 status;
} NVOS2A_PARAMETERS;


/* macro NV04_DIRECT_METHOD_CALL */
#define NV04_DIRECT_METHOD_CALL                                    (0x0000001D)

/* parameter values */
#define NVOS1D_STATUS_SUCCESS                                      (0x00000000)
#define NVOS1D_STATUS_ERROR_OPERATING_SYSTEM                       (0x00000001)
#define NVOS1D_STATUS_ERROR_BAD_OBJECT_PARENT                      (0x00000002)
#define NVOS1D_STATUS_ERROR_BAD_OBJECT_OLD                         (0x00000003)
#define NVOS1D_STATUS_ERROR_BAD_METHOD                             (0x00000004)
#define NVOS1D_STATUS_ERROR_BAD_DATA                               (0x00000005)

/* NT ioctl data structure */
typedef struct
{
  NvV32 hRoot;
  NvV32 hObjectParent;
  NvV32 hObjectOld;
  NvV32 method;
  NvV32 data;
  NvV32 status;
} NVOS1D_PARAMETERS;

#define NV04_UNIFIED_FREE											(0x0000001E)

#define NVOS1E_STATUS_SUCCESS										(0x00000000)
#define NVOS1E_STATUS_ERROR_OPERATING_SYSTEM						(0x00000001)
#define NVOS1E_STATUS_ERROR_OBJECT_IN_USE							(0x00000004)

/* NT ioctl data structure */
typedef struct
{
	NvV32	hClient;
	NvV32	hClass;
	NvU32	uDeviceRef;
	NvP64	pParam;
	NvV32	status;
} NV_UNIFIED_FREE;


#ifdef __cplusplus
};
#endif
#endif /* NVOS_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvmisc.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
 \***************************************************************************/

/*
 * nvmisc.h
 */
#ifndef __NV_MISC_H
#define __NV_MISC_H

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

// 
// control struct and defines for NvRmI2CAccess()
//
typedef struct
{
    unsigned long	token;
    unsigned long	cmd;
    unsigned long	port;
    unsigned long	flags;
    unsigned long	data;
    unsigned long	status;
} NVRM_I2C_ACCESS_CONTROL;

// commands
#define	NVRM_I2C_ACCESS_CMD_ACQUIRE     1
#define	NVRM_I2C_ACCESS_CMD_RELEASE     2
#define	NVRM_I2C_ACCESS_CMD_WRITE_BYTE  3
#define	NVRM_I2C_ACCESS_CMD_READ_BYTE   4
#define	NVRM_I2C_ACCESS_CMD_NULL        5
#define	NVRM_I2C_ACCESS_CMD_RESET       6
#define NVRM_I2C_ACCESS_CMD_READ_SDA    7
#define NVRM_I2C_ACCESS_CMD_READ_SCL    8
#define NVRM_I2C_ACCESS_CMD_WRITE_SDA   9
#define NVRM_I2C_ACCESS_CMD_WRITE_SCL   10

// flags
#define NVRM_I2C_ACCESS_FLAG_START	    0x1
#define	NVRM_I2C_ACCESS_FLAG_STOP	    0x2
#define	NVRM_I2C_ACCESS_FLAG_ACK	    0x4

// port
#define	NVRM_I2C_ACCESS_PORT_PRIMARY    1
#define	NVRM_I2C_ACCESS_PORT_SECONDARY  2

// status
#define	NVRM_I2C_ACCESS_STATUS_SUCCESS         0
#define	NVRM_I2C_ACCESS_STATUS_ERROR           1
#define	NVRM_I2C_ACCESS_STATUS_PROTOCOL_ERROR  2
#define	NVRM_I2C_ACCESS_STATUS_DEVICE_BUSY     3

//
// misc string definitions for registry manipulation
//
#define STR_NVIDIA                  "NVidia"
#define STR_DEV_NODE_RM             "SOFTWARE\\NVIDIA Corporation\\RIVA TNT\\System"
#define STR_DEV_NODE_DISPLAY        "SOFTWARE\\NVIDIA Corporation\\RIVA TNT\\Display";
#define STR_DEV_NODE_DISPLAY_NUMBER "SOFTWARE\\NVIDIA Corporation\\RIVA TNT\\Display\\DeviceX";
#define STR_RM_CORE_NAME            "RmCoreName"

#ifdef __cplusplus
}
#endif //__cplusplus

#endif // __NV_MISC_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvRmApi.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
 \***************************************************************************/

/*
 * nvRmApi.h
 *
 * NVidia resource manager API header file exported to drivers.
 *
 */

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

#include <nvos.h>

#ifdef NV_ICD_NT
#define NvRmAlloc NvRmAllocNt
#define NvRmAllocRoot NvRmAllocRootNt
#define NvRmAllocDevice NvRmAllocDeviceNt
#define NvRmAllocContextDma NvRmAllocContextDmaNt
#define NvRmAllocChannelPio NvRmAllocChannelPioNt
#define NvRmAllocChannelDma NvRmAllocChannelDmaNt
#define NvRmAllocMemory NvRmAllocMemoryNt
#define NvRmAllocObject NvRmAllocObjectNt
#define NvRmAllocEvent NvRmAllocEventNt
#define NvRmFree NvRmFreeNt
#define NvRmArchHeap NvRmArchHeapNt
#define NvRmConfigGet NvRmConfigGetNt
#define NvRmConfigGetEx NvRmConfigGetExNt
ULONG  NvRmAllocNt(ULONG hClient, ULONG hParent, ULONG hObject, ULONG hClass, PVOID pAllocParms);
ULONG  NvRmAllocRootNt(ULONG *phClient);
ULONG  NvRmAllocDeviceNt(ULONG hClient, ULONG hDevice, ULONG hClass, PUCHAR szName);
ULONG  NvRmAllocContextDmaNt(ULONG hClient, ULONG hDma, ULONG hClass, ULONG flags, PVOID base, ULONG limit);
ULONG  NvRmAllocChannelDmaNt(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hClass, ULONG hErrorCtx, ULONG hDataCtx, ULONG offset, PVOID *ppChannel);
ULONG  NvRmAllocMemoryNt(ULONG hClient, ULONG hParent, ULONG hMemory, ULONG hClass, ULONG flags, PVOID *ppAddress, ULONG *pLimit);
ULONG  NvRmAllocObjectNt(ULONG hClient, ULONG hChannel, ULONG hObject, ULONG hClass);
ULONG  NvRmAllocEventNt(ULONG hClient, ULONG hParent, ULONG hObject, ULONG hClass, ULONG index, PVOID hEvent);
ULONG  NvRmFreeNt(ULONG hClient, ULONG hParent, ULONG hObject);
ULONG  NvRmArchHeapNt(ULONG hClient, ULONG hParent, ULONG function, ULONG owner, ULONG type, ULONG height, ULONG size,
ULONG *pitch, ULONG *offset, ULONG *address, ULONG *limit, ULONG *free, ULONG *total);
ULONG  NvRmConfigGetNt(ULONG hClient, ULONG hDevice, ULONG index, ULONG *pValue);
ULONG  NvRmConfigGetExNt(ULONG hClient, ULONG hDevice, ULONG index, VOID * paramStructPtr, ULONG ParamSize);
#else /* NV_ICD_NT */
#ifndef WINNT
HANDLE NV_APIENTRY NvRmOpen(VOID);
VOID   NV_APIENTRY NvRmClose(VOID);
ULONG  NV_APIENTRY NvRmAlloc(ULONG hClient, ULONG hParent, ULONG hObject, ULONG hClass, PVOID pAllocParms);
ULONG  NV_APIENTRY NvRmAllocRoot(ULONG *phClient);
ULONG  NV_APIENTRY NvRmAllocDevice(ULONG hClient, ULONG hDevice, ULONG hClass, PUCHAR szName);
ULONG  NV_APIENTRY NvRmAllocContextDma(ULONG hClient, ULONG hDma, ULONG hClass, ULONG flags, PVOID base, ULONG limit);
ULONG  NV_APIENTRY NvRmAllocChannelPio(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hClass, ULONG hErrorCtx, PVOID *ppChannel, ULONG flags);
ULONG  NV_APIENTRY NvRmAllocChannelDma(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hClass, ULONG hErrorCtx, ULONG hDataCtx, ULONG offset, PVOID *ppChannel);
ULONG  NV_APIENTRY NvRmAllocMemory(ULONG hClient, ULONG hParent, ULONG hMemory, ULONG hClass, ULONG flags, PVOID *ppAddress, ULONG *pLimit);
ULONG  NV_APIENTRY NvRmAllocObject(ULONG hClient, ULONG hChannel, ULONG hObject, ULONG hClass);
ULONG  NV_APIENTRY NvRmFree(ULONG hClient, ULONG hParent, ULONG hObject);
ULONG  NV_APIENTRY Nv3RmGetDmaPushInfo(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hDmaContext, ULONG get);
ULONG  NV_APIENTRY NvRmAllocEvent(ULONG hClient, ULONG hParent, ULONG object, ULONG hClass, ULONG hIndex, PVOID hEvent);
ULONG  NV_APIENTRY NvRmArchHeap(ULONG hClient, ULONG hParent, ULONG function, ULONG owner, ULONG type, ULONG height, ULONG size,
                              ULONG *pitch, ULONG *offset, ULONG *address, ULONG *limit, ULONG *free, ULONG *total);
ULONG  NV_APIENTRY NvRmConfigVersion(ULONG hClient, ULONG hDevice, ULONG *pVersion);
ULONG  NV_APIENTRY NvRmConfigGet(ULONG hClient, ULONG hDevice, ULONG index, ULONG *pValue);
ULONG  NV_APIENTRY NvRmConfigSet(ULONG hClient, ULONG hDevice, ULONG index, ULONG newValue, ULONG *pOldValue);
ULONG  NV_APIENTRY NvRmConfigUpdate(ULONG hClient, ULONG hDevice, ULONG flags);
ULONG  NV_APIENTRY NvRmInterrupt(ULONG hClient, ULONG hDevice);
ULONG  NV_APIENTRY NvRmRing0Callback(ULONG hClient, ULONG hDevice, ULONG procAddr, ULONG param1, ULONG param2);
ULONG  NV_APIENTRY NvRmConfigSetEx(ULONG hClient, ULONG hDevice, ULONG index, VOID * paramStructPtr, ULONG ParamSize);
ULONG  NV_APIENTRY NvRmConfigGetEx(ULONG hClient, ULONG hDevice, ULONG index, VOID * paramStructPtr, ULONG ParamSize);
ULONG  NV_APIENTRY NvRmI2CAccess(ULONG hClient, ULONG hDevice, VOID * ctrlStructPtr );
ULONG  NV_APIENTRY NvRmPowerManagement(ULONG hRoot, ULONG hDevice, ULONG head, ULONG command, VOID *paramStructPtr);
ULONG  NV_APIENTRY NvRmDebugControl(ULONG hRoot, ULONG command, VOID *pArgs);
ULONG  NV_APIENTRY NvRmIoFlush(VOID);
#ifdef LINUX
ULONG  NV_APIENTRY NvRmAGPInit(ULONG hClient, ULONG hDevice, ULONG agp_config);
ULONG  NV_APIENTRY NvRmAGPTeardown(ULONG hClient, ULONG hDevice);
#endif
ULONG  NV_APIENTRY NvRmAddSwapGroup(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG group_id); 
ULONG  NV_APIENTRY NvRmRemoveSwapGroup(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG grou_id);
ULONG  NV_APIENTRY NvRmAddSwapBarrier(ULONG group_id, ULONG barrier_id);
ULONG  NV_APIENTRY NvRmRemoveSwapBarrier(ULONG barrier_id);
#ifdef MACOS
ULONG  NV_APIENTRY NvRmOsConfigGet(ULONG hClient, ULONG hDevice, ULONG index, ULONG *pValue);
ULONG  NV_APIENTRY NvRmOsConfigSet(ULONG hClient, ULONG hDevice, ULONG index, ULONG newValue, ULONG *pOldValue);
ULONG  NV_APIENTRY NvRmOsConfigSetEx(ULONG hClient, ULONG hDevice, ULONG index, VOID * paramStructPtr, ULONG ParamSize);
ULONG  NV_APIENTRY NvRmOsConfigGetEx(ULONG hClient, ULONG hDevice, ULONG index, VOID * paramStructPtr, ULONG ParamSize);
#endif
#endif // #ifndef WINNT
#endif /* NV_ICD_NT */

/*
** The following was added to the OpenGL win 9x driver to perform client tracking.
** RM client tracking maintains a global list of OpenGL RM clients.  If the process
** that created the RM client is terminated using "stop debugging" then the RM
** client will be free and the resources (channel, video memory, etc) will be freed
** as well.  However, the resources are allocated until the next OpenGL process is
** run.  So they are not aviable for DirectDraw, GDI driver, or Direct3D.
*/
#if defined(__GL_ICD) && defined(_WIN32) && !defined(_WIN64) && !defined(NV_ICD_NT)
#undef NvRmAllocRoot
#undef NvRmFree
#define NvRmAllocRoot win9x_NvRmAllocRoot
#define NvRmFree win9x_NvRmFree
ULONG  NV_APIENTRY win9x_NvRmAllocRoot(ULONG *phClient);
ULONG  NV_APIENTRY win9x_NvRmFree(ULONG hClient, ULONG hParent, ULONG hObject);
#endif /* defined(_WIN32) && !defined(_WIN64) && !defined(NV_ICD_NT) */

#ifdef __cplusplus
}
#endif //__cplusplus
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvrmarch.inc ===
;/*
;-----------------------------Module-Header-----------------------------;
; Module Name:  NVRMARCH.INC
;
;  Constants for interface to the Resource Manager
;
; Created: 6/12/98
; Author:  ARG
;
; Copyright (C) 1993,1998 NVidia Corporation. All Rights Reserved.
;
; History:
;-----------------------------------------------------------------------;

ifndef  NVRMARCH_INCLUDED
; This seems to break the stupid assembler in strange and mysterious
; ways.  It appears that this file is re-read on the second pass, or
; at least is reevaluated, which produces "phase errors" galore because
; the condition is now different.  This is not rocket science.
;NVRMARCH_INCLUDED       equ     1

comment ~  */

#ifndef NVRMARCH_INCLUDED
#define NVRMARCH_INCLUDED       1

/* ~


ORD_WEP                                 equ      1
ORD_NvSysDispatch                       equ      3
ORD_NvSysNotifyCallback                 equ      4
ORD_NvSysIpcCallback                    equ      5
ORD_NvSysClientExit                     equ      6
ORD_NVSysSetCursor                      equ      7
ORD_NvSysMoveCursor                     equ      8
ORD_NvSysGetScreenInfo                  equ      9
ORD_NvSysOpen                           equ      10
ORD_NvSysClose                          equ      11
ORD_NvSysGetRamInfo                     equ      12
ORD_NvSysSetCanvasRect                  equ      13
ORD_NvSysSetCanvasClip                  equ      14
ORD_NvSysInstallCallback                equ      15
ORD_NvSysAllocPages                     equ      16
ORD_NvSysFreePages                      equ      17
ORD_NvInstallCallback                   equ      22
ORD_NvSysGetBufferInfo                  equ      23
ORD_NvSysSetCanvas                      equ      24
ORD_NvConfigGet                         equ      25
ORD_NvConfigSet                         equ      26
ORD_NvConfigUpdate                      equ      27
ORD_NvConfigVersion                     equ      28
ORD_NvConfigVga                         equ      29
ORD_NvSysSetCanvasRegion                equ      30
ORD_NvSysSetCursorImage                 equ      35
ORD_NvSysMoveCursorMulti                equ      36
ORD_NvSysSetCursorImageMulti            equ      37
ORD_NvSysUpdateImageOffsetFormat        equ      38
ORD_DllEntryPoint                       equ      40
ORD_THK_ThunkData16                     equ      41
ORD_NvSysGetHardwarePointers            equ      50
ORD_NvDeviceBaseGet                     equ      51
ORD_NvDeviceLimitGet                    equ      52
ORD_NvDeviceSelectorGet                 equ      53
ORD_NvSysGetCurrentBufferFlatPointer    equ      54
ORD_NvSysSetColorCursor                 equ      70
ORD_NvSysShowHideCursor                 equ      71
ORD_NvSysGetCursorEmulatePosPointers    equ      72
ORD_NvSysFlushFifo                      equ      80
ORD_NvSysDisplayModeHook                equ      90
ORD_NvSysLockPages                      equ      100
ORD_NvSysUnlockPages                    equ      101
ORD_NvSysDriverConnect                  equ      102
ORD_NvSysDriverDisConnect               equ      103
ORD_NvSysClearScreen                    equ      200
ORD_NvSysRegisterDisplayDriver          equ      201
ORD_NvIoControl                         equ      299
ORD_Nv01Free                            equ      300
ORD_Nv01AllocRoot                       equ      301
ORD_Nv01AllocMemory                     equ      302
ORD_Nv01AllocContextDma                 equ      303
ORD_Nv01AllocChannelPio                 equ      304
ORD_Nv01AllocObject                     equ      305
ORD_Nv01AllocDevice                     equ      306
ORD_Nv03AllocChannelDma                 equ      307
ORD_Nv03DmaFlowControl                  equ      308
ORD_Nv01Interrupt                       equ      309
ORD_Nv01AllocEvent                      equ      310
ORD_NvI2CAccess                         equ      311
ORD_Nv04ConfigGetEx                     equ      312
ORD_Nv04ConfigSetEx                     equ      313
ORD_Nv04Alloc                           equ      314

; GDI and Video channel HANDLE definitions

NV_WIN_ROOT                                     equ             00002001h
NV_WIN_DEVICE                                   equ             00002002h
NV_WIN_CHANNEL                                  equ             00002003h

;
; GDI Context Dma Handles
;

NV_WIN_CONTEXT_DMA_TO_SYS_MEMORY                EQU             00001000h
NV_WIN_WB_CONTEXT_DMA_TO_VIDEO_MEMORY           EQU             00001002h
NV_WIN_WB_CONTEXT_DMA_TO_SYS_MEMORY             EQU             00001003h
NV_WIN_NOTIFIER_CONTEXT_DMA_TO_MEMORY           EQU             00001005h
NV_WIN_PUSHER_NOTIFIER_CONTEXT_DMA_TO_MEMORY    EQU             00001007h
NV_WIN_CONTEXT_DMA_IN_MEMORY                    EQU             00001010h
NV_WIN_CONTEXT_DMA_FROM_VIDEO_MEMORY            EQU             00001012h
NV_WIN_CONTEXT_DMA_FROM_MEMORY                  EQU             00001015h
NV_WIN_WB_CONTEXT_DMA_FROM_SYS_MEMORY           EQU             00001017h
NV_WIN_VIDEO_MEM_TO_SYSTEM_MEM_FORMAT           EQU             00001020h
NV_WIN_WB_VIDEO_MEM_TO_SYSTEM_MEM_FORMAT        EQU             00001022h

NV01_NULL_OBJECT                                equ             0

comment ~
*/

#define ORD_WEP                                  1
#define ORD_NvSysDispatch                        3
#define ORD_NvSysNotifyCallback                  4
#define ORD_NvSysIpcCallback                     5
#define ORD_NvSysClientExit                      6
#define ORD_NVSysSetCursor                       7
#define ORD_NvSysMoveCursor                      8
#define ORD_NvSysGetScreenInfo                   9
#define ORD_NvSysOpen                            10
#define ORD_NvSysClose                           11
#define ORD_NvSysGetRamInfo                      12
#define ORD_NvSysSetCanvasRect                   13
#define ORD_NvSysSetCanvasClip                   14
#define ORD_NvSysInstallCallback                 15
#define ORD_NvSysAllocPages                      16
#define ORD_NvSysFreePages                       17
#define ORD_NvInstallCallback                    22
#define ORD_NvSysGetBufferInfo                   23
#define ORD_NvSysSetCanvas                       24
#define ORD_NvConfigGet                          25
#define ORD_NvConfigSet                          26
#define ORD_NvConfigUpdate                       27
#define ORD_NvConfigVersion                      28
#define ORD_NvConfigVga                          29
#define ORD_NvSysSetCanvasRegion                 30
#define ORD_NvSysSetCursorImage                  35
#define ORD_DllEntryPoint                        40
#define ORD_THK_ThunkData16                      41
#define ORD_NvSysGetHardwarePointers             50
#define ORD_NvDeviceBaseGet                      51
#define ORD_NvDeviceLimitGet                     52
#define ORD_NvDeviceSelectorGet                  53
#define ORD_NvSysGetCurrentBufferFlatPointe      54
#define ORD_NvSysSetColorCursor                  70
#define ORD_NvSysShowHideCursor                  71
#define ORD_NvSysGetCursorEmulatePosPointer      72
#define ORD_NvSysFlushFifo                       80
#define ORD_NvSysDisplayModeHook                 90
#define ORD_NvSysLockPages                       100
#define ORD_NvSysUnlockPages                     101
#define ORD_NvSysDriverConnect                   102
#define ORD_NvSysDriverDisConnect                103
#define ORD_NvSysClearScreen                     200
#define ORD_NvIoControl                          299
#define ORD_Nv01Free                             300
#define ORD_Nv01AllocRoot                        301
#define ORD_Nv01AllocMemory                      302
#define ORD_Nv01AllocContextDma                  303
#define ORD_Nv01AllocChannelPio                  304
#define ORD_Nv01AllocObject                      305
#define ORD_Nv01AllocDevice                      306
#define ORD_Nv03AllocChannelDma                  307
#define ORD_Nv03DmaFlowControl                   308
#define ORD_Nv01Interrupt                        309
#define ORD_Nv01AllocEvent                       310
#define ORD_NvI2CAccess                          311


// GDI and Video channel HANDLE definitions

#define NV_WIN_ROOT                              0x00002001
#define NV_WIN_DEVICE                            0x00002002
#define NV_WIN_CHANNEL                           0x00002003

/* ~


;  funct NV01_ALLOC_ROOT parameters
ALLOC_ROOT_PARAM    STRUC           ;                   */ typedef struct {                 /*
    ALLOC_ROOT_hObjectNew   dd  ?   ; client handle ret */ unsigned long    hObjectNew;     /*
    ALLOC_ROOT_hClass       dd  ?   ;                   */ unsigned long    hClass;         /*
    ALLOC_ROOT_status       dd  ?   ;                   */ unsigned long    status;         /*
ALLOC_ROOT_PARAM    ENDS            ;                   */ } Alloc_Root_Param;              /*

; Neat-o! MASM 5.20 is only good for 31 characters on identifiers!
; Equates definitions must be unique before this point:
;                              |

ALLOC_ROOT_STATUS_SUCCESS                       equ     00000000h
ALLOC_ROOT_STATUS_ERROR_OPERATING_SYSTEM        equ     00000001h
ALLOC_ROOT_STATUS_ERROR_BAD_PARENT_OBJECT       equ     00000002h
ALLOC_ROOT_STATUS_ERROR_BAD_NEW_OBJECT          equ     00000003h
ALLOC_ROOT_STATUS_ERROR_BAD_CLASS               equ     00000004h
ALLOC_ROOT_STATUS_ERROR_INSUFFICIENT_RESOURCES  equ     00000005h

ALLOC_ROOT_CLASS_ROOT                           equ     00000000h

Nv01AllocRoot_MAC macro buffer,hClass
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hClass
        mov     [bx].ALLOC_ROOT_hClass,edx
        mov     [bx].ALLOC_ROOT_status,ALLOC_ROOT_STATUS_SUCCESS
        cCall   Nv01AllocRoot
        pop     edx
endm

comment ~  */

#define ALLOC_ROOT_STATUS_SUCCESS                       0x00000000
#define ALLOC_ROOT_STATUS_ERROR_OPERATING_SYSTEM        0x00000001
#define ALLOC_ROOT_STATUS_ERROR_BAD_PARENT_OBJECT       0x00000002
#define ALLOC_ROOT_STATUS_ERROR_BAD_NEW_OBJECT          0x00000003
#define ALLOC_ROOT_STATUS_ERROR_BAD_CLASS               0x00000004
#define ALLOC_ROOT_STATUS_ERROR_INSUFFICIENT_RESOURCES  0x00000005

#define ALLOC_ROOT_CLASS_ROOT                           0x00000000

/* ~


NVOS21_STATUS_SUCCESS                           equ     00000000
NVOS21_STATUS_ERROR_OPERATING_SYSTEM            equ     00000001
NVOS21_STATUS_ERROR_BAD_ROOT                    equ     00000002
NVOS21_STATUS_ERROR_BAD_OBJECT_PARENT           equ     00000003
NVOS21_STATUS_ERROR_BAD_OBJECT_NEW              equ     00000004
NVOS21_STATUS_ERROR_BAD_CLASS                   equ     00000005
NVOS21_STATUS_ERROR_INSUFFICIENT_RESOURCES      equ     00000006

ALLOC_PARAM      STRUC
  ALLOC_hRoot                   dd      ?
  ALLOC_hObjectParent           dd      ?
  ALLOC_hObjectNew              dd      ?
  ALLOC_hClass                  dd      ?
  ALLOC_pAllocParms             dd      ?
  ALLOC_Null                    dd      0       
  ALLOC_status                  dd      ?
ALLOC_PARAM      ENDS

ALLOC_DEV_PARAM    STRUC            ;                   */ typedef struct {                 /*
    ALLOC_DEV_hObjectParent dd  ?   ; client handle     */ unsigned long    hObjectParent;  /*
    ALLOC_DEV_hObjectNew    dd  ?   ;                   */ unsigned long    hObjectNew;     /*
    ALLOC_DEV_hClass        dd  ?   ;                   */ unsigned long    hClass;         /*
    ALLOC_DEV_szName        dd  ?   ;                   */ unsigned long    szName;         /*
    ALLOC_DEV_status        dd  ?   ;                   */ unsigned long    status;         /*
ALLOC_DEV_PARAM    ENDS             ;                   */ } Alloc_Dev_Param;               /*

ALLOC_DEV_STATUS_SUCCESS                        equ     00000000h
ALLOC_DEV_STATUS_ERR_OPERATING_SYSTEM           equ     00000001h
ALLOC_DEV_STATUS_ERR_BAD_PARENT_OBJECT          equ     00000002h
ALLOC_DEV_STATUS_ERR_BAD_NEW_OBJECT             equ     00000003h
ALLOC_DEV_STATUS_ERR_BAD_CLASS                  equ     00000004h
ALLOC_DEV_STATUS_ERR_INSUFFICIENT_RESOURCES     equ     00000005h

Nv01AllocDevice_MAC macro buffer,hObjectParent,hObjectNew,hClass,szName
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hObjectParent
        mov     [bx].ALLOC_DEV_hObjectParent, edx
        mov     edx, hObjectNew
        mov     [bx].ALLOC_DEV_hObjectNew, edx
        mov     edx, hClass
        mov     [bx].ALLOC_DEV_hClass, edx

        lea     ax, szName              ; Flatten the device name
        mov     dx, ds

        DPMI_Flatten

        shl     edx, 16
        mov     dx, ax

        lea     bx, buffer
        mov     [bx].ALLOC_DEV_szName, edx
        mov     [bx].ALLOC_DEV_status,ALLOC_DEV_STATUS_SUCCESS
        cCall   Nv01AllocDevice
        pop     edx
endm

; THE C-EQUIVALENTS OF THESE DEFINITIONS ARE FOUND IN NV32.H
; KEEP THEM IN SYNC!
NV01_DEVICE_0                                   equ     00000080h
NV01_DEVICE_1                                   equ     00000081h
NV01_DEVICE_2                                   equ     00000082h
NV01_DEVICE_3                                   equ     00000083h
NV01_DEVICE_4                                   equ     00000084h
NV01_DEVICE_5                                   equ     00000085h
NV01_DEVICE_6                                   equ     00000086h
NV01_DEVICE_7                                   equ     00000087h
NV01_CONTEXT_DMA                                equ     00000002h
NV01_CONTEXT_DMA_FROM_MEMORY                    equ     00000002h
NV01_CONTEXT_DMA_TO_MEMORY                      equ     00000003h
NV01_CONTEXT_DMA_IN_MEMORY                      equ     0000003Dh
NV01_CONTEXT_ERROR_TO_MEMORY                    equ     0000003Eh
NV03_CHANNEL_PIO                                equ     0000006Ah
NV03_CHANNEL_DMA                                equ     0000006Bh
NV04_CHANNEL_DMA                                equ     0000006Ch
NV01_MEMORY_SYSTEM                              equ     0000003Eh
NV01_MEMORY_LOCAL_PRIVILEGED                    equ     0000003Fh
NV01_MEMORY_LOCAL_USER                          equ     00000040h

comment ~  */

#define ALLOC_DEV_STATUS_SUCCESS                        0x00000000
#define ALLOC_DEV_STATUS_ERR_OPERATING_SYSTEM           0x00000001
#define ALLOC_DEV_STATUS_ERR_BAD_OBJECT_PARENT          0x00000002
#define ALLOC_DEV_STATUS_ERR_BAD_OBJECT_NEW             0x00000003
#define ALLOC_DEV_STATUS_ERR_BAD_CLASS                  0x00000004
#define ALLOC_DEV_STATUS_ERR_INSUFFICIENT_RESOURCES     0x00000005

/* ~

ALLOC_MEMORY_PARAM     STRUC           ;               */ typedef struct {                 /*
    ALLOC_MEMORY_hObjectClient dd  ?   ; client handle */ unsigned long    hObjectClient;  /*
    ALLOC_MEMORY_hObjectParent dd  ?   ;               */ unsigned long    hObjectParent;  /*
    ALLOC_MEMORY_hObjectNew    dd  ?   ;               */ unsigned long    hObjectNew;     /*
    ALLOC_MEMORY_hClass        dd  ?   ;               */ unsigned long    hClass;         /*
    ALLOC_MEMORY_flags         dd  ?   ;               */ unsigned long    flags;          /*
    ALLOC_MEMORY_pBase         dd  ?   ;               */ unsigned long    pBase;          /*
                               dd  ?   ;               */ unsigned long    pBase_high;     /*
    ALLOC_MEMORY_pLimit        dd  ?   ;               */ unsigned long    pLimit;         /*
                               dd  ?   ;               */ unsigned long    pLimit_high;    /*
    ALLOC_MEMORY_status        dd  ?   ;               */ unsigned long    status;         /*
ALLOC_MEMORY_PARAM     ENDS            ;               */ } Alloc_Memory_Param;            /*

ALLOC_MEMORY_FLAGS_CONTIGUOUS_PHYSICALITY               equ 00000000h
ALLOC_MEMORY_FLAGS_NONCONTIGUOUS_PHYSICALITY            equ 00000010h

ALLOC_MEMORY_FLAGS_LOCATION_PCI                         equ 00000000h
ALLOC_MEMORY_FLAGS_LOCATION_AGP                         equ 00000100h

ALLOC_MEMORY_FLAGS_UNCACHED                             equ 00000000h
ALLOC_MEMORY_FLAGS_CACHED                               equ 00001000h
ALLOC_MEMORY_FLAGS_WRITE_COMBINE                        equ 00002000h
ALLOC_MEMORY_FLAGS_WRITE_THROUGH                        equ 00003000h
ALLOC_MEMORY_FLAGS_WRITE_PROTECT                        equ 00004000h
ALLOC_MEMORY_FLAGS_WRITE_BACK                           equ 00005000h

ALLOC_MEMORY_STATUS_SUCCESS                             equ 00000000h
ALLOC_MEMORY_STATUS_ERR_OPERATING_SYSTEM                equ 00000001h
ALLOC_MEMORY_STATUS_ERR_BAD_PARENT_OBJECT               equ 00000002h
ALLOC_MEMORY_STATUS_ERR_BAD_NEW_OBJECT                  equ 00000003h
ALLOC_MEMORY_STATUS_ERR_BAD_CLASS                       equ 00000004h
ALLOC_MEMORY_STATUS_ERR_BAD_FLAGS                       equ 00000005h
ALLOC_MEMORY_STATUS_ERR_INSUFFICIENT_RESOURCES          equ 00000006h

Nv01AllocMemory_MAC macro buffer,hObjectClient,hObjectParent,hObjectNew,hClass,flags,limit
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hObjectClient
        mov     [bx].ALLOC_MEMORY_hObjectClient,edx
        mov     edx, hObjectParent
        mov     [bx].ALLOC_MEMORY_hObjectParent,edx
        mov     edx, hObjectNew
        mov     [bx].ALLOC_MEMORY_hObjectNew,edx
        mov     edx, hClass
        mov     [bx].ALLOC_MEMORY_hClass,edx
        mov     edx, flags
        mov     [bx].ALLOC_MEMORY_flags,edx
        mov     dword ptr [bx].ALLOC_MEMORY_pBase, 0
        mov     dword ptr [bx].ALLOC_MEMORY_pBase+4, 0
        mov     edx, limit
        mov     [bx].ALLOC_MEMORY_pLimit,edx
        mov     dword ptr [bx].ALLOC_MEMORY_pLimit+4, 0
        mov     [bx].ALLOC_MEMORY_status,ALLOC_MEMORY_STATUS_SUCCESS
        cCall   Nv01AllocMemory
        pop     edx
endm

comment ~  */

#define ALLOC_MEMORY_FLAGS_CONTIGUOUS_PHYSICALITY               0x00000000
#define ALLOC_MEMORY_FLAGS_NONCONTIGUOUS_PHYSICALITY            0x00000010

#define ALLOC_MEMORY_FLAGS_LOCATION_PCI                         0x00000000
#define ALLOC_MEMORY_FLAGS_LOCATION_AGP                         0x00000100

#define ALLOC_MEMORY_FLAGS_UNCACHED                             0x00000000
#define ALLOC_MEMORY_FLAGS_CACHED                               0x00001000
#define ALLOC_MEMORY_FLAGS_WRITE_COMBINE                        0x00002000
#define ALLOC_MEMORY_FLAGS_WRITE_THROUGH                        0x00003000
#define ALLOC_MEMORY_FLAGS_WRITE_PROTECT                        0x00004000
#define ALLOC_MEMORY_FLAGS_WRITE_BACK                           0x00005000

#define ALLOC_MEMORY_STATUS_SUCCESS                             0x00000000
#define ALLOC_MEMORY_STATUS_ERR_OPERATING_SYSTEM                0x00000001
#define ALLOC_MEMORY_STATUS_ERR_BAD_PARENT_OBJECT               0x00000002
#define ALLOC_MEMORY_STATUS_ERR_BAD_NEW_OBJECT                  0x00000003
#define ALLOC_MEMORY_STATUS_ERR_BAD_CLASS                       0x00000004
#define ALLOC_MEMORY_STATUS_ERR_BAD_FLAGS                       0x00000005
#define ALLOC_MEMORY_STATUS_ERR_INSUFFICIENT_RESOURCES          0x00000006

/* ~

ALLOC_CTX_DMA_PARAM    STRUC            ;               */ typedef struct {                 /*
    ALLOC_CTX_DMA_hObjectParent dd  ?   ; client handle */ unsigned long    hObjectParent;  /*
    ALLOC_CTX_DMA_hObjectNew    dd  ?   ;               */ unsigned long    hObjectNew;     /*
    ALLOC_CTX_DMA_hClass        dd  ?   ;               */ unsigned long    hClass;         /*
    ALLOC_CTX_DMA_flags         dd  ?   ;               */ unsigned long    flags;          /*
    ALLOC_CTX_DMA_pBase         dd  ?   ;               */ unsigned long    pBase;          /*
                                dd  ?   ;               */ unsigned long    pBase_high;     /*
    ALLOC_CTX_DMA_limit         dd  ?   ;               */ unsigned long    limit;          /*
                                dd  ?   ;               */ unsigned long    limit_high;     /*
    ALLOC_CTX_DMA_status        dd  ?   ;               */ unsigned long    status;         /*
ALLOC_CTX_DMA_PARAM    ENDS             ;               */ } Alloc_Ctx_DMA_Param;           /*

ALLOC_CTX_DMA_FLAGS_ACCESS_RD_WR                        equ 00000000h
ALLOC_CTX_DMA_FLAGS_ACCESS_READ_ONLY                    equ 00000001h
ALLOC_CTX_DMA_FLAGS_ACCESS_WRITE_ONLY                   equ 00000002h

ALLOC_CTX_DMA_FLAGS_CONTIGUOUS_PHYSICALITY              equ 00000000h
ALLOC_CTX_DMA_FLAGS_NONCONTIGUOUS_PHYSICALITY           equ 00000010h

ALLOC_CTX_DMA_FLAGS_LOCKED_ALWAYS                       equ 00000000h
ALLOC_CTX_DMA_FLAGS_LOCKED_IN_TRANSIT                   equ 00000100h

ALLOC_CTX_DMA_FLAGS_COHERENCY_UNCACHED                  equ 00000000h
ALLOC_CTX_DMA_FLAGS_COHERENCY_CACHED                    equ 00001000h

ALLOC_CTX_DMA_FLAGS_LOCKED_CACHED                       equ ALLOC_CTX_DMA_FLAGS_LOCKED_ALWAYS + ALLOC_CTX_DMA_FLAGS_COHERENCY_CACHED

ALLOC_CTX_DMA_STATUS_SUCCESS                            equ 00000000h
ALLOC_CTX_DMA_STATUS_ERR_OPERATING_SYSTEM               equ 00000001h
ALLOC_CTX_DMA_STATUS_ERR_BAD_PARENT_OBJECT              equ 00000002h
ALLOC_CTX_DMA_STATUS_ERR_BAD_NEW_OBJECT                 equ 00000003h
ALLOC_CTX_DMA_STATUS_ERR_BAD_CLASS                      equ 00000004h
ALLOC_CTX_DMA_STATUS_ERR_BAD_FLAGS                      equ 00000005h
ALLOC_CTX_DMA_STATUS_ERR_BAD_BASE                       equ 00000006h
ALLOC_CTX_DMA_STATUS_ERR_BAD_LIMIT                      equ 00000007h
ALLOC_CTX_DMA_STATUS_ERR_PROTECTION_FAULT               equ 00000008h
ALLOC_CTX_DMA_STATUS_ERR_MULTIPLE_MEMORY_TYPES          equ 00000009h
ALLOC_CTX_DMA_STATUS_ERR_INSUFFICIENT_RESOURCES         equ 0000000ah

Nv01AllocContextDma_MAC macro buffer,hObjectParent,hObjectNew,hClass,flags,sel,pBase,limit
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hObjectParent
        mov     [bx].ALLOC_CTX_DMA_hObjectParent,edx
        mov     edx, hObjectNew
        mov     [bx].ALLOC_CTX_DMA_hObjectNew,edx
        mov     edx, hClass
        mov     [bx].ALLOC_CTX_DMA_hClass,edx
        mov     edx, flags
        mov     [bx].ALLOC_CTX_DMA_flags,edx
        mov     edx, pBase
        mov     [bx].ALLOC_CTX_DMA_pBase,edx
        mov     dx, sel
        mov     word ptr [bx].ALLOC_CTX_DMA_pBase+4, dx
        mov     word ptr [bx].ALLOC_CTX_DMA_pBase+6, 0
        mov     edx, limit
        mov     [bx].ALLOC_CTX_DMA_limit,edx
        mov     dword ptr [bx].ALLOC_CTX_DMA_limit+4, 0
        mov     [bx].ALLOC_CTX_DMA_status,ALLOC_CTX_DMA_STATUS_SUCCESS
        cCall   Nv01AllocContextDma
        pop     edx
endm

comment ~  */

#define ALLOC_CTX_DMA_FLAGS_ACCESS_RD_WR                    0x00000000
#define ALLOC_CTX_DMA_FLAGS_ACCESS_READ_ONLY                0x00000001
#define ALLOC_CTX_DMA_FLAGS_ACCESS_WRITE_ONLY               0x00000002

#define ALLOC_CTX_DMA_FLAGS_CONTIGUOUS_PHYSICALITY          0x00000000
#define ALLOC_CTX_DMA_FLAGS_NONCONTIGUOUS_PHYSICALITY       0x00000010

#define ALLOC_CTX_DMA_FLAGS_LOCKED_ALWAYS                   0x00000000
#define ALLOC_CTX_DMA_FLAGS_LOCKED_IN_TRANSIT               0x00000100

#define ALLOC_CTX_DMA_FLAGS_COHERENCY_UNCACHED              0x00000000
#define ALLOC_CTX_DMA_FLAGS_COHERENCY_CACHED                0x00001000

#define ALLOC_CTX_DMA_FLAGS_LOCKED_CACHED                   ALLOC_CTX_DMA_FLAGS_LOCKED_ALWAYS + ALLOC_CTX_DMA_FLAGS_COHERENCY_CACHED

#define ALLOC_CTX_DMA_STATUS_SUCCESS                        0x00000000
#define ALLOC_CTX_DMA_STATUS_ERR_OPERATING_SYSTEM           0x00000001
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_PARENT_OBJECT          0x00000002
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_NEW_OBJECT             0x00000003
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_CLASS                  0x00000004
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_FLAGS                  0x00000005
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_BASE                   0x00000006
#define ALLOC_CTX_DMA_STATUS_ERR_BAD_LIMIT                  0x00000007
#define ALLOC_CTX_DMA_STATUS_ERR_PROTECTION_FAULT           0x00000008
#define ALLOC_CTX_DMA_STATUS_ERR_MULTIPLE_MEMORY_TYPES      0x00000009
#define ALLOC_CTX_DMA_STATUS_ERR_INSUFFICIENT_RESOURCES     0x0000000a

/* ~

ALLOC_CHL_PIO_PARAM    STRUC            ;               */ typedef struct {                 /*
    ALLOC_CHL_PIO_hClient       dd  ?   ;               */ unsigned long    hClient;        /*
    ALLOC_CHL_PIO_hObjectParent dd  ?   ;               */ unsigned long    hObjectParent;  /*
    ALLOC_CHL_PIO_hObjectNew    dd  ?   ;               */ unsigned long    hObjectNew;     /*
    ALLOC_CHL_PIO_hClass        dd  ?   ;               */ unsigned long    hClass;         /*
    ALLOC_CHL_PIO_hObjectError  dd  ?   ;               */ unsigned long    hObjectError;   /*
    ALLOC_CHL_PIO_pChannel      dd  ?   ;               */ unsigned long    pChannel;       /*
                                dd  ?   ;               */ unsigned long    pChannel_high;  /*
    ALLOC_CHL_PIO_flags         dd  ?   ;               */ unsigned long    flags;          /*
    ALLOC_CHL_PIO_status        dd  ?   ;               */ unsigned long    status;         /*
ALLOC_CHL_PIO_PARAM    ENDS             ;               */ } Alloc_Chl_PIO_Param;           /*

ALLOC_CHL_PIO_FLAGS_FIFO_IGNORE_RUNOUT                  equ 00000000h
ALLOC_CHL_PIO_FLAGS_FIFO_ERROR_RUNOUT                   equ 00000001h

ALLOC_CHL_PIO_STATUS_SUCCESS                            equ 00000000h
ALLOC_CHL_PIO_STATUS_ERR_OPERATING_SYSTEM               equ 00000001h
ALLOC_CHL_PIO_STATUS_ERR_BAD_PARENT_OBJECT              equ 00000002h
ALLOC_CHL_PIO_STATUS_ERR_BAD_NEW_OBJECT                 equ 00000003h
ALLOC_CHL_PIO_STATUS_ERR_BAD_CLASS                      equ 00000004h
ALLOC_CHL_PIO_STATUS_ERR_BAD_OBJECT_ERROR               equ 00000005h
ALLOC_CHL_PIO_STATUS_ERR_BAD_FLAGS                      equ 00000006h
ALLOC_CHL_PIO_STATUS_ERR_INSUFFICIENT_RESOURCES         equ 00000007h

Nv01AllocChannelPio_MAC macro buffer,hClient,hObjectParent,hObjectNew,hClass,hObjectError,flags
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hClient
        mov     [bx].ALLOC_CHL_PIO_hClient, edx
        mov     edx, hObjectParent
        mov     [bx].ALLOC_CHL_PIO_hObjectParent, edx
        mov     edx, hObjectNew
        mov     [bx].ALLOC_CHL_PIO_hObjectNew, edx
        mov     edx, hClass
        mov     [bx].ALLOC_CHL_PIO_hClass, edx
        mov     edx, hObjectError
        mov     [bx].ALLOC_CHL_PIO_hObjectError, edx
        mov     dword ptr [bx].ALLOC_CHL_PIO_pChannel, 0
        mov     dword ptr [bx].ALLOC_CHL_PIO_pChannel+4, 0
        mov     edx, flags
        mov     [bx].ALLOC_CHL_PIO_flags,edx
        mov     [bx].ALLOC_CHL_PIO_status,ALLOC_CHL_PIO_STATUS_SUCCESS
        cCall   Nv01AllocChannelPio
        pop     edx
endm

comment ~  */

#define ALLOC_CHL_PIO_FLAGS_FIFO_IGNORE_RUNOUT              0x00000000
#define ALLOC_CHL_PIO_FLAGS_FIFO_ERROR_RUNOUT               0x00000001

#define ALLOC_CHL_PIO_STATUS_SUCCESS                        0x00000000
#define ALLOC_CHL_PIO_STATUS_ERR_OPERATING_SYSTEM           0x00000001
#define ALLOC_CHL_PIO_STATUS_ERR_BAD_PARENT_OBJECT          0x00000002
#define ALLOC_CHL_PIO_STATUS_ERR_BAD_NEW_OBJECT             0x00000003
#define ALLOC_CHL_PIO_STATUS_ERR_BAD_CLASS                  0x00000004
#define ALLOC_CHL_PIO_STATUS_ERR_BAD_OBJECT_ERROR           0x00000005
#define ALLOC_CHL_PIO_STATUS_ERR_BAD_FLAGS                  0x00000006
#define ALLOC_CHL_PIO_STATUS_ERR_INSUFFICIENT_RESOURCES     0x00000007

/* ~
;  funct NV03_ALLOC_CHANNEL_DMA parameters
ALLOC_CHL_DMA_PARAM STRUC                           ;               */ typedef struct {                 /*
    ALLOC_CHL_DMA_hClient       dd  ?   ;               */ unsigned long    hClient;        /*
    ALLOC_CHL_DMA_hObjectParent dd  ?   ;               */ unsigned long    hObjectParent;  /*
    ALLOC_CHL_DMA_hObjectNew    dd  ?   ;               */ unsigned long    hObjectNew;     /*
    ALLOC_CHL_DMA_hClass        dd  ?   ;               */ unsigned long    hClass;         /*
    ALLOC_CHL_DMA_hObjectError  dd  ?   ;               */ unsigned long    hObjectError;   /*
    ALLOC_CHL_DMA_hObjectBuffer dd  ?   ;               */ unsigned long    hObjectBuffer;  /*
    ALLOC_CHL_DMA_offset        dd  ?   ;               */ unsigned long    offset;         /*
    ALLOC_CHL_DMA_pControl      dd  ?   ;               */ unsigned long    pControl;       /*
                                dd  ?   ;               */ unsigned long    pControl_high;  /*
    ALLOC_CHL_DMA_status        dd  ?   ;               */ unsigned long    status;         /*
ALLOC_CHL_DMA_PARAM ENDS                                ;               */ } Alloc_Chl_DMA_Param;           /*

ALLOC_CHL_DMA_STATUS_SUCCESS                         equ        00000000h
ALLOC_CHL_DMA_STATUS_ERR_OPERATING_SYSTEM            equ        00000001h
ALLOC_CHL_DMA_STATUS_ERR_BAD_PARENT_OBJECT           equ        00000002h
ALLOC_CHL_DMA_STATUS_ERR_BAD_NEW_OBJECT              equ        00000003h
ALLOC_CHL_DMA_STATUS_ERR_BAD_CLASS                   equ        00000004h
ALLOC_CHL_DMA_STATUS_ERR_BAD_ERROR_OBJECT            equ        00000005h
ALLOC_CHL_DMA_STATUS_ERR_BAD_BUFFRE_OBJECT           equ        00000006h
ALLOC_CHL_DMA_STATUS_ERR_BAD_OFFSET                  equ        00000007h
ALLOC_CHL_DMA_STATUS_ERR_INSUFFICIENT_RESOURCES      equ        00000008h

Nv03AllocChannelDma_MAC macro buffer,hClient,hObjectParent,hObjectNew,hClass,hObjectError,hObjectBuffer,offset
        push    edx
        push    ds
        lea     bx, buffer
        push    bx
        mov     edx, hClient
        mov     [bx].ALLOC_CHL_DMA_hClient, edx
        mov     edx, hObjectParent
        mov     [bx].ALLOC_CHL_DMA_hObjectParent, edx
        mov     edx, hObjectNew
        mov     [bx].ALLOC_CHL_DMA_hObjectNew, edx
        mov     edx, hClass
        mov     [bx].ALLOC_CHL_DMA_hClass, edx
        mov     edx, hObjectError
        mov     [bx].ALLOC_CHL_DMA_hObjectError, edx
        mov     edx, hObjectBuffer
        mov     [bx].ALLOC_CHL_DMA_hObjectBuffer, edx
        mov     edx, offset
        mov     [bx].ALLOC_CHL_DMA_offset, edx
        mov     dword ptr [bx].ALLOC_CHL_DMA_pControl, 0
        mov     dword ptr [bx].ALLOC_CHL_DMA_pControl+4, 0
        mov     [bx].ALLOC_CHL_DMA_status,0
        cCall   Nv03AllocChannelDma
        pop     edx
endm

comment ~  */

#define ALLOC_CHL_DMA_STATUS_SUCCESS                        0x00000000
#define ALLOC_CHL_DMA_STATUS_ERR_OPERATING_SYSTEM           0x00000001
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_OBJECT_PARENT          0x00000002
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_OBJECT_NEW             0x00000003
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_CLASS                  0x00000004
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_OBJECT_ERROR           0x00000005
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_OBJECT_BUFFER          0x00000006
#define ALLOC_CHL_DMA_STATUS_ERR_BAD_OFFSET                 0x00000007
#define ALLOC_CHL_DMA_STATUS_ERR_INSUFFICIENT_RESOURCES     0x00000008

/* ~

NV01FREE_PARAM    STRUC                 ;               */ typedef struct {                 /*
    NV01FREE_hClient            dd  ?   ;               */ unsigned long    hClient;        /*
    NV01FREE_hObjectParent      dd  ?   ;               */ unsigned long    hObjectParent;  /*
    NV01FREE_hObjectOld         dd  ?   ;               */ unsigned long    hObjectOld;     /*
    NV01FREE_status             dd  ?   ;               */ unsigned long    status;         /*
NV01FREE_PARAM    ENDS                  ;               */ } NV01Free_Param;                /*

NV01FREE_STATUS_SUCCESS                                 equ 00000000h
NV01FREE_STATUS_ERR_OPERATING_SYSTEM                    equ 00000001h
NV01FREE_STATUS_ERR_BAD_PARENT_OBJECT                   equ 00000002h
NV01FREE_STATUS_ERR_BAD_OLD_OBJECT                      equ 00000003h
NV01FREE_STATUS_ERR_OBJECT_IN_USE                       equ 00000004h
NV01FREE_STATUS_ERR_OBJECT_HAS_CHILDERN                 equ 00000005h

Nv01Free_MAC macro buffer,hClient,hObjectParent,hObjectOld
          push  edx
          push  ds
          lea   bx, buffer
          push  bx
          mov   edx, hClient
          mov   [bx].NV01FREE_hClient, edx
          mov   edx, hObjectParent
          mov   [bx].NV01FREE_hObjectParent, edx
          mov   edx, hObjectOld
          mov   [bx].NV01FREE_hObjectOld, edx
          mov   [bx].NV01FREE_status, NV01FREE_STATUS_SUCCESS
          cCall Nv01Free
          pop   edx
endm

comment ~  */


#define NV01FREE_STATUS_SUCCESS                             0x00000000
#define NV01FREE_STATUS_ERR_OPERATING_SYSTEM                0x00000001
#define NV01FREE_STATUS_ERR_BAD_OBJECT_PARENT               0x00000002
#define NV01FREE_STATUS_ERR_BAD_OBJECT_OLD                  0x00000003
#define NV01FREE_STATUS_ERR_OBJECT_IN_USE                   0x00000004
#define NV01FREE_STATUS_ERR_OBJECT_HAS_CHILDERN             0x00000005

/* ~

ALLOC_OBJECT_PARAM        STRUC            ;               */ typedef struct {                 /*
    ALLOC_OBJECT_hClient           dd  ?   ;               */ unsigned long    hClient;        /*
    ALLOC_OBJECT_hObjectParent     dd  ?   ;               */ unsigned long    hObjectParent;  /*
    ALLOC_OBJECT_hObjectNew        dd  ?   ;               */ unsigned long    hObjectNew;     /*
    ALLOC_OBJECT_hClass            dd  ?   ;               */ unsigned long    hClass;         /*
    ALLOC_OBJECT_status            dd  ?   ;               */ unsigned long    status;         /*
ALLOC_OBJECT_PARAM        ENDS             ;               */ } AllocObject_Param;        /*

ALLOC_OBJ_STATUS_SUCCESS                                 equ 00000000h
ALLOC_OBJ_STATUS_ERR_OPERATING_SYSTEM                    equ 00000001h
ALLOC_OBJ_STATUS_ERR_BAD_PARENT_OBJECT                   equ 00000002h
ALLOC_OBJ_STATUS_ERR_BAD_NEW_OBJECT                      equ 00000003h
ALLOC_OBJ_STATUS_ERR_BAD_CLASS                           equ 00000004h
ALLOC_OBJ_STATUS_ERR_INSUFFICIENT_RESOURCES              equ 00000005h

Nv01AllocObject_MAC macro buffer,hClient,hObjectParent,hObjectNew,hClass
          push  edx
          push  ds
          lea   bx, buffer
          push  bx
          mov   edx, hClient
          mov   [bx].ALLOC_OBJECT_hClient, edx
          mov   edx, hObjectParent
          mov   [bx].ALLOC_OBJECT_hObjectParent, edx
          mov   edx, hObjectNew
          mov   [bx].ALLOC_OBJECT_hObjectNew, edx
          mov   edx, hClass
          mov   [bx].ALLOC_OBJECT_hClass, edx
          mov   [bx].ALLOC_OBJECT_status, ALLOC_OBJ_STATUS_SUCCESS
          cCall Nv01AllocObject
          pop   edx
endm

comment ~  */


#define ALLOC_OBJ_STATUS_SUCCESS                             0x00000000
#define ALLOC_OBJ_STATUS_ERR_OPERATING_SYSTEM                0x00000001
#define ALLOC_OBJ_STATUS_ERR_BAD_OBJECT_PARENT               0x00000002
#define ALLOC_OBJ_STATUS_ERR_BAD_OBJECT_OLD                  0x00000003
#define ALLOC_OBJ_STATUS_ERR_BAD_CLASS                       0x00000004
#define ALLOC_OBJ_STATUS_ERR_INSUFFICIENT_RESOURCES          0x00000005

/* ~

NVIOCONTROL_PARAM   STRUC               ;               */ typedef struct {                 /*
    NVIOCONTROL_hRoot           dd  ?   ;               */ unsigned long    hRoot;          /*
    NVIOCONTROL_hObjectParent   dd  ?   ;               */ unsigned long    hObjectParent;  /*
    NVIOCONTROL_function        dd  ?   ;               */ unsigned long    function;       /*
    NVIOCONTROL_owner           dd  ?   ;               */ unsigned long    owner;          /*
    NVIOCONTROL_type            dd  ?   ;               */ unsigned long    type;           /*
    NVIOCONTROL_depth           dd  ?   ;               */ unsigned long    depth;          /*
    NVIOCONTROL_width           dd  ?   ;               */ unsigned long    width;          /*
    NVIOCONTROL_height          dd  ?   ;               */ unsigned long    height;         /*
    NVIOCONTROL_pitch           dd  ?   ;               */ unsigned long    pitch;          /*
    NVIOCONTROL_offset          dd  ?   ;               */ unsigned long    offset;         /*
    NVIOCONTROL_size            dd  ?   ;               */ unsigned long    size;           /*
    NVIOCONTROL_address         dd  ?   ;               */ unsigned long    address;        /*
    NVIOCONTROL_limit           dd  ?   ;               */ unsigned long    limit;          /*
    NVIOCONTROL_total           dd  ?   ;               */ unsigned long    total;          /*
    NVIOCONTROL_free            dd  ?   ;               */ unsigned long    free;           /*
    NVIOCONTROL_status          dd  ?   ;               */ unsigned long    status;         /*
NVIOCONTROL_PARAM   ENDS                ;               */ } NVIOControl_Param;             /*

NVIOCONTROL_ARCH_HEAP                                   equ 0000000Bh

NVIOCONTROL_HEAP_ALLOC_DEPTH_WIDTH_HEIGHT               equ 1
NVIOCONTROL_HEAP_ALLOC_SIZE                             equ 2
NVIOCONTROL_HEAP_FREE                                   equ 3
NVIOCONTROL_HEAP_PURGE                                  equ 4
NVIOCONTROL_HEAP_INFO                                   equ 5
NVIOCONTROL_HEAP_ALLOC_TILED_PITCH_HEIGHT               equ 6
NVIOCONTROL_HEAP_DESTROY                                equ 7
NVIOCONTROL_HEAP_INFO_FREE_BLOCKS                       equ 8
NVIOCONTROL_TYPE_IMAGE                                  equ 0
NVIOCONTROL_TYPE_DEPTH                                  equ 1
NVIOCONTROL_TYPE_TEXTURE                                equ 2
NVIOCONTROL_TYPE_VIDEO_OVERLAY                          equ 3
NVIOCONTROL_TYPE_FONT                                   equ 4
NVIOCONTROL_TYPE_CURSOR                                 equ 5
NVIOCONTROL_TYPE_DMA                                    equ 6
NVIOCONTROL_TYPE_INSTANCE                               equ 7
NVIOCONTROL_TYPE_PRIMARY                                equ 8
NVIOCONTROL_STATUS_SUCCESS                              equ 00000000h
NVIOCONTROL_STATUS_ERR_INSUFFICIENT_RESOURCES           equ 00000001h
NVIOCONTROL_STATUS_ERR_FUNCTION_INVALID                 equ 00000002h
NVIOCONTROL_STATUS_ERR_OWNER_INVALID                    equ 00000003h

comment ~  */

#define NVIOCONTROL_ARCH_HEAP                               (0x0000000B)

#define NVIOCONTROL_HEAP_ALLOC_DEPTH_WIDTH_HEIGHT           1
#define NVIOCONTROL_HEAP_ALLOC_SIZE                         2
#define NVIOCONTROL_HEAP_FREE                               3
#define NVIOCONTROL_HEAP_PURGE                              4
#define NVIOCONTROL_HEAP_INFO                               5
#define NVIOCONTROL_HEAP_ALLOC_TILED_PITCH_HEIGHT           6
#define NVIOCONTROL_TYPE_IMAGE                              0
#define NVIOCONTROL_TYPE_DEPTH                              1
#define NVIOCONTROL_TYPE_TEXTURE                            2
#define NVIOCONTROL_TYPE_VIDEO_OVERLAY                      3
#define NVIOCONTROL_TYPE_FONT                               4
#define NVIOCONTROL_TYPE_CURSOR                             5
#define NVIOCONTROL_TYPE_DMA                                6
#define NVIOCONTROL_TYPE_INSTANCE                           7
#define NVIOCONTROL_TYPE_PRIMARY                            8
#define NVIOCONTROL_STATUS_SUCCESS                          (0x00000000)
#define NVIOCONTROL_STATUS_ERR_INSUFFICIENT_RESOURCES       (0x00000001)
#define NVIOCONTROL_STATUS_ERR_FUNCTION_INVALID             (0x00000002)
#define NVIOCONTROL_STATUS_ERR_OWNER_INVALID                (0x00000003)


/* ~

; This must be identical to what is NVRMWIN.H - 
; it would be nice if we could use this definition only.

_def_rmParams   STRUC                   ;       */      typedef struct _def_rmParams {      /*
    RegEAX              dd      ?       ;       */          unsigned long    RegEAX;        /*
    RegEBX              dd      ?       ;       */          unsigned long    RegEBX;        /*
    RegECX              dd      ?       ;       */          unsigned long    RegECX;        /*
    RegEDX              dd      ?       ;       */          unsigned long    RegEDX;        /*
    RegEDI              dd      ?       ;       */          unsigned long    RegEDI;        /*
    RegESI              dd      ?       ;       */          unsigned long    RegESI;        /*
    RegES               dd      ?       ;       */          unsigned long    RegES;         /*
    RegDS               dd      ?       ;       */          unsigned long    RegDS;         /*
    RegCS               dd      ?       ;       */          unsigned long    RegCS;         /*
_def_rmParams   ENDS                    ;       */      } RMPARAMS, *PRMPARAMS;             /*

RMPARAMS        TYPEDEF         _def_rmParams
PRMPARAMS       TYPEDEF         PTR _def_rmParams

comment ~  */

/* ~
comment ~  */

/* ~
comment ~  */

#endif  // NVRMARCH_INCLUDED
/* ~

endif   ; NVRMARCH_INCLUDED

;*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvRmR0Api.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  NVIDIA, Corp. of Sunnyvale,  California owns     *|
|*     copyrights, patents, and has design patents pending on the design     *|
|*     and  interface  of the NV chips.   Users and  possessors  of this     *|
|*     source code are hereby granted a nonexclusive, royalty-free copy-     *|
|*     right  and design patent license  to use this code  in individual     *|
|*     and commercial software.                                              *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright  1993-1998  NVIDIA,  Corporation.   NVIDIA  has  design     *|
|*     patents and patents pending in the U.S. and foreign countries.        *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF THIS SOURCE CODE FOR ANY PURPOSE. IT IS PROVIDED "AS IS" WITH-     *|
|*     OUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPORATION     *|
|*     DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, INCLUD-     *|
|*     ING ALL IMPLIED WARRANTIES  OF MERCHANTABILITY  AND FITNESS FOR A     *|
|*     PARTICULAR  PURPOSE.  IN NO EVENT  SHALL NVIDIA,  CORPORATION  BE     *|
|*     LIABLE FOR ANY SPECIAL,  INDIRECT,  INCIDENTAL,  OR CONSEQUENTIAL     *|
|*     DAMAGES, OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,     *|
|*     DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *|
|*     OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION  WITH THE     *|
|*     USE OR PERFORMANCE OF THIS SOURCE CODE.                               *|
|*                                                                           *|
|*     RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the     *|
|*     Government is subject  to restrictions  as set forth  in subpara-     *|
|*     graph (c) (1) (ii) of the Rights  in Technical Data  and Computer     *|
|*     Software  clause  at DFARS  52.227-7013 and in similar clauses in     *|
|*     the FAR and NASA FAR Supplement.                                      *|
|*                                                                           *|
 \***************************************************************************/

/*
 * NvRmR0Api.h
 *
 * NVidia resource manager API header file exported to drivers which are operating in Ring0
 *
 */

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

// NOTE NOTE NOTE
// Those functions which are commented out are not yet implemented for the Ring0 interface

//HANDLE __stdcall NvRmR0Open(VOID);
//VOID   __stdcall NvRmR0Close(VOID);
ULONG  __stdcall NvRmR0AllocRoot(ULONG *phClient);
ULONG  __stdcall NvRmR0AllocDevice(ULONG hClient, ULONG hDevice, ULONG hClass, PUCHAR szName);
ULONG  __stdcall NvRmR0AllocContextDma(ULONG hClient, ULONG hDma, ULONG hClass, ULONG flags, PVOID base, ULONG limit);
ULONG  __stdcall NvRmR0AllocChannelPio(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hClass, ULONG hErrorCtx, PVOID *ppChannel, ULONG flags);
ULONG  __stdcall NvRmR0AllocChannelDma(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hClass, ULONG hErrorCtx, ULONG hDataCtx, ULONG offset, PVOID *ppChannel);
ULONG  __stdcall NvRmR0AllocMemory(ULONG hClient, ULONG hParent, ULONG hMemory, ULONG hClass, ULONG flags, PVOID *ppAddress, ULONG *pLimit);
ULONG  __stdcall NvRmR0AllocObject(ULONG hClient, ULONG hChannel, ULONG hObject, ULONG hClass);
ULONG  __stdcall NvRmR0Alloc(ULONG hClient, ULONG hChannel, ULONG hObject, ULONG hClass, PVOID pAllocParms);
ULONG  __stdcall NvRmR0Free(ULONG hClient, ULONG hParent, ULONG hObject);
//ULONG  __stdcall Nv3RmR0GetDmaPushInfo(ULONG hClient, ULONG hDevice, ULONG hChannel, ULONG hDmaContext, ULONG get);
ULONG  __stdcall NvRmR0AllocEvent(ULONG hClient, ULONG hParent, ULONG object, ULONG hClass, ULONG hIndex, PVOID hEvent);
//ULONG  __stdcall NvRmR0ConfigVersion(ULONG hClient, ULONG hDevice, ULONG *pVersion);
//ULONG  __stdcall NvRmR0ConfigGet(ULONG hClient, ULONG hDevice, ULONG index, ULONG *pValue);
//ULONG  __stdcall NvRmR0ConfigSet(ULONG hClient, ULONG hDevice, ULONG index, ULONG newValue, ULONG *pOldValue);
//ULONG  __stdcall NvRmR0ConfigUpdate(ULONG hClient, ULONG hDevice, ULONG flags);
ULONG  __stdcall NvRmR0Interrupt(ULONG hClient, ULONG hDevice);
ULONG  __stdcall NvRmR0I2CAccess(ULONG hClient, ULONG hDevice, VOID* pCtrlStruct );

#ifdef __cplusplus
}
#endif //__cplusplus
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvRmStereo.h ===
#ifndef _NVRM_STEREO_H_
#define _NVRM_STEREO_H_

 /***************************************************************************\
|*                                                                           *|
|*        Copyright (c) 1993-2000 NVIDIA, Corp.  All rights reserved.        *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.   NVIDIA, Corp. of Sunnyvale, California owns     *|
|*     the copyright  and as design patents  pending  on the design  and     *|
|*     interface  of the NV chips.   Users and possessors of this source     *|
|*     code are hereby granted  a nonexclusive,  royalty-free  copyright     *|
|*     and  design  patent license  to use this code  in individual  and     *|
|*     commercial software.                                                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright (c) 1993-2000  NVIDIA, Corp.    NVIDIA  design  patents     *|
|*     pending in the U.S. and foreign countries.                            *|
|*                                                                           *|
|*     NVIDIA, CORP.  MAKES  NO REPRESENTATION ABOUT  THE SUITABILITY OF     *|
|*     THIS SOURCE CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT     *|
|*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORP. DISCLAIMS     *|
|*     ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,  INCLUDING  ALL     *|
|*     IMPLIED   WARRANTIES  OF  MERCHANTABILITY  AND   FITNESS   FOR  A     *|
|*     PARTICULAR  PURPOSE.   IN NO EVENT SHALL NVIDIA, CORP.  BE LIABLE     *|
|*     FOR ANY SPECIAL, INDIRECT, INCIDENTAL,  OR CONSEQUENTIAL DAMAGES,     *|
|*     OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,  DATA OR     *|
|*     PROFITS,  WHETHER IN AN ACTION  OF CONTRACT,  NEGLIGENCE OR OTHER     *|
|*     TORTIOUS ACTION, ARISING OUT  OF OR IN CONNECTION WITH THE USE OR     *|
|*     PERFORMANCE OF THIS SOURCE CODE.                                      *|
|*                                                                           *|
 \***************************************************************************/

/**************** Resource Manager Defines and Structures ******************\
*                                                                           *
* Module: NvRmStereo.h                                                      *
*		Resource Manager stereo interface structure.						*
*                                                                           *
*****************************************************************************
*                                                                           *
* History:																	*
*		Andrei Osnovich  03/17/2000 Created. 								*
*       Martin Schwarzer 10/11/2000 added flags to use interface for NT4/W2K*
*                                   opengl api stereo                       *
*                                                                           *
\***************************************************************************/




//Flag values that can be ORed in the NV_CFG_STEREO_PARAMS.Flags below
#define STEREOCFG_STEREOACTIVATED   0x80000000
#define STEREOCFG_CONNECTIONTYPE    0x00000077
#define STEREOCFG_ELSADDC           0x00000001
#define STEREOCFG_INTERLACED        0x00000002
#define STEREOCFG_GPIO_0            0x00000004
#define STEREOCFG_GPIO_1            0x00000008
#define STEREOCFG_LINECODE          0x00000010
// syncronisation and other special stuff should be added below here
#define STEREOCFG_WS_OGL_API_STEREO 0x00001000 // is used by workstation OpenGL API stereo 
#define STEREOCFG_FREE_MEMORY       0x00002000 // free memory in interrupt routine to avoid race condition
// common settings
#define STEREOCFG_STEREO_INITIALIZE 0x00004000 // used by NT4/W2K displaydriver to switch on  glasses-toggling
#define STEREOCFG_STEREO_DISABLE    0x00008000 // used by NT4/W2K displaydriver to switch oFF glasses-toggling
#define STEREOCFG_ENTER_ADJACENT    0x00010000 // tells resman that from this moment all allocated stereo surfaces have be double pitched.
#define STEREOCFG_EXIT_ADJACENT     0x00020000 // cancelled the state above.

// Param Structure
typedef struct {
	unsigned long	Flags;
	unsigned long	EyeDisplayed;
	unsigned long	FlipOffsets[4][2];
} NV_CFG_STEREO_PARAMS, *LPNV_CFG_STEREO_PARAMS;

#endif	//_NVRM_STEREO_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\nvtypes.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  Users and possessors of this source code are     *|
|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|
|*     use this code in individual and commercial software.                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|
|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|
|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|
|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|
|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|
|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|
|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|
|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|
|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|
|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|
|*                                                                           *|
|*     U.S. Government  End  Users.   This source code  is a "commercial     *|
|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|
|*     consisting  of "commercial  computer  software"  and  "commercial     *|
|*     computer  software  documentation,"  as such  terms  are  used in     *|
|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|
|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|
|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|
|*     all U.S. Government End Users  acquire the source code  with only     *|
|*     those rights set forth herein.                                        *|
|*                                                                           *|
 \***************************************************************************/


 /***************************************************************************\
|*                                                                           *|
|*                         NV Architecture Interface                         *|
|*                                                                           *|
|*  <nvtypes.h> defines common widths used to access hardware in of NVIDIA's *|
|*  Unified Media Architecture (TM).                                         *|
|*                                                                           *|
 \***************************************************************************/


#ifndef NVTYPES_INCLUDED
#define NVTYPES_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif


/****************************************************************************\
|*    IA64 common defines                                                   *|
\****************************************************************************/

#if defined(H2INC) || ((defined(WIN32) || defined(_WIN32)) && !defined(_WIN32_WINNT)) /* win9x */ || defined(__DJGPP__)
#undef NVRM_64
#else                                             /* all other platforms */
#define NVRM_64 1
#  if defined(_WIN64) || defined(_LINUX64)
#    define NVRM_TRUE64 1
#  endif
#endif

#if defined(linux) || defined(MACOS) || defined(macintosh) || defined(__APPLE_CC__)
#define __int64 long long int
#endif

 /***************************************************************************\
|*                                 Typedefs                                  *|
 \***************************************************************************/

typedef unsigned char      NvV8;  /* "void": enumerated or multiple fields   */
typedef unsigned short     NvV16; /* "void": enumerated or multiple fields   */
typedef unsigned char      NvU8;  /* 0 to 255                                */
typedef unsigned short     NvU16; /* 0 to 65535                              */
typedef signed char        NvS8;  /* -128 to 127                             */
typedef signed short       NvS16; /* -32768 to 32767                         */
typedef float              NvF32; /* IEEE Single Precision (S1E8M23)         */
typedef double             NvF64; /* IEEE Double Precision (S1E11M52)        */

/* mainly for 64-bit linux, where long is 64 bits
 * and win9x, where int is 16 bit.
 */
#if defined(linux)
typedef unsigned int       NvV32; /* "void": enumerated or multiple fields   */
typedef unsigned int       NvU32; /* 0 to 4294967295                         */
typedef signed int         NvS32; /* -2147483648 to 2147483647               */
#else
typedef unsigned long      NvV32; /* "void": enumerated or multiple fields   */
typedef unsigned long      NvU32; /* 0 to 4294967295                         */
typedef signed long        NvS32; /* -2147483648 to 2147483647               */
#endif

 /***************************************************************************\
|*                                                                           *|
|*  64 bit type definitions for use in interface structures.                 *|
|*                                                                           *|
 \***************************************************************************/

#if defined(NVRM_TRUE64)

typedef unsigned __int64   NvV64; /* "void": enumerated or multiple fields   */
typedef unsigned __int64   NvU64; /* 0 to 18446744073709551615               */
typedef __int64            NvS64; /* 2^-63 to 2^63-1                         */
typedef void*              NvP64; /* 64 bit void pointer                     */

typedef NvU64 NvU64_VALUE_T;
typedef NvP64 NvP64_VALUE_T;

#define NvU64_VALUE(n)    (n)
#define NvP64_VALUE(n)    (n)
#define NvP64_SELECTOR(n) (0)

#elif defined(NVRM_64)

typedef unsigned __int64   NvV64; /* "void": enumerated or multiple fields   */
typedef unsigned __int64   NvU64; /* 0 to 18446744073709551615               */
typedef __int64            NvS64; /* 2^-63 to 2^63-1                         */
typedef unsigned __int64   NvP64; /* 64 bit void pointer                     */

typedef NvU64 NvU64_VALUE_T;
typedef NvP64 NvP64_VALUE_T;

#define NvU64_VALUE(n)    (n)
#define NvP64_VALUE(n)    (n)
#define NvP64_SELECTOR(n) (0)

#else

typedef struct {
 NvU32 low;
 NvU32 high;
}                          NvV64; /* "void": enumerated or multiple fields   */
typedef struct {
 NvU32 low;
 NvU32 high;
}                          NvU64; /* 0 to 18446744073709551615               */
typedef struct {
 NvU32 low;
 NvS32 high;
}                          NvS64; /* 2^-63 to 2^63-1                         */
typedef struct {
 NvU32 offset;
 NvU16 selector;
 NvU16 reserved;
}                          NvP64; /* 64 bit void pointer                     */

typedef NvU32 NvP64_VALUE_T;
typedef NvU32 NvU64_VALUE_T;

#define NvU64_VALUE(n)    ((n).low)
#define NvP64_VALUE(n)    ((n).offset)
#define NvP64_SELECTOR(n) ((n).selector)

#endif

 /***************************************************************************\
|*                                                                           *|
|*  64 bit integer definitions for high precision arithmetic.                *|
|*  Ideally, NvU64/NvS64 would be a flat integer on all platforms            *|
|*  but __int64 is not recognized by 16 bit compilers.                       *|
|*                                                                           *|
 \***************************************************************************/

#if (defined(_WIN32) && !defined(H2INC)) || defined(NVRM_64)
typedef unsigned __int64   NvUI64; /* 0 to 18446744073709551615              */
typedef __int64            NvSI64; /* 2^-63 to 2^63-1                        */
#endif

/* obsolete stuff */
typedef NvV8  V008;
typedef NvV16 V016;
typedef NvV32 V032;
typedef NvV64 V064;
typedef NvU8  U008;
typedef NvU16 U016;
typedef NvU32 U032;
typedef NvU64 U064;
typedef NvS8  S008;
typedef NvS16 S016;
typedef NvS32 S032;
typedef NvS64 S064;
typedef NvP64 P064;
typedef NvF32 F032;
typedef NvF64 F064;
#if defined(MACOS) || defined(macintosh) || defined(__APPLE_CC__)
// more obsolete stuff
// need to provide these on macos9 and macosX
typedef unsigned long  ULONG;
typedef unsigned long  DWORD;
typedef unsigned char *PUCHAR;
typedef void           VOID;
typedef void          *PVOID;
typedef void          *HANDLE;
#endif

/* polymorphic 64-bit macros */
#if defined(NVRM_TRUE64)
typedef NvP64 VOID_PTR;
typedef NvU64 NV_UINTPTR_T;
#else
typedef NvU32 VOID_PTR;
typedef NvU32 NV_UINTPTR_T;
#endif

#ifdef __cplusplus
};
#endif
#endif /* NVTYPES_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\XXXrm_unix.h ===
/*
 * this is a hack repository to deal with issues on resman linux port as
 * it matures.
 * Once this file is emptied it can be deleted.
 */

/* XXXTEB these should be somewhere else; probably nvos.h */
typedef unsigned long ULONG;
typedef unsigned char *PUCHAR;
typedef void VOID;
typedef void *PVOID;
typedef void *HANDLE;
/* XXXTEB end */

int XXX_RM_INIT(void);
void XXX_ISR_POLL(void);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\nv4\inc\nvUTypes.h ===
#ifndef NVUTYPES_INCLUDED
#define NVUTYPES_INCLUDED
/*
 * nvutypes.h
 *
 * Copyright (C) 1995,1996 NVIDIA Corporation.
 *
 * This file contains unpacked types corresponding to the packed 32-bit 
 * types in <nv32.h>.  For example, the byte/bit alignment of Nvu1Pt16
 * is the same as required by renderSolidRectangle.Rectangle[0].y_x.
 *
 * If you want to manipulate elements smaller than 32 bits in your code, 
 * use these structures or define similar structures.  But when
 * you make assignments to hardware offsets in the NV Architecture,
 * you must use at least 32-bit wide quantities -- you must perform 
 * 32-bit writes.  You can cast these structures to 32 bits or combine
 * them in a union with pure 32-bit elements.
 *
 * An alternative to using these structures is to store values in your
 * own chosen format, and use the macros in <nvmacros.h> to assemble 
 * them into 32-bit values before writing to the chip.  But such macros 
 * take CPU cycles (except for constant values).
 */

/* Note that in the type names, "u" means unpacked, not "U" for unsigned". */

#ifndef NV32_INCLUDED
#include <nv32.h>                       /* for V008, U032, etc. typedefs */
#endif

typedef short	S016;

typedef struct {
	V008                c0;                               /*0000-0000*/
	V008                reserved01[0x003];                /*0001-0003*/
} Nvu1Color08;
typedef struct {
	V008                c0;                               /*0000-0000*/
	V008                c1;                               /*0001-0001*/
	V008                c2;                               /*0002-0002*/
	V008                c3;                               /*0003-0003*/
} Nvu4Color08;
typedef struct {
	V016                c0;                               /*0000-0001*/
	V016                reserved01[0x001];                /*0002-0003*/
} Nvu1Color16;
typedef struct {
	V016                c0;                               /*0000-0001*/
	V016                c1;                               /*0002-0003*/
} Nvu2Color16;
typedef struct {
	V032                c0;                               /*0000-0003*/
} Nvu1Color32;
typedef union {
	Nvu1Color08         v008;                             /*0000-0003*/
	Nvu1Color16         v016;                             /*0000-0003*/
	Nvu1Color32         v032;                             /*0000-0003*/
	V032                p;                                /*0000-0003*/
} Nvu1Color;

typedef union {
	Nvu4Color08         v_4_008;                          /*0000-0003*/
	Nvu2Color16         v_2_016;                          /*0000-0003*/
	Nvu1Color32         v_1_032;                          /*0000-0003*/
	Nvu1Color16         v_1_016;                          /*0000-0003*/
	Nvu1Color08         v_1_008;                          /*0000-0003*/
	V032                p;                                /*0000-0003*/
} NvuColor;

typedef struct {
	U016                fractHertz;                       /*0000-0001*/
	U016                intHertz;                         /*0002-0003*/
} NvuHertz;

typedef struct {
	U016                fractPart;                        /*0000-0001*/
	U016                intPart;                          /*0002-0003*/
} NvuFract;

typedef struct {
	S016                x;                                /*0000-0001*/
	S016                y;                                /*0002-0003*/
	U016                w;                                /*0004-0005*/
	U016                h;                                /*0006-0007*/
} NvuRect16;

typedef struct {
	S016                x;                                /*0000-0001*/
	S016                y;                                /*0002-0003*/
} Nvu1Pt16;

typedef struct {
	U016                w;                                /*0000-0001*/
	U016                h;                                /*0002-0003*/
} NvuDim16;

typedef struct {
	S016                x0;                               /*0000-0001*/
	S016                y0;                               /*0002-0003*/
	S016                x1;                               /*0004-0005*/
	S016                y1;                               /*0006-0007*/
} Nvu2Pt16;

typedef struct {
	S016                x0;                               /*0000-0001*/
	S016                y0;                               /*0002-0003*/
	S016                x1;                               /*0004-0005*/
	S016                y1;                               /*0006-0007*/
	S016                x2;                               /*0008-0009*/
	S016                y2;                               /*000a-000b*/
} Nvu3Pt16;

typedef struct {
	S016                x0;                               /*0000-0001*/
	S016                y0;                               /*0002-0003*/
	S016                x1;                               /*0004-0005*/
	S016                y1;                               /*0006-0007*/
	S016                x2;                               /*0008-0009*/
	S016                y2;                               /*000a-000b*/
	S016                x3;                               /*000c-000d*/
	S016                y3;                               /*000e-000f*/
} Nvu4Pt16;

typedef struct {
	S016                x0;                               /*0000-0001*/
	S016                y0;                               /*0002-0003*/
	S016                x1;                               /*0004-0005*/
	S016                y1;                               /*0006-0007*/
	S016                x2;                               /*0008-0009*/
	S016                y2;                               /*000a-000b*/
	S016                x3;                               /*000c-000d*/
	S016                y3;                               /*000e-000f*/
	S016                x4;                               /*0010-0011*/
	S016                y4;                               /*0012-0013*/
	S016                x5;                               /*0014-0015*/
	S016                y5;                               /*0016-0017*/
	S016                x6;                               /*0018-0019*/
	S016                y6;                               /*001a-001b*/
	S016                x7;                               /*001c-001d*/
	S016                y7;                               /*001e-001f*/
	S016                x8;                               /*0020-0021*/
	S016                y8;                               /*0022-0023*/
} Nvu9Pt16;


#endif /* NVUTYPES_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\NvViewer.h ===
/***************************************************************************\
* Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.            *
* THE INFORMATION CONTAINED HEREIN IS PROPRIETARY AND CONFIDENTIAL TO       *
* NVIDIA, CORPORATION.  USE, REPRODUCTION OR DISCLOSURE TO ANY THIRD PARTY  *
* IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORPORATION.                *
*                                                                           *
*  Portions: Copyright (C) 1995 Microsoft Corporation.  All Rights Reserved.*
*                                                                           *
* Module: NvViewer.h                                                        *
*                                                                           *
*****************************************************************************
*                                                                           *
* History:                                                                  *
*       Andrei Osnovich    10/04/2000  Created                              *
*                                                                           *
\***************************************************************************/

#ifndef _NVVIEWER_H_
#define _NVVIEWER_H_

#define NVSTEREO_IMAGE_SIGNATURE 0x4433564e //NV3D
typedef struct  _Nv_Stereo_Image_Header
{
    DWORD   dwSignature;
    DWORD   dwWidth;
    DWORD   dwHeight;
    DWORD   dwBPP;
    DWORD   dwSwapEyes;
} NVSTEREOIMAGEHEADER, *LPNVSTEREOIMAGEHEADER;

//Stereo image viewing mode
#define FULL_SCREEN         0
#define WINDOWED            1
#define WINDOWED_FIT        2

// Mesage handling mode
#define INTERNAL_MESSAGING  0x00000000
#define EXTERNAL_MESSAGING  0x00000001
#define FRAMES_TIMED 0x80000000
#define SECONDS_PER_FRAME(x) (FRAMES_TIMED | ((x & 0x7F) << 24))
#define SECONDS_IN_FLAGS(x) (x & FRAMES_TIMED ? ((x & 0x7f000000) >> 24) : 0)

// Return values from Display(...) and ViewDisplay(...)
#define IV_QUIT 0
#define IV_NEXTIMAGE 1
#define IV_PREVIMAGE 2
#define IV_TRYNEXTIMAGE 3
#define IV_MOVEIMAGE 4

typedef class CStereoImageViewer
{
    /*
     * methods
     */
public:
    virtual DWORD Display (LPVOID pImage, DWORD dwWidth, DWORD dwHeight, DWORD dwBPP, DWORD dwViewMode, DWORD dwMessageMode);
    virtual DWORD Display (char * filename, DWORD dwViewMode, DWORD dwMessageMode);
    virtual DWORD WINAPI DestroyStereoImageViewer(void);

		virtual DWORD ViewSetup(HWND hWnd, DWORD dwWidth = 0xFFFFFFFF, DWORD dwHeight = 0xFFFFFFFF, DWORD dwBPP = 2);
		virtual DWORD ViewDisplay(LPVOID pImage, DWORD dwWidth, DWORD dwHeight, DWORD dwBPP, DWORD dwViewMode, DWORD dwMessageMode);
		virtual DWORD ViewDisplay(char * filename, DWORD dwViewMode, DWORD dwMessageMode);
		virtual DWORD ViewTakedown();

		virtual void ForceClear(bool bFlag) {m_bForceClear = bFlag;}

    CStereoImageViewer();
    ~CStereoImageViewer();
protected:
		LPDIRECTDRAW7 m_pDD;
		HWND m_hWnd;
		RECT m_rWindowRect;

		DWORD m_dwWidth, m_dwHeight, m_dwBPP;
		bool m_bResetModePerImage, m_bForceClear;

		LPDIRECT3D7 m_pD3D;
    LPDIRECT3DDEVICE7 m_pd3dDevice;
    LPDIRECTDRAWSURFACE7 m_pddsFlipSurface;
    LPDIRECTDRAWSURFACE7 m_pddsBackBuffer;

		HRESULT ISetup(); // Does flip/back buffer setup and connection to d3d
		HRESULT ITakedown();

} CSTEREOIMAGEVIEWER, *LPCSTEREOIMAGEVIEWER;


extern DWORD WINAPI CreateStereoImageViewer(LPCSTEREOIMAGEVIEWER &pStereoImageViewer);

#endif _NVVIEWER_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\nv10\inc\nvMacros.h ===
#ifndef NVMACROS_INCLUDED
#define NVMACROS_INCLUDED
/*
 ****************************************************************************

 Copyright (C) 1994, 1995, 1996 NVIDIA Corporation

 These are suggested macros for working with the NV architecture.
 You can use these as is or modify them for your own needs.

 Note that you can get faster code by handcrafting inline assembler 
 for the packing macros, but this is compiler-dependent.

 ****************************************************************************
 */

#ifndef NV32_INCLUDED
#include <nv32.h>                       /* for V032, U032, etc. typedefs */
#endif

/***** Free Count Macros *****/

/*
 * WAIT_FIFO(psc,nBytes)
 *	The first parameter is a pointer to the subchannel.
 *
 * 	The second parameter is the number of _bytes_ the application 
 *	wants to write. This is 4 times the number of 32-bit writes,
 *	or you can use the sizeof() function to determine the size
 *	of the argument of each method invoked.
 *
 */
#define WAIT_FIFO(psc,nBytes)     while((psc)->control.free<(nBytes))


/*
 * WAIT_FREE(psc,nBytes, localFree)
 *  This stores the free count.
 *
 *  The first parameter is a pointer to the subchannel.
 *
 * 	The second parameter is the number of _bytes_ the application 
 *  wants to write. This is 4 times the number of 32-bit writes,
 *  or you can use the sizeof() function to determine the size
 *  of the argument of each method invoked.
 *
 *	The third parameter is a variable to hold a local saved
 *	copy of the free count.  As the application invokes methods,
 *	it should decrement this by the number of _bytes_ written.
 *
 */
#ifdef DEBUG  
#define WAIT_FREE(psc, nBytes, localFree) \
	assert((nBytes) < NV_GUARANTEED_FIFO_SIZE); \
	assert((psc) != 0); \
	/* keep reading free count until it rises */ \
	while ((localFree) < (nBytes)) { \
		(localFree) = (psc)->control.free; \
	}
#else 
#define WAIT_FREE(psc, nBytes, localFree) \
	/* keep reading free count until it rises */ \
	while ((localFree) < (nBytes)) { \
		(localFree) = (psc)->control.free; \
	}
#endif /* DEBUG */

/***************************************************************************
 *                          Packing Macros                                 *
 ***************************************************************************/


/***** Coordinates *****/

/* Pack two Signed 16-bit coordinates. Mustn't sign-extend */
#define PACK_XY(x,y)    ((V032)((((U032)(y))<<16)|(((U032)(x))&0x0000FFFF)) )

/* Pack two Unsigned 16-bit dimensions */
#define PACK_WH(w,h)    ((V032)((((U032)(h))<<16)|(((U032)(w))&0x0000FFFF)) )

/***** Colors *****/

/* Pack 1-bit Alpha and 5-bit R,G,B values into NV_COLOR_FORMAT_LE_X16A1R5G5B5  */
#define PACK_ARGB15(a,r,g,b) \
            ((V032)((((a)?(1<<15):0))|(((U032)(r)&0x1F)<<10)|\
            (((U032)(g)&0x1F)<<5)|((U032)(b)&0x1F)))

/* Pack 5-bit R,G,B values into NV_COLOR_FORMAT_LE_X17R5G5B5 */
#define PACK_RGB15(r,g,b)   (PACK_ARGB15(0,r,g,b))

/* Pack three 8-bit R,G,B values into NV_COLOR_FORMAT_LE_X8R8G8B8 */
#define PACK_RGB24(r,g,b)   \
            ((V032)((((U032)(r)&0xFF)<<16)|\
            (((U032)(g)&0xFF)<<8)|((U032)(b)&0xFF)))

/* Pack 8-bit Alpha and 8-bit R,G,B values into NV_COLOR_FORMAT_LE_A8R8G8B8 */
#define PACK_ARGB24(a,r,g,b)    \
            ((V032)((((U032)(a))<<24)|(((U032)(r)&0xFF)<<16)|\
            (((U032)(g)&0xFF)<<8)|((U032)(b)&0xFF)))

/* Pack three 10-bit R,G,B values into NV_COLOR_FORMAT_LE_X2R10G10B10 */
#define PACK_RGB30(r,g,b)   \
            ((V032)((((U032)(r)&0x3FF)<<20)|\
            (((U032)(g)&0x3FF)<<10)|((U032)(b)&0x3FF)))

/* Pack 2-bit Alpha and 10-bit R,G,B values into NV_COLOR_FORMAT_LE_A2R10G10B10 */
#define PACK_ARGB30(a,r,g,b)    \
            ((V032)(((U032)(a)<<30)|(((U032)(r)&0x3FF)<<20)|\
            (((U032)(g)&0x3FF)<<10)|((U032)(b)&0x3FF)))

/***** Fractions *****/

/* Make unsigned 16.16 fraction from a whole number (integer or float) */
#define MAKE_FRACT16(num)   ((V032)((num)*(1<<16)))

/* Make unsigned 8.24 fraction from whole number (integer or float) */
#define MAKE_FRACT24(num)   ((V032)((num)*(1<<24)))

#endif /* NVMACROS_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\inc\rddapi.inc ===
;==============================================================================
;
; Copyright (C) 1998, Nvidia Corporation
;
; File:         rddapi.inc
;
; Purpose:      This file holds the interface description for both
;               the minivdd and the resman's Register Display Driver
;               API. Register Display Driver is a private API between
;               16bit land and the driver components.
;==============================================================================

; To call the API, set:
; eax = VDD_REGISTER_DISPLAY_DRIVER_INFO  (defined in minivdd.inc)
; ebx = system VM handle
; ecx = one of the equates below
;
; Other register settings depend upon the value in ecx.

; These services are in the RegisterDisplayDriver function in the
; resman. They are services needed by the hardware specific portion
; of the display driver.

MVDD_GET_LOGDEV_SHARED_MEMORY                   EQU     8764FFFFH
MVDD_ALLOC_LINEAR_ADDRESS_SPACE                 EQU     87650000H
MVDD_FREE_LINEAR_ADDRESS_SPACE                  EQU     87650001H
MVDD_COPY_PTES_FOR_LINEAR_RANGE                 EQU     87650002H

; These services are in the RegisterDisplayDriver function in the
; minivdd. They are services needed by the generic portion of the
; display driver.
MVDD_SET_LOCK_AND_UNLOCK_OFFSCREEN_FUNCS        EQU     87650003H
MVDD_ALLOC_MEMORY_BLOCK                         EQU     87650004H
MVDD_FREE_MEMORY_BLOCK                          EQU     87650005H
MVDD_REENUMERATE_DEVNODE                        EQU     87650006H
MVDD_SET_POWER_MANAGEMENT_CALLBACKS             EQU     87650007H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\nv4\inc\nvntioctl.h ===
// NT client IOCTLs

// NV graphics device driver string
#define NVRM_NAME_STRING L"\\Device\\nvgfx"
#define NVRM_LINK_STRING L"\\DosDevices\\nvgfx"

// device type and base control code
#define FILE_DEVICE_NVRM 	0x00008000
#define NVRM_IOCTL_INDEX 	0x00000800
#define NV_IOCTL_CODE(f)		  	\
	CTL_CODE(                   	\
		FILE_DEVICE_NVRM+(f),   	\
		NVRM_IOCTL_INDEX,     		\
		METHOD_BUFFERED,        	\
		FILE_ANY_ACCESS         	\
	)

// control codes
#define NV1_IOCTL_GET_DEVICE_OS_NAME		NV_IOCTL_CODE(0x0001)
//#define NV1_IOCTL_FREE  					NV_IOCTL_CODE(NV1_FREE)
#define NV1_IOCTL_ALLOC_CONTEXT_DMA  		NV_IOCTL_CODE(0x0002)
#define NV1_IOCTL_FREE_CONTEXT_DMA  		NV_IOCTL_CODE(0x0003)
#define NV3_IOCTL_ALLOC_CHANNEL_PIO  		NV_IOCTL_CODE(0x0008)
#define NV3_IOCTL_FREE_CHANNEL_PIO  		NV_IOCTL_CODE(0x0009)
#define NV3_IOCTL_ALLOC_CHANNEL_DMA  		NV_IOCTL_CODE(0x0007)
//#define NV3_IOCTL_ALLOC_CHANNEL_DMA  		NV_IOCTL_CODE(NV3_ALLOC_CHANNEL_DMA)
#define NV3_IOCTL_FREE_CHANNEL_DMA  		NV_IOCTL_CODE(0x000B)
#define NV3_IOCTL_DMA_FLOW_CONTROL  		NV_IOCTL_CODE(0x00FF)
//#define NV3_IOCTL_DMA_FLOW_CONTROL  		NV_IOCTL_CODE(NV3_DMA_FLOW_CONTROL)
#define NV1_IOCTL_ALLOC_MEMORY  			NV_IOCTL_CODE(0x000E)
#define NV1_IOCTL_FREE_MEMORY  				NV_IOCTL_CODE(0x000F)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\nv4\inc\nvMacros.h ===
#ifndef NVMACROS_INCLUDED
#define NVMACROS_INCLUDED
/*
 ****************************************************************************

 Copyright (C) 1994, 1995, 1996 NVIDIA Corporation

 These are suggested macros for working with the NV architecture.
 You can use these as is or modify them for your own needs.

 Note that you can get faster code by handcrafting inline assembler 
 for the packing macros, but this is compiler-dependent.

 ****************************************************************************
 */

#ifndef NV32_INCLUDED
#include <nv32.h>                       /* for V032, U032, etc. typedefs */
#endif

/***** Free Count Macros *****/

/*
 * WAIT_FIFO(psc,nBytes)
 *	The first parameter is a pointer to the subchannel.
 *
 * 	The second parameter is the number of _bytes_ the application 
 *	wants to write. This is 4 times the number of 32-bit writes,
 *	or you can use the sizeof() function to determine the size
 *	of the argument of each method invoked.
 *
 */
#define WAIT_FIFO(psc,nBytes)     while((psc)->control.free<(nBytes))


/*
 * WAIT_FREE(psc,nBytes, localFree)
 *  This stores the free count.
 *
 *  The first parameter is a pointer to the subchannel.
 *
 * 	The second parameter is the number of _bytes_ the application 
 *  wants to write. This is 4 times the number of 32-bit writes,
 *  or you can use the sizeof() function to determine the size
 *  of the argument of each method invoked.
 *
 *	The third parameter is a variable to hold a local saved
 *	copy of the free count.  As the application invokes methods,
 *	it should decrement this by the number of _bytes_ written.
 *
 */
#ifdef DEBUG  
#define WAIT_FREE(psc, nBytes, localFree) \
	assert((nBytes) < NV_GUARANTEED_FIFO_SIZE); \
	assert((psc) != 0); \
	/* keep reading free count until it rises */ \
	while ((localFree) < (nBytes)) { \
		(localFree) = (psc)->control.free; \
	}
#else 
#define WAIT_FREE(psc, nBytes, localFree) \
	/* keep reading free count until it rises */ \
	while ((localFree) < (nBytes)) { \
		(localFree) = (psc)->control.free; \
	}
#endif /* DEBUG */

/***************************************************************************
 *                          Packing Macros                                 *
 ***************************************************************************/


/***** Coordinates *****/

/* Pack two Signed 16-bit coordinates. Mustn't sign-extend */
#define PACK_XY(x,y)    ((V032)((((U032)(y))<<16)|(((U032)(x))&0x0000FFFF)) )

/* Pack two Unsigned 16-bit dimensions */
#define PACK_WH(w,h)    ((V032)((((U032)(h))<<16)|(((U032)(w))&0x0000FFFF)) )

/***** Colors *****/

/* Pack 1-bit Alpha and 5-bit R,G,B values into NV_COLOR_FORMAT_LE_X16A1R5G5B5  */
#define PACK_ARGB15(a,r,g,b) \
            ((V032)((((a)?(1<<15):0))|(((U032)(r)&0x1F)<<10)|\
            (((U032)(g)&0x1F)<<5)|((U032)(b)&0x1F)))

/* Pack 5-bit R,G,B values into NV_COLOR_FORMAT_LE_X17R5G5B5 */
#define PACK_RGB15(r,g,b)   (PACK_ARGB15(0,r,g,b))

/* Pack three 8-bit R,G,B values into NV_COLOR_FORMAT_LE_X8R8G8B8 */
#define PACK_RGB24(r,g,b)   \
            ((V032)((((U032)(r)&0xFF)<<16)|\
            (((U032)(g)&0xFF)<<8)|((U032)(b)&0xFF)))

/* Pack 8-bit Alpha and 8-bit R,G,B values into NV_COLOR_FORMAT_LE_A8R8G8B8 */
#define PACK_ARGB24(a,r,g,b)    \
            ((V032)((((U032)(a))<<24)|(((U032)(r)&0xFF)<<16)|\
            (((U032)(g)&0xFF)<<8)|((U032)(b)&0xFF)))

/* Pack three 10-bit R,G,B values into NV_COLOR_FORMAT_LE_X2R10G10B10 */
#define PACK_RGB30(r,g,b)   \
            ((V032)((((U032)(r)&0x3FF)<<20)|\
            (((U032)(g)&0x3FF)<<10)|((U032)(b)&0x3FF)))

/* Pack 2-bit Alpha and 10-bit R,G,B values into NV_COLOR_FORMAT_LE_A2R10G10B10 */
#define PACK_ARGB30(a,r,g,b)    \
            ((V032)(((U032)(a)<<30)|(((U032)(r)&0x3FF)<<20)|\
            (((U032)(g)&0x3FF)<<10)|((U032)(b)&0x3FF)))

/***** Fractions *****/

/* Make unsigned 16.16 fraction from a whole number (integer or float) */
#define MAKE_FRACT16(num)   ((V032)((num)*(1<<16)))

/* Make unsigned 8.24 fraction from whole number (integer or float) */
#define MAKE_FRACT24(num)   ((V032)((num)*(1<<24)))

#endif /* NVMACROS_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\ntos\video\nv20\sdk\nvidia\nv4\inc\nvosnt.h ===
/***************************************************************************\
|*                                                                           *|
|*        Copyright (c) 1993-1997 NVIDIA, Corp.  All rights reserved.        *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.   NVIDIA, Corp. of Sunnyvale, California owns     *|
|*     the copyright  and as design patents  pending  on the design  and     *|
|*     interface  of the NV chips.   Users and possessors of this source     *|
|*     code are hereby granted  a nonexclusive,  royalty-free  copyright     *|
|*     and  design  patent license  to use this code  in individual  and     *|
|*     commercial software.                                                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*     Copyright (c) 1993-1997  NVIDIA, Corp.    NVIDIA  design  patents     *|
|*     pending in the U.S. and foreign countries.                            *|
|*                                                                           *|
|*     NVIDIA, CORP.  MAKES  NO REPRESENTATION ABOUT  THE SUITABILITY OF     *|
|*     THIS SOURCE CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT     *|
|*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORP. DISCLAIMS     *|
|*     ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,  INCLUDING  ALL     *|
|*     IMPLIED   WARRANTIES  OF  MERCHANTABILITY  AND   FITNESS   FOR  A     *|
|*     PARTICULAR  PURPOSE.   IN NO EVENT SHALL NVIDIA, CORP.  BE LIABLE     *|
|*     FOR ANY SPECIAL, INDIRECT, INCIDENTAL,  OR CONSEQUENTIAL DAMAGES,     *|
|*     OR ANY DAMAGES  WHATSOEVER  RESULTING  FROM LOSS OF USE,  DATA OR     *|
|*     PROFITS,  WHETHER IN AN ACTION  OF CONTRACT,  NEGLIGENCE OR OTHER     *|
|*     TORTIOUS ACTION, ARISING OUT  OF OR IN CONNECTION WITH THE USE OR     *|
|*     PERFORMANCE OF THIS SOURCE CODE.                                      *|
|*                                                                           *|
 \***************************************************************************/

 

 /***************************************************************************\
|*                                                                           *|
|*                         NV Architecture Interface                         *|
|*                                                                           *|
|*  <nvos.h>  defines the Operating System function and ioctl interfaces to  *|
|*  NVIDIA's Unified Media Architecture (TM).                                *|
|*                                                                           *|
 \***************************************************************************/


#ifndef NVOS_INCLUDED
#define NVOS_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif

#include <nvtypes.h>


 /***************************************************************************\
|*                              NV OS Functions                              *|
 \***************************************************************************/


/* macro NvOpen() */
/* values */
#define NVOPEN_STATUS_SUCCESS                            (0x00000000)
#define NVOPEN_STATUS_ERROR_OPERATING_SYSTEM             (0x00000001)

/* macro for NT Mini-Port driver */
#ifdef NTMINIPORT
#include <ntddk.h>
#include <windef.h>
typedef struct                                                                \
{                                                                              \
    PFILE_OBJECT   pFileObject;                                                \
    PDEVICE_OBJECT pDeviceObject